#!/usr/bin/env python3
"""
–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≤–æ–≥–æ –º–µ–Ω—é
"""

import os
import re


def check_current_menu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ú–ï–ù–Æ")
    print("=" * 30)

    base_html_path = "templates/base.html"

    if not os.path.exists(base_html_path):
        print("‚ùå –§–∞–π–ª base.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(base_html_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é
    print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é:")

    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ href –≤ –ª–µ–≤–æ–º –º–µ–Ω—é
    href_pattern = r'href="([^"]+)"[^>]*>\s*<i[^>]*></i>\s*([^<]+)'
    matches = re.findall(href_pattern, content)

    for href, text in matches:
        print(f"   {text.strip()} ‚Üí {href}")

    return True


def fix_menu_directly():
    """–ü—Ä—è–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"""
    print(f"\nüîß –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ï–ù–Æ")
    print("=" * 35)

    base_html_path = "templates/base.html"

    with open(base_html_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = base_html_path + ".backup_direct"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    replacements = [
        # –ü–∞—Ü–∏–µ–Ω—Ç—ã - –¥–æ–ª–∂–Ω—ã –≤–µ—Å—Ç–∏ –Ω–∞ /patients
        (r'href="/ztl"([^>]*>\s*<i[^>]*></i>\s*–ü–∞—Ü–∏–µ–Ω—Ç—ã)', r'href="/patients"\1'),
        # –§–∏–Ω–∞–Ω—Å—ã - –¥–æ–ª–∂–Ω—ã –≤–µ—Å—Ç–∏ –Ω–∞ /finance_report
        (r'href="[^"]*"([^>]*>\s*<i[^>]*></i>\s*–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π\s*–æ—Ç—á–µ—Ç)', r'href="/finance_report"\1'),
        # –£—Å–ª—É–≥–∏ - –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        (r'href="/add_service"([^>]*>\s*<i[^>]*></i>\s*–£—Å–ª—É–≥–∏)', r'href="/services"\1'),
    ]

    changes_made = 0
    for pattern, replacement in replacements:
        old_content = content
        content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        if content != old_content:
            changes_made += 1
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {pattern[:30]}...")

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–º–µ–Ω—É
    if changes_made == 0:
        print("‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∞–µ–º –ø—Ä—è–º—É—é –∑–∞–º–µ–Ω—É...")

        # –ü—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞ –≤—Å–µ–≥–æ –ª–µ–≤–æ–≥–æ –º–µ–Ω—é
        new_menu = """                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link" href="/">
                            <i class="fas fa-calendar-alt"></i> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/patients">
                            <i class="fas fa-users"></i> –ü–∞—Ü–∏–µ–Ω—Ç—ã
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/doctors">
                            <i class="fas fa-user-md"></i> –í—Ä–∞—á–∏
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/tasks">
                            <i class="fas fa-list"></i> –ó–∞–¥–∞—á–∏
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/partners">
                            <i class="fas fa-handshake"></i> –°–æ–æ–±—â–µ–Ω–∏—è
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/data_tools">
                            <i class="fas fa-door-open"></i> –ö–∞–±–∏–Ω–µ—Ç—ã
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/services">
                            <i class="fas fa-plus"></i> –£—Å–ª—É–≥–∏
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/ztl">
                            <i class="fas fa-upload"></i> –ó–¢–õ
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/partners">
                            <i class="fas fa-handshake"></i> –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/finance_report">
                            <i class="fas fa-ruble-sign"></i> –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/logs">
                            <i class="fas fa-file-alt"></i> –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
                        </a>
                    </li>

                    <li class="nav-item">
                        <a class="nav-link" href="/export_data">
                            <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç
                        </a>
                    </li>
                </ul>"""

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π <ul class="nav flex-column"> –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
        ul_pattern = r'<ul class="nav flex-column">.*?</ul>'
        if re.search(ul_pattern, content, re.DOTALL):
            content = re.sub(ul_pattern, new_menu, content, flags=re.DOTALL)
            changes_made += 1
            print("‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –≤—Å–µ –º–µ–Ω—é —Ü–µ–ª–∏–∫–æ–º")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–º–µ–Ω—ã")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(base_html_path, "w", encoding="utf-8") as f:
        f.write(content)

    print(f"‚úÖ –°–¥–µ–ª–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changes_made}")
    return changes_made > 0


def check_routes_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 25)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes_to_check = [
        ("/patients", "patients"),
        ("/finance_report", "finance_report"),
        ("/doctors", "doctors"),
        ("/services", "services"),
    ]

    print("üìã –°—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
    missing_routes = []

    for route, func_name in routes_to_check:
        route_exists = f"@app.route('{route}')" in content or f'@app.route("{route}")' in content
        func_exists = f"def {func_name}(" in content

        status = "‚úÖ" if route_exists and func_exists else "‚ùå"
        print(f"   {status} {route} ‚Üí {func_name}()")

        if not (route_exists and func_exists):
            missing_routes.append((route, func_name))

    return missing_routes


def add_missing_routes_quick():
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print(f"\nüîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 40)

    missing_routes = check_routes_exist()

    if not missing_routes:
        print("‚úÖ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return True

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes_code = ""

    for route, func_name in missing_routes:
        if route == "/patients" and func_name == "patients":
            routes_code += '''
@app.route('/patients')
@login_required
def patients():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    try:
        patients_list = list(db.patients.find().sort('full_name', 1))
        for patient in patients_list:
            patient['_id'] = str(patient['_id'])
            patient['appointments_count'] = db.appointments.count_documents({
                'patient_id': patient['_id']
            })
        return render_template('patients.html', patients=patients_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}', 'error')
        return render_template('patients.html', patients=[])
'''
        elif route == "/services" and func_name == "services":
            routes_code += '''
@app.route('/services')
@login_required
def services():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    try:
        services_list = list(db.services.find({'is_active': True}).sort('name', 1))
        return render_template('services.html', services=services_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥: {str(e)}', 'error')
        return render_template('services.html', services=[])
'''

    if routes_code:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        pattern = r'(if __name__ == ["\']__main__["\']:.*)'
        match = re.search(pattern, content, re.DOTALL)

        if match:
            content = content.replace(match.group(1), routes_code + "\n\n" + match.group(1))
        else:
            content += routes_code

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(main_py_path, "w", encoding="utf-8") as f:
            f.write(content)

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã: {[route for route, _ in missing_routes]}")

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–†–Ø–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –ù–ê–í–ò–ì–ê–¶–ò–ò")
    print("=" * 45)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
    check_current_menu()

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    if fix_menu_directly():
        print("‚úÖ –ú–µ–Ω—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é")

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    add_missing_routes_quick()

    print(f"\n{'='*45}")
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´!")
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: Ctrl+C, –∑–∞—Ç–µ–º python main.py")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–µ–≤–æ–µ –º–µ–Ω—é:")
    print("   - '–ü–∞—Ü–∏–µ–Ω—Ç—ã' ‚Üí –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å /patients")
    print("   - '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç' ‚Üí –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å /finance_report")
    print("   - '–í—Ä–∞—á–∏' ‚Üí –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å /doctors")
    print("\nüìù –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
    print("- –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –ª–µ–≤–æ–º –º–µ–Ω—é")
    print("- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")
    print("- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º")


if __name__ == "__main__":
    main()
