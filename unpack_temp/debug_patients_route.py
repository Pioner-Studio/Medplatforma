#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ /patients
"""

import os
import re


def analyze_patients_route():
    """–ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ /patients"""
    print("üîç –ê–ù–ê–õ–ò–ó –ú–ê–†–®–†–£–¢–ê /PATIENTS")
    print("=" * 35)

    main_py_path = "main.py"

    if not os.path.exists(main_py_path):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ /patients
    patterns = [
        r"@app\.route\([\'\"]/patients[\'\"]\).*?def\s+(\w+)\s*\(",
        r"def\s+(\w+)\s*\([^)]*\):[^@]*@app\.route\([\'\"]/patients[\'\"]\)",
    ]

    patients_routes = []
    lines = content.split("\n")

    for i, line in enumerate(lines):
        if "/patients" in line and "@app.route" in line:
            # –ù–∞–π–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            for j in range(i + 1, min(i + 10, len(lines))):
                if "def " in lines[j]:
                    func_name = re.search(r"def\s+(\w+)\s*\(", lines[j])
                    if func_name:
                        patients_routes.append(
                            {
                                "line": i + 1,
                                "route_line": line.strip(),
                                "func_line": lines[j].strip(),
                                "func_name": func_name.group(1),
                            }
                        )
                    break

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(patients_routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤ /patients:")
    for route in patients_routes:
        print(f"   –°—Ç—Ä–æ–∫–∞ {route['line']}: {route['route_line']}")
        print(f"   –§—É–Ω–∫—Ü–∏—è: {route['func_line']}")
        print()

    return patients_routes


def check_login_required_issue():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å @login_required"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° @LOGIN_REQUIRED")
    print("=" * 40)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ login_required
    if "def login_required(" in content:
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä login_required –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
    else:
        print("‚ùå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä login_required –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –ò—â–µ–º –∏–º–ø–æ—Ä—Ç session
    if "from flask import" in content and "session" in content:
        print("‚úÖ session –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ö†Ô∏è session –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

    # –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ session –≤ login_required
    login_required_pattern = r"def login_required\([^)]*\):(.*?)(?=def|\Z)"
    match = re.search(login_required_pattern, content, re.DOTALL)

    if match:
        func_body = match.group(1)
        if "session" in func_body:
            print("‚úÖ login_required –∏—Å–ø–æ–ª—å–∑—É–µ—Ç session")
        else:
            print("‚ùå login_required –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç session")

        if "redirect" in func_body and "login" in func_body:
            print("‚úÖ login_required –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ login")
        else:
            print("‚ö†Ô∏è login_required –º–æ–∂–µ—Ç –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

    return True


def create_simple_patients_route():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ /patients –±–µ–∑ @login_required –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–û–ì–û –ú–ê–†–®–†–£–¢–ê /PATIENTS")
    print("=" * 45)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = main_py_path + ".backup_patients_debug"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã /patients
    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ @app.route('/patients') ... def function():
    pattern = r"@app\.route\([\'\"]/patients[\'\"]\)[^\n]*\n(?:@[^\n]*\n)*def\s+\w+\s*\([^)]*\):[^@]*?(?=@app\.route|if __name__|$)"

    matches = list(re.finditer(pattern, content, re.DOTALL))
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(matches)} –±–ª–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
    for match in reversed(matches):
        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º –±–ª–æ–∫: {match.group(0)[:50]}...")
        content = content[: match.start()] + content[match.end() :]

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ @login_required
    new_patients_route = '''
# === –ü–†–û–°–¢–û–ô –ú–ê–†–®–†–£–¢ /PATIENTS –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
@app.route('/patients')
def patients():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
        patients_list = list(db.patients.find().limit(10))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫–∏
        for patient in patients_list:
            patient['_id'] = str(patient['_id'])

        # –ï—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
        try:
            return render_template('patients.html', patients=patients_list)
        except:
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML
            html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <title>–ü–∞—Ü–∏–µ–Ω—Ç—ã</title>
                <style>
                    body {{ font-family: Arial; margin: 20px; }}
                    table {{ border-collapse: collapse; width: 100%; }}
                    th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                    th {{ background-color: #f2f2f2; }}
                    .btn {{ background: #007bff; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }}
                </style>
            </head>
            <body>
                <h1>–°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</h1>
                <p>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients_list)}</p>

                <table>
                    <tr>
                        <th>ID</th>
                        <th>–ò–º—è</th>
                        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                        <th>Email</th>
                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
            """

            for patient in patients_list:
                name = patient.get('full_name', patient.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
                phone = patient.get('phone', '‚Äî')
                email = patient.get('email', '‚Äî')

                html += f"""
                    <tr>
                        <td>{patient['_id']}</td>
                        <td>{name}</td>
                        <td>{phone}</td>
                        <td>{email}</td>
                        <td><a href="/patients/{patient['_id']}" class="btn">–ö–∞—Ä—Ç–æ—á–∫–∞</a></td>
                    </tr>
                """

            html += """
                </table>
                <br>
                <a href="/" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</a>
            </body>
            </html>
            """

            return html

    except Exception as e:
        return f"""
        <h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</h1>
        <p>–û—à–∏–±–∫–∞: {str(e)}</p>
        <a href="/">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</a>
        """
'''

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
    pattern = r'(if __name__ == ["\']__main__["\']:.*)'
    match = re.search(pattern, content, re.DOTALL)

    if match:
        content = content.replace(match.group(1), new_patients_route + "\n\n" + match.group(1))
    else:
        content += new_patients_route

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç /patients")
    return True


def create_patient_card_route():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ú–ê–†–®–†–£–¢–ê –ö–ê–†–¢–û–ß–ö–ò –ü–ê–¶–ò–ï–ù–¢–ê")
    print("=" * 40)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    if "/patients/<" in content and "def patient" in content:
        print("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    card_route = '''
@app.route('/patients/<patient_id>')
def patient_card_simple(patient_id):
    """–ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    try:
        from bson import ObjectId
        patient = db.patients.find_one({'_id': ObjectId(patient_id)})

        if not patient:
            return f"<h1>–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><a href='/patients'>‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>"

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        appointments = list(db.appointments.find({'patient_id': patient_id}).limit(5))

        name = patient.get('full_name', patient.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))

        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞</title>
            <style>
                body {{ font-family: Arial; margin: 20px; }}
                .card {{ border: 1px solid #ddd; padding: 20px; margin: 10px 0; }}
                .btn {{ background: #007bff; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; }}
            </style>
        </head>
        <body>
            <h1>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞</h1>

            <div class="card">
                <h2>{name}</h2>
                <p><strong>ID:</strong> {patient_id}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {patient.get('phone', '‚Äî')}</p>
                <p><strong>Email:</strong> {patient.get('email', '‚Äî')}</p>
                <p><strong>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</strong> {patient.get('birth_date', '‚Äî')}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> {patient.get('address', '‚Äî')}</p>
            </div>

            <div class="card">
                <h3>–ó–∞–ø–∏—Å–∏ ({len(appointments)})</h3>
                <ul>
        """

        for apt in appointments:
            html += f"<li>{apt.get('date', '‚Äî')} –≤ {apt.get('time', '‚Äî')}</li>"

        html += """
                </ul>
            </div>

            <a href="/patients" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</a>
        </body>
        </html>
        """

        return html

    except Exception as e:
        return f"<h1>–û—à–∏–±–∫–∞</h1><p>{str(e)}</p><a href='/patients'>‚Üê –ù–∞–∑–∞–¥</a>"
'''

    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç
    pattern = r'(if __name__ == ["\']__main__["\']:.*)'
    match = re.search(pattern, content, re.DOTALL)

    if match:
        content = content.replace(match.group(1), card_route + "\n\n" + match.group(1))
    else:
        content += card_route

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –û–¢–õ–ê–î–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–ê /PATIENTS")
    print("=" * 50)

    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    analyze_patients_route()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å login_required
    check_login_required_issue()

    # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    create_simple_patients_route()

    # 4. –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    create_patient_card_route()

    print("\n" + "=" * 50)
    print("üéâ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: Ctrl+C, –∑–∞—Ç–µ–º python main.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000/patients")
    print("3. –î–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("4. –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ @login_required")
    print("\nüìù –ß–¢–û –°–î–ï–õ–ê–ù–û:")
    print("- –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã /patients")
    print("- –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ @login_required")
    print("- –î–æ–±–∞–≤–ª–µ–Ω –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML –µ—Å–ª–∏ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞")
    print("- –°–æ–∑–¥–∞–Ω –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    print("- –í—Å–µ —Å –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫")


if __name__ == "__main__":
    main()
