import os
import random
from datetime import datetime, date, time, timedelta

from pymongo import MongoClient
from pymongo.errors import PyMongoError
from bson import ObjectId  # üëà –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞

# =========================
#  Config / DB (via .env)
# =========================
from dotenv import load_dotenv

load_dotenv()


MONGO_URI = os.getenv("MONGO_URI")  # –∏–∑ .env
DB_NAME = os.getenv("DB_NAME", "medplatforma")


def _connect():
    if not MONGO_URI:
        raise RuntimeError("MONGO_URI is not set. Put it into .env")

    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=8000)
    try:
        client.admin.command("ping")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    except PyMongoError as e:
        print(
            "\n[seed] Mongo connection/auth FAILED.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "  1) .env ‚Üí –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MONGO_URI (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)\n"
            "  2) Atlas ‚Üí Network Access: –≤–∞—à IP –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ\n"
            "  3) Atlas ‚Üí Database Access: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—Ä–æ–ª—å\n"
            '  4) –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω dnspython: pip install "pymongo[srv]"\n'
        )
        raise
    return client


client = _connect()
db = client[DB_NAME]

# –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –∏ —à–∞–≥
CLINIC_START = time(9, 0)
CLINIC_END = time(21, 0)
SLOT_MIN = 15  # –º–∏–Ω—É—Ç


# =========================
#  Helpers
# =========================
def align_to_slot(dt: datetime) -> datetime:
    m = (dt.minute // SLOT_MIN) * SLOT_MIN
    return dt.replace(minute=m, second=0, microsecond=0)


def in_hours(dt: datetime) -> bool:
    t = dt.time()
    return CLINIC_START <= t <= CLINIC_END


def has_conflict(
    start: datetime, end: datetime, room_id: ObjectId, doctor_id: ObjectId | None
) -> bool:
    ors = [{"room_id": room_id, "start": {"$lt": end}, "end": {"$gt": start}}]
    if doctor_id:
        ors.append({"doctor_id": doctor_id, "start": {"$lt": end}, "end": {"$gt": start}})
    return db.appointments.find_one({"$or": ors}) is not None


# =========================
#  Seeds
# =========================
def seed_rooms():
    """–®–µ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –±–µ–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–∞ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)."""
    rooms_target = [
        "–î–µ—Ç—Å–∫–∏–π",
        "–û—Ä—Ç–æ–ø–µ–¥–∏—è",
        "–•–∏—Ä—É—Ä–≥–∏—è",
        "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
        "–¢–µ—Ä–∞–ø–∏—è",
        "–ö–∞–±–∏–Ω–µ—Ç 6 (–∫–∞—Å—Ç–æ–º–Ω—ã–π)",
    ]
    # –ø–æ–¥—á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ (–≤ —Ç.—á. ¬´–†–µ–Ω—Ç–≥–µ–Ω¬ª)
    db.rooms.delete_many({"name": {"$nin": rooms_target}})
    for name in rooms_target:
        db.rooms.update_one({"name": name}, {"$set": {"name": name}}, upsert=True)
    print(f"[seed] rooms ‚Üí OK ({len(rooms_target)} —à—Ç.)")


def seed_doctors():
    """–î–µ–º–æ-–≤—Ä–∞—á–∏ (–±–µ–∑ —Ä–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∞). upsert –ø–æ full_name."""
    names_specs = [
        ("–°–º–∏—Ä–Ω–æ–≤ –ü–∞–≤–µ–ª", "–¢–µ—Ä–∞–ø–µ–≤—Ç"),
        ("–ò–≤–∞–Ω–æ–≤–∞ –ê–Ω–Ω–∞", "–•–∏—Ä—É—Ä–≥"),
        ("–ö—É–∑–Ω–µ—Ü–æ–≤ –î–º–∏—Ç—Ä–∏–π", "–û—Ä—Ç–æ–ø–µ–¥"),
        ("–ü–æ–ø–æ–≤–∞ –ú–∞—Ä–∏—è", "–û—Ä—Ç–æ–¥–æ–Ω—Ç"),
        ("–í–æ–ª–∫–æ–≤ –ê—Ä—Ç—ë–º", "–î–µ—Ç—Å–∫–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥"),
        ("–°–æ–∫–æ–ª–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ì–∏–≥–∏–µ–Ω–∏—Å—Ç"),
        ("–õ–µ–±–µ–¥–µ–≤ –°–µ—Ä–≥–µ–π", "–ò–º–ø–ª–∞–Ω—Ç–æ–ª–æ–≥"),
        ("–ö–æ–∑–ª–æ–≤–∞ –Æ–ª–∏—è", "–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥"),
    ]
    for i, (name, spec) in enumerate(names_specs, start=1):
        db.doctors.update_one(
            {"full_name": name},
            {
                "$set": {
                    "full_name": name,
                    "specialization": spec,
                    "email": f"doctor{i}@mail.ru",
                    "phone": f"+7999000{100+i:03d}",
                    "avatar_url": f"/static/avatars/doctor_{(i-1)%6+1}.png",
                    "status": "–∞–∫—Ç–∏–≤–µ–Ω",
                }
            },
            upsert=True,
        )
    print(f"[seed] doctors ‚Üí OK ({len(names_specs)} —à—Ç.)")


def seed_patients():
    """–î–µ–º–æ-–ø–∞—Ü–∏–µ–Ω—Ç—ã. upsert –ø–æ full_name."""
    names = [
        "–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω",
        "–°–∏–¥–æ—Ä–æ–≤–∞ –û–ª—å–≥–∞",
        "–ú–∏—Ö–∞–π–ª–æ–≤ –°–µ—Ä–≥–µ–π",
        "–ï–≥–æ—Ä–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞",
        "–û—Ä–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π",
        "–°–µ–º—ë–Ω–æ–≤–∞ –ú–∞—Ä–∏—è",
        "–í–∞—Å–∏–ª—å–µ–≤ –ê–Ω—Ç–æ–Ω",
        "–ì—Ä–æ–º–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è",
        "–ó–∞–π—Ü–µ–≤ –ê–ª–µ–∫—Å–µ–π",
        "–¢–∏—Ö–æ–Ω–æ–≤–∞ –ò—Ä–∏–Ω–∞",
    ]
    for i, name in enumerate(names, start=1):
        # –ø—Ä–æ—Å—Ç–æ–π birthdate: 1980‚Äì1989, —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ—Å—è—Ü/–¥–µ–Ω—å
        bd = date(1980 + random.randint(0, 9), random.randint(1, 12), random.randint(1, 28))
        db.patients.update_one(
            {"full_name": name},
            {
                "$set": {
                    "full_name": name,
                    "birthdate": bd.isoformat(),
                    "phone": f"+7999000{200+i:03d}",
                    "email": f"patient{i}@mail.ru",
                    "avatar_url": f"/static/avatars/patient_{(i-1)%6+1}.png",
                }
            },
            upsert=True,
        )
    print(f"[seed] patients ‚Üí OK ({len(names)} —à—Ç.)")


def seed_services():
    """
    –ë–∞–∑–æ–≤—ã–µ —É—Å–ª—É–≥–∏ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º code.
    - –ø—Ä–∞–≤–∏–º —Å—Ç–∞—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ code (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ name);
    - —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä (upsert –ø–æ name) —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º code.
    """
    import re
    import random

    def make_code(name: str, suffix: str = "") -> str:
        base = re.sub(r"\W+", "_", (name or "SERVICE").upper()).strip("_")
        return f"SVC_{base}{suffix}"

    # 0) –ò–Ω–¥–µ–∫—Å –Ω–∞ code (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ–≥–æ –Ω–µ—Ç) ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
    try:
        db.services.create_index("code", unique=True)
    except Exception:
        # —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–æ—Ä–º
        pass

    # 1) –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª—É–≥ –±–µ–∑ code –∏–ª–∏ —Å code=None –ø—Ä–æ—Å—Ç–∞–≤–∏–º –∫–æ–¥
    existing = list(
        db.services.find(
            {"$or": [{"code": {"$exists": False}}, {"code": None}]}, {"_id": 1, "name": 1}
        )
    )
    for doc in existing:
        name = doc.get("name") or "SERVICE"
        code = make_code(name)
        # –µ—Å–ª–∏ —Ç–∞–∫–æ–π code —É–∂–µ –µ—Å—Ç—å —É –¥—Ä—É–≥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏–º —Å—É—Ñ—Ñ–∏–∫—Å —Ö–≤–æ—Å—Ç–æ–º _id
        while db.services.find_one({"code": code, "_id": {"$ne": doc["_id"]}}):
            code = make_code(name, suffix=f"_{str(doc['_id'])[-4:]}")
        db.services.update_one({"_id": doc["_id"]}, {"$set": {"code": code}})

    # 2) –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —É—Å–ª—É–≥
    base = [
        ("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 15, 0),
        ("–ü–ª–æ–º–±–∞", 45, 3500),
        ("–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", 60, 5000),
        ("–ì–∏–≥–∏–µ–Ω–∞", 60, 4500),
        ("–ò–º–ø–ª–∞–Ω—Ç–∞—Ü–∏—è", 90, 65000),
    ]

    for name, dur, price in base:
        code = make_code(name)
        # –µ—Å–ª–∏ —Ç–∞–∫–æ–π code –ø–æ—á–µ–º—É-—Ç–æ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–æ–π —É—Å–ª—É–≥–æ–π ‚Äî –¥–æ–±–∞–≤–∏–º —Å—É—Ñ—Ñ–∏–∫—Å
        while db.services.find_one({"code": code, "name": {"$ne": name}}):
            code = make_code(name, suffix=f"_{random.randint(100,999)}")

        db.services.update_one(
            {"name": name},  # upsert –ø–æ –∏–º–µ–Ω–∏ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
            {"$set": {"name": name, "duration_min": int(dur), "price": price, "code": code}},
            upsert=True,
        )

    print(f"[seed] services ‚Üí OK ({len(base)} —à—Ç. + –º–∏–≥—Ä–∞—Ü–∏—è code –¥–ª—è —Å—Ç–∞—Ä—ã—Ö)")


# --- helpers –¥–ª—è –≤—ã–±–æ—Ä–æ–∫ (–¢–û–ü-—É—Ä–æ–≤–µ–Ω—å, –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π!) ---
def _fetch_ids(coll, projection):
    return list(db[coll].find({}, projection))


def seed_appointments(count: int = 24):
    """
    –î–µ–º–æ-–ø—Ä–∏—ë–º—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤, 15-–º–∏–Ω –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å, –æ–∫–Ω–æ 09:00‚Äì21:00.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç rooms/doctors/patients/services –∏–∑ –ë–î.
    """
    # —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
    rooms = _fetch_ids("rooms", {"_id": 1, "name": 1})
    doctors = _fetch_ids("doctors", {"_id": 1, "full_name": 1})
    patients = _fetch_ids("patients", {"_id": 1, "full_name": 1})
    services = list(db.services.find({}, {"_id": 1, "name": 1, "duration_min": 1}))

    if not rooms or not doctors or not patients or not services:
        print("[seed] appointments ‚Üí SKIP (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞—Ö)")
        return

    # –æ—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–º–æ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –≤—Å—ë)
    db.appointments.delete_many({})

    today = date.today()
    monday = today - timedelta(days=today.weekday())
    rng = random.Random(42)

    created = 0
    attempts = 0
    while created < count and attempts < count * 15:
        attempts += 1

        room = rng.choice(rooms)
        doctor = rng.choice(doctors)
        patient = rng.choice(patients)
        service = rng.choice(services)

        # —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å –ø–Ω‚Äì—Å–±
        day_offset = rng.randint(0, 5)
        base_day = monday + timedelta(days=day_offset)

        # —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è, –∫—Ä–∞—Ç–Ω–æ–µ 15 –º–∏–Ω, –≤ –æ–∫–Ω–µ 09:00‚Äì21:00
        hour = rng.randint(9, 20)  # –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ä—Ç ‚Äî 20:xx
        minute = rng.choice([0, 15, 30, 45])
        start = datetime.combine(base_day, time(hour, minute))
        start = align_to_slot(start)

        dur = int(service.get("duration_min") or SLOT_MIN)
        if dur < SLOT_MIN:
            dur = SLOT_MIN
        dur = ((dur + SLOT_MIN - 1) // SLOT_MIN) * SLOT_MIN  # –∫—Ä–∞—Ç–Ω–æ 15
        end = start + timedelta(minutes=dur)

        if not (in_hours(start) and in_hours(end)):
            continue

        room_id: ObjectId = room["_id"]
        doctor_id: ObjectId = doctor["_id"]
        patient_id: ObjectId = patient["_id"]
        service_id: ObjectId = service["_id"]

        if has_conflict(start, end, room_id, doctor_id):
            continue

        db.appointments.insert_one(
            {
                "start": start,
                "end": end,
                "room_id": room_id,
                "doctor_id": doctor_id,
                "patient_id": patient_id,
                "service_id": service_id,
                "status": "scheduled",
                "note": f"–î–µ–º–æ-–∑–∞–ø–∏—Å—å (seed) {created+1}",
                "created_at": datetime.utcnow(),
            }
        )
        created += 1

    print(f"[seed] appointments ‚Üí OK (—Å–æ–∑–¥–∞–Ω–æ: {created})")


# =========================
#  Main
# =========================
if __name__ == "__main__":
    import traceback

    print("[seed] __file__:", __file__)
    print("[seed] cwd     :", os.getcwd())
    print("[seed] target DB:", DB_NAME)

    steps = [
        ("rooms", seed_rooms),
        ("doctors", seed_doctors),
        ("patients", seed_patients),
        ("services", seed_services),
        ("appointments", lambda: seed_appointments(count=24)),
    ]

    for name, fn in steps:
        try:
            print(f"[seed] >>> {name}...")
            fn()
        except Exception as e:
            print(f"[seed] !!! ERROR in {name}: {e}")
            traceback.print_exc()
            raise

    print("[seed] done.")
