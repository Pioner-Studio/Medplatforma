#!/usr/bin/env python3
"""
–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors
"""

import os


def remove_duplicate_doctors_function():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors –Ω–∞ —Å—Ç—Ä–æ–∫–µ 3721"""
    print("üîß –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò DOCTORS")
    print("=" * 45)

    main_py_path = "main.py"

    if not os.path.exists(main_py_path):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {len(lines)} —Å—Ç—Ä–æ–∫")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = main_py_path + ".backup_final"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.writelines(lines)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é doctors –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ ~3720
    new_lines = []
    skip_lines = False
    doctors_found = 0

    for i, line in enumerate(lines):
        line_num = i + 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å @app.route('/doctors')
        if "@app.route('/doctors')" in line or '@app.route("/doctors")' in line:
            doctors_found += 1
            print(f"üìç –ù–∞–π–¥–µ–Ω –º–∞—Ä—à—Ä—É—Ç doctors –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_num}: {line.strip()}")

            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
            if doctors_found > 1:
                print(f"‚ùå –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç doctors (—Å—Ç—Ä–æ–∫–∞ {line_num})")
                skip_lines = True
                continue

        # –ï—Å–ª–∏ –º—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ @app.route('/doctors')
        if skip_lines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ @app.route –∏–ª–∏ if __name__
            if (
                line.strip().startswith("@app.route") and "/doctors" not in line
            ) or "if __name__" in line:
                print(f"‚úÖ –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å—Ç—Ä–æ–∫–µ {line_num}: {line.strip()}")
                skip_lines = False
                new_lines.append(line)
            else:
                print(f"üóëÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {line_num}: {line.strip()[:50]}...")
                continue
        else:
            new_lines.append(line)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.writelines(new_lines)

    removed_lines = len(lines) - len(new_lines)
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_lines} —Å—Ç—Ä–æ–∫")
    print(f"üìä –ë—ã–ª–æ: {len(lines)} —Å—Ç—Ä–æ–∫, —Å—Ç–∞–ª–æ: {len(new_lines)} —Å—Ç—Ä–æ–∫")

    return True


def verify_no_duplicates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print(f"\nüß™ –ü–†–û–í–ï–†–ö–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í")
    print("=" * 35)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ doctors
    doctors_count = content.count("def doctors(")
    doctors_routes = content.count("@app.route('/doctors')") + content.count(
        '@app.route("/doctors")'
    )

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors: {doctors_count}")
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ /doctors: {doctors_routes}")

    if doctors_count == 1 and doctors_routes == 1:
        print("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç!")
        return True
    else:
        print("‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã!")

        # –ü–æ–∫–∞–∂–µ–º –≥–¥–µ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
        lines = content.split("\n")
        for i, line in enumerate(lines):
            if "def doctors(" in line:
                print(f"   def doctors() –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}: {line.strip()}")
            if "@app.route(" in line and "doctors" in line:
                print(f"   –º–∞—Ä—à—Ä—É—Ç doctors –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}: {line.strip()}")

        return False


def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    print(f"\nüß™ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("=" * 25)

    try:
        import ast

        with open("main.py", "r", encoding="utf-8") as f:
            content = f.read()

        ast.parse(content)
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        return True

    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:")
        print(f"   –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text.strip() if e.text else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –û—à–∏–±–∫–∞: {e.msg}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò DOCTORS")
    print("=" * 60)

    # 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if not remove_duplicate_doctors_function():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    if not verify_no_duplicates():
        print("‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not check_syntax():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º")
        return

    print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–®–ï–ù–ê!")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
    print("python main.py")
    print("\n–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ª–µ–≤–æ–º –º–µ–Ω—é –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å:")
    print("- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    print("- –ü–∞—Ü–∏–µ–Ω—Ç—ã")
    print("- –í—Ä–∞—á–∏")
    print("- –£—Å–ª—É–≥–∏")
    print("- –ö–∞–±–∏–Ω–µ—Ç—ã")
    print("- –§–∏–Ω–∞–Ω—Å—ã")


if __name__ == "__main__":
    main()
