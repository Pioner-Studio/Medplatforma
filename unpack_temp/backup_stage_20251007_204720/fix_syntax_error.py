#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ main.py
"""

import os
import re


def fix_syntax_error():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–û–ô –û–®–ò–ë–ö–ò")
    print("=" * 50)

    main_py_path = "main.py"

    if not os.path.exists(main_py_path):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    print(f"üìÑ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {len(lines)} —Å—Ç—Ä–æ–∫")

    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ 2463
    error_line = 2463
    start_line = max(0, error_line - 10)
    end_line = min(len(lines), error_line + 10)

    print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ {start_line}-{end_line}:")

    fixed_lines = []
    issues_fixed = 0

    for i, line in enumerate(lines):
        line_num = i + 1

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        if start_line <= line_num <= end_line:
            print(f"{line_num:4d}: {repr(line)}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        if line_num == error_line:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
            if line.strip().startswith('if kind == "payment"'):
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç—Å—Ç—É–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if not line.startswith("    "):
                    line = "    " + line.lstrip()
                    issues_fixed += 1
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ if
        if line_num == error_line + 1:
            if line.strip() and not line.startswith("        "):
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–ª–∞ if
                line = "        " + line.lstrip()
                issues_fixed += 1
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø –≤ —Å—Ç—Ä–æ–∫–µ {line_num}")

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ if/for/while
        if line.strip().endswith(":") and line_num < len(lines):
            next_line = lines[i + 1] if i + 1 < len(lines) else ""
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            if not next_line.strip() or not next_line.startswith("    "):
                # –î–æ–±–∞–≤–ª—è–µ–º pass –∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                if line_num == error_line - 1:
                    fixed_lines.append(line)
                    fixed_lines.append("    pass  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É\n")
                    issues_fixed += 1
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω pass –≤ —Å—Ç—Ä–æ–∫–µ {line_num + 1}")
                    continue

        fixed_lines.append(line)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print(f"\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")

    content = "".join(fixed_lines)

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    fixes = [
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º if –±–µ–∑ —Ç–µ–ª–∞
        (r"if (.+):\s*\n(\s*)if ", r"if \1:\n\2    pass\n\2if "),
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        (r"def (.+):\s*\n(\s*)def ", r"def \1:\n\2    pass\n\2def "),
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã
        (r"class (.+):\s*\n(\s*)class ", r"class \1:\n\2    pass\n\2class "),
    ]

    for pattern, replacement in fixes:
        old_content = content
        content = re.sub(pattern, replacement, content, flags=re.MULTILINE)
        if content != old_content:
            issues_fixed += 1
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pattern[:30]}...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if issues_fixed > 0:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = main_py_path + ".backup"
        with open(backup_path, "w", encoding="utf-8") as f:
            f.write("".join(lines))
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(main_py_path, "w", encoding="utf-8") as f:
            f.write(content)

        print(f"‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω! –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {issues_fixed} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    else:
        print("‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")

    return True


def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–∞"""
    print(f"\nüß™ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("=" * 30)

    try:
        import ast

        with open("main.py", "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
        ast.parse(content)
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        return True

    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:")
        print(f"   –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text.strip() if e.text else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –û—à–∏–±–∫–∞: {e.msg}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MAIN.PY")
    print("=" * 40)

    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    if not fix_syntax_error():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if check_syntax():
        print("\nüöÄ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
        print("python main.py")
        print("–∏–ª–∏")
        print("flask --app main run --no-reload")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω–æ")


if __name__ == "__main__":
    main()
