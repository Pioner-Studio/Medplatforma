=== D:\Projects\medplatforma\artifacts\calendar.html ===
{% extends "base.html" %} {% block content %}

<!-- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è -->
<div
  style="
    display: flex;
    align-items: center;
    gap: 22px;
    padding: 6px 0 6px 12px;
    background: #fff;
    border-radius: 14px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    margin-bottom: 10px;
  "
>
  <span title="–í—Å–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤">
    <i class="fa-solid fa-house-chimney-medical" style="color: #467fe3"></i>
    <b>{{ metrics.total_rooms }}</b>
  </span>
  <span title="–°–≤–æ–±–æ–¥–Ω—ã–µ">
    <i class="fa-solid fa-circle-check" style="color: #21ba45"></i>
    <b>{{ metrics.free_rooms }}</b>
  </span>
  <span style="margin-left: auto; display: flex; gap: 12px">
    <a
      href="{{ url_for('add_event') }}"
      class="btn-main"
      style="
        background: #1976d2;
        color: #fff;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 22px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    </a>
    <a
      href="{{ url_for('export_calendar') }}"
      class="btn-main btn-export"
      style="
        background: #fff;
        color: #3185cb;
        border: 1.5px solid #dbeafd;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 18px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-file-arrow-down"></i> –í—ã–≥—Ä—É–∑–∫–∞
    </a>
  </span>
</div>

<!-- –ö–∞–±–∏–Ω–µ—Ç—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å -->
<div
  id="roomsBar"
  style="display: flex; gap: 36px; margin: 14px 0 12px 8px; flex-wrap: wrap"
>
  {% for cab in cabinets %} {% set info = room_info.get(cab) if room_info else
  None %}
  <span
    data-room-name="{{ cab }}"
    style="font-size: 1.12em; font-weight: 600; cursor: default"
  >
    {{ cab }} ‚Äî
    <b
      class="room-status-text"
      style="color:{{ info.color if info else 'inherit' }}"
    >
      {{ info.text if info else '‚Äî' }}
    </b>
    <span
      class="room-next"
      style="opacity: 0.7; font-weight: 500; margin-left: 8px"
    >
      {% if info and info.state == 'available' and info.next %} {% set t =
      info.next.start.split('T')[1] if info.next.start else '' %} –ë–ª–∏–∂–∞–π—à–∏–π: {{
      t }} {% if info.next.in_minutes is not none %} (—á–µ—Ä–µ–∑ {% if
      info.next.in_minutes < 0 %}0 –º–∏–Ω {% elif info.next.in_minutes < 60 %}{{
      info.next.in_minutes }} –º–∏–Ω {% else %}{{ (info.next.in_minutes // 60)|int
      }} —á {{ (info.next.in_minutes % 60)|int }} –º–∏–Ω {% endif %} ) {% endif %}
      {% if info.next.service or info.next.patient %} ‚Ä¢ {{ info.next.service
      }}{% if info.next.service and info.next.patient %} ‚Äî {% endif %}{{
      info.next.patient }} {% endif %} {% endif %}
    </span>
  </span>
  {% endfor %}
</div>

<!-- –õ–µ–≥–µ–Ω–¥–∞/—Ñ–∏–ª—å—Ç—Ä—ã -->
<div
  style="
    display: flex;
    gap: 30px;
    align-items: center;
    font-size: 1.01em;
    margin-bottom: 12px;
    margin-left: 8px;
  "
>
  <span
    ><span
      style="
        background: #a2c6fa;
        border: 1.5px solid #dde7f7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–µ—Ä–≤–∏—á–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #fbc7c0;
        border: 1.5px solid #fde7e7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û—Ç–∫–∞–∑</span
  >
  <span
    ><span
      style="
        background: #fde8a5;
        border: 1.5px solid #f7e9c5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–æ–≤—Ç–æ—Ä–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #b4f0c0;
        border: 1.5px solid #cefad5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û–ø–ª–∞—á–µ–Ω</span
  >
</div>

<div
  class="calendar-filters"
  style="display: flex; gap: 12px; align-items: center; margin-bottom: 18px"
>
  <select id="doctorFilter" class="filter-select">
    <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
    {% for doc in doctors %}
    <option value="{{ doc._id }}">{{ doc.full_name }}</option>
    {% endfor %}
  </select>

  <!-- –ü–û–ò–°–ö –ü–ê–¶–ò–ï–ù–¢–ê (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) -->
  <div class="ps-wrap" style="position: relative; max-width: 320px">
    <input
      id="psInput"
      class="form-control"
      type="text"
      autocomplete="off"
      placeholder="–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞."
    />
    <div
      id="psDrop"
      class="ps-drop"
      style="
        display: none;
        position: absolute;
        left: 0;
        right: 0;
        top: 100%;
        z-index: 4000;
        background: #fff;
        border: 1px solid #e5e7eb;
        border-top: 0;
        max-height: 280px;
        overflow: auto;
        border-radius: 0 0 8px 8px;
      "
    ></div>
  </div>

  <input type="hidden" id="psSelectedId" value="" />

  <select id="serviceFilter" class="filter-select">
    <option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>
  </select>

  <select id="cabinetFilter" class="filter-select">
    <option value="">–í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã</option>
    {% for cab in cabinets %}
    <option value="{{ cab }}">{{ cab }}</option>
    {% endfor %}
  </select>

  <button id="btnResetFilters" class="btn btn-outline-secondary">
    –°–±—Ä–æ—Å–∏—Ç—å
  </button>
</div>

<!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å -->
<div
  id="calendar"
  style="
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    padding: 8px;
    min-height: 72vh;
  "
></div>

<!-- –ú–æ–¥–∞–ª–∫–∞ -->
<div
  id="quickModal"
  style="
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.35);
    z-index: 9999;
  "
>
  <div
    style="
      background: #fff;
      max-width: 680px;
      margin: 7vh auto;
      padding: 18px;
      border-radius: 12px;
      box-shadow: 0 8px 28px rgba(0, 0, 0, 0.08);
    "
  >
    <div
      style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px"
    >
      <h3 style="margin: 0; flex: 1">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h3>
      <button
        id="qmClose"
        type="button"
        style="
          border: none;
          background: #eee;
          border-radius: 8px;
          padding: 6px 10px;
          cursor: pointer;
        "
      >
        √ó
      </button>
    </div>

    <form
      id="qmForm"
      style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px"
    >
      <input type="hidden" id="qm_id" />

      <label
        >–í—Ä–∞—á
        <select
          id="qm_doctor"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ü–∞—Ü–∏–µ–Ω—Ç
        <div style="display: flex; gap: 8px; align-items: center; width: 100%">
          <select
            id="qm_patient"
            class="filter-select"
            required
            style="width: 100%"
          ></select>
          <!-- ==== CONTACT BAR (–Ω–∞–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º) ==== -->
          <div class="btn-group" role="group" aria-label="–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞">
            {% if patient is defined and patient %}
            <button
              type="button"
              class="btn btn-light"
              title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
              onclick="mpOpenContact('tel')"
            >
              üìû
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="WhatsApp"
              onclick="mpOpenContact('wa')"
            >
              üü¢
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="Telegram"
              onclick="mpOpenContact('tg')"
            >
              ‚úàÔ∏è
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="E-mail"
              onclick="mpOpenContact('mail')"
            >
              ‚úâÔ∏è
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="Max"
              onclick="mpOpenContact('max')"
            >
              ‚ìÇÔ∏è
            </button>
            {% endif %}
          </div>
          <!-- ======================================= -->

          <button
            type="button"
            id="qm_patient_add"
            class="btn"
            style="white-space: nowrap"
          >
            + –ù–æ–≤—ã–π
          </button>
        </div>

        <!-- –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
        <div
          id="qm_patient_new"
          style="display: none; margin-top: 8px; width: 100%"
        >
          <div class="qm-patient-grid">
            <input
              id="qm_new_full_name"
              type="text"
              placeholder="–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é"
              autocomplete="name"
            />
            <input
              id="qm_new_phone"
              type="tel"
              inputmode="tel"
              pattern="[\+\d\s\-\(\)]{6,}"
              title="+7 999 123-45-67"
              placeholder="+7 999 123-45-67"
            />
            <input id="qm_new_birth" type="date" placeholder="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" />
            <div class="qm-patient-actions">
              <button
                type="button"
                id="qm_patient_save"
                class="btn btn-primary"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button type="button" id="qm_patient_cancel" class="btn">
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
        <!-- –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ -->
        <div
          id="qm_contact_bar"
          style="
            display: flex;
            gap: 10px;
            align-items: center;
            margin: 6px 0 2px 0;
          "
        >
          <a
            id="cb_tel"
            class="btn"
            target="_blank"
            rel="noopener"
            title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
            style="padding: 4px 8px"
            >üìû Tel</a
          >
          <a
            id="cb_wa"
            class="btn"
            target="_blank"
            rel="noopener"
            title="WhatsApp"
            style="padding: 4px 8px"
            >üü¢ WA</a
          >
          <a
            id="cb_tg"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Telegram"
            style="padding: 4px 8px"
            >üîµ TG</a
          >
          <a
            id="cb_max"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Max"
            style="padding: 4px 8px"
            >üü£ Max</a
          >
          <a
            id="cb_email"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Email"
            style="padding: 4px 8px"
            >‚úâÔ∏è Mail</a
          >
          <small id="cb_hint" style="opacity: 0.7; margin-left: 6px"></small>
        </div>
      </label>
      <label
        >–£—Å–ª—É–≥–∞
        <select
          id="qm_service"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
        <small id="qm_service_hint" style="opacity: 0.7"></small>
      </label>

      <label
        >–ö–∞–±–∏–Ω–µ—Ç
        <select
          id="qm_room"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ù–∞—á–∞–ª–æ
        <input
          type="datetime-local"
          id="qm_start"
          required
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–û–∫–æ–Ω—á–∞–Ω–∏–µ
        <input
          type="datetime-local"
          id="qm_end"
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–°—Ç–∞—Ç—É—Å
        <select
          id="qm_status"
          class="filter-select"
          required
          style="width: 100%"
        >
          <option value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</option>
          <option value="arrived">–ü—Ä–∏–±—ã–ª</option>
          <option value="done">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
          <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
        </select>
      </label>

      <label style="grid-column: 1 / -1"
        >–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        <textarea id="qm_comment" rows="3" style="width: 100%"></textarea>
      </label>

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          gap: 8px;
          align-items: center;
          margin-top: -4px;
        "
      >
        <button
          type="button"
          class="btn"
          id="btn_plus_15"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +15 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_30"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +30 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_60"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +60 –º–∏–Ω
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_move_tomorrow"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ù–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ –∂–µ –≤—Ä–µ–º—è)
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_first_free"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–∫–∞–±–∏–Ω–µ—Ç)
        </button>
      </div>
      <small
        id="qm_warn"
        style="grid-column: 1/-1; color: #b45309; display: none"
        >–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</small
      >

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          justify-content: flex-end;
          gap: 8px;
        "
      >
        <button
          type="button"
          id="qmDelete"
          class="btn"
          style="background: #fee2e2; border: 1px solid #fecaca"
        >
          –£–¥–∞–ª–∏—Ç—å
        </button>
        <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>
    </form>
  </div>
</div>

<!-- Toasts -->
<div
  id="toastStack"
  style="
    position: fixed;
    right: 16px;
    top: 16px;
    z-index: 10000;
    display: flex;
    flex-direction: column;
    gap: 8px;
  "
></div>

{% endblock %} {% block scripts %}

<script>
  // –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∞–≤–¥—ã –¥–ª—è –≤—Å–µ—Ö API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
  window.ROUTES = {
    dictsApi: "/api/dicts",
    patientsApi: "/api/patients",
    contactsApi: "/api/contacts",
    doctorSchedule: "/api/doctor_schedule",
    eventsApi: "/api/events",
    freeSlots: "/api/free_slots",
    roomsStatusNow: "/api/rooms/status_now",
    roomsBusy: "/api/rooms/busy",
    todayDetailsApi: "/api/rooms/today_details",
    appointments: "/api/appointments",
    appointmentsCreate: "/api/appointments/create",
    appointmentsUpdateTime: "/api/appointments/update_time",
    appointmentsDelete: "/api/appointments/delete",
  };
</script>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
/>
<link
  href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css"
  rel="stylesheet"
/>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/locales-all.global.min.js"></script>

<script>
  // –¢–æ—á–∫–∏ API –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞ ¬´—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã¬ª –∏ –ø–æ–ø–∞–ø–∞ ¬´... ‚Äî —Å–µ–≥–æ–¥–Ω—è¬ª
  const ROUTES = {
    freeSlots: "/api/free_slots",
    todayDetailsApi: "/api/rooms/today_details",
  };
</script>

<style>
  /* —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ ¬´–≤—ã–ª–∞–∑–æ–≤¬ª */
  #quickModal .qm-patient-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
    align-items: center;
  }
  #quickModal .qm-patient-grid input {
    width: 100%;
    height: 36px;
    padding: 8px 10px;
    border: 1px solid #dbeafd;
    border-radius: 8px;
    box-sizing: border-box;
  }
  #quickModal .qm-patient-grid input:focus {
    outline: none;
    border-color: #a5c5ff;
    box-shadow: 0 0 0 3px rgba(73, 133, 255, 0.12);
  }
  #quickModal .qm-patient-actions {
    display: flex;
    gap: 8px;
    justify-content: flex-start;
  }
  @media (min-width: 740px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 1fr;
    }
    #quickModal .qm-patient-grid > :first-child {
      grid-column: 1 / -1;
    } /* –§–ò–û */
    #quickModal .qm-patient-actions {
      grid-column: 1 / -1;
    }
  }
  @media (min-width: 900px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 180px;
    }
  }

  /* PATCH: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ */
  .ps-room-clickable {
    cursor: pointer;
  }
  .ps-free-hint,
  [data-free-hint] {
    pointer-events: auto;
  }
  [data-room],
  .ps-room,
  .room,
  .ps-rooms-item,
  [data-open-room] {
    cursor: pointer;
  }
</style>

<script>
  // --- –ø—Ä–æ—Å—Ç–æ–π toast ---
  function showToast(msg, type = "info", ms = 2200) {
    const stack = document.getElementById("toastStack");
    if (!stack) {
      alert(msg);
      return;
    }
    const el = document.createElement("div");
    el.textContent = msg;
    el.style.cssText = `
      background:${
        type === "error" ? "#fee2e2" : type === "ok" ? "#e6ffed" : "#eef2ff"
      };
      color:${
        type === "error" ? "#991b1b" : type === "ok" ? "#065f46" : "#1e40af"
      };
      border:1px solid ${
        type === "error" ? "#fecaca" : type === "ok" ? "#bbf7d0" : "#c7d2fe"
      };
      box-shadow:0 6px 18px rgba(0,0,0,.08);padding:10px 14px;border-radius:10px;font-weight:600;max-width:420px`;
    stack.appendChild(el);
    setTimeout(() => {
      el.style.transition = "opacity .25s";
      el.style.opacity = "0";
      setTimeout(() => el.remove(), 260);
    }, ms);
  }
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    // ---------- helpers ----------
    const $ = (s) => document.querySelector(s);
    const addMin = (d, m) => new Date(d.getTime() + m * 60000);
    const pad2 = (n) => String(n).padStart(2, "0");
    const fmtISO = (d) =>
      `${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}T${pad2(
        d.getHours()
      )}:${pad2(d.getMinutes())}`;

    // –∫—ç—à —Å–ª–æ–≤–∞—Ä–µ–π
    window.__DICT_CACHE__ = window.__DICT_CACHE__ || null;

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ options
    function fillOptions(selectEl, items, selectedId = "") {
      if (!selectEl) return;
      const toId = (x) => x._id ?? x.id ?? "";
      const toName = (x) => x.full_name ?? x.name ?? "";
      const html = (items || [])
        .map((x) => {
          const id = toId(x),
            name = toName(x);
          return `<option value="${id}">${name}</option>`;
        })
        .join("");
      selectEl.innerHTML = html;
      if (selectedId) selectEl.value = selectedId;
      if (!selectEl.value || selectEl.value === "undefined") {
        const first = selectEl.querySelector("option")?.value || "";
        selectEl.value = first;
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
    async function loadDictsOnce() {
      if (window.__DICT_CACHE__) return window.__DICT_CACHE__;
      const r = await fetch("/api/dicts");
      const raw = await r.json();
      if (!raw?.ok) throw new Error("dicts load failed");

      const norm = (arr) =>
        (arr || []).map((x) => ({
          id: x._id ?? x.id ?? "",
          name: x.full_name ?? x.name ?? "",
          duration_min: x.duration_min,
        }));
      const data = {
        ok: true,
        doctors: norm(raw.doctors),
        patients: norm(raw.patients),
        rooms: norm(raw.rooms),
        services: norm(raw.services).map((s) => ({
          ...s,
          duration_min: s.duration_min ?? 30,
        })),
      };
      window.__DICT_CACHE__ = data;
      return data;
    }

    // ---------- —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏ ----------
    const qm = {
      modal: $("#quickModal"),
      close: $("#qmClose"),
      form: $("#qmForm"),
      id: $("#qm_id"),
      doctor: $("#qm_doctor"),
      patient: $("#qm_patient"),
      service: $("#qm_service"),
      serviceHint: $("#qm_service_hint"),
      room: $("#qm_room"),
      start: $("#qm_start"),
      end: $("#qm_end"),
      status: $("#qm_status"),
      comment: $("#qm_comment"),
      warn: $("#qm_warn"),
      btnDel: $("#qmDelete"),
      btnPlus15: document.querySelector("#quickModal #btn_plus_15"),
      btnPlus30: document.querySelector("#quickModal #btn_plus_30"),
      btnPlus60: document.querySelector("#quickModal #btn_plus_60"),
      btnTomorrow: document.querySelector("#quickModal #btn_move_tomorrow"),
      btnFirstFree: document.querySelector("#quickModal #btn_first_free"),

      // –±–ª–æ–∫ ¬´–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç¬ª
      patientAddBtn: document.getElementById("qm_patient_add"),
      patientNewRow: document.getElementById("qm_patient_new"),
      newFullName: document.getElementById("qm_new_full_name"),
      newPhone: document.getElementById("qm_new_phone"),
      newBirth: document.getElementById("qm_new_birth"),
      patientSaveBtn: document.getElementById("qm_patient_save"),
      patientCancelBtn: document.getElementById("qm_patient_cancel"),
    };

    function hideNewPatientRow() {
      if (!qm) return;
      if (qm.patientNewRow) qm.patientNewRow.style.display = "none";
      if (qm.newFullName) qm.newFullName.value = "";
      if (qm.newPhone) qm.newPhone.value = "";
      if (qm.newBirth) qm.newBirth.value = "";
    }

    // --- contacts bar (Tel/WA/TG/Max/Mail) ---------------------------------
    function setDisabledAnchor(a, disabled) {
      if (!a) return;
      if (disabled) {
        a.setAttribute("aria-disabled", "true");
        a.style.opacity = ".5";
        a.style.pointerEvents = "none";
        a.removeAttribute("href");
      } else {
        a.removeAttribute("aria-disabled");
        a.style.opacity = "1";
        a.style.pointerEvents = "auto";
      }
    }
    function onlyDigits(s) {
      return String(s || "").replace(/\D+/g, "");
    }

    async function fillContactBar(patientId) {
      const tel = document.getElementById("cb_tel");
      const wa = document.getElementById("cb_wa");
      const tg = document.getElementById("cb_tg");
      const mx = document.getElementById("cb_max");
      const em = document.getElementById("cb_email");
      const hint = document.getElementById("cb_hint");

      [tel, wa, tg, mx, em].forEach((a) => setDisabledAnchor(a, true));
      if (hint) hint.textContent = "";
      if (!patientId) return;

      try {
        const r = await fetch(
          `/api/patients/${encodeURIComponent(patientId)}/contacts`
        );
        const data = await r.json();
        if (!r.ok || !data.ok) return;

        const c = data.contacts || {};
        const phonePlus = (c.phone || "").trim();
        const phone = onlyDigits(phonePlus);
        const waNum = onlyDigits(c.whatsapp || c.phone || "");
        const mail = (c.email || "").trim();
        const tgHandle = (c.telegram || "").replace(/^@/, "").trim();

        if (phonePlus) {
          tel.href = `tel:${phonePlus}`;
          setDisabledAnchor(tel, false);
        }
        if (waNum) {
          wa.href = `https://wa.me/${waNum}`;
          setDisabledAnchor(wa, false);
        }
        if (tgHandle) {
          tg.href = `https://t.me/${tgHandle}`;
          setDisabledAnchor(tg, false);
        } else if (phone) {
          tg.href = `https://t.me/+${phone}`;
          setDisabledAnchor(tg, false);
        }

        // Max: –∞–Ω–∞–ª–æ–≥ WhatsApp ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç; –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ deep-link –ø–æ–¥–º–µ–Ω–∏–º —Ç—É—Ç
        mx.href = `https://web.max.ru/`;
        setDisabledAnchor(mx, false);

        if (mail) {
          em.href = `mailto:${encodeURIComponent(mail)}`;
          setDisabledAnchor(em, false);
        }

        if (hint) {
          const parts = [];
          if (phonePlus) parts.push(phonePlus);
          if (mail) parts.push(mail);
          hint.textContent = parts.join(" ‚Ä¢ ");
        }
      } catch {}
    }
    // –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å
    qm.patient?.addEventListener("change", () =>
      fillContactBar(qm.patient.value)
    );
    // --- —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –º–æ–¥–∞–ª–∫–∏ ---
    qm.patientAddBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "block";
      qm.newFullName?.focus();
    });
    qm.patientCancelBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "none";
      if (qm.newFullName) qm.newFullName.value = "";
      if (qm.newPhone) qm.newPhone.value = "";
      if (qm.newBirth) qm.newBirth.value = "";
    });
    qm.patientSaveBtn?.addEventListener("click", async () => {
      const full_name = (qm.newFullName?.value || "").trim();
      const phone = (qm.newPhone?.value || "").trim();
      const birth_date = (qm.newBirth?.value || "").trim();
      if (!full_name) {
        showToast("–£–∫–∞–∂–∏ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞", "error");
        return;
      }
      try {
        const r = await fetch("/api/patients", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ full_name, phone, birth_date }),
        });
        const data = await r.json().catch(() => ({}));
        if (!r.ok || !data.ok) {
          showToast(
            data?.error || `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è (HTTP ${r.status})`,
            "error"
          );
          return;
        }
        const opt = document.createElement("option");
        opt.value = data.id;
        opt.textContent = data.full_name || full_name;
        qm.patient?.appendChild(opt);
        qm.patient.value = data.id;
        qm.newFullName.value = "";
        qm.newPhone.value = "";
        qm.newBirth.value = "";
        qm.patientNewRow.style.display = "none";
        if (window.__DICT_CACHE__) {
          window.__DICT_CACHE__.patients.unshift({
            id: data.id,
            name: data.full_name || full_name,
          });
        }
        showToast("–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", "ok");
      } catch {
        showToast("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "error");
      }
    });

    function isValidSelectValue(v) {
      return v && v !== "undefined" && v !== "null";
    }
    function updateFirstFreeBtnState() {
      const enable =
        isValidSelectValue(qm.room?.value) &&
        isValidSelectValue(qm.service?.value) &&
        !!qm.start?.value;
      if (qm.btnFirstFree) {
        qm.btnFirstFree.disabled = !enable;
        qm.btnFirstFree.style.opacity = enable ? "1" : "0.6";
        qm.btnFirstFree.style.pointerEvents = enable ? "auto" : "none";
      }
    }
    [qm.room, qm.service, qm.start].forEach((el) =>
      el?.addEventListener("change", updateFirstFreeBtnState)
    );

    const qmTitle = document.querySelector("#quickModal h3");
    const qmDeleteBtn = document.getElementById("qmDelete");
    function setModalMode(mode) {
      hideNewPatientRow(); // –ø—Ä–∏ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Å—Ç–∏–º –º–∏–Ω–∏-—Ñ–æ—Ä–º—É
      if (!qmTitle) return;
      if (mode === "create") {
        qmTitle.textContent = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.setAttribute("disabled", "disabled");
        qmDeleteBtn?.classList.add("disabled");
      } else {
        qmTitle.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.removeAttribute("disabled");
        qmDeleteBtn?.classList.remove("disabled");
      }
    }
    function openModal() {
      if (qm.modal) qm.modal.style.display = "block";
    }
    function closeModal() {
      if (qm.modal) qm.modal.style.display = "none";
    }
    qm.close?.addEventListener("click", closeModal);
    window.addEventListener("keydown", (e) => {
      if (e.key === "Escape") closeModal();
    });

    // –≤—Ä–µ–º—è
    function setStartEnd(ns, ne) {
      if (qm.start) qm.start.value = fmtISO(ns);
      if (qm.end) qm.end.value = fmtISO(ne);
    }
    function shiftAppointment(minutes) {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      const ns = addMin(s, minutes),
        ne = addMin(ns, dur);
      setStartEnd(ns, ne);
    }
    qm.btnPlus15?.addEventListener("click", () => shiftAppointment(15));
    qm.btnPlus30?.addEventListener("click", () => shiftAppointment(30));
    qm.btnPlus60?.addEventListener("click", () => shiftAppointment(60));
    qm.btnTomorrow?.addEventListener("click", () => {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      s.setDate(s.getDate() + 1);
      setStartEnd(s, addMin(s, dur));
    });

    // –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
    async function moveToFirstFreeInRoom() {
      const roomId = qm.room?.value,
        sid = qm.service?.value;
      if (
        !isValidSelectValue(roomId) ||
        !isValidSelectValue(sid) ||
        !qm.start?.value
      ) {
        showToast("–í—ã–±–µ—Ä–∏ –∫–∞–±–∏–Ω–µ—Ç, —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "error");
        updateFirstFreeBtnState();
        return;
      }
      const d = await loadDictsOnce();
      const sRec = d.services.find((x) => x.id === sid);
      const dur = parseInt(sRec?.duration_min ?? 30, 10);

      let cursor = new Date(qm.start.value);
      const limit = new Date();
      limit.setDate(limit.getDate() + 7);

      while (cursor < limit) {
        const day = `${cursor.getFullYear()}-${String(
          cursor.getMonth() + 1
        ).padStart(2, "0")}-${String(cursor.getDate()).padStart(2, "0")}`;
        const resp = await fetch(
          `/api/rooms/busy?room_id=${encodeURIComponent(roomId)}&date=${day}`
        );
        if (!resp.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }
        const data = await resp.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }

        const busy = (data.items || [])
          .map((i) => {
            const [sh, sm] = i.start.split(":").map(Number),
              [eh, em] = i.end.split(":").map(Number);
            return { s: sh * 60 + sm, e: eh * 60 + em };
          })
          .sort((a, b) => a.s - b.s);

        const st = cursor.getHours() * 60 + cursor.getMinutes(),
          en = st + dur;
        const overlap = busy.some((b) => !(en <= b.s || st >= b.e));
        if (!overlap) {
          setStartEnd(cursor, addMin(cursor, dur));
          return;
        }
        cursor = addMin(cursor, 5);
      }
      showToast("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π", "error");
    }
    qm.btnFirstFree?.addEventListener("click", moveToFirstFreeInRoom);

    // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–ø–æ–¥—Å–∫–∞–∑–∫–∞
    async function recalcEndByService() {
      if (!qm.service?.value || !qm.start?.value) return;
      const d = await loadDictsOnce();
      const srv = d.services.find((s) => s.id === qm.service.value);
      const dur = parseInt(srv?.duration_min ?? 30, 10);
      const s = new Date(qm.start.value),
        e = addMin(s, isFinite(dur) ? dur : 30);
      if (qm.end) qm.end.value = fmtISO(e);
      if (qm.serviceHint)
        qm.serviceHint.textContent = `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ${
          isFinite(dur) ? dur : 30
        } –º–∏–Ω.`;
    }

    // –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞
    async function checkDoctorWorking() {
      const start = qm.start?.value;
      if (!qm.doctor?.value || !start) {
        qm.warn && (qm.warn.style.display = "none");
        return;
      }
      try {
        const r = await fetch("/api/doctor_schedule", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ doctor_id: qm.doctor.value }),
        });
        if (!r.ok) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const data = await r.json();
        const sched = data?.schedule || {};
        const s = new Date(start);
        const e = qm.end?.value ? new Date(qm.end.value) : new Date(start);
        const dow = (s.getDay() + 6) % 7;
        const day = sched[String(dow)];
        if (!day || !day.start || !day.end) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const hm2m = (hm) => {
          const [h, m] = hm.split(":").map(Number);
          return h * 60 + m;
        };
        const st = s.getHours() * 60 + s.getMinutes(),
          en = e.getHours() * 60 + e.getMinutes();
        const outside = st < hm2m(day.start) || en > hm2m(day.end);
        if (outside) {
          qm.warn.textContent = `–í—Ä–µ–º—è –≤–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞ (${day.start}‚Äì${day.end}). –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ.`;
          qm.warn.style.display = "block";
        } else {
          qm.warn.style.display = "none";
        }
      } catch {
        qm.warn && (qm.warn.style.display = "none");
      }
    }

    // ---------- FullCalendar ----------
    // –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É (–º–∏–Ω–∏-–ø–æ–∏—Å–∫ –Ω–∞–≤–µ—Ä—Ö—É)
    window.psSelectedPatientId = window.psSelectedPatientId || "";
    const calEl = document.getElementById("calendar");
    const calendar = new FullCalendar.Calendar(calEl, {
      initialView: "timeGridWeek",
      locale: "ru",
      buttonText: {
        today: "—Å–µ–≥–æ–¥–Ω—è",
        month: "–º–µ—Å—è—Ü",
        week: "–Ω–µ–¥–µ–ª—è",
        day: "–¥–µ–Ω—å",
      },
      allDayText: "–í–µ—Å—å –¥–µ–Ω—å",
      timeZone: "local",
      firstDay: 1,
      height: "auto",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,timeGridWeek,timeGridDay",
      },
      slotDuration: "00:15:00",
      snapDuration: "00:15:00",
      slotMinTime: "09:00:00",
      slotMaxTime: "21:00:00",
      businessHours: {
        daysOfWeek: [1, 2, 3, 4, 5, 6],
        startTime: "09:00",
        endTime: "21:00",
      },

      editable: true,
      eventDurationEditable: true,
      eventStartEditable: true,
      eventOverlap: true,

      // –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô
      events: (fetchInfo, success, failure) => {
        const params = new URLSearchParams({
          start: fetchInfo.startStr,
          end: fetchInfo.endStr,
        });

        const doctorSel = document.querySelector("#doctorFilter");
        const serviceSel = document.querySelector("#serviceFilter");
        const cabinetSel = document.querySelector("#cabinetFilter");

        if (doctorSel?.value) params.set("doctor_id", doctorSel.value);
        if (serviceSel?.value) params.set("service_id", serviceSel.value);
        if (cabinetSel?.value) params.set("room_name", cabinetSel.value);

        // ‚ú¶ –Ω–∞—à —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ)
        (function () {
          const psInput = document.getElementById("psInput");
          const a = (psInput?.dataset?.selId || "").trim();
          const b = (window.__PS_SELECTED_PATIENT_ID__ || "").trim();
          const c = (window.psSelectedPatientId || "").trim();
          const pid = a || b || c;
          if (pid) params.set("patient_id", pid);
        })();

        fetch("/api/events?" + params.toString())
          .then((r) => r.json())
          .then((data) => success(data))
          .catch((err) => {
            console.error("events load error", err);
            failure(err);
          });
      },

      eventDidMount(info) {
        const p = info.event.extendedProps || {};
        info.el.title = [p.service, p.patient, p.status]
          .filter(Boolean)
          .join(" ‚Ä¢ ");
      },

      eventDrop: saveMoveOrResize,
      eventResize: saveMoveOrResize,

      eventClick: async (info) => {
        setModalMode("edit");
        await openQuickModal(info.event.id);
      },

      dateClick: async (arg) => {
        try {
          const d = await loadDictsOnce();
          const doctorSel = document.getElementById("doctorFilter");
          fillOptions(qm.doctor, d.doctors, doctorSel?.value || "");
          fillOptions(qm.patient, d.patients);
          fillOptions(qm.service, d.services);
          fillOptions(qm.room, d.rooms);
          await fillContactBar(qm.patient?.value || "");

          hideNewPatientRow(); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–æ; –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´+ –ù–æ–≤—ã–π¬ª

          const roundTo = 15;
          const s = new Date(arg.date);
          s.setMinutes(Math.round(s.getMinutes() / roundTo) * roundTo, 0, 0);
          const e = addMin(s, 30);

          if (qm.id) qm.id.value = "";
          if (qm.start) qm.start.value = fmtISO(s);
          if (qm.end) qm.end.value = fmtISO(e);

          updateFirstFreeBtnState();
          await recalcEndByService().catch(() => {});
          await checkDoctorWorking().catch(() => {});

          setModalMode("create");
          openModal();
        } catch (e) {
          console.error(e);
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è", "error");
        }
      },
    });

    calendar.render();
    window._calendar = calendar;
    window.calendar = calendar;

    // === [PATCH] –§–∏–ª—å—Ç—Ä—ã —Å–≤–µ—Ä—Ö—É: –ø–æ–¥–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ + —Ä–µ—Ñ–µ—Ç—á ===
    (async function initTopFilters() {
      const doctorSel = document.getElementById("doctorFilter");
      const serviceSel = document.getElementById("serviceFilter");
      const cabinetSel = document.getElementById("cabinetFilter");

      // 1) –ü–æ–¥—Ç—è–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å "–£—Å–ª—É–≥–∏"
      try {
        const d = await loadDictsOnce(); // —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
        if (serviceSel) {
          serviceSel.innerHTML =
            '<option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>' +
            (d.services || [])
              .map((s) => `<option value="${s.id}">${s.name}</option>`)
              .join("");
        }
      } catch (e) {
        console.warn("dicts load failed", e);
      }

      // 2) –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
      [doctorSel, serviceSel, cabinetSel].forEach((el) => {
        el &&
          el.addEventListener("change", () =>
            window.calendar?.refetchEvents?.()
          );
      });
    })();

    // === [PATCH] –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å" ===
    (function initResetButton() {
      const btn = document.getElementById("btnResetFilters");
      const doctorSel = document.getElementById("doctorFilter");
      const serviceSel = document.getElementById("serviceFilter");
      const cabinetSel = document.getElementById("cabinetFilter");
      const psInput = document.getElementById("psInput");

      btn &&
        btn.addEventListener("click", () => {
          if (doctorSel) doctorSel.value = "";
          if (serviceSel) serviceSel.value = "";
          if (cabinetSel) cabinetSel.value = "";

          // –°–±—Ä–æ—Å –º–∏–Ω–∏-–ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–æ–±–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–∞ + dataset + –≤–∏–∑—É–∞–ª—å–Ω–æ)
          if (psInput) {
            delete psInput.dataset.selId;
            psInput.value = "";
          }
          window.__PS_SELECTED_PATIENT_ID__ = "";
          window.psSelectedPatientId = "";

          window.calendar?.refetchEvents?.();
        });
    })();

    /* === HOVER –ü–û –ö–ê–ë–ò–ù–ï–¢–£: –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã (stable + –±–µ–∑ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏) === */
    (function initRoomHoverFreeSlots() {
      const container = document.getElementById("roomsBar");
      if (!container) return;

      const tip = document.createElement("div");
      tip.id = "roomTip";
      tip.style.cssText = [
        "position:fixed",
        "z-index:9999",
        "display:none",
        "max-width:420px",
        "padding:10px 12px",
        "border-radius:10px",
        "box-shadow:0 8px 24px rgba(0,0,0,.18)",
        "background:#fff",
        "font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial",
        "pointer-events:auto",
        "cursor:pointer",
      ].join(";");
      document.body.appendChild(tip);

      let hideTimer = null,
        abortCtrl = null,
        lastRoom = "",
        lastRoomEl = null;

      function fmtYMD(d) {
        const y = d.getFullYear(),
          m = String(d.getMonth() + 1).padStart(2, "0"),
          day = String(d.getDate()).padStart(2, "0");
        return `${y}-${m}-${day}`;
      }
      function showTip(html, rect) {
        tip.innerHTML = html;
        tip.style.left = Math.round(rect.left) + "px";
        tip.style.top = Math.round(rect.bottom + 6 + window.scrollY) + "px";
        tip.style.display = "block";
      }
      function hideLater() {
        if (hideTimer) clearTimeout(hideTimer);
        hideTimer = setTimeout(() => {
          tip.style.display = "none";
          if (abortCtrl) abortCtrl.abort();
          abortCtrl = null;
        }, 320);
      }

      tip.addEventListener("mouseenter", () => {
        if (hideTimer) {
          clearTimeout(hideTimer);
          hideTimer = null;
        }
      });
      tip.addEventListener("mouseleave", hideLater);
      tip.addEventListener("click", (e) => {
        e.stopPropagation();
        if (!lastRoom || !lastRoomEl) return;
        document.dispatchEvent(
          new CustomEvent("open-room-today", {
            detail: { roomEl: lastRoomEl, roomName: lastRoom },
          })
        );
      });

      const $doctor = document.getElementById("doctorFilter");
      const $service = document.getElementById("serviceFilter");

      container.querySelectorAll("[data-room-name]").forEach((el) => {
        el.addEventListener("mouseenter", async () => {
          lastRoomEl = el;
          lastRoom =
            el.dataset.roomName || el.getAttribute("data-room-name") || "";
          const rect = el.getBoundingClientRect();

          if (!$doctor || !$doctor.value) {
            showTip("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ ‚Üë", rect);
            return;
          }

          let durMin = 30;
          try {
            const dicts = await loadDictsOnce?.();
            const sId = $service?.value || "";
            const svc = (dicts?.services || []).find(
              (x) => String(x.id) === String(sId)
            );
            durMin = svc?.duration_min || 30;
          } catch {}

          const viewDate = window.calendar?.getDate
            ? window.calendar.getDate()
            : new Date();
          const day = fmtYMD(viewDate);
          const today = fmtYMD(new Date());
          const isToday = day === today;
          const nowHM = new Date().toTimeString().slice(0, 5); // "HH:MM"

          try {
            if (abortCtrl) abortCtrl.abort();
            abortCtrl = new AbortController();
            showTip("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤‚Ä¶", rect);

            const r = await fetch(ROUTES.freeSlots, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                doctor_id: $doctor.value,
                room_name: lastRoom,
                date: day,
                duration_min: durMin,
              }),
              signal: abortCtrl.signal,
            });
            const data = await r.json();

            const min = (
              window.calendar?.getOption?.("slotMinTime") || "09:00:00"
            ).slice(0, 5);
            const max = (
              window.calendar?.getOption?.("slotMaxTime") || "21:00:00"
            ).slice(0, 5);

            const slots = (data?.slots || [])
              .filter((t) => t >= min && t < max)
              .filter((t) => !isToday || t >= nowHM)
              .slice(0, 8);

            const title = `<div style="font-weight:600;margin-bottom:4px;">${lastRoom}</div>`;
            const body = slots.length
              ? `–°–≤–æ–±–æ–¥–Ω–æ: <b>${slots.join("</b>, <b>")}</b>`
              : "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç";
            const hint = `<div style="margin-top:8px;opacity:.7;font-size:12px;">–ö–ª–∏–∫ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç ¬´${lastRoom} ‚Äî —Å–µ–≥–æ–¥–Ω—è¬ª</div>`;
            showTip(`${title}<div>${body}</div>${hint}`, rect);
          } catch (e) {
            if (e.name !== "AbortError") showTip("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", rect);
          }
        });
        el.addEventListener("mouseleave", hideLater);
      });

      window.addEventListener("scroll", () => {
        if (tip.style.display === "block") tip.style.display = "none";
      });
      window.addEventListener("resize", () => {
        if (tip.style.display === "block") tip.style.display = "none";
      });
    })();

    /* === LIVE rooms bar: status + next slot === */
    (function initRoomsBarLive() {
      const bar = document.getElementById("roomsBar");
      if (!bar) return;

      function render(data) {
        bar.querySelectorAll("[data-room-name]").forEach((el) => {
          const name =
            el.dataset.roomName || el.getAttribute("data-room-name") || "";
          const nfo = data && data[name];
          if (!nfo) return;

          // —á–∏—Å—Ç–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ (–Ω–µ –±—É–¥–µ—Ç –¥—É–±–ª–µ–π)
          el.textContent = "";

          // –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –∫–∞–±–∏–Ω–µ—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–æ–Ω—É –∫–ª–∏–∫–∞)
          const nameSpan = document.createElement("span");
          nameSpan.className = "room-name";
          nameSpan.textContent = name;
          nameSpan.style.cursor = "pointer";
          el.appendChild(nameSpan);

          // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å (–∑–µ–ª—ë–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
          const state = document.createElement("span");
          state.className = "room-state";
          state.textContent = " ‚Äî " + (nfo.text || "");
          state.style.marginLeft = "2px";
          state.style.fontWeight = "600";
          state.style.color = nfo.color || "#2e7d32";
          el.appendChild(state);

          // –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (
            nfo.next &&
            (nfo.next.start || nfo.next.patient || nfo.next.service)
          ) {
            const next = document.createElement("span");
            next.className = "room-next";
            const hhmm = String(nfo.next.start || "").slice(-5);
            next.textContent = ` ¬∑ –ë–ª–∏–∂–∞–π—à–∏–π: ${hhmm}${
              nfo.next.patient ? ` ‚Äî ${nfo.next.patient}` : ""
            }`;

            el.appendChild(next);
            el.title = `–°–ª–µ–¥—É—é—â–∏–π: ${hhmm} ¬∑ ${(
              nfo.next.service || ""
            ).trim()} ¬∑ ${(nfo.next.patient || "").trim()}`;
          } else {
            el.title = (nfo.text || "").trim();
          }
        });
      }

      async function tick() {
        try {
          const r = await fetch("/api/rooms/status_now");
          render(await r.json());
        } catch (e) {
          /* noop */
        }
        setTimeout(tick, 60000);
      }
      tick();
    })();

    /* === Click room -> today details popup (toggle + outside close) === */
    (function initRoomClickTodayDetails() {
      const bar = document.getElementById("roomsBar");
      if (!bar) return;

      const pop = document.createElement("div");
      pop.id = "roomDayPopup";
      pop.style.cssText =
        "position:fixed;z-index:5000;display:none;min-width:320px;max-width:420px;background:#fff;border:1px solid #dbeafd;border-radius:10px;box-shadow:0 8px 24px rgba(0,0,0,.08);padding:10px 12px;font-size:.95rem;line-height:1.35;";
      document.body.appendChild(pop);

      let openedRoom = "";

      function hide() {
        pop.style.display = "none";
        openedRoom = "";
      }
      function showNear(el) {
        const rect = el.getBoundingClientRect();
        pop.style.left = Math.round(rect.left) + "px";
        pop.style.top = Math.round(rect.bottom + 6 + window.scrollY) + "px";
        pop.style.display = "block";
      }
      async function renderRoomToday(name) {
        try {
          const url =
            (window.ROUTES?.todayDetailsApi || "/api/rooms/today_details") +
            "?room=" +
            encodeURIComponent(name);

          const r = await fetch(url, {
            headers: { accept: "application/json" },
          });
          const ct = r.headers.get("content-type") || "";

          if (ct.includes("json")) {
            const data = await r.json();
            const now = new Date();
            const nowHHMM = (() => {
              const d = new Date();
              return `${String(d.getHours()).padStart(2, "0")}:${String(
                d.getMinutes()
              ).padStart(2, "0")}`;
            })();

            // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞—ë–º HH:MM (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è "HH:MM", –∏ –¥–ª—è "YYYY-MM-DDTHH:MM")
            const hhmm = (s) => String(s || "").slice(-5);

            const visible = (data.items || []).filter((x) => {
              // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ (is_now) –∏ –±—É–¥—É—â–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
              return x.is_now || hhmm(x.end) >= nowHHMM;
            });

            const rows =
              visible
                .map((x) => {
                  const hh1 = hhmm(x.start);
                  const hh2 = hhmm(x.end);
                  const who = [x.service, x.patient]
                    .filter(Boolean)
                    .join(" ‚Äî ");
                  return `<div style="padding:4px 0;border-bottom:1px dashed #eef2ff;">
          <b>${hh1}‚Äì${hh2}</b>${who ? ` ¬∑ ${who}` : ""}
        </div>`;
                })
                .join("") || "<i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</i>";

            pop.innerHTML = `
            <div style="font-weight:600;margin-bottom:6px;">${name} ‚Äî —Å–µ–≥–æ–¥–Ω—è</div>
            ${rows}
          `;
          } else {
            // –ª–µ–≥–∞—Å–∏: —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–π HTML
            pop.innerHTML =
              (await r.text()).trim() || "<i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</i>";
          }
        } catch (e) {
          pop.innerHTML = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏";
        }
      }

      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –∏–∑ —Ç—É–ª—Ç–∏–ø–∞
      window.openRoomTodayFromTip = async function (roomEl, roomName) {
        // –ø–æ–≥–∞—Å–∏–º —Ç—É–ª—Ç–∏–ø, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";

        // toggle: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç –∂–µ –∫–∞–±–∏–Ω–µ—Ç ‚Äî –∑–∞–∫—Ä—ã—Ç—å
        if (pop.style.display === "block" && openedRoom === roomName) {
          hide();
          return;
        }

        openedRoom = roomName;
        showNear(roomEl);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(roomName);
      };

      // –û–¢–ö–†–´–¢–ò–ï/–ó–ê–ö–†–´–¢–ò–ï: –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)

      document.addEventListener("click", async (e) => {
        const el = e.target.closest("#roomsBar [data-room-name]");
        if (!el) return;

        // —É–±–∏—Ä–∞–µ–º hover-tooltip
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";

        const name =
          el.dataset.roomName || el.getAttribute("data-room-name") || "";

        // –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç –∂–µ –∫–∞–±–∏–Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ toggle –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (pop.style.display === "block" && openedRoom === name) {
          hide();
          return;
        }

        openedRoom = name;
        showNear(el);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(name);
      });

      // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —è–∫–æ—Ä—è –ø–æ –∏–º–µ–Ω–∏ –∫–∞–±–∏–Ω–µ—Ç–∞
      function findRoomAnchor(name) {
        if (!name) return null;
        const esc = CSS && CSS.escape ? CSS.escape(name) : name;
        return (
          document.querySelector(`[data-room="${esc}"]`) ||
          document.querySelector(`[data-open-room="${esc}"]`) ||
          document.querySelector(`[data-room-name="${esc}"]`) ||
          [...document.querySelectorAll(".ps-room, .ps-rooms-item")].find(
            (el) => (el.textContent.split("‚Äî")[0] || "").trim() === name
          ) ||
          null
        );
      }

      // –û–¢–ö–†–´–¢–ò–ï –ø–æ ¬´—Å–∏–≥–Ω–∞–ª—É¬ª –∏–∑ —Ç—É–ª—Ç–∏–ø–∞ / –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
      document.addEventListener("open-room-today", async (e) => {
        let { roomEl, roomName } = (e && e.detail) || {};
        if (!roomName) return;
        roomEl = roomEl || findRoomAnchor(roomName); // <-- –í–ê–ñ–ù–û
        if (!roomEl) return;
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";
        if (pop.style.display === "block" && openedRoom === roomName) {
          hide();
          return;
        }
        openedRoom = roomName;
        showNear(roomEl);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(roomName);
      });

      // –∫–ª–∏–∫ –≤–Ω–µ –ø–æ–ø–∞–ø–∞ ‚Äî –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —Ç—É–ª—Ç–∏–ø—É
      document.addEventListener("click", (e) => {
        if (pop.style.display !== "block") return;
        if (pop.contains(e.target)) return;
        if (e.target.closest("#roomsBar")) return;
        if (e.target.closest("#roomTip")) return; // <-- –í–ê–ñ–ù–û
        hide();
      });

      // Esc / scroll / resize ‚Äî –∑–∞–∫—Ä—ã—Ç—å
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") hide();
      });
      window.addEventListener("scroll", hide);
      window.addEventListener("resize", hide);
    })();

    async function saveMoveOrResize(info) {
      const payload = {
        id: info.event.id,
        start: info.event.startStr,
        end: info.event.endStr || info.event.startStr,
      };
      try {
        const r = await fetch("/api/appointments/update_time", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        const data = await r.json();
        if (!data.ok) {
          alert(
            data.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
          );
          info.revert();
          return;
        }
        calendar.refetchEvents();
      } catch {
        alert("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        info.revert();
      }
    }

    // –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    async function openQuickModal(id) {
      try {
        const d = await loadDictsOnce();
        fillOptions(qm.doctor, d.doctors);
        fillOptions(qm.patient, d.patients);
        fillOptions(qm.service, d.services);
        fillOptions(qm.room, d.rooms);

        hideNewPatientRow(); // –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º ¬´–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç¬ª –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        const r = await fetch(`/api/appointments/${id}`);
        const data = await r.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å", "error");
          return;
        }
        const it = data.item;

        if (qm.id) qm.id.value = it.id || "";
        if (qm.doctor) qm.doctor.value = it.doctor_id || "";
        if (qm.patient) qm.patient.value = it.patient_id || "";
        await fillContactBar(qm.patient?.value || "");
        if (qm.service) qm.service.value = it.service_id || "";
        if (qm.room) qm.room.value = it.room_id || "";
        if (qm.start) qm.start.value = (it.start || "").slice(0, 16);
        if (qm.end) qm.end.value = (it.end || "").slice(0, 16);
        if (qm.status) qm.status.value = it.status_key || "scheduled";
        if (qm.comment) qm.comment.value = it.comment || "";

        qm.service?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.start?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.end?.addEventListener("change", checkDoctorWorking, { once: true });
        qm.doctor?.addEventListener("change", checkDoctorWorking, {
          once: true,
        });

        await recalcEndByService();
        await checkDoctorWorking();
        setModalMode("edit");
        openModal();
      } catch (e) {
        console.error(e);
        showToast("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏", "error");
      }
    }

    // submit / delete
    qm.form?.addEventListener("submit", async (ev) => {
      ev.preventDefault();
      // [MP] –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–ª–æ–∫ "–ù–æ–≤—ã–π")
      async function mpEnsurePatientSelected() {
        let patientId = (qm.patient?.value || "").trim();
        const full_name = (qm.newFullName?.value || "").trim();
        const phone = (qm.newPhone?.value || "").trim();
        const birth_date = (qm.newBirth?.value || "").trim();

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤—ë–ª –≤ "–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç"
        if (full_name) {
          const needCreate =
            !patientId ||
            confirm(
              `–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ¬´${full_name}¬ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ?`
            );
          if (needCreate) {
            try {
              const r = await fetch("/api/patients", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ full_name, phone, birth_date }),
              });
              const data = await r.json().catch(() => ({}));
              if (!r.ok || !(data.ok ?? true) || !data.id) {
                showToast(
                  data?.error || `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (HTTP ${r.status})`,
                  "error"
                );
                return null; // –æ—Ç–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
              }
              // –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ–ª–µ–∫—Ç –∏ –≤—ã–±—Ä–∞—Ç—å
              const opt = document.createElement("option");
              opt.value = data.id;
              opt.textContent = data.full_name || full_name;
              qm.patient?.appendChild(opt);
              qm.patient.value = data.id;
              patientId = data.id;

              // –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à, –æ—á–∏—Å—Ç–∏—Ç—å –∏ —Å–∫—Ä—ã—Ç—å –±–ª–æ–∫ "–ù–æ–≤—ã–π"
              if (window.__DICT_CACHE__) {
                window.__DICT_CACHE__.patients?.unshift({
                  id: data.id,
                  name: data.full_name || full_name,
                });
              }
              if (qm.patientNewRow) qm.patientNewRow.style.display = "none";
              if (qm.newFullName) qm.newFullName.value = "";
              if (qm.newPhone) qm.newPhone.value = "";
              if (qm.newBirth) qm.newBirth.value = "";
              showToast("–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", "ok");
            } catch {
              showToast("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞)", "error");
              return null; // –æ—Ç–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            }
          }
        }
        return patientId;
      }

      const ensuredPatientId = await mpEnsurePatientSelected();
      if (!ensuredPatientId) return; // –æ—à–∏–±–∫–∞/–æ—Ç–º–µ–Ω–∞ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

      const base = {
        doctor_id: qm.doctor?.value || "",
        patient_id: ensuredPatientId,
        service_id: qm.service?.value || "",
        room_id: qm.room?.value || "",
        start: qm.start?.value || "",
        end: qm.end?.value || "",
        status_key: qm.status?.value || "scheduled",
        comment: qm.comment?.value || "",
      };

      // CREATE
      if (!qm.id?.value) {
        if (
          !base.doctor_id ||
          !base.patient_id ||
          !base.service_id ||
          !base.room_id
        ) {
          showToast("–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è: –≤—Ä–∞—á, –ø–∞—Ü–∏–µ–Ω—Ç, —É—Å–ª—É–≥–∞, –∫–∞–±–∏–Ω–µ—Ç", "error");
          return;
        }
        const payload = {
          start: base.start,
          end: base.end,
          room_id: base.room_id,
          doctor_id: base.doctor_id,
          patient_id: base.patient_id,
          service_id: base.service_id,
          note: base.comment || "",
        };
        let ok = false,
          lastErr = "";
        const endpoints = [
          "/api/appointments",
          "/api/appointments/create",
          "/schedule/api/create",
        ];
        for (const url of endpoints) {
          try {
            const r = await fetch(url, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });
            const data = await r.json().catch(() => ({}));
            if (
              r.status === 409 ||
              data?.error === "conflict" ||
              data?.error === "room_conflict"
            ) {
              showToast("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç/–≤—Ä–∞—á –∑–∞–Ω—è—Ç", "error");
              return;
            }
            if (r.ok && (data?.ok ?? true)) {
              ok = true;
              break;
            }
            lastErr = data?.error || `HTTP ${r.status}`;
          } catch {
            lastErr = "network";
          }
        }
        if (!ok) {
          showToast(
            `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è${lastErr ? ` (${lastErr})` : ""}`,
            "error"
          );
          return;
        }
        showToast("–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞", "ok");
      }
      // UPDATE
      else {
        const r = await fetch(`/api/appointments/${qm.id.value}/update`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(base),
        });
        const data = await r.json();
        if (!r.ok || !data.ok) {
          const err =
            data?.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";
          showToast(err, "error");
          return;
        }
        showToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "ok");
      }

      closeModal();
      calendar.refetchEvents();
    });

    // —É–¥–∞–ª–µ–Ω–∏–µ
    qm.btnDel?.addEventListener("click", async () => {
      const id = qm.id?.value;
      if (!id) {
        showToast("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "error");
        return;
      }
      if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) return;
      const candidates = [
        { url: "/schedule/api/delete", body: { id } },
        { url: "/api/appointments/delete", body: { id } },
        {
          url: `/api/appointments/${encodeURIComponent(id)}`,
          method: "DELETE",
          body: {},
        },
      ];
      let ok = false;
      for (const c of candidates) {
        try {
          const r = await fetch(c.url, {
            method: c.method || "POST",
            headers: { "Content-Type": "application/json" },
            body: Object.keys(c.body || {}).length
              ? JSON.stringify(c.body)
              : undefined,
          });
          const data = await r.json().catch(() => ({}));
          if (r.ok && (data.ok ?? true)) {
            ok = true;
            break;
          }
        } catch {}
      }
      if (!ok) {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", "error");
        return;
      }
      closeModal();
      calendar.refetchEvents();
      showToast("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", "ok");
    });
  }); // DOMContentLoaded
</script>

<script>
  // === MINI SEARCH (patients) ‚Äî –µ–¥–∏–Ω—ã–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç =========================
  (function () {
    const psInput = document.getElementById("psInput");
    const psDrop = document.getElementById("psDrop");
    if (!psInput || !psDrop) return;

    // –ì–ª–æ–±–∞–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é —á–∏—Ç–∞–µ—Ç –ª–æ–∞–¥–µ—Ä —Å–æ–±—ã—Ç–∏–π
    window.__PS_SELECTED_PATIENT_ID__ = window.__PS_SELECTED_PATIENT_ID__ || "";

    psDrop.style.zIndex = "4000";
    psDrop.style.pointerEvents = "auto";

    function debounce(fn, ms = 220) {
      let t;
      return (...a) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...a), ms);
      };
    }
    function hideDrop() {
      psDrop.style.display = "none";
      psDrop.innerHTML = "";
    }
    function showDrop() {
      psDrop.style.display = "block";
    }

    function renderDrop(items) {
      if (!items?.length) {
        hideDrop();
        return;
      }
      psDrop.innerHTML = items
        .map(
          (i) => `
      <div class="ps-item" data-id="${i.id}" data-name="${i.name}"
           style="padding:8px 10px; cursor:pointer; border-top:1px solid #f0f2f5;">
        <div style="display:flex; justify-content:space-between; gap:8px;">
          <span class="ps-name">${i.name}</span>
          <small style="opacity:.6">${i.birthdate || ""}${
            i.card_no ? " ¬∑ #" + i.card_no : ""
          }</small>
        </div>
      </div>`
        )
        .join("");
      showDrop();
    }

    function applyPatientFilter(id, name) {
      const selId = (id || "").trim();
      const selName = (name || "").trim();

      // 1) dataset —É –∏–Ω–ø—É—Ç–∞
      psInput.dataset.selId = selId;

      // 2) –æ–±–µ –≥–ª–æ–±–∞–ª–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª—é–±—ã–º–∏ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏)
      window.__PS_SELECTED_PATIENT_ID__ = selId;
      window.psSelectedPatientId = selId;

      // 3) –≤–∏–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
      psInput.value = selName;

      hideDrop();

      // 4) —Ä–µ—Ñ–µ—Ç—á —Å–æ–±—ã—Ç–∏–π
      if (window.calendar?.refetchEvents) window.calendar.refetchEvents();
      else setTimeout(() => window.calendar?.refetchEvents?.(), 0);

      // 5) ¬´–ø—Ä–∏–∫–ª–µ–π–∫–∞¬ª –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      setTimeout(() => {
        psInput.value = selName;
      }, 0);
    }

    const search = debounce(async () => {
      const q = (psInput.value || "").trim();
      if (q.length < 2) {
        hideDrop();
        return;
      }
      try {
        // –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫ (–±—ç–∫–µ–Ω–¥ —É–∂–µ –µ—Å—Ç—å)
        const r = await fetch(
          `/api/patients/min?q=${encodeURIComponent(q)}&limit=8`,
          { cache: "no-store" }
        );

        const data = await r.json().catch(() => ({}));
        if (!r.ok || !data?.ok) {
          hideDrop();
          return;
        }
        renderDrop(data.items || []);
      } catch {
        hideDrop();
      }
    }, 220);

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    psInput.addEventListener("input", search);
    psInput.addEventListener("focus", search);

    // –í—ã–±–æ—Ä –î–û blur: –Ω–∞ mousedown
    psDrop.addEventListener("mousedown", (e) => {
      const item = e.target.closest(".ps-item");
      if (!item) return;
      // –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º bubbling –∏ blur –¥–æ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();

      applyPatientFilter(
        item.dataset.id,
        item.dataset.name || item.querySelector(".ps-name")?.textContent || ""
      );
    });

    // Enter ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π
    psInput.addEventListener("keydown", (e) => {
      if (e.key !== "Enter") return;
      const first = psDrop.querySelector(".ps-item");
      if (!first) return;
      e.preventDefault();
      first.dispatchEvent(
        new MouseEvent("mousedown", { bubbles: true, cancelable: true })
      );
    });

    // –ö–ª–∏–∫ –≤–Ω–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—å
    document.addEventListener("click", (e) => {
      if (e.target === psInput) return;
      if (psDrop.contains(e.target)) return;
      hideDrop();
    });

    // ¬´–°–±—Ä–æ—Å–∏—Ç—å¬ª ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Ä–µ—Ñ–µ—Ç—á
    document
      .getElementById("btnResetFilters")
      ?.addEventListener("click", () => {
        delete psInput.dataset.selId;
        window.__PS_SELECTED_PATIENT_ID__ = "";
        window.psSelectedPatientId = ""; // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –æ—á–∏—Å—Ç–∫—É 2-–π –≥–ª–æ–±–∞–ª–∫–∏
        psInput.value = "";
        hideDrop();
        window.calendar?.refetchEvents?.();
      });
  })();
</script>

<!-- MP-CONTACTS: JS -->
<script>
  async function mpOpenContact(type, patientId) {
    function normPhone(s) {
      const d = (s || "").replace(/\D+/g, "");
      if (!d) return "";
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7xxxxxxxxxx
      if (d.startsWith("8") && d.length === 11) return "7" + d.slice(1);
      if (d.startsWith("7") && d.length === 11) return d;
      if (d.length === 10) return "7" + d; // –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
      return d;
    }
    function buildLink(t, contacts, linksFromServer) {
      // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (linksFromServer && linksFromServer[t]) return linksFromServer[t];

      const phone = normPhone(contacts?.phone || contacts?.whatsapp || "");
      const tg = (contacts?.telegram || "").replace(/^@/, "");
      const mail = (contacts?.email || "").trim();
      const max = (contacts?.max || "").trim();

      switch (t) {
        case "tel":
          return phone ? `tel:+${phone}` : null;
        case "wa":
          return phone ? `https://wa.me/${phone}` : null;
        case "tg":
          // –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ –Ω–∏–∫—É, –∏–Ω–∞—á–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          return tg
            ? `https://t.me/${encodeURIComponent(tg)}`
            : phone
            ? `https://t.me/+${phone}`
            : null;
        case "mail":
          return mail ? `mailto:${mail}` : null;
        case "max":
          // –ú–∞–∫—Å ¬´–∫–∞–∫ WhatsApp¬ª: –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å web.max.ru —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º,
          // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é
          if (phone) return `https://web.max.ru/?phone=${phone}`;
          return `https://web.max.ru/`;
        default:
          return null;
      }
    }

    try {
      if (!patientId) {
        const sel = document.getElementById("patient"); // <select id="patient"> –≤ –º–æ–¥–∞–ª–∫–µ
        if (sel) patientId = sel.value;
      }
      if (!patientId) {
        alert("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç");
        return;
      }

      const res = await fetch(
        `/api/patients/${encodeURIComponent(patientId)}/contacts`,
        { cache: "no-store" }
      );
      if (!res.ok) {
        alert("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        return;
      }

      const j = await res.json().catch(() => ({}));
      if (!j.ok) {
        alert("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      const url = buildLink(type, j.contacts || {}, j.links || null);
      if (!url) {
        alert("–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è: " + type);
        return;
      }

      window.open(url, "_blank", "noopener");
    } catch (e) {
      console.error(e);
      alert("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }
  }

  try {
    window._calendar &&
      typeof window._calendar.render === "function" &&
      window._calendar.render();
  } catch (e) {}
</script>

{% endblock %}

=== D:\Projects\medplatforma\templates\finance\add.html ===
{% extends "_layout.html" %} {% block content %}
<div class="cs-wrap">
  <h1 class="cs-h1">–í–Ω–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏—é</h1>
  <form method="post" action="/finance/add" class="cs-form" id="financeAddForm">
    <div class="cs-row">
      <label class="cs-label">–¢–∏–ø</label>
      <select name="type" class="cs-input" id="typeSel" required>
        <option value="income">–î–æ—Ö–æ–¥ (–æ–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏)</option>
        <option value="expense">–†–∞—Å—Ö–æ–¥</option>
        <option value="deposit">–î–µ–ø–æ–∑–∏—Ç</option>
        <option value="salary">–ó–ü</option>
        <option value="purchase">–î–µ–Ω—å–≥–∏ –Ω–∞ –∑–∞–∫—É–ø–∫—É</option>
      </select>
    </div>

    {% if preset_type %}
    <script>
      window.__preset_type__ = "{{ preset_type }}";
    </script>
    {% endif %}
    <input
      type="hidden"
      name="category"
      id="hiddenCategory"
      value="{{ preset_category or '' }}"
    />

    <div class="cs-row" id="amountRow" style="display: none">
      <label class="cs-label">–°—É–º–º–∞</label>
      <input
        type="number"
        min="0"
        step="1"
        name="amount"
        class="cs-input"
        placeholder="0"
      />
    </div>

    <div class="cs-row">
      <label class="cs-label">–ò—Å—Ç–æ—á–Ω–∏–∫</label>
      <select name="source" class="cs-input">
        <option value="">‚Äî</option>
        <option value="alpha">–ê–ª—å—Ñ–∞</option>
        <option value="sber">–°–±–µ—Ä</option>
        <option value="cash">–ù–∞–ª</option>
      </select>
    </div>

    <div class="cs-row">
      <label class="cs-label">–£—Å–ª—É–≥–∞ (—Ü–µ–Ω–∞ —Å—Ç—Ä–æ–≥–æ –∏–∑ –ø—Ä–∞–π—Å–∞)</label>
      <select name="service_id" class="cs-input" id="svcSel">
        <option value="">‚Äî</option>
        {% for s in (services or []) %}
        <option value="{{ s._id }}" data-price="{{ s.price|default(0) }}">
          {{ s.name }} ‚Äî {{ s.price|default(0) }} ‚ÇΩ
        </option>
        {% endfor %}
      </select>
      <div class="cs-hint" id="priceHint">–¶–µ–Ω–∞: ‚Äî</div>
    </div>

    <div class="cs-row">
      <label class="cs-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
      <input
        type="text"
        name="note"
        class="cs-input"
        placeholder="–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"
      />
    </div>

    <div class="cs-actions">
      <button class="cs-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <a class="cs-link" href="/finance">–û—Ç–º–µ–Ω–∞</a>
    </div>
  </form>
</div>

<script>
  (function () {
    const PRESET_TYPE = "{{ preset_type or '' }}";
    const PRESET_CATEGORY = "{{ preset_category or '' }}";

    const params = new URLSearchParams(location.search);
    const typeSel = document.getElementById("typeSel");
    const amountRow = document.getElementById("amountRow");
    const hiddenCategory = document.getElementById("hiddenCategory");

    // —Ç–∏–ø –∏–∑ query –∏–ª–∏ –ø—Ä–µ—Å–µ—Ç–∞
    if (params.get("type")) typeSel.value = params.get("type");
    if (PRESET_TYPE) typeSel.value = PRESET_TYPE;

    // –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ query –∏–ª–∏ –ø—Ä–µ—Å–µ—Ç–∞
    const cat = PRESET_CATEGORY || params.get("category") || "";
    if (hiddenCategory) hiddenCategory.value = cat;

    function toggleRows() {
      const isIncome = typeSel.value === "income";
      // —Å—É–º–º–∞ –≤–∏–¥–Ω–∞ –¥–ª—è –ù–ï –¥–æ—Ö–æ–¥–æ–≤
      if (amountRow) amountRow.style.display = isIncome ? "none" : "";
      // —É—Å–ª—É–≥–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
      const svcRow = document.getElementById("svcSel")?.closest(".cs-row");
      if (svcRow) svcRow.style.display = isIncome ? "" : "none";
    }
    typeSel.addEventListener("change", toggleRows);
    toggleRows();

    // –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏
    const svcSel = document.getElementById("svcSel");
    const hint = document.getElementById("priceHint");
    function updateHint() {
      const opt = svcSel?.options[svcSel.selectedIndex];
      const p = opt ? opt.getAttribute("data-price") : null;
      if (hint) hint.textContent = p ? "–¶–µ–Ω–∞: " + p + " ‚ÇΩ" : "–¶–µ–Ω–∞: ‚Äî";
    }
    if (svcSel && hint) {
      svcSel.addEventListener("change", updateHint);
      updateHint();
    }
  })();
</script>

<style>
  .cs-wrap {
    max-width: 720px;
    margin: 0 auto;
    padding: 8px 12px 28px;
  }
  .cs-h1 {
    font-size: 28px;
    margin: 10px 0 14px;
  }
  .cs-form {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  .cs-row {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  .cs-label {
    font-size: 13px;
    color: #555;
  }
  .cs-input {
    padding: 8px 10px;
    border: 1px solid #d6d7dc;
    border-radius: 10px;
  }
  .cs-actions {
    display: flex;
    gap: 12px;
    align-items: center;
    margin-top: 8px;
  }
  .cs-btn {
    background: #2e6cff;
    color: #fff;
    border: 0;
    border-radius: 10px;
    padding: 10px 18px;
    cursor: pointer;
  }
  .cs-hint {
    font-size: 12px;
    color: #666;
  }
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\finance\cashbox.html ===
{% extends "_layout.html" %} {% block content %}
<h1 class="h1">–ö–∞—Å—Å–∞</h1>

<div class="grid" style="grid-template-columns: 240px 240px; gap: 16px">
  <div class="card">
    <div class="muted">–î–æ—Ö–æ–¥—ã</div>
    <div style="font-size: 28px; font-weight: 700">
      {{ income|default(0) }} ‚ÇΩ
    </div>
  </div>
  <div class="card">
    <div class="muted">–†–∞—Å—Ö–æ–¥—ã</div>
    <div style="font-size: 28px; font-weight: 700">
      {{ expense|default(0) }} ‚ÇΩ
    </div>
  </div>
</div>

<div class="space"></div>

<div class="card">
  <div class="muted" style="margin-bottom: 8px">–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</div>
  <div class="toolbar">
    <span class="pill">–ê–ª—å—Ñ–∞ ‚Äî {{ by_source.alpha|default(0) }} ‚ÇΩ</span>
    <span class="pill">–°–±–µ—Ä ‚Äî {{ by_source.sber|default(0) }} ‚ÇΩ</span>
    <span class="pill">–ù–∞–ª ‚Äî {{ by_source.cash|default(0) }} ‚ÇΩ</span>
  </div>

  <div class="muted" style="margin: 12px 0 8px">–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</div>
  <div class="toolbar" style="display: flex; gap: 8px; flex-wrap: wrap">
    {% set CAT_RU =
    {"purchase":"–ó–∞–∫—É–ø–∫–∞","marketing":"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥","dividends":"–î–∏–≤–∏–¥–µ–Ω–¥—ã","rent":"–ê—Ä–µ–Ω–¥–∞"}
    %} {% if by_category %} {% for cat, sum in by_category.items() %}
    <a
      class="pill"
      href="/finance?type=expense&category={{ cat }}"
      title="–û—Ç–∫—Ä—ã—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{{ CAT_RU.get(cat,cat) }}¬ª"
    >
      {{ CAT_RU.get(cat,cat) }} ‚Äî {{ sum }} ‚ÇΩ
    </a>
    {% endfor %} {% else %}
    <span class="muted">–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</span>
    {% endif %}
  </div>

  <div style="margin-top: 10px">
    <a class="link" href="/finance?type=expense">–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã</a>
  </div>

  <div class="space"></div>
  <div>
    <a class="link" href="/finance/export/csv?type=expense"
      >–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (CSV)</a
    >
    ¬∑
    <a class="link" href="/finance/export/json?type=expense"
      >–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (JSON)</a
    >
  </div>

  <div class="space"></div>
  <div>
    –§–∏–ª—å—Ç—Ä: <a class="link" href="/finance?source=alpha">–ê–ª—å—Ñ–∞</a> ¬∑
    <a class="link" href="/finance?source=sber">–°–±–µ—Ä</a> ¬∑
    <a class="link" href="/finance?source=cash">–ù–∞–ª</a>
  </div>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\finance\list.html ===
{% extends "_layout.html" %}
{% block content %}

<h1 class="cs-h1">–§–∏–Ω–∞–Ω—Å—ã</h1>

<!-- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π: —Å–∫–∞—á–∞—Ç—å/–∏–º–ø–æ—Ä—Ç -->
<div class="cs-toolbar" style="margin:8px 0; display:flex; gap:12px; align-items:center;">
  <!-- –≠–∫—Å–ø–æ—Ä—Ç (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã) -->
  <a class="cs-link" href="/finance/export/csv?type={{ f_type }}&source={{ f_source }}&category={{ f_category }}">–°–∫–∞—á–∞—Ç—å CSV</a>
  <a class="cs-link" href="/finance/export/json?type={{ f_type }}&source={{ f_source }}&category={{ f_category }}">–°–∫–∞—á–∞—Ç—å JSON</a>

  <!-- –ò–º–ø–æ—Ä—Ç JSON -->
  <form method="post" action="/finance/import/json" enctype="multipart/form-data" style="display:flex; gap:6px;">
    <input type="file" name="file" accept="application/json" class="cs-input" required>
    <button class="cs-btn">–ò–º–ø–æ—Ä—Ç JSON</button>
  </form>
</div>

<!-- –ú–ï–¢–†–ò–ö–ò -->
<div class="cs-cards">
  <div class="cs-card"><div class="cs-metric-label">–î–æ—Ö–æ–¥—ã</div><div class="cs-metric-value">{{ income|default(0) }} ‚ÇΩ</div></div>
  <div class="cs-card"><div class="cs-metric-label">–†–∞—Å—Ö–æ–¥—ã</div><div class="cs-metric-value">{{ expense|default(0) }} ‚ÇΩ</div></div>

  <div class="cs-card">
    <div class="cs-metric-label">–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º</div>
    <ul class="cs-ul">
      <li><span class="cs-pill">alpha</span> {{ by_source.alpha|default(0) }} ‚ÇΩ</li>
      <li><span class="cs-pill">sber</span>  {{ by_source.sber|default(0)  }} ‚ÇΩ</li>
      <li><span class="cs-pill">cash</span>  {{ by_source.cash|default(0)  }} ‚ÇΩ</li>
    </ul>
  </div>
</div>

<!-- === –§–ò–õ–¨–¢–†–´ (–û–¢–î–ï–õ–¨–ù–ê–Ø –§–û–†–ú–ê!) === -->
<form method="get" action="/finance" class="cs-toolbar">
  <!-- –¢–∏–ø -->
  <select name="type" class="cs-input" title="–¢–∏–ø">
    <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
    <option value="income"   {{ 'selected' if f_type=='income'   else '' }}>–î–æ—Ö–æ–¥</option>
    <option value="expense"  {{ 'selected' if f_type=='expense'  else '' }}>–†–∞—Å—Ö–æ–¥</option>
    <option value="deposit"  {{ 'selected' if f_type=='deposit'  else '' }}>–î–µ–ø–æ–∑–∏—Ç</option>
    <option value="salary"   {{ 'selected' if f_type=='salary'   else '' }}>–ó–ü</option>
    <option value="purchase" {{ 'selected' if f_type=='purchase' else '' }}>–ó–∞–∫—É–ø–∫–∞</option>
  </select>

  <!-- –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ -->
  <select name="category" class="cs-input" title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è">
    <option value="">–õ—é–±–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</option>
    <option value="purchase"  {{ 'selected' if f_category=='purchase'  else '' }}>–ó–∞–∫—É–ø–∫–∞</option>
    <option value="rent"      {{ 'selected' if f_category=='rent'      else '' }}>–ê—Ä–µ–Ω–¥–∞</option>
    <option value="marketing" {{ 'selected' if f_category=='marketing' else '' }}>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</option>
    <option value="dividends" {{ 'selected' if f_category=='dividends' else '' }}>–î–∏–≤–∏–¥–µ–Ω–¥—ã</option>
  </select>

  <!-- –ò—Å—Ç–æ—á–Ω–∏–∫ -->
  <select name="source" class="cs-input" title="–ò—Å—Ç–æ—á–Ω–∏–∫">
    <option value="">–õ—é–±–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫</option>
    <option value="alpha" {{ 'selected' if f_source=='alpha' else '' }}>–ê–ª—å—Ñ–∞</option>
    <option value="sber"  {{ 'selected' if f_source=='sber'  else '' }}>–°–±–µ—Ä</option>
    <option value="cash"  {{ 'selected' if f_source=='cash'  else '' }}>–ù–∞–ª</option>
  </select>

  <button type="submit" class="cs-btn">–§–∏–ª—å—Ç—Ä</button>

  <span style="margin-left:8px">–ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</span>
  <a class="cs-link" href="/finance/add?type=expense&category=rent">–ê—Ä–µ–Ω–¥–∞</a>
  <a class="cs-link" href="/finance/add?type=expense&category=marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</a>
  <a class="cs-link" href="/finance/add?type=expense&category=dividends">–î–∏–≤–∏–¥–µ–Ω–¥—ã</a>
  <a class="cs-link" href="/finance/add?type=purchase">–ö–∞—Å—Å–∞</a>
</form>

<!-- –¢–ê–ë–õ–ò–¶–ê -->
<div class="cs-table-wrap">
  <table class="cs-table">
    <thead>
      <tr>
        <th>–í—Ä–µ–º—è</th><th>–¢–∏–ø</th><th>–ò—Å—Ç–æ—á–Ω–∏–∫</th><th>–°—É–º–º–∞</th><th>–£—Å–ª—É–≥–∞</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
      </tr>
    </thead>
    <tbody>
      {% set CAT_RU = {"purchase":"–ó–∞–∫—É–ø–∫–∞","marketing":"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥","dividends":"–î–∏–≤–∏–¥–µ–Ω–¥—ã","rent":"–ê—Ä–µ–Ω–¥–∞"} %}
      {% for it in (items or []) %}
      <tr>
        <td>{{ it.ts }}</td>
        <td>{{ it.type }}</td>
        <td>{{ it.source }}</td>
        <td>{{ it.amount }} ‚ÇΩ</td>
        <td>{{ it.service_name }}</td>
        <td>{{ CAT_RU.get(it.category, '‚Äî') }}</td>
        <td>{{ it.note }}</td>
      </tr>
      {% else %}
      <tr><td colspan="7" class="cs-empty">–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç</td></tr>
      {% endfor %}
    </tbody>
  </table>
</div>

{% endblock %}

=== D:\Projects\medplatforma\templates\finance\print.html ===
{% extends "_layout.html" %} {% block content %}
<h1 class="h1">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø–µ—á–∞—Ç—å</h1>

<style>
  @media print {
    .noprint {
      display: none;
    }
    body {
      background: #fff;
    }
  }
  table.print {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px;
  }
  table.print th,
  table.print td {
    border: 1px solid #e5e7eb;
    padding: 6px 8px;
  }
  table.print th {
    background: #f8fafc;
    text-align: left;
  }
</style>

<div class="noprint" style="margin-bottom: 10px">
  <a class="cs-btn" href="#" onclick="window.print()">–ü–µ—á–∞—Ç—å</a>
  <a class="cs-link" href="/finance">–ù–∞–∑–∞–¥ –≤ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª</a>
</div>

<table class="print">
  <thead>
    <tr>
      <th>–í—Ä–µ–º—è</th>
      <th>–¢–∏–ø</th>
      <th>–ò—Å—Ç–æ—á–Ω–∏–∫</th>
      <th>–°—É–º–º–∞</th>
      <th>–£—Å–ª—É–≥–∞</th>
      <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
      <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
    </tr>
  </thead>
  <tbody>
    {% for it in (items or []) %}
    <tr>
      <td>{{ it.ts }}</td>
      <td>{{ it.type }}</td>
      <td>{{ it.source }}</td>
      <td>{{ it.amount }} ‚ÇΩ</td>
      <td>{{ it.service_name }}</td>
      <td>{{ it.category_ru }}</td>
      <td>{{ it.note }}</td>
    </tr>
    {% else %}
    <tr>
      <td colspan="7" class="cs-empty">–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç</td>
    </tr>
    {% endfor %}
  </tbody>
</table>
{% endblock %}

=== D:\Projects\medplatforma\templates\schedule\list.html ===
{% extends "base.html" %} {% block title %}–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî {{ date_str }}{%
endblock %} {% block head %}

<style>
  .grid {
    display: grid;
    grid-template-columns: 100px 1fr;
    gap: 12px;
  }
  .rooms {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 8px;
  }
  .slot {
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 6px;
    background: #fff;
    min-height: 34px;
  }
  .muted {
    color: #6b7280;
  }
  .toolbar a {
    margin-right: 10px;
  }
  .pill {
    display: inline-block;
    padding: 3px 8px;
    border: 1px solid #e5e7eb;
    border-radius: 999px;
    background: #fff;
  }
  form.inline {
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
  }
  input,
  select {
    border: 1px solid #d1d5db;
    border-radius: 6px;
    padding: 4px 6px;
  }
  .room-head {
    font-weight: 600;
    margin-bottom: 6px;
  }
  .timecell {
    color: #6b7280;
  }
</style>
{% endblock %} {% block content %}
<h1>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</h1>

<div class="toolbar" style="margin-bottom: 10px">
  <a class="pill" href="/schedule?date={{ prev_day }}">‚Üê –ù–∞–∑–∞–¥</a>
  <a class="pill" href="/schedule?date={{ today }}">–°–µ–≥–æ–¥–Ω—è</a>
  <a class="pill" href="/schedule?date={{ next_day }}">–í–ø–µ—Ä—ë–¥ ‚Üí</a>
  <span class="muted" style="margin-left: 10px">–î–µ–Ω—å: {{ date_str }}</span>
</div>

<div class="grid">
  <!-- –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –≤—Ä–µ–º—è -->
  <div>
    {% for t in slots %}
    <div class="timecell" style="height: 34px">{{ t }}</div>
    {% endfor %}
  </div>

  <!-- –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –∫–æ–º–Ω–∞—Ç—ã —Å–æ —Å–ª–æ—Ç–∞–º–∏ -->
  <div class="rooms">
    {% for r in rooms %}
    <div>
      <div class="room-head">{{ r.name }}</div>
      {% for t in slots %} {% set k = (t, r.code) %}
      <div class="slot">
        {% if cell.get(k) %} {% for ap in cell.get(k) %}
        <div>
          <b>{{ ap.patient_name or "–ü–∞—Ü–∏–µ–Ω—Ç" }}</b> ‚Äî {{ ap.duration or 15 }}
          –º–∏–Ω.
          <span class="muted">{{ ap.doctor_name or "" }}</span>
        </div>
        {% if ap.note %}
        <div class="muted">{{ ap.note }}</div>
        {% endif %} {% endfor %} {% else %}
        <!-- –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç -->
        <form class="inline" method="post" action="/schedule/add">
          <input type="hidden" name="date" value="{{ date_str }}" />
          <input type="hidden" name="room" value="{{ r.code }}" />
          <input type="hidden" name="time" value="{{ t }}" />
          <select name="duration">
            <option value="15">15</option>
            <option value="30">30</option>
            <option value="60">60</option>
          </select>
          <input name="patient_name" placeholder="–ü–∞—Ü–∏–µ–Ω—Ç" required />
          <input name="doctor_name" placeholder="–í—Ä–∞—á" />
          <button>OK</button>
        </form>
        {% endif %}
      </div>
      {% endfor %}
    </div>
    {% endfor %}
  </div>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\_layout.html ===
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}MedPlatforma{% endblock %}</title>
  <style>
    body{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
         background:#f6f7fb;margin:0;color:#222}
    .topbar{background:#1b1f3b;color:#fff;padding:10px 14px;font-weight:600}
    .container{max-width:1200px;margin:0 auto;padding:14px}
    a{color:#2e6cff;text-decoration:none}
    a:hover{text-decoration:underline}
  </style>
  {% block head %}{% endblock %}
</head>
<body>
  <div class="topbar">MedPlatforma</div>
  <div class="container">
    {% block content %}{% endblock %}
  </div>
  {% block scripts %}{% endblock %}
</body>
</html>

=== D:\Projects\medplatforma\templates\404.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</title>
</head>
<body>
    <h1>404 ‚Äî –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç</h1>
    <p>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –æ—à–∏–±–ª–∏—Å—å –∞–¥—Ä–µ—Å–æ–º.</p>
    <a href="{{ url_for('calendar_view') }}">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
</body>
</html>

=== D:\Projects\medplatforma\templates\action_log.html ===
{% extends "base.html" %}
{% block content %}
<h2>–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π</h2>
<div class="card shadow" style="max-width:1250px;margin:32px auto 0 auto;padding:34px 24px;">
  <table class="action-log-table" style="width:100%;border-radius:20px;overflow:hidden;">
    <thead>
      <tr>
        <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
        <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
        <th>–†–æ–ª—å</th>
        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
        <th>–û–±—ä–µ–∫—Ç</th>
        <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
      </tr>
    </thead>
    <tbody>
      {% for log in logs %}
      <tr>
        <td style="color:#888;">{{ log.time }}</td>
        <td>
          <img src="{{ log.avatar_url or '/static/avatars/staff_1.png' }}" class="avatar mini-avatar" style="width:38px;height:38px;vertical-align:middle;margin-right:10px;">
          {{ log.user }}
        </td>
        <td>
          <span class="badge bg-light text-primary">{{ log.role }}</span>
        </td>
        <td>
          {% if log.action == 'created' %}
            <span class="badge bg-light" style="color:#22c55e;"><b>–°–æ–∑–¥–∞–Ω–∏–µ</b></span>
          {% elif log.action == 'edited' %}
            <span class="badge bg-light" style="color:#eab308;"><b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</b></span>
          {% elif log.action == 'deleted' %}
            <span class="badge bg-light" style="color:#ef4444;"><b>–£–¥–∞–ª–µ–Ω–∏–µ</b></span>
          {% else %}
            <span class="badge bg-light">{{ log.action|capitalize }}</span>
          {% endif %}
        </td>
        <td>{{ log.object }}</td>
        <td>{{ log.comment }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_doctor.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞</title>
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,600&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Montserrat', sans-serif; background: #f7f8fa;}
        .form-card { width: 400px; margin: 40px auto; background: #fff; border-radius: 22px; box-shadow: 0 6px 32px rgba(20,40,80,.08); padding: 32px;}
        .form-label { font-size: 1rem; font-weight: 600; margin-bottom: 4px; display: block;}
        .form-input { width: 100%; border: 1px solid #ccd; border-radius: 8px; padding: 8px; margin-bottom: 14px; font-size: 1rem;}
        .submit-btn { background: #445be2; color: #fff; border: none; border-radius: 10px; padding: 10px 20px; font-weight: 600; cursor: pointer; transition: background 0.2s;}
        .submit-btn:hover { background: #2236a7;}
    </style>
</head>
<body>
    <form class="form-card" method="POST">
        <label class="form-label">–§–ò–û</label>
        <input class="form-input" type="text" name="full_name" required>
        <label class="form-label">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</label>
        <input class="form-input" type="text" name="specialization" required>
        <label class="form-label">E-mail</label>
        <input class="form-input" type="email" name="email">
        <label class="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
        <input class="form-input" type="text" name="phone">
        <label class="form-label">–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
        <input class="form-input" type="text" name="avatar_url">
        <button class="submit-btn" type="submit">–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞</button>
    </form>
</body>
</html>

=== D:\Projects\medplatforma\templates\add_event.html ===
{% extends "base.html" %}
{% block content %}
<h2 style="margin:8px 0 14px;">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</h2>

<form method="post" style="display:grid;grid-template-columns:1fr 1fr;gap:16px;max-width:900px;">
  <!-- –í—Ä–∞—á -->
  <label>
    <div>–í—Ä–∞—á</div>
    <select name="doctor_id" required style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
      <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
      {% for d in doctors %}
        <option value="{{ d._id }}">{{ d.full_name }}</option>
      {% endfor %}
    </select>
  </label>

  <!-- –ü–∞—Ü–∏–µ–Ω—Ç -->
  <label>
    <div>–ü–∞—Ü–∏–µ–Ω—Ç</div>
    <select name="patient_id" required style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
      <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
      {% for p in patients %}
        <option value="{{ p._id }}">{{ p.full_name }}</option>
      {% endfor %}
    </select>
  </label>

  <!-- –£—Å–ª—É–≥–∞ -->
  <label>
    <div>–£—Å–ª—É–≥–∞</div>
    <select id="service_id" name="service_id" required style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
      <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
      {% for s in services %}
        <option value="{{ s._id }}" data-dur="{{ s.duration_min or 30 }}">{{ s.name }}</option>
      {% endfor %}
    </select>
    <small id="service_hint" style="opacity:.7;"></small>
  </label>

  <!-- –ö–∞–±–∏–Ω–µ—Ç -->
  <label>
    <div>–ö–∞–±–∏–Ω–µ—Ç</div>
    <select id="room_id" name="room_id" required style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
      <option value="">‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ ‚Äî</option>
      {% for r in rooms %}
        <option value="{{ r._id }}">{{ r.name }}</option>
      {% endfor %}
    </select>
    <small id="busy_hint" style="opacity:.75;"></small>
  </label>

  <!-- –ù–∞—á–∞–ª–æ -->
  <label>
    <div>–ù–∞—á–∞–ª–æ</div>
    <input id="start" type="datetime-local" name="start" required step="300"
           style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
  </label>

  <!-- –ö–æ–Ω–µ—Ü (—Å—Ç–∞–≤–∏–º –∞–≤—Ç–æ–º–∞—Ç–æ–º, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å) -->
  <label>
    <div>–ö–æ–Ω–µ—Ü</div>
    <input id="end" type="datetime-local" name="end" step="300"
           style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
    <small style="opacity:.7;">–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∂–µ—Ç–µ, –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏.</small>
  </label>

  <!-- –°—Ç–∞—Ç—É—Å -->
  <label>
    <div>–°—Ç–∞—Ç—É—Å</div>
    <select name="status_key" style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;">
      <option value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</option>
      <option value="arrived">–ü—Ä–∏–±—ã–ª</option>
      <option value="done">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
      <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
    </select>
  </label>

  <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π -->
  <label style="grid-column:1/-1;">
    <div>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</div>
    <textarea name="comment" rows="3" style="width:100%;padding:8px;border:1px solid #dbeafd;border-radius:8px;"></textarea>
  </label>

  <div style="grid-column:1/-1;display:flex;gap:12px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;border-radius:8px;padding:10px 18px;">–°–æ–∑–¥–∞—Ç—å</button>
    <a href="{{ url_for('calendar_view') }}" class="btn" style="padding:10px 14px;border:1px solid #dbeafd;border-radius:8px;">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

{% block scripts %}
<script>
(function(){
  const serviceSel = document.getElementById('service_id');
  const startInp   = document.getElementById('start');
  const endInp     = document.getElementById('end');
  const hint       = document.getElementById('service_hint');
  const roomSel    = document.getElementById('room_id');
  const busyHint   = document.getElementById('busy_hint');

  function isoLocal(dt){
    // YYYY-MM-DDTHH:MM
    const pad = n => String(n).padStart(2,'0');
    return dt.getFullYear()+"-"+pad(dt.getMonth()+1)+"-"+pad(dt.getDate())+"T"+pad(dt.getHours())+":"+pad(dt.getMinutes());
  }

  function addMinutes(dt, m){ return new Date(dt.getTime() + m*60000); }

  function recalcEnd(){
    const sId = serviceSel.value;
    const sVal = startInp.value;
    if (!sId || !sVal) return;
    const durAttr = serviceSel.selectedOptions[0]?.getAttribute('data-dur');
    const dur = parseInt(durAttr || '30', 10);
    const start = new Date(sVal);
    const end = addMinutes(start, dur);
    endInp.value = isoLocal(end);
    hint.textContent = `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${dur} –º–∏–Ω. –ö–æ–Ω–µ—Ü: ${endInp.value.split('T')[1]}`;
  }

  serviceSel?.addEventListener('change', recalcEnd);
  startInp?.addEventListener('change', recalcEnd);

  // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É –∏ –¥–∞—Ç–µ
  function refreshBusy(){
    const roomId = roomSel.value;
    const sVal = startInp.value;
    if (!roomId || !sVal) { busyHint.textContent = ''; return; }
    const date = sVal.split('T')[0];
    fetch(`/api/rooms/busy?room_id=${encodeURIComponent(roomId)}&date=${date}`)
      .then(r => r.json())
      .then(data => {
        if (!data.ok) { busyHint.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å'; return; }
        if (!data.items.length) { busyHint.textContent = '–°–≤–æ–±–æ–¥–Ω–æ –≤–µ—Å—å –¥–µ–Ω—å'; return; }
        const txt = data.items.map(i => `${i.start}‚Äì${i.end}`).join(', ');
        busyHint.textContent = `–ó–∞–Ω—è—Ç–æ: ${txt}`;
      })
      .catch(()=> busyHint.textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
  }

  roomSel?.addEventListener('change', refreshBusy);
  startInp?.addEventListener('change', refreshBusy);

})();
</script>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_expense.html ===
{% extends 'base.html' %}
{% block title %}–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥{% endblock %}
{% block content %}
<div style="max-width:500px;margin:0 auto;background:#fff;border-radius:20px;box-shadow:0 6px 32px rgba(20,40,80,.08);padding:38px;">
    <h2>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</h2>
    <form method="POST">
        <label>–î–∞—Ç–∞:<br>
            <input type="date" name="date" required style="width:180px;margin-bottom:14px;">
        </label><br>
        <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:<br>
            <input type="text" name="category" required placeholder="–ê—Ä–µ–Ω–¥–∞ / –ó–ü / –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥." style="width:220px;margin-bottom:14px;">
        </label><br>
        <label>–°—É–º–º–∞:<br>
            <input type="number" name="amount" required style="width:120px;margin-bottom:14px;">
        </label><br>
        <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:<br>
            <input type="text" name="comment" style="width:300px;margin-bottom:16px;">
        </label><br>
        <button type="submit" style="background:#445be2;color:#fff;border:none;border-radius:8px;padding:9px 19px;font-weight:700;cursor:pointer;">–î–æ–±–∞–≤–∏—Ç—å</button>
    </form>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_patient.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:860px;">
  <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
    <label>–§–ò–û
      <input type="text" name="full_name" value="{{ form.full_name or '' }}" required>
    </label>
    <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
      <input type="date" name="birthday" value="{{ form.birthday or '' }}">
    </label>

    <label>–ü–æ–ª
      <select name="gender">
        <option value="male"   {% if form.gender=='male' %}selected{% endif %}>–ú—É–∂—Å–∫–æ–π</option>
        <option value="female" {% if form.gender=='female' %}selected{% endif %}>–ñ–µ–Ω—Å–∫–∏–π</option>
        <option value="other"  {% if form.gender=='other' %}selected{% endif %}>–î—Ä—É–≥–æ–µ</option>
      </select>
    </label>
    <label>–ê–≤–∞—Ç–∞—Ä (–ø—É—Ç—å)
      <input type="text" name="avatar" value="{{ form.avatar or '' }}" placeholder="/static/avatars/patients/p1.jpg">
    </label>

    <label>–¢–µ–ª–µ—Ñ–æ–Ω
      <input type="text" name="phone" value="{{ form.contacts.phone or '' }}">
    </label>
    <label>Email
      <input type="email" name="email" value="{{ form.contacts.email or '' }}">
    </label>

    <label>WhatsApp
      <input type="text" name="whatsapp" value="{{ form.contacts.whatsapp or '' }}">
    </label>
    <label>Telegram
      <input type="text" name="telegram" value="{{ form.contacts.telegram or '' }}" placeholder="@username">
    </label>

    <label>–ì–æ—Ä–æ–¥
      <input type="text" name="city" value="{{ form.address.city or '' }}">
    </label>
    <label>–£–ª–∏—Ü–∞/–¥–æ–º
      <input type="text" name="street" value="{{ form.address.street or '' }}">
    </label>
    <label>–ò–Ω–¥–µ–∫—Å
      <input type="text" name="zip" value="{{ form.address.zip or '' }}">
    </label>

    <label style="grid-column:1/-1;">–ó–∞–º–µ—Ç–∫–∏
      <textarea name="notes" rows="4">{{ form.notes or '' }}</textarea>
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('patients_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_payment.html ===
{% extends 'base.html' %}
{% block title %}–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É{% endblock %}
{% block content %}
<div style="max-width:450px; margin:0 auto; background:#fff; border-radius:20px; box-shadow:0 6px 32px rgba(20,40,80,.08); padding:38px 42px;">
    <h2 style="font-size:1.6rem; font-weight:700; margin-bottom:28px;">–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É</h2>
    <form method="POST">
        <div style="font-weight:600; margin-bottom:9px;">–§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:</div>
        <div style="margin-bottom:18px;">{{ patient.full_name }}</div>
        <div style="font-weight:600; margin-bottom:6px;">–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (‚ÇΩ):</div>
        <input name="amount" type="number" min="0" step="0.01" required style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px; font-size:1.1rem;">
        <div style="font-weight:600; margin-bottom:6px;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</div>
        <textarea name="comment" rows="2" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px; font-size:1.05rem;"></textarea>
        <button type="submit" style="background:#13b949; color:#fff; border:none; border-radius:10px; padding:11px 32px; font-weight:700; font-size:1.09rem; cursor:pointer;">–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É</button>
    </form>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_room.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:720px;">
  <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
    <label>–ù–∞–∑–≤–∞–Ω–∏–µ
      <input type="text" name="name" value="{{ form.name or '' }}" required>
    </label>

    <label>–¢–∏–ø
      <select name="type" required>
        {% for v,t in ROOM_TYPES %}
          <option value="{{ v }}" {% if form.type==v %}selected{% endif %}>{{ t }}</option>
        {% endfor %}
      </select>
    </label>

    <label>–°—Ç–∞—Ç—É—Å
      <select name="status" required>
        {% for v,t in ROOM_STATUSES %}
          <option value="{{ v }}" {% if form.status==v %}selected{% endif %}>{{ t }}</option>
        {% endfor %}
      </select>
    </label>

    <label>–¶–≤–µ—Ç
      <input type="color" name="color" value="{{ form.color or '#1abc9c' }}" style="height:42px;">
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('rooms_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_service.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:720px;">
  <div style="display:grid;grid-template-columns:1fr 180px;gap:12px;">
    <label>–ù–∞–∑–≤–∞–Ω–∏–µ
      <input type="text" name="name" value="{{ form.name or '' }}" required>
    </label>
    <label>–ö–æ–¥
      <input type="text" name="code" value="{{ form.code or '' }}" placeholder="CONSULT / FILL ..." required>
    </label>

    <label>–¶–µ–Ω–∞, ‚ÇΩ
      <input type="number" name="price" value="{{ form.price or 0 }}" min="0" step="1">
    </label>
    <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
      <input type="number" name="duration_min" value="{{ form.duration_min or 30 }}" min="5" step="5">
    </label>

    <label>–¶–≤–µ—Ç
      <input type="color" name="color" value="{{ form.color or '#3498db' }}" style="height:42px;">
    </label>
    <label style="display:flex;align-items:center;gap:8px;margin-top:26px;">
      <input type="checkbox" name="is_active" {% if form.is_active %}checked{% endif %}> –ê–∫—Ç–∏–≤–Ω–∞
    </label>

    <label style="grid-column:1/-1;">–û–ø–∏—Å–∞–Ω–∏–µ
      <textarea name="description" rows="4">{{ form.description or '' }}</textarea>
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('services_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_xray.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–æ–∫</h2>
<form method="post" enctype="multipart/form-data" class="card shadow p-4" style="max-width:440px;">
    <div class="mb-3">
        <label>–ü–∞—Ü–∏–µ–Ω—Ç:</label>
        <select name="patient_id" class="form-select" required>
            {% for p in patients %}
            <option value="{{ p._id }}">{{ p.full_name }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="mb-3">
        <label>–í—Ä–∞—á:</label>
        <select name="doctor_id" class="form-select" required>
            {% for d in doctors %}
            <option value="{{ d._id }}">{{ d.full_name }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="mb-3">
        <label>–¢–∏–ø —Å–Ω–∏–º–∫–∞:</label>
        <select name="type" class="form-select">
            <option>–ü–∞–Ω–æ—Ä–∞–º–∞</option>
            <option>–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π</option>
            <option>–ö–¢</option>
        </select>
    </div>
    <div class="mb-3">
        <label>–§–∞–π–ª —Å–Ω–∏–º–∫–∞ (JPG/PNG):</label>
        <input type="file" name="image" accept="image/*" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>–ö—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:</label>
        <input type="text" name="comment" class="form-control">
    </div>
    <div class="mb-3">
        <label>–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:</label>
        <textarea name="report" class="form-control" rows="2"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\add_ztl.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é (ZTL)</h2>
<form method="post" enctype="multipart/form-data" class="card shadow p-4" style="max-width:440px;">
    <div class="mb-3">
        <label>–ü–∞—Ü–∏–µ–Ω—Ç:</label>
        <select name="patient_id" class="form-select" required>
            {% for p in patients %}
            <option value="{{ p._id }}">{{ p.full_name }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="mb-3">
        <label>–í—Ä–∞—á:</label>
        <select name="doctor_id" class="form-select" required>
            {% for d in doctors %}
            <option value="{{ d._id }}">{{ d.full_name }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="mb-3">
        <label>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</label>
        <select name="type" class="form-select">
            <option>–ö–æ—Ä–æ–Ω–∫–∞</option>
            <option>–í–∏–Ω–∏—Ä</option>
            <option>–ë—Ä–µ–∫–µ—Ç—ã</option>
            <option>–ü—Ä–æ—Ç–µ–∑</option>
            <option>–ö–∞–ø–ø–∞</option>
        </select>
    </div>
    <div class="mb-3">
        <label>–§–∞–π–ª (—Ñ–æ—Ç–æ, 3D, pdf):</label>
        <input type="file" name="file" accept="image/*,.pdf,.stl,.obj" class="form-control">
    </div>
    <div class="mb-3">
        <label>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</label>
        <input type="date" name="order_date" class="form-control" required value="{{ (now or '').split('T')[0] }}">
    </div>
    <div class="mb-3">
        <label>–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
        <input type="date" name="due_date" class="form-control" required>
    </div>
    <div class="mb-3">
        <label>–°—Ç–∞—Ç—É—Å:</label>
        <select name="status" class="form-select">
            <option>–í —Ä–∞–±–æ—Ç–µ</option>
            <option>–ì–æ—Ç–æ–≤–æ</option>
            <option>–í—ã–¥–∞–Ω–æ</option>
            <option>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</option>
        </select>
    </div>
    <div class="mb-3">
        <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
        <textarea name="comment" class="form-control" rows="2"></textarea>
    </div>
    <button type="submit" class="btn btn-primary">–î–æ–±–∞–≤–∏—Ç—å</button>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\admin_seed.html ===
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <title>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (MVP)</title>
    <style>
      body {
        font-family: system-ui, Arial;
        max-width: 720px;
        margin: 24px auto;
        line-height: 1.4;
      }
      input,
      button {
        padding: 8px 12px;
      }
      .row {
        margin: 12px 0;
      }
      code {
        background: #f6f6f6;
        padding: 2px 4px;
      }
      .ok {
        color: #0a0;
      }
      .err {
        color: #c00;
      }
    </style>
  </head>
  <body>
    <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (—É—Å–ª—É–≥–∏/–≤—Ä–∞—á–∏/–∫–∞–±–∏–Ω–µ—Ç—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)</h2>

    <div class="row">
      <label>–ê–¥–º–∏–Ω-—Ç–æ–∫–µ–Ω: <input id="token" placeholder="SECRET_KEY" /></label>
    </div>

    <div class="row">
      <input type="file" id="file" />
      <button onclick="upload()">–ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP</button>
    </div>

    <div class="row">
      <button onclick="load()">–ü—Ä–∏–º–µ–Ω–∏—Ç—å CSV</button>
      <button onclick="disableDemo()">–û—Ç–∫–ª—é—á–∏—Ç—å –¥–µ–º–æ</button>
      <button onclick="ping()">Ping</button>
    </div>

    <pre id="out"></pre>

    <script>
      async function upload() {
        const f = document.getElementById("file").files[0];
        if (!f) return alert("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª ZIP");
        const fd = new FormData();
        fd.append("file", f);
        const r = await fetch("/api/admin/seed/upload", {
          method: "POST",
          headers: { "X-Admin-Token": document.getElementById("token").value },
          body: fd,
        });
        document.getElementById("out").textContent = await r.text();
      }
      async function load() {
        const r = await fetch("/api/admin/seed/load", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Admin-Token": document.getElementById("token").value,
          },
          body: JSON.stringify({}),
        });
        document.getElementById("out").textContent = await r.text();
      }
      async function disableDemo() {
        const r = await fetch("/api/admin/seed/disable_demo", {
          method: "POST",
          headers: { "X-Admin-Token": document.getElementById("token").value },
        });
        document.getElementById("out").textContent = await r.text();
      }
      async function ping() {
        const r = await fetch("/api/admin/seed/ping");
        document.getElementById("out").textContent = await r.text();
      }
    </script>
  </body>
</html>

=== D:\Projects\medplatforma\templates\backup.html ===
<h2>–ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö (—ç–∫—Å–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π)</h2>
<ul>
  <li><a href="{{ url_for('backup_collection', collection='patients') }}">–°–∫–∞—á–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (CSV)</a></li>
  <li><a href="{{ url_for('backup_collection', collection='doctors') }}">–°–∫–∞—á–∞—Ç—å –≤—Ä–∞—á–µ–π (CSV)</a></li>
  <li><a href="{{ url_for('backup_collection', collection='events') }}">–°–∫–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏—è (CSV)</a></li>
  <li><a href="{{ url_for('backup_collection', collection='payments') }}">–°–∫–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—ã (CSV)</a></li>
  <li><a href="{{ url_for('backup_collection', collection='logs') }}">–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ (CSV)</a></li>
</ul>

=== D:\Projects\medplatforma\templates\base.html ===
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Medplatforma{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:400,600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    {% block head %}{% endblock %}
</head>
<body class="">
  <div class="layout">
    <aside class="sidebar">
      {% include 'sidebar.html' %}
    </aside>
    <div class="main-area">
      {% include 'topbar.html' %}
      <main class="content">
        {% block content %}{% endblock %}
      </main>
    </div>
  </div>

  {% block scripts %}
  <script>
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    function toggleProfileMenu() {
      let menu = document.getElementById('profileMenu');
      menu.style.display = (menu.style.display === 'flex' ? 'none' : 'flex');
    }
    window.onclick = function(e) {
      let menu = document.getElementById('profileMenu');
      if (menu && e.target.closest('.profile-block') == null && e.target.closest('.profile-menu') == null) {
        menu.style.display = 'none';
      }
    };

    // --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã ---
    document.addEventListener("DOMContentLoaded", function() {
      const themeBtn = document.getElementById('themeToggleBtn');
      if (themeBtn) {
        themeBtn.onclick = function() {
          const sun = this.querySelector('.theme-sun');
          const moon = this.querySelector('.theme-moon');
          const body = document.body;
          if (sun && sun.style.display !== 'none') {
            sun.style.display = 'none';
            moon.style.display = 'inline';
            body.classList.add('dark-theme');
          } else {
            if (sun) sun.style.display = 'inline';
            if (moon) moon.style.display = 'none';
            body.classList.remove('dark-theme');
          }
        };
      }
    });
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤ localStorage, –µ—Å–ª–∏ –Ω–∞–¥–æ.
  </script>
  {% endblock %}
  <script>
function toggleProfileMenu() {
  let menu = document.getElementById('profileMenu');
  menu.style.display = (menu.style.display === 'flex' ? 'none' : 'flex');
}
window.onclick = function(e) {
  let menu = document.getElementById('profileMenu');
  if (menu && e.target.closest('.profile-block') == null && e.target.closest('.profile-menu') == null) {
    menu.style.display = 'none';
  }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
document.addEventListener('DOMContentLoaded', function() {
  const themeBtn = document.getElementById('themeToggleBtn');
  const sunIcon = document.querySelector('.theme-sun');
  const moonIcon = document.querySelector('.theme-moon');
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-theme');
    sunIcon.style.display = 'none';
    moonIcon.style.display = 'inline';
  }
  themeBtn.onclick = function() {
    if (document.body.classList.contains('dark-theme')) {
      document.body.classList.remove('dark-theme');
      sunIcon.style.display = 'inline';
      moonIcon.style.display = 'none';
      localStorage.setItem('theme', 'light');
    } else {
      document.body.classList.add('dark-theme');
      sunIcon.style.display = 'none';
      moonIcon.style.display = 'inline';
      localStorage.setItem('theme', 'dark');
    }
  }
});
</script>
</body>
</html>

=== D:\Projects\medplatforma\templates\cabinet_card.html ===
{% extends "base.html" %}

{% block content %}
<h2>–°–æ–±—ã—Ç–∏—è –≤ {{ cabinet }}</h2>
<ul>
  {% for e in events %}
    <li>
      {{ e.start }} ‚Äî {{ e.title or '' }}
      <!-- –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ—ã: –≤—Ä–∞—á, –ø–∞—Ü–∏–µ–Ω—Ç, —Å—Ç–∞—Ç—É—Å -->
    </li>
  {% endfor %}
</ul>
<a href="/calendar" class="btn-main">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</a>
{% endblock %}

=== D:\Projects\medplatforma\templates\calendar.backup.html ===
{% extends "base.html" %} {% block content %}

<!-- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è -->
<div
  style="
    display: flex;
    align-items: center;
    gap: 22px;
    padding: 6px 0 6px 12px;
    background: #fff;
    border-radius: 14px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    margin-bottom: 10px;
  "
>
  <span title="–í—Å–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤">
    <i class="fa-solid fa-house-chimney-medical" style="color: #467fe3"></i>
    <b>{{ metrics.total_rooms }}</b>
  </span>
  <span title="–°–≤–æ–±–æ–¥–Ω—ã–µ">
    <i class="fa-solid fa-circle-check" style="color: #21ba45"></i>
    <b>{{ metrics.free_rooms }}</b>
  </span>
  <span style="margin-left: auto; display: flex; gap: 12px">
    <a
      href="{{ url_for('add_event') }}"
      class="btn-main"
      style="
        background: #1976d2;
        color: #fff;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 22px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    </a>
    <a
      href="{{ url_for('export_calendar') }}"
      class="btn-main btn-export"
      style="
        background: #fff;
        color: #3185cb;
        border: 1.5px solid #dbeafd;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 18px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-file-arrow-down"></i> –í—ã–≥—Ä—É–∑–∫–∞
    </a>
  </span>
</div>

<!-- –ö–∞–±–∏–Ω–µ—Ç—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å -->
<div
  id="roomsBar"
  style="display: flex; gap: 36px; margin: 14px 0 12px 8px; flex-wrap: wrap"
>
  {% for cab in cabinets %} {% set info = room_info.get(cab) if room_info else
  None %}
  <span
    data-room-name="{{ cab }}"
    style="font-size: 1.12em; font-weight: 600; cursor: default"
  >
    {{ cab }} ‚Äî
    <b
      class="room-status-text"
      style="color:{{ info.color if info else 'inherit' }}"
    >
      {{ info.text if info else '‚Äî' }}
    </b>
    <span
      class="room-next"
      style="opacity: 0.7; font-weight: 500; margin-left: 8px"
    >
      {% if info and info.state == 'available' and info.next %} {% set t =
      info.next.start.split('T')[1] if info.next.start else '' %} –ë–ª–∏–∂–∞–π—à–∏–π: {{
      t }} {% if info.next.in_minutes is not none %} (—á–µ—Ä–µ–∑ {% if
      info.next.in_minutes < 0 %}0 –º–∏–Ω {% elif info.next.in_minutes < 60 %}{{
      info.next.in_minutes }} –º–∏–Ω {% else %}{{ (info.next.in_minutes // 60)|int
      }} —á {{ (info.next.in_minutes % 60)|int }} –º–∏–Ω {% endif %} ) {% endif %}
      {% if info.next.service or info.next.patient %} ‚Ä¢ {{ info.next.service
      }}{% if info.next.service and info.next.patient %} ‚Äî {% endif %}{{
      info.next.patient }} {% endif %} {% endif %}
    </span>
  </span>
  {% endfor %}
</div>

<!-- –õ–µ–≥–µ–Ω–¥–∞/—Ñ–∏–ª—å—Ç—Ä—ã -->
<div
  style="
    display: flex;
    gap: 30px;
    align-items: center;
    font-size: 1.01em;
    margin-bottom: 12px;
    margin-left: 8px;
  "
>
  <span
    ><span
      style="
        background: #a2c6fa;
        border: 1.5px solid #dde7f7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–µ—Ä–≤–∏—á–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #fbc7c0;
        border: 1.5px solid #fde7e7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û—Ç–∫–∞–∑</span
  >
  <span
    ><span
      style="
        background: #fde8a5;
        border: 1.5px solid #f7e9c5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–æ–≤—Ç–æ—Ä–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #b4f0c0;
        border: 1.5px solid #cefad5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û–ø–ª–∞—á–µ–Ω</span
  >
</div>

<div
  class="calendar-filters"
  style="display: flex; gap: 12px; align-items: center; margin-bottom: 18px"
>
  <select id="doctorFilter" class="filter-select">
    <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
    {% for doc in doctors %}
    <option value="{{ doc._id }}">{{ doc.full_name }}</option>
    {% endfor %}
  </select>

  <div style="position: relative">
    <input
      type="text"
      id="patientSearch"
      class="filter-input"
      placeholder="–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞..."
      style="
        padding: 7px 18px;
        border-radius: 8px;
        border: 1px solid #dde7f7;
        min-width: 180px;
      "
    />
    <ul
      id="patientSearchList"
      class="search-list"
      style="
        display: none;
        position: absolute;
        z-index: 1000;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 12px #eee;
        margin: 0;
        padding: 0;
        list-style: none;
        max-height: 250px;
        overflow-y: auto;
        left: 0;
        top: 36px;
        width: 100%;
      "
    ></ul>
  </div>

  <select id="serviceFilter" class="filter-select">
    <option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>
  </select>

  <select id="cabinetFilter" class="filter-select">
    <option value="">–í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã</option>
    {% for cab in cabinets %}
    <option value="{{ cab }}">{{ cab }}</option>
    {% endfor %}
  </select>

  <button id="resetFilters" style="margin-left: 10px">–°–±—Ä–æ—Å–∏—Ç—å</button>
</div>

<!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å -->
<div
  id="calendar"
  style="
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    padding: 8px;
    min-height: 72vh;
  "
></div>

<!-- –ú–æ–¥–∞–ª–∫–∞ -->
<div
  id="quickModal"
  style="
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.35);
    z-index: 9999;
  "
>
  <div
    style="
      background: #fff;
      max-width: 680px;
      margin: 7vh auto;
      padding: 18px;
      border-radius: 12px;
      box-shadow: 0 8px 28px rgba(0, 0, 0, 0.08);
    "
  >
    <div
      style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px"
    >
      <h3 style="margin: 0; flex: 1">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h3>
      <button
        id="qmClose"
        type="button"
        style="
          border: none;
          background: #eee;
          border-radius: 8px;
          padding: 6px 10px;
          cursor: pointer;
        "
      >
        √ó
      </button>
    </div>

    <form
      id="qmForm"
      style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px"
    >
      <input type="hidden" id="qm_id" />

      <label
        >–í—Ä–∞—á
        <select
          id="qm_doctor"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ü–∞—Ü–∏–µ–Ω—Ç
        <div style="display: flex; gap: 8px; align-items: center; width: 100%">
          <select
            id="qm_patient"
            class="filter-select"
            required
            style="width: 100%"
          ></select>
        <!-- ==== CONTACT BAR (–Ω–∞–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º) ==== -->
        <div class="btn-group" role="group" aria-label="–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞">
          <button type="button" class="btn btn-light" title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
                  onclick="mpOpenContact('tel')">üìû</button>
          <button type="button" class="btn btn-light" title="WhatsApp"
                  onclick="mpOpenContact('wa')">üü¢</button>
          <button type="button" class="btn btn-light" title="Telegram"
                  onclick="mpOpenContact('tg')">‚úàÔ∏è</button>
          <button type="button" class="btn btn-light" title="E-mail"
                  onclick="mpOpenContact('mail')">‚úâÔ∏è</button>
          <button type="button" class="btn btn-light" title="Max"
                  onclick="mpOpenContact('max')">‚ìÇÔ∏è</button>
         </div>
<!-- ======================================= -->

          <button
            type="button"
            id="qm_patient_add"
            class="btn"
            style="white-space: nowrap"
          >
            + –ù–æ–≤—ã–π
          </button>
        </div>

        <!-- –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
        <div
          id="qm_patient_new"
          style="display: none; margin-top: 8px; width: 100%"
        >
          <div class="qm-patient-grid">
            <input
              id="qm_new_full_name"
              type="text"
              placeholder="–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é"
              autocomplete="name"
            />
            <input
              id="qm_new_phone"
              type="tel"
              inputmode="tel"
              pattern="[\+\d\s\-\(\)]{6,}"
              title="+7 999 123-45-67"
              placeholder="+7 999 123-45-67"
            />
            <input id="qm_new_birth" type="date" placeholder="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" />
            <div class="qm-patient-actions">
              <button
                type="button"
                id="qm_patient_save"
                class="btn btn-primary"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button type="button" id="qm_patient_cancel" class="btn">
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
        <!-- –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ -->
        <div
          id="qm_contact_bar"
          style="
            display: flex;
            gap: 10px;
            align-items: center;
            margin: 6px 0 2px 0;
          "
        >
          <a
            id="cb_tel"
            class="btn"
            target="_blank"
            rel="noopener"
            title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
            style="padding: 4px 8px"
            >üìû Tel</a
          >
          <a
            id="cb_wa"
            class="btn"
            target="_blank"
            rel="noopener"
            title="WhatsApp"
            style="padding: 4px 8px"
            >üü¢ WA</a
          >
          <a
            id="cb_tg"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Telegram"
            style="padding: 4px 8px"
            >üîµ TG</a
          >
          <a
            id="cb_max"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Max"
            style="padding: 4px 8px"
            >üü£ Max</a
          >
          <a
            id="cb_email"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Email"
            style="padding: 4px 8px"
            >‚úâÔ∏è Mail</a
          >
          <small id="cb_hint" style="opacity: 0.7; margin-left: 6px"></small>
        </div>
      </label>
      <label
        >–£—Å–ª—É–≥–∞
        <select
          id="qm_service"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
        <small id="qm_service_hint" style="opacity: 0.7"></small>
      </label>

      <label
        >–ö–∞–±–∏–Ω–µ—Ç
        <select
          id="qm_room"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ù–∞—á–∞–ª–æ
        <input
          type="datetime-local"
          id="qm_start"
          required
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–û–∫–æ–Ω—á–∞–Ω–∏–µ
        <input
          type="datetime-local"
          id="qm_end"
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–°—Ç–∞—Ç—É—Å
        <select
          id="qm_status"
          class="filter-select"
          required
          style="width: 100%"
        >
          <option value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</option>
          <option value="arrived">–ü—Ä–∏–±—ã–ª</option>
          <option value="done">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
          <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
        </select>
      </label>

      <label style="grid-column: 1 / -1"
        >–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        <textarea id="qm_comment" rows="3" style="width: 100%"></textarea>
      </label>

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          gap: 8px;
          align-items: center;
          margin-top: -4px;
        "
      >
        <button
          type="button"
          class="btn"
          id="btn_plus_15"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +15 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_30"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +30 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_60"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +60 –º–∏–Ω
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_move_tomorrow"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ù–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ –∂–µ –≤—Ä–µ–º—è)
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_first_free"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–∫–∞–±–∏–Ω–µ—Ç)
        </button>
      </div>
      <small
        id="qm_warn"
        style="grid-column: 1/-1; color: #b45309; display: none"
        >–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</small
      >

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          justify-content: flex-end;
          gap: 8px;
        "
      >
        <button
          type="button"
          id="qmDelete"
          class="btn"
          style="background: #fee2e2; border: 1px solid #fecaca"
        >
          –£–¥–∞–ª–∏—Ç—å
        </button>
        <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>
    </form>
  </div>
</div>

<!-- Toasts -->
<div
  id="toastStack"
  style="
    position: fixed;
    right: 16px;
    top: 16px;
    z-index: 10000;
    display: flex;
    flex-direction: column;
    gap: 8px;
  "
></div>

{% endblock %} {% block scripts %}
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
/>
<link
  href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css"
  rel="stylesheet"
/>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/locales-all.global.min.js"></script>

<style>
  /* —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ ¬´–≤—ã–ª–∞–∑–æ–≤¬ª */
  #quickModal .qm-patient-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
    align-items: center;
  }
  #quickModal .qm-patient-grid input {
    width: 100%;
    height: 36px;
    padding: 8px 10px;
    border: 1px solid #dbeafd;
    border-radius: 8px;
    box-sizing: border-box;
  }
  #quickModal .qm-patient-grid input:focus {
    outline: none;
    border-color: #a5c5ff;
    box-shadow: 0 0 0 3px rgba(73, 133, 255, 0.12);
  }
  #quickModal .qm-patient-actions {
    display: flex;
    gap: 8px;
    justify-content: flex-start;
  }
  @media (min-width: 740px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 1fr;
    }
    #quickModal .qm-patient-grid > :first-child {
      grid-column: 1 / -1;
    } /* –§–ò–û */
    #quickModal .qm-patient-actions {
      grid-column: 1 / -1;
    }
  }
  @media (min-width: 900px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 180px;
    }
  }
</style>

<script>
  // --- –ø—Ä–æ—Å—Ç–æ–π toast ---
  function showToast(msg, type = "info", ms = 2200) {
    const stack = document.getElementById("toastStack");
    if (!stack) {
      alert(msg);
      return;
    }
    const el = document.createElement("div");
    el.textContent = msg;
    el.style.cssText = `
      background:${
        type === "error" ? "#fee2e2" : type === "ok" ? "#e6ffed" : "#eef2ff"
      };
      color:${
        type === "error" ? "#991b1b" : type === "ok" ? "#065f46" : "#1e40af"
      };
      border:1px solid ${
        type === "error" ? "#fecaca" : type === "ok" ? "#bbf7d0" : "#c7d2fe"
      };
      box-shadow:0 6px 18px rgba(0,0,0,.08);padding:10px 14px;border-radius:10px;font-weight:600;max-width:420px`;
    stack.appendChild(el);
    setTimeout(() => {
      el.style.transition = "opacity .25s";
      el.style.opacity = "0";
      setTimeout(() => el.remove(), 260);
    }, ms);
  }
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // ---------- helpers ----------
    const $ = (s) => document.querySelector(s);
    const addMin = (d, m) => new Date(d.getTime() + m * 60000);
    const pad2 = (n) => String(n).padStart(2, "0");
    const fmtISO = (d) =>
      `${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}T${pad2(
        d.getHours()
      )}:${pad2(d.getMinutes())}`;

    // –∫—ç—à —Å–ª–æ–≤–∞—Ä–µ–π
    window.__DICT_CACHE__ = window.__DICT_CACHE__ || null;

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ options
    function fillOptions(selectEl, items, selectedId = "") {
      if (!selectEl) return;
      const toId = (x) => x._id ?? x.id ?? "";
      const toName = (x) => x.full_name ?? x.name ?? "";
      const html = (items || [])
        .map((x) => {
          const id = toId(x),
            name = toName(x);
          return `<option value="${id}">${name}</option>`;
        })
        .join("");
      selectEl.innerHTML = html;
      if (selectedId) selectEl.value = selectedId;
      if (!selectEl.value || selectEl.value === "undefined") {
        const first = selectEl.querySelector("option")?.value || "";
        selectEl.value = first;
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
    async function loadDictsOnce() {
      if (window.__DICT_CACHE__) return window.__DICT_CACHE__;
      const r = await fetch("/api/dicts");
      const raw = await r.json();
      if (!raw?.ok) throw new Error("dicts load failed");

      const norm = (arr) =>
        (arr || []).map((x) => ({
          id: x._id ?? x.id ?? "",
          name: x.full_name ?? x.name ?? "",
          duration_min: x.duration_min,
        }));
      const data = {
        ok: true,
        doctors: norm(raw.doctors),
        patients: norm(raw.patients),
        rooms: norm(raw.rooms),
        services: norm(raw.services).map((s) => ({
          ...s,
          duration_min: s.duration_min ?? 30,
        })),
      };
      window.__DICT_CACHE__ = data;
      return data;
    }

    // ---------- —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏ ----------
    const qm = {
      modal: $("#quickModal"),
      close: $("#qmClose"),
      form: $("#qmForm"),
      id: $("#qm_id"),
      doctor: $("#qm_doctor"),
      patient: $("#qm_patient"),
      service: $("#qm_service"),
      serviceHint: $("#qm_service_hint"),
      room: $("#qm_room"),
      start: $("#qm_start"),
      end: $("#qm_end"),
      status: $("#qm_status"),
      comment: $("#qm_comment"),
      warn: $("#qm_warn"),
      btnDel: $("#qmDelete"),
      btnPlus15: document.querySelector("#quickModal #btn_plus_15"),
      btnPlus30: document.querySelector("#quickModal #btn_plus_30"),
      btnPlus60: document.querySelector("#quickModal #btn_plus_60"),
      btnTomorrow: document.querySelector("#quickModal #btn_move_tomorrow"),
      btnFirstFree: document.querySelector("#quickModal #btn_first_free"),

      // –±–ª–æ–∫ ¬´–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç¬ª
      patientAddBtn: document.getElementById("qm_patient_add"),
      patientNewRow: document.getElementById("qm_patient_new"),
      newFullName: document.getElementById("qm_new_full_name"),
      newPhone: document.getElementById("qm_new_phone"),
      newBirth: document.getElementById("qm_new_birth"),
      patientSaveBtn: document.getElementById("qm_patient_save"),
      patientCancelBtn: document.getElementById("qm_patient_cancel"),
    };

<script>
// --- contacts bar (Tel/WA/TG/Max/Mail) ---------------------------------
function setDisabledAnchor(a, disabled) {
  if (!a) return;
  if (disabled) {
    a.setAttribute("aria-disabled", "true");
    a.style.opacity = ".5";
    a.style.pointerEvents = "none";
    a.removeAttribute("href");
  } else {
    a.removeAttribute("aria-disabled");
    a.style.opacity = "1";
    a.style.pointerEvents = "auto";
  }
}
function onlyDigits(s){ return String(s||"").replace(/\D+/g,""); }

async function fillContactBar(patientId) {
  const tel = document.getElementById("cb_tel");
  const wa  = document.getElementById("cb_wa");
  const tg  = document.getElementById("cb_tg");
  const mx  = document.getElementById("cb_max");
  const em  = document.getElementById("cb_email");
  const hint= document.getElementById("cb_hint");

  [tel,wa,tg,mx,em].forEach(a => setDisabledAnchor(a, true));
  if (hint) hint.textContent = "";
  if (!patientId) return;

  try {
    const r = await fetch(`/api/patients/${encodeURIComponent(patientId)}/contacts`);
    const data = await r.json();
    if (!r.ok || !data.ok) return;

    const c = data.contacts || {};
    const phonePlus = (c.phone || "").trim();
    const phone     = onlyDigits(phonePlus);
    const waNum     = onlyDigits(c.whatsapp || c.phone || "");
    const mail      = (c.email || "").trim();
    const tgHandle  = (c.telegram || "").replace(/^@/, "").trim();

    if (phonePlus) { tel.href = `tel:${phonePlus}`; setDisabledAnchor(tel,false); }
    if (waNum)     { wa.href  = `https://wa.me/${waNum}`; setDisabledAnchor(wa,false); }
    if (tgHandle)  { tg.href  = `https://t.me/${tgHandle}`; setDisabledAnchor(tg,false); }
    else if (phone){ tg.href  = `https://t.me/+${phone}`; setDisabledAnchor(tg,false); }

    // Max: –∞–Ω–∞–ª–æ–≥ WhatsApp ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç; –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ deep-link –ø–æ–¥–º–µ–Ω–∏–º —Ç—É—Ç
    mx.href = `https://web.max.ru/`;
    setDisabledAnchor(mx,false);

    if (mail) { em.href = `mailto:${encodeURIComponent(mail)}`; setDisabledAnchor(em,false); }

    if (hint) {
      const parts = [];
      if (phonePlus) parts.push(phonePlus);
      if (mail) parts.push(mail);
      hint.textContent = parts.join(" ‚Ä¢ ");
    }
  } catch {}
}
// –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å
qm.patient?.addEventListener("change", () => fillContactBar(qm.patient.value));
</script>

    // --- —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –º–æ–¥–∞–ª–∫–∏ ---
    qm.patientAddBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "block";
      qm.newFullName?.focus();
    });
    qm.patientCancelBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "none";
      if (qm.newFullName) qm.newFullName.value = "";
      if (qm.newPhone) qm.newPhone.value = "";
      if (qm.newBirth) qm.newBirth.value = "";
    });
    qm.patientSaveBtn?.addEventListener("click", async () => {
      const full_name = (qm.newFullName?.value || "").trim();
      const phone = (qm.newPhone?.value || "").trim();
      const birth_date = (qm.newBirth?.value || "").trim();
      if (!full_name) {
        showToast("–£–∫–∞–∂–∏ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞", "error");
        return;
      }
      try {
        const r = await fetch("/api/patients", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ full_name, phone, birth_date }),
        });
        const data = await r.json().catch(() => ({}));
        if (!r.ok || !data.ok) {
          showToast(
            data?.error || `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è (HTTP ${r.status})`,
            "error"
          );
          return;
        }
        const opt = document.createElement("option");
        opt.value = data.id;
        opt.textContent = data.full_name || full_name;
        qm.patient?.appendChild(opt);
        qm.patient.value = data.id;
        qm.newFullName.value = "";
        qm.newPhone.value = "";
        qm.newBirth.value = "";
        qm.patientNewRow.style.display = "none";
        if (window.__DICT_CACHE__) {
          window.__DICT_CACHE__.patients.unshift({
            id: data.id,
            name: data.full_name || full_name,
          });
        }
        showToast("–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", "ok");
      } catch {
        showToast("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "error");
      }
    });

    function isValidSelectValue(v) {
      return v && v !== "undefined" && v !== "null";
    }
    function updateFirstFreeBtnState() {
      const enable =
        isValidSelectValue(qm.room?.value) &&
        isValidSelectValue(qm.service?.value) &&
        !!qm.start?.value;
      if (qm.btnFirstFree) {
        qm.btnFirstFree.disabled = !enable;
        qm.btnFirstFree.style.opacity = enable ? "1" : "0.6";
        qm.btnFirstFree.style.pointerEvents = enable ? "auto" : "none";
      }
    }
    [qm.room, qm.service, qm.start].forEach((el) =>
      el?.addEventListener("change", updateFirstFreeBtnState)
    );

    const qmTitle = document.querySelector("#quickModal h3");
    const qmDeleteBtn = document.getElementById("qmDelete");
    function setModalMode(mode) {
      if (!qmTitle) return;
      if (mode === "create") {
        qmTitle.textContent = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.setAttribute("disabled", "disabled");
        qmDeleteBtn?.classList.add("disabled");
      } else {
        qmTitle.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.removeAttribute("disabled");
        qmDeleteBtn?.classList.remove("disabled");
      }
    }
    function openModal() {
      if (qm.modal) qm.modal.style.display = "block";
    }
    function closeModal() {
      if (qm.modal) qm.modal.style.display = "none";
    }
    qm.close?.addEventListener("click", closeModal);
    window.addEventListener("keydown", (e) => {
      if (e.key === "Escape") closeModal();
    });

    // –≤—Ä–µ–º—è
    function setStartEnd(ns, ne) {
      if (qm.start) qm.start.value = fmtISO(ns);
      if (qm.end) qm.end.value = fmtISO(ne);
    }
    function shiftAppointment(minutes) {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      const ns = addMin(s, minutes),
        ne = addMin(ns, dur);
      setStartEnd(ns, ne);
    }
    qm.btnPlus15?.addEventListener("click", () => shiftAppointment(15));
    qm.btnPlus30?.addEventListener("click", () => shiftAppointment(30));
    qm.btnPlus60?.addEventListener("click", () => shiftAppointment(60));
    qm.btnTomorrow?.addEventListener("click", () => {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      s.setDate(s.getDate() + 1);
      setStartEnd(s, addMin(s, dur));
    });

    // –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
    async function moveToFirstFreeInRoom() {
      const roomId = qm.room?.value,
        sid = qm.service?.value;
      if (
        !isValidSelectValue(roomId) ||
        !isValidSelectValue(sid) ||
        !qm.start?.value
      ) {
        showToast("–í—ã–±–µ—Ä–∏ –∫–∞–±–∏–Ω–µ—Ç, —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "error");
        updateFirstFreeBtnState();
        return;
      }
      const d = await loadDictsOnce();
      const sRec = d.services.find((x) => x.id === sid);
      const dur = parseInt(sRec?.duration_min ?? 30, 10);

      let cursor = new Date(qm.start.value);
      const limit = new Date();
      limit.setDate(limit.getDate() + 7);

      while (cursor < limit) {
        const day = `${cursor.getFullYear()}-${String(
          cursor.getMonth() + 1
        ).padStart(2, "0")}-${String(cursor.getDate()).padStart(2, "0")}`;
        const resp = await fetch(
          `/api/rooms/busy?room_id=${encodeURIComponent(roomId)}&date=${day}`
        );
        if (!resp.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }
        const data = await resp.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }

        const busy = (data.items || [])
          .map((i) => {
            const [sh, sm] = i.start.split(":").map(Number),
              [eh, em] = i.end.split(":").map(Number);
            return { s: sh * 60 + sm, e: eh * 60 + em };
          })
          .sort((a, b) => a.s - b.s);

        const st = cursor.getHours() * 60 + cursor.getMinutes(),
          en = st + dur;
        const overlap = busy.some((b) => !(en <= b.s || st >= b.e));
        if (!overlap) {
          setStartEnd(cursor, addMin(cursor, dur));
          return;
        }
        cursor = addMin(cursor, 5);
      }
      showToast("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π", "error");
    }
    qm.btnFirstFree?.addEventListener("click", moveToFirstFreeInRoom);

    // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–ø–æ–¥—Å–∫–∞–∑–∫–∞
    async function recalcEndByService() {
      if (!qm.service?.value || !qm.start?.value) return;
      const d = await loadDictsOnce();
      const srv = d.services.find((s) => s.id === qm.service.value);
      const dur = parseInt(srv?.duration_min ?? 30, 10);
      const s = new Date(qm.start.value),
        e = addMin(s, isFinite(dur) ? dur : 30);
      if (qm.end) qm.end.value = fmtISO(e);
      if (qm.serviceHint)
        qm.serviceHint.textContent = `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ${
          isFinite(dur) ? dur : 30
        } –º–∏–Ω.`;
    }

    // –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞
    async function checkDoctorWorking() {
      const start = qm.start?.value;
      if (!qm.doctor?.value || !start) {
        qm.warn && (qm.warn.style.display = "none");
        return;
      }
      try {
        const r = await fetch("/api/doctor_schedule", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ doctor_id: qm.doctor.value }),
        });
        if (!r.ok) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const data = await r.json();
        const sched = data?.schedule || {};
        const s = new Date(start);
        const e = qm.end?.value ? new Date(qm.end.value) : new Date(start);
        const dow = (s.getDay() + 6) % 7;
        const day = sched[String(dow)];
        if (!day || !day.start || !day.end) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const hm2m = (hm) => {
          const [h, m] = hm.split(":").map(Number);
          return h * 60 + m;
        };
        const st = s.getHours() * 60 + s.getMinutes(),
          en = e.getHours() * 60 + e.getMinutes();
        const outside = st < hm2m(day.start) || en > hm2m(day.end);
        if (outside) {
          qm.warn.textContent = `–í—Ä–µ–º—è –≤–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞ (${day.start}‚Äì${day.end}). –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ.`;
          qm.warn.style.display = "block";
        } else {
          qm.warn.style.display = "none";
        }
      } catch {
        qm.warn && (qm.warn.style.display = "none");
      }
    }

    // ---------- FullCalendar ----------
    const calEl = document.getElementById("calendar");
    const calendar = new FullCalendar.Calendar(calEl, {
      initialView: "timeGridWeek",
      locale: "ru",
      buttonText: {
        today: "—Å–µ–≥–æ–¥–Ω—è",
        month: "–º–µ—Å—è—Ü",
        week: "–Ω–µ–¥–µ–ª—è",
        day: "–¥–µ–Ω—å",
      },
      allDayText: "–í–µ—Å—å –¥–µ–Ω—å",
      timeZone: "local",
      firstDay: 1,
      height: "auto",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,timeGridWeek,timeGridDay",
      },
      slotDuration: "00:15:00",
      snapDuration: "00:15:00",
      slotMinTime: "09:00:00",
      slotMaxTime: "21:00:00",
      businessHours: {
        daysOfWeek: [1, 2, 3, 4, 5, 6],
        startTime: "09:00",
        endTime: "21:00",
      },

      editable: true,
      eventDurationEditable: true,
      eventStartEditable: true,
      eventOverlap: true,

      events: (fetchInfo, success, failure) => {
        const params = new URLSearchParams({
          start: fetchInfo.startStr,
          end: fetchInfo.endStr,
        });
        const doctorSel = $("#doctorFilter"),
          serviceSel = $("#serviceFilter"),
          cabinetSel = $("#cabinetFilter");
        if (doctorSel?.value) params.set("doctor_id", doctorSel.value);
        if (serviceSel?.value) params.set("service_id", serviceSel.value);
        if (cabinetSel?.value) params.set("room_name", cabinetSel.value); // —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –∫–∞–±–∏–Ω–µ—Ç–∞
        fetch("/api/events?" + params.toString())
          .then((r) => r.json())
          .then((data) => success(data))
          .catch((err) => {
            console.error("events load error", err);
            failure(err);
          });
      },

      eventDidMount(info) {
        const p = info.event.extendedProps || {};
        info.el.title = [p.service, p.patient, p.status]
          .filter(Boolean)
          .join(" ‚Ä¢ ");
      },

      eventDrop: saveMoveOrResize,
      eventResize: saveMoveOrResize,

      eventClick: async (info) => {
        setModalMode("edit");
        await openQuickModal(info.event.id);
      },

      dateClick: async (arg) => {
        try {
          const d = await loadDictsOnce();
          const doctorSel = document.getElementById("doctorFilter");
          fillOptions(qm.doctor, d.doctors, doctorSel?.value || "");
          fillOptions(qm.patient, d.patients);
          fillOptions(qm.service, d.services);
          fillOptions(qm.room, d.rooms);
          await fillContactBar(qm.patient?.value || "");


          const roundTo = 15;
          const s = new Date(arg.date);
          s.setMinutes(Math.round(s.getMinutes() / roundTo) * roundTo, 0, 0);
          const e = addMin(s, 30);

          if (qm.id) qm.id.value = "";
          if (qm.start) qm.start.value = fmtISO(s);
          if (qm.end) qm.end.value = fmtISO(e);

          updateFirstFreeBtnState();
          await recalcEndByService().catch(() => {});
          await checkDoctorWorking().catch(() => {});

          setModalMode("create");
          openModal();
        } catch (e) {
          console.error(e);
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è", "error");
        }
      },
    });
    calendar.render();

    async function saveMoveOrResize(info) {
      const payload = {
        id: info.event.id,
        start: info.event.startStr,
        end: info.event.endStr || info.event.startStr,
      };
      try {
        const r = await fetch("/api/appointments/update_time", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        const data = await r.json();
        if (!data.ok) {
          alert(
            data.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
          );
          info.revert();
          return;
        }
        calendar.refetchEvents();
      } catch {
        alert("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        info.revert();
      }
    }

    // –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    async function openQuickModal(id) {
      try {
        const d = await loadDictsOnce();
        fillOptions(qm.doctor, d.doctors);
        fillOptions(qm.patient, d.patients);
        fillOptions(qm.service, d.services);
        fillOptions(qm.room, d.rooms);

        const r = await fetch(`/api/appointments/${id}`);
        const data = await r.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å", "error");
          return;
        }
        const it = data.item;

        if (qm.id) qm.id.value = it.id || "";
        if (qm.doctor) qm.doctor.value = it.doctor_id || "";
        if (qm.patient) qm.patient.value = it.patient_id || "";
        await fillContactBar(qm.patient?.value || "");
        if (qm.service) qm.service.value = it.service_id || "";
        if (qm.room) qm.room.value = it.room_id || "";
        if (qm.start) qm.start.value = (it.start || "").slice(0, 16);
        if (qm.end) qm.end.value = (it.end || "").slice(0, 16);
        if (qm.status) qm.status.value = it.status_key || "scheduled";
        if (qm.comment) qm.comment.value = it.comment || "";

        qm.service?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.start?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.end?.addEventListener("change", checkDoctorWorking, { once: true });
        qm.doctor?.addEventListener("change", checkDoctorWorking, {
          once: true,
        });

        await recalcEndByService();
        await checkDoctorWorking();
        setModalMode("edit");
        openModal();
      } catch (e) {
        console.error(e);
        showToast("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏", "error");
      }
    }

    // submit / delete
    qm.form?.addEventListener("submit", async (ev) => {
      ev.preventDefault();
      const base = {
        doctor_id: qm.doctor?.value || "",
        patient_id: qm.patient?.value || "",
        service_id: qm.service?.value || "",
        room_id: qm.room?.value || "",
        start: qm.start?.value || "",
        end: qm.end?.value || "",
        status_key: qm.status?.value || "scheduled",
        comment: qm.comment?.value || "",
      };

      // CREATE
      if (!qm.id?.value) {
        if (
          !base.doctor_id ||
          !base.patient_id ||
          !base.service_id ||
          !base.room_id
        ) {
          showToast("–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è: –≤—Ä–∞—á, –ø–∞—Ü–∏–µ–Ω—Ç, —É—Å–ª—É–≥–∞, –∫–∞–±–∏–Ω–µ—Ç", "error");
          return;
        }
        const payload = {
          start: base.start,
          end: base.end,
          room_id: base.room_id,
          doctor_id: base.doctor_id,
          patient_id: base.patient_id,
          service_id: base.service_id,
          note: base.comment || "",
        };
        let ok = false,
          lastErr = "";
        const endpoints = [
          "/api/appointments",
          "/api/appointments/create",
          "/schedule/api/create",
        ];
        for (const url of endpoints) {
          try {
            const r = await fetch(url, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });
            const data = await r.json().catch(() => ({}));
            if (
              r.status === 409 ||
              data?.error === "conflict" ||
              data?.error === "room_conflict"
            ) {
              showToast("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç/–≤—Ä–∞—á –∑–∞–Ω—è—Ç", "error");
              return;
            }
            if (r.ok && (data?.ok ?? true)) {
              ok = true;
              break;
            }
            lastErr = data?.error || `HTTP ${r.status}`;
          } catch {
            lastErr = "network";
          }
        }
        if (!ok) {
          showToast(
            `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è${lastErr ? ` (${lastErr})` : ""}`,
            "error"
          );
          return;
        }
        showToast("–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞", "ok");
      }
      // UPDATE
      else {
        const r = await fetch(`/api/appointments/${qm.id.value}/update`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(base),
        });
        const data = await r.json();
        if (!r.ok || !data.ok) {
          const err =
            data?.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";
          showToast(err, "error");
          return;
        }
        showToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "ok");
      }

      closeModal();
      calendar.refetchEvents();
    });

    // —É–¥–∞–ª–µ–Ω–∏–µ
    qm.btnDel?.addEventListener("click", async () => {
      const id = qm.id?.value;
      if (!id) {
        showToast("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "error");
        return;
      }
      if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) return;
      const candidates = [
        { url: "/schedule/api/delete", body: { id } },
        { url: "/api/appointments/delete", body: { id } },
        {
          url: `/api/appointments/${encodeURIComponent(id)}`,
          method: "DELETE",
          body: {},
        },
      ];
      let ok = false;
      for (const c of candidates) {
        try {
          const r = await fetch(c.url, {
            method: c.method || "POST",
            headers: { "Content-Type": "application/json" },
            body: Object.keys(c.body || {}).length
              ? JSON.stringify(c.body)
              : undefined,
          });
          const data = await r.json().catch(() => ({}));
          if (r.ok && (data.ok ?? true)) {
            ok = true;
            break;
          }
        } catch {}
      }
      if (!ok) {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", "error");
        return;
      }
      closeModal();
      calendar.refetchEvents();
      showToast("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", "ok");
    });
  }); // DOMContentLoaded
</script>

<!-- MP-CONTACTS: JS -->
<script>
async function mpOpenContact(type, patientId) {
  try {
    if (!patientId) {
      const sel = document.getElementById('patient'); // <select id="patient"> –≤ –º–æ–¥–∞–ª–∫–µ
      if (sel) patientId = sel.value;
    }
    if (!patientId) { alert('–ù–µ –≤—ã–±—Ä–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç'); return; }

    const res = await fetch(`/api/patients/${patientId}/contacts`, { cache: 'no-store' });
    if (!res.ok) { alert('–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'); return; }

    const j = await res.json();
    if (!j.ok) { alert('–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'); return; }

    const L = j.links || {};
    const url = L[type];
    if (!url) { alert('–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è: ' + type); return; }

    window.open(url, '_blank', 'noopener');
  } catch (e) {
    console.error(e);
    alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞');
  }
}
</script>
<!-- /MP-CONTACTS: JS -->


{% endblock %}

=== D:\Projects\medplatforma\templates\calendar.html ===
{% extends "base.html" %} {% block content %}

<!-- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è -->
<div
  style="
    display: flex;
    align-items: center;
    gap: 22px;
    padding: 6px 0 6px 12px;
    background: #fff;
    border-radius: 14px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    margin-bottom: 10px;
  "
>
  <span title="–í—Å–µ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤">
    <i class="fa-solid fa-house-chimney-medical" style="color: #467fe3"></i>
    <b>{{ metrics.total_rooms }}</b>
  </span>
  <span title="–°–≤–æ–±–æ–¥–Ω—ã–µ">
    <i class="fa-solid fa-circle-check" style="color: #21ba45"></i>
    <b>{{ metrics.free_rooms }}</b>
  </span>
  <span style="margin-left: auto; display: flex; gap: 12px">
    <a
      href="{{ url_for('add_event') }}"
      class="btn-main"
      style="
        background: #1976d2;
        color: #fff;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 22px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    </a>
    <a
      href="{{ url_for('export_calendar') }}"
      class="btn-main btn-export"
      style="
        background: #fff;
        color: #3185cb;
        border: 1.5px solid #dbeafd;
        font-weight: 600;
        border-radius: 8px;
        padding: 8px 18px;
        font-size: 1.07em;
        display: flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
      "
    >
      <i class="fa-solid fa-file-arrow-down"></i> –í—ã–≥—Ä—É–∑–∫–∞
    </a>
  </span>
</div>

<!-- –ö–∞–±–∏–Ω–µ—Ç—ã –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å -->
<div
  id="roomsBar"
  style="display: flex; gap: 36px; margin: 14px 0 12px 8px; flex-wrap: wrap"
>
  {% for cab in cabinets %} {% set info = room_info.get(cab) if room_info else
  None %}
  <span
    data-room-name="{{ cab }}"
    style="font-size: 1.12em; font-weight: 600; cursor: default"
  >
    {{ cab }} ‚Äî
    <b
      class="room-status-text"
      style="color:{{ info.color if info else 'inherit' }}"
    >
      {{ info.text if info else '‚Äî' }}
    </b>
    <span
      class="room-next"
      style="opacity: 0.7; font-weight: 500; margin-left: 8px"
    >
      {% if info and info.state == 'available' and info.next %} {% set t =
      info.next.start.split('T')[1] if info.next.start else '' %} –ë–ª–∏–∂–∞–π—à–∏–π: {{
      t }} {% if info.next.in_minutes is not none %} (—á–µ—Ä–µ–∑ {% if
      info.next.in_minutes < 0 %}0 –º–∏–Ω {% elif info.next.in_minutes < 60 %}{{
      info.next.in_minutes }} –º–∏–Ω {% else %}{{ (info.next.in_minutes // 60)|int
      }} —á {{ (info.next.in_minutes % 60)|int }} –º–∏–Ω {% endif %} ) {% endif %}
      {% if info.next.service or info.next.patient %} ‚Ä¢ {{ info.next.service
      }}{% if info.next.service and info.next.patient %} ‚Äî {% endif %}{{
      info.next.patient }} {% endif %} {% endif %}
    </span>
  </span>
  {% endfor %}
</div>

<!-- –õ–µ–≥–µ–Ω–¥–∞/—Ñ–∏–ª—å—Ç—Ä—ã -->
<div
  style="
    display: flex;
    gap: 30px;
    align-items: center;
    font-size: 1.01em;
    margin-bottom: 12px;
    margin-left: 8px;
  "
>
  <span
    ><span
      style="
        background: #a2c6fa;
        border: 1.5px solid #dde7f7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–µ—Ä–≤–∏—á–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #fbc7c0;
        border: 1.5px solid #fde7e7;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û—Ç–∫–∞–∑</span
  >
  <span
    ><span
      style="
        background: #fde8a5;
        border: 1.5px solid #f7e9c5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–ü–æ–≤—Ç–æ—Ä–Ω—ã–π</span
  >
  <span
    ><span
      style="
        background: #b4f0c0;
        border: 1.5px solid #cefad5;
        width: 18px;
        height: 18px;
        display: inline-block;
        border-radius: 4px;
        margin-right: 6px;
      "
    ></span
    >–û–ø–ª–∞—á–µ–Ω</span
  >
</div>

<div
  class="calendar-filters"
  style="display: flex; gap: 12px; align-items: center; margin-bottom: 18px"
>
  <select id="doctorFilter" class="filter-select">
    <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
    {% for doc in doctors %}
    <option value="{{ doc._id }}">{{ doc.full_name }}</option>
    {% endfor %}
  </select>

  <!-- –ü–û–ò–°–ö –ü–ê–¶–ò–ï–ù–¢–ê (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) -->
  <div class="ps-wrap" style="position: relative; max-width: 320px">
    <input
      id="psInput"
      class="form-control"
      type="text"
      autocomplete="off"
      placeholder="–ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞."
    />
    <div
      id="psDrop"
      class="ps-drop"
      style="
        display: none;
        position: absolute;
        left: 0;
        right: 0;
        top: 100%;
        z-index: 4000;
        background: #fff;
        border: 1px solid #e5e7eb;
        border-top: 0;
        max-height: 280px;
        overflow: auto;
        border-radius: 0 0 8px 8px;
      "
    ></div>
  </div>

  <input type="hidden" id="psSelectedId" value="" />

  <select id="serviceFilter" class="filter-select">
    <option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>
  </select>

  <select id="cabinetFilter" class="filter-select">
    <option value="">–í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã</option>
    {% for cab in cabinets %}
    <option value="{{ cab }}">{{ cab }}</option>
    {% endfor %}
  </select>

  <button id="btnResetFilters" class="btn btn-outline-secondary">
    –°–±—Ä–æ—Å–∏—Ç—å
  </button>
</div>

<!-- –ö–∞–ª–µ–Ω–¥–∞—Ä—å -->
<div
  id="calendar"
  style="
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    padding: 8px;
    min-height: 72vh;
  "
></div>

<!-- –ú–æ–¥–∞–ª–∫–∞ -->
<div
  id="quickModal"
  style="
    display: none;
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.35);
    z-index: 9999;
  "
>
  <div
    style="
      background: #fff;
      max-width: 680px;
      margin: 7vh auto;
      padding: 18px;
      border-radius: 12px;
      box-shadow: 0 8px 28px rgba(0, 0, 0, 0.08);
    "
  >
    <div
      style="display: flex; align-items: center; gap: 8px; margin-bottom: 12px"
    >
      <h3 style="margin: 0; flex: 1">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h3>
      <button
        id="qmClose"
        type="button"
        style="
          border: none;
          background: #eee;
          border-radius: 8px;
          padding: 6px 10px;
          cursor: pointer;
        "
      >
        √ó
      </button>
    </div>

    <form
      id="qmForm"
      style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px"
    >
      <input type="hidden" id="qm_id" />

      <label
        >–í—Ä–∞—á
        <select
          id="qm_doctor"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ü–∞—Ü–∏–µ–Ω—Ç
        <div style="display: flex; gap: 8px; align-items: center; width: 100%">
          <select
            id="qm_patient"
            class="filter-select"
            required
            style="width: 100%"
          ></select>
          <!-- ==== CONTACT BAR (–Ω–∞–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º) ==== -->
          <div class="btn-group" role="group" aria-label="–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞">
            {% if patient is defined and patient %}
            <button
              type="button"
              class="btn btn-light"
              title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
              onclick="mpOpenContact('tel')"
            >
              üìû
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="WhatsApp"
              onclick="mpOpenContact('wa')"
            >
              üü¢
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="Telegram"
              onclick="mpOpenContact('tg')"
            >
              ‚úàÔ∏è
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="E-mail"
              onclick="mpOpenContact('mail')"
            >
              ‚úâÔ∏è
            </button>
            <button
              type="button"
              class="btn btn-light"
              title="Max"
              onclick="mpOpenContact('max')"
            >
              ‚ìÇÔ∏è
            </button>
            {% endif %}
          </div>
          <!-- ======================================= -->

          <button
            type="button"
            id="qm_patient_add"
            class="btn"
            style="white-space: nowrap"
          >
            + –ù–æ–≤—ã–π
          </button>
        </div>

        <!-- –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ -->
        <div
          id="qm_patient_new"
          style="display: none; margin-top: 8px; width: 100%"
        >
          <div class="qm-patient-grid">
            <input
              id="qm_new_full_name"
              type="text"
              placeholder="–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é"
              autocomplete="name"
            />
            <input
              id="qm_new_phone"
              type="tel"
              inputmode="tel"
              pattern="[\+\d\s\-\(\)]{6,}"
              title="+7 999 123-45-67"
              placeholder="+7 999 123-45-67"
            />
            <input id="qm_new_birth" type="date" placeholder="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" />
            <div class="qm-patient-actions">
              <button
                type="button"
                id="qm_patient_save"
                class="btn btn-primary"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
              <button type="button" id="qm_patient_cancel" class="btn">
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
        <!-- –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ -->
        <div
          id="qm_contact_bar"
          style="
            display: flex;
            gap: 10px;
            align-items: center;
            margin: 6px 0 2px 0;
          "
        >
          <a
            id="cb_tel"
            class="btn"
            target="_blank"
            rel="noopener"
            title="–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
            style="padding: 4px 8px"
            >üìû Tel</a
          >
          <a
            id="cb_wa"
            class="btn"
            target="_blank"
            rel="noopener"
            title="WhatsApp"
            style="padding: 4px 8px"
            >üü¢ WA</a
          >
          <a
            id="cb_tg"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Telegram"
            style="padding: 4px 8px"
            >üîµ TG</a
          >
          <a
            id="cb_max"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Max"
            style="padding: 4px 8px"
            >üü£ Max</a
          >
          <a
            id="cb_email"
            class="btn"
            target="_blank"
            rel="noopener"
            title="Email"
            style="padding: 4px 8px"
            >‚úâÔ∏è Mail</a
          >
          <small id="cb_hint" style="opacity: 0.7; margin-left: 6px"></small>
        </div>
      </label>
      <label
        >–£—Å–ª—É–≥–∞
        <select
          id="qm_service"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
        <small id="qm_service_hint" style="opacity: 0.7"></small>
      </label>

      <label
        >–ö–∞–±–∏–Ω–µ—Ç
        <select
          id="qm_room"
          class="filter-select"
          required
          style="width: 100%"
        ></select>
      </label>

      <label
        >–ù–∞—á–∞–ª–æ
        <input
          type="datetime-local"
          id="qm_start"
          required
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–û–∫–æ–Ω—á–∞–Ω–∏–µ
        <input
          type="datetime-local"
          id="qm_end"
          step="300"
          style="width: 100%"
        />
      </label>

      <label
        >–°—Ç–∞—Ç—É—Å
        <select
          id="qm_status"
          class="filter-select"
          required
          style="width: 100%"
        >
          <option value="scheduled">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω</option>
          <option value="arrived">–ü—Ä–∏–±—ã–ª</option>
          <option value="done">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
          <option value="cancelled">–û—Ç–º–µ–Ω—ë–Ω</option>
        </select>
      </label>

      <label style="grid-column: 1 / -1"
        >–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        <textarea id="qm_comment" rows="3" style="width: 100%"></textarea>
      </label>

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          gap: 8px;
          align-items: center;
          margin-top: -4px;
        "
      >
        <button
          type="button"
          class="btn"
          id="btn_plus_15"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +15 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_30"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +30 –º–∏–Ω
        </button>
        <button
          type="button"
          class="btn"
          id="btn_plus_60"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          +60 –º–∏–Ω
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_move_tomorrow"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ù–∞ –∑–∞–≤—Ç—Ä–∞ (—Ç–æ –∂–µ –≤—Ä–µ–º—è)
        </button>
        <span style="opacity: 0.6; margin: 0 6px">|</span>
        <button
          type="button"
          class="btn"
          id="btn_first_free"
          style="
            border: 1px solid #dbeafd;
            border-radius: 8px;
            padding: 6px 10px;
          "
        >
          –ü–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–∫–∞–±–∏–Ω–µ—Ç)
        </button>
      </div>
      <small
        id="qm_warn"
        style="grid-column: 1/-1; color: #b45309; display: none"
        >–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</small
      >

      <div
        style="
          grid-column: 1/-1;
          display: flex;
          justify-content: flex-end;
          gap: 8px;
        "
      >
        <button
          type="button"
          id="qmDelete"
          class="btn"
          style="background: #fee2e2; border: 1px solid #fecaca"
        >
          –£–¥–∞–ª–∏—Ç—å
        </button>
        <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>
    </form>
  </div>
</div>

<!-- Toasts -->
<div
  id="toastStack"
  style="
    position: fixed;
    right: 16px;
    top: 16px;
    z-index: 10000;
    display: flex;
    flex-direction: column;
    gap: 8px;
  "
></div>

{% endblock %} {% block scripts %}

<script>
  // –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∞–≤–¥—ã –¥–ª—è –≤—Å–µ—Ö API-—ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
  window.ROUTES = {
    dictsApi: "/api/admin/seed/dicts",
    patientsApi: "/api/patients",
    contactsApi: "/api/contacts",
    doctorSchedule: "/api/doctor_schedule",
    eventsApi: "/api/events",
    freeSlots: "/api/free_slots",
    roomsStatusNow: "/api/rooms/status_now",
    roomsBusy: "/api/rooms/busy",
    todayDetailsApi: "/api/rooms/today_details",
    appointments: "/api/appointments",
    appointmentsCreate: "/api/appointments/create",
    appointmentsUpdateTime: "/api/appointments/update_time",
    appointmentsDelete: "/api/appointments/delete",
  };
</script>

<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
/>
<link
  href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css"
  rel="stylesheet"
/>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/locales-all.global.min.js"></script>

<script>
  // –¢–æ—á–∫–∏ API –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞ ¬´—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã¬ª –∏ –ø–æ–ø–∞–ø–∞ ¬´... ‚Äî —Å–µ–≥–æ–¥–Ω—è¬ª
  const ROUTES = {
    freeSlots: "/api/free_slots",
    todayDetailsApi: "/api/rooms/today_details",
  };
</script>

<style>
  /* —Ñ–æ—Ä–º–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–µ–∑ ¬´–≤—ã–ª–∞–∑–æ–≤¬ª */
  #quickModal .qm-patient-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
    align-items: center;
  }
  #quickModal .qm-patient-grid input {
    width: 100%;
    height: 36px;
    padding: 8px 10px;
    border: 1px solid #dbeafd;
    border-radius: 8px;
    box-sizing: border-box;
  }
  #quickModal .qm-patient-grid input:focus {
    outline: none;
    border-color: #a5c5ff;
    box-shadow: 0 0 0 3px rgba(73, 133, 255, 0.12);
  }
  #quickModal .qm-patient-actions {
    display: flex;
    gap: 8px;
    justify-content: flex-start;
  }
  @media (min-width: 740px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 1fr;
    }
    #quickModal .qm-patient-grid > :first-child {
      grid-column: 1 / -1;
    } /* –§–ò–û */
    #quickModal .qm-patient-actions {
      grid-column: 1 / -1;
    }
  }
  @media (min-width: 900px) {
    #quickModal .qm-patient-grid {
      grid-template-columns: 1fr 180px;
    }
  }

  /* PATCH: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ */
  .ps-room-clickable {
    cursor: pointer;
  }
  .ps-free-hint,
  [data-free-hint] {
    pointer-events: auto;
  }
  [data-room],
  .ps-room,
  .room,
  .ps-rooms-item,
  [data-open-room] {
    cursor: pointer;
  }
</style>

<script>
  // --- –ø—Ä–æ—Å—Ç–æ–π toast ---
  function showToast(msg, type = "info", ms = 2200) {
    const stack = document.getElementById("toastStack");
    if (!stack) {
      alert(msg);
      return;
    }
    const el = document.createElement("div");
    el.textContent = msg;
    el.style.cssText = `
      background:${
        type === "error" ? "#fee2e2" : type === "ok" ? "#e6ffed" : "#eef2ff"
      };
      color:${
        type === "error" ? "#991b1b" : type === "ok" ? "#065f46" : "#1e40af"
      };
      border:1px solid ${
        type === "error" ? "#fecaca" : type === "ok" ? "#bbf7d0" : "#c7d2fe"
      };
      box-shadow:0 6px 18px rgba(0,0,0,.08);padding:10px 14px;border-radius:10px;font-weight:600;max-width:420px`;
    stack.appendChild(el);
    setTimeout(() => {
      el.style.transition = "opacity .25s";
      el.style.opacity = "0";
      setTimeout(() => el.remove(), 260);
    }, ms);
  }
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    // ---------- helpers ----------
    const $ = (s) => document.querySelector(s);
    const addMin = (d, m) => new Date(d.getTime() + m * 60000);
    const pad2 = (n) => String(n).padStart(2, "0");
    const fmtISO = (d) =>
      `${d.getFullYear()}-${pad2(d.getMonth() + 1)}-${pad2(d.getDate())}T${pad2(
        d.getHours()
      )}:${pad2(d.getMinutes())}`;

    // –∫—ç—à —Å–ª–æ–≤–∞—Ä–µ–π
    window.__DICT_CACHE__ = window.__DICT_CACHE__ || null;

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ options
    function fillOptions(selectEl, items, selectedId = "") {
      if (!selectEl) return;
      const toId = (x) => x._id ?? x.id ?? "";
      const toName = (x) => x.full_name ?? x.name ?? "";
      const html = (items || [])
        .map((x) => {
          const id = toId(x),
            name = toName(x);
          return `<option value="${id}">${name}</option>`;
        })
        .join("");
      selectEl.innerHTML = html;
      if (selectedId) selectEl.value = selectedId;
      if (!selectEl.value || selectEl.value === "undefined") {
        const first = selectEl.querySelector("option")?.value || "";
        selectEl.value = first;
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è)
    async function loadDictsOnce() {
      if (window.__DICT_CACHE__) return window.__DICT_CACHE__;
      const r = await fetch(
        (window.ROUTES && window.ROUTES.dictsApi) || "/api/dicts"
      );
      const raw = await r.json();
      if (!raw?.ok) throw new Error("dicts load failed");

      const norm = (arr) =>
        (arr || []).map((x) => ({
          id: x._id ?? x.id ?? "",
          name: x.full_name ?? x.name ?? "",
          duration_min: x.duration_min,
        }));
      const data = {
        ok: true,
        doctors: norm(raw.doctors),
        patients: norm(raw.patients),
        rooms: norm(raw.rooms),
        services: norm(raw.services).map((s) => ({
          ...s,
          duration_min: s.duration_min ?? 30,
        })),
      };
      window.__DICT_CACHE__ = data;
      return data;
    }

    // ---------- —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∫–∏ ----------
    const qm = {
      modal: $("#quickModal"),
      close: $("#qmClose"),
      form: $("#qmForm"),
      id: $("#qm_id"),
      doctor: $("#qm_doctor"),
      patient: $("#qm_patient"),
      service: $("#qm_service"),
      serviceHint: $("#qm_service_hint"),
      room: $("#qm_room"),
      start: $("#qm_start"),
      end: $("#qm_end"),
      status: $("#qm_status"),
      comment: $("#qm_comment"),
      warn: $("#qm_warn"),
      btnDel: $("#qmDelete"),
      btnPlus15: document.querySelector("#quickModal #btn_plus_15"),
      btnPlus30: document.querySelector("#quickModal #btn_plus_30"),
      btnPlus60: document.querySelector("#quickModal #btn_plus_60"),
      btnTomorrow: document.querySelector("#quickModal #btn_move_tomorrow"),
      btnFirstFree: document.querySelector("#quickModal #btn_first_free"),

      // –±–ª–æ–∫ ¬´–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç¬ª
      patientAddBtn: document.getElementById("qm_patient_add"),
      patientNewRow: document.getElementById("qm_patient_new"),
      newFullName: document.getElementById("qm_new_full_name"),
      newPhone: document.getElementById("qm_new_phone"),
      newBirth: document.getElementById("qm_new_birth"),
      patientSaveBtn: document.getElementById("qm_patient_save"),
      patientCancelBtn: document.getElementById("qm_patient_cancel"),
    };

    function hideNewPatientRow() {
      if (!qm) return;
      if (qm.patientNewRow) qm.patientNewRow.style.display = "none";
      if (qm.newFullName) qm.newFullName.value = "";
      if (qm.newPhone) qm.newPhone.value = "";
      if (qm.newBirth) qm.newBirth.value = "";
    }

    // --- contacts bar (Tel/WA/TG/Max/Mail) ---------------------------------
    function setDisabledAnchor(a, disabled) {
      if (!a) return;
      if (disabled) {
        a.setAttribute("aria-disabled", "true");
        a.style.opacity = ".5";
        a.style.pointerEvents = "none";
        a.removeAttribute("href");
      } else {
        a.removeAttribute("aria-disabled");
        a.style.opacity = "1";
        a.style.pointerEvents = "auto";
      }
    }
    function onlyDigits(s) {
      return String(s || "").replace(/\D+/g, "");
    }

    async function fillContactBar(patientId) {
      const tel = document.getElementById("cb_tel");
      const wa = document.getElementById("cb_wa");
      const tg = document.getElementById("cb_tg");
      const mx = document.getElementById("cb_max");
      const em = document.getElementById("cb_email");
      const hint = document.getElementById("cb_hint");

      [tel, wa, tg, mx, em].forEach((a) => setDisabledAnchor(a, true));
      if (hint) hint.textContent = "";
      if (!patientId) return;

      try {
        const r = await fetch(
          `/api/patients/${encodeURIComponent(patientId)}/contacts`
        );
        const data = await r.json();
        if (!r.ok || !data.ok) return;

        const c = data.contacts || {};
        const phonePlus = (c.phone || "").trim();
        const phone = onlyDigits(phonePlus);
        const waNum = onlyDigits(c.whatsapp || c.phone || "");
        const mail = (c.email || "").trim();
        const tgHandle = (c.telegram || "").replace(/^@/, "").trim();

        if (phonePlus) {
          tel.href = `tel:${phonePlus}`;
          setDisabledAnchor(tel, false);
        }
        if (waNum) {
          wa.href = `https://wa.me/${waNum}`;
          setDisabledAnchor(wa, false);
        }
        if (tgHandle) {
          tg.href = `https://t.me/${tgHandle}`;
          setDisabledAnchor(tg, false);
        } else if (phone) {
          tg.href = `https://t.me/+${phone}`;
          setDisabledAnchor(tg, false);
        }

        // Max: –∞–Ω–∞–ª–æ–≥ WhatsApp ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–ª–∏–µ–Ω—Ç; –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ deep-link –ø–æ–¥–º–µ–Ω–∏–º —Ç—É—Ç
        mx.href = `https://web.max.ru/`;
        setDisabledAnchor(mx, false);

        if (mail) {
          em.href = `mailto:${encodeURIComponent(mail)}`;
          setDisabledAnchor(em, false);
        }

        if (hint) {
          const parts = [];
          if (phonePlus) parts.push(phonePlus);
          if (mail) parts.push(mail);
          hint.textContent = parts.join(" ‚Ä¢ ");
        }
      } catch {}
    }
    // –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å
    qm.patient?.addEventListener("change", () =>
      fillContactBar(qm.patient.value)
    );
    // --- —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –º–æ–¥–∞–ª–∫–∏ ---
    qm.patientAddBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "block";
      qm.newFullName?.focus();
    });
    qm.patientCancelBtn?.addEventListener("click", () => {
      qm.patientNewRow.style.display = "none";
      if (qm.newFullName) qm.newFullName.value = "";
      if (qm.newPhone) qm.newPhone.value = "";
      if (qm.newBirth) qm.newBirth.value = "";
    });
    qm.patientSaveBtn?.addEventListener("click", async () => {
      const full_name = (qm.newFullName?.value || "").trim();
      const phone = (qm.newPhone?.value || "").trim();
      const birth_date = (qm.newBirth?.value || "").trim();
      if (!full_name) {
        showToast("–£–∫–∞–∂–∏ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞", "error");
        return;
      }
      try {
        const r = await fetch("/api/patients", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ full_name, phone, birth_date }),
        });
        const data = await r.json().catch(() => ({}));
        if (!r.ok || !data.ok) {
          showToast(
            data?.error || `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è (HTTP ${r.status})`,
            "error"
          );
          return;
        }
        const opt = document.createElement("option");
        opt.value = data.id;
        opt.textContent = data.full_name || full_name;
        qm.patient?.appendChild(opt);
        qm.patient.value = data.id;
        qm.newFullName.value = "";
        qm.newPhone.value = "";
        qm.newBirth.value = "";
        qm.patientNewRow.style.display = "none";
        if (window.__DICT_CACHE__) {
          window.__DICT_CACHE__.patients.unshift({
            id: data.id,
            name: data.full_name || full_name,
          });
        }
        showToast("–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", "ok");
      } catch {
        showToast("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "error");
      }
    });

    function isValidSelectValue(v) {
      return v && v !== "undefined" && v !== "null";
    }
    function updateFirstFreeBtnState() {
      const enable =
        isValidSelectValue(qm.room?.value) &&
        isValidSelectValue(qm.service?.value) &&
        !!qm.start?.value;
      if (qm.btnFirstFree) {
        qm.btnFirstFree.disabled = !enable;
        qm.btnFirstFree.style.opacity = enable ? "1" : "0.6";
        qm.btnFirstFree.style.pointerEvents = enable ? "auto" : "none";
      }
    }
    [qm.room, qm.service, qm.start].forEach((el) =>
      el?.addEventListener("change", updateFirstFreeBtnState)
    );

    const qmTitle = document.querySelector("#quickModal h3");
    const qmDeleteBtn = document.getElementById("qmDelete");
    function setModalMode(mode) {
      hideNewPatientRow(); // –ø—Ä–∏ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Å—Ç–∏–º –º–∏–Ω–∏-—Ñ–æ—Ä–º—É
      if (!qmTitle) return;
      if (mode === "create") {
        qmTitle.textContent = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.setAttribute("disabled", "disabled");
        qmDeleteBtn?.classList.add("disabled");
      } else {
        qmTitle.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å";
        qmDeleteBtn?.removeAttribute("disabled");
        qmDeleteBtn?.classList.remove("disabled");
      }
    }
    function openModal() {
      if (qm.modal) qm.modal.style.display = "block";
    }
    function closeModal() {
      if (qm.modal) qm.modal.style.display = "none";
    }
    qm.close?.addEventListener("click", closeModal);
    window.addEventListener("keydown", (e) => {
      if (e.key === "Escape") closeModal();
    });

    // –≤—Ä–µ–º—è
    function setStartEnd(ns, ne) {
      if (qm.start) qm.start.value = fmtISO(ns);
      if (qm.end) qm.end.value = fmtISO(ne);
    }
    function shiftAppointment(minutes) {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      const ns = addMin(s, minutes),
        ne = addMin(ns, dur);
      setStartEnd(ns, ne);
    }
    qm.btnPlus15?.addEventListener("click", () => shiftAppointment(15));
    qm.btnPlus30?.addEventListener("click", () => shiftAppointment(30));
    qm.btnPlus60?.addEventListener("click", () => shiftAppointment(60));
    qm.btnTomorrow?.addEventListener("click", () => {
      if (!qm.start?.value) return;
      const s = new Date(qm.start.value);
      const e = qm.end?.value ? new Date(qm.end.value) : s;
      const dur = Math.max(5, Math.round((e - s) / 60000));
      s.setDate(s.getDate() + 1);
      setStartEnd(s, addMin(s, dur));
    });

    // –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –∫–∞–±–∏–Ω–µ—Ç–µ
    async function moveToFirstFreeInRoom() {
      const roomId = qm.room?.value,
        sid = qm.service?.value;
      if (
        !isValidSelectValue(roomId) ||
        !isValidSelectValue(sid) ||
        !qm.start?.value
      ) {
        showToast("–í—ã–±–µ—Ä–∏ –∫–∞–±–∏–Ω–µ—Ç, —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", "error");
        updateFirstFreeBtnState();
        return;
      }
      const d = await loadDictsOnce();
      const sRec = d.services.find((x) => x.id === sid);
      const dur = parseInt(sRec?.duration_min ?? 30, 10);

      let cursor = new Date(qm.start.value);
      const limit = new Date();
      limit.setDate(limit.getDate() + 7);

      while (cursor < limit) {
        const day = `${cursor.getFullYear()}-${String(
          cursor.getMonth() + 1
        ).padStart(2, "0")}-${String(cursor.getDate()).padStart(2, "0")}`;
        const resp = await fetch(
          `/api/rooms/busy?room_id=${encodeURIComponent(roomId)}&date=${day}`
        );
        if (!resp.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }
        const data = await resp.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç—å –∫–∞–±–∏–Ω–µ—Ç–∞", "error");
          return;
        }

        const busy = (data.items || [])
          .map((i) => {
            const [sh, sm] = i.start.split(":").map(Number),
              [eh, em] = i.end.split(":").map(Number);
            return { s: sh * 60 + sm, e: eh * 60 + em };
          })
          .sort((a, b) => a.s - b.s);

        const st = cursor.getHours() * 60 + cursor.getMinutes(),
          en = st + dur;
        const overlap = busy.some((b) => !(en <= b.s || st >= b.e));
        if (!overlap) {
          setStartEnd(cursor, addMin(cursor, dur));
          return;
        }
        cursor = addMin(cursor, 5);
      }
      showToast("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π", "error");
    }
    qm.btnFirstFree?.addEventListener("click", moveToFirstFreeInRoom);

    // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å/–ø–æ–¥—Å–∫–∞–∑–∫–∞
    async function recalcEndByService() {
      if (!qm.service?.value || !qm.start?.value) return;
      const d = await loadDictsOnce();
      const srv = d.services.find((s) => s.id === qm.service.value);
      const dur = parseInt(srv?.duration_min ?? 30, 10);
      const s = new Date(qm.start.value),
        e = addMin(s, isFinite(dur) ? dur : 30);
      if (qm.end) qm.end.value = fmtISO(e);
      if (qm.serviceHint)
        qm.serviceHint.textContent = `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ${
          isFinite(dur) ? dur : 30
        } –º–∏–Ω.`;
    }

    // –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞
    async function checkDoctorWorking() {
      const start = qm.start?.value;
      if (!qm.doctor?.value || !start) {
        qm.warn && (qm.warn.style.display = "none");
        return;
      }
      try {
        const r = await fetch("/api/doctor_schedule", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ doctor_id: qm.doctor.value }),
        });
        if (!r.ok) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const data = await r.json();
        const sched = data?.schedule || {};
        const s = new Date(start);
        const e = qm.end?.value ? new Date(qm.end.value) : new Date(start);
        const dow = (s.getDay() + 6) % 7;
        const day = sched[String(dow)];
        if (!day || !day.start || !day.end) {
          qm.warn && (qm.warn.style.display = "none");
          return;
        }
        const hm2m = (hm) => {
          const [h, m] = hm.split(":").map(Number);
          return h * 60 + m;
        };
        const st = s.getHours() * 60 + s.getMinutes(),
          en = e.getHours() * 60 + e.getMinutes();
        const outside = st < hm2m(day.start) || en > hm2m(day.end);
        if (outside) {
          qm.warn.textContent = `–í—Ä–µ–º—è –≤–Ω–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—Ä–∞—á–∞ (${day.start}‚Äì${day.end}). –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ.`;
          qm.warn.style.display = "block";
        } else {
          qm.warn.style.display = "none";
        }
      } catch {
        qm.warn && (qm.warn.style.display = "none");
      }
    }

    // ---------- FullCalendar ----------
    // –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É (–º–∏–Ω–∏-–ø–æ–∏—Å–∫ –Ω–∞–≤–µ—Ä—Ö—É)
    window.psSelectedPatientId = window.psSelectedPatientId || "";
    const calEl = document.getElementById("calendar");
    const calendar = new FullCalendar.Calendar(calEl, {
      initialView: "timeGridWeek",
      locale: "ru",
      buttonText: {
        today: "—Å–µ–≥–æ–¥–Ω—è",
        month: "–º–µ—Å—è—Ü",
        week: "–Ω–µ–¥–µ–ª—è",
        day: "–¥–µ–Ω—å",
      },
      allDayText: "–í–µ—Å—å –¥–µ–Ω—å",
      timeZone: "local",
      firstDay: 1,
      height: "auto",
      headerToolbar: {
        left: "prev,next today",
        center: "title",
        right: "dayGridMonth,timeGridWeek,timeGridDay",
      },
      slotDuration: "00:15:00",
      snapDuration: "00:15:00",
      slotMinTime: "09:00:00",
      slotMaxTime: "21:00:00",
      businessHours: {
        daysOfWeek: [1, 2, 3, 4, 5, 6],
        startTime: "09:00",
        endTime: "21:00",
      },

      editable: true,
      eventDurationEditable: true,
      eventStartEditable: true,
      eventOverlap: true,

      // –ó–ê–ì–†–£–ó–ö–ê –°–û–ë–´–¢–ò–ô
      events: (fetchInfo, success, failure) => {
        const params = new URLSearchParams({
          start: fetchInfo.startStr,
          end: fetchInfo.endStr,
        });

        const doctorSel = document.querySelector("#doctorFilter");
        const serviceSel = document.querySelector("#serviceFilter");
        const cabinetSel = document.querySelector("#cabinetFilter");

        if (doctorSel?.value) params.set("doctor_id", doctorSel.value);
        if (serviceSel?.value) params.set("service_id", serviceSel.value);
        if (cabinetSel?.value) params.set("room_name", cabinetSel.value);

        // ‚ú¶ –Ω–∞—à —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ)
        (function () {
          const psInput = document.getElementById("psInput");
          const a = (psInput?.dataset?.selId || "").trim();
          const b = (window.__PS_SELECTED_PATIENT_ID__ || "").trim();
          const c = (window.psSelectedPatientId || "").trim();
          const pid = a || b || c;
          if (pid) params.set("patient_id", pid);
        })();

        fetch("/api/events?" + params.toString())
          .then((r) => r.json())
          .then((data) => success(data))
          .catch((err) => {
            console.error("events load error", err);
            failure(err);
          });
      },

      eventDidMount(info) {
        const p = info.event.extendedProps || {};
        info.el.title = [p.service, p.patient, p.status]
          .filter(Boolean)
          .join(" ‚Ä¢ ");
      },

      eventDrop: saveMoveOrResize,
      eventResize: saveMoveOrResize,

      eventClick: async (info) => {
        setModalMode("edit");
        await openQuickModal(info.event.id);
      },

      dateClick: async (arg) => {
        try {
          const d = await loadDictsOnce();
          const doctorSel = document.getElementById("doctorFilter");
          fillOptions(qm.doctor, d.doctors, doctorSel?.value || "");
          fillOptions(qm.patient, d.patients);
          fillOptions(qm.service, d.services);
          fillOptions(qm.room, d.rooms);
          await fillContactBar(qm.patient?.value || "");

          hideNewPatientRow(); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–æ; –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´+ –ù–æ–≤—ã–π¬ª

          const roundTo = 15;
          const s = new Date(arg.date);
          s.setMinutes(Math.round(s.getMinutes() / roundTo) * roundTo, 0, 0);
          const e = addMin(s, 30);

          if (qm.id) qm.id.value = "";
          if (qm.start) qm.start.value = fmtISO(s);
          if (qm.end) qm.end.value = fmtISO(e);

          updateFirstFreeBtnState();
          await recalcEndByService().catch(() => {});
          await checkDoctorWorking().catch(() => {});

          setModalMode("create");
          openModal();
        } catch (e) {
          console.error(e);
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è", "error");
        }
      },
    });

    calendar.render();
    window._calendar = calendar;
    window.calendar = calendar;

    // === [PATCH] –§–∏–ª—å—Ç—Ä—ã —Å–≤–µ—Ä—Ö—É: –ø–æ–¥–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ + —Ä–µ—Ñ–µ—Ç—á ===
    (async function initTopFilters() {
      const doctorSel = document.getElementById("doctorFilter");
      const serviceSel = document.getElementById("serviceFilter");
      const cabinetSel = document.getElementById("cabinetFilter");

      try {
        const d = await loadDictsOnce();

        if (doctorSel) {
          doctorSel.innerHTML =
            '<option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>' +
            (d.doctors || [])
              .map(
                (x) =>
                  `<option value="${x.id}">${x.full_name || x.name}</option>`
              )
              .join("");
        }

        if (serviceSel) {
          serviceSel.innerHTML =
            '<option value="">–í—Å–µ —É—Å–ª—É–≥–∏</option>' +
            (d.services || [])
              .map((s) => `<option value="${s.id}">${s.name}</option>`)
              .join("");
        }

        if (cabinetSel) {
          const names = Array.from(
            new Set((d.rooms || []).map((r) => r.name).filter(Boolean))
          );
          cabinetSel.innerHTML =
            '<option value="">–í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã</option>' +
            names.map((n) => `<option value="${n}">${n}</option>`).join("");
        }
      } catch (e) {
        console.warn("dicts load failed", e);
      }

      [doctorSel, serviceSel, cabinetSel].forEach((el) => {
        el &&
          el.addEventListener("change", () =>
            window.calendar?.refetchEvents?.()
          );
      });
    })();

    // === [PATCH] –ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å–∏—Ç—å" ===
    (function initResetButton() {
      const btn = document.getElementById("btnResetFilters");
      const doctorSel = document.getElementById("doctorFilter");
      const serviceSel = document.getElementById("serviceFilter");
      const cabinetSel = document.getElementById("cabinetFilter");
      const psInput = document.getElementById("psInput");

      btn &&
        btn.addEventListener("click", () => {
          if (doctorSel) doctorSel.value = "";
          if (serviceSel) serviceSel.value = "";
          if (cabinetSel) cabinetSel.value = "";

          // –°–±—Ä–æ—Å –º–∏–Ω–∏-–ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–æ–±–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–∞ + dataset + –≤–∏–∑—É–∞–ª—å–Ω–æ)
          if (psInput) {
            delete psInput.dataset.selId;
            psInput.value = "";
          }
          window.__PS_SELECTED_PATIENT_ID__ = "";
          window.psSelectedPatientId = "";

          window.calendar?.refetchEvents?.();
        });
    })();

    /* === HOVER –ü–û –ö–ê–ë–ò–ù–ï–¢–£: –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã (stable + –±–µ–∑ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏) === */
    (function initRoomHoverFreeSlots() {
      const container = document.getElementById("roomsBar");
      if (!container) return;

      const tip = document.createElement("div");
      tip.id = "roomTip";
      tip.style.cssText = [
        "position:fixed",
        "z-index:9999",
        "display:none",
        "max-width:420px",
        "padding:10px 12px",
        "border-radius:10px",
        "box-shadow:0 8px 24px rgba(0,0,0,.18)",
        "background:#fff",
        "font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial",
        "pointer-events:auto",
        "cursor:pointer",
      ].join(";");
      document.body.appendChild(tip);

      let hideTimer = null,
        abortCtrl = null,
        lastRoom = "",
        lastRoomEl = null;

      function fmtYMD(d) {
        const y = d.getFullYear(),
          m = String(d.getMonth() + 1).padStart(2, "0"),
          day = String(d.getDate()).padStart(2, "0");
        return `${y}-${m}-${day}`;
      }
      function showTip(html, rect) {
        tip.innerHTML = html;
        tip.style.left = Math.round(rect.left) + "px";
        tip.style.top = Math.round(rect.bottom + 6 + window.scrollY) + "px";
        tip.style.display = "block";
      }
      function hideLater() {
        if (hideTimer) clearTimeout(hideTimer);
        hideTimer = setTimeout(() => {
          tip.style.display = "none";
          if (abortCtrl) abortCtrl.abort();
          abortCtrl = null;
        }, 320);
      }

      tip.addEventListener("mouseenter", () => {
        if (hideTimer) {
          clearTimeout(hideTimer);
          hideTimer = null;
        }
      });
      tip.addEventListener("mouseleave", hideLater);
      tip.addEventListener("click", (e) => {
        e.stopPropagation();
        if (!lastRoom || !lastRoomEl) return;
        document.dispatchEvent(
          new CustomEvent("open-room-today", {
            detail: { roomEl: lastRoomEl, roomName: lastRoom },
          })
        );
      });

      const $doctor = document.getElementById("doctorFilter");
      const $service = document.getElementById("serviceFilter");

      container.querySelectorAll("[data-room-name]").forEach((el) => {
        el.addEventListener("mouseenter", async () => {
          lastRoomEl = el;
          lastRoom =
            el.dataset.roomName || el.getAttribute("data-room-name") || "";
          const rect = el.getBoundingClientRect();

          if (!$doctor || !$doctor.value) {
            showTip("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ ‚Üë", rect);
            return;
          }

          let durMin = 30;
          try {
            const dicts = await loadDictsOnce?.();
            const sId = $service?.value || "";
            const svc = (dicts?.services || []).find(
              (x) => String(x.id) === String(sId)
            );
            durMin = svc?.duration_min || 30;
          } catch {}

          const viewDate = window.calendar?.getDate
            ? window.calendar.getDate()
            : new Date();
          const day = fmtYMD(viewDate);
          const today = fmtYMD(new Date());
          const isToday = day === today;
          const nowHM = new Date().toTimeString().slice(0, 5); // "HH:MM"

          try {
            if (abortCtrl) abortCtrl.abort();
            abortCtrl = new AbortController();
            showTip("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤‚Ä¶", rect);

            const r = await fetch(ROUTES.freeSlots, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                doctor_id: $doctor.value,
                room_name: lastRoom,
                date: day,
                duration_min: durMin,
              }),
              signal: abortCtrl.signal,
            });
            const data = await r.json();

            const min = (
              window.calendar?.getOption?.("slotMinTime") || "09:00:00"
            ).slice(0, 5);
            const max = (
              window.calendar?.getOption?.("slotMaxTime") || "21:00:00"
            ).slice(0, 5);

            const slots = (data?.slots || [])
              .filter((t) => t >= min && t < max)
              .filter((t) => !isToday || t >= nowHM)
              .slice(0, 8);

            const title = `<div style="font-weight:600;margin-bottom:4px;">${lastRoom}</div>`;
            const body = slots.length
              ? `–°–≤–æ–±–æ–¥–Ω–æ: <b>${slots.join("</b>, <b>")}</b>`
              : "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç";
            const hint = `<div style="margin-top:8px;opacity:.7;font-size:12px;">–ö–ª–∏–∫ ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç ¬´${lastRoom} ‚Äî —Å–µ–≥–æ–¥–Ω—è¬ª</div>`;
            showTip(`${title}<div>${body}</div>${hint}`, rect);
          } catch (e) {
            if (e.name !== "AbortError") showTip("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", rect);
          }
        });
        el.addEventListener("mouseleave", hideLater);
      });

      window.addEventListener("scroll", () => {
        if (tip.style.display === "block") tip.style.display = "none";
      });
      window.addEventListener("resize", () => {
        if (tip.style.display === "block") tip.style.display = "none";
      });
    })();

    /* === LIVE rooms bar: status + next slot === */
    (function initRoomsBarLive() {
      const bar = document.getElementById("roomsBar");
      if (!bar) return;

      function render(data) {
        bar.querySelectorAll("[data-room-name]").forEach((el) => {
          const name =
            el.dataset.roomName || el.getAttribute("data-room-name") || "";
          const nfo = data && data[name];
          if (!nfo) return;

          // —á–∏—Å—Ç–∏–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–Ω–æ–≤–æ (–Ω–µ –±—É–¥–µ—Ç –¥—É–±–ª–µ–π)
          el.textContent = "";

          // –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ –∏–º—è –∫–∞–±–∏–Ω–µ—Ç–∞ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–æ–Ω—É –∫–ª–∏–∫–∞)
          const nameSpan = document.createElement("span");
          nameSpan.className = "room-name";
          nameSpan.textContent = name;
          nameSpan.style.cursor = "pointer";
          el.appendChild(nameSpan);

          // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å (–∑–µ–ª—ë–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
          const state = document.createElement("span");
          state.className = "room-state";
          state.textContent = " ‚Äî " + (nfo.text || "");
          state.style.marginLeft = "2px";
          state.style.fontWeight = "600";
          state.style.color = nfo.color || "#2e7d32";
          el.appendChild(state);

          // –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
          if (
            nfo.next &&
            (nfo.next.start || nfo.next.patient || nfo.next.service)
          ) {
            const next = document.createElement("span");
            next.className = "room-next";
            const hhmm = String(nfo.next.start || "").slice(-5);
            next.textContent = ` ¬∑ –ë–ª–∏–∂–∞–π—à–∏–π: ${hhmm}${
              nfo.next.patient ? ` ‚Äî ${nfo.next.patient}` : ""
            }`;

            el.appendChild(next);
            el.title = `–°–ª–µ–¥—É—é—â–∏–π: ${hhmm} ¬∑ ${(
              nfo.next.service || ""
            ).trim()} ¬∑ ${(nfo.next.patient || "").trim()}`;
          } else {
            el.title = (nfo.text || "").trim();
          }
        });
      }

      async function tick() {
        try {
          const r = await fetch("/api/rooms/status_now");
          render(await r.json());
        } catch (e) {
          /* noop */
        }
        setTimeout(tick, 60000);
      }
      tick();
    })();

    /* === Click room -> today details popup (toggle + outside close) === */
    (function initRoomClickTodayDetails() {
      const bar = document.getElementById("roomsBar");
      if (!bar) return;

      const pop = document.createElement("div");
      pop.id = "roomDayPopup";
      pop.style.cssText =
        "position:fixed;z-index:5000;display:none;min-width:320px;max-width:420px;background:#fff;border:1px solid #dbeafd;border-radius:10px;box-shadow:0 8px 24px rgba(0,0,0,.08);padding:10px 12px;font-size:.95rem;line-height:1.35;";
      document.body.appendChild(pop);

      let openedRoom = "";

      function hide() {
        pop.style.display = "none";
        openedRoom = "";
      }
      function showNear(el) {
        const rect = el.getBoundingClientRect();
        pop.style.left = Math.round(rect.left) + "px";
        pop.style.top = Math.round(rect.bottom + 6 + window.scrollY) + "px";
        pop.style.display = "block";
      }
      async function renderRoomToday(name) {
        try {
          const url =
            (window.ROUTES?.todayDetailsApi || "/api/rooms/today_details") +
            "?room=" +
            encodeURIComponent(name);

          const r = await fetch(url, {
            headers: { accept: "application/json" },
          });
          const ct = r.headers.get("content-type") || "";

          if (ct.includes("json")) {
            const data = await r.json();
            const now = new Date();
            const nowHHMM = (() => {
              const d = new Date();
              return `${String(d.getHours()).padStart(2, "0")}:${String(
                d.getMinutes()
              ).padStart(2, "0")}`;
            })();

            // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∞—ë–º HH:MM (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è "HH:MM", –∏ –¥–ª—è "YYYY-MM-DDTHH:MM")
            const hhmm = (s) => String(s || "").slice(-5);

            const visible = (data.items || []).filter((x) => {
              // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ (is_now) –∏ –±—É–¥—É—â–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
              return x.is_now || hhmm(x.end) >= nowHHMM;
            });

            const rows =
              visible
                .map((x) => {
                  const hh1 = hhmm(x.start);
                  const hh2 = hhmm(x.end);
                  const who = [x.service, x.patient]
                    .filter(Boolean)
                    .join(" ‚Äî ");
                  return `<div style="padding:4px 0;border-bottom:1px dashed #eef2ff;">
          <b>${hh1}‚Äì${hh2}</b>${who ? ` ¬∑ ${who}` : ""}
        </div>`;
                })
                .join("") || "<i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</i>";

            pop.innerHTML = `
            <div style="font-weight:600;margin-bottom:6px;">${name} ‚Äî —Å–µ–≥–æ–¥–Ω—è</div>
            ${rows}
          `;
          } else {
            // –ª–µ–≥–∞—Å–∏: —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–π HTML
            pop.innerHTML =
              (await r.text()).trim() || "<i>–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</i>";
          }
        } catch (e) {
          pop.innerHTML = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏";
        }
      }

      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞ –∏–∑ —Ç—É–ª—Ç–∏–ø–∞
      window.openRoomTodayFromTip = async function (roomEl, roomName) {
        // –ø–æ–≥–∞—Å–∏–º —Ç—É–ª—Ç–∏–ø, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";

        // toggle: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç –∂–µ –∫–∞–±–∏–Ω–µ—Ç ‚Äî –∑–∞–∫—Ä—ã—Ç—å
        if (pop.style.display === "block" && openedRoom === roomName) {
          hide();
          return;
        }

        openedRoom = roomName;
        showNear(roomEl);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(roomName);
      };

      // –û–¢–ö–†–´–¢–ò–ï/–ó–ê–ö–†–´–¢–ò–ï: –∫–ª–∏–∫ –ø–æ —Å—Ç—Ä–æ–∫–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)

      document.addEventListener("click", async (e) => {
        const el = e.target.closest("#roomsBar [data-room-name]");
        if (!el) return;

        // —É–±–∏—Ä–∞–µ–º hover-tooltip
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";

        const name =
          el.dataset.roomName || el.getAttribute("data-room-name") || "";

        // –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —ç—Ç–æ—Ç –∂–µ –∫–∞–±–∏–Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ toggle –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (pop.style.display === "block" && openedRoom === name) {
          hide();
          return;
        }

        openedRoom = name;
        showNear(el);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(name);
      });

      // —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —è–∫–æ—Ä—è –ø–æ –∏–º–µ–Ω–∏ –∫–∞–±–∏–Ω–µ—Ç–∞
      function findRoomAnchor(name) {
        if (!name) return null;
        const esc = CSS && CSS.escape ? CSS.escape(name) : name;
        return (
          document.querySelector(`[data-room="${esc}"]`) ||
          document.querySelector(`[data-open-room="${esc}"]`) ||
          document.querySelector(`[data-room-name="${esc}"]`) ||
          [...document.querySelectorAll(".ps-room, .ps-rooms-item")].find(
            (el) => (el.textContent.split("‚Äî")[0] || "").trim() === name
          ) ||
          null
        );
      }

      // –û–¢–ö–†–´–¢–ò–ï –ø–æ ¬´—Å–∏–≥–Ω–∞–ª—É¬ª –∏–∑ —Ç—É–ª—Ç–∏–ø–∞ / –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
      document.addEventListener("open-room-today", async (e) => {
        let { roomEl, roomName } = (e && e.detail) || {};
        if (!roomName) return;
        roomEl = roomEl || findRoomAnchor(roomName); // <-- –í–ê–ñ–ù–û
        if (!roomEl) return;
        const tip = document.getElementById("roomTip");
        if (tip) tip.style.display = "none";
        if (pop.style.display === "block" && openedRoom === roomName) {
          hide();
          return;
        }
        openedRoom = roomName;
        showNear(roomEl);
        pop.innerHTML = "–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶";
        await renderRoomToday(roomName);
      });

      // –∫–ª–∏–∫ –≤–Ω–µ –ø–æ–ø–∞–ø–∞ ‚Äî –ù–ï –∑–∞–∫—Ä—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —Ç—É–ª—Ç–∏–ø—É
      document.addEventListener("click", (e) => {
        if (pop.style.display !== "block") return;
        if (pop.contains(e.target)) return;
        if (e.target.closest("#roomsBar")) return;
        if (e.target.closest("#roomTip")) return; // <-- –í–ê–ñ–ù–û
        hide();
      });

      // Esc / scroll / resize ‚Äî –∑–∞–∫—Ä—ã—Ç—å
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") hide();
      });
      window.addEventListener("scroll", hide);
      window.addEventListener("resize", hide);
    })();

    async function saveMoveOrResize(info) {
      const payload = {
        id: info.event.id,
        start: info.event.startStr,
        end: info.event.endStr || info.event.startStr,
      };
      try {
        const r = await fetch("/api/appointments/update_time", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        const data = await r.json();
        if (!data.ok) {
          alert(
            data.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
          );
          info.revert();
          return;
        }
        calendar.refetchEvents();
      } catch {
        alert("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
        info.revert();
      }
    }

    // –æ—Ç–∫—Ä—ã—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
    async function openQuickModal(id) {
      try {
        const d = await loadDictsOnce();
        fillOptions(qm.doctor, d.doctors);
        fillOptions(qm.patient, d.patients);
        fillOptions(qm.service, d.services);
        fillOptions(qm.room, d.rooms);

        hideNewPatientRow(); // –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º ¬´–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç¬ª –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        const r = await fetch(`/api/appointments/${id}`);
        const data = await r.json();
        if (!data.ok) {
          showToast("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å", "error");
          return;
        }
        const it = data.item;

        if (qm.id) qm.id.value = it.id || "";
        if (qm.doctor) qm.doctor.value = it.doctor_id || "";
        if (qm.patient) qm.patient.value = it.patient_id || "";
        await fillContactBar(qm.patient?.value || "");
        if (qm.service) qm.service.value = it.service_id || "";
        if (qm.room) qm.room.value = it.room_id || "";
        if (qm.start) qm.start.value = (it.start || "").slice(0, 16);
        if (qm.end) qm.end.value = (it.end || "").slice(0, 16);
        if (qm.status) qm.status.value = it.status_key || "scheduled";
        if (qm.comment) qm.comment.value = it.comment || "";

        qm.service?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.start?.addEventListener(
          "change",
          () => {
            recalcEndByService();
            checkDoctorWorking();
          },
          { once: true }
        );
        qm.end?.addEventListener("change", checkDoctorWorking, { once: true });
        qm.doctor?.addEventListener("change", checkDoctorWorking, {
          once: true,
        });

        await recalcEndByService();
        await checkDoctorWorking();
        setModalMode("edit");
        openModal();
      } catch (e) {
        console.error(e);
        showToast("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏", "error");
      }
    }

    // submit / delete
    qm.form?.addEventListener("submit", async (ev) => {
      ev.preventDefault();
      // [MP] –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –±–ª–æ–∫ "–ù–æ–≤—ã–π")
      async function mpEnsurePatientSelected() {
        let patientId = (qm.patient?.value || "").trim();
        const full_name = (qm.newFullName?.value || "").trim();
        const phone = (qm.newPhone?.value || "").trim();
        const birth_date = (qm.newBirth?.value || "").trim();

        // –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤—ë–ª –≤ "–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç"
        if (full_name) {
          const needCreate =
            !patientId ||
            confirm(
              `–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ ¬´${full_name}¬ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ?`
            );
          if (needCreate) {
            try {
              const r = await fetch("/api/patients", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ full_name, phone, birth_date }),
              });
              const data = await r.json().catch(() => ({}));
              if (!r.ok || !(data.ok ?? true) || !data.id) {
                showToast(
                  data?.error || `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (HTTP ${r.status})`,
                  "error"
                );
                return null; // –æ—Ç–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
              }
              // –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–µ–ª–µ–∫—Ç –∏ –≤—ã–±—Ä–∞—Ç—å
              const opt = document.createElement("option");
              opt.value = data.id;
              opt.textContent = data.full_name || full_name;
              qm.patient?.appendChild(opt);
              qm.patient.value = data.id;
              patientId = data.id;

              // –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à, –æ—á–∏—Å—Ç–∏—Ç—å –∏ —Å–∫—Ä—ã—Ç—å –±–ª–æ–∫ "–ù–æ–≤—ã–π"
              if (window.__DICT_CACHE__) {
                window.__DICT_CACHE__.patients?.unshift({
                  id: data.id,
                  name: data.full_name || full_name,
                });
              }
              if (qm.patientNewRow) qm.patientNewRow.style.display = "none";
              if (qm.newFullName) qm.newFullName.value = "";
              if (qm.newPhone) qm.newPhone.value = "";
              if (qm.newBirth) qm.newBirth.value = "";
              showToast("–ü–∞—Ü–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω", "ok");
            } catch {
              showToast("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞)", "error");
              return null; // –æ—Ç–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            }
          }
        }
        return patientId;
      }

      const ensuredPatientId = await mpEnsurePatientSelected();
      if (!ensuredPatientId) return; // –æ—à–∏–±–∫–∞/–æ—Ç–º–µ–Ω–∞ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

      const base = {
        doctor_id: qm.doctor?.value || "",
        patient_id: ensuredPatientId,
        service_id: qm.service?.value || "",
        room_id: qm.room?.value || "",
        start: qm.start?.value || "",
        end: qm.end?.value || "",
        status_key: qm.status?.value || "scheduled",
        comment: qm.comment?.value || "",
      };

      // CREATE
      if (!qm.id?.value) {
        if (
          !base.doctor_id ||
          !base.patient_id ||
          !base.service_id ||
          !base.room_id
        ) {
          showToast("–ó–∞–ø–æ–ª–Ω–∏ –ø–æ–ª—è: –≤—Ä–∞—á, –ø–∞—Ü–∏–µ–Ω—Ç, —É—Å–ª—É–≥–∞, –∫–∞–±–∏–Ω–µ—Ç", "error");
          return;
        }
        const payload = {
          start: base.start,
          end: base.end,
          room_id: base.room_id,
          doctor_id: base.doctor_id,
          patient_id: base.patient_id,
          service_id: base.service_id,
          note: base.comment || "",
        };
        let ok = false,
          lastErr = "";
        const endpoints = [
          "/api/appointments",
          "/api/appointments/create",
          "/schedule/api/create",
        ];
        for (const url of endpoints) {
          try {
            const r = await fetch(url, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });
            const data = await r.json().catch(() => ({}));
            if (
              r.status === 409 ||
              data?.error === "conflict" ||
              data?.error === "room_conflict"
            ) {
              showToast("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç/–≤—Ä–∞—á –∑–∞–Ω—è—Ç", "error");
              return;
            }
            if (r.ok && (data?.ok ?? true)) {
              ok = true;
              break;
            }
            lastErr = data?.error || `HTTP ${r.status}`;
          } catch {
            lastErr = "network";
          }
        }
        if (!ok) {
          showToast(
            `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è${lastErr ? ` (${lastErr})` : ""}`,
            "error"
          );
          return;
        }
        showToast("–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞", "ok");
      }
      // UPDATE
      else {
        const r = await fetch(`/api/appointments/${qm.id.value}/update`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(base),
        });
        const data = await r.json();
        if (!r.ok || !data.ok) {
          const err =
            data?.error === "room_conflict"
              ? "–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∫–∞–±–∏–Ω–µ—Ç –∑–∞–Ω—è—Ç"
              : "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";
          showToast(err, "error");
          return;
        }
        showToast("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "ok");
      }

      closeModal();
      calendar.refetchEvents();
    });

    // —É–¥–∞–ª–µ–Ω–∏–µ
    qm.btnDel?.addEventListener("click", async () => {
      const id = qm.id?.value;
      if (!id) {
        showToast("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "error");
        return;
      }
      if (!confirm("–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) return;
      const candidates = [
        { url: "/schedule/api/delete", body: { id } },
        { url: "/api/appointments/delete", body: { id } },
        {
          url: `/api/appointments/${encodeURIComponent(id)}`,
          method: "DELETE",
          body: {},
        },
      ];
      let ok = false;
      for (const c of candidates) {
        try {
          const r = await fetch(c.url, {
            method: c.method || "POST",
            headers: { "Content-Type": "application/json" },
            body: Object.keys(c.body || {}).length
              ? JSON.stringify(c.body)
              : undefined,
          });
          const data = await r.json().catch(() => ({}));
          if (r.ok && (data.ok ?? true)) {
            ok = true;
            break;
          }
        } catch {}
      }
      if (!ok) {
        showToast("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", "error");
        return;
      }
      closeModal();
      calendar.refetchEvents();
      showToast("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞", "ok");
    });
  }); // DOMContentLoaded
</script>

<script>
  // === MINI SEARCH (patients) ‚Äî –µ–¥–∏–Ω—ã–π —Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç =========================
  (function () {
    const psInput = document.getElementById("psInput");
    const psDrop = document.getElementById("psDrop");
    if (!psInput || !psDrop) return;

    // –ì–ª–æ–±–∞–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é —á–∏—Ç–∞–µ—Ç –ª–æ–∞–¥–µ—Ä —Å–æ–±—ã—Ç–∏–π
    window.__PS_SELECTED_PATIENT_ID__ = window.__PS_SELECTED_PATIENT_ID__ || "";

    psDrop.style.zIndex = "4000";
    psDrop.style.pointerEvents = "auto";

    function debounce(fn, ms = 220) {
      let t;
      return (...a) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...a), ms);
      };
    }
    function hideDrop() {
      psDrop.style.display = "none";
      psDrop.innerHTML = "";
    }
    function showDrop() {
      psDrop.style.display = "block";
    }

    function renderDrop(items) {
      if (!items?.length) {
        hideDrop();
        return;
      }
      psDrop.innerHTML = items
        .map(
          (i) => `
      <div class="ps-item" data-id="${i.id}" data-name="${i.name}"
           style="padding:8px 10px; cursor:pointer; border-top:1px solid #f0f2f5;">
        <div style="display:flex; justify-content:space-between; gap:8px;">
          <span class="ps-name">${i.name}</span>
          <small style="opacity:.6">${i.birthdate || ""}${
            i.card_no ? " ¬∑ #" + i.card_no : ""
          }</small>
        </div>
      </div>`
        )
        .join("");
      showDrop();
    }

    function applyPatientFilter(id, name) {
      const selId = (id || "").trim();
      const selName = (name || "").trim();

      // 1) dataset —É –∏–Ω–ø—É—Ç–∞
      psInput.dataset.selId = selId;

      // 2) –æ–±–µ –≥–ª–æ–±–∞–ª–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª—é–±—ã–º–∏ —á–∏—Ç–∞—Ç–µ–ª—è–º–∏)
      window.__PS_SELECTED_PATIENT_ID__ = selId;
      window.psSelectedPatientId = selId;

      // 3) –≤–∏–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
      psInput.value = selName;

      hideDrop();

      // 4) —Ä–µ—Ñ–µ—Ç—á —Å–æ–±—ã—Ç–∏–π
      if (window.calendar?.refetchEvents) window.calendar.refetchEvents();
      else setTimeout(() => window.calendar?.refetchEvents?.(), 0);

      // 5) ¬´–ø—Ä–∏–∫–ª–µ–π–∫–∞¬ª –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
      setTimeout(() => {
        psInput.value = selName;
      }, 0);
    }

    const search = debounce(async () => {
      const q = (psInput.value || "").trim();
      if (q.length < 2) {
        hideDrop();
        return;
      }
      try {
        // –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–∏—Å–∫ (–±—ç–∫–µ–Ω–¥ —É–∂–µ –µ—Å—Ç—å)
        const r = await fetch(
          `/api/patients/min?q=${encodeURIComponent(q)}&limit=8`,
          { cache: "no-store" }
        );

        const data = await r.json().catch(() => ({}));
        if (!r.ok || !data?.ok) {
          hideDrop();
          return;
        }
        renderDrop(data.items || []);
      } catch {
        hideDrop();
      }
    }, 220);

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    psInput.addEventListener("input", search);
    psInput.addEventListener("focus", search);

    // –í—ã–±–æ—Ä –î–û blur: –Ω–∞ mousedown
    psDrop.addEventListener("mousedown", (e) => {
      const item = e.target.closest(".ps-item");
      if (!item) return;
      // –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º bubbling –∏ blur –¥–æ –∫–æ–Ω—Ü–∞ —Ü–∏–∫–ª–∞
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();

      applyPatientFilter(
        item.dataset.id,
        item.dataset.name || item.querySelector(".ps-name")?.textContent || ""
      );
    });

    // Enter ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π
    psInput.addEventListener("keydown", (e) => {
      if (e.key !== "Enter") return;
      const first = psDrop.querySelector(".ps-item");
      if (!first) return;
      e.preventDefault();
      first.dispatchEvent(
        new MouseEvent("mousedown", { bubbles: true, cancelable: true })
      );
    });

    // –ö–ª–∏–∫ –≤–Ω–µ ‚Äî –∑–∞–∫—Ä—ã—Ç—å
    document.addEventListener("click", (e) => {
      if (e.target === psInput) return;
      if (psDrop.contains(e.target)) return;
      hideDrop();
    });

    // ¬´–°–±—Ä–æ—Å–∏—Ç—å¬ª ‚Äî –æ—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Ä–µ—Ñ–µ—Ç—á
    document
      .getElementById("btnResetFilters")
      ?.addEventListener("click", () => {
        delete psInput.dataset.selId;
        window.__PS_SELECTED_PATIENT_ID__ = "";
        window.psSelectedPatientId = ""; // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ –æ—á–∏—Å—Ç–∫—É 2-–π –≥–ª–æ–±–∞–ª–∫–∏
        psInput.value = "";
        hideDrop();
        window.calendar?.refetchEvents?.();
      });
  })();
</script>

<!-- MP-CONTACTS: JS -->
<script>
  async function mpOpenContact(type, patientId) {
    function normPhone(s) {
      const d = (s || "").replace(/\D+/g, "");
      if (!d) return "";
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 7xxxxxxxxxx
      if (d.startsWith("8") && d.length === 11) return "7" + d.slice(1);
      if (d.startsWith("7") && d.length === 11) return d;
      if (d.length === 10) return "7" + d; // –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
      return d;
    }
    function buildLink(t, contacts, linksFromServer) {
      // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (linksFromServer && linksFromServer[t]) return linksFromServer[t];

      const phone = normPhone(contacts?.phone || contacts?.whatsapp || "");
      const tg = (contacts?.telegram || "").replace(/^@/, "");
      const mail = (contacts?.email || "").trim();
      const max = (contacts?.max || "").trim();

      switch (t) {
        case "tel":
          return phone ? `tel:+${phone}` : null;
        case "wa":
          return phone ? `https://wa.me/${phone}` : null;
        case "tg":
          // –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∏–∫ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ –Ω–∏–∫—É, –∏–Ω–∞—á–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          return tg
            ? `https://t.me/${encodeURIComponent(tg)}`
            : phone
            ? `https://t.me/+${phone}`
            : null;
        case "mail":
          return mail ? `mailto:${mail}` : null;
        case "max":
          // –ú–∞–∫—Å ¬´–∫–∞–∫ WhatsApp¬ª: –ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å web.max.ru —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º,
          // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é
          if (phone) return `https://web.max.ru/?phone=${phone}`;
          return `https://web.max.ru/`;
        default:
          return null;
      }
    }

    try {
      if (!patientId) {
        const sel = document.getElementById("patient"); // <select id="patient"> –≤ –º–æ–¥–∞–ª–∫–µ
        if (sel) patientId = sel.value;
      }
      if (!patientId) {
        alert("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç");
        return;
      }

      const res = await fetch(
        `/api/patients/${encodeURIComponent(patientId)}/contacts`,
        { cache: "no-store" }
      );
      if (!res.ok) {
        alert("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
        return;
      }

      const j = await res.json().catch(() => ({}));
      if (!j.ok) {
        alert("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      const url = buildLink(type, j.contacts || {}, j.links || null);
      if (!url) {
        alert("–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è: " + type);
        return;
      }

      window.open(url, "_blank", "noopener");
    } catch (e) {
      console.error(e);
      alert("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }
  }

  try {
    window._calendar &&
      typeof window._calendar.render === "function" &&
      window._calendar.render();
  } catch (e) {}
</script>

{% endblock %}

=== D:\Projects\medplatforma\templates\close_appointment.html ===
{% extends 'base.html' %}
{% block title %}–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º{% endblock %}
{% block content %}
<div style="max-width:600px;margin:0 auto;background:#fff;border-radius:20px;box-shadow:0 6px 32px rgba(20,40,80,.08);padding:38px;">
    <h2 style="font-size:1.4rem;font-weight:700;margin-bottom:18px;">–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: <span style="color:#445be2;">{{ patient.full_name }}</span></h2>
    <form method="POST">
        <label>–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ (–æ–ø–∏—Å–∞–Ω–∏–µ)</label>
        <textarea name="done" rows="2" style="width:100%;padding:10px;margin-bottom:18px;border-radius:8px;border:1px solid #ccd;"></textarea>

        <label>–£—Å–ª—É–≥–∏:</label>
        <table style="width:100%;margin-bottom:18px;">
            <tr>
                <th style="text-align:left;">–£—Å–ª—É–≥–∞</th>
                <th style="text-align:center;">–¶–µ–Ω–∞</th>
                <th style="text-align:center;">–ö–æ–ª-–≤–æ</th>
            </tr>
            {% for i, s in enumerate(price_list) %}
            <tr>
                <td>{{ s.name }}</td>
                <td style="text-align:center;">{{ s.price }}</td>
                <td style="text-align:center;">
                    <input type="number" min="0" name="qty_{{i}}" value="0" style="width:60px;">
                </td>
            </tr>
            {% endfor %}
        </table>

        <label>–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)</label>
        <textarea name="plan" rows="2" style="width:100%;padding:10px;margin-bottom:22px;border-radius:8px;border:1px solid #ccd;"></textarea>

        <button type="submit" style="background:#445be2;color:#fff;border:none;border-radius:10px;padding:12px 32px;font-weight:700;font-size:1.09rem;cursor:pointer;">–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏—ë–º</button>
    </form>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\data_tools.html ===
{% extends "base.html" %}
{% block content %}
<div class="data-tools-container">

  <h2>–≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h2>
  <div class="export-import-section">

    <!-- –≠–∫—Å–ø–æ—Ä—Ç -->
    <div class="export-block">
      <h3>–≠–∫—Å–ø–æ—Ä—Ç</h3>
      <form method="get" action="{{ url_for('export_data') }}">
        <label>–ß—Ç–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å:</label>
        <select name="collection" class="filter-select">
          <option value="patients">–ü–∞—Ü–∏–µ–Ω—Ç—ã</option>
          <option value="doctors">–í—Ä–∞—á–∏</option>
          <option value="events">–°–æ–±—ã—Ç–∏—è</option>
          <option value="finance">–§–∏–Ω–∞–Ω—Å—ã</option>
        </select>
        <button type="submit" name="format" value="xlsx" class="btn btn-success">Excel</button>
        <button type="submit" name="format" value="csv" class="btn btn-outline-primary">CSV</button>
      </form>
      <small>–§–∞–π–ª –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏ –∏ Excel. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äî –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∏–º–ø–æ—Ä—Ç—É.</small>
    </div>

    <!-- –ò–º–ø–æ—Ä—Ç -->
    <div class="import-block">
      <h3>–ò–º–ø–æ—Ä—Ç</h3>
      <form method="post" action="{{ url_for('import_data') }}" enctype="multipart/form-data">
        <label>–ß—Ç–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å:</label>
        <select name="collection" class="filter-select">
          <option value="patients">–ü–∞—Ü–∏–µ–Ω—Ç—ã</option>
          <option value="doctors">–í—Ä–∞—á–∏</option>
          <option value="events">–°–æ–±—ã—Ç–∏—è</option>
          <option value="finance">–§–∏–Ω–∞–Ω—Å—ã</option>
        </select>
        <input type="file" name="file" accept=".xlsx,.csv">
        <button type="submit" class="btn btn-primary">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        <a href="/static/templates/patients_template.xlsx" class="btn btn-link" download>–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel –ü–∞—Ü–∏–µ–Ω—Ç—ã</a>
      </form>
      <small>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (name, phone, email, ...). –í—Å–µ –ø–æ–ª—è ‚Äî –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.</small>
    </div>
  </div>

  <!-- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫/–≤—ã–≥—Ä—É–∑–æ–∫ -->
  <div class="import-export-history">
    <h4>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –∏ –≤—ã–≥—Ä—É–∑–æ–∫</h4>
    <table class="table table-history">
      <thead>
        <tr>
          <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
          <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
          <th>–û–ø–µ—Ä–∞—Ü–∏—è</th>
          <th>–ö–æ–ª–ª–µ–∫—Ü–∏—è</th>
          <th>–§–∞–π–ª</th>
          <th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
        </tr>
      </thead>
      <tbody>
        {% for h in history %}
        <tr>
          <td>{{ h.datetime }}</td>
          <td>{{ h.user }}</td>
          <td>{{ h.operation }}</td>
          <td>{{ h.collection }}</td>
          <td>{{ h.filename }}</td>
          <td>{{ h.result }}</td>
        </tr>
        {% else %}
        <tr><td colspan="6" style="text-align:center;color:#bbb;">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏</td></tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

</div>
<style>
.data-tools-container { padding:30px 0 0 0; }
.export-import-section { display: flex; gap: 46px; margin-bottom: 34px;}
.export-block, .import-block { background: #fff; border-radius: 19px; box-shadow:0 2px 22px #e3eaf92a; padding:26px 30px; min-width:320px; }
.table-history { margin-top:14px; }
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\debtors.html ===
{% extends "base.html" %}
{% block content %}
<h2>–î–æ–ª–∂–Ω–∏–∫–∏/–î–µ–ø–æ–∑–∏—Ç—ã</h2>
<table>
  <tr><th>–ü–∞—Ü–∏–µ–Ω—Ç</th><th>–î–æ–ª–≥</th></tr>
  {% for d in debtors %}
    <tr>
      <td>{{ d.full_name }}</td>
      <td>{{ d.debt }}</td>
    </tr>
  {% endfor %}
</table>
{% endblock %}

=== D:\Projects\medplatforma\templates\doctor_card.html ===
{% extends 'base.html' %}
{% block content %}
<div class="doctor-card">
  <!-- –í–µ—Ä—Ö -->
  <div class="doctor-card-header">
    <div class="doctor-avatar">
      <img src="{{ doctor.avatar_url or '/static/avatars/doctor_default.png' }}" alt="avatar">
    </div>
    <div class="doctor-main-info">
      <h2>{{ doctor.full_name }}</h2>
      <div class="doctor-status">{{ doctor.position or '–í—Ä–∞—á' }}</div>
      <div class="doctor-actions">
        <a href="/edit_doctor/{{ doctor._id }}" class="btn-main btn-edit"><i class="fa fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
        <a href="tel:{{ doctor.phone }}" class="btn-main btn-call"><i class="fa fa-phone"></i> –ü–æ–∑–≤–æ–Ω–∏—Ç—å</a>
        <a href="mailto:{{ doctor.email }}" class="btn-main btn-email"><i class="fa fa-envelope"></i> Email</a>
        <a href="/add_file/{{ doctor._id }}" class="btn-main btn-file"><i class="fa fa-upload"></i> –î–æ–∫—É–º–µ–Ω—Ç—ã</a>
        <a href="/add_appointment/{{ doctor._id }}" class="btn-main btn-appt"><i class="fa fa-calendar-plus"></i> –ó–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞</a>
      </div>
    </div>
  </div>

  <!-- –í–∫–ª–∞–¥–∫–∏ -->
  <div class="tabs">
    <button class="tab-btn active" data-tab="info">–ò–Ω—Ñ–æ</button>
    <button class="tab-btn" data-tab="schedule">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</button>
    <button class="tab-btn" data-tab="reviews">–û—Ç–∑—ã–≤—ã</button>
    <button class="tab-btn" data-tab="docs">–î–æ–∫—É–º–µ–Ω—Ç—ã</button>
    <button class="tab-btn" data-tab="gallery">–î–æ/–ü–æ—Å–ª–µ</button>
  </div>

  <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ -->
  <div class="tab-content active" id="tab-info">
    <div class="doctor-info-sections">
      <div class="doctor-block">
        <h3>–û—Å–Ω–æ–≤–Ω–æ–µ</h3>
        <p><b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {{ doctor.specialization }}</p>
        <p><b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {{ doctor.phone }}</p>
        <p><b>Email:</b> {{ doctor.email }}</p>
        <p><b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {{ doctor.experience }} –ª–µ—Ç</p>
        <p><b>–í –∫–ª–∏–Ω–∏–∫–µ —Å:</b> {{ doctor.since }}</p>
      </div>
      <div class="doctor-block">
        <h3>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
        <p>{{ doctor.education or "‚Äî" }}</p>
        <p>{{ doctor.certificates or "" }}</p>
      </div>
      <div class="doctor-block">
        <h3>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è</h3>
        <p>{{ doctor.bio or "‚Äî" }}</p>
      </div>
    </div>
  </div>

  <div class="tab-content" id="tab-schedule">
    <div class="doctor-schedule-section">
      <h3>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞</h3>
      <div id="doctor-calendar"></div>
    </div>
  </div>

  <div class="tab-content" id="tab-reviews">
    <div class="doctor-history-section">
      <h3>–û—Ç–∑—ã–≤—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</h3>
      <div class="doctor-reviews">
        {% for review in doctor.reviews %}
          <div class="review-block">
            <div class="review-rating">{% for i in range(review.stars) %}‚òÖ{% endfor %}</div>
            <div class="review-text">"{{ review.text }}"</div>
            <div class="review-date">{{ review.date }}</div>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>

  <div class="tab-content" id="tab-docs">
    <div class="doctor-files-section">
      <h3>–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</h3>
      <div class="doctor-files">
        {% for file in doctor.files %}
          <div class="file-preview">
            {% if file.type == 'image' %}
              <img src="{{ file.url }}" alt="file" />
            {% elif file.type == 'pdf' %}
              <a href="{{ file.url }}" target="_blank"><i class="fa fa-file-pdf"></i> PDF —Ñ–∞–π–ª</a>
            {% endif %}
            <div class="file-name">{{ file.name }}</div>
          </div>
        {% endfor %}
        <a href="/add_file/{{ doctor._id }}" class="btn-main btn-file-upload"><i class="fa fa-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å</a>
      </div>
    </div>
  </div>

  <div class="tab-content" id="tab-gallery">
    <div class="doctor-gallery-section">
      <h3>–ì–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç ‚Äú–î–æ / –ü–æ—Å–ª–µ‚Äù</h3>
      <div class="gallery-row">
        {% for case in doctor.cases %}
        <div class="gallery-case">
          <div class="gallery-label">–î–æ</div>
          <img src="{{ case.before }}" alt="before">
          <div class="gallery-label">–ü–æ—Å–ª–µ</div>
          <img src="{{ case.after }}" alt="after">
        </div>
        {% endfor %}
      </div>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"></script>
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // –¢–∞–±—ã
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');
  tabBtns.forEach(btn => {
    btn.addEventListener('click', function() {
      tabBtns.forEach(b => b.classList.remove('active'));
      tabContents.forEach(tc => tc.classList.remove('active'));
      this.classList.add('active');
      document.getElementById('tab-' + this.dataset.tab).classList.add('active');
      // –ü—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî —Ä–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      if (this.dataset.tab === "schedule" && !window.doctorCalRendered) {
        renderDoctorCalendar();
        window.doctorCalRendered = true;
      }
    });
  });

  // FullCalendar –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–∞
  window.renderDoctorCalendar = function() {
    var calendarEl = document.getElementById('doctor-calendar');
    var events = [
      {% for ev in doctor.events %}
      {
        title: "{{ ev.title|e }}",
        start: "{{ ev.start }}",
        end: "{{ ev.end }}",
        backgroundColor: "{{ ev.color|default('#A2C6FA') }}",
        borderColor: "{{ ev.color|default('#A2C6FA') }}",
        // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
      },
      {% endfor %}
    ];
    var calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: 'timeGridWeek',
      locale: 'ru',
      slotMinTime: "08:00:00",
      slotMaxTime: "20:00:00",
      allDayText: '–í–µ—Å—å –¥–µ–Ω—å',
      headerToolbar: { left: '', center: 'title', right: '' },
      events: events,
      height: 370,
      nowIndicator: true
    });
    calendar.render();
  };
});
</script>

{% endblock %}

=== D:\Projects\medplatforma\templates\doctors.html ===
{% extends "base.html" %}
{% block content %}
<h2>–°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π</h2>
<form method="get" class="doctors-filters" style="margin-bottom: 18px;">
  <select name="specialization" onchange="this.form.submit()" class="filter-select">
    <option value="">–í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</option>
    {% set all_specs = doctors | map(attribute='specialization') | list %}
    {% for spec in all_specs|unique %}
      {% if spec %}
        <option value="{{ spec }}" {% if request.args.get('specialization') == spec %}selected{% endif %}>{{ spec }}</option>
      {% endif %}
    {% endfor %}
  </select>
  <a href="{{ url_for('add_doctor') }}" class="btn-add-doc">
    <i class="fa fa-user-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞
  </a>
</form>
<div class="doctors-list">
  {% for doc in doctors %}
    <div class="doctor-card-row">
      <div class="avatar-zone">
        <img src="{{ doc.avatar_url or '/static/avatars/demo-doctor.png' }}" alt="avatar" class="avatar-doctor">
      </div>
      <div class="info-zone">
        <div class="doctor-name">{{ doc.full_name }}</div>
        <div class="doctor-meta">
          <span class="special">{{ doc.specialization }}</span>
          <span class="email"><i class="fa fa-envelope"></i> {{ doc.email }}</span>
          <span class="phone"><i class="fa fa-phone"></i> {{ doc.phone }}</span>
        </div>
        {% if doc.schedule %}
          <div class="doctor-schedule-mini">
            <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
            <ul>
              {% for wd in range(1, 7) %}
                {% if doc.schedule[wd|string] %}
                  <li>
                    {{ ['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'][wd-1] }}:
                    {{ doc.schedule[wd|string].start }}‚Äì{{ doc.schedule[wd|string].end }}
                  </li>
                {% endif %}
              {% endfor %}
              {% if not (doc.schedule['1'] or doc.schedule['2'] or doc.schedule['3'] or doc.schedule['4'] or doc.schedule['5'] or doc.schedule['6']) %}
                <li style="color:#db2828;">–í—ã—Ö–æ–¥–Ω—ã–µ</li>
              {% endif %}
            </ul>
          </div>
        {% endif %}
      </div>
      <div class="status-zone">
        <span class="doc-status {{ 'active' if doc.status == '–∞–∫—Ç–∏–≤–µ–Ω' else 'inactive' }}">{{ doc.status }}</span>
      </div>
      <div class="actions-zone">
        <a href="{{ url_for('doctor_card', doctor_id=doc._id) }}" class="btn-main">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
      </div>
    </div>
  {% endfor %}
</div>
{% endblock %}

{% block head %}
<style>
.doctors-list {
  margin-top: 30px;
  display: flex;
  flex-direction: column;
  gap: 18px;
}
.doctor-card-row {
  display: flex;
  align-items: center;
  gap: 28px;
  background: #fff;
  border-radius: 18px;
  box-shadow: 0 4px 12px #0001;
  padding: 16px 28px;
  font-family: 'Montserrat', sans-serif;
  min-height: 84px;
  transition: box-shadow 0.2s;
}
.doctor-card-row:hover {
  box-shadow: 0 8px 18px #0002;
}
.avatar-zone {
  flex: none;
  width: 64px; height: 64px;
  display: flex; align-items: center; justify-content: center;
}
.avatar-doctor {
  width: 60px; height: 60px;
  border-radius: 16px;
  object-fit: cover;
  border: 2px solid #e5e7eb;
  background: #fafaff;
}
.info-zone {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 3px;
}
.doctor-name {
  font-size: 1.18em;
  font-weight: 600;
  color: #222;
}
.doctor-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 18px;
  font-size: 0.98em;
  color: #6d7892;
  margin-top: 2px;
  align-items: center;
}
.special {
  color: #3887f6;
  font-weight: 500;
}
.doctor-schedule-mini {
  margin-top: 7px;
  font-size: 0.97em;
  color: #4867ae;
  background: #f4f8ff;
  border-radius: 6px;
  padding: 6px 13px 6px 13px;
  display: inline-block;
  box-shadow: 0 1px 3px #e8edfa;
}
.doctor-schedule-mini ul {
  margin: 4px 0 0 0;
  padding-left: 18px;
}
.doctor-schedule-mini li {
  margin-bottom: 1px;
  list-style: disc;
}
.status-zone {
  min-width: 78px;
  text-align: center;
  font-size: 1.12em;
  font-weight: 600;
}
.doc-status.active {
  color: #21c400;
}
.doc-status.inactive {
  color: #f54040;
}
.actions-zone {
  display: flex;
  flex-direction: column;
  gap: 8px;
  min-width: 120px;
  align-items: flex-end;
}
.btn-main {
  padding: 6px 18px;
  background: #2196f3;
  color: #fff;
  border-radius: 8px;
  font-weight: 500;
  text-decoration: none;
  font-size: 0.97em;
  margin-bottom: 3px;
  transition: background 0.2s;
}
.btn-main:hover {
  background: #1767a2;
}
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\edit_doctor.html ===
{% extends 'base.html' %}
{% block title %}–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞{% endblock %}
{% block content %}
<div style="max-width:440px; margin:0 auto; background:#fff; border-radius:20px; box-shadow:0 6px 32px rgba(20,40,80,.08); padding:38px 42px;">
    <h2 style="font-size:1.5rem; font-weight:700; margin-bottom:28px;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞</h2>
    <form method="POST">
        <label style="font-weight:600; margin-bottom:5px;">–§–ò–û</label>
        <input name="full_name" type="text" required value="{{ doctor.full_name }}" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px;">
        <label style="font-weight:600; margin-bottom:5px;">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</label>
        <input name="specialization" type="text" value="{{ doctor.specialization }}" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px;">
        <label style="font-weight:600; margin-bottom:5px;">E-mail</label>
        <input name="email" type="email" value="{{ doctor.email }}" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px;">
        <label style="font-weight:600; margin-bottom:5px;">–¢–µ–ª–µ—Ñ–æ–Ω</label>
        <input name="phone" type="text" value="{{ doctor.phone }}" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:18px;">
        <label style="font-weight:600; margin-bottom:5px;">–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä</label>
        <input name="avatar_url" type="text" value="{{ doctor.avatar_url }}" style="width:100%; padding:10px; border-radius:8px; border:1px solid #ccd; margin-bottom:22px;">
        <button type="submit" style="background:#445be2; color:#fff; border:none; border-radius:10px; padding:12px 28px; font-weight:700; font-size:1.07rem; cursor:pointer;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </form>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\edit_event.html ===
{% extends "base.html" %}
{% block content %}
<div class="card" style="padding:20px;max-width:720px;margin:0 auto;">
  <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å</h2>
  <form method="post">
    <label>–í—Ä–∞—á</label>
    <select name="doctor_id" required>
      {% for d in doctors %}
        <option value="{{ d._id }}" {% if event.doctor_id == d._id %}selected{% endif %}>{{ d.full_name }}</option>
      {% endfor %}
    </select>

    <label>–ü–∞—Ü–∏–µ–Ω—Ç</label>
    <select name="patient_id" required>
      {% for p in patients %}
        <option value="{{ p._id }}" {% if event.patient_id == p._id %}selected{% endif %}>{{ p.full_name }}</option>
      {% endfor %}
    </select>

    <label>–ö–∞–±–∏–Ω–µ—Ç</label>
    <select name="cabinet" required>
      {% for name in cabinets %}
        <option value="{{ name }}" {% if current_room_name == name %}selected{% endif %}>{{ name }}</option>
      {% endfor %}
    </select>

    <label>–£—Å–ª—É–≥–∞</label>
    <select name="service_id">
      <option value="">–ë–µ–∑ —É—Å–ª—É–≥–∏</option>
      {% for s in services %}
        <option value="{{ s._id }}" {% if event.service_id == s._id %}selected{% endif %}>
          {{ s.name }} ({{ s.duration_min }} –º–∏–Ω)
        </option>
      {% endfor %}
    </select>

    <label>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</label>
    <input type="datetime-local" name="datetime" value="{{ start_local }}" required>

    <label>–°—Ç–∞—Ç—É—Å</label>
    <select name="status_key">
      <option value="scheduled"  {% if event.status_key=='scheduled' %}selected{% endif %}>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</option>
      <option value="checked_in" {% if event.status_key=='checked_in' %}selected{% endif %}>–ü—Ä–∏—à—ë–ª</option>
      <option value="done"       {% if event.status_key=='done' %}selected{% endif %}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
      <option value="canceled"   {% if event.status_key=='canceled' %}selected{% endif %}>–û—Ç–º–µ–Ω–µ–Ω–æ</option>
    </select>

    <label>–°—É–º–º–∞</label>
    <input type="number" name="sum" value="{{ event.sum or 0 }}">

    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
    <textarea name="comment" rows="3">{{ event.comment or '' }}</textarea>

    <div style="margin-top:16px;">
      <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <a href="{{ url_for('calendar_view') }}" class="btn">–û—Ç–º–µ–Ω–∞</a>
    </div>
  </form>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\edit_patient.html ===
{% extends "base.html" %}
{% block content %}
<h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:860px;">
  <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
    <label>–§–ò–û
      <input type="text" name="full_name" value="{{ item.full_name }}" required>
    </label>
    <label>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
      <input type="date" name="birthday" value="{{ item.birthday.strftime('%Y-%m-%d') if item.birthday else '' }}">
    </label>

    <label>–ü–æ–ª
      <select name="gender">
        <option value="male"   {% if item.gender=='male' %}selected{% endif %}>–ú—É–∂—Å–∫–æ–π</option>
        <option value="female" {% if item.gender=='female' %}selected{% endif %}>–ñ–µ–Ω—Å–∫–∏–π</option>
        <option value="other"  {% if item.gender=='other' %}selected{% endif %}>–î—Ä—É–≥–æ–µ</option>
      </select>
    </label>
    <label>–ê–≤–∞—Ç–∞—Ä (–ø—É—Ç—å)
      <input type="text" name="avatar" value="{{ item.avatar or '' }}" placeholder="/static/avatars/patients/p1.jpg">
    </label>

    <label>–¢–µ–ª–µ—Ñ–æ–Ω
      <input type="text" name="phone" value="{{ item.contacts.phone }}">
    </label>
    <label>Email
      <input type="email" name="email" value="{{ item.contacts.email }}">
    </label>

    <label>WhatsApp
      <input type="text" name="whatsapp" value="{{ item.contacts.whatsapp }}">
    </label>
    <label>Telegram
      <input type="text" name="telegram" value="{{ item.contacts.telegram }}">
    </label>

    <label>–ì–æ—Ä–æ–¥
      <input type="text" name="city" value="{{ item.address.city }}">
    </label>
    <label>–£–ª–∏—Ü–∞/–¥–æ–º
      <input type="text" name="street" value="{{ item.address.street }}">
    </label>
    <label>–ò–Ω–¥–µ–∫—Å
      <input type="text" name="zip" value="{{ item.address.zip }}">
    </label>

    <label style="grid-column:1/-1;">–ó–∞–º–µ—Ç–∫–∏
      <textarea name="notes" rows="4">{{ item.notes or '' }}</textarea>
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('patients_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\edit_room.html ===
{% extends "base.html" %}
{% block content %}
<h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:720px;">
  <div style="display:grid;grid-template-columns:1fr 1fr;gap:12px;">
    <label>–ù–∞–∑–≤–∞–Ω–∏–µ
      <input type="text" name="name" value="{{ item.name }}" required>
    </label>

    <label>–¢–∏–ø
      <select name="type" required>
        {% for v,t in ROOM_TYPES %}
          <option value="{{ v }}" {% if item.type==v %}selected{% endif %}>{{ t }}</option>
        {% endfor %}
      </select>
    </label>

    <label>–°—Ç–∞—Ç—É—Å
      <select name="status" required>
        {% for v,t in ROOM_STATUSES %}
          <option value="{{ v }}" {% if item.status==v %}selected{% endif %}>{{ t }}</option>
        {% endfor %}
      </select>
    </label>

    <label>–¶–≤–µ—Ç
      <input type="color" name="color" value="{{ item.color or '#1abc9c' }}" style="height:42px;">
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('rooms_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\edit_service.html ===
{% extends "base.html" %}
{% block content %}
<h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É</h2>

<form method="post" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;max-width:720px;">
  <div style="display:grid;grid-template-columns:1fr 180px;gap:12px;">
    <label>–ù–∞–∑–≤–∞–Ω–∏–µ
      <input type="text" name="name" value="{{ item.name }}" required>
    </label>
    <label>–ö–æ–¥
      <input type="text" name="code" value="{{ item.code }}" required>
    </label>

    <label>–¶–µ–Ω–∞, ‚ÇΩ
      <input type="number" name="price" value="{{ item.price }}" min="0" step="1">
    </label>
    <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
      <input type="number" name="duration_min" value="{{ item.duration_min }}" min="5" step="5">
    </label>

    <label>–¶–≤–µ—Ç
      <input type="color" name="color" value="{{ item.color or '#3498db' }}" style="height:42px;">
    </label>
    <label style="display:flex;align-items:center;gap:8px;margin-top:26px;">
      <input type="checkbox" name="is_active" {% if item.is_active %}checked{% endif %}> –ê–∫—Ç–∏–≤–Ω–∞
    </label>

    <label style="grid-column:1/-1;">–û–ø–∏—Å–∞–Ω–∏–µ
      <textarea name="description" rows="4">{{ item.description or '' }}</textarea>
    </label>
  </div>

  <div style="margin-top:14px;display:flex;gap:10px;">
    <button type="submit" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <a href="{{ url_for('services_list') }}">–û—Ç–º–µ–Ω–∞</a>
  </div>
</form>
{% endblock %}

=== D:\Projects\medplatforma\templates\expenses.html ===
{% extends 'base.html' %}
{% block title %}–£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤{% endblock %}
{% block content %}
<div style="max-width:900px;margin:0 auto;background:#fff;border-radius:20px;box-shadow:0 6px 32px rgba(20,40,80,.08);padding:38px;">
    <h2>–£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤</h2>
    <div><b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> <span style="color:#25c045">{{ total_income|round(2) }} ‚ÇΩ</span></div>
    <div><b>–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</b> <span style="color:red;">{{ total_expenses|round(2) }} ‚ÇΩ</span></div>
    <div><b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> <span style="color:{{ 'green' if profit >= 0 else 'red' }};font-weight:700;">{{ profit|round(2) }} ‚ÇΩ</span></div>
    <hr style="margin:24px 0;">
    <table style="width:100%;">
        <tr>
            <th>–î–∞—Ç–∞</th>
            <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
            <th>–°—É–º–º–∞</th>
            <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
        </tr>
        {% for e in expenses %}
        <tr>
            <td>{{ e.date }}</td>
            <td>{{ e.category }}</td>
            <td>{{ e.amount|round(2) }} ‚ÇΩ</td>
            <td>{{ e.comment }}</td>
        </tr>
        {% endfor %}
    </table>
    <a href="/add_expense" style="margin-top:24px;display:inline-block;background:#445be2;color:#fff;padding:9px 18px;border-radius:8px;font-weight:700;">–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</a>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\finance_report.html ===
{% extends "base.html" %}
{% block content %}

<div class="finance-dashboard">

  <!-- --- –ö–∞—Ä—Ç–æ—á–∫–∏-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã --- -->
  <div class="finance-indicators-row">
    <div class="finance-card income">
      <div class="finance-label">–î–æ—Ö–æ–¥—ã</div>
      <div class="finance-value">{{ summary.income | int }} ‚ÇΩ</div>
      <div class="finance-detail">–∑–∞ {{ summary.month_name }}</div>
    </div>
    <div class="finance-card expense">
      <div class="finance-label">–†–∞—Å—Ö–æ–¥—ã</div>
      <div class="finance-value">{{ summary.expenses | int }} ‚ÇΩ</div>
      <div class="finance-detail">–∑–∞ {{ summary.month_name }}</div>
    </div>
    <div class="finance-card deposit">
      <div class="finance-label">–î–æ–ª–∂–Ω–∏–∫–∏ / –î–µ–ø–æ–∑–∏—Ç—ã</div>
      <div class="finance-value">{{ summary.debtors_count }} —á–µ–ª / {{ summary.debtors_sum | int }} ‚ÇΩ</div>
      <div class="finance-detail">–Ω–∞ —Å–µ–≥–æ–¥–Ω—è</div>
    </div>
    <div class="finance-card avg">
      <div class="finance-label">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫</div>
      <div class="finance-value">{{ summary.avg_check | int }} ‚ÇΩ</div>
      <div class="finance-detail">–ø–æ {{ summary.month_name }}</div>
    </div>
    <div class="finance-export">
      <a href="/export_excel" class="btn btn-success">–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel</a>
      <a href="/export_csv" class="btn btn-outline-primary">CSV</a>
      <button class="btn btn-outline-secondary" disabled style="opacity:0.7;">PDF (—Å–∫–æ—Ä–æ)</button>
    </div>
  </div>

  <!-- --- –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É (–º–æ–∂–Ω–æ –ø–æ–∑–∂–µ —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º) --- -->
  <div class="finance-period-controls">
    <select class="filter-select" style="font-size:1.09em;">
      <option>–ú–µ—Å—è—Ü</option>
      <option>–ö–≤–∞—Ä—Ç–∞–ª</option>
      <option>–ì–æ–¥</option>
    </select>
  </div>

  <!-- --- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ --- -->
  <div class="finance-graph-card">
    <canvas id="financeChart" height="110"></canvas>
  </div>

  <!-- --- –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ --- -->
  <div class="finance-summary-row">
    <div>–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{{ summary.operations_count }}</b></div>
    <div>–û–ø–ª–∞—á–µ–Ω–æ: <b>{{ summary.paid_count }}</b></div>
    <div>–ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç: <b>{{ summary.paid_percent }}%</b></div>
    <div>–¢–æ–ø –≤—Ä–∞—á: <b>{{ summary.top_doctor }}</b></div>
    <div>–¢–æ–ø —É—Å–ª—É–≥–∞: <b>{{ summary.top_service }}</b></div>
  </div>

  <!-- --- –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã --- -->
  <form method="get" class="finance-table-filters">
    <input type="text" name="search" placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É, –≤—Ä–∞—á—É, —É—Å–ª—É–≥–µ..." value="{{ request.args.get('search','') }}">
    <select name="type" class="filter-select">
      <option value="">–¢–∏–ø</option>
      <option value="–î–æ—Ö–æ–¥">–î–æ—Ö–æ–¥</option>
      <option value="–†–∞—Å—Ö–æ–¥">–†–∞—Å—Ö–æ–¥</option>
    </select>
    <select name="status" class="filter-select">
      <option value="">–°—Ç–∞—Ç—É—Å</option>
      <option value="–Ω–æ–≤—ã–π">–ù–æ–≤—ã–π</option>
      <option value="–æ–ø–ª–∞—á–µ–Ω">–û–ø–ª–∞—á–µ–Ω</option>
      <option value="–æ—Ç–º–µ–Ω—ë–Ω">–û—Ç–º–µ–Ω—ë–Ω</option>
      <option value="–¥–µ–ø–æ–∑–∏—Ç">–î–µ–ø–æ–∑–∏—Ç</option>
    </select>
    <button class="btn btn-outline-primary" type="submit">–§–∏–ª—å—Ç—Ä</button>
  </form>

  <!-- --- –¢–∞–±–ª–∏—Ü–∞ –æ–ø–µ—Ä–∞—Ü–∏–π --- -->
  <div class="finance-table-card">
    <table class="finance-table">
      <thead>
        <tr>
          <th>–î–∞—Ç–∞</th>
          <th>–í—Ä–∞—á</th>
          <th>–ü–∞—Ü–∏–µ–Ω—Ç</th>
          <th>–£—Å–ª—É–≥–∞</th>
          <th>–¢–∏–ø</th>
          <th>–°—É–º–º–∞</th>
          <th>–°—Ç–∞—Ç—É—Å</th>
          <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
        </tr>
      </thead>
      <tbody>
        {% for op in operations %}
        <tr>
          <td>{{ op.date }}</td>
          <td>
            <img src="{{ op.doctor_avatar_url or '/static/avatars/doctor.png' }}" class="mini-avatar"> {{ op.doctor }}
          </td>
          <td>
            <img src="{{ op.patient_avatar_url or '/static/avatars/patient.png' }}" class="mini-avatar"> {{ op.patient }}
          </td>
          <td>{{ op.service }}</td>
          <td>
            <span class="badge badge-{{ 'income' if op.type == '–î–æ—Ö–æ–¥' else 'expense' }}">{{ op.type }}</span>
          </td>
          <td style="color:{{ '#24bb2a' if op.type == '–î–æ—Ö–æ–¥' else '#e24343' }};"><b>{{ op.amount }} ‚ÇΩ</b></td>
          <td>
            <span class="badge badge-status badge-{{ op.status|lower }}">{{ op.status }}</span>
          </td>
          <td>{{ op.comment }}</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>
  </div>

</div>

<!-- --- Chart.js --- -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  var ctx = document.getElementById('financeChart').getContext('2d');
  var data = {{ chart_data | safe }};
  new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
      responsive: true,
      plugins: { legend: { display: true } },
      scales: { y: { beginAtZero: false } }
    }
  });
});
</script>

<style>
.finance-dashboard { padding: 20px 0; }
.finance-indicators-row {
  display: flex; flex-wrap: wrap; gap: 24px; align-items: flex-start;
  margin-bottom: 28px;
}
.finance-card {
  background: #fff;
  border-radius: 19px;
  box-shadow: 0 2px 22px #e3eaf93a;
  padding: 30px 38px 23px 32px;
  min-width: 220px;
  max-width: 270px;
  flex: 1;
  margin: 0 10px 0 0;
  display: flex; flex-direction: column; align-items: flex-start;
}
.finance-card.income { border-left: 6px solid #2ce148;}
.finance-card.expense { border-left: 6px solid #f6494c;}
.finance-card.deposit { border-left: 6px solid #2176bd;}
.finance-card.avg { border-left: 6px solid #ffbb23;}
.finance-label { color: #b3b8c3; font-size: 1em; font-weight: 600; margin-bottom: 8px;}
.finance-value { font-size: 2.12em; font-weight: 900; color: #233a59; letter-spacing: 1px; }
.finance-detail { font-size: 1.03em; color: #6d7892; margin-top: 7px; }
.finance-export {
  display: flex; flex-direction: column; gap: 8px; margin-left: 24px; align-items: flex-end; justify-content: center;
}
.finance-export .btn { min-width: 170px; }
.finance-graph-card {
  margin: 16px auto 0 auto;
  padding: 12px 12px 18px 12px;
  background: #fff;
  border-radius: 18px;
  max-width: 880px;
  min-width: 350px;
  box-shadow: 0 2px 20px #e8eef95c;
}
.finance-summary-row {
  display: flex;
  gap: 36px;
  padding: 18px 0 14px 4px;
  font-size: 1.09em;
  color: #7d8899;
  font-weight: 600;
}
.finance-period-controls {
  margin: 18px 0 12px 0;
  display: flex; justify-content: flex-end; align-items: center;
}
.finance-table-filters {
  display: flex; gap: 16px; margin-bottom: 14px; align-items: center;
}
.finance-table-card {
  background: #fff; border-radius: 18px;
  box-shadow: 0 2px 22px #e3eaf92a;
  padding: 22px 10px;
  margin-top: 18px;
}
.finance-table {
  width: 100%; border-collapse: separate; border-spacing: 0;
  font-size: 1.13em;
}
.finance-table th, .finance-table td { padding: 12px 10px; text-align: left; vertical-align: middle;}
.finance-table thead th { background: #f6fbff; position: sticky; top: 0; z-index: 1;}
.finance-table tbody tr { border-bottom: 1px solid #f2f6fd; transition: background .13s; }
.finance-table tbody tr:hover { background: #f3faff; }
.badge {
  display: inline-block; font-weight: 600;
  font-size: .99em; padding: 5px 15px; border-radius: 7px;
}
.badge-income { background: #c9ffe6; color: #1aa957; }
.badge-expense { background: #ffe1e1; color: #e64a4a; }
.badge-status { margin-left: 0; }
.badge-–Ω–æ–≤—ã–π    { background: #fff7d6; color: #b49a25;}
.badge-–æ–ø–ª–∞—á–µ–Ω  { background: #dafbe5; color: #18954e;}
.badge-–æ—Ç–º–µ–Ω—ë–Ω  { background: #ffdbdb; color: #e24343;}
.badge-–¥–µ–ø–æ–∑–∏—Ç  { background: #e7f2fd; color: #2176bd;}
.mini-avatar {
  width: 28px; height: 28px;
  border-radius: 50%; object-fit: cover; margin-right: 7px;
  background: #f7fafd; box-shadow: 0 1px 6px #e3eaf9;
  vertical-align: middle;
}
@media (max-width: 1080px) {
  .finance-indicators-row { flex-direction: column; gap: 12px; }
  .finance-card { max-width: 100%; min-width: 140px; }
}
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\import_doctors.html ===
{% extends 'base.html' %}
{% block content %}
{% if preview_data %}
  <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö</h3>
  <form method="post" action="{{ url_for('import_doctors_confirm') }}">
    <input type="hidden" name="csv_data" value="{{ request.files['file'].stream.read().decode('utf-8-sig') | tojson }}">
    <table border="1" cellpadding="3">
      <tr>
        <th>–§–ò–û</th>
        <th>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</th>
        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
        <th>Email</th>
        <th>–°—Ç–∞—Ç—É—Å</th>
        <th>–û—à–∏–±–∫–∏</th>
      </tr>
      {% for item in preview_data %}
        <tr {% if item.errors %} style="background:#ffb3b3"{% endif %}>
          <td>{{ item.row.full_name }}</td>
          <td>{{ item.row.specialization }}</td>
          <td>{{ item.row.phone }}</td>
          <td>{{ item.row.email }}</td>
          <td>{{ item.row.status }}</td>
          <td>
            {% if item.errors %}
              <span style="color:red">{{ item.errors|join(', ') }}</span>
            {% else %}
              -
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </table>
    {% if show_confirm %}
      <button type="submit">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç</button>
    {% endif %}
  </form>
{% endif %}
<h2>–ò–º–ø–æ—Ä—Ç –≤—Ä–∞—á–µ–π –∏–∑ Excel (CSV)</h2>
<form method="post" enctype="multipart/form-data" style="margin:32px 0;">
    <input type="file" name="file" accept=".csv" required>
    <button class="btn btn-success" type="submit">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
</form>
<div style="margin-top:18px;">
    <b>–§–æ—Ä–º–∞—Ç CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π):</b><br>
    full_name;specialization;phone;email;status
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\import_patients.html ===
<h2>–ò–º–ø–æ—Ä—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤</h2>

<a href="{{ url_for('import_template_patients') }}" class="btn" style="margin-bottom:15px;display:inline-block;">
  –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
</a>

<form method="post" enctype="multipart/form-data" style="margin-top:10px;">
    <label for="file">–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª:</label>
    <input type="file" name="file" id="file" required>
    <button type="submit">–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
</form>

{% if preview_data %}
  <h3>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö</h3>
  <form method="post" action="{{ url_for('import_patients_confirm') }}">
    <input type="hidden" name="csv_data" value="{{ request.files['file'].stream.read().decode('utf-8-sig') | tojson }}">
    <table border="1" cellpadding="3">
      <tr>
        <th>–§–ò–û</th>
        <th>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
        <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
        <th>Email</th>
        <th>–î–æ–ª–≥</th>
        <th>–î–µ–ø–æ–∑–∏—Ç</th>
        <th>–û—à–∏–±–∫–∏</th>
      </tr>
      {% for item in preview_data %}
        <tr {% if item.errors %} style="background:#ffb3b3"{% endif %}>
          <td>{{ item.row.full_name }}</td>
          <td>{{ item.row.dob }}</td>
          <td>{{ item.row.phone }}</td>
          <td>{{ item.row.email }}</td>
          <td>{{ item.row.debt }}</td>
          <td>{{ item.row.deposit }}</td>
          <td>
            {% if item.errors %}
              <span style="color:red">{{ item.errors|join(', ') }}</span>
            {% else %}
              -
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </table>
    {% if show_confirm %}
      <button type="submit">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç</button>
    {% endif %}
  </form>
{% endif %}

{% if message %}
  <div class="alert">{{ message }}</div>
{% endif %}

<p>
  <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫. <br>
  –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è: <br>
  <code>full_name, dob, phone, passport, email, referral, debt, deposit, partner_points</code>
</p>

=== D:\Projects\medplatforma\templates\journal.html ===
{% extends "base.html" %}
{% block content %}
<h2>–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π</h2>
<div class="card shadow p-4" style="max-width:1100px;margin:0 auto;">
  <table class="table action-table" style="width:100%;">
    <thead>
      <tr>
        <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
        <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
        <th>–†–æ–ª—å</th>
        <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
        <th>–û–±—ä–µ–∫—Ç</th>
        <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
      </tr>
    </thead>
    <tbody>
      {% for log in logs %}
      <tr>
        <td>{{ log.time }}</td>
        <td>
          <img src="{{ log.avatar_url }}" class="mini-avatar" style="width:28px;height:28px;border-radius:50%;margin-right:7px;">
          {{ log.user }}
        </td>
        <td>{{ log.role }}</td>
        <td>
          <span class="badge badge-info">{{ log.action_type }}</span>
        </td>
        <td>{{ log.target }}</td>
        <td>{{ log.comment or '' }}</td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\login.html ===
{% extends 'base.html' %}
{% block title %}–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É{% endblock %}
{% block content %}
<div style="max-width:400px; margin:60px auto; background:#fff; border-radius:20px; box-shadow:0 4px 24px rgba(20,40,80,.11); padding:36px 32px;">
    <h2 style="font-size:1.6rem; font-weight:700; margin-bottom:24px;">–í—Ö–æ–¥ –≤ Medplatforma</h2>
    <form method="POST">
        <label style="font-weight:600;">E-mail</label>
        <input name="email" type="text" required style="width:100%; padding:11px; border-radius:8px; border:1px solid #ccd; margin-bottom:20px;">
        <label style="font-weight:600;">–ü–∞—Ä–æ–ª—å</label>
        <input name="password" type="password">
        <button type="submit" style="background:#445be2; color:#fff; border:none; border-radius:10px; padding:11px 28px; font-weight:700; font-size:1.08rem; cursor:pointer;">–í–æ–π—Ç–∏</button>
    </form>
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            {% for category, message in messages %}
                <div style="color:#d91f3c; margin-top:18px;">{{ message }}</div>
            {% endfor %}
        {% endif %}
    {% endwith %}
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\logs.html ===
{% extends "base.html" %}
{% block content %}

<div class="journal-header" style="display:flex;justify-content:space-between;align-items:center;">
  <h2>–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π</h2>
  <a href="{{ url_for('export_logs', **request.args) }}" class="btn btn-outline-primary">–í—ã–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–∏–º–æ–µ –≤ CSV</a>
</div>

<form method="get" class="journal-filters" style="display:flex;gap:18px;align-items:center;margin-bottom:18px;">
  <input type="text" name="search" placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—é..." value="{{ request.args.get('search','') }}">
  <select name="role">
    <option value="">–í—Å–µ —Ä–æ–ª–∏</option>
    {% for r in roles %}
      <option value="{{ r }}" {% if r == selected_role %}selected{% endif %}>{{ r }}</option>
    {% endfor %}
  </select>
  <input type="date" name="start_date" value="{{ start_date }}">
  <input type="date" name="end_date" value="{{ end_date }}">
  <button type="submit" class="btn btn-outline-primary">–§–∏–ª—å—Ç—Ä</button>
</form>

<div style="overflow-x:auto;">
<table class="journal-table" style="width:100%;background:#fff;border-radius:18px;box-shadow:0 2px 22px #e3eaf92a;">
  <thead>
    <tr>
      <th>–î–∞—Ç–∞/–í—Ä–µ–º—è</th>
      <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
      <th>–†–æ–ª—å</th>
      <th>IP</th>
      <th>–î–µ–π—Å—Ç–≤–∏–µ</th>
      <th>–û–±—ä–µ–∫—Ç</th>
      <th>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</th>
    </tr>
  </thead>
  <tbody>
    {% for log in logs %}
      <tr>
        <td>{{ log.datetime or "" }}</td>
        <td>
          {% if log.avatar_url %}
            <img src="{{ log.avatar_url }}" style="width:28px;height:28px;border-radius:50%;margin-right:5px;vertical-align:middle;">
          {% endif %}
          {{ log.user or "" }}
        </td>
        <td>{{ log.role or "" }}</td>
        <td style="color:#788;">{{ log.ip or "" }}</td>
        <td>{{ log.action or "" }}</td>
        <td>{{ log.object or "" }}</td>
        <td style="max-width:240px;white-space:normal;">{{ log.comment or "" }}</td>
      </tr>
    {% else %}
      <tr><td colspan="7" style="color:#aaa;text-align:center;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</td></tr>
    {% endfor %}
  </tbody>
</table>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\messages.html ===
{% extends "base.html" %}
{% block content %}
<div class="chat-container">
  <div class="chat-sidebar">
    <div class="chat-sidebar-title">–ß–∞—Ç—ã</div>
    {% for chat in chats %}
      <div class="chat-sidebar-row {% if loop.first %}active{% endif %}">
        <img src="{{ chat.avatar or '/static/avatars/demo-user.png' }}" class="chat-avatar">
        <div class="chat-info">
          <div class="chat-title">{{ chat.title or chat.participants|join(', ') }}</div>
          <div class="chat-last">
            <span style="color:#8697b6;">
              {{ chat.messages[-1].sender }}:
              {{ chat.messages[-1].text[:26] }}{% if chat.messages[-1].text|length > 26 %}...{% endif %}
            </span>
            {% if not chat.messages[-1].read %}
              <span class="chat-badge">NEW</span>
            {% endif %}
          </div>
        </div>
        <div class="chat-time">{{ chat.messages[-1].timestamp[-5:] }}</div>
      </div>
    {% endfor %}
  </div>
  <div class="chat-main">
    <div class="chat-header">
      <img src="{{ chats[0].avatar or '/static/avatars/demo-user.png' }}" class="chat-header-avatar">
      <div>
        <div class="chat-header-title">{{ chats[0].title or chats[0].participants|join(', ') }}</div>
        <div class="chat-header-members">–£—á–∞—Å—Ç–Ω–∏–∫–∏: {{ chats[0].participants|join(', ') }}</div>
      </div>
    </div>
    <div class="chat-messages" id="chat-messages">
      {% for msg in chats[0].messages %}
        <div class="msg-bubble {% if msg.sender == user_name %}own{% endif %}">
          <img src="{{ msg.avatar or '/static/avatars/demo-user.png' }}" class="msg-avatar">
          <div class="msg-body">
            <div class="msg-meta">
              <span class="msg-author">{{ msg.sender }}</span>
              <span class="msg-role">{{ msg.role }}</span>
              <span class="msg-time">{{ msg.timestamp[-5:] }}</span>
            </div>
            <div class="msg-text">{{ msg.text }}</div>
          </div>
        </div>
      {% endfor %}
    </div>
    <form id="send-form" class="chat-input-wrap" onsubmit="return false;">
      <input type="text" class="chat-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." autocomplete="off" disabled>
      <button class="btn-send" disabled><i class="fa fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
    <div class="chat-demo-note">* –î–µ–º–æ: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</div>
  </div>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\partners.html ===
{% extends "base.html" %}
{% block content %}
<div class="partners-wrap">
  <h2 class="partners-title">–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h2>
  <div class="partners-table-zone">
    <table class="partners-table">
      <thead>
        <tr>
          <th>–ü–∞—Ü–∏–µ–Ω—Ç</th>
          <th>–ü—Ä–∏–≥–ª–∞—Å–∏–ª</th>
          <th>–†–µ—Ñ–µ—Ä–∞–ª—ã</th>
        </tr>
      </thead>
      <tbody>
      {% for patient in patients %}
        <tr>
          <!-- –ü–∞—Ü–∏–µ–Ω—Ç (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ) -->
          <td>
            <a href="{{ url_for('patient_card', id=patient._id) }}" class="partner-link">
              <img src="{{ patient.avatar_url }}" class="mini-avatar avatar-shadow">
              <span>{{ patient.full_name }}</span>
            </a>
          </td>
          <!-- –ü—Ä–∏–≥–ª–∞—Å–∏–ª -->
          <td>
            {# –ù–∞–π–¥—ë–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è –ø–æ patients_map #}
            {% set inviter = patient.invited_by and patients_map.get(patient.invited_by|string) %}
            {% if inviter %}
              <a href="{{ url_for('patient_card', id=inviter._id) }}" class="partner-link" style="color:#3797bc;">
                <img src="{{ inviter.avatar_url }}" class="mini-avatar avatar-shadow">
                <span>{{ inviter.full_name }}</span>
              </a>
            {% else %}
              <span class="badge-none">‚Äî –Ω–µ—Ç</span>
            {% endif %}
          </td>
          <!-- –†–µ—Ñ–µ—Ä–∞–ª—ã -->
          <td>
            {% set refs = referrals[patient._id|string] if patient._id|string in referrals else [] %}
            {% if refs and refs|length > 0 %}
              {% for ref in refs %}
                <a href="{{ url_for('patient_card', id=ref._id) }}" class="partner-link" style="color:#2aa44d;">
                  <img src="{{ ref.avatar_url }}" class="mini-avatar avatar-shadow">
                  <span>{{ ref.full_name }}</span>
                </a>
                {% if not loop.last %}<span style="margin:0 5px;color:#b2b6c3;">,</span>{% endif %}
              {% endfor %}
            {% else %}
              <span class="badge-none">‚Äî –Ω–µ—Ç</span>
            {% endif %}
          </td>
        </tr>
      {% endfor %}
      </tbody>
    </table>
  </div>
</div>

<style>
.partners-wrap {
  display: flex; flex-direction: column; align-items: center; padding-top: 36px;
}
.partners-title {
  text-align: center;
  font-size: 2.45em;
  font-weight: 800;
  margin-bottom: 32px;
  color: #233a59;
  letter-spacing: 0.04em;
}
.partners-table-zone {
  background: #fff;
  border-radius: 28px;
  box-shadow: 0 6px 38px #cde7fa26;
  padding: 26px 30px 26px 30px;
  min-width: 720px;
  max-width: 980px;
}
.partners-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  font-size: 1.17em;
}
.partners-table thead tr {
  background: #f6fbff;
}
.partners-table th, .partners-table td {
  padding: 15px 14px;
  text-align: left;
  vertical-align: middle;
}
.partners-table tbody tr {
  border-bottom: 1px solid #f0f3fa;
  transition: background 0.12s;
}
.partners-table tbody tr:hover {
  background: #f4faff;
}
.partner-link {
  display: inline-flex;
  align-items: center;
  gap: 10px;
  text-decoration: none;
  color: #2465c3;
  font-weight: 600;
  font-size: 1em;
  transition: color 0.14s;
}
.partner-link:hover {
  color: #183d66;
}
.mini-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  object-fit: cover;
  background: #f7fafd;
}
.avatar-shadow {
  box-shadow: 0 1px 8px #d1e4fa6b;
}
.badge-none {
  background: #f4f7fa;
  color: #c1c8d1;
  border-radius: 8px;
  padding: 5px 17px;
  font-size: .98em;
  font-weight: 600;
  letter-spacing: .01em;
  display: inline-block;
}
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\patient_card.html ===
{% extends "base.html" %} {% block content %}

<h2 style="margin: 8px 0 12px 0">–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞</h2>
<a href="/patients" class="btn" style="margin-bottom: 10px">‚Ü©Ô∏é –ö —Å–ø–∏—Å–∫—É</a>

<div
  style="
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    padding: 12px;
    max-width: 760px;
  "
>
  <form id="f" style="display: grid; grid-template-columns: 1fr 1fr; gap: 12px">
    <label style="grid-column: 1/-1"
      >–§–ò–û
      <input
        type="text"
        id="full_name"
        class="filter-input"
        required
        style="width: 100%"
      />
    </label>

    <label
      >–¢–µ–ª–µ—Ñ–æ–Ω
      <input
        type="tel"
        id="phone"
        class="filter-input"
        placeholder="+79991234567"
      />
    </label>

    <label
      >–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
      <input type="date" id="birth_date" class="filter-input" />
    </label>

    <label
      >‚Ññ –∫–∞—Ä—Ç—ã
      <input
        type="number"
        id="card_no"
        class="filter-input"
        min="1"
        step="1"
        placeholder="–∞–≤—Ç–æ"
      />
    </label>

    <div
      style="
        grid-column: 1/-1;
        display: flex;
        gap: 8px;
        justify-content: flex-end;
        margin-top: 4px;
      "
    >
      <a href="/patients" class="btn">–û—Ç–º–µ–Ω–∞</a>
      <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    </div>
  </form>
</div>

{% endblock %} {% block scripts %}
<script>
  (function () {
    const pid = "{{ pid }}";
    const $ = (s) => document.querySelector(s);
    const f = $("#f");

    async function load() {
      try {
        const r = await fetch(`/api/patients/${pid}`);
        const data = await r.json();
        if (!data.ok) throw new Error(data.error || "error");
        const it = data.item;
        $("#full_name").value = it.full_name || "";
        $("#phone").value = it.phone || "";
        $("#birth_date").value = (it.birthdate || "").toString().slice(0, 10);
        $("#card_no").value = it.card_no ?? "";
      } catch (e) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É");
        location.href = "/patients";
      }
    }

    f.addEventListener("submit", async (ev) => {
      ev.preventDefault();
      const payload = {
        full_name: $("#full_name").value.trim(),
        phone: $("#phone").value.trim(),
        birth_date: $("#birth_date").value || "",
        card_no:
          $("#card_no").value === "" ? null : Number($("#card_no").value),
      };
      try {
        const r = await fetch(`/api/patients/${pid}/update`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });
        const data = await r.json();
        if (!r.ok || !data.ok) {
          alert(data.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
          return;
        }
        alert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ");
        location.href = "/patients";
      } catch {
        alert("–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      }
    });

    load();
  })();
</script>
{% endblock %}

=== D:\Projects\medplatforma\templates\patients.html ===
{% extends "base.html" %} {% block content %}

<h2 style="margin: 8px 0 12px 0">–ü–∞—Ü–∏–µ–Ω—Ç—ã</h2>

<div style="display: flex; gap: 10px; align-items: center; margin-bottom: 10px">
  <input
    id="q"
    type="text"
    placeholder="–ü–æ–∏—Å–∫ (–§–ò–û / —Ç–µ–ª–µ—Ñ–æ–Ω / ‚Ññ–∫–∞—Ä—Ç—ã)"
    style="
      padding: 8px 12px;
      border: 1px solid #dde7f7;
      border-radius: 8px;
      min-width: 260px;
    "
  />
  <button id="btnSearch" class="btn">–ò—Å–∫–∞—Ç—å</button>
  <span style="opacity: 0.6">|</span>
  <a href="/calendar" class="btn">‚Ü©Ô∏é –í –∫–∞–ª–µ–Ω–¥–∞—Ä—å</a>
</div>

<div
  style="
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 1px 8px #e3eaf9b7;
    padding: 10px;
  "
>
  <table style="width: 100%; border-collapse: collapse">
    <thead>
      <tr style="text-align: left; border-bottom: 1px solid #eef2ff">
        <th style="padding: 8px">‚Ññ –∫–∞—Ä—Ç—ã</th>
        <th style="padding: 8px">–§–ò–û</th>
        <th style="padding: 8px">–¢–µ–ª–µ—Ñ–æ–Ω</th>
        <th style="padding: 8px">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</th>
      </tr>
    </thead>
    <tbody id="tblBody">
      <tr>
        <td colspan="4" style="padding: 12px; opacity: 0.6">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td>
      </tr>
    </tbody>
  </table>

  <div
    id="pager"
    style="display: flex; gap: 8px; align-items: center; margin-top: 10px"
  >
    <button id="prev" class="btn">‚Äπ –ù–∞–∑–∞–¥</button>
    <span id="pgInfo" style="opacity: 0.8"></span>
    <button id="next" class="btn">–í–ø–µ—Ä—ë–¥ ‚Ä∫</button>
  </div>
</div>

{% endblock %} {% block scripts %}
<script>
  (function () {
    let page = 1,
      per_page = 50,
      total = 0;

    const $ = (s) => document.querySelector(s);
    const q = $("#q"),
      tbody = $("#tblBody"),
      pgInfo = $("#pgInfo");

    async function load() {
      const url = new URL("/api/patients", location.origin);
      if (q.value.trim()) url.searchParams.set("q", q.value.trim());
      url.searchParams.set("page", page);
      url.searchParams.set("per_page", per_page);

      tbody.innerHTML = `<tr><td colspan="4" style="padding:12px; opacity:.6">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</td></tr>`;
      try {
        const r = await fetch(url);
        const data = await r.json();
        total = data.total || 0;

        if (!data.items || !data.items.length) {
          tbody.innerHTML = `<tr><td colspan="4" style="padding:12px; opacity:.6">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</td></tr>`;
        } else {
          tbody.innerHTML = (data.items || [])
            .map(
              (it) => `
            <tr style="border-top:1px solid #f3f4f6">
              <td style="padding:8px; width:110px">${it.card_no ?? "‚Äî"}</td>
              <td style="padding:8px">
                <a href="/patients/${
                  it.id
                }" style="text-decoration:none; color:#1f6feb">${
                it.full_name || "‚Äî"
              }</a>
              </td>
              <td style="padding:8px">${it.phone || "‚Äî"}</td>
              <td style="padding:8px">${
                (it.birthdate || "").toString().slice(0, 10) || "‚Äî"
              }</td>
            </tr>
          `
            )
            .join("");
        }

        const pages = Math.max(1, Math.ceil(total / per_page));
        pgInfo.textContent = `–°—Ç—Ä. ${page} –∏–∑ ${pages} ‚Ä¢ –≤—Å–µ–≥–æ ${total}`;
        $("#prev").disabled = page <= 1;
        $("#next").disabled = page >= pages;
      } catch (e) {
        tbody.innerHTML = `<tr><td colspan="4" style="padding:12px; color:#991b1b; background:#fee2e2; border:1px solid #fecaca">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>`;
        pgInfo.textContent = "";
      }
    }

    $("#btnSearch").addEventListener("click", () => {
      page = 1;
      load();
    });
    q.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        page = 1;
        load();
      }
    });
    $("#prev").addEventListener("click", () => {
      if (page > 1) {
        page--;
        load();
      }
    });
    $("#next").addEventListener("click", () => {
      page++;
      load();
    });

    load();
  })();
</script>
{% endblock %}

=== D:\Projects\medplatforma\templates\reports.html ===
{% extends 'base.html' %}
{% block title %}–û—Ç—á—ë—Ç—ã{% endblock %}
{% block content %}
<div style="max-width:900px; margin:0 auto; background:#fff; border-radius:24px; box-shadow:0 6px 32px rgba(20,40,80,.08); padding:36px 40px;">
    <h2 style="font-size:2.1rem; font-weight:700; margin-bottom:24px;">–û—Ç—á—ë—Ç—ã</h2>
    <ul>
        <li>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫–ª–∏–Ω–∏–∫–µ</li>
        <li>–û—Ç—á—ë—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º</li>
        <li>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–∏—ë–º–∞–º</li>
        <li>–û—Ç—á—ë—Ç –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º</li>
        <!-- –°–¥–µ–ª–∞–π –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É, –ø–æ –∑–∞–¥–∞—á–µ -->
    </ul>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\roadmap_missing.html ===
{% extends "base.html" %}
{% block content %}
<div style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;">
  <h2 style="margin-top:0">Roadmap –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
  <p>–ü–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª <code>roadmap_clubstom.md</code> –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (—Ä—è–¥–æ–º —Å <code>app.py</code>), –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\roadmap.html ===
{% extends "base.html" %}
{% block content %}
<div style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;">
  <div style="display:flex;align-items:center;gap:12px;margin-bottom:10px;">
    <h2 style="margin:0;flex:1;">ClubStom ‚Äî Roadmap</h2>
    <a href="{{ url_for('roadmap_view') }}" class="btn-main" style="text-decoration:none;background:#1976d2;color:#fff;border-radius:8px;padding:8px 14px;">–û–±–Ω–æ–≤–∏—Ç—å</a>
  </div>
  <div id="roadmap-body">
    {{ content|safe }}
  </div>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\rooms.html ===
{% extends "base.html" %}
{% block content %}

<div class="card" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;">
  <div style="display:flex;gap:12px;align-items:center;justify-content:space-between;flex-wrap:wrap;">
    <h2 style="margin:0;">–ö–∞–±–∏–Ω–µ—Ç—ã</h2>
    <a href="{{ url_for('add_room') }}" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;text-decoration:none;">–î–æ–±–∞–≤–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç</a>
  </div>

  <div style="overflow:auto;margin-top:12px;">
    <table style="width:100%;border-collapse:collapse;">
      <thead>
        <tr style="background:#f6f9ff;">
          <th style="text-align:left;padding:10px;border-bottom:1px solid #eef2fb;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
          <th style="text-align:left;padding:10px;border-bottom:1px solid #eef2fb;">–¢–∏–ø</th>
          <th style="text-align:center;padding:10px;border-bottom:1px solid #eef2fb;">–°—Ç–∞—Ç—É—Å</th>
          <th style="text-align:center;padding:10px;border-bottom:1px solid #eef2fb;">–¶–≤–µ—Ç</th>
          <th style="width:180px;padding:10px;border-bottom:1px solid #eef2fb;">–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        {% for r in items %}
        <tr>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;">{{ r.name }}</td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;">{{ r.type }}</td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:center;">
            {% set st_title = status_title.get(r.status, r.status) %}
            {% if r.status == 'available' %}<span style="color:#27ae60;" title="{{ st_title }}">{{ st_title }}</span>
            {% elif r.status == 'occupied' %}<span style="color:#e67e22;" title="{{ st_title }}">{{ st_title }}</span>
            {% else %}<span style="color:#c0392b;" title="{{ st_title }}">{{ st_title }}</span>
            {% endif %}
          </td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:center;">
            <span style="display:inline-block;width:22px;height:22px;border-radius:6px;border:1px solid #e3eaf9;background:{{ r.color }}"></span>
          </td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;">
            <a href="{{ url_for('edit_room', id=r._id) }}" style="margin-right:8px;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
            <form action="{{ url_for('delete_room', id=r._id) }}" method="post" style="display:inline;" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç ¬´{{ r.name }}¬ª?');">
              <button type="submit" style="color:#c0392b;background:#fff;border:1px solid #f1d6d6;border-radius:6px;padding:4px 8px;">–£–¥–∞–ª–∏—Ç—å</button>
            </form>
          </td>
        </tr>
        {% else %}
        <tr><td colspan="5" style="padding:18px;text-align:center;color:#8592a6;">–ö–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</td></tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
</div>

{% endblock %}

=== D:\Projects\medplatforma\templates\services.html ===
{% extends "base.html" %}
{% block content %}

<div class="card" style="background:#fff;border-radius:12px;box-shadow:0 1px 8px #e3eaf9b7;padding:16px;">
  <div style="display:flex;gap:12px;align-items:center;justify-content:space-between;flex-wrap:wrap;">
    <h2 style="margin:0;">–£—Å–ª—É–≥–∏</h2>
    <div style="display:flex;gap:8px;align-items:center;">
      <a href="{{ url_for('add_service') }}" class="btn-main" style="background:#1976d2;color:#fff;padding:8px 14px;border-radius:8px;text-decoration:none;">–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</a>
      <form method="get" action="{{ url_for('services_list') }}" style="display:flex;gap:8px;align-items:center;">
        <select name="status" class="filter-select">
          <option value="">–í—Å–µ</option>
          <option value="active" {{ 'selected' if request.args.get('status')=='active' else '' }}>–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
          <option value="archived" {{ 'selected' if request.args.get('status')=='archived' else '' }}>–ê—Ä—Ö–∏–≤</option>
        </select>
        <button type="submit">–§–∏–ª—å—Ç—Ä</button>
      </form>
    </div>
  </div>

  <div style="overflow:auto;margin-top:12px;">
    <table style="width:100%;border-collapse:collapse;">
      <thead>
        <tr style="background:#f6f9ff;">
          <th style="text-align:left;padding:10px;border-bottom:1px solid #eef2fb;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
          <th style="text-align:left;padding:10px;border-bottom:1px solid #eef2fb;">–ö–æ–¥</th>
          <th style="text-align:right;padding:10px;border-bottom:1px solid #eef2fb;">–¶–µ–Ω–∞, ‚ÇΩ</th>
          <th style="text-align:right;padding:10px;border-bottom:1px solid #eef2fb;">–î–ª–∏—Ç., –º–∏–Ω</th>
          <th style="text-align:center;padding:10px;border-bottom:1px solid #eef2fb;">–¶–≤–µ—Ç</th>
          <th style="text-align:center;padding:10px;border-bottom:1px solid #eef2fb;">–°—Ç–∞—Ç—É—Å</th>
          <th style="width:180px;padding:10px;border-bottom:1px solid #eef2fb;">–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
      </thead>
      <tbody>
        {% for s in items %}
        <tr>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;">{{ s.name }}</td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;"><code>{{ s.code }}</code></td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:right;">{{ "{:,}".format(s.price).replace(","," ") }}</td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:right;">{{ s.duration_min }}</td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:center;">
            <span style="display:inline-block;width:22px;height:22px;border-radius:6px;border:1px solid #e3eaf9;background:{{ s.color }}"></span>
          </td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;text-align:center;">
            {% if s.is_active %}<span style="color:#27ae60;">–ê–∫—Ç–∏–≤–Ω–∞</span>{% else %}<span style="color:#c0392b;">–ê—Ä—Ö–∏–≤</span>{% endif %}
          </td>
          <td style="padding:10px;border-bottom:1px solid #f1f4fb;">
            <a href="{{ url_for('edit_service', id=s._id) }}" style="margin-right:8px;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</a>
            <form action="{{ url_for('delete_service', id=s._id) }}" method="post" style="display:inline;" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É ¬´{{ s.name }}¬ª?');">
              <button type="submit" style="color:#c0392b;background:#fff;border:1px solid #f1d6d6;border-radius:6px;padding:4px 8px;">–£–¥–∞–ª–∏—Ç—å</button>
            </form>
          </td>
        </tr>
        {% else %}
        <tr><td colspan="7" style="padding:18px;text-align:center;color:#8592a6;">–ü–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥</td></tr>
        {% endfor %}
      </tbody>
    </table>
  </div>
</div>

{% endblock %}

=== D:\Projects\medplatforma\templates\sidebar.html ===
<aside class="sidebar">
  <div
    class="sidebar-header"
    style="padding: 24px 0 50px 0; display: flex; justify-content: center"
  >
    <img
      src="{{ url_for('static', filename='logo_test123.png') }}"
      alt="ClubStom"
      class="sidebar-logo-img"
    />
  </div>
  <nav>
    <ul>
      <li>
        <a
          href="{{ url_for('calendar_view') }}"
          class="{% if '/calendar' in request.path or request.path == '/' %}active{% endif %}"
        >
          <i class="fa-solid fa-calendar-days"></i> –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('patients_list') }}"
          class="{% if '/patients' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-user-injured"></i> –ü–∞—Ü–∏–µ–Ω—Ç—ã
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('doctors') }}"
          class="{% if '/doctors' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-user-md"></i> –í—Ä–∞—á–∏
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('tasks') }}"
          class="{% if '/tasks' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-list-check"></i> –ó–∞–¥–∞—á–∏
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('messages') }}"
          class="{% if '/messages' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-comments"></i> –°–æ–æ–±—â–µ–Ω–∏—è
        </a>
      </li>

      <li>
        <a href="{{ url_for('rooms_list') }}"
          ><i class="fa-solid fa-door-open"></i> –ö–∞–±–∏–Ω–µ—Ç—ã</a
        >
      </li>
      <li>
        <a href="{{ url_for('services_list') }}"
          ><i class="fa-solid fa-list-check"></i> –£—Å–ª—É–≥–∏</a
        >
      </li>
      <li>
        <a href="{{ url_for('patients_list') }}"
          ><i class="fa-solid fa-user-injured"></i> –ü–∞—Ü–∏–µ–Ω—Ç—ã</a
        >
      </li>
      <li>
        <a
          href="{{ url_for('ztl') }}"
          class="{% if '/ztl' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-flask"></i> –ó–¢–õ
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('partners') }}"
          class="{% if '/partners' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-handshake"></i> –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('finance_report') }}"
          class="{% if '/finance_report' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-file-invoice-dollar"></i> –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('logs') }}"
          class="{% if '/logs' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-book"></i> –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
        </a>
      </li>
      <li>
        <a
          href="{{ url_for('data_tools') }}"
          class="{% if '/data_tools' in request.path %}active{% endif %}"
        >
          <i class="fa-solid fa-cloud-arrow-down"></i> –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç
        </a>
      </li>
    </ul>
  </nav>
</aside>

=== D:\Projects\medplatforma\templates\staff.html ===
{% extends 'base.html' %}
{% block title %}–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∏–Ω–∏–∫–∏{% endblock %}
{% block content %}
<div style="max-width:950px; margin:0 auto; background:#fff; border-radius:24px; box-shadow:0 6px 32px rgba(20,40,80,.08); padding:34px 44px;">
    <h2 style="font-size:2.1rem; font-weight:700; margin-bottom:28px;">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∏–Ω–∏–∫–∏</h2>
    <table style="width:100%; background:#fff; border-radius:18px; font-size:1.11rem;">
        <thead style="background:#f2f6ff;">
            <tr>
                <th>–§–ò–û</th>
                <th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>Email</th>
                <th>–†–æ–ª—å</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
            </tr>
        </thead>
        <tbody>
        {% for staff in staff_list %}
            <tr style="border-bottom:1px solid #f0f0f0;">
                <td style="font-weight:600;">
                    <img src="{{ staff.avatar_url or '/static/avatars/demo-staff.png' }}" alt="avatar" style="width:36px; height:36px; border-radius:50%; object-fit:cover; margin-right:8px; vertical-align:middle;">
                    {{ staff.full_name }}
                </td>
                <td>{{ staff.position }}</td>
                <td>{{ staff.phone }}</td>
                <td>{{ staff.email }}</td>
                <td>{{ staff.role }}</td>
                <td style="color: {% if staff.status == '–∞–∫—Ç–∏–≤–µ–Ω' %}#13b949{% else %}#d91f3c{% endif %}; font-weight:600;">
                    {{ staff.status|capitalize }}
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="6" style="text-align:center; color:#aaa; padding:26px;">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

=== D:\Projects\medplatforma\templates\tasks.html ===
{% extends "base.html" %}
{% block content %}
<h2>–ó–∞–¥–∞—á–∏</h2>
<div style="display:flex;gap:14px;align-items:center;margin-bottom:24px;">
  <select class="filter-select">
    <option>–í—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</option>
    <!-- ... -->
  </select>
  <select class="filter-select">
    <option>–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
    <!-- ... -->
  </select>
  <select class="filter-select">
    <option>–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
    <!-- ... -->
  </select>
  <a href="{{ url_for('add_task') }}" class="btn-add-task">
    <i class="fa fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  </a>
</div>

<div class="tasks-table-wrap">
  <table class="tasks-table">
    <thead>
      <tr>
        <th>–ó–∞–¥–∞—á–∞</th>
        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
        <th>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</th>
        <th>–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫</th>
        <th>–°—Ç–∞—Ç—É—Å</th>
        <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
      </tr>
    </thead>
    <tbody>
      {% for task in tasks %}
      <tr>
        <td><b>{{ task.title }}</b></td>
        <td>{{ task.description or task.desc or '-' }}</td>
        <td>
          <span class="user-avatar">
            {% if task.assigned_avatar_url %}
              <img src="{{ task.assigned_avatar_url }}" alt="">
            {% else %}
              ?
            {% endif %}
          </span>
          {{ task.assigned_name or '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' }}
        </td>
        <td>{{ task.due_date or task.deadline or '-' }}</td>
        <td>
          {% if task.status == 'done' %}
            <span class="badge badge-done">–í—ã–ø–æ–ª–Ω–µ–Ω–∞</span>
          {% elif task.status == 'active' %}
            <span class="badge badge-open">–û—Ç–∫—Ä—ã—Ç–∞</span>
          {% elif task.status == 'overdue' %}
            <span class="badge badge-overdue">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞</span>
          {% else %}
            <span class="badge badge-other">{{ task.status or '-' }}</span>
          {% endif %}
        </td>
        <td>
          {% if task.priority == 'high' %}
            <span class="badge badge-high">–í—ã—Å–æ–∫–∏–π</span>
          {% elif task.priority == 'low' %}
            <span class="badge badge-low">–ù–∏–∑–∫–∏–π</span>
          {% elif task.priority == 'normal' %}
            <span class="badge badge-norm">–ù–æ—Ä–º–∞–ª—å–Ω—ã–π</span>
          {% else %}
            <span class="badge badge-norm">{{ task.priority or '-' }}</span>
          {% endif %}
        </td>
        <td>
          <a href="{{ url_for('task_card', task_id=task._id) }}" class="btn-more">
            –ü–æ–¥—Ä–æ–±–Ω–µ–µ <i class="fa fa-angle-right"></i>
          </a>
        </td>
      </tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}

{% block head %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
.btn-add-task {
  display:inline-flex;align-items:center;gap:8px;
  background:linear-gradient(90deg,#2196f3 60%,#21b445 100%);
  color:#fff;font-weight:700;border-radius:10px;
  padding:12px 28px;font-size:1.1em;box-shadow:0 4px 16px #b5e3cb22;
  border:none;text-decoration:none;transition:.14s;background-size:200%;
}
.btn-add-task:hover {background-position:right;color:#fff;}
.btn-add-task i {font-size:1.2em;}
.tasks-table-wrap {
  background:#fff;border-radius:20px;box-shadow:0 4px 26px #d7eafc40;
  padding:22px;margin-top:10px;overflow-x:auto;
}
.tasks-table {width:100%;border-collapse:collapse;font-family:'Montserrat',sans-serif;font-size:1.08em;}
.tasks-table thead tr {background:#f6fbff;}
.tasks-table th, .tasks-table td {padding:13px 10px;}
.tasks-table th {font-size:1.01em;color:#175ecb;font-weight:700;}
.tasks-table tbody tr {transition:background .18s;}
.tasks-table tbody tr:hover {background:#f2f7fe;}
.user-avatar {
  display:inline-block;vertical-align:middle;background:#e6eefb;color:#215fa6;
  border-radius:50%;width:32px;height:32px;text-align:center;line-height:32px;font-weight:700;margin-right:7px;font-size:1.07em;
  box-shadow:0 1px 6px #e3eaf9;
}
.user-avatar img {width:32px;height:32px;border-radius:50%;object-fit:cover;}
.badge {display:inline-flex;align-items:center;gap:6px;padding:3px 12px;border-radius:9px;font-size:0.99em;font-weight:600;}
.badge-done     {background:#e7fbe6; color:#21b445;}
.badge-open     {background:#e7f1fd; color:#2176bd;}
.badge-overdue  {background:#ffeaea; color:#d82222;}
.badge-high     {background:#f0e8ff; color:#7b3ef0;}
.badge-low      {background:#fff9e5; color:#e6ac00;}
.badge-norm     {background:#e8f4ff; color:#1567a0;}
.badge-other    {background:#f4e6ff; color:#ae3ef0;}
.btn-more {
  background:#e9f4ff;color:#2176bd;border-radius:8px;
  border:none;font-weight:600;padding:8px 22px;font-size:1em;transition:.16s;text-decoration:none;display:inline-flex;align-items:center;gap:7px;
}
.btn-more:hover {background:#d6e7fc;color:#105492;}
</style>
{% endblock %}

=== D:\Projects\medplatforma\templates\topbar.html ===
<header class="topbar">
  <div class="topbar-center">
  <div class="topbar-status">
    <span class="topbar-task">
      <i class="fa-solid fa-list-check"></i>
      <b>3</b> –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏
    </span>
    <span class="topbar-rating">
      <i class="fa-solid fa-star" style="color:#f7ba07"></i>
      4.9
    </span>
    <span class="topbar-online">
      <i class="fa-solid fa-user-group"></i>
      <b>5</b> –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –∫–ª–∏–Ω–∏–∫–µ
    </span>
    <span class="topbar-news">
      <i class="fa-solid fa-bullhorn"></i>
      <b>–ù–æ–≤–æ–µ:</b> –ó–∞–≤—Ç—Ä–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –¥–æ 17:00
    </span>
  </div>
</div>
  <div class="topbar-right">
    <!-- –ö–æ–ª–æ–∫–æ–ª—å—á–∏–∫ -->
    <button class="topbar-icon-btn" id="notifBellBtn">
      <i class="fa-regular fa-bell"></i>
      <span class="notif-badge" id="notifBadge" style="display:inline;">3</span>
    </button>

    <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã -->
    <button id="themeToggleBtn" class="topbar-icon-btn">
      <i class="fa-solid fa-sun theme-sun" style="color: #ffd700;"></i>
      <i class="fa-solid fa-moon theme-moon" style="display:none; color:#4667b9;"></i>
    </button>

    <!-- –ü—Ä–æ—Ñ–∏–ª—å + –º–µ–Ω—é -->
    <div class="profile-block" onclick="toggleProfileMenu()" tabindex="0" style="margin-left:20px; position:relative;">
      <img src="{{ url_for('static', filename='investor_avatar.png') }}" alt="–ü—Ä–æ—Ñ–∏–ª—å" class="profile-avatar">
      <span class="profile-name">{{ session.get('user_name', '–ò–Ω–≤–µ—Å—Ç–æ—Ä –ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤–∏—á') }}</span>
      <i class="fa fa-chevron-down" style="margin-left:7px; font-size:0.9em; color:#bbb"></i>
      <div class="profile-menu" id="profileMenu" tabindex="0">
  <a href="{{ url_for('profile') }}"><i class="fa fa-user"></i> –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
  <a href="#"><i class="fa fa-cog"></i> –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
  <a href="#"><i class="fa fa-question-circle"></i> –ü–æ–º–æ—â—å</a>
  <a href="{{ url_for('logout') }}"><i class="fa fa-sign-out-alt"></i> –í—ã–π—Ç–∏</a>
</div>
    </div>
  </div>
</header>

=== D:\Projects\medplatforma\templates\xray_room.html ===
{% extends "base.html" %}
{% block content %}
<div class="xray-cabinet-wrap">
    <div class="xray-header-row">
        <h2>–†–µ–Ω—Ç–≥–µ–Ω-–∫–∞–±–∏–Ω–µ—Ç</h2>
        <a href="{{ url_for('add_xray') }}" class="btn-main">
            <i class="fa fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Å–Ω–∏–º–æ–∫
        </a>
    </div>
    <form method="get" class="xray-filters">
        <select name="patient" class="filter-select">
            <option value="">–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã</option>
            {% for p in patients.values() %}
            <option value="{{ p['_id'] }}">{{ p['full_name'] }}</option>
            {% endfor %}
        </select>
        <select name="doctor" class="filter-select">
            <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
            {% for d in doctors.values() %}
            <option value="{{ d['_id'] }}">{{ d['full_name'] }}</option>
            {% endfor %}
        </select>
        <select name="type" class="filter-select">
            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
            <option>–ü–∞–Ω–æ—Ä–∞–º–∞</option>
            <option>–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π</option>
            <option>–ö–¢</option>
        </select>
        <input type="date" name="date" class="filter-select">
        <button type="submit" class="btn btn-secondary">–§–∏–ª—å—Ç—Ä</button>
    </form>

    <div class="xray-table-zone">
        <table class="xray-table">
            <thead>
                <tr>
                    <th>–î–∞—Ç–∞</th>
                    <th>–ü–∞—Ü–∏–µ–Ω—Ç</th>
                    <th>–í—Ä–∞—á</th>
                    <th>–¢–∏–ø</th>
                    <th>–ü—Ä–µ–≤—å—é</th>
                    <th>–ó–∞–∫–ª—é—á–µ–Ω–∏–µ</th>
                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                {% for x in xrays %}
                <tr>
                    <td style="font-weight:600;font-size:1.09em;">{{ x.date }}</td>
                    <td>
                        <div class="xray-cell">
                            <img src="{{ patients[x.patient_id]['avatar_url'] if x.patient_id in patients else '/static/avatars/demo-patient.png' }}" class="xray-avatar">
                            <div>
                                <b>{{ patients[x.patient_id]['full_name'] if x.patient_id in patients else "‚Äî" }}</b>
                                <div class="xray-meta">{{ patients[x.patient_id]['phone'] if x.patient_id in patients else "" }}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="xray-cell">
                            <img src="{{ doctors[x.doctor_id]['avatar_url'] if x.doctor_id in doctors else '/static/avatars/demo-doctor.png' }}" class="xray-avatar">
                            <div>
                                <b>{{ doctors[x.doctor_id]['full_name'] if x.doctor_id in doctors else "‚Äî" }}</b>
                                <div class="xray-meta">{{ doctors[x.doctor_id]['specialty'] if x.doctor_id in doctors else "" }}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="xray-badge {{ x.type }}">{{ x.type }}</span>
                    </td>
                    <td>
                        <img src="{{ x.image_url }}" class="xray-img-preview"
                             onclick="showXrayModal('{{ x.image_url }}', '{{ x.comment|e }}', '{{ x.report|e }}')" alt="X-ray">
                    </td>
                    <td>
                        <span>{{ x.comment or '-' }}</span>
                    </td>
                    <td>
                        <a href="{{ x.image_url }}" download class="btn-download">
                            <i class="fa fa-download"></i> –°–∫–∞—á–∞—Ç—å
                        </a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

<!-- –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ -->
<div class="modal" id="xrayModal" style="display:none;">
    <div class="modal-content" style="max-width:670px;">
        <span class="close" onclick="document.getElementById('xrayModal').style.display='none'">&times;</span>
        <img id="modalXrayImg" src="" style="width:98%;border-radius:14px;box-shadow:0 4px 22px #8fc7fa44;margin-bottom:16px;">
        <div id="modalComment" style="margin-bottom:8px;color:#2563eb;font-weight:500;"></div>
        <div id="modalReport" style="font-size:1.13em;color:#222;"></div>
    </div>
</div>
<script>
function showXrayModal(url, comment, report) {
    document.getElementById('modalXrayImg').src = url;
    document.getElementById('modalComment').innerText = comment || '';
    document.getElementById('modalReport').innerText = report || '';
    document.getElementById('xrayModal').style.display = 'flex';
}
window.onclick = function(e) {
    let modal = document.getElementById('xrayModal');
    if (e.target === modal) modal.style.display = 'none';
}
</script>

{% block head %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
.xray-cabinet-wrap { max-width: 1250px; margin: 0 auto; padding: 38px 0 36px 0; }
.xray-header-row {
    display: flex; align-items: center; justify-content: space-between; margin-bottom: 32px;
}
.xray-filters {
    display: flex; gap: 14px; margin-bottom: 30px; flex-wrap: wrap; align-items: center;
}
.xray-table-zone {
    background: #fff; border-radius: 20px; box-shadow: 0 4px 26px #e3eaf935;
    padding: 22px 26px; margin-top: 0;
}
.xray-table { width: 100%; border-collapse: separate; border-spacing: 0; font-size: 1.07em; }
.xray-table th, .xray-table td { padding: 15px 8px; vertical-align: middle; text-align: center; }
.xray-table th { background: #f4f8ff; color: #145dbd; font-size: 1.04em; }
.xray-table tbody tr { transition: background .13s; border-bottom: 1.5px solid #f1f4fa; }
.xray-table tbody tr:hover { background: #f5fafd; }
.xray-avatar { width: 38px; height: 38px; border-radius: 10px; object-fit: cover; margin-right: 8px; box-shadow:0 2px 8px #b9e4fa22; }
.xray-cell { display: flex; align-items: center; gap: 8px; text-align: left; }
.xray-meta { font-size: 0.98em; color: #8493b5; }
.xray-badge { display: inline-block; padding: 6px 15px; border-radius: 8px; font-size: 0.97em; font-weight: 600; color: #fff; margin-bottom: 2px;}
.xray-badge.–ü–∞–Ω–æ—Ä–∞–º–∞ { background: #2196f3; }
.xray-badge.–ö–¢ { background: #21b445; }
.xray-badge.–ü—Ä–∏—Ü–µ–ª—å–Ω—ã–π { background: #ffa600; color: #222;}
.xray-img-preview {
    width: 62px; height: 62px; object-fit: cover; border-radius: 11px;
    box-shadow: 0 2px 10px #a7d4fd33; transition: transform .17s, box-shadow .17s;
    cursor: pointer;
    border: 1.5px solid #e5ecf7;
}
.xray-img-preview:hover {
    transform: scale(1.12) rotate(-2.5deg);
    box-shadow: 0 6px 24px #2196f333;
}
.btn-main {
    display:inline-flex;align-items:center;gap:9px;
    background:linear-gradient(90deg,#2196f3 60%,#21b445 100%);
    color:#fff;font-weight:700;border-radius:10px;
    padding:12px 28px;font-size:1.08em;box-shadow:0 4px 16px #b5e3cb22;
    border:none;text-decoration:none;transition:.14s;background-size:200%;
}
.btn-main:hover {background-position:right;color:#fff;}
.btn-download {
    display: inline-flex; align-items: center; gap: 7px;
    padding: 7px 17px; font-size: 0.97em; font-weight: 600;
    background: #e8f3ff; color: #2576c6; border-radius: 8px; border: none;
    box-shadow: 0 2px 7px #e3eaf933; text-decoration: none;
    transition: background .13s, color .13s;
}
.btn-download:hover { background: #d1eaff; color: #1859b3; }
.modal { align-items: center; justify-content: center; }
.modal-content { animation: xraypop .3s; }
@keyframes xraypop {
    from { opacity:0; transform: scale(0.94);}
    to   { opacity:1; transform: scale(1);}
}
</style>
{% endblock %}
{% endblock %}

=== D:\Projects\medplatforma\templates\ztl.html ===
{% extends "base.html" %}
{% block content %}
<div class="ztl-cabinet-wrap">
    <div class="ztl-header-row">
        <h2>–ó—É–±–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è (ZTL)</h2>
        <a href="{{ url_for('add_ztl') }}" class="btn-add-ztl">
            <i class="fa fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
        </a>
    </div>

    <form method="get" class="ztl-filters">
        <select name="patient" class="filter-select">
            <option value="">–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã</option>
            {% for p in patients.values() %}
            <option value="{{ p['_id'] }}">{{ p['full_name'] }}</option>
            {% endfor %}
        </select>
        <select name="doctor" class="filter-select">
            <option value="">–í—Å–µ –≤—Ä–∞—á–∏</option>
            {% for d in doctors.values() %}
            <option value="{{ d['_id'] }}">{{ d['full_name'] }}</option>
            {% endfor %}
        </select>
        <select name="type" class="filter-select">
            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
            <option>–ö–æ—Ä–æ–Ω–∫–∞</option>
            <option>–í–∏–Ω–∏—Ä</option>
            <option>–ë—Ä–µ–∫–µ—Ç—ã</option>
            <option>–ü—Ä–æ—Ç–µ–∑</option>
            <option>–ö–∞–ø–ø–∞</option>
        </select>
        <select name="status" class="filter-select">
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option>–í —Ä–∞–±–æ—Ç–µ</option>
            <option>–ì–æ—Ç–æ–≤–æ</option>
            <option>–í—ã–¥–∞–Ω–æ</option>
            <option>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</option>
        </select>
        <button type="submit" class="btn btn-secondary">–§–∏–ª—å—Ç—Ä</button>
    </form>

    <div class="ztl-cards-row">
        {% for w in ztls %}
        <div class="ztl-card shadow" onclick="showZtlModal({{ w|tojson|safe }}, '{{ patients.get(w.patient_id|string, {}).get('full_name', '') }}', '{{ doctors.get(w.doctor_id|string, {}).get('full_name', '') }}')">
            <div class="ztl-card-img">
                <img src="{{ w.file_url }}" alt="labwork">
            </div>
            <div class="ztl-card-title">{{ patients[w.patient_id].full_name if w.patient_id in patients else '‚Äî' }}</div>
            <div class="ztl-card-doctor">–í—Ä–∞—á: {{ doctors[w.doctor_id].full_name if w.doctor_id in doctors else '‚Äî' }}</div>
            <div class="ztl-card-type">
                <span class="ztl-badge-type">{{ w.type }}</span>
                <span class="ztl-badge-status {{ w.status|lower|replace(' ', '_') }}">{{ w.status }}</span>
            </div>
            <div class="ztl-card-dates">
                <span>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {{ w.order_date }}</span>
                <span>–°—Ä–æ–∫: {{ w.due_date }}</span>
            </div>
            <div class="ztl-card-comment">{{ w.comment }}</div>
        </div>
        {% endfor %}
    </div>
</div>

<!-- –ú–æ–¥–∞–ª–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—Ç—ã -->
<div class="modal" id="ztlModal" style="display:none;">
  <div class="modal-content" style="max-width:520px;">
    <span class="close" onclick="document.getElementById('ztlModal').style.display='none'">&times;</span>
    <img id="modalZtlImg" src="" style="width:96%;border-radius:14px;box-shadow:0 4px 20px #8fc7fa55;margin-bottom:14px;">
    <div id="modalZtlInfo" style="font-size:1.1em;"></div>
    <div id="modalZtlComment" style="margin:8px 0 0 0;color:#2563eb;"></div>
  </div>
</div>
<script>
function showZtlModal(w, patient, doctor) {
    document.getElementById('modalZtlImg').src = w.file_url;
    document.getElementById('modalZtlInfo').innerHTML =
      `<b>–ü–∞—Ü–∏–µ–Ω—Ç:</b> ${patient}<br><b>–í—Ä–∞—á:</b> ${doctor}<br>
       <b>–¢–∏–ø:</b> ${w.type}<br><b>–°—Ç–∞—Ç—É—Å:</b> ${w.status}<br>
       <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${w.order_date} <br><b>–°—Ä–æ–∫:</b> ${w.due_date}`;
    document.getElementById('modalZtlComment').innerText = w.comment || '';
    document.getElementById('ztlModal').style.display = 'flex';
}
window.onclick = function(e) {
    let modal = document.getElementById('ztlModal');
    if (e.target === modal) modal.style.display = 'none';
}
</script>

{% block head %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
.ztl-cabinet-wrap {
    max-width: 1200px; margin: 0 auto; padding: 38px 0 38px 0;
    display: flex; flex-direction: column; align-items: center;
}
.ztl-header-row {
    display: flex; align-items: center; justify-content: space-between;
    width: 100%; margin-bottom: 24px;
}
.ztl-header-row h2 { font-weight: 700; font-size: 2em; }
.btn-add-ztl {
    display: inline-flex; align-items: center; gap: 10px;
    background: linear-gradient(90deg,#2196f3 60%,#21b445 100%);
    color: #fff; font-weight: 700; border-radius: 10px; padding: 13px 34px; font-size: 1.09em;
    box-shadow: 0 4px 18px #b5e3cb22; border: none; text-decoration: none; transition: .14s; background-size: 200%;
}
.btn-add-ztl:hover { background-position: right; color: #fff; }
.ztl-filters {
    display: flex; gap: 13px; margin-bottom: 32px; flex-wrap: wrap; align-items: center;
    width: 100%; justify-content: center;
}
.ztl-cards-row {
    display: flex; flex-wrap: wrap; gap: 32px; justify-content: flex-start; width: 100%; margin-top: 10px;
}
.ztl-card {
    background: #fff; border-radius: 22px; box-shadow: 0 4px 24px #d7eafc45;
    padding: 23px 28px; min-width: 282px; width: 325px; max-width: 99vw; transition: box-shadow .17s;
    display: flex; flex-direction: column; align-items: flex-start; gap: 5px;
    cursor: pointer;
}
.ztl-card:hover { box-shadow: 0 8px 32px #b5e3cb70; transform: translateY(-2px) scale(1.025);}
.ztl-card-img { width: 100%; display: flex; justify-content: center; margin-bottom: 8px; }
.ztl-card-img img {
    width: 90px; height: 70px; object-fit: cover; border-radius: 11px; box-shadow: 0 2px 14px #a7d4fd44; background: #f4f6fb;
}
.ztl-card-title { font-weight: 600; font-size: 1.08em; color: #2a3555; margin-bottom: 1px;}
.ztl-card-doctor { color: #888; font-size: .98em; margin-bottom: 4px;}
.ztl-card-type { display: flex; gap: 10px; align-items: center; margin-bottom: 4px;}
.ztl-badge-type {
    background: #e9f4ff; color: #2196f3; font-weight: 600; font-size: .97em;
    border-radius: 7px; padding: 4px 13px;
}
.ztl-badge-status {
    background: #e2ebfa; color: #6c6c98; font-weight: 600; font-size: .97em;
    border-radius: 7px; padding: 4px 13px;
}
.ztl-badge-status.–≤_—Ä–∞–±–æ—Ç–µ { background: #f4e4ff; color: #a44de0;}
.ztl-badge-status.–≥–æ—Ç–æ–≤–æ { background: #e6fbe6; color: #21ba45;}
.ztl-badge-status.–≤—ã–¥–∞–Ω–æ { background: #e7f1fd; color: #2176bd;}
.ztl-badge-status.–æ–∂–∏–¥–∞–µ—Ç_–æ–ø–ª–∞—Ç—ã { background: #fff6e3; color: #e39a1a;}
.ztl-card-dates { color: #8c8fa5; font-size: .95em; margin-bottom: 1px;}
.ztl-card-dates span { margin-right: 9px;}
.ztl-card-comment { font-size: .97em; color: #2563eb; margin-top: 1px;}
.modal { align-items: center; justify-content: center; }
.modal-content { animation: xraypop .3s; }
@keyframes xraypop {
    from { opacity:0; transform: scale(0.96);}
    to   { opacity:1; transform: scale(1);}
}
</style>
{% endblock %}
{% endblock %}

