# implement_calendar_role_filtering.py
# –ó–∞–¥–∞—á–∏ 6.4-6.5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ —Ä–æ–ª—è–º –∏ —Å–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

import re
import os

def update_calendar_api_for_roles():
    """6.4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ —Ä–æ–ª—è–º"""
    print("=== 6.4: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ —Ä–æ–ª—è–º ===")

    # –ß–∏—Ç–∞–µ–º main.py
    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é api_events
    api_events_pattern = r'@app\.route\("/api/events"\).*?def api_events\(\):.*?return jsonify\(events\)'

    match = re.search(api_events_pattern, content, re.DOTALL)
    if not match:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è api_events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è api_events —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º
    new_api_events = '''@app.route("/api/events")
@login_required
def api_events():
    # 1) –î–∏–∞–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —à–ª—ë—Ç FullCalendar
    start_str = request.args.get("start")
    end_str = request.args.get("end")
    patient_id = (request.args.get("patient_id") or "").strip()

    # 2) –§–∏–ª—å—Ç—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ id, –∏ –∏–º–µ–Ω–∞)
    doctor_id = request.args.get("doctor_id")
    room_id = request.args.get("room_id")
    room_name = request.args.get("room_name")
    service_id = request.args.get("service_id")
    service_name = request.args.get("service_name")

    start_dt = parse_iso(start_str)
    end_dt = parse_iso(end_str)

    # 3) –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    q = {}
    if start_dt and end_dt:
        q["start"] = {"$lt": end_dt}
        q["end"] = {"$gt": start_dt}

    # üî• –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–æ–ª—è–º
    user_role = session.get("user_role", "")
    user_id = session.get("user_id", "")

    if user_role == "doctor":
        # –í—Ä–∞—á –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
        try:
            # –ù–∞—Ö–æ–¥–∏–º ObjectId –≤—Ä–∞—á–∞ –ø–æ user_id
            user_doc = db.users.find_one({"_id": ObjectId(user_id)})
            if user_doc and "doctor_id" in user_doc:
                q["doctor_id"] = user_doc["doctor_id"]
            else:
                # –ï—Å–ª–∏ doctor_id –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏—â–µ–º –ø–æ email/login
                doctor = db.doctors.find_one({"email": user_doc.get("login", "")})
                if doctor:
                    q["doctor_id"] = doctor["_id"]
                else:
                    # –ï—Å–ª–∏ —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
                    return jsonify([])
        except Exception:
            return jsonify([])

    elif user_role == "registrar":
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        pass

    elif user_role == "admin":
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        pass

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        return jsonify([])

    # 4) –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if doctor_id:
        try:
            q["doctor_id"] = ObjectId(doctor_id)
        except Exception:
            pass

    # 5) –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É
    if room_id:
        try:
            q["room_id"] = ObjectId(room_id)
        except Exception:
            pass
    elif room_name:
        r = db.rooms.find_one({"name": room_name}, {"_id": 1})
        if r:
            q["room_id"] = r["_id"]

    # 6) –§–∏–ª—å—Ç—Ä –ø–æ —É—Å–ª—É–≥–µ
    if service_id:
        try:
            q["service_id"] = ObjectId(service_id)
        except Exception:
            pass
    elif service_name:
        s = db.services.find_one({"name": service_name}, {"_id": 1})
        if s:
            q["service_id"] = s["_id"]

    # 6+) –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É
    if patient_id:
        try:
            q["patient_id"] = ObjectId(patient_id)
        except Exception:
            pass

    # 7) –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π/—Ü–≤–µ—Ç–æ–≤
    doctors_map = {str(d["_id"]): d for d in db.doctors.find({}, {"full_name": 1, "avatar": 1})}
    patients_map = {str(p["_id"]): p for p in db.patients.find({}, {"full_name": 1, "avatar": 1})}
    services_map = {
        str(s["_id"]): s for s in db.services.find({}, {"name": 1, "color": 1, "duration_min": 1})
    }
    status_map = {
        s["key"]: s for s in db.visit_statuses.find({}, {"key": 1, "title": 1, "color": 1})
    }
    rooms_map = {str(r["_id"]): r for r in db.rooms.find({}, {"name": 1})}

    # 8) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ FullCalendar
    events = []
    cursor = db.appointments.find(q).sort("start", 1)

    for a in cursor:
        # --- –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å None)
        did = str(a.get("doctor_id") or "")
        pid = str(a.get("patient_id") or "")
        sid = str(a.get("service_id") or "")
        rid = str(a.get("room_id") or "")

        # --- –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∏–ø datetime
        a_start = to_dt(a.get("start"))
        if not a_start:
            # –±–∏—Ç–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –¥–∞—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        a_end = to_dt(a.get("end"))
        if not a_end:
            # –µ—Å–ª–∏ –Ω–µ—Ç end ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ 30 –º–∏–Ω
            dur = services_map.get(sid, {}).get("duration_min", 30)
            try:
                dur = int(dur)
            except Exception:
                dur = 30
            a_end = add_minutes(a_start, dur)

        # --- —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        doc = doctors_map.get(did, {})
        pat = patients_map.get(pid, {})
        srv = services_map.get(sid, {})
        rm = rooms_map.get(rid, {})
        st = status_map.get(a.get("status_key", "scheduled"), {})

        # --- –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è
        title = f'{srv.get("name", "–£—Å–ª—É–≥–∞")} ‚Äî {pat.get("full_name", "–ü–∞—Ü–∏–µ–Ω—Ç")}'

        events.append(
            {
                "id": str(a["_id"]),
                "title": title,
                "start": a_start.isoformat(),
                "end": a_end.isoformat(),
                "backgroundColor": st.get("color") or srv.get("color") or "#3498db",
                "borderColor": st.get("color") or srv.get("color") or "#3498db",
                "extendedProps": {
                    "patient": pat.get("full_name"),
                    "doctor": doc.get("full_name"),
                    "service": srv.get("name"),
                    "room": rm.get("name"),
                    "status": st.get("title"),
                    "doctor_id": did,
                    "patient_id": pid,
                    "service_id": sid,
                    "room_id": rid,
                },
            }
        )

    return jsonify(events)'''

    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    content = re.sub(api_events_pattern, new_api_events, content, flags=re.DOTALL)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ API –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ–±–Ω–æ–≤–ª—ë–Ω —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–æ–ª—è–º")
    return True

def update_calendar_view_for_roles():
    """–û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Ä–æ–ª–µ–π"""
    print("=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ calendar_view –¥–ª—è —Ä–æ–ª–µ–π ===")

    # –ß–∏—Ç–∞–µ–º main.py
    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é calendar_view
    calendar_pattern = r'@app\.route\("/calendar"\).*?@login_required.*?def calendar_view\(\):.*?return render_template\([^)]+\)'

    match = re.search(calendar_pattern, content, re.DOTALL)
    if not match:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è calendar_view –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å —É—á—ë—Ç–æ–º —Ä–æ–ª–µ–π
    new_calendar_view = '''@app.route("/calendar")
@login_required
def calendar_view():
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    user_role = session.get("user_role", "")
    user_id = session.get("user_id", "")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–æ–ª—è–º
    if user_role == "doctor":
        # –í—Ä–∞—á –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
        user_doc = db.users.find_one({"_id": ObjectId(user_id)})
        doctor_filter = {}
        if user_doc and "doctor_id" in user_doc:
            doctor_filter = {"_id": user_doc["doctor_id"]}
        else:
            # –ü–æ–∏—Å–∫ –ø–æ email
            doctor = db.doctors.find_one({"email": user_doc.get("login", "")})
            if doctor:
                doctor_filter = {"_id": doctor["_id"]}
            else:
                doctor_filter = {"_id": None}  # –ù–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        doctors = list(db.doctors.find(doctor_filter))
    else:
        # –ê–¥–º–∏–Ω –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥—è—Ç –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π
        doctors = list(db.doctors.find({"status": "–∞–∫—Ç–∏–≤–µ–Ω"}))

    # –ü–∞—Ü–∏–µ–Ω—Ç—ã –∏ —É—Å–ª—É–≥–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º —Ä–æ–ª—è–º
    patients = list(db.patients.find())
    services = list(db.services.find({"is_active": True}))

    rooms = list(db.rooms.find({"active": True}, {"name": 1, "status": 1}).sort("name", 1))
    cabinets = [r["name"] for r in rooms]

    now = datetime.now()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–∞ —Å–µ–π—á–∞—Å" + –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∏—ë–º (–µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–µ–Ω)
    room_info = {}
    for r in rooms:
        state = calc_room_status_now(r, now)  # 'available'|'occupied'|'maintenance'
        text = (
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
            if state == "maintenance"
            else ("–ó–∞–Ω—è—Ç" if state == "occupied" else "–°–≤–æ–±–æ–¥–µ–Ω")
        )
        color = (
            "#d97706" if state == "maintenance" else ("#cc0000" if state == "occupied" else "green")
        )

        next_info = None
        if state == "available":
            a = get_next_event_for_room(r["_id"], now)
            if a:
                sdt = a.get("start")
                in_min = minutes_until(sdt, now)
                srv = (
                    db.services.find_one({"_id": a.get("service_id")}, {"name": 1})
                    if a.get("service_id")
                    else None
                )
                pat = (
                    db.patients.find_one({"_id": a.get("patient_id")}, {"full_name": 1})
                    if a.get("patient_id")
                    else None
                )
                next_info = {
                    "start": sdt.strftime("%Y-%m-%dT%H:%M") if isinstance(sdt, datetime) else "",
                    "service": (srv or {}).get("name", ""),
                    "patient": (pat or {}).get("full_name", ""),
                    "in_minutes": in_min,
                }

        room_info[r["name"]] = {"state": state, "text": text, "color": color, "next": next_info}

    total_rooms = len(cabinets)
    free_rooms = sum(1 for nfo in room_info.values() if nfo["state"] == "available")

    return render_template(
        "calendar.html",
        metrics={"total_rooms": total_rooms, "free_rooms": free_rooms},
        room_info=room_info,
        cabinets=cabinets,
        doctors=doctors,
        patients=patients,
        services=services,
        user_role=user_role,  # –ü–µ—Ä–µ–¥–∞—ë–º —Ä–æ–ª—å –≤ —à–∞–±–ª–æ–Ω
    )'''

    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    content = re.sub(calendar_pattern, new_calendar_view, content, flags=re.DOTALL)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –§—É–Ω–∫—Ü–∏—è calendar_view –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–µ–π")
    return True

def update_base_template():
    """6.5: –°–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é –ø–æ —Ä–æ–ª—è–º"""
    print("=== 6.5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ base.html –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Ä–æ–ª—è–º ===")

    if not os.path.exists("templates/base.html"):
        print("‚ùå –§–∞–π–ª templates/base.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    with open("templates/base.html", "r", encoding="utf-8") as f:
        content = f.read()

    # –≠–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –ø–æ —Ä–æ–ª—è–º
    admin_only_links = [
        ('href="/doctors"', "–í—Ä–∞—á–∏"),
        ('href="/services"', "–£—Å–ª—É–≥–∏"),
        ('href="/rooms"', "–ö–∞–±–∏–Ω–µ—Ç—ã"),
        ('href="/data_tools"', "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–∞–Ω–Ω—ã—Ö"),
        ('href="/backup"', "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"),
        ('>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ<', "–†–∞–∑–¥–µ–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"),
    ]

    admin_registrar_links = [
        ('href="/patients"', "–ü–∞—Ü–∏–µ–Ω—Ç—ã"),
        ('href="/finance"', "–§–∏–Ω–∞–Ω—Å—ã"),
    ]

    changes_made = 0

    # –°–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for link_pattern, description in admin_only_links:
        if link_pattern in content:
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç (–æ–±—ã—á–Ω–æ <li> –∏–ª–∏ <a>)
            link_pos = content.find(link_pattern)

            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–≥–∞ (–Ω–∞–∑–∞–¥ –¥–æ <)
            tag_start = content.rfind("<", 0, link_pos)

            # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–≥–∞ (–≤–ø–µ—Ä—ë–¥ –¥–æ >)
            tag_end = content.find(">", link_pos)

            # –ï—Å–ª–∏ —ç—Ç–æ <li>, –∏—â–µ–º </li>
            if content[tag_start:tag_start+3] == "<li":
                closing_tag = content.find("</li>", tag_end) + 5
            else:
                # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
                tag_name = content[tag_start+1:content.find(" ", tag_start)]
                if " " not in tag_name:
                    tag_name = content[tag_start+1:content.find(">", tag_start)]
                closing_tag = content.find(f"</{tag_name}>", tag_end) + len(f"</{tag_name}>")

            old_element = content[tag
