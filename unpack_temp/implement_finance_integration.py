# implement_finance_integration.py
# –ó–∞–¥–∞—á–∏ 8.1-8.6: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

import os
import re
from dotenv import load_dotenv
from pymongo import MongoClient


def check_current_finance_status():
    """8.1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è"""
    print("=== 8.1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ===")

    load_dotenv()
    client = MongoClient(os.getenv("MONGO_URI"))
    db = client[os.getenv("DB_NAME", "medplatforma")]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    collections = {
        "appointments": "–∑–∞–ø–∏—Å–∏",
        "ledger": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
        "services": "—É—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–∞–º–∏",
        "patients": "–ø–∞—Ü–∏–µ–Ω—Ç—ã",
    }

    for collection, description in collections.items():
        count = db[collection].count_documents({})
        print(f"üìä {description}: {count}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    appointments_with_services = db.appointments.count_documents({"service_id": {"$ne": None}})
    services_with_prices = db.services.count_documents({"price": {"$gt": 0}})
    ledger_entries = db.ledger.count_documents({})

    print(f"\nüìà –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:")
    print(f"–ó–∞–ø–∏—Å–µ–π —Å —É—Å–ª—É–≥–∞–º–∏: {appointments_with_services}")
    print(f"–£—Å–ª—É–≥ —Å —Ü–µ–Ω–∞–º–∏: {services_with_prices}")
    print(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {ledger_entries}")

    return {
        "has_appointments": appointments_with_services > 0,
        "has_services_with_prices": services_with_prices > 0,
        "has_ledger": ledger_entries > 0,
    }


def implement_appointment_finance_link():
    """8.2: –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¥–æ–ª–≥–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"""
    print("\n=== 8.2: –°–≤—è–∑—å –∑–∞–ø–∏—Å–∏ ‚Üî —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ===")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    create_appointment_patterns = [
        "api_appointments_create",
        "add_event",
        "/api/appointments.*POST",
    ]

    found_create_function = False
    for pattern in create_appointment_patterns:
        if pattern in content:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {pattern}")
            found_create_function = True
            break

    if not found_create_function:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
    finance_integration_indicators = [
        "db.ledger.insert",
        "service_charge",
        "create_financial_record",
        "auto.*debt",
    ]

    has_integration = any(
        re.search(indicator, content) for indicator in finance_integration_indicators
    )

    if has_integration:
        print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
        add_finance_integration_to_appointments()

    return True


def add_finance_integration_to_appointments():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–µ–π"""
    print("–í–Ω–µ–¥—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π...")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_appointments_create
    create_func_start = content.find("def api_appointments_create")
    if create_func_start == -1:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è api_appointments_create –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ò—â–µ–º –º–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ db.appointments.insert_one)
    insert_pos = content.find("db.appointments.insert_one", create_func_start)
    if insert_pos == -1:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ª–æ–≥–∏–∫–∏")
        return

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ —Å insert
    line_end = content.find("\n", insert_pos)

    # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    finance_code = """

    # üî• –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø: –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–∞
    try:
        if service_oid:
            service = db.services.find_one({"_id": service_oid}, {"price": 1, "name": 1})
            if service and service.get("price", 0) > 0:
                price = int(service["price"])

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ–ª–≥–µ (service_charge)
                finance_record = {
                    "patient_id": patient_oid,
                    "appointment_id": ins.inserted_id,
                    "kind": "service_charge",
                    "amount": price,
                    "service_id": service_oid,
                    "description": f"–£—Å–ª—É–≥–∞: {service.get('name', '')}",
                    "created_at": datetime.utcnow(),
                    "status": "pending"  # –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã
                }

                db.ledger.insert_one(finance_record)
                print(f"[FINANCE] –°–æ–∑–¥–∞–Ω –¥–æ–ª–≥ –Ω–∞ {price}‚ÇΩ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {patient_oid}")
    except Exception as e:
        print(f"[FINANCE ERROR] {e}")"""

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
    content = content[:line_end] + finance_code + content[line_end:]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø–∏—Å–µ–π")


def implement_payment_processing():
    """8.3: –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    print("\n=== 8.3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç ===")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –æ–ø–ª–∞—Ç
    payment_apis = ["/api/finance/record", "/api/payments", "api_finance_record"]

    has_payment_api = any(api in content for api in payment_apis)

    if has_payment_api:
        print("‚úÖ API –æ–ø–ª–∞—Ç –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ
        if "appointment.*paid" in content or "status.*paid" in content:
            print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
        else:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ...")
            enhance_payment_api_with_appointment_update()
    else:
        print("‚ûï –°–æ–∑–¥–∞–µ–º API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç...")
        create_payment_api()


def enhance_payment_api_with_appointment_update():
    """–£–ª—É—á—à–∞–µ–º API –æ–ø–ª–∞—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_finance_record
    finance_func_pos = content.find("def api_finance_record")
    if finance_func_pos == -1:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è api_finance_record –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ (–ø–µ—Ä–µ–¥ return)
    func_end = content.find("return jsonify", finance_func_pos)
    if func_end == -1:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
    appointment_update_code = """

    # üî• –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ü–ò–°–ò –ü–†–ò –û–ü–õ–ê–¢–ï
    if kind == "payment" and service_id:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –ø–æ service_id –∏ patient_id
            appointment = db.appointments.find_one({
                "patient_id": pid,
                "service_id": service_id,
                "status_key": {"$in": ["scheduled", "confirmed"]}
            })

            if appointment:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ª–∏ –æ–ø–ª–∞—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏
                service = db.services.find_one({"_id": service_id}, {"price": 1})
                if service and amount >= service.get("price", 0):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ "paid"
                    db.appointments.update_one(
                        {"_id": appointment["_id"]},
                        {"$set": {"status_key": "paid", "paid_at": ts}}
                    )
                    print(f"[FINANCE] –ó–∞–ø–∏—Å—å {appointment['_id']} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è")
        except Exception as e:
            print(f"[APPOINTMENT UPDATE ERROR] {e}")"""

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥
    content = content[:func_end] + appointment_update_code + "\n    " + content[func_end:]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ")


def create_payment_api():
    """–°–æ–∑–¥–∞–µ–º API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    print("–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π API –æ–ø–ª–∞—Ç...")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ –¥—Ä—É–≥–∏—Ö API)
    api_section = content.find("/api/finance/record")
    if api_section == -1:
        # –ò—â–µ–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π API
        api_section = content.find("/api/patients")
        if api_section == -1:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API")
            return

    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
    func_end = content.find("\n\n@app.route", api_section)
    if func_end == -1:
        func_end = content.find("\n@app.route", api_section + 100)

    # –ù–æ–≤—ã–π API –æ–ø–ª–∞—Ç
    payment_api = '''

@app.route("/api/payments/process", methods=["POST"])
@login_required
def api_process_payment():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    data = request.get_json(force=True, silent=True) or {}

    patient_id = data.get("patient_id")
    amount = data.get("amount", 0)
    payment_method = data.get("method", "cash")  # cash, card, transfer
    service_id = data.get("service_id")
    appointment_id = data.get("appointment_id")

    if not patient_id or amount <= 0:
        return jsonify({"ok": False, "error": "invalid_data"}), 400

    try:
        patient_oid = ObjectId(patient_id)
        service_oid = ObjectId(service_id) if service_id else None
        appointment_oid = ObjectId(appointment_id) if appointment_id else None

        ts = datetime.now()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
        payment_record = {
            "patient_id": patient_oid,
            "kind": "payment",
            "amount": int(amount),
            "method": payment_method,
            "service_id": service_oid,
            "appointment_id": appointment_oid,
            "ts": ts,
            "ts_iso": ts.strftime("%Y-%m-%dT%H:%M"),
            "processed_by": session.get("user_id"),
            "status": "completed"
        }

        result = db.ledger.insert_one(payment_record)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if appointment_oid:
            db.appointments.update_one(
                {"_id": appointment_oid},
                {"$set": {"status_key": "paid", "paid_at": ts}}
            )

        return jsonify({
            "ok": True,
            "payment_id": str(result.inserted_id),
            "amount": amount,
            "method": payment_method
        })

    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500'''

    # –í—Å—Ç–∞–≤–ª—è–µ–º API
    content = content[:func_end] + payment_api + content[func_end:]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ API –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç —Å–æ–∑–¥–∞–Ω")


def implement_financial_reports():
    """8.4: –û—Ç—á–µ—Ç—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π/—É—Å–ª—É–≥"""
    print("\n=== 8.4: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã ===")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã
    report_indicators = [
        "/finance_report",
        "doctor.*revenue",
        "service.*income",
        "financial.*analytics",
    ]

    has_reports = any(re.search(indicator, content) for indicator in report_indicators)

    if has_reports:
        print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤—Ä–∞—á–∞–º
        if "doctor.*income" in content or "revenue.*doctor" in content:
            print("‚úÖ –û—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–∞—á–∞–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        else:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–∞—á–∞–º...")
            add_doctor_revenue_reports()
    else:
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã...")
        create_financial_reports()


def add_doctor_revenue_reports():
    """–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π"""
    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π finance_report
    report_pos = content.find("def finance_report")
    if report_pos == -1:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è finance_report –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π API –æ—Ç—á–µ—Ç–∞ –ø–æ –≤—Ä–∞—á–∞–º
    func_end = content.find("\n\n@app.route", report_pos)
    if func_end == -1:
        func_end = content.find("\n@app.route", report_pos + 100)

    doctor_report_api = '''

@app.route("/api/reports/doctors_revenue", methods=["GET"])
@login_required
@role_required("admin", "registrar")
def api_doctors_revenue_report():
    """–û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π"""

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")

    # –ë–∞–∑–æ–≤—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    pipeline = [
        # –°–æ–µ–¥–∏–Ω—è–µ–º ledger —Å appointments
        {
            "$lookup": {
                "from": "appointments",
                "localField": "appointment_id",
                "foreignField": "_id",
                "as": "appointment"
            }
        },
        {"$unwind": "$appointment"},

        # –°–æ–µ–¥–∏–Ω—è–µ–º —Å –≤—Ä–∞—á–∞–º–∏
        {
            "$lookup": {
                "from": "doctors",
                "localField": "appointment.doctor_id",
                "foreignField": "_id",
                "as": "doctor"
            }
        },
        {"$unwind": "$doctor"},

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–∞—á–∞–º
        {
            "$group": {
                "_id": "$doctor._id",
                "doctor_name": {"$first": "$doctor.full_name"},
                "total_revenue": {"$sum": "$amount"},
                "appointments_count": {"$sum": 1},
                "avg_check": {"$avg": "$amount"}
            }
        },

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ—Ö–æ–¥—É
        {"$sort": {"total_revenue": -1}}
    ]

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if start_date and end_date:
        try:
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d") + timedelta(days=1)

            pipeline.insert(0, {
                "$match": {
                    "ts": {"$gte": start_dt, "$lt": end_dt},
                    "kind": "payment"
                }
            })
        except ValueError:
            pass
    else:
        pipeline.insert(0, {"$match": {"kind": "payment"}})

    try:
        results = list(db.ledger.aggregate(pipeline))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        doctors_revenue = []
        for result in results:
            doctors_revenue.append({
                "doctor_id": str(result["_id"]),
                "doctor_name": result["doctor_name"],
                "total_revenue": int(result["total_revenue"]),
                "appointments_count": result["appointments_count"],
                "avg_check": int(result["avg_check"])
            })

        return jsonify({
            "ok": True,
            "period": f"{start_date} - {end_date}" if start_date and end_date else "–í—Å–µ –≤—Ä–µ–º—è",
            "doctors": doctors_revenue,
            "total_doctors": len(doctors_revenue)
        })

    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500'''

    # –í—Å—Ç–∞–≤–ª—è–µ–º API
    content = content[:func_end] + doctor_report_api + content[func_end:]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –û—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π –¥–æ–±–∞–≤–ª–µ–Ω")


def create_financial_reports():
    """–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"""
    print("–°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    add_doctor_revenue_reports()


def test_finance_integration():
    """8.5-8.6: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\n=== 8.5-8.6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ===")

    try:
        load_dotenv()
        client = MongoClient(os.getenv("MONGO_URI"))
        db = client[os.getenv("DB_NAME", "medplatforma")]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        total_appointments = db.appointments.count_documents({})
        appointments_with_services = db.appointments.count_documents({"service_id": {"$ne": None}})
        ledger_entries = db.ledger.count_documents({})

        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_appointments}")
        print(f"–ó–∞–ø–∏—Å–µ–π —Å —É—Å–ª—É–≥–∞–º–∏: {appointments_with_services}")
        print(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {ledger_entries}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π –≤ ledger
        operation_types = db.ledger.distinct("kind")
        print(f"–¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π: {operation_types}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ª–≥–∏
        if "service_charge" in operation_types and "payment" in operation_types:
            total_charges = list(
                db.ledger.aggregate(
                    [
                        {"$match": {"kind": "service_charge"}},
                        {"$group": {"_id": None, "total": {"$sum": "$amount"}}},
                    ]
                )
            )

            total_payments = list(
                db.ledger.aggregate(
                    [
                        {"$match": {"kind": "payment"}},
                        {"$group": {"_id": None, "total": {"$sum": "$amount"}}},
                    ]
                )
            )

            charges_sum = total_charges[0]["total"] if total_charges else 0
            payments_sum = total_payments[0]["total"] if total_payments else 0

            print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —É—Å–ª—É–≥: {charges_sum}‚ÇΩ")
            print(f"üí≥ –û–±—â–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç: {payments_sum}‚ÇΩ")
            print(f"üí∏ –û–±—â–∏–π –¥–æ–ª–≥: {charges_sum - payments_sum}‚ÇΩ")

            if ledger_entries > 0:
                print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                return True

        print("‚ö†Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def create_finance_summary():
    """–°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n" + "=" * 60)
    print("üí∞ –°–í–û–î–ö–ê –ü–û –§–ò–ù–ê–ù–°–û–í–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò (–∑–∞–¥–∞—á–∏ 8.1-8.6)")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    finance_status = check_current_finance_status()

    tasks = [
        ("8.1", "–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã", True),
        ("8.2", "–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–∞", implement_appointment_finance_link()),
        ("8.3", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç", implement_payment_processing()),
        ("8.4", "–û—Ç—á–µ—Ç—ã –ø–æ –≤—Ä–∞—á–∞–º/—É—Å–ª—É–≥–∞–º", implement_financial_reports()),
        ("8.5-8.6", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏", test_finance_integration()),
    ]

    completed = 0
    for task_id, description, status in tasks:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"{icon} {task_id}: {description}")
        if status:
            completed += 1

    print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}/{len(tasks)} –∑–∞–¥–∞—á")

    if completed >= len(tasks) * 0.8:
        print("üéâ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê!")
        return True
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False


def main():
    print("üí∞ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
    print("–ó–∞–¥–∞—á–∏ 8.1-8.6 –∏–∑ —á–µ–∫-–ª–∏—Å—Ç–∞")
    print("=" * 60)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    success = create_finance_summary()

    print("\n" + "=" * 60)
    print("üîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")

    if success:
        print("1. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¥–æ–ª–≥")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ API /api/payments/process")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π")
        print("5. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –∑–∞–¥–∞—á–∞–º 9.1-9.4: –†–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    else:
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–Ω —É—Å–ª—É–≥")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤ –∏ –æ–ø–ª–∞—Ç")

    print("\n–î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("- –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø–∏—Å—å —Å —É—Å–ª—É–≥–æ–π (–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å—Å—è –¥–æ–ª–≥)")
    print("- –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ API –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ 'paid'")
    print("- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Ö–æ–¥–∞–º –≤—Ä–∞—á–µ–π")


if __name__ == "__main__":
    main()
