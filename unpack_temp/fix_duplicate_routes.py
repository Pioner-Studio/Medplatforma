#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ main.py
"""

import os
import re


def find_duplicate_routes():
    """–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("üîç –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 40)

    main_py_path = "main.py"

    if not os.path.exists(main_py_path):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
    route_pattern = r'@app\.route\([\'"]([^\'"]+)[\'"].*?\)\s*\ndef\s+(\w+)'
    routes = re.findall(route_pattern, content, re.MULTILINE)

    print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
    route_count = {}
    function_count = {}

    for route_path, function_name in routes:
        print(f"   {route_path} ‚Üí {function_name}()")

        # –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if route_path in route_count:
            route_count[route_path] += 1
        else:
            route_count[route_path] = 1

        # –°—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
        if function_name in function_count:
            function_count[function_name] += 1
        else:
            function_count[function_name] = 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicated_routes = {k: v for k, v in route_count.items() if v > 1}
    duplicated_functions = {k: v for k, v in function_count.items() if v > 1}

    print(f"\n‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:")
    for route, count in duplicated_routes.items():
        print(f"   {route} (–Ω–∞–π–¥–µ–Ω–æ {count} —Ä–∞–∑)")

    print(f"\n‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    for func, count in duplicated_functions.items():
        print(f"   {func}() (–Ω–∞–π–¥–µ–Ω–æ {count} —Ä–∞–∑)")

    return duplicated_routes, duplicated_functions


def remove_duplicate_routes():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print(f"\nüîß –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 40)

    main_py_path = "main.py"

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = main_py_path + ".backup_duplicates"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.writelines(lines)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    content = "".join(lines)

    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    # –ò—â–µ–º –±–ª–æ–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—à–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏

    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ "–û–°–ù–û–í–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ –ú–ï–î–ü–õ–ê–¢–§–û–†–ú–´"
    pattern1 = r"# === –û–°–ù–û–í–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ –ú–ï–î–ü–õ–ê–¢–§–û–†–ú–´ ===.*?# === –ö–û–ù–ï–¶ –û–°–ù–û–í–ù–´–• –°–¢–†–ê–ù–ò–¶ ==="
    match1 = re.search(pattern1, content, re.DOTALL)
    if match1:
        content = content.replace(match1.group(0), "")
        print("‚úÖ –£–¥–∞–ª–µ–Ω –±–ª–æ–∫ '–û–°–ù–û–í–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ –ú–ï–î–ü–õ–ê–¢–§–û–†–ú–´'")

    # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ "–ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ê–†–®–†–£–¢–´"
    pattern2 = r"# === –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ê–†–®–†–£–¢–´ ===.*?# === –ö–û–ù–ï–¶ –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –ú–ê–†–®–†–£–¢–û–í ==="
    match2 = re.search(pattern2, content, re.DOTALL)
    if match2:
        content = content.replace(match2.group(0), "")
        print("‚úÖ –£–¥–∞–ª–µ–Ω –±–ª–æ–∫ '–ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ê–†–®–†–£–¢–´'")

    # –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    duplicated_routes = [
        r"@app\.route\(\'/doctors\'\)\s*\ndef doctors\(\):.*?(?=@app\.route|if __name__|$)",
        r"@app\.route\(\'/patients\'\)\s*\ndef patients\(\):.*?(?=@app\.route|if __name__|$)",
        r"@app\.route\(\'/services\'\)\s*\ndef services\(\):.*?(?=@app\.route|if __name__|$)",
        r"@app\.route\(\'/rooms\'\)\s*\ndef rooms\(\):.*?(?=@app\.route|if __name__|$)",
        r"@app\.route\(\'/reports\'\)\s*\ndef reports\(\):.*?(?=@app\.route|if __name__|$)",
    ]

    removed_count = 0
    for pattern in duplicated_routes:
        matches = list(re.finditer(pattern, content, re.DOTALL))
        if len(matches) > 1:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
            for match in reversed(matches[1:]):
                content = content[: match.start()] + content[match.end() :]
                removed_count += 1

    if removed_count > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(main_py_path, "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –§–∞–π–ª –æ—á–∏—â–µ–Ω –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    return True


def check_syntax_after_cleanup():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
    print(f"\nüß™ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê")
    print("=" * 30)

    try:
        import ast

        with open("main.py", "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
        ast.parse(content)
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
        return True

    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:")
        print(f"   –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text.strip() if e.text else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        print(f"   –û—à–∏–±–∫–∞: {e.msg}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def add_missing_routes_safely():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print(f"\nüîß –ë–ï–ó–û–ü–ê–°–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 40)

    main_py_path = "main.py"

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_routes = []

    if not re.search(r"@app\.route\(\'/patients\'\)", content):
        missing_routes.append("patients")
    if not re.search(r"@app\.route\(\'/services\'\)", content):
        missing_routes.append("services")
    if not re.search(r"@app\.route\(\'/doctors\'\)", content):
        missing_routes.append("doctors")
    if not re.search(r"@app\.route\(\'/rooms\'\)", content):
        missing_routes.append("rooms")
    if not re.search(r"@app\.route\(\'/reports\'\)", content):
        missing_routes.append("reports")

    print(f"üìã –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã: {missing_routes}")

    if not missing_routes:
        print("‚úÖ –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        return True

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes_code = ""

    if "patients" in missing_routes:
        routes_code += '''
@app.route('/patients')
def patients():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    try:
        patients_list = list(db.patients.find().sort('name', 1))
        for patient in patients_list:
            patient['appointments_count'] = db.appointments.count_documents({
                'patient_id': str(patient['_id'])
            })
        return render_template('patients.html', patients=patients_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}', 'error')
        return render_template('patients.html', patients=[])
'''

    if "services" in missing_routes:
        routes_code += '''
@app.route('/services')
def services():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥"""
    try:
        services_list = list(db.services.find({'active': True}).sort('name', 1))
        return render_template('services.html', services=services_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥: {str(e)}', 'error')
        return render_template('services.html', services=[])
'''

    if "doctors" in missing_routes:
        routes_code += '''
@app.route('/doctors')
def doctors():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π"""
    try:
        doctors_list = list(db.doctors.find({'active': True}).sort('name', 1))
        for doctor in doctors_list:
            doctor['appointments_count'] = db.appointments.count_documents({
                'doctor_id': str(doctor['_id'])
            })
        return render_template('doctors.html', doctors=doctors_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–∞—á–µ–π: {str(e)}', 'error')
        return render_template('doctors.html', doctors=[])
'''

    if "rooms" in missing_routes:
        routes_code += '''
@app.route('/rooms')
def rooms():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏"""
    try:
        rooms_list = list(db.rooms.find().sort('number', 1))
        return render_template('rooms.html', rooms=rooms_list)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {str(e)}', 'error')
        return render_template('rooms.html', rooms=[])
'''

    if "reports" in missing_routes:
        routes_code += '''
@app.route('/reports')
def reports():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        today = datetime.now()
        month_start = today.replace(day=1).strftime('%Y-%m-%d')

        total_appointments = db.appointments.count_documents({
            'date': {'$gte': month_start}
        })

        stats = {
            'total_appointments': total_appointments,
            'period': month_start
        }

        return render_template('reports.html', stats=stats)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}', 'error')
        return render_template('reports.html', stats={})
'''

    if routes_code:
        # –ù–∞–π–¥–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        pattern = r'(if __name__ == ["\']__main__["\']:.*)'
        match = re.search(pattern, content, re.DOTALL)

        if match:
            content = content.replace(match.group(1), f"\n{routes_code}\n\n{match.group(1)}")
        else:
            content += f"\n{routes_code}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(main_py_path, "w", encoding="utf-8") as f:
            f.write(content)

        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã: {', '.join(missing_routes)}")

    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–• –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 50)

    # 1. –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicated_routes, duplicated_functions = find_duplicate_routes()

    if not duplicated_routes and not duplicated_functions:
        print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # 2. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    if not remove_duplicate_routes():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        return

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    if not check_syntax_after_cleanup():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        return

    # 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
    if not add_missing_routes_safely():
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        return

    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if check_syntax_after_cleanup():
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
        print("python main.py")
        print("\n–∏–ª–∏")
        print("flask --app main run --no-reload")
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")


if __name__ == "__main__":
    main()
