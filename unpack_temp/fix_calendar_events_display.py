# fix_calendar_events_display.py
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

import re


def fix_api_events_function():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_events –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π"""
    print("=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ api_events ===")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_events –ø–æ–ª–Ω–æ—Å—Ç—å—é
    api_events_pattern = r'@app\.route\("/api/events"\).*?@login_required.*?def api_events\(\):.*?return jsonify\(events\)'

    new_api_events = """@app.route("/api/events")
@login_required
def api_events():
    # 1) –î–∏–∞–ø–∞–∑–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π —à–ª—ë—Ç FullCalendar
    start_str = request.args.get("start")
    end_str = request.args.get("end")
    patient_id = (request.args.get("patient_id") or "").strip()

    # 2) –§–∏–ª—å—Ç—Ä—ã (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ id, –∏ –∏–º–µ–Ω–∞)
    doctor_id = request.args.get("doctor_id")
    room_id = request.args.get("room_id")
    room_name = request.args.get("room_name")
    service_id = request.args.get("service_id")
    service_name = request.args.get("service_name")

    start_dt = parse_iso(start_str)
    end_dt = parse_iso(end_str)

    # 3) –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    q = {}
    if start_dt and end_dt:
        q["start"] = {"$lt": end_dt}
        q["end"] = {"$gt": start_dt}

    # üî• –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –†–û–õ–Ø–ú
    user_role = session.get("user_role", "")
    user_id = session.get("user_id", "")

    if user_role == "doctor":
        # –í—Ä–∞—á –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
        try:
            # –ù–∞—Ö–æ–¥–∏–º ObjectId –≤—Ä–∞—á–∞ –ø–æ user_id
            user_doc = db.users.find_one({"_id": ObjectId(user_id)})
            if user_doc:
                # –ò—â–µ–º –≤—Ä–∞—á–∞ –ø–æ email/login
                doctor = db.doctors.find_one({"email": user_doc.get("login", "")})
                if doctor:
                    q["doctor_id"] = doctor["_id"]
                else:
                    # –ï—Å–ª–∏ —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
                    return jsonify([])
            else:
                return jsonify([])
        except Exception:
            return jsonify([])

    elif user_role == "registrar":
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        pass

    elif user_role == "admin":
        # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
        pass

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        pass

    # 4) –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–∞—á—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
    if doctor_id:
        try:
            q["doctor_id"] = ObjectId(doctor_id)
        except Exception:
            pass

    # 5) –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É
    if room_id:
        try:
            q["room_id"] = ObjectId(room_id)
        except Exception:
            pass
    elif room_name:
        r = db.rooms.find_one({"name": room_name}, {"_id": 1})
        if r:
            q["room_id"] = r["_id"]

    # 6) –§–∏–ª—å—Ç—Ä –ø–æ —É—Å–ª—É–≥–µ
    if service_id:
        try:
            q["service_id"] = ObjectId(service_id)
        except Exception:
            pass
    elif service_name:
        s = db.services.find_one({"name": service_name}, {"_id": 1})
        if s:
            q["service_id"] = s["_id"]

    # 6+) –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É
    if patient_id:
        try:
            q["patient_id"] = ObjectId(patient_id)
        except Exception:
            pass

    # 7) –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π/—Ü–≤–µ—Ç–æ–≤
    doctors_map = {str(d["_id"]): d for d in db.doctors.find({}, {"full_name": 1, "avatar": 1})}
    patients_map = {str(p["_id"]): p for p in db.patients.find({}, {"full_name": 1, "avatar": 1})}
    services_map = {
        str(s["_id"]): s for s in db.services.find({}, {"name": 1, "color": 1, "duration_min": 1})
    }
    status_map = {
        s["key"]: s for s in db.visit_statuses.find({}, {"key": 1, "title": 1, "color": 1})
    }
    rooms_map = {str(r["_id"]): r for r in db.rooms.find({}, {"name": 1})}

    # 8) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ FullCalendar
    events = []
    cursor = db.appointments.find(q).sort("start", 1)

    for a in cursor:
        # --- –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å None)
        did = str(a.get("doctor_id") or "")
        pid = str(a.get("patient_id") or "")
        sid = str(a.get("service_id") or "")
        rid = str(a.get("room_id") or "")

        # --- –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç–∏–ø datetime
        a_start = to_dt(a.get("start"))
        if not a_start:
            # –±–∏—Ç–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –¥–∞—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

        a_end = to_dt(a.get("end"))
        if not a_end:
            # –µ—Å–ª–∏ –Ω–µ—Ç end ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ 30 –º–∏–Ω
            dur = services_map.get(sid, {}).get("duration_min", 30)
            try:
                dur = int(dur)
            except Exception:
                dur = 30
            a_end = add_minutes(a_start, dur)

        # --- —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        doc = doctors_map.get(did, {})
        pat = patients_map.get(pid, {})
        srv = services_map.get(sid, {})
        rm = rooms_map.get(rid, {})
        st = status_map.get(a.get("status_key", "scheduled"), {})

        # --- –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è
        title = f'{srv.get("name", "–£—Å–ª—É–≥–∞")} ‚Äî {pat.get("full_name", "–ü–∞—Ü–∏–µ–Ω—Ç")}'

        events.append(
            {
                "id": str(a["_id"]),
                "title": title,
                "start": a_start.isoformat(),
                "end": a_end.isoformat(),
                "backgroundColor": st.get("color") or srv.get("color") or "#3498db",
                "borderColor": st.get("color") or srv.get("color") or "#3498db",
                "extendedProps": {
                    "patient": pat.get("full_name", ""),
                    "doctor": doc.get("full_name", ""),
                    "service": srv.get("name", ""),
                    "room": rm.get("name", ""),
                    "status": st.get("title", ""),
                    "doctor_id": did,
                    "patient_id": pid,
                    "service_id": sid,
                    "room_id": rid,
                },
            }
        )

    return jsonify(events)"""

    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    content = re.sub(api_events_pattern, new_api_events, content, flags=re.DOTALL)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(content)

    print("‚úÖ –§—É–Ω–∫—Ü–∏—è api_events –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")


def ensure_role_required_decorator():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä role_required –¥–æ–±–∞–≤–ª–µ–Ω –∫ api_events"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è api_events ===")

    with open("main.py", "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_events
    api_events_pos = content.find('@app.route("/api/events")')
    if api_events_pos == -1:
        print("‚ùå –§—É–Ω–∫—Ü–∏—è api_events –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ @role_required
    func_section = content[api_events_pos : api_events_pos + 500]

    if "@role_required" not in func_section:
        print("–î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @role_required –∫ api_events...")

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é def api_events
        def_pos = content.find("def api_events():", api_events_pos)
        if def_pos != -1:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π
            role_decorator = '@role_required("admin", "registrar", "doctor")\n'
            content = content[:def_pos] + role_decorator + content[def_pos:]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open("main.py", "w", encoding="utf-8") as f:
                f.write(content)

            print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ api_events")
    else:
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —É–∂–µ –µ—Å—Ç—å —É api_events")


def check_appointments_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö appointments ===")

    try:
        from dotenv import load_dotenv
        from pymongo import MongoClient
        import os

        load_dotenv()
        client = MongoClient(os.getenv("MONGO_URI"))
        db = client[os.getenv("DB_NAME", "medplatforma")]

        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
        total_appointments = db.appointments.count_documents({})
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_appointments}")

        if total_appointments > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            sample = list(db.appointments.find({}).limit(3))
            print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
            for i, appt in enumerate(sample, 1):
                print(f"  {i}. ID: {appt.get('_id')}")
                print(f"     –ù–∞—á–∞–ª–æ: {appt.get('start')}")
                print(f"     –ö–æ–Ω–µ—Ü: {appt.get('end')}")
                print(f"     –í—Ä–∞—á ID: {appt.get('doctor_id')}")
                print(f"     –ü–∞—Ü–∏–µ–Ω—Ç ID: {appt.get('patient_id')}")
                print()
        else:
            print("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        doctors_count = db.doctors.count_documents({})
        patients_count = db.patients.count_documents({})
        services_count = db.services.count_documents({})

        print(f"–í—Ä–∞—á–µ–π: {doctors_count}")
        print(f"–ü–∞—Ü–∏–µ–Ω—Ç–æ–≤: {patients_count}")
        print(f"–£—Å–ª—É–≥: {services_count}")

        return total_appointments > 0

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False


def test_api_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API /api/events ===")

    try:
        import requests
        from datetime import datetime, timedelta

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–∫–∞–∫ FullCalendar)
        start_date = datetime.now().replace(day=1)
        end_date = start_date + timedelta(days=32)

        params = {"start": start_date.isoformat(), "end": end_date.isoformat()}

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get("http://localhost:5000/api/events", params=params)

        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")

        if response.status_code == 200:
            try:
                events = response.json()
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")

                if events:
                    print("–ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:")
                    first_event = events[0]
                    for key, value in first_event.items():
                        print(f"  {key}: {value}")
                else:
                    print("–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text[:500])
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            print("–û—Ç–≤–µ—Ç:", response.text[:500])

    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


def main():
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ó–ê–ü–ò–°–ï–ô –í –ö–ê–õ–ï–ù–î–ê–†–ï")
    print("=" * 60)

    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é api_events
    fix_api_events_function()

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    ensure_role_required_decorator()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    has_data = check_appointments_data()

    if not has_data:
        print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π!")
        print("–†–µ—à–µ–Ω–∏–µ:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("2. –ò–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return

    print("\n" + "=" * 60)
    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
    print("\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print("1. python main.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5000")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
    print("4. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –≤–∏–¥–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏")

    print("\n–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º API:")
    test_api_endpoint()


if __name__ == "__main__":
    main()
