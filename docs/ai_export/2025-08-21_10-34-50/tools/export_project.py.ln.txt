    1: # tools/export_project.py
    2: from __future__ import annotations
    3: import os, sys, io, textwrap, zipfile, subprocess
    4: from datetime import datetime
    5: from pathlib import Path
    6: 
    7: # ---------- настройки ----------
    8: PROJECT_ROOT = Path(__file__).resolve().parents[1]
    9: EXPORT_BASE  = PROJECT_ROOT / "docs" / "ai_export"
   10: DOCS_DIR     = PROJECT_ROOT / "docs"
   11: TEMPLATES_DIR= PROJECT_ROOT / "templates"
   12: INCLUDE_GLOBS= ("*.py","*.html","*.css","*.js")
   13: EXCLUDE_DIRS = {".git", ".venv", "__pycache__", "node_modules", "dist", "build"}
   14: TREE_SKIP    = EXCLUDE_DIRS | {"docs", "static/avatars", "static/ztl"}
   15: 
   16: # ---------- вспомогательные ----------
   17: def ts() -> str:
   18:     return datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
   19: 
   20: def rel(p: Path) -> str:
   21:     return str(p.relative_to(PROJECT_ROOT)).replace("\\","/")
   22: 
   23: def ensure_dir(p: Path) -> None:
   24:     p.mkdir(parents=True, exist_ok=True)
   25: 
   26: def number_lines(text: str) -> str:
   27:     out = io.StringIO()
   28:     for i, line in enumerate(text.splitlines(True), 1):
   29:         out.write(f"{i:5}: {line}")
   30:     return out.getvalue()
   31: 
   32: def tree(root: Path, skip: set[str]) -> str:
   33:     lines = []
   34:     for base, dirs, files in os.walk(root):
   35:         b = Path(base)
   36:         r = rel(b)
   37:         name = "." if b == root else r
   38:         depth = 0 if b == root else len(r.split("/"))
   39:         # фильтр папок «на месте», чтобы os.walk внутрь не заходил
   40:         dirs[:] = sorted([d for d in dirs if d not in skip and not d.startswith(".")])
   41:         files = sorted([f for f in files if not f.startswith(".")])
   42:         prefix = "    " * depth
   43:         if b != root:
   44:             lines.append(f"{prefix}{b.name}/")
   45:         for f in files:
   46:             lines.append(f"{prefix}    {f}")
   47:     return "\n".join(lines)
   48: 
   49: def git_ls_files() -> list[str]:
   50:     try:
   51:         out = subprocess.check_output(["git","ls-files"], cwd=PROJECT_ROOT, text=True, stderr=subprocess.DEVNULL)
   52:         return [ln.strip() for ln in out.splitlines() if ln.strip()]
   53:     except Exception:
   54:         # fallback: просто пройтись по диску
   55:         files = []
   56:         for base, dirs, fs in os.walk(PROJECT_ROOT):
   57:             b = Path(base)
   58:             if b.name in EXCLUDE_DIRS: 
   59:                 dirs[:] = []  # внутрь не идём
   60:                 continue
   61:             dirs[:] = [d for d in dirs if d not in EXCLUDE_DIRS and not d.startswith(".")]
   62:             for f in fs:
   63:                 if f.startswith("."): 
   64:                     continue
   65:                 files.append(rel(b/ f))
   66:         return files
   67: 
   68: # ---------- попытка импортировать Flask-приложение ----------
   69: def load_flask_app():
   70:     sys.path.insert(0, str(PROJECT_ROOT))
   71:     try:
   72:         from main import app  # type: ignore
   73:         return app
   74:     except Exception as e:
   75:         print(f"[warn] Не удалось импортировать main.app: {e}")
   76:         return None
   77: 
   78: # ---------- выгрузка маршрутов ----------
   79: def dump_routes(app, out_dir: Path) -> str:
   80:     routes_md = out_dir / "ROUTES.md"
   81:     routes_txt = out_dir / "routes.txt"
   82:     if app is None:
   83:         routes_md.write_text("# ROUTES (не удалось импортировать Flask-приложение)\n", encoding="utf-8")
   84:         routes_txt.write_text("Импорт main.app не удался — маршруты недоступны.\n", encoding="utf-8")
   85:         return "0"
   86: 
   87:     rules = sorted(app.url_map.iter_rules(), key=lambda r: r.rule)
   88:     lines_md = ["# ROUTES", ""]
   89:     lines_txt = []
   90:     cnt = 0
   91:     for r in rules:
   92:         methods = ",".join(sorted(m for m in r.methods if m not in {"HEAD","OPTIONS"}))
   93:         lines_md.append(f"- `{r.rule}`  → **{r.endpoint}**  _[{methods}]_")
   94:         lines_txt.append(f"{r.rule:50} endpoint={r.endpoint:25} methods={methods}")
   95:         cnt += 1
   96:     routes_md.write_text("\n".join(lines_md) + "\n", encoding="utf-8")
   97:     routes_txt.write_text("\n".join(lines_txt) + "\n", encoding="utf-8")
   98:     return str(cnt)
   99: 
  100: # ---------- выгрузка шаблонов и исходников со строками ----------
  101: def dump_sources(out_dir: Path) -> dict[str,int]:
  102:     stats = {"files":0, "templates":0}
  103:     for pat in INCLUDE_GLOBS:
  104:         for p in PROJECT_ROOT.rglob(pat):
  105:             # пропустим мусор
  106:             if any(part in EXCLUDE_DIRS for part in p.parts): 
  107:                 continue
  108:             if "/." in rel(p): 
  109:                 continue
  110:             data = p.read_text(encoding="utf-8", errors="ignore")
  111:             numbered = number_lines(data)
  112:             target = out_dir / (rel(p) + ".ln.txt")
  113:             ensure_dir(target.parent)
  114:             target.write_text(numbered, encoding="utf-8")
  115:             stats["files"] += 1
  116:             if p.suffix == ".html":
  117:                 stats["templates"] += 1
  118:     return stats
  119: 
  120: # ---------- структура проекта ----------
  121: def dump_structure(out_dir: Path) -> None:
  122:     STRUCT = out_dir / "STRUCTURE.md"
  123:     TREE = tree(PROJECT_ROOT, TREE_SKIP)
  124:     STRUCT.write_text("# STRUCTURE\n\n```\n"+TREE+"\n```\n", encoding="utf-8")
  125: 
  126: # ---------- чек-лист ----------
  127: CHECKLIST_TEMPLATE = """# CHECKLIST
  128: 
  129: - [ ] Подтянуть `main.py` и запустить приложение локально
  130: - [ ] Проверить авторизацию и доступ к MongoDB (переменная `MONGO_URI` в `.env`)
  131: - [ ] Заполнить демо-данные при необходимости (скрипты `seed_*.py`)
  132: - [ ] Проверить ключевые экраны: Календарь, Пациенты, Сообщения, Отчёты
  133: - [ ] Сделать ежедневную синхронизацию (commit → push), создать `docs.zip`
  134: - [ ] Отметить прогресс в `docs/ROADMAP.md` и `docs/STATUS.md`
  135: """
  136: 
  137: def update_checklist(out_dir: Path) -> None:
  138:     checklist_dst = out_dir / "CHECKLIST.md"
  139:     repo_checklist = DOCS_DIR / "CHECKLIST.md"
  140:     if repo_checklist.exists():
  141:         checklist_dst.write_text(repo_checklist.read_text(encoding="utf-8"), encoding="utf-8")
  142:     else:
  143:         checklist_dst.write_text(CHECKLIST_TEMPLATE, encoding="utf-8")
  144: 
  145: # ---------- статус ----------
  146: def write_status(out_dir: Path, routes_count: str, files_cnt: int, tmpl_cnt: int) -> None:
  147:     status = out_dir / "STATUS.md"
  148:     status.write_text(textwrap.dedent(f"""
  149:         # STATUS
  150:         - timestamp: {datetime.now().isoformat(timespec="seconds")}
  151:         - routes: {routes_count}
  152:         - files (with line numbers): {files_cnt}
  153:         - templates: {tmpl_cnt}
  154:     """).strip()+"\n", encoding="utf-8")
  155: 
  156: # ---------- упаковка в zip ----------
  157: def pack_zip(subdir: Path) -> Path:
  158:     zip_path = DOCS_DIR / f"export_{subdir.name}.zip"
  159:     with zipfile.ZipFile(zip_path, "w", compression=zipfile.ZIP_DEFLATED) as z:
  160:         for p in subdir.rglob("*"):
  161:             if p.is_file():
  162:                 z.write(p, arcname=str(Path("ai_export")/subdir.name/p.relative_to(subdir)))
  163:     return zip_path
  164: 
  165: # ---------- основная процедура ----------
  166: def main():
  167:     os.chdir(PROJECT_ROOT)
  168:     ensure_dir(EXPORT_BASE)
  169:     subdir = EXPORT_BASE / ts()
  170:     ensure_dir(subdir)
  171: 
  172:     app = load_flask_app()
  173:     routes_count = dump_routes(app, subdir)
  174:     stats = dump_sources(subdir)
  175:     dump_structure(subdir)
  176:     update_checklist(subdir)
  177:     write_status(subdir, routes_count, stats["files"], stats["templates"])
  178: 
  179:     # список файлов по git
  180:     (subdir / "INVENTORY.md").write_text(
  181:         "# INVENTORY (git ls-files)\n\n" + "\n".join(f"- {p}" for p in git_ls_files()) + "\n",
  182:         encoding="utf-8"
  183:     )
  184: 
  185:     zip_path = pack_zip(subdir)
  186:     print(f"[ok] Экспорт готов: {rel(subdir)}")
  187:     print(f"[ok] Архив: {rel(zip_path)}")
  188: 
  189: if __name__ == "__main__":
  190:     main()
