    1: import random
    2: from pymongo import MongoClient
    3: from datetime import datetime, timedelta
    4: 
    5: client = MongoClient("mongodb+srv://medadmin:medpass123@medplatforma.cnv7fbo.mongodb.net/")
    6: db = client['medplatforma']
    7: 
    8: # Очистим старых врачей
    9: db.doctors.delete_many({})
   10: 
   11: names = [
   12:     "Петров П.П.", "Иванова О.К.", "Кузнецов А.С.", "Сидорова Д.Л.",
   13:     "Смирнов М.В.", "Соколова Е.А.", "Васильев И.И.", "Никитина Н.А.",
   14:     "Макаров В.Р.", "Орлова Ю.Л."
   15: ]
   16: specialties = [
   17:     "Хирург", "Ортопед", "Терапевт", "Гигиенист", "Имплантолог", "Ортодонт"
   18: ]
   19: positions = [
   20:     "Главврач", "Стоматолог-терапевт", "Стоматолог-хирург", "Ортодонт", "Ортопед", "Гигиенист"
   21: ]
   22: educations = [
   23:     "МГМСУ им. Евдокимова, диплом с отличием (2010)",
   24:     "РНИМУ им. Пирогова (2012)",
   25:     "Санкт-Петербургский медуниверситет (2014)",
   26:     "Казанский ГМУ (2011)",
   27:     "Московский медуниверситет (2013)"
   28: ]
   29: certificates = [
   30:     "Повышение квалификации: Dentsply Sirona (2022)",
   31:     "Имплантология Nobel Biocare (2023)",
   32:     "Курс микроскопной терапии (2021)",
   33:     "Авторские мастер-классы (2022)",
   34:     "Участие в международных конференциях (2024)"
   35: ]
   36: bios = [
   37:     "Работает в клинике с {since}. Сотни успешных операций. Внедряет современные методики.",
   38:     "Постоянно проходит обучение. Ведёт научную деятельность.",
   39:     "Проводит сложнейшие операции и консультации. Более 1000 довольных пациентов.",
   40:     "Лектор международных конгрессов, эксперт в эстетической стоматологии.",
   41:     "Разработал уникальные протоколы реабилитации пациентов."
   42: ]
   43: reviews_samples = [
   44:     {"stars": 5, "text": "Врач от Бога, рекомендую всем!", "date": "05.2024"},
   45:     {"stars": 4, "text": "Очень внимательный, всё подробно объяснил.", "date": "03.2024"},
   46:     {"stars": 5, "text": "Сделала имплантацию — результат супер!", "date": "01.2024"},
   47:     {"stars": 5, "text": "Спасибо за профессионализм и заботу!", "date": "11.2023"}
   48: ]
   49: cases_samples = [
   50:     {"before": "/static/cases/before1.jpg", "after": "/static/cases/after1.jpg"},
   51:     {"before": "/static/cases/before2.jpg", "after": "/static/cases/after2.jpg"}
   52: ]
   53: files_samples = [
   54:     {"type": "image", "url": "/static/files/sertifikat_1.jpg", "name": "Сертификат 2022"},
   55:     {"type": "pdf", "url": "/static/files/diplom.pdf", "name": "Диплом"},
   56: ]
   57: 
   58: def generate_events():
   59:     today = datetime(2025, 7, 8)
   60:     events = []
   61:     for i in range(3):
   62:         day = today + timedelta(days=i)
   63:         events.append({
   64:             "title": random.choice(["Пломба", "Консультация", "Лечение", "Имплантация"]),
   65:             "start": (day + timedelta(hours=10 + i)).strftime('%Y-%m-%dT%H:00:00'),
   66:             "end": (day + timedelta(hours=10 + i, minutes=30)).strftime('%Y-%m-%dT%H:30:00'),
   67:             "color": random.choice(["#A2C6FA", "#B4F0C0", "#FDE8A5"])
   68:         })
   69:     return events
   70: 
   71: def random_phone():
   72:     return "+79" + "".join([str(random.randint(0, 9)) for _ in range(9)])
   73: 
   74: def random_email(name):
   75:     return name.replace(" ", ".").replace(".", "").lower() + "@clinic.ru"
   76: 
   77: def random_telegram(name):
   78:     return name.split()[0].lower() + str(random.randint(100, 999))
   79: 
   80: def random_whatsapp(phone):
   81:     return phone.replace("+", "")
   82: 
   83: # Генерация расписания в правильном формате для интерфейса (Пн=1 ... Сб=6, Вс=0)
   84: def random_schedule():
   85:     work_days = sorted(random.sample([1,2,3,4,5,6], k=random.randint(4,6)))  # 4–6 рабочих дней
   86:     sch = {}
   87:     for d in work_days:
   88:         start = random.choice(["09:00", "10:00", "12:00"])
   89:         end = random.choice(["16:00", "17:00", "18:00", "19:00"])
   90:         if start < end:
   91:             sch[str(d)] = {"start": start, "end": end}
   92:         else:
   93:             sch[str(d)] = {"start": "09:00", "end": "17:00"}
   94:     return sch
   95: 
   96: doctors = []
   97: for i, name in enumerate(names):
   98:     phone = random_phone()
   99:     since_year = 2012 + i % 7
  100:     experience = 2025 - since_year
  101:     doc = {
  102:         "_id": f"doc{str(i+1).zfill(3)}",
  103:         "full_name": name,
  104:         "avatar_url": f"/static/avatars/doctor_{i+1}.png",
  105:         "position": random.choice(positions),
  106:         "specialization": random.choice(specialties),
  107:         "phone": phone,
  108:         "email": random_email(name),
  109:         "telegram": random_telegram(name),
  110:         "whatsapp": random_whatsapp(phone),
  111:         "reg_address": "г. Москва, ул. Профсоюзная, д. " + str(5+i),
  112:         "live_address": "г. Москва, ул. Профсоюзная, д. " + str(5+i),
  113:         "notes": "Врач высшей категории.",
  114:         "schedule": random_schedule(),
  115:         "card_number": f"DOC{1000+i}",
  116:         "created_at": "2025-07-01",
  117:         "since": str(since_year),
  118:         "experience": experience,
  119:         "education": random.choice(educations),
  120:         "certificates": random.choice(certificates),
  121:         "bio": random.choice(bios).format(since=since_year),
  122:         "files": random.sample(files_samples, k=random.randint(1,2)),
  123:         "reviews": random.sample(reviews_samples, k=random.randint(2,4)),
  124:         "cases": random.sample(cases_samples, k=random.randint(1,2)),
  125:         "events": generate_events()
  126:     }
  127:     doctors.append(doc)
  128: 
  129: db.doctors.insert_many(doctors)
  130: print("Демо-врачи с расписанием успешно сгенерированы!")
