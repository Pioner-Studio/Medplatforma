    1: from __future__ import annotations
    2: 
    3: from abc import ABC, abstractmethod
    4: from typing import Any, Generic, Hashable, TypeVar
    5: 
    6: try:
    7:     from typing import Self  # pragma: в‰Ґ 3.11 cover
    8: except ImportError:
    9:     from typing_extensions import Self  # pragma: < 3.11 cover
   10: 
   11: K = TypeVar("K", bound=Hashable)
   12: 
   13: 
   14: class Cache(ABC, Generic[K]):
   15:     """
   16:     A generic cache interface.
   17: 
   18:     Add a close() method if the cache needs to perform any cleanup actions,
   19:     and an __exit__ method to allow it to be used in a context manager.
   20:     """
   21: 
   22:     @abstractmethod
   23:     def get(self, key: K) -> Any | None:
   24:         """
   25:         Get a value from the cache.
   26: 
   27:         :param key: the key to retrieve
   28:         :return: the cached value, or None if not found
   29:         """
   30:         raise NotImplementedError
   31: 
   32:     @abstractmethod
   33:     def set(self, key: K, value: Any) -> None:
   34:         """
   35:         Set a value in the cache.
   36: 
   37:         :param key: the key to set
   38:         :param value: the value to cache
   39:         """
   40:         raise NotImplementedError
   41: 
   42:     @abstractmethod
   43:     def remove(self, key: K) -> None:
   44:         """
   45:         Remove a value from the cache.
   46: 
   47:         :param key: the key to remove
   48:         """
   49:         raise NotImplementedError
   50: 
   51:     @abstractmethod
   52:     def clear(self) -> None:
   53:         """Clear the entire cache."""
   54:         raise NotImplementedError
   55: 
   56:     def __enter__(self) -> Self:
   57:         return self
   58: 
   59: 
   60: __all__ = [
   61:     "Cache",
   62: ]
