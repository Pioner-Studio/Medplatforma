    1: from __future__ import annotations
    2: 
    3: from typing import TYPE_CHECKING, Callable
    4: 
    5: from virtualenv.cache import Cache
    6: 
    7: if TYPE_CHECKING:
    8:     from pathlib import Path
    9: 
   10:     from virtualenv.app_data.base import ContentStore
   11: 
   12: 
   13: class FileCache(Cache):
   14:     def __init__(self, store_factory: Callable[[Path], ContentStore], clearer: Callable[[], None] | None) -> None:
   15:         self.store_factory = store_factory
   16:         self.clearer = clearer
   17: 
   18:     def get(self, key: Path) -> dict | None:
   19:         """Get a value from the file cache."""
   20:         result, store = None, self.store_factory(key)
   21:         with store.locked():
   22:             if store.exists():
   23:                 result = store.read()
   24:         return result
   25: 
   26:     def set(self, key: Path, value: dict) -> None:
   27:         """Set a value in the file cache."""
   28:         store = self.store_factory(key)
   29:         with store.locked():
   30:             store.write(value)
   31: 
   32:     def remove(self, key: Path) -> None:
   33:         """Remove a value from the file cache."""
   34:         store = self.store_factory(key)
   35:         with store.locked():
   36:             if store.exists():
   37:                 store.remove()
   38: 
   39:     def clear(self) -> None:
   40:         """Clear the entire file cache."""
   41:         if self.clearer is not None:
   42:             self.clearer()
   43: 
   44: 
   45: __all__ = [
   46:     "FileCache",
   47: ]
