    1: from __future__ import annotations
    2: 
    3: import os
    4: from pathlib import Path
    5: 
    6: from virtualenv.util.path import copy
    7: 
    8: from .base import PipInstall
    9: 
   10: 
   11: class CopyPipInstall(PipInstall):
   12:     def _sync(self, src, dst):
   13:         copy(src, dst)
   14: 
   15:     def _generate_new_files(self):
   16:         # create the pyc files
   17:         new_files = super()._generate_new_files()
   18:         new_files.update(self._cache_files())
   19:         return new_files
   20: 
   21:     def _cache_files(self):
   22:         version = self._creator.interpreter.version_info
   23:         py_c_ext = f".{self._creator.interpreter.implementation.lower()}-{version.major}{version.minor}.pyc"
   24:         for root, dirs, files in os.walk(str(self._image_dir), topdown=True):
   25:             root_path = Path(root)
   26:             for name in files:
   27:                 if name.endswith(".py"):
   28:                     yield root_path / f"{name[:-3]}{py_c_ext}"
   29:             for name in dirs:
   30:                 yield root_path / name / "__pycache__"
   31: 
   32:     def _fix_records(self, new_files):
   33:         extra_record_data_str = self._records_text(new_files)
   34:         with (self._dist_info / "RECORD").open("ab") as file_handler:
   35:             file_handler.write(extra_record_data_str.encode("utf-8"))
   36: 
   37: 
   38: __all__ = [
   39:     "CopyPipInstall",
   40: ]
