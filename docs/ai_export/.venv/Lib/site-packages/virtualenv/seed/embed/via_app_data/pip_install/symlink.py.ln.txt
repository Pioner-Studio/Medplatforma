    1: from __future__ import annotations
    2: 
    3: import os
    4: from stat import S_IREAD, S_IRGRP, S_IROTH
    5: from subprocess import PIPE, Popen
    6: 
    7: from virtualenv.util.path import safe_delete, set_tree
    8: 
    9: from .base import PipInstall
   10: 
   11: 
   12: class SymlinkPipInstall(PipInstall):
   13:     def _sync(self, src, dst):
   14:         os.symlink(str(src), str(dst))
   15: 
   16:     def _generate_new_files(self):
   17:         # create the pyc files, as the build image will be R/O
   18:         cmd = [str(self._creator.exe), "-m", "compileall", str(self._image_dir)]
   19:         process = Popen(cmd, stdout=PIPE, stderr=PIPE)
   20:         process.communicate()
   21:         # the root pyc is shared, so we'll not symlink that - but still add the pyc files to the RECORD for close
   22:         root_py_cache = self._image_dir / "__pycache__"
   23:         new_files = set()
   24:         if root_py_cache.exists():
   25:             new_files.update(root_py_cache.iterdir())
   26:             new_files.add(root_py_cache)
   27:             safe_delete(root_py_cache)
   28:         core_new_files = super()._generate_new_files()
   29:         # remove files that are within the image folder deeper than one level (as these will be not linked directly)
   30:         for file in core_new_files:
   31:             try:
   32:                 rel = file.relative_to(self._image_dir)
   33:                 if len(rel.parts) > 1:
   34:                     continue
   35:             except ValueError:
   36:                 pass
   37:             new_files.add(file)
   38:         return new_files
   39: 
   40:     def _fix_records(self, new_files):
   41:         new_files.update(i for i in self._image_dir.iterdir())
   42:         extra_record_data_str = self._records_text(sorted(new_files, key=str))
   43:         (self._dist_info / "RECORD").write_text(extra_record_data_str, encoding="utf-8")
   44: 
   45:     def build_image(self):
   46:         super().build_image()
   47:         # protect the image by making it read only
   48:         set_tree(self._image_dir, S_IREAD | S_IRGRP | S_IROTH)
   49: 
   50:     def clear(self):
   51:         if self._image_dir.exists():
   52:             safe_delete(self._image_dir)
   53:         super().clear()
   54: 
   55: 
   56: __all__ = [
   57:     "SymlinkPipInstall",
   58: ]
