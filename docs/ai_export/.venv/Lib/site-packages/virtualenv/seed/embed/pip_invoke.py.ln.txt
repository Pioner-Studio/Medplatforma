    1: from __future__ import annotations
    2: 
    3: import logging
    4: from contextlib import contextmanager
    5: from subprocess import Popen
    6: 
    7: from virtualenv.discovery.cached_py_info import LogCmd
    8: from virtualenv.seed.embed.base_embed import BaseEmbed
    9: from virtualenv.seed.wheels import Version, get_wheel, pip_wheel_env_run
   10: 
   11: LOGGER = logging.getLogger(__name__)
   12: 
   13: 
   14: class PipInvoke(BaseEmbed):
   15:     def __init__(self, options) -> None:
   16:         super().__init__(options)
   17: 
   18:     def run(self, creator):
   19:         if not self.enabled:
   20:             return
   21:         for_py_version = creator.interpreter.version_release_str
   22:         with self.get_pip_install_cmd(creator.exe, for_py_version) as cmd:
   23:             env = pip_wheel_env_run(self.extra_search_dir, self.app_data, self.env)
   24:             self._execute(cmd, env)
   25: 
   26:     @staticmethod
   27:     def _execute(cmd, env):
   28:         LOGGER.debug("pip seed by running: %s", LogCmd(cmd, env))
   29:         process = Popen(cmd, env=env)
   30:         process.communicate()
   31:         if process.returncode != 0:
   32:             msg = f"failed seed with code {process.returncode}"
   33:             raise RuntimeError(msg)
   34:         return process
   35: 
   36:     @contextmanager
   37:     def get_pip_install_cmd(self, exe, for_py_version):
   38:         cmd = [str(exe), "-m", "pip", "-q", "install", "--only-binary", ":all:", "--disable-pip-version-check"]
   39:         if not self.download:
   40:             cmd.append("--no-index")
   41:         folders = set()
   42:         for dist, version in self.distribution_to_versions().items():
   43:             wheel = get_wheel(
   44:                 distribution=dist,
   45:                 version=version,
   46:                 for_py_version=for_py_version,
   47:                 search_dirs=self.extra_search_dir,
   48:                 download=False,
   49:                 app_data=self.app_data,
   50:                 do_periodic_update=self.periodic_update,
   51:                 env=self.env,
   52:             )
   53:             if wheel is None:
   54:                 msg = f"could not get wheel for distribution {dist}"
   55:                 raise RuntimeError(msg)
   56:             folders.add(str(wheel.path.parent))
   57:             cmd.append(Version.as_pip_req(dist, wheel.version))
   58:         for folder in sorted(folders):
   59:             cmd.extend(["--find-links", str(folder)])
   60:         yield cmd
   61: 
   62: 
   63: __all__ = [
   64:     "PipInvoke",
   65: ]
