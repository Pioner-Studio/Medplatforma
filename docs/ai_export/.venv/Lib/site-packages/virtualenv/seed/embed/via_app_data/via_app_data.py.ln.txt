    1: """Bootstrap."""
    2: 
    3: from __future__ import annotations
    4: 
    5: import logging
    6: import sys
    7: import traceback
    8: from contextlib import contextmanager
    9: from pathlib import Path
   10: from subprocess import CalledProcessError
   11: from threading import Lock, Thread
   12: 
   13: from virtualenv.info import fs_supports_symlink
   14: from virtualenv.seed.embed.base_embed import BaseEmbed
   15: from virtualenv.seed.wheels import get_wheel
   16: 
   17: from .pip_install.copy import CopyPipInstall
   18: from .pip_install.symlink import SymlinkPipInstall
   19: 
   20: LOGGER = logging.getLogger(__name__)
   21: 
   22: 
   23: class FromAppData(BaseEmbed):
   24:     def __init__(self, options) -> None:
   25:         super().__init__(options)
   26:         self.symlinks = options.symlink_app_data
   27: 
   28:     @classmethod
   29:     def add_parser_arguments(cls, parser, interpreter, app_data):
   30:         super().add_parser_arguments(parser, interpreter, app_data)
   31:         can_symlink = app_data.transient is False and fs_supports_symlink()
   32:         sym = "" if can_symlink else "not supported - "
   33:         parser.add_argument(
   34:             "--symlink-app-data",
   35:             dest="symlink_app_data",
   36:             action="store_true" if can_symlink else "store_false",
   37:             help=f"{sym} symlink the python packages from the app-data folder (requires seed pip>=19.3)",
   38:             default=False,
   39:         )
   40: 
   41:     def run(self, creator):
   42:         if not self.enabled:
   43:             return
   44:         with self._get_seed_wheels(creator) as name_to_whl:
   45:             pip_version = name_to_whl["pip"].version_tuple if "pip" in name_to_whl else None
   46:             installer_class = self.installer_class(pip_version)
   47:             exceptions = {}
   48: 
   49:             def _install(name, wheel):
   50:                 try:
   51:                     LOGGER.debug("install %s from wheel %s via %s", name, wheel, installer_class.__name__)
   52:                     key = Path(installer_class.__name__) / wheel.path.stem
   53:                     wheel_img = self.app_data.wheel_image(creator.interpreter.version_release_str, key)
   54:                     installer = installer_class(wheel.path, creator, wheel_img)
   55:                     parent = self.app_data.lock / wheel_img.parent
   56:                     with parent.non_reentrant_lock_for_key(wheel_img.name):
   57:                         if not installer.has_image():
   58:                             installer.build_image()
   59:                     installer.install(creator.interpreter.version_info)
   60:                 except Exception:  # noqa: BLE001
   61:                     exceptions[name] = sys.exc_info()
   62: 
   63:             threads = [Thread(target=_install, args=(n, w)) for n, w in name_to_whl.items()]
   64:             for thread in threads:
   65:                 thread.start()
   66:             for thread in threads:
   67:                 thread.join()
   68:             if exceptions:
   69:                 messages = [f"failed to build image {', '.join(exceptions.keys())} because:"]
   70:                 for value in exceptions.values():
   71:                     exc_type, exc_value, exc_traceback = value
   72:                     messages.append("".join(traceback.format_exception(exc_type, exc_value, exc_traceback)))
   73:                 raise RuntimeError("\n".join(messages))
   74: 
   75:     @contextmanager
   76:     def _get_seed_wheels(self, creator):  # noqa: C901
   77:         name_to_whl, lock, fail = {}, Lock(), {}
   78: 
   79:         def _get(distribution, version):
   80:             for_py_version = creator.interpreter.version_release_str
   81:             failure, result = None, None
   82:             # fallback to download in case the exact version is not available
   83:             for download in [True] if self.download else [False, True]:
   84:                 failure = None
   85:                 try:
   86:                     result = get_wheel(
   87:                         distribution=distribution,
   88:                         version=version,
   89:                         for_py_version=for_py_version,
   90:                         search_dirs=self.extra_search_dir,
   91:                         download=download,
   92:                         app_data=self.app_data,
   93:                         do_periodic_update=self.periodic_update,
   94:                         env=self.env,
   95:                     )
   96:                     if result is not None:
   97:                         break
   98:                 except Exception as exception:
   99:                     LOGGER.exception("fail")
  100:                     failure = exception
  101:             if failure:
  102:                 if isinstance(failure, CalledProcessError):
  103:                     msg = f"failed to download {distribution}"
  104:                     if version is not None:
  105:                         msg += f" version {version}"
  106:                     msg += f", pip download exit code {failure.returncode}"
  107:                     output = failure.output + failure.stderr
  108:                     if output:
  109:                         msg += "\n"
  110:                         msg += output
  111:                 else:
  112:                     msg = repr(failure)
  113:                 LOGGER.error(msg)
  114:                 with lock:
  115:                     fail[distribution] = version
  116:             else:
  117:                 with lock:
  118:                     name_to_whl[distribution] = result
  119: 
  120:         threads = [
  121:             Thread(target=_get, args=(distribution, version))
  122:             for distribution, version in self.distribution_to_versions().items()
  123:         ]
  124:         for thread in threads:
  125:             thread.start()
  126:         for thread in threads:
  127:             thread.join()
  128:         if fail:
  129:             msg = f"seed failed due to failing to download wheels {', '.join(fail.keys())}"
  130:             raise RuntimeError(msg)
  131:         yield name_to_whl
  132: 
  133:     def installer_class(self, pip_version_tuple):
  134:         if self.symlinks and pip_version_tuple and pip_version_tuple >= (19, 3):  # symlink support requires pip 19.3+
  135:             return SymlinkPipInstall
  136:         return CopyPipInstall
  137: 
  138:     def __repr__(self) -> str:
  139:         msg = f", via={'symlink' if self.symlinks else 'copy'}, app_data_dir={self.app_data}"
  140:         base = super().__repr__()
  141:         return f"{base[:-1]}{msg}{base[-1]}"
  142: 
  143: 
  144: __all__ = [
  145:     "FromAppData",
  146: ]
