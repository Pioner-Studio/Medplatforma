    1: from __future__ import annotations
    2: 
    3: import logging
    4: from abc import ABC
    5: from argparse import SUPPRESS
    6: from pathlib import Path
    7: 
    8: from virtualenv.seed.seeder import Seeder
    9: from virtualenv.seed.wheels import Version
   10: 
   11: LOGGER = logging.getLogger(__name__)
   12: PERIODIC_UPDATE_ON_BY_DEFAULT = True
   13: 
   14: 
   15: class BaseEmbed(Seeder, ABC):
   16:     def __init__(self, options) -> None:
   17:         super().__init__(options, enabled=options.no_seed is False)
   18: 
   19:         self.download = options.download
   20:         self.extra_search_dir = [i.resolve() for i in options.extra_search_dir if i.exists()]
   21: 
   22:         self.pip_version = options.pip
   23:         self.setuptools_version = options.setuptools
   24: 
   25:         # wheel version needs special handling
   26:         # on Python > 3.8, the default is None (as in not used)
   27:         # so we can differentiate between explicit and implicit none
   28:         self.wheel_version = options.wheel or "none"
   29: 
   30:         self.no_pip = options.no_pip
   31:         self.no_setuptools = options.no_setuptools
   32:         self.no_wheel = options.no_wheel
   33:         self.app_data = options.app_data
   34:         self.periodic_update = not options.no_periodic_update
   35: 
   36:         if options.py_version[:2] >= (3, 9):
   37:             if options.wheel is not None or options.no_wheel:
   38:                 LOGGER.warning(
   39:                     "The --no-wheel and --wheel options are deprecated. "
   40:                     "They have no effect for Python > 3.8 as wheel is no longer "
   41:                     "bundled in virtualenv.",
   42:                 )
   43:             self.no_wheel = True
   44: 
   45:         if not self.distribution_to_versions():
   46:             self.enabled = False
   47: 
   48:     @classmethod
   49:     def distributions(cls) -> dict[str, Version]:
   50:         return {
   51:             "pip": Version.bundle,
   52:             "setuptools": Version.bundle,
   53:             "wheel": Version.bundle,
   54:         }
   55: 
   56:     def distribution_to_versions(self) -> dict[str, str]:
   57:         return {
   58:             distribution: getattr(self, f"{distribution}_version")
   59:             for distribution in self.distributions()
   60:             if getattr(self, f"no_{distribution}", None) is False and getattr(self, f"{distribution}_version") != "none"
   61:         }
   62: 
   63:     @classmethod
   64:     def add_parser_arguments(cls, parser, interpreter, app_data):  # noqa: ARG003
   65:         group = parser.add_mutually_exclusive_group()
   66:         group.add_argument(
   67:             "--no-download",
   68:             "--never-download",
   69:             dest="download",
   70:             action="store_false",
   71:             help=f"pass to disable download of the latest {'/'.join(cls.distributions())} from PyPI",
   72:             default=True,
   73:         )
   74:         group.add_argument(
   75:             "--download",
   76:             dest="download",
   77:             action="store_true",
   78:             help=f"pass to enable download of the latest {'/'.join(cls.distributions())} from PyPI",
   79:             default=False,
   80:         )
   81:         parser.add_argument(
   82:             "--extra-search-dir",
   83:             metavar="d",
   84:             type=Path,
   85:             nargs="+",
   86:             help="a path containing wheels to extend the internal wheel list (can be set 1+ times)",
   87:             default=[],
   88:         )
   89:         for distribution, default in cls.distributions().items():
   90:             help_ = f"version of {distribution} to install as seed: embed, bundle, none or exact version"
   91:             if interpreter.version_info[:2] >= (3, 12) and distribution in {"wheel", "setuptools"}:
   92:                 default = "none"  # noqa: PLW2901
   93:             if interpreter.version_info[:2] >= (3, 9) and distribution == "wheel":
   94:                 default = None  # noqa: PLW2901
   95:                 help_ = SUPPRESS
   96:             parser.add_argument(
   97:                 f"--{distribution}",
   98:                 dest=distribution,
   99:                 metavar="version",
  100:                 help=help_,
  101:                 default=default,
  102:             )
  103:         for distribution in cls.distributions():
  104:             help_ = f"do not install {distribution}"
  105:             if interpreter.version_info[:2] >= (3, 9) and distribution == "wheel":
  106:                 help_ = SUPPRESS
  107:             parser.add_argument(
  108:                 f"--no-{distribution}",
  109:                 dest=f"no_{distribution}",
  110:                 action="store_true",
  111:                 help=help_,
  112:                 default=False,
  113:             )
  114:         parser.add_argument(
  115:             "--no-periodic-update",
  116:             dest="no_periodic_update",
  117:             action="store_true",
  118:             help="disable the periodic (once every 14 days) update of the embedded wheels",
  119:             default=not PERIODIC_UPDATE_ON_BY_DEFAULT,
  120:         )
  121: 
  122:     def __repr__(self) -> str:
  123:         result = self.__class__.__name__
  124:         result += "("
  125:         if self.extra_search_dir:
  126:             result += f"extra_search_dir={', '.join(str(i) for i in self.extra_search_dir)},"
  127:         result += f"download={self.download},"
  128:         for distribution in self.distributions():
  129:             if getattr(self, f"no_{distribution}", None):
  130:                 continue
  131:             version = getattr(self, f"{distribution}_version", None)
  132:             if version == "none":
  133:                 continue
  134:             ver = f"={version or 'latest'}"
  135:             result += f" {distribution}{ver},"
  136:         return result[:-1] + ")"
  137: 
  138: 
  139: __all__ = [
  140:     "BaseEmbed",
  141: ]
