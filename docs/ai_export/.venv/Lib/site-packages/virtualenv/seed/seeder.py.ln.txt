    1: from __future__ import annotations
    2: 
    3: from abc import ABC, abstractmethod
    4: 
    5: 
    6: class Seeder(ABC):
    7:     """A seeder will install some seed packages into a virtual environment."""
    8: 
    9:     def __init__(self, options, enabled) -> None:
   10:         """
   11:         Create.
   12: 
   13:         :param options: the parsed options as defined within :meth:`add_parser_arguments`
   14:         :param enabled: a flag weather the seeder is enabled or not
   15:         """
   16:         self.enabled = enabled
   17:         self.env = options.env
   18: 
   19:     @classmethod
   20:     def add_parser_arguments(cls, parser, interpreter, app_data):
   21:         """
   22:         Add CLI arguments for this seed mechanisms.
   23: 
   24:         :param parser: the CLI parser
   25:         :param app_data: the CLI parser
   26:         :param interpreter: the interpreter this virtual environment is based of
   27:         """
   28:         raise NotImplementedError
   29: 
   30:     @abstractmethod
   31:     def run(self, creator):
   32:         """
   33:         Perform the seed operation.
   34: 
   35:         :param creator: the creator (based of :class:`virtualenv.create.creator.Creator`) we used to create this \
   36:         virtual environment
   37:         """
   38:         raise NotImplementedError
   39: 
   40: 
   41: __all__ = [
   42:     "Seeder",
   43: ]
