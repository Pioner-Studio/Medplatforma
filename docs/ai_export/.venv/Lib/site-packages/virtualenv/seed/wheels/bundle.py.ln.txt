    1: from __future__ import annotations
    2: 
    3: from virtualenv.seed.wheels.embed import get_embed_wheel
    4: 
    5: from .periodic_update import periodic_update
    6: from .util import Version, Wheel, discover_wheels
    7: 
    8: 
    9: def from_bundle(distribution, version, for_py_version, search_dirs, app_data, do_periodic_update, env):  # noqa: PLR0913
   10:     """Load the bundled wheel to a cache directory."""
   11:     of_version = Version.of_version(version)
   12:     wheel = load_embed_wheel(app_data, distribution, for_py_version, of_version)
   13: 
   14:     if version != Version.embed:
   15:         # 2. check if we have upgraded embed
   16:         if app_data.can_update:
   17:             per = do_periodic_update
   18:             wheel = periodic_update(distribution, of_version, for_py_version, wheel, search_dirs, app_data, per, env)
   19: 
   20:         # 3. acquire from extra search dir
   21:         found_wheel = from_dir(distribution, of_version, for_py_version, search_dirs)
   22:         if found_wheel is not None and (wheel is None or found_wheel.version_tuple > wheel.version_tuple):
   23:             wheel = found_wheel
   24:     return wheel
   25: 
   26: 
   27: def load_embed_wheel(app_data, distribution, for_py_version, version):
   28:     wheel = get_embed_wheel(distribution, for_py_version)
   29:     if wheel is not None:
   30:         version_match = version == wheel.version
   31:         if version is None or version_match:
   32:             with app_data.ensure_extracted(wheel.path, lambda: app_data.house) as wheel_path:
   33:                 wheel = Wheel(wheel_path)
   34:         else:  # if version does not match ignore
   35:             wheel = None
   36:     return wheel
   37: 
   38: 
   39: def from_dir(distribution, version, for_py_version, directories):
   40:     """Load a compatible wheel from a given folder."""
   41:     for folder in directories:
   42:         for wheel in discover_wheels(folder, distribution, version, for_py_version):
   43:             return wheel
   44:     return None
   45: 
   46: 
   47: __all__ = [
   48:     "from_bundle",
   49:     "load_embed_wheel",
   50: ]
