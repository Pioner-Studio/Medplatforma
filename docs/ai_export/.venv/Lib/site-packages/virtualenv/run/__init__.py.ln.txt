    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os
    5: from functools import partial
    6: 
    7: from virtualenv.app_data import make_app_data
    8: from virtualenv.config.cli.parser import VirtualEnvConfigParser
    9: from virtualenv.report import LEVELS, setup_report
   10: from virtualenv.run.session import Session
   11: from virtualenv.seed.wheels.periodic_update import manual_upgrade
   12: from virtualenv.version import __version__
   13: 
   14: from .plugin.activators import ActivationSelector
   15: from .plugin.creators import CreatorSelector
   16: from .plugin.discovery import get_discover
   17: from .plugin.seeders import SeederSelector
   18: 
   19: 
   20: def cli_run(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
   21:     """
   22:     Create a virtual environment given some command line interface arguments.
   23: 
   24:     :param args: the command line arguments
   25:     :param options: passing in a ``VirtualEnvOptions`` object allows return of the parsed options
   26:     :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
   27:     :param env: environment variables to use
   28:     :return: the session object of the creation (its structure for now is experimental and might change on short notice)
   29:     """
   30:     env = os.environ if env is None else env
   31:     of_session = session_via_cli(args, options, setup_logging, env)
   32:     with of_session:
   33:         of_session.run()
   34:     return of_session
   35: 
   36: 
   37: def session_via_cli(args, options=None, setup_logging=True, env=None):  # noqa: FBT002
   38:     """
   39:     Create a virtualenv session (same as cli_run, but this does not perform the creation). Use this if you just want to
   40:     query what the virtual environment would look like, but not actually create it.
   41: 
   42:     :param args: the command line arguments
   43:     :param options: passing in a ``VirtualEnvOptions`` object allows return of the parsed options
   44:     :param setup_logging: ``True`` if setup logging handlers, ``False`` to use handlers already registered
   45:     :param env: environment variables to use
   46:     :return: the session object of the creation (its structure for now is experimental and might change on short notice)
   47:     """  # noqa: D205
   48:     env = os.environ if env is None else env
   49:     parser, elements = build_parser(args, options, setup_logging, env)
   50:     options = parser.parse_args(args)
   51:     options.py_version = parser._interpreter.version_info  # noqa: SLF001
   52:     creator, seeder, activators = tuple(e.create(options) for e in elements)  # create types
   53:     return Session(
   54:         options.verbosity,
   55:         options.app_data,
   56:         parser._interpreter,  # noqa: SLF001
   57:         creator,
   58:         seeder,
   59:         activators,
   60:     )
   61: 
   62: 
   63: def build_parser(args=None, options=None, setup_logging=True, env=None):  # noqa: FBT002
   64:     parser = VirtualEnvConfigParser(options, os.environ if env is None else env)
   65:     add_version_flag(parser)
   66:     parser.add_argument(
   67:         "--with-traceback",
   68:         dest="with_traceback",
   69:         action="store_true",
   70:         default=False,
   71:         help="on failure also display the stacktrace internals of virtualenv",
   72:     )
   73:     _do_report_setup(parser, args, setup_logging)
   74:     options = load_app_data(args, parser, options)
   75:     handle_extra_commands(options)
   76: 
   77:     discover = get_discover(parser, args)
   78:     parser._interpreter = interpreter = discover.interpreter  # noqa: SLF001
   79:     if interpreter is None:
   80:         msg = f"failed to find interpreter for {discover}"
   81:         raise RuntimeError(msg)
   82:     elements = [
   83:         CreatorSelector(interpreter, parser),
   84:         SeederSelector(interpreter, parser),
   85:         ActivationSelector(interpreter, parser),
   86:     ]
   87:     options, _ = parser.parse_known_args(args)
   88:     for element in elements:
   89:         element.handle_selected_arg_parse(options)
   90:     parser.enable_help()
   91:     return parser, elements
   92: 
   93: 
   94: def build_parser_only(args=None):
   95:     """Used to provide a parser for the doc generation."""
   96:     return build_parser(args)[0]
   97: 
   98: 
   99: def handle_extra_commands(options):
  100:     if options.upgrade_embed_wheels:
  101:         result = manual_upgrade(options.app_data, options.env)
  102:         raise SystemExit(result)
  103: 
  104: 
  105: def load_app_data(args, parser, options):
  106:     parser.add_argument(
  107:         "--read-only-app-data",
  108:         action="store_true",
  109:         help="use app data folder in read-only mode (write operations will fail with error)",
  110:     )
  111:     options, _ = parser.parse_known_args(args, namespace=options)
  112: 
  113:     # here we need a write-able application data (e.g. the zipapp might need this for discovery cache)
  114:     parser.add_argument(
  115:         "--app-data",
  116:         help="a data folder used as cache by the virtualenv",
  117:         type=partial(make_app_data, read_only=options.read_only_app_data, env=options.env),
  118:         default=make_app_data(None, read_only=options.read_only_app_data, env=options.env),
  119:     )
  120:     parser.add_argument(
  121:         "--reset-app-data",
  122:         action="store_true",
  123:         help="start with empty app data folder",
  124:     )
  125:     parser.add_argument(
  126:         "--upgrade-embed-wheels",
  127:         action="store_true",
  128:         help="trigger a manual update of the embedded wheels",
  129:     )
  130:     options, _ = parser.parse_known_args(args, namespace=options)
  131:     if options.reset_app_data:
  132:         options.app_data.reset()
  133:     return options
  134: 
  135: 
  136: def add_version_flag(parser):
  137:     import virtualenv  # noqa: PLC0415
  138: 
  139:     parser.add_argument(
  140:         "--version",
  141:         action="version",
  142:         version=f"%(prog)s {__version__} from {virtualenv.__file__}",
  143:         help="display the version of the virtualenv package and its location, then exit",
  144:     )
  145: 
  146: 
  147: def _do_report_setup(parser, args, setup_logging):
  148:     level_map = ", ".join(f"{logging.getLevelName(line)}={c}" for c, line in sorted(LEVELS.items()))
  149:     msg = "verbosity = verbose - quiet, default {}, mapping => {}"
  150:     verbosity_group = parser.add_argument_group(
  151:         title="verbosity",
  152:         description=msg.format(logging.getLevelName(LEVELS[3]), level_map),
  153:     )
  154:     verbosity = verbosity_group.add_mutually_exclusive_group()
  155:     verbosity.add_argument("-v", "--verbose", action="count", dest="verbose", help="increase verbosity", default=2)
  156:     verbosity.add_argument("-q", "--quiet", action="count", dest="quiet", help="decrease verbosity", default=0)
  157:     # do not configure logging if only help is requested, as no logging is required for this
  158:     if args and any(i in args for i in ("-h", "--help")):
  159:         return
  160:     option, _ = parser.parse_known_args(args)
  161:     if setup_logging:
  162:         setup_report(option.verbosity)
  163: 
  164: 
  165: __all__ = [
  166:     "cli_run",
  167:     "session_via_cli",
  168: ]
