    1: from __future__ import annotations
    2: 
    3: import json
    4: import logging
    5: 
    6: LOGGER = logging.getLogger(__name__)
    7: 
    8: 
    9: class Session:
   10:     """Represents a virtual environment creation session."""
   11: 
   12:     def __init__(self, verbosity, app_data, interpreter, creator, seeder, activators) -> None:  # noqa: PLR0913
   13:         self._verbosity = verbosity
   14:         self._app_data = app_data
   15:         self._interpreter = interpreter
   16:         self._creator = creator
   17:         self._seeder = seeder
   18:         self._activators = activators
   19: 
   20:     @property
   21:     def verbosity(self):
   22:         """The verbosity of the run."""
   23:         return self._verbosity
   24: 
   25:     @property
   26:     def interpreter(self):
   27:         """Create a virtual environment based on this reference interpreter."""
   28:         return self._interpreter
   29: 
   30:     @property
   31:     def creator(self):
   32:         """The creator used to build the virtual environment (must be compatible with the interpreter)."""
   33:         return self._creator
   34: 
   35:     @property
   36:     def seeder(self):
   37:         """The mechanism used to provide the seed packages (pip, setuptools, wheel)."""
   38:         return self._seeder
   39: 
   40:     @property
   41:     def activators(self):
   42:         """Activators used to generate activations scripts."""
   43:         return self._activators
   44: 
   45:     def run(self):
   46:         self._create()
   47:         self._seed()
   48:         self._activate()
   49:         self.creator.pyenv_cfg.write()
   50: 
   51:     def _create(self):
   52:         LOGGER.info("create virtual environment via %s", self.creator)
   53:         self.creator.run()
   54:         LOGGER.debug(_DEBUG_MARKER)
   55:         LOGGER.debug("%s", _Debug(self.creator))
   56: 
   57:     def _seed(self):
   58:         if self.seeder is not None and self.seeder.enabled:
   59:             LOGGER.info("add seed packages via %s", self.seeder)
   60:             self.seeder.run(self.creator)
   61: 
   62:     def _activate(self):
   63:         if self.activators:
   64:             active = ", ".join(type(i).__name__.replace("Activator", "") for i in self.activators)
   65:             LOGGER.info("add activators for %s", active)
   66:             for activator in self.activators:
   67:                 activator.generate(self.creator)
   68: 
   69:     def __enter__(self):
   70:         return self
   71: 
   72:     def __exit__(self, exc_type, exc_val, exc_tb):
   73:         self._app_data.close()
   74: 
   75: 
   76: _DEBUG_MARKER = "=" * 30 + " target debug " + "=" * 30
   77: 
   78: 
   79: class _Debug:
   80:     """lazily populate debug."""
   81: 
   82:     def __init__(self, creator) -> None:
   83:         self.creator = creator
   84: 
   85:     def __repr__(self) -> str:
   86:         return json.dumps(self.creator.debug, indent=2)
   87: 
   88: 
   89: __all__ = [
   90:     "Session",
   91: ]
