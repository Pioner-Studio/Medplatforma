    1: from __future__ import annotations
    2: 
    3: from .base import PluginLoader
    4: 
    5: 
    6: class Discovery(PluginLoader):
    7:     """Discovery plugins."""
    8: 
    9: 
   10: def get_discover(parser, args):
   11:     discover_types = Discovery.entry_points_for("virtualenv.discovery")
   12:     discovery_parser = parser.add_argument_group(
   13:         title="discovery",
   14:         description="discover and provide a target interpreter",
   15:     )
   16:     choices = _get_default_discovery(discover_types)
   17:     # prefer the builtin if present, otherwise fallback to first defined type
   18:     choices = sorted(choices, key=lambda a: 0 if a == "builtin" else 1)
   19:     try:
   20:         default_discovery = next(iter(choices))
   21:     except StopIteration as e:
   22:         msg = "No discovery plugin found. Try reinstalling virtualenv to fix this issue."
   23:         raise RuntimeError(msg) from e
   24:     discovery_parser.add_argument(
   25:         "--discovery",
   26:         choices=choices,
   27:         default=default_discovery,
   28:         required=False,
   29:         help="interpreter discovery method",
   30:     )
   31:     options, _ = parser.parse_known_args(args)
   32:     discover_class = discover_types[options.discovery]
   33:     discover_class.add_parser_arguments(discovery_parser)
   34:     options, _ = parser.parse_known_args(args, namespace=options)
   35:     return discover_class(options)
   36: 
   37: 
   38: def _get_default_discovery(discover_types):
   39:     return list(discover_types.keys())
   40: 
   41: 
   42: __all__ = [
   43:     "Discovery",
   44:     "get_discover",
   45: ]
