    1: from __future__ import annotations
    2: 
    3: from argparse import ArgumentTypeError
    4: from collections import OrderedDict
    5: 
    6: from .base import ComponentBuilder
    7: 
    8: 
    9: class ActivationSelector(ComponentBuilder):
   10:     def __init__(self, interpreter, parser) -> None:
   11:         self.default = None
   12:         possible = OrderedDict(
   13:             (k, v) for k, v in self.options("virtualenv.activate").items() if v.supports(interpreter)
   14:         )
   15:         super().__init__(interpreter, parser, "activators", possible)
   16:         self.parser.description = "options for activation scripts"
   17:         self.active = None
   18: 
   19:     def add_selector_arg_parse(self, name, choices):
   20:         self.default = ",".join(choices)
   21:         self.parser.add_argument(
   22:             f"--{name}",
   23:             default=self.default,
   24:             metavar="comma_sep_list",
   25:             required=False,
   26:             help="activators to generate - default is all supported",
   27:             type=self._extract_activators,
   28:         )
   29: 
   30:     def _extract_activators(self, entered_str):
   31:         elements = [e.strip() for e in entered_str.split(",") if e.strip()]
   32:         missing = [e for e in elements if e not in self.possible]
   33:         if missing:
   34:             msg = f"the following activators are not available {','.join(missing)}"
   35:             raise ArgumentTypeError(msg)
   36:         return elements
   37: 
   38:     def handle_selected_arg_parse(self, options):
   39:         selected_activators = (
   40:             self._extract_activators(self.default) if options.activators is self.default else options.activators
   41:         )
   42:         self.active = {k: v for k, v in self.possible.items() if k in selected_activators}
   43:         self.parser.add_argument(
   44:             "--prompt",
   45:             dest="prompt",
   46:             metavar="prompt",
   47:             help=(
   48:                 "provides an alternative prompt prefix for this environment "
   49:                 "(value of . means name of the current working directory)"
   50:             ),
   51:             default=None,
   52:         )
   53:         for activator in self.active.values():
   54:             activator.add_parser_arguments(self.parser, self.interpreter)
   55: 
   56:     def create(self, options):
   57:         return [activator_class(options) for activator_class in self.active.values()]
   58: 
   59: 
   60: __all__ = [
   61:     "ActivationSelector",
   62: ]
