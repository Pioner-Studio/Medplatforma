    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os
    5: import platform
    6: import sys
    7: import tempfile
    8: 
    9: IMPLEMENTATION = platform.python_implementation()
   10: IS_PYPY = IMPLEMENTATION == "PyPy"
   11: IS_GRAALPY = IMPLEMENTATION == "GraalVM"
   12: IS_CPYTHON = IMPLEMENTATION == "CPython"
   13: IS_WIN = sys.platform == "win32"
   14: IS_MAC_ARM64 = sys.platform == "darwin" and platform.machine() == "arm64"
   15: ROOT = os.path.realpath(os.path.join(os.path.abspath(__file__), os.path.pardir, os.path.pardir))
   16: IS_ZIPAPP = os.path.isfile(ROOT)
   17: _CAN_SYMLINK = _FS_CASE_SENSITIVE = _CFG_DIR = _DATA_DIR = None
   18: LOGGER = logging.getLogger(__name__)
   19: 
   20: 
   21: def fs_is_case_sensitive():
   22:     global _FS_CASE_SENSITIVE  # noqa: PLW0603
   23: 
   24:     if _FS_CASE_SENSITIVE is None:
   25:         with tempfile.NamedTemporaryFile(prefix="TmP") as tmp_file:
   26:             _FS_CASE_SENSITIVE = not os.path.exists(tmp_file.name.lower())
   27:             LOGGER.debug("filesystem is %scase-sensitive", "" if _FS_CASE_SENSITIVE else "not ")
   28:     return _FS_CASE_SENSITIVE
   29: 
   30: 
   31: def fs_supports_symlink():
   32:     global _CAN_SYMLINK  # noqa: PLW0603
   33: 
   34:     if _CAN_SYMLINK is None:
   35:         can = False
   36:         if hasattr(os, "symlink"):
   37:             # Creating a symlink can fail for a variety of reasons, indicating that the filesystem does not support it.
   38:             # E.g. on Linux with a VFAT partition mounted.
   39:             with tempfile.NamedTemporaryFile(prefix="TmP") as tmp_file:
   40:                 temp_dir = os.path.dirname(tmp_file.name)
   41:                 dest = os.path.join(temp_dir, f"{tmp_file.name}-{'b'}")
   42:                 try:
   43:                     os.symlink(tmp_file.name, dest)
   44:                     can = True
   45:                 except (OSError, NotImplementedError):
   46:                     pass  # symlink is not supported
   47:                 finally:
   48:                     if os.path.lexists(dest):
   49:                         os.remove(dest)
   50:             LOGGER.debug("symlink on filesystem does%s work", "" if can else " not")
   51:         _CAN_SYMLINK = can
   52:     return _CAN_SYMLINK
   53: 
   54: 
   55: def fs_path_id(path: str) -> str:
   56:     return path.casefold() if fs_is_case_sensitive() else path
   57: 
   58: 
   59: __all__ = (
   60:     "IS_CPYTHON",
   61:     "IS_GRAALPY",
   62:     "IS_MAC_ARM64",
   63:     "IS_PYPY",
   64:     "IS_WIN",
   65:     "IS_ZIPAPP",
   66:     "ROOT",
   67:     "fs_is_case_sensitive",
   68:     "fs_path_id",
   69:     "fs_supports_symlink",
   70: )
