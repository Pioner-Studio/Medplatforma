    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os
    5: import zipfile
    6: 
    7: from virtualenv.info import IS_WIN, ROOT
    8: 
    9: LOGGER = logging.getLogger(__name__)
   10: 
   11: 
   12: def read(full_path):
   13:     sub_file = _get_path_within_zip(full_path)
   14:     with zipfile.ZipFile(ROOT, "r") as zip_file, zip_file.open(sub_file) as file_handler:
   15:         return file_handler.read().decode("utf-8")
   16: 
   17: 
   18: def extract(full_path, dest):
   19:     LOGGER.debug("extract %s to %s", full_path, dest)
   20:     sub_file = _get_path_within_zip(full_path)
   21:     with zipfile.ZipFile(ROOT, "r") as zip_file:
   22:         info = zip_file.getinfo(sub_file)
   23:         info.filename = dest.name
   24:         zip_file.extract(info, str(dest.parent))
   25: 
   26: 
   27: def _get_path_within_zip(full_path):
   28:     full_path = os.path.realpath(os.path.abspath(str(full_path)))
   29:     prefix = f"{ROOT}{os.sep}"
   30:     if not full_path.startswith(prefix):
   31:         msg = f"full_path={full_path} should start with prefix={prefix}."
   32:         raise RuntimeError(msg)
   33:     sub_file = full_path[len(prefix) :]
   34:     if IS_WIN:
   35:         # paths are always UNIX separators, even on Windows, though __file__ still follows platform default
   36:         sub_file = sub_file.replace(os.sep, "/")
   37:     return sub_file
   38: 
   39: 
   40: __all__ = [
   41:     "extract",
   42:     "read",
   43: ]
