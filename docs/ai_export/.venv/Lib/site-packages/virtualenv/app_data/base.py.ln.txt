    1: """Application data stored by virtualenv."""
    2: 
    3: from __future__ import annotations
    4: 
    5: from abc import ABC, abstractmethod
    6: from contextlib import contextmanager
    7: 
    8: from virtualenv.info import IS_ZIPAPP
    9: 
   10: 
   11: class AppData(ABC):
   12:     """Abstract storage interface for the virtualenv application."""
   13: 
   14:     @abstractmethod
   15:     def close(self):
   16:         """Called before virtualenv exits."""
   17: 
   18:     @abstractmethod
   19:     def reset(self):
   20:         """Called when the user passes in the reset app data."""
   21: 
   22:     @abstractmethod
   23:     def py_info(self, path):
   24:         raise NotImplementedError
   25: 
   26:     @abstractmethod
   27:     def py_info_clear(self):
   28:         raise NotImplementedError
   29: 
   30:     @property
   31:     def can_update(self):
   32:         raise NotImplementedError
   33: 
   34:     @abstractmethod
   35:     def embed_update_log(self, distribution, for_py_version):
   36:         raise NotImplementedError
   37: 
   38:     @property
   39:     def house(self):
   40:         raise NotImplementedError
   41: 
   42:     @property
   43:     def transient(self):
   44:         raise NotImplementedError
   45: 
   46:     @abstractmethod
   47:     def wheel_image(self, for_py_version, name):
   48:         raise NotImplementedError
   49: 
   50:     @contextmanager
   51:     def ensure_extracted(self, path, to_folder=None):
   52:         """Some paths might be within the zipapp, unzip these to a path on the disk."""
   53:         if IS_ZIPAPP:
   54:             with self.extract(path, to_folder) as result:
   55:                 yield result
   56:         else:
   57:             yield path
   58: 
   59:     @abstractmethod
   60:     @contextmanager
   61:     def extract(self, path, to_folder):
   62:         raise NotImplementedError
   63: 
   64:     @abstractmethod
   65:     @contextmanager
   66:     def locked(self, path):
   67:         raise NotImplementedError
   68: 
   69: 
   70: class ContentStore(ABC):
   71:     @abstractmethod
   72:     def exists(self):
   73:         raise NotImplementedError
   74: 
   75:     @abstractmethod
   76:     def read(self):
   77:         raise NotImplementedError
   78: 
   79:     @abstractmethod
   80:     def write(self, content):
   81:         raise NotImplementedError
   82: 
   83:     @abstractmethod
   84:     def remove(self):
   85:         raise NotImplementedError
   86: 
   87:     @abstractmethod
   88:     @contextmanager
   89:     def locked(self):
   90:         pass
   91: 
   92: 
   93: __all__ = [
   94:     "AppData",
   95:     "ContentStore",
   96: ]
