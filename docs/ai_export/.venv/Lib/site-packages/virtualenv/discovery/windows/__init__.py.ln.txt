    1: from __future__ import annotations
    2: 
    3: from virtualenv.discovery.py_info import PythonInfo
    4: from virtualenv.discovery.py_spec import PythonSpec
    5: 
    6: from .pep514 import discover_pythons
    7: 
    8: # Map of well-known organizations (as per PEP 514 Company Windows Registry key part) versus Python implementation
    9: _IMPLEMENTATION_BY_ORG = {
   10:     "ContinuumAnalytics": "CPython",
   11:     "PythonCore": "CPython",
   12: }
   13: 
   14: 
   15: class Pep514PythonInfo(PythonInfo):
   16:     """A Python information acquired from PEP-514."""
   17: 
   18: 
   19: def propose_interpreters(spec, cache_dir, env):
   20:     # see if PEP-514 entries are good
   21: 
   22:     # start with higher python versions in an effort to use the latest version available
   23:     # and prefer PythonCore over conda pythons (as virtualenv is mostly used by non conda tools)
   24:     existing = list(discover_pythons())
   25:     existing.sort(
   26:         key=lambda i: (*tuple(-1 if j is None else j for j in i[1:4]), 1 if i[0] == "PythonCore" else 0),
   27:         reverse=True,
   28:     )
   29: 
   30:     for name, major, minor, arch, threaded, exe, _ in existing:
   31:         # Map well-known/most common organizations to a Python implementation, use the org name as a fallback for
   32:         # backwards compatibility.
   33:         implementation = _IMPLEMENTATION_BY_ORG.get(name, name)
   34: 
   35:         # Pre-filtering based on Windows Registry metadata, for CPython only
   36:         skip_pre_filter = implementation.lower() != "cpython"
   37:         registry_spec = PythonSpec(None, implementation, major, minor, None, arch, exe, free_threaded=threaded)
   38:         if skip_pre_filter or registry_spec.satisfies(spec):
   39:             interpreter = Pep514PythonInfo.from_exe(exe, cache_dir, env=env, raise_on_error=False)
   40:             if interpreter is not None and interpreter.satisfies(spec, impl_must_match=True):
   41:                 yield interpreter  # Final filtering/matching using interpreter metadata
   42: 
   43: 
   44: __all__ = [
   45:     "Pep514PythonInfo",
   46:     "propose_interpreters",
   47: ]
