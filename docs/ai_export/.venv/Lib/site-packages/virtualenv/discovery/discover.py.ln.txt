    1: from __future__ import annotations
    2: 
    3: from abc import ABC, abstractmethod
    4: 
    5: 
    6: class Discover(ABC):
    7:     """Discover and provide the requested Python interpreter."""
    8: 
    9:     @classmethod
   10:     def add_parser_arguments(cls, parser):
   11:         """
   12:         Add CLI arguments for this discovery mechanisms.
   13: 
   14:         :param parser: the CLI parser
   15:         """
   16:         raise NotImplementedError
   17: 
   18:     def __init__(self, options) -> None:
   19:         """
   20:         Create a new discovery mechanism.
   21: 
   22:         :param options: the parsed options as defined within :meth:`add_parser_arguments`
   23:         """
   24:         self._has_run = False
   25:         self._interpreter = None
   26:         self._env = options.env
   27: 
   28:     @abstractmethod
   29:     def run(self):
   30:         """
   31:         Discovers an interpreter.
   32: 
   33:         :return: the interpreter ready to use for virtual environment creation
   34:         """
   35:         raise NotImplementedError
   36: 
   37:     @property
   38:     def interpreter(self):
   39:         """:return: the interpreter as returned by :meth:`run`, cached"""
   40:         if self._has_run is False:
   41:             self._interpreter = self.run()
   42:             self._has_run = True
   43:         return self._interpreter
   44: 
   45: 
   46: __all__ = [
   47:     "Discover",
   48: ]
