    1: from __future__ import annotations
    2: 
    3: import logging
    4: import sys
    5: 
    6: LEVELS = {
    7:     0: logging.CRITICAL,
    8:     1: logging.ERROR,
    9:     2: logging.WARNING,
   10:     3: logging.INFO,
   11:     4: logging.DEBUG,
   12:     5: logging.NOTSET,
   13: }
   14: 
   15: MAX_LEVEL = max(LEVELS.keys())
   16: LOGGER = logging.getLogger()
   17: 
   18: 
   19: def setup_report(verbosity, show_pid=False):  # noqa: FBT002
   20:     _clean_handlers(LOGGER)
   21:     verbosity = min(verbosity, MAX_LEVEL)  # pragma: no cover
   22:     level = LEVELS[verbosity]
   23:     msg_format = "%(message)s"
   24:     if level <= logging.DEBUG:
   25:         locate = "module"
   26:         msg_format = f"%(relativeCreated)d {msg_format} [%(levelname)s %({locate})s:%(lineno)d]"
   27:     if show_pid:
   28:         msg_format = f"[%(process)d] {msg_format}"
   29:     formatter = logging.Formatter(msg_format)
   30:     stream_handler = logging.StreamHandler(stream=sys.stdout)
   31:     stream_handler.setLevel(level)
   32:     LOGGER.setLevel(logging.NOTSET)
   33:     stream_handler.setFormatter(formatter)
   34:     LOGGER.addHandler(stream_handler)
   35:     level_name = logging.getLevelName(level)
   36:     LOGGER.debug("setup logging to %s", level_name)
   37:     logging.getLogger("distlib").setLevel(logging.ERROR)
   38:     return verbosity
   39: 
   40: 
   41: def _clean_handlers(log):
   42:     for log_handler in list(log.handlers):  # remove handlers of libraries
   43:         log.removeHandler(log_handler)
   44: 
   45: 
   46: __all__ = [
   47:     "LEVELS",
   48:     "MAX_LEVEL",
   49:     "setup_report",
   50: ]
