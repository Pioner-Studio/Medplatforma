    1: from __future__ import annotations
    2: 
    3: import os
    4: import shlex
    5: import sys
    6: from abc import ABC, abstractmethod
    7: 
    8: from .activator import Activator
    9: 
   10: if sys.version_info >= (3, 10):
   11:     from importlib.resources import files
   12: 
   13:     def read_binary(module_name: str, filename: str) -> bytes:
   14:         return (files(module_name) / filename).read_bytes()
   15: 
   16: else:
   17:     from importlib.resources import read_binary
   18: 
   19: 
   20: class ViaTemplateActivator(Activator, ABC):
   21:     @abstractmethod
   22:     def templates(self):
   23:         raise NotImplementedError
   24: 
   25:     @staticmethod
   26:     def quote(string):
   27:         """
   28:         Quote strings in the activation script.
   29: 
   30:         :param string: the string to quote
   31:         :return: quoted string that works in the activation script
   32:         """
   33:         return shlex.quote(string)
   34: 
   35:     def generate(self, creator):
   36:         dest_folder = creator.bin_dir
   37:         replacements = self.replacements(creator, dest_folder)
   38:         generated = self._generate(replacements, self.templates(), dest_folder, creator)
   39:         if self.flag_prompt is not None:
   40:             creator.pyenv_cfg["prompt"] = self.flag_prompt
   41:         return generated
   42: 
   43:     def replacements(self, creator, dest_folder):  # noqa: ARG002
   44:         return {
   45:             "__VIRTUAL_PROMPT__": "" if self.flag_prompt is None else self.flag_prompt,
   46:             "__VIRTUAL_ENV__": str(creator.dest),
   47:             "__VIRTUAL_NAME__": creator.env_name,
   48:             "__BIN_NAME__": str(creator.bin_dir.relative_to(creator.dest)),
   49:             "__PATH_SEP__": os.pathsep,
   50:             "__TCL_LIBRARY__": creator.interpreter.tcl_lib or "",
   51:             "__TK_LIBRARY__": creator.interpreter.tk_lib or "",
   52:         }
   53: 
   54:     def _generate(self, replacements, templates, to_folder, creator):
   55:         generated = []
   56:         for template in templates:
   57:             text = self.instantiate_template(replacements, template, creator)
   58:             dest = to_folder / self.as_name(template)
   59:             # remove the file if it already exists - this prevents permission
   60:             # errors when the dest is not writable
   61:             if dest.exists():
   62:                 dest.unlink()
   63:             # Powershell assumes Windows 1252 encoding when reading files without BOM
   64:             encoding = "utf-8-sig" if str(template).endswith(".ps1") else "utf-8"
   65:             # use write_bytes to avoid platform specific line normalization (\n -> \r\n)
   66:             dest.write_bytes(text.encode(encoding))
   67:             generated.append(dest)
   68:         return generated
   69: 
   70:     def as_name(self, template):
   71:         return template
   72: 
   73:     def instantiate_template(self, replacements, template, creator):
   74:         # read content as binary to avoid platform specific line normalization (\n -> \r\n)
   75:         binary = read_binary(self.__module__, template)
   76:         text = binary.decode("utf-8", errors="strict")
   77:         for key, value in replacements.items():
   78:             value_uni = self._repr_unicode(creator, value)
   79:             text = text.replace(key, self.quote(value_uni))
   80:         return text
   81: 
   82:     @staticmethod
   83:     def _repr_unicode(creator, value):  # noqa: ARG004
   84:         return value  # by default, we just let it be unicode
   85: 
   86: 
   87: __all__ = [
   88:     "ViaTemplateActivator",
   89: ]
