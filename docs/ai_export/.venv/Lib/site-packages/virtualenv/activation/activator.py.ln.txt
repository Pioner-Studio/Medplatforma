    1: from __future__ import annotations
    2: 
    3: import os
    4: from abc import ABC, abstractmethod
    5: 
    6: 
    7: class Activator(ABC):
    8:     """Generates activate script for the virtual environment."""
    9: 
   10:     def __init__(self, options) -> None:
   11:         """
   12:         Create a new activator generator.
   13: 
   14:         :param options: the parsed options as defined within :meth:`add_parser_arguments`
   15:         """
   16:         self.flag_prompt = os.path.basename(os.getcwd()) if options.prompt == "." else options.prompt
   17: 
   18:     @classmethod
   19:     def supports(cls, interpreter):  # noqa: ARG003
   20:         """
   21:         Check if the activation script is supported in the given interpreter.
   22: 
   23:         :param interpreter: the interpreter we need to support
   24:         :return: ``True`` if supported, ``False`` otherwise
   25:         """
   26:         return True
   27: 
   28:     @classmethod  # noqa: B027
   29:     def add_parser_arguments(cls, parser, interpreter):
   30:         """
   31:         Add CLI arguments for this activation script.
   32: 
   33:         :param parser: the CLI parser
   34:         :param interpreter: the interpreter this virtual environment is based of
   35:         """
   36: 
   37:     @abstractmethod
   38:     def generate(self, creator):
   39:         """
   40:         Generate activate script for the given creator.
   41: 
   42:         :param creator: the creator (based of :class:`virtualenv.create.creator.Creator`) we used to create this \
   43:         virtual environment
   44:         """
   45:         raise NotImplementedError
   46: 
   47: 
   48: __all__ = [
   49:     "Activator",
   50: ]
