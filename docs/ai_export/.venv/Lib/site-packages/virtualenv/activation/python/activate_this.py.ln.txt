    1: """
    2: Activate virtualenv for current interpreter:
    3: 
    4: import runpy
    5: runpy.run_path(this_file)
    6: 
    7: This can be used when you must use an existing Python interpreter, not the virtualenv bin/python.
    8: """  # noqa: D415
    9: 
   10: from __future__ import annotations
   11: 
   12: import os
   13: import site
   14: import sys
   15: 
   16: try:
   17:     abs_file = os.path.abspath(__file__)
   18: except NameError as exc:
   19:     msg = "You must use import runpy; runpy.run_path(this_file)"
   20:     raise AssertionError(msg) from exc
   21: 
   22: bin_dir = os.path.dirname(abs_file)
   23: base = bin_dir[: -len(__BIN_NAME__) - 1]  # strip away the bin part from the __file__, plus the path separator
   24: 
   25: # prepend bin to PATH (this file is inside the bin directory)
   26: os.environ["PATH"] = os.pathsep.join([bin_dir, *os.environ.get("PATH", "").split(os.pathsep)])
   27: os.environ["VIRTUAL_ENV"] = base  # virtual env is right above bin directory
   28: os.environ["VIRTUAL_ENV_PROMPT"] = __VIRTUAL_PROMPT__ or os.path.basename(base)
   29: 
   30: # add the virtual environments libraries to the host python import mechanism
   31: prev_length = len(sys.path)
   32: for lib in __LIB_FOLDERS__.split(os.pathsep):
   33:     path = os.path.realpath(os.path.join(bin_dir, lib))
   34:     site.addsitedir(path.decode("utf-8") if __DECODE_PATH__ else path)
   35: sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]
   36: 
   37: sys.real_prefix = sys.prefix
   38: sys.prefix = base
