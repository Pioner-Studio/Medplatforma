    1: from __future__ import annotations
    2: 
    3: from virtualenv.activation.via_template import ViaTemplateActivator
    4: 
    5: 
    6: class NushellActivator(ViaTemplateActivator):
    7:     def templates(self):
    8:         yield "activate.nu"
    9: 
   10:     @staticmethod
   11:     def quote(string):
   12:         """
   13:         Nushell supports raw strings like: r###'this is a string'###.
   14: 
   15:         https://github.com/nushell/nushell.github.io/blob/main/book/working_with_strings.md
   16: 
   17:         This method finds the maximum continuous sharps in the string and then
   18:         quote it with an extra sharp.
   19:         """
   20:         max_sharps = 0
   21:         current_sharps = 0
   22:         for char in string:
   23:             if char == "#":
   24:                 current_sharps += 1
   25:                 max_sharps = max(current_sharps, max_sharps)
   26:             else:
   27:                 current_sharps = 0
   28:         wrapping = "#" * (max_sharps + 1)
   29:         return f"r{wrapping}'{string}'{wrapping}"
   30: 
   31:     def replacements(self, creator, dest_folder):  # noqa: ARG002
   32:         return {
   33:             "__VIRTUAL_PROMPT__": "" if self.flag_prompt is None else self.flag_prompt,
   34:             "__VIRTUAL_ENV__": str(creator.dest),
   35:             "__VIRTUAL_NAME__": creator.env_name,
   36:             "__BIN_NAME__": str(creator.bin_dir.relative_to(creator.dest)),
   37:             "__TCL_LIBRARY__": creator.interpreter.tcl_lib or "",
   38:             "__TK_LIBRARY__": creator.interpreter.tk_lib or "",
   39:         }
   40: 
   41: 
   42: __all__ = [
   43:     "NushellActivator",
   44: ]
