    1: from __future__ import annotations
    2: 
    3: import errno
    4: import logging
    5: import os
    6: import sys
    7: from timeit import default_timer
    8: 
    9: LOGGER = logging.getLogger(__name__)
   10: 
   11: 
   12: def run(args=None, options=None, env=None):
   13:     env = os.environ if env is None else env
   14:     start = default_timer()
   15:     from virtualenv.run import cli_run  # noqa: PLC0415
   16:     from virtualenv.util.error import ProcessCallFailedError  # noqa: PLC0415
   17: 
   18:     if args is None:
   19:         args = sys.argv[1:]
   20:     try:
   21:         session = cli_run(args, options, env)
   22:         LOGGER.warning(LogSession(session, start))
   23:     except ProcessCallFailedError as exception:
   24:         print(f"subprocess call failed for {exception.cmd} with code {exception.code}")  # noqa: T201
   25:         print(exception.out, file=sys.stdout, end="")  # noqa: T201
   26:         print(exception.err, file=sys.stderr, end="")  # noqa: T201
   27:         raise SystemExit(exception.code)  # noqa: B904
   28:     except OSError as exception:
   29:         if exception.errno == errno.EMFILE:
   30:             print(  # noqa: T201
   31:                 "OSError: [Errno 24] Too many open files. You may need to increase your OS open files limit.\n"
   32:                 "  On macOS/Linux, try 'ulimit -n 2048'.\n"
   33:                 "  For Windows, this is not a common issue, but you can try to close some applications.",
   34:                 file=sys.stderr,
   35:             )
   36:         raise
   37: 
   38: 
   39: class LogSession:
   40:     def __init__(self, session, start) -> None:
   41:         self.session = session
   42:         self.start = start
   43: 
   44:     def __str__(self) -> str:
   45:         spec = self.session.creator.interpreter.spec
   46:         elapsed = (default_timer() - self.start) * 1000
   47:         lines = [
   48:             f"created virtual environment {spec} in {elapsed:.0f}ms",
   49:             f"  creator {self.session.creator!s}",
   50:         ]
   51:         if self.session.seeder.enabled:
   52:             lines.append(f"  seeder {self.session.seeder!s}")
   53:             path = self.session.creator.purelib.iterdir()
   54:             packages = sorted("==".join(i.stem.split("-")) for i in path if i.suffix == ".dist-info")
   55:             lines.append(f"    added seed packages: {', '.join(packages)}")
   56: 
   57:         if self.session.activators:
   58:             lines.append(f"  activators {','.join(i.__class__.__name__ for i in self.session.activators)}")
   59:         return "\n".join(lines)
   60: 
   61: 
   62: def run_with_catch(args=None, env=None):
   63:     from virtualenv.config.cli.parser import VirtualEnvOptions  # noqa: PLC0415
   64: 
   65:     env = os.environ if env is None else env
   66:     options = VirtualEnvOptions()
   67:     try:
   68:         run(args, options, env)
   69:     except (KeyboardInterrupt, SystemExit, Exception) as exception:  # noqa: BLE001
   70:         try:
   71:             if getattr(options, "with_traceback", False):
   72:                 raise
   73:             if not (isinstance(exception, SystemExit) and exception.code == 0):
   74:                 LOGGER.error("%s: %s", type(exception).__name__, exception)  # noqa: TRY400
   75:             code = exception.code if isinstance(exception, SystemExit) else 1
   76:             sys.exit(code)
   77:         finally:
   78:             for handler in LOGGER.handlers:  # force flush of log messages before the trace is printed
   79:                 handler.flush()
   80: 
   81: 
   82: if __name__ == "__main__":  # pragma: no cov
   83:     run_with_catch()  # pragma: no cov
