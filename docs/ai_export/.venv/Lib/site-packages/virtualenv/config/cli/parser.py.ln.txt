    1: from __future__ import annotations
    2: 
    3: import os
    4: from argparse import SUPPRESS, ArgumentDefaultsHelpFormatter, ArgumentParser, Namespace
    5: from collections import OrderedDict
    6: 
    7: from virtualenv.config.convert import get_type
    8: from virtualenv.config.env_var import get_env_var
    9: from virtualenv.config.ini import IniConfig
   10: 
   11: 
   12: class VirtualEnvOptions(Namespace):
   13:     def __init__(self, **kwargs) -> None:
   14:         super().__init__(**kwargs)
   15:         self._src = None
   16:         self._sources = {}
   17: 
   18:     def set_src(self, key, value, src):
   19:         setattr(self, key, value)
   20:         if src.startswith("env var"):
   21:             src = "env var"
   22:         self._sources[key] = src
   23: 
   24:     def __setattr__(self, key, value) -> None:
   25:         if getattr(self, "_src", None) is not None:
   26:             self._sources[key] = self._src
   27:         super().__setattr__(key, value)
   28: 
   29:     def get_source(self, key):
   30:         return self._sources.get(key)
   31: 
   32:     @property
   33:     def verbosity(self):
   34:         if not hasattr(self, "verbose") and not hasattr(self, "quiet"):
   35:             return None
   36:         return max(self.verbose - self.quiet, 0)
   37: 
   38:     def __repr__(self) -> str:
   39:         return f"{type(self).__name__}({', '.join(f'{k}={v}' for k, v in vars(self).items() if not k.startswith('_'))})"
   40: 
   41: 
   42: class VirtualEnvConfigParser(ArgumentParser):
   43:     """Custom option parser which updates its defaults by checking the configuration files and environmental vars."""
   44: 
   45:     def __init__(self, options=None, env=None, *args, **kwargs) -> None:
   46:         env = os.environ if env is None else env
   47:         self.file_config = IniConfig(env)
   48:         self.epilog_list = []
   49:         self.env = env
   50:         kwargs["epilog"] = self.file_config.epilog
   51:         kwargs["add_help"] = False
   52:         kwargs["formatter_class"] = HelpFormatter
   53:         kwargs["prog"] = "virtualenv"
   54:         super().__init__(*args, **kwargs)
   55:         self._fixed = set()
   56:         if options is not None and not isinstance(options, VirtualEnvOptions):
   57:             msg = "options must be of type VirtualEnvOptions"
   58:             raise TypeError(msg)
   59:         self.options = VirtualEnvOptions() if options is None else options
   60:         self._interpreter = None
   61:         self._app_data = None
   62: 
   63:     def _fix_defaults(self):
   64:         for action in self._actions:
   65:             action_id = id(action)
   66:             if action_id not in self._fixed:
   67:                 self._fix_default(action)
   68:                 self._fixed.add(action_id)
   69: 
   70:     def _fix_default(self, action):
   71:         if hasattr(action, "default") and hasattr(action, "dest") and action.default != SUPPRESS:
   72:             as_type = get_type(action)
   73:             names = OrderedDict((i.lstrip("-").replace("-", "_"), None) for i in action.option_strings)
   74:             outcome = None
   75:             for name in names:
   76:                 outcome = get_env_var(name, as_type, self.env)
   77:                 if outcome is not None:
   78:                     break
   79:             if outcome is None and self.file_config:
   80:                 for name in names:
   81:                     outcome = self.file_config.get(name, as_type)
   82:                     if outcome is not None:
   83:                         break
   84:             if outcome is not None:
   85:                 action.default, action.default_source = outcome
   86:             else:
   87:                 outcome = action.default, "default"
   88:             self.options.set_src(action.dest, *outcome)
   89: 
   90:     def enable_help(self):
   91:         self._fix_defaults()
   92:         self.add_argument("-h", "--help", action="help", default=SUPPRESS, help="show this help message and exit")
   93: 
   94:     def parse_known_args(self, args=None, namespace=None):
   95:         if namespace is None:
   96:             namespace = self.options
   97:         elif namespace is not self.options:
   98:             msg = "can only pass in parser.options"
   99:             raise ValueError(msg)
  100:         self._fix_defaults()
  101:         self.options._src = "cli"  # noqa: SLF001
  102:         try:
  103:             namespace.env = self.env
  104:             return super().parse_known_args(args, namespace=namespace)
  105:         finally:
  106:             self.options._src = None  # noqa: SLF001
  107: 
  108: 
  109: class HelpFormatter(ArgumentDefaultsHelpFormatter):
  110:     def __init__(self, prog, **kwargs) -> None:
  111:         super().__init__(prog, max_help_position=32, width=240, **kwargs)
  112: 
  113:     def _get_help_string(self, action):
  114:         text = super()._get_help_string(action)
  115:         if hasattr(action, "default_source"):
  116:             default = " (default: %(default)s)"
  117:             if text.endswith(default):
  118:                 text = f"{text[: -len(default)]} (default: %(default)s -> from %(default_source)s)"
  119:         return text
  120: 
  121: 
  122: __all__ = [
  123:     "HelpFormatter",
  124:     "VirtualEnvConfigParser",
  125:     "VirtualEnvOptions",
  126: ]
