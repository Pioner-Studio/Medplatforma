    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os
    5: from configparser import ConfigParser
    6: from pathlib import Path
    7: from typing import ClassVar
    8: 
    9: from platformdirs import user_config_dir
   10: 
   11: from .convert import convert
   12: 
   13: LOGGER = logging.getLogger(__name__)
   14: 
   15: 
   16: class IniConfig:
   17:     VIRTUALENV_CONFIG_FILE_ENV_VAR: ClassVar[str] = "VIRTUALENV_CONFIG_FILE"
   18:     STATE: ClassVar[dict[bool | None, str]] = {None: "failed to parse", True: "active", False: "missing"}
   19: 
   20:     section = "virtualenv"
   21: 
   22:     def __init__(self, env=None) -> None:
   23:         env = os.environ if env is None else env
   24:         config_file = env.get(self.VIRTUALENV_CONFIG_FILE_ENV_VAR, None)
   25:         self.is_env_var = config_file is not None
   26:         if config_file is None:
   27:             config_file = Path(user_config_dir(appname="virtualenv", appauthor="pypa")) / "virtualenv.ini"
   28:         else:
   29:             config_file = Path(config_file)
   30:         self.config_file = config_file
   31:         self._cache = {}
   32: 
   33:         exception = None
   34:         self.has_config_file = None
   35:         try:
   36:             self.has_config_file = self.config_file.exists()
   37:         except OSError as exc:
   38:             exception = exc
   39:         else:
   40:             if self.has_config_file:
   41:                 self.config_file = self.config_file.resolve()
   42:                 self.config_parser = ConfigParser()
   43:                 try:
   44:                     self._load()
   45:                     self.has_virtualenv_section = self.config_parser.has_section(self.section)
   46:                 except Exception as exc:  # noqa: BLE001
   47:                     exception = exc
   48:         if exception is not None:
   49:             LOGGER.error("failed to read config file %s because %r", config_file, exception)
   50: 
   51:     def _load(self):
   52:         with self.config_file.open("rt", encoding="utf-8") as file_handler:
   53:             return self.config_parser.read_file(file_handler)
   54: 
   55:     def get(self, key, as_type):
   56:         cache_key = key, as_type
   57:         if cache_key in self._cache:
   58:             return self._cache[cache_key]
   59:         try:
   60:             source = "file"
   61:             raw_value = self.config_parser.get(self.section, key.lower())
   62:             value = convert(raw_value, as_type, source)
   63:             result = value, source
   64:         except Exception:  # noqa: BLE001
   65:             result = None
   66:         self._cache[cache_key] = result
   67:         return result
   68: 
   69:     def __bool__(self) -> bool:
   70:         return bool(self.has_config_file) and bool(self.has_virtualenv_section)
   71: 
   72:     @property
   73:     def epilog(self):
   74:         return (
   75:             f"\nconfig file {self.config_file} {self.STATE[self.has_config_file]} "
   76:             f"(change{'d' if self.is_env_var else ''} via env var {self.VIRTUALENV_CONFIG_FILE_ENV_VAR})"
   77:         )
