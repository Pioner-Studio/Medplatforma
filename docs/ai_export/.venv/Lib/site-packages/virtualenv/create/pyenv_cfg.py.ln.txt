    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os
    5: from collections import OrderedDict
    6: 
    7: LOGGER = logging.getLogger(__name__)
    8: 
    9: 
   10: class PyEnvCfg:
   11:     def __init__(self, content, path) -> None:
   12:         self.content = content
   13:         self.path = path
   14: 
   15:     @classmethod
   16:     def from_folder(cls, folder):
   17:         return cls.from_file(folder / "pyvenv.cfg")
   18: 
   19:     @classmethod
   20:     def from_file(cls, path):
   21:         content = cls._read_values(path) if path.exists() else OrderedDict()
   22:         return PyEnvCfg(content, path)
   23: 
   24:     @staticmethod
   25:     def _read_values(path):
   26:         content = OrderedDict()
   27:         for line in path.read_text(encoding="utf-8").splitlines():
   28:             equals_at = line.index("=")
   29:             key = line[:equals_at].strip()
   30:             value = line[equals_at + 1 :].strip()
   31:             content[key] = value
   32:         return content
   33: 
   34:     def write(self):
   35:         LOGGER.debug("write %s", self.path)
   36:         text = ""
   37:         for key, value in self.content.items():
   38:             normalized_value = os.path.realpath(value) if value and os.path.exists(value) else value
   39:             line = f"{key} = {normalized_value}"
   40:             LOGGER.debug("\t%s", line)
   41:             text += line
   42:             text += "\n"
   43:         self.path.write_text(text, encoding="utf-8")
   44: 
   45:     def refresh(self):
   46:         self.content = self._read_values(self.path)
   47:         return self.content
   48: 
   49:     def __setitem__(self, key, value) -> None:
   50:         self.content[key] = value
   51: 
   52:     def __getitem__(self, key):
   53:         return self.content[key]
   54: 
   55:     def __contains__(self, item) -> bool:
   56:         return item in self.content
   57: 
   58:     def update(self, other):
   59:         self.content.update(other)
   60:         return self
   61: 
   62:     def __repr__(self) -> str:
   63:         return f"{self.__class__.__name__}(path={self.path})"
   64: 
   65: 
   66: __all__ = [
   67:     "PyEnvCfg",
   68: ]
