    1: from __future__ import annotations
    2: 
    3: import re
    4: from abc import ABC
    5: from collections import OrderedDict
    6: from pathlib import Path
    7: 
    8: from virtualenv.create.describe import PosixSupports, WindowsSupports
    9: from virtualenv.create.via_global_ref.builtin.ref import RefMust, RefWhen
   10: from virtualenv.create.via_global_ref.builtin.via_global_self_do import ViaGlobalRefVirtualenvBuiltin
   11: 
   12: 
   13: class CPython(ViaGlobalRefVirtualenvBuiltin, ABC):
   14:     @classmethod
   15:     def can_describe(cls, interpreter):
   16:         return interpreter.implementation == "CPython" and super().can_describe(interpreter)
   17: 
   18:     @classmethod
   19:     def exe_stem(cls):
   20:         return "python"
   21: 
   22: 
   23: class CPythonPosix(CPython, PosixSupports, ABC):
   24:     """Create a CPython virtual environment on POSIX platforms."""
   25: 
   26:     @classmethod
   27:     def _executables(cls, interpreter):
   28:         host_exe = Path(interpreter.system_executable)
   29:         major, minor = interpreter.version_info.major, interpreter.version_info.minor
   30:         targets = OrderedDict((i, None) for i in ["python", f"python{major}", f"python{major}.{minor}", host_exe.name])
   31:         yield host_exe, list(targets.keys()), RefMust.NA, RefWhen.ANY
   32: 
   33: 
   34: class CPythonWindows(CPython, WindowsSupports, ABC):
   35:     @classmethod
   36:     def _executables(cls, interpreter):
   37:         # symlink of the python executables does not work reliably, copy always instead
   38:         # - https://bugs.python.org/issue42013
   39:         # - venv
   40:         host = cls.host_python(interpreter)
   41:         for path in (host.parent / n for n in {"python.exe", host.name}):
   42:             yield host, [path.name], RefMust.COPY, RefWhen.ANY
   43:         # for more info on pythonw.exe see https://stackoverflow.com/a/30313091
   44:         python_w = host.parent / "pythonw.exe"
   45:         yield python_w, [python_w.name], RefMust.COPY, RefWhen.ANY
   46: 
   47:     @classmethod
   48:     def host_python(cls, interpreter):
   49:         return Path(interpreter.system_executable)
   50: 
   51: 
   52: def is_mac_os_framework(interpreter):
   53:     if interpreter.platform == "darwin":
   54:         return interpreter.sysconfig_vars.get("PYTHONFRAMEWORK") == "Python3"
   55:     return False
   56: 
   57: 
   58: def is_macos_brew(interpreter):
   59:     return interpreter.platform == "darwin" and _BREW.fullmatch(interpreter.system_prefix) is not None
   60: 
   61: 
   62: _BREW = re.compile(
   63:     r"/(usr/local|opt/homebrew)/(opt/python@3\.\d{1,2}|Cellar/python@3\.\d{1,2}/3\.\d{1,2}\.\d{1,2})/Frameworks/"
   64:     r"Python\.framework/Versions/3\.\d{1,2}",
   65: )
   66: 
   67: __all__ = [
   68:     "CPython",
   69:     "CPythonPosix",
   70:     "CPythonWindows",
   71:     "is_mac_os_framework",
   72:     "is_macos_brew",
   73: ]
