    1: # Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.
    2: import sys
    3: from unittest import TestCase, main
    4: 
    5: from ..ansi import Back, Fore, Style
    6: from ..ansitowin32 import AnsiToWin32
    7: 
    8: stdout_orig = sys.stdout
    9: stderr_orig = sys.stderr
   10: 
   11: 
   12: class AnsiTest(TestCase):
   13: 
   14:     def setUp(self):
   15:         # sanity check: stdout should be a file or StringIO object.
   16:         # It will only be AnsiToWin32 if init() has previously wrapped it
   17:         self.assertNotEqual(type(sys.stdout), AnsiToWin32)
   18:         self.assertNotEqual(type(sys.stderr), AnsiToWin32)
   19: 
   20:     def tearDown(self):
   21:         sys.stdout = stdout_orig
   22:         sys.stderr = stderr_orig
   23: 
   24: 
   25:     def testForeAttributes(self):
   26:         self.assertEqual(Fore.BLACK, '\033[30m')
   27:         self.assertEqual(Fore.RED, '\033[31m')
   28:         self.assertEqual(Fore.GREEN, '\033[32m')
   29:         self.assertEqual(Fore.YELLOW, '\033[33m')
   30:         self.assertEqual(Fore.BLUE, '\033[34m')
   31:         self.assertEqual(Fore.MAGENTA, '\033[35m')
   32:         self.assertEqual(Fore.CYAN, '\033[36m')
   33:         self.assertEqual(Fore.WHITE, '\033[37m')
   34:         self.assertEqual(Fore.RESET, '\033[39m')
   35: 
   36:         # Check the light, extended versions.
   37:         self.assertEqual(Fore.LIGHTBLACK_EX, '\033[90m')
   38:         self.assertEqual(Fore.LIGHTRED_EX, '\033[91m')
   39:         self.assertEqual(Fore.LIGHTGREEN_EX, '\033[92m')
   40:         self.assertEqual(Fore.LIGHTYELLOW_EX, '\033[93m')
   41:         self.assertEqual(Fore.LIGHTBLUE_EX, '\033[94m')
   42:         self.assertEqual(Fore.LIGHTMAGENTA_EX, '\033[95m')
   43:         self.assertEqual(Fore.LIGHTCYAN_EX, '\033[96m')
   44:         self.assertEqual(Fore.LIGHTWHITE_EX, '\033[97m')
   45: 
   46: 
   47:     def testBackAttributes(self):
   48:         self.assertEqual(Back.BLACK, '\033[40m')
   49:         self.assertEqual(Back.RED, '\033[41m')
   50:         self.assertEqual(Back.GREEN, '\033[42m')
   51:         self.assertEqual(Back.YELLOW, '\033[43m')
   52:         self.assertEqual(Back.BLUE, '\033[44m')
   53:         self.assertEqual(Back.MAGENTA, '\033[45m')
   54:         self.assertEqual(Back.CYAN, '\033[46m')
   55:         self.assertEqual(Back.WHITE, '\033[47m')
   56:         self.assertEqual(Back.RESET, '\033[49m')
   57: 
   58:         # Check the light, extended versions.
   59:         self.assertEqual(Back.LIGHTBLACK_EX, '\033[100m')
   60:         self.assertEqual(Back.LIGHTRED_EX, '\033[101m')
   61:         self.assertEqual(Back.LIGHTGREEN_EX, '\033[102m')
   62:         self.assertEqual(Back.LIGHTYELLOW_EX, '\033[103m')
   63:         self.assertEqual(Back.LIGHTBLUE_EX, '\033[104m')
   64:         self.assertEqual(Back.LIGHTMAGENTA_EX, '\033[105m')
   65:         self.assertEqual(Back.LIGHTCYAN_EX, '\033[106m')
   66:         self.assertEqual(Back.LIGHTWHITE_EX, '\033[107m')
   67: 
   68: 
   69:     def testStyleAttributes(self):
   70:         self.assertEqual(Style.DIM, '\033[2m')
   71:         self.assertEqual(Style.NORMAL, '\033[22m')
   72:         self.assertEqual(Style.BRIGHT, '\033[1m')
   73: 
   74: 
   75: if __name__ == '__main__':
   76:     main()
