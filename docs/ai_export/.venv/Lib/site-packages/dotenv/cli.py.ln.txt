    1: import json
    2: import os
    3: import shlex
    4: import sys
    5: from contextlib import contextmanager
    6: from subprocess import Popen
    7: from typing import Any, Dict, IO, Iterator, List
    8: 
    9: try:
   10:     import click
   11: except ImportError:
   12:     sys.stderr.write('It seems python-dotenv is not installed with cli option. \n'
   13:                      'Run pip install "python-dotenv[cli]" to fix this.')
   14:     sys.exit(1)
   15: 
   16: from .main import dotenv_values, set_key, unset_key
   17: from .version import __version__
   18: 
   19: 
   20: def enumerate_env():
   21:     """
   22:     Return a path for the ${pwd}/.env file.
   23: 
   24:     If pwd does not exist, return None.
   25:     """
   26:     try:
   27:         cwd = os.getcwd()
   28:     except FileNotFoundError:
   29:         return None
   30:     path = os.path.join(cwd, '.env')
   31:     return path
   32: 
   33: 
   34: @click.group()
   35: @click.option('-f', '--file', default=enumerate_env(),
   36:               type=click.Path(file_okay=True),
   37:               help="Location of the .env file, defaults to .env file in current working directory.")
   38: @click.option('-q', '--quote', default='always',
   39:               type=click.Choice(['always', 'never', 'auto']),
   40:               help="Whether to quote or not the variable values. Default mode is always. This does not affect parsing.")
   41: @click.option('-e', '--export', default=False,
   42:               type=click.BOOL,
   43:               help="Whether to write the dot file as an executable bash script.")
   44: @click.version_option(version=__version__)
   45: @click.pass_context
   46: def cli(ctx: click.Context, file: Any, quote: Any, export: Any) -> None:
   47:     """This script is used to set, get or unset values from a .env file."""
   48:     ctx.obj = {'QUOTE': quote, 'EXPORT': export, 'FILE': file}
   49: 
   50: 
   51: @contextmanager
   52: def stream_file(path: os.PathLike) -> Iterator[IO[str]]:
   53:     """
   54:     Open a file and yield the corresponding (decoded) stream.
   55: 
   56:     Exits with error code 2 if the file cannot be opened.
   57:     """
   58: 
   59:     try:
   60:         with open(path) as stream:
   61:             yield stream
   62:     except OSError as exc:
   63:         print(f"Error opening env file: {exc}", file=sys.stderr)
   64:         exit(2)
   65: 
   66: 
   67: @cli.command()
   68: @click.pass_context
   69: @click.option('--format', default='simple',
   70:               type=click.Choice(['simple', 'json', 'shell', 'export']),
   71:               help="The format in which to display the list. Default format is simple, "
   72:                    "which displays name=value without quotes.")
   73: def list(ctx: click.Context, format: bool) -> None:
   74:     """Display all the stored key/value."""
   75:     file = ctx.obj['FILE']
   76: 
   77:     with stream_file(file) as stream:
   78:         values = dotenv_values(stream=stream)
   79: 
   80:     if format == 'json':
   81:         click.echo(json.dumps(values, indent=2, sort_keys=True))
   82:     else:
   83:         prefix = 'export ' if format == 'export' else ''
   84:         for k in sorted(values):
   85:             v = values[k]
   86:             if v is not None:
   87:                 if format in ('export', 'shell'):
   88:                     v = shlex.quote(v)
   89:                 click.echo(f'{prefix}{k}={v}')
   90: 
   91: 
   92: @cli.command()
   93: @click.pass_context
   94: @click.argument('key', required=True)
   95: @click.argument('value', required=True)
   96: def set(ctx: click.Context, key: Any, value: Any) -> None:
   97:     """Store the given key/value."""
   98:     file = ctx.obj['FILE']
   99:     quote = ctx.obj['QUOTE']
  100:     export = ctx.obj['EXPORT']
  101:     success, key, value = set_key(file, key, value, quote, export)
  102:     if success:
  103:         click.echo(f'{key}={value}')
  104:     else:
  105:         exit(1)
  106: 
  107: 
  108: @cli.command()
  109: @click.pass_context
  110: @click.argument('key', required=True)
  111: def get(ctx: click.Context, key: Any) -> None:
  112:     """Retrieve the value for the given key."""
  113:     file = ctx.obj['FILE']
  114: 
  115:     with stream_file(file) as stream:
  116:         values = dotenv_values(stream=stream)
  117: 
  118:     stored_value = values.get(key)
  119:     if stored_value:
  120:         click.echo(stored_value)
  121:     else:
  122:         exit(1)
  123: 
  124: 
  125: @cli.command()
  126: @click.pass_context
  127: @click.argument('key', required=True)
  128: def unset(ctx: click.Context, key: Any) -> None:
  129:     """Removes the given key."""
  130:     file = ctx.obj['FILE']
  131:     quote = ctx.obj['QUOTE']
  132:     success, key = unset_key(file, key, quote)
  133:     if success:
  134:         click.echo(f"Successfully removed {key}")
  135:     else:
  136:         exit(1)
  137: 
  138: 
  139: @cli.command(context_settings={'ignore_unknown_options': True})
  140: @click.pass_context
  141: @click.option(
  142:     "--override/--no-override",
  143:     default=True,
  144:     help="Override variables from the environment file with those from the .env file.",
  145: )
  146: @click.argument('commandline', nargs=-1, type=click.UNPROCESSED)
  147: def run(ctx: click.Context, override: bool, commandline: List[str]) -> None:
  148:     """Run command with environment variables present."""
  149:     file = ctx.obj['FILE']
  150:     if not os.path.isfile(file):
  151:         raise click.BadParameter(
  152:             f'Invalid value for \'-f\' "{file}" does not exist.',
  153:             ctx=ctx
  154:         )
  155:     dotenv_as_dict = {
  156:         k: v
  157:         for (k, v) in dotenv_values(file).items()
  158:         if v is not None and (override or k not in os.environ)
  159:     }
  160: 
  161:     if not commandline:
  162:         click.echo('No command given.')
  163:         exit(1)
  164:     ret = run_command(commandline, dotenv_as_dict)
  165:     exit(ret)
  166: 
  167: 
  168: def run_command(command: List[str], env: Dict[str, str]) -> int:
  169:     """Run command in sub process.
  170: 
  171:     Runs the command in a sub process with the variables from `env`
  172:     added in the current environment variables.
  173: 
  174:     Parameters
  175:     ----------
  176:     command: List[str]
  177:         The command and it's parameters
  178:     env: Dict
  179:         The additional environment variables
  180: 
  181:     Returns
  182:     -------
  183:     int
  184:         The return code of the command
  185: 
  186:     """
  187:     # copy the current environment variables and add the vales from
  188:     # `env`
  189:     cmd_env = os.environ.copy()
  190:     cmd_env.update(env)
  191: 
  192:     p = Popen(command,
  193:               universal_newlines=True,
  194:               bufsize=0,
  195:               shell=False,
  196:               env=cmd_env)
  197:     _, _ = p.communicate()
  198: 
  199:     return p.returncode
