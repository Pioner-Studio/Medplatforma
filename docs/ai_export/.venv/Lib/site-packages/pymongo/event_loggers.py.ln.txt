    1: # Copyright 2020-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: 
   16: """Example event logger classes.
   17: 
   18: .. versionadded:: 3.11
   19: 
   20: These loggers can be registered using :func:`register` or
   21: :class:`~pymongo.mongo_client.MongoClient`.
   22: 
   23: ``monitoring.register(CommandLogger())``
   24: 
   25: or
   26: 
   27: ``MongoClient(event_listeners=[CommandLogger()])``
   28: """
   29: from __future__ import annotations
   30: 
   31: import logging
   32: 
   33: from pymongo import monitoring
   34: 
   35: 
   36: class CommandLogger(monitoring.CommandListener):
   37:     """A simple listener that logs command events.
   38: 
   39:     Listens for :class:`~pymongo.monitoring.CommandStartedEvent`,
   40:     :class:`~pymongo.monitoring.CommandSucceededEvent` and
   41:     :class:`~pymongo.monitoring.CommandFailedEvent` events and
   42:     logs them at the `INFO` severity level using :mod:`logging`.
   43:     .. versionadded:: 3.11
   44:     """
   45: 
   46:     def started(self, event: monitoring.CommandStartedEvent) -> None:
   47:         logging.info(
   48:             f"Command {event.command_name} with request id "
   49:             f"{event.request_id} started on server "
   50:             f"{event.connection_id}"
   51:         )
   52: 
   53:     def succeeded(self, event: monitoring.CommandSucceededEvent) -> None:
   54:         logging.info(
   55:             f"Command {event.command_name} with request id "
   56:             f"{event.request_id} on server {event.connection_id} "
   57:             f"succeeded in {event.duration_micros} "
   58:             "microseconds"
   59:         )
   60: 
   61:     def failed(self, event: monitoring.CommandFailedEvent) -> None:
   62:         logging.info(
   63:             f"Command {event.command_name} with request id "
   64:             f"{event.request_id} on server {event.connection_id} "
   65:             f"failed in {event.duration_micros} "
   66:             "microseconds"
   67:         )
   68: 
   69: 
   70: class ServerLogger(monitoring.ServerListener):
   71:     """A simple listener that logs server discovery events.
   72: 
   73:     Listens for :class:`~pymongo.monitoring.ServerOpeningEvent`,
   74:     :class:`~pymongo.monitoring.ServerDescriptionChangedEvent`,
   75:     and :class:`~pymongo.monitoring.ServerClosedEvent`
   76:     events and logs them at the `INFO` severity level using :mod:`logging`.
   77: 
   78:     .. versionadded:: 3.11
   79:     """
   80: 
   81:     def opened(self, event: monitoring.ServerOpeningEvent) -> None:
   82:         logging.info(f"Server {event.server_address} added to topology {event.topology_id}")
   83: 
   84:     def description_changed(self, event: monitoring.ServerDescriptionChangedEvent) -> None:
   85:         previous_server_type = event.previous_description.server_type
   86:         new_server_type = event.new_description.server_type
   87:         if new_server_type != previous_server_type:
   88:             # server_type_name was added in PyMongo 3.4
   89:             logging.info(
   90:                 f"Server {event.server_address} changed type from "
   91:                 f"{event.previous_description.server_type_name} to "
   92:                 f"{event.new_description.server_type_name}"
   93:             )
   94: 
   95:     def closed(self, event: monitoring.ServerClosedEvent) -> None:
   96:         logging.warning(f"Server {event.server_address} removed from topology {event.topology_id}")
   97: 
   98: 
   99: class HeartbeatLogger(monitoring.ServerHeartbeatListener):
  100:     """A simple listener that logs server heartbeat events.
  101: 
  102:     Listens for :class:`~pymongo.monitoring.ServerHeartbeatStartedEvent`,
  103:     :class:`~pymongo.monitoring.ServerHeartbeatSucceededEvent`,
  104:     and :class:`~pymongo.monitoring.ServerHeartbeatFailedEvent`
  105:     events and logs them at the `INFO` severity level using :mod:`logging`.
  106: 
  107:     .. versionadded:: 3.11
  108:     """
  109: 
  110:     def started(self, event: monitoring.ServerHeartbeatStartedEvent) -> None:
  111:         logging.info(f"Heartbeat sent to server {event.connection_id}")
  112: 
  113:     def succeeded(self, event: monitoring.ServerHeartbeatSucceededEvent) -> None:
  114:         # The reply.document attribute was added in PyMongo 3.4.
  115:         logging.info(
  116:             f"Heartbeat to server {event.connection_id} "
  117:             "succeeded with reply "
  118:             f"{event.reply.document}"
  119:         )
  120: 
  121:     def failed(self, event: monitoring.ServerHeartbeatFailedEvent) -> None:
  122:         logging.warning(
  123:             f"Heartbeat to server {event.connection_id} failed with error {event.reply}"
  124:         )
  125: 
  126: 
  127: class TopologyLogger(monitoring.TopologyListener):
  128:     """A simple listener that logs server topology events.
  129: 
  130:     Listens for :class:`~pymongo.monitoring.TopologyOpenedEvent`,
  131:     :class:`~pymongo.monitoring.TopologyDescriptionChangedEvent`,
  132:     and :class:`~pymongo.monitoring.TopologyClosedEvent`
  133:     events and logs them at the `INFO` severity level using :mod:`logging`.
  134: 
  135:     .. versionadded:: 3.11
  136:     """
  137: 
  138:     def opened(self, event: monitoring.TopologyOpenedEvent) -> None:
  139:         logging.info(f"Topology with id {event.topology_id} opened")
  140: 
  141:     def description_changed(self, event: monitoring.TopologyDescriptionChangedEvent) -> None:
  142:         logging.info(f"Topology description updated for topology id {event.topology_id}")
  143:         previous_topology_type = event.previous_description.topology_type
  144:         new_topology_type = event.new_description.topology_type
  145:         if new_topology_type != previous_topology_type:
  146:             # topology_type_name was added in PyMongo 3.4
  147:             logging.info(
  148:                 f"Topology {event.topology_id} changed type from "
  149:                 f"{event.previous_description.topology_type_name} to "
  150:                 f"{event.new_description.topology_type_name}"
  151:             )
  152:         # The has_writable_server and has_readable_server methods
  153:         # were added in PyMongo 3.4.
  154:         if not event.new_description.has_writable_server():
  155:             logging.warning("No writable servers available.")
  156:         if not event.new_description.has_readable_server():
  157:             logging.warning("No readable servers available.")
  158: 
  159:     def closed(self, event: monitoring.TopologyClosedEvent) -> None:
  160:         logging.info(f"Topology with id {event.topology_id} closed")
  161: 
  162: 
  163: class ConnectionPoolLogger(monitoring.ConnectionPoolListener):
  164:     """A simple listener that logs server connection pool events.
  165: 
  166:     Listens for :class:`~pymongo.monitoring.PoolCreatedEvent`,
  167:     :class:`~pymongo.monitoring.PoolClearedEvent`,
  168:     :class:`~pymongo.monitoring.PoolClosedEvent`,
  169:     :~pymongo.monitoring.class:`ConnectionCreatedEvent`,
  170:     :class:`~pymongo.monitoring.ConnectionReadyEvent`,
  171:     :class:`~pymongo.monitoring.ConnectionClosedEvent`,
  172:     :class:`~pymongo.monitoring.ConnectionCheckOutStartedEvent`,
  173:     :class:`~pymongo.monitoring.ConnectionCheckOutFailedEvent`,
  174:     :class:`~pymongo.monitoring.ConnectionCheckedOutEvent`,
  175:     and :class:`~pymongo.monitoring.ConnectionCheckedInEvent`
  176:     events and logs them at the `INFO` severity level using :mod:`logging`.
  177: 
  178:     .. versionadded:: 3.11
  179:     """
  180: 
  181:     def pool_created(self, event: monitoring.PoolCreatedEvent) -> None:
  182:         logging.info(f"[pool {event.address}] pool created")
  183: 
  184:     def pool_ready(self, event: monitoring.PoolReadyEvent) -> None:
  185:         logging.info(f"[pool {event.address}] pool ready")
  186: 
  187:     def pool_cleared(self, event: monitoring.PoolClearedEvent) -> None:
  188:         logging.info(f"[pool {event.address}] pool cleared")
  189: 
  190:     def pool_closed(self, event: monitoring.PoolClosedEvent) -> None:
  191:         logging.info(f"[pool {event.address}] pool closed")
  192: 
  193:     def connection_created(self, event: monitoring.ConnectionCreatedEvent) -> None:
  194:         logging.info(f"[pool {event.address}][conn #{event.connection_id}] connection created")
  195: 
  196:     def connection_ready(self, event: monitoring.ConnectionReadyEvent) -> None:
  197:         logging.info(
  198:             f"[pool {event.address}][conn #{event.connection_id}] connection setup succeeded"
  199:         )
  200: 
  201:     def connection_closed(self, event: monitoring.ConnectionClosedEvent) -> None:
  202:         logging.info(
  203:             f"[pool {event.address}][conn #{event.connection_id}] "
  204:             f'connection closed, reason: "{event.reason}"'
  205:         )
  206: 
  207:     def connection_check_out_started(
  208:         self, event: monitoring.ConnectionCheckOutStartedEvent
  209:     ) -> None:
  210:         logging.info(f"[pool {event.address}] connection check out started")
  211: 
  212:     def connection_check_out_failed(self, event: monitoring.ConnectionCheckOutFailedEvent) -> None:
  213:         logging.info(f"[pool {event.address}] connection check out failed, reason: {event.reason}")
  214: 
  215:     def connection_checked_out(self, event: monitoring.ConnectionCheckedOutEvent) -> None:
  216:         logging.info(
  217:             f"[pool {event.address}][conn #{event.connection_id}] connection checked out of pool"
  218:         )
  219: 
  220:     def connection_checked_in(self, event: monitoring.ConnectionCheckedInEvent) -> None:
  221:         logging.info(
  222:             f"[pool {event.address}][conn #{event.connection_id}] connection checked into pool"
  223:         )
