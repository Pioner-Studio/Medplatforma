    1: # Copyright 2009-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Python driver for MongoDB."""
   16: from __future__ import annotations
   17: 
   18: from typing import ContextManager, Optional
   19: 
   20: __all__ = [
   21:     "ASCENDING",
   22:     "DESCENDING",
   23:     "GEO2D",
   24:     "GEOSPHERE",
   25:     "HASHED",
   26:     "TEXT",
   27:     "version_tuple",
   28:     "get_version_string",
   29:     "__version__",
   30:     "version",
   31:     "ReturnDocument",
   32:     "MAX_SUPPORTED_WIRE_VERSION",
   33:     "MIN_SUPPORTED_WIRE_VERSION",
   34:     "CursorType",
   35:     "MongoClient",
   36:     "DeleteMany",
   37:     "DeleteOne",
   38:     "IndexModel",
   39:     "InsertOne",
   40:     "ReplaceOne",
   41:     "UpdateMany",
   42:     "UpdateOne",
   43:     "ReadPreference",
   44:     "WriteConcern",
   45:     "has_c",
   46:     "timeout",
   47: ]
   48: 
   49: ASCENDING = 1
   50: """Ascending sort order."""
   51: DESCENDING = -1
   52: """Descending sort order."""
   53: 
   54: GEO2D = "2d"
   55: """Index specifier for a 2-dimensional `geospatial index`_.
   56: 
   57: .. _geospatial index: http://mongodb.com/docs/manual/core/2d/
   58: """
   59: 
   60: GEOSPHERE = "2dsphere"
   61: """Index specifier for a `spherical geospatial index`_.
   62: 
   63: .. versionadded:: 2.5
   64: 
   65: .. _spherical geospatial index: http://mongodb.com/docs/manual/core/2dsphere/
   66: """
   67: 
   68: HASHED = "hashed"
   69: """Index specifier for a `hashed index`_.
   70: 
   71: .. versionadded:: 2.5
   72: 
   73: .. _hashed index: http://mongodb.com/docs/manual/core/index-hashed/
   74: """
   75: 
   76: TEXT = "text"
   77: """Index specifier for a `text index`_.
   78: 
   79: .. seealso:: MongoDB's `Atlas Search
   80:    <https://docs.atlas.mongodb.com/atlas-search/>`_ which offers more advanced
   81:    text search functionality.
   82: 
   83: .. versionadded:: 2.7.1
   84: 
   85: .. _text index: http://mongodb.com/docs/manual/core/index-text/
   86: """
   87: 
   88: from pymongo import _csot
   89: from pymongo._version import __version__, get_version_string, version_tuple
   90: from pymongo.collection import ReturnDocument
   91: from pymongo.common import MAX_SUPPORTED_WIRE_VERSION, MIN_SUPPORTED_WIRE_VERSION
   92: from pymongo.cursor import CursorType
   93: from pymongo.mongo_client import MongoClient
   94: from pymongo.operations import (
   95:     DeleteMany,
   96:     DeleteOne,
   97:     IndexModel,
   98:     InsertOne,
   99:     ReplaceOne,
  100:     UpdateMany,
  101:     UpdateOne,
  102: )
  103: from pymongo.read_preferences import ReadPreference
  104: from pymongo.write_concern import WriteConcern
  105: 
  106: version = __version__
  107: """Current version of PyMongo."""
  108: 
  109: 
  110: def has_c() -> bool:
  111:     """Is the C extension installed?"""
  112:     try:
  113:         from pymongo import _cmessage  # type: ignore[attr-defined] # noqa: F401
  114: 
  115:         return True
  116:     except ImportError:
  117:         return False
  118: 
  119: 
  120: def timeout(seconds: Optional[float]) -> ContextManager[None]:
  121:     """**(Provisional)** Apply the given timeout for a block of operations.
  122: 
  123:     .. note:: :func:`~pymongo.timeout` is currently provisional. Backwards
  124:        incompatible changes may occur before becoming officially supported.
  125: 
  126:     Use :func:`~pymongo.timeout` in a with-statement::
  127: 
  128:       with pymongo.timeout(5):
  129:           client.db.coll.insert_one({})
  130:           client.db.coll2.insert_one({})
  131: 
  132:     When the with-statement is entered, a deadline is set for the entire
  133:     block. When that deadline is exceeded, any blocking pymongo operation
  134:     will raise a timeout exception. For example::
  135: 
  136:       try:
  137:           with pymongo.timeout(5):
  138:               client.db.coll.insert_one({})
  139:               time.sleep(5)
  140:               # The deadline has now expired, the next operation will raise
  141:               # a timeout exception.
  142:               client.db.coll2.insert_one({})
  143:       except PyMongoError as exc:
  144:           if exc.timeout:
  145:               print(f"block timed out: {exc!r}")
  146:           else:
  147:               print(f"failed with non-timeout error: {exc!r}")
  148: 
  149:     When nesting :func:`~pymongo.timeout`, the nested deadline is capped by
  150:     the outer deadline. The deadline can only be shortened, not extended.
  151:     When exiting the block, the previous deadline is restored::
  152: 
  153:       with pymongo.timeout(5):
  154:           coll.find_one()  # Uses the 5 second deadline.
  155:           with pymongo.timeout(3):
  156:               coll.find_one() # Uses the 3 second deadline.
  157:           coll.find_one()  # Uses the original 5 second deadline.
  158:           with pymongo.timeout(10):
  159:               coll.find_one()  # Still uses the original 5 second deadline.
  160:           coll.find_one()  # Uses the original 5 second deadline.
  161: 
  162:     :param seconds: A non-negative floating point number expressing seconds, or None.
  163: 
  164:     :raises: :py:class:`ValueError`: When `seconds` is negative.
  165: 
  166:     See :ref:`timeout-example` for more examples.
  167: 
  168:     .. versionadded:: 4.2
  169:     """
  170:     if not isinstance(seconds, (int, float, type(None))):
  171:         raise TypeError("timeout must be None, an int, or a float")
  172:     if seconds and seconds < 0:
  173:         raise ValueError("timeout cannot be negative")
  174:     if seconds is not None:
  175:         seconds = float(seconds)
  176:     return _csot._TimeoutContext(seconds)
