    1: # Copyright 2014-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for working with write concerns."""
   16: from __future__ import annotations
   17: 
   18: from typing import Any, Optional, Union
   19: 
   20: from pymongo.errors import ConfigurationError
   21: 
   22: 
   23: # Duplicated here to avoid a circular import.
   24: def validate_boolean(option: str, value: Any) -> bool:
   25:     """Validates that 'value' is True or False."""
   26:     if isinstance(value, bool):
   27:         return value
   28:     raise TypeError(f"{option} must be True or False, was: {option}={value}")
   29: 
   30: 
   31: class WriteConcern:
   32:     """WriteConcern
   33: 
   34:     :param w: (integer or string) Used with replication, write operations
   35:           will block until they have been replicated to the specified number
   36:           or tagged set of servers. `w=<integer>` always includes the replica
   37:           set primary (e.g. w=3 means write to the primary and wait until
   38:           replicated to **two** secondaries). **w=0 disables acknowledgement
   39:           of write operations and can not be used with other write concern
   40:           options.**
   41:     :param wtimeout: (integer) **DEPRECATED** Used in conjunction with `w`.
   42:           Specify a value in milliseconds to control how long to wait for write
   43:           propagation to complete. If replication does not complete in the given
   44:           timeframe, a timeout exception is raised.
   45:     :param j: If ``True`` block until write operations have been committed
   46:           to the journal. Cannot be used in combination with `fsync`. Write
   47:           operations will fail with an exception if this option is used when
   48:           the server is running without journaling.
   49:     :param fsync: If ``True`` and the server is running without journaling,
   50:           blocks until the server has synced all data files to disk. If the
   51:           server is running with journaling, this acts the same as the `j`
   52:           option, blocking until write operations have been committed to the
   53:           journal. Cannot be used in combination with `j`.
   54: 
   55: 
   56:     .. versionchanged:: 4.7
   57:         Deprecated parameter ``wtimeout``, use :meth:`~pymongo.timeout`.
   58:     """
   59: 
   60:     __slots__ = ("__document", "__acknowledged", "__server_default")
   61: 
   62:     def __init__(
   63:         self,
   64:         w: Optional[Union[int, str]] = None,
   65:         wtimeout: Optional[int] = None,
   66:         j: Optional[bool] = None,
   67:         fsync: Optional[bool] = None,
   68:     ) -> None:
   69:         self.__document: dict[str, Any] = {}
   70:         self.__acknowledged = True
   71: 
   72:         if wtimeout is not None:
   73:             if not isinstance(wtimeout, int):
   74:                 raise TypeError("wtimeout must be an integer")
   75:             if wtimeout < 0:
   76:                 raise ValueError("wtimeout cannot be less than 0")
   77:             self.__document["wtimeout"] = wtimeout
   78: 
   79:         if j is not None:
   80:             validate_boolean("j", j)
   81:             self.__document["j"] = j
   82: 
   83:         if fsync is not None:
   84:             validate_boolean("fsync", fsync)
   85:             if j and fsync:
   86:                 raise ConfigurationError("Can't set both j and fsync at the same time")
   87:             self.__document["fsync"] = fsync
   88: 
   89:         if w == 0 and j is True:
   90:             raise ConfigurationError("Cannot set w to 0 and j to True")
   91: 
   92:         if w is not None:
   93:             if isinstance(w, int):
   94:                 if w < 0:
   95:                     raise ValueError("w cannot be less than 0")
   96:                 self.__acknowledged = w > 0
   97:             elif not isinstance(w, str):
   98:                 raise TypeError("w must be an integer or string")
   99:             self.__document["w"] = w
  100: 
  101:         self.__server_default = not self.__document
  102: 
  103:     @property
  104:     def is_server_default(self) -> bool:
  105:         """Does this WriteConcern match the server default."""
  106:         return self.__server_default
  107: 
  108:     @property
  109:     def document(self) -> dict[str, Any]:
  110:         """The document representation of this write concern.
  111: 
  112:         .. note::
  113:           :class:`WriteConcern` is immutable. Mutating the value of
  114:           :attr:`document` does not mutate this :class:`WriteConcern`.
  115:         """
  116:         return self.__document.copy()
  117: 
  118:     @property
  119:     def acknowledged(self) -> bool:
  120:         """If ``True`` write operations will wait for acknowledgement before
  121:         returning.
  122:         """
  123:         return self.__acknowledged
  124: 
  125:     def __repr__(self) -> str:
  126:         return "WriteConcern({})".format(
  127:             ", ".join("{}={}".format(*kvt) for kvt in self.__document.items())
  128:         )
  129: 
  130:     def __eq__(self, other: Any) -> bool:
  131:         if isinstance(other, WriteConcern):
  132:             return self.__document == other.document
  133:         return NotImplemented
  134: 
  135:     def __ne__(self, other: Any) -> bool:
  136:         if isinstance(other, WriteConcern):
  137:             return self.__document != other.document
  138:         return NotImplemented
  139: 
  140: 
  141: DEFAULT_WRITE_CONCERN = WriteConcern()
