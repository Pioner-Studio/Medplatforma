    1: # Copyright 2016 MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for working with `collations`_.
   16: 
   17: .. _collations: https://www.mongodb.com/docs/manual/reference/collation/
   18: """
   19: from __future__ import annotations
   20: 
   21: from typing import Any, Mapping, Optional, Union
   22: 
   23: from pymongo import common
   24: from pymongo.write_concern import validate_boolean
   25: 
   26: 
   27: class CollationStrength:
   28:     """
   29:     An enum that defines values for `strength` on a
   30:     :class:`~pymongo.collation.Collation`.
   31:     """
   32: 
   33:     PRIMARY = 1
   34:     """Differentiate base (unadorned) characters."""
   35: 
   36:     SECONDARY = 2
   37:     """Differentiate character accents."""
   38: 
   39:     TERTIARY = 3
   40:     """Differentiate character case."""
   41: 
   42:     QUATERNARY = 4
   43:     """Differentiate words with and without punctuation."""
   44: 
   45:     IDENTICAL = 5
   46:     """Differentiate unicode code point (characters are exactly identical)."""
   47: 
   48: 
   49: class CollationAlternate:
   50:     """
   51:     An enum that defines values for `alternate` on a
   52:     :class:`~pymongo.collation.Collation`.
   53:     """
   54: 
   55:     NON_IGNORABLE = "non-ignorable"
   56:     """Spaces and punctuation are treated as base characters."""
   57: 
   58:     SHIFTED = "shifted"
   59:     """Spaces and punctuation are *not* considered base characters.
   60: 
   61:     Spaces and punctuation are distinguished regardless when the
   62:     :class:`~pymongo.collation.Collation` strength is at least
   63:     :data:`~pymongo.collation.CollationStrength.QUATERNARY`.
   64: 
   65:     """
   66: 
   67: 
   68: class CollationMaxVariable:
   69:     """
   70:     An enum that defines values for `max_variable` on a
   71:     :class:`~pymongo.collation.Collation`.
   72:     """
   73: 
   74:     PUNCT = "punct"
   75:     """Both punctuation and spaces are ignored."""
   76: 
   77:     SPACE = "space"
   78:     """Spaces alone are ignored."""
   79: 
   80: 
   81: class CollationCaseFirst:
   82:     """
   83:     An enum that defines values for `case_first` on a
   84:     :class:`~pymongo.collation.Collation`.
   85:     """
   86: 
   87:     UPPER = "upper"
   88:     """Sort uppercase characters first."""
   89: 
   90:     LOWER = "lower"
   91:     """Sort lowercase characters first."""
   92: 
   93:     OFF = "off"
   94:     """Default for locale or collation strength."""
   95: 
   96: 
   97: class Collation:
   98:     """Collation
   99: 
  100:     :param locale: (string) The locale of the collation. This should be a string
  101:         that identifies an `ICU locale ID` exactly. For example, ``en_US`` is
  102:         valid, but ``en_us`` and ``en-US`` are not. Consult the MongoDB
  103:         documentation for a list of supported locales.
  104:     :param caseLevel: (optional) If ``True``, turn on case sensitivity if
  105:         `strength` is 1 or 2 (case sensitivity is implied if `strength` is
  106:         greater than 2). Defaults to ``False``.
  107:     :param caseFirst: (optional) Specify that either uppercase or lowercase
  108:         characters take precedence. Must be one of the following values:
  109: 
  110:           * :data:`~CollationCaseFirst.UPPER`
  111:           * :data:`~CollationCaseFirst.LOWER`
  112:           * :data:`~CollationCaseFirst.OFF` (the default)
  113: 
  114:     :param strength: Specify the comparison strength. This is also
  115:         known as the ICU comparison level. This must be one of the following
  116:         values:
  117: 
  118:           * :data:`~CollationStrength.PRIMARY`
  119:           * :data:`~CollationStrength.SECONDARY`
  120:           * :data:`~CollationStrength.TERTIARY` (the default)
  121:           * :data:`~CollationStrength.QUATERNARY`
  122:           * :data:`~CollationStrength.IDENTICAL`
  123: 
  124:         Each successive level builds upon the previous. For example, a
  125:         `strength` of :data:`~CollationStrength.SECONDARY` differentiates
  126:         characters based both on the unadorned base character and its accents.
  127: 
  128:     :param numericOrdering: If ``True``, order numbers numerically
  129:         instead of in collation order (defaults to ``False``).
  130:     :param alternate: Specify whether spaces and punctuation are
  131:         considered base characters. This must be one of the following values:
  132: 
  133:           * :data:`~CollationAlternate.NON_IGNORABLE` (the default)
  134:           * :data:`~CollationAlternate.SHIFTED`
  135: 
  136:     :param maxVariable: When `alternate` is
  137:         :data:`~CollationAlternate.SHIFTED`, this option specifies what
  138:         characters may be ignored. This must be one of the following values:
  139: 
  140:           * :data:`~CollationMaxVariable.PUNCT` (the default)
  141:           * :data:`~CollationMaxVariable.SPACE`
  142: 
  143:     :param normalization: If ``True``, normalizes text into Unicode
  144:         NFD. Defaults to ``False``.
  145:     :param backwards: If ``True``, accents on characters are
  146:         considered from the back of the word to the front, as it is done in some
  147:         French dictionary ordering traditions. Defaults to ``False``.
  148:     :param kwargs: Keyword arguments supplying any additional options
  149:         to be sent with this Collation object.
  150: 
  151:     .. versionadded: 3.4
  152: 
  153:     """
  154: 
  155:     __slots__ = ("__document",)
  156: 
  157:     def __init__(
  158:         self,
  159:         locale: str,
  160:         caseLevel: Optional[bool] = None,
  161:         caseFirst: Optional[str] = None,
  162:         strength: Optional[int] = None,
  163:         numericOrdering: Optional[bool] = None,
  164:         alternate: Optional[str] = None,
  165:         maxVariable: Optional[str] = None,
  166:         normalization: Optional[bool] = None,
  167:         backwards: Optional[bool] = None,
  168:         **kwargs: Any,
  169:     ) -> None:
  170:         locale = common.validate_string("locale", locale)
  171:         self.__document: dict[str, Any] = {"locale": locale}
  172:         if caseLevel is not None:
  173:             self.__document["caseLevel"] = validate_boolean("caseLevel", caseLevel)
  174:         if caseFirst is not None:
  175:             self.__document["caseFirst"] = common.validate_string("caseFirst", caseFirst)
  176:         if strength is not None:
  177:             self.__document["strength"] = common.validate_integer("strength", strength)
  178:         if numericOrdering is not None:
  179:             self.__document["numericOrdering"] = validate_boolean(
  180:                 "numericOrdering", numericOrdering
  181:             )
  182:         if alternate is not None:
  183:             self.__document["alternate"] = common.validate_string("alternate", alternate)
  184:         if maxVariable is not None:
  185:             self.__document["maxVariable"] = common.validate_string("maxVariable", maxVariable)
  186:         if normalization is not None:
  187:             self.__document["normalization"] = validate_boolean("normalization", normalization)
  188:         if backwards is not None:
  189:             self.__document["backwards"] = validate_boolean("backwards", backwards)
  190:         self.__document.update(kwargs)
  191: 
  192:     @property
  193:     def document(self) -> dict[str, Any]:
  194:         """The document representation of this collation.
  195: 
  196:         .. note::
  197:           :class:`Collation` is immutable. Mutating the value of
  198:           :attr:`document` does not mutate this :class:`Collation`.
  199:         """
  200:         return self.__document.copy()
  201: 
  202:     def __repr__(self) -> str:
  203:         document = self.document
  204:         return "Collation({})".format(", ".join(f"{key}={document[key]!r}" for key in document))
  205: 
  206:     def __eq__(self, other: Any) -> bool:
  207:         if isinstance(other, Collation):
  208:             return self.document == other.document
  209:         return NotImplemented
  210: 
  211:     def __ne__(self, other: Any) -> bool:
  212:         return not self == other
  213: 
  214: 
  215: def validate_collation_or_none(
  216:     value: Optional[Union[Mapping[str, Any], Collation]]
  217: ) -> Optional[dict[str, Any]]:
  218:     if value is None:
  219:         return None
  220:     if isinstance(value, Collation):
  221:         return value.document
  222:     if isinstance(value, dict):
  223:         return value
  224:     raise TypeError("collation must be a dict, an instance of collation.Collation, or None.")
