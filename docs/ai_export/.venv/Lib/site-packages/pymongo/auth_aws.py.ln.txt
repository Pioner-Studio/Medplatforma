    1: # Copyright 2020-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """MONGODB-AWS Authentication helpers."""
   16: from __future__ import annotations
   17: 
   18: from typing import TYPE_CHECKING, Any, Mapping, Type
   19: 
   20: import bson
   21: from bson.binary import Binary
   22: from pymongo.errors import ConfigurationError, OperationFailure
   23: 
   24: if TYPE_CHECKING:
   25:     from bson.typings import _ReadableBuffer
   26:     from pymongo.auth import MongoCredential
   27:     from pymongo.pool import Connection
   28: 
   29: 
   30: def _authenticate_aws(credentials: MongoCredential, conn: Connection) -> None:
   31:     """Authenticate using MONGODB-AWS."""
   32:     try:
   33:         import pymongo_auth_aws  # type:ignore[import]
   34:     except ImportError as e:
   35:         raise ConfigurationError(
   36:             "MONGODB-AWS authentication requires pymongo-auth-aws: "
   37:             "install with: python -m pip install 'pymongo[aws]'"
   38:         ) from e
   39: 
   40:     # Delayed import.
   41:     from pymongo_auth_aws.auth import (  # type:ignore[import]
   42:         set_cached_credentials,
   43:         set_use_cached_credentials,
   44:     )
   45: 
   46:     set_use_cached_credentials(True)
   47: 
   48:     if conn.max_wire_version < 9:
   49:         raise ConfigurationError("MONGODB-AWS authentication requires MongoDB version 4.4 or later")
   50: 
   51:     class AwsSaslContext(pymongo_auth_aws.AwsSaslContext):  # type: ignore
   52:         # Dependency injection:
   53:         def binary_type(self) -> Type[Binary]:
   54:             """Return the bson.binary.Binary type."""
   55:             return Binary
   56: 
   57:         def bson_encode(self, doc: Mapping[str, Any]) -> bytes:
   58:             """Encode a dictionary to BSON."""
   59:             return bson.encode(doc)
   60: 
   61:         def bson_decode(self, data: _ReadableBuffer) -> Mapping[str, Any]:
   62:             """Decode BSON to a dictionary."""
   63:             return bson.decode(data)
   64: 
   65:     try:
   66:         ctx = AwsSaslContext(
   67:             pymongo_auth_aws.AwsCredential(
   68:                 credentials.username,
   69:                 credentials.password,
   70:                 credentials.mechanism_properties.aws_session_token,
   71:             )
   72:         )
   73:         client_payload = ctx.step(None)
   74:         client_first = {"saslStart": 1, "mechanism": "MONGODB-AWS", "payload": client_payload}
   75:         server_first = conn.command("$external", client_first)
   76:         res = server_first
   77:         # Limit how many times we loop to catch protocol / library issues
   78:         for _ in range(10):
   79:             client_payload = ctx.step(res["payload"])
   80:             cmd = {
   81:                 "saslContinue": 1,
   82:                 "conversationId": server_first["conversationId"],
   83:                 "payload": client_payload,
   84:             }
   85:             res = conn.command("$external", cmd)
   86:             if res["done"]:
   87:                 # SASL complete.
   88:                 break
   89:     except pymongo_auth_aws.PyMongoAuthAwsError as exc:
   90:         # Clear the cached credentials if we hit a failure in auth.
   91:         set_cached_credentials(None)
   92:         # Convert to OperationFailure and include pymongo-auth-aws version.
   93:         raise OperationFailure(
   94:             f"{exc} (pymongo-auth-aws version {pymongo_auth_aws.__version__})"
   95:         ) from None
   96:     except Exception:
   97:         # Clear the cached credentials if we hit a failure in auth.
   98:         set_cached_credentials(None)
   99:         raise
