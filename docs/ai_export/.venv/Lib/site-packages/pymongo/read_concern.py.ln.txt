    1: # Copyright 2015 MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License",
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for working with read concerns."""
   16: from __future__ import annotations
   17: 
   18: from typing import Any, Optional
   19: 
   20: 
   21: class ReadConcern:
   22:     """ReadConcern
   23: 
   24:     :param level: (string) The read concern level specifies the level of
   25:           isolation for read operations.  For example, a read operation using a
   26:           read concern level of ``majority`` will only return data that has been
   27:           written to a majority of nodes. If the level is left unspecified, the
   28:           server default will be used.
   29: 
   30:     .. versionadded:: 3.2
   31: 
   32:     """
   33: 
   34:     def __init__(self, level: Optional[str] = None) -> None:
   35:         if level is None or isinstance(level, str):
   36:             self.__level = level
   37:         else:
   38:             raise TypeError("level must be a string or None.")
   39: 
   40:     @property
   41:     def level(self) -> Optional[str]:
   42:         """The read concern level."""
   43:         return self.__level
   44: 
   45:     @property
   46:     def ok_for_legacy(self) -> bool:
   47:         """Return ``True`` if this read concern is compatible with
   48:         old wire protocol versions.
   49:         """
   50:         return self.level is None or self.level == "local"
   51: 
   52:     @property
   53:     def document(self) -> dict[str, Any]:
   54:         """The document representation of this read concern.
   55: 
   56:         .. note::
   57:           :class:`ReadConcern` is immutable. Mutating the value of
   58:           :attr:`document` does not mutate this :class:`ReadConcern`.
   59:         """
   60:         doc = {}
   61:         if self.__level:
   62:             doc["level"] = self.level
   63:         return doc
   64: 
   65:     def __eq__(self, other: Any) -> bool:
   66:         if isinstance(other, ReadConcern):
   67:             return self.document == other.document
   68:         return NotImplemented
   69: 
   70:     def __repr__(self) -> str:
   71:         if self.level:
   72:             return "ReadConcern(%s)" % self.level
   73:         return "ReadConcern()"
   74: 
   75: 
   76: DEFAULT_READ_CONCERN = ReadConcern()
