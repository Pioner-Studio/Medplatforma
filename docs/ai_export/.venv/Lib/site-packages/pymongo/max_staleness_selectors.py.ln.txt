    1: # Copyright 2016 MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License"); you
    4: # may not use this file except in compliance with the License.  You
    5: # may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   12: # implied.  See the License for the specific language governing
   13: # permissions and limitations under the License.
   14: 
   15: """Criteria to select ServerDescriptions based on maxStalenessSeconds.
   16: 
   17: The Max Staleness Spec says: When there is a known primary P,
   18: a secondary S's staleness is estimated with this formula:
   19: 
   20:   (S.lastUpdateTime - S.lastWriteDate) - (P.lastUpdateTime - P.lastWriteDate)
   21:   + heartbeatFrequencyMS
   22: 
   23: When there is no known primary, a secondary S's staleness is estimated with:
   24: 
   25:   SMax.lastWriteDate - S.lastWriteDate + heartbeatFrequencyMS
   26: 
   27: where "SMax" is the secondary with the greatest lastWriteDate.
   28: """
   29: from __future__ import annotations
   30: 
   31: from typing import TYPE_CHECKING
   32: 
   33: from pymongo.errors import ConfigurationError
   34: from pymongo.server_type import SERVER_TYPE
   35: 
   36: if TYPE_CHECKING:
   37:     from pymongo.server_selectors import Selection
   38: # Constant defined in Max Staleness Spec: An idle primary writes a no-op every
   39: # 10 seconds to refresh secondaries' lastWriteDate values.
   40: IDLE_WRITE_PERIOD = 10
   41: SMALLEST_MAX_STALENESS = 90
   42: 
   43: 
   44: def _validate_max_staleness(max_staleness: int, heartbeat_frequency: int) -> None:
   45:     # We checked for max staleness -1 before this, it must be positive here.
   46:     if max_staleness < heartbeat_frequency + IDLE_WRITE_PERIOD:
   47:         raise ConfigurationError(
   48:             "maxStalenessSeconds must be at least heartbeatFrequencyMS +"
   49:             " %d seconds. maxStalenessSeconds is set to %d,"
   50:             " heartbeatFrequencyMS is set to %d."
   51:             % (IDLE_WRITE_PERIOD, max_staleness, heartbeat_frequency * 1000)
   52:         )
   53: 
   54:     if max_staleness < SMALLEST_MAX_STALENESS:
   55:         raise ConfigurationError(
   56:             "maxStalenessSeconds must be at least %d. "
   57:             "maxStalenessSeconds is set to %d." % (SMALLEST_MAX_STALENESS, max_staleness)
   58:         )
   59: 
   60: 
   61: def _with_primary(max_staleness: int, selection: Selection) -> Selection:
   62:     """Apply max_staleness, in seconds, to a Selection with a known primary."""
   63:     primary = selection.primary
   64:     assert primary
   65:     sds = []
   66: 
   67:     for s in selection.server_descriptions:
   68:         if s.server_type == SERVER_TYPE.RSSecondary:
   69:             # See max-staleness.rst for explanation of this formula.
   70:             assert s.last_write_date and primary.last_write_date  # noqa: PT018
   71:             staleness = (
   72:                 (s.last_update_time - s.last_write_date)
   73:                 - (primary.last_update_time - primary.last_write_date)
   74:                 + selection.heartbeat_frequency
   75:             )
   76: 
   77:             if staleness <= max_staleness:
   78:                 sds.append(s)
   79:         else:
   80:             sds.append(s)
   81: 
   82:     return selection.with_server_descriptions(sds)
   83: 
   84: 
   85: def _no_primary(max_staleness: int, selection: Selection) -> Selection:
   86:     """Apply max_staleness, in seconds, to a Selection with no known primary."""
   87:     # Secondary that's replicated the most recent writes.
   88:     smax = selection.secondary_with_max_last_write_date()
   89:     if not smax:
   90:         # No secondaries and no primary, short-circuit out of here.
   91:         return selection.with_server_descriptions([])
   92: 
   93:     sds = []
   94: 
   95:     for s in selection.server_descriptions:
   96:         if s.server_type == SERVER_TYPE.RSSecondary:
   97:             # See max-staleness.rst for explanation of this formula.
   98:             assert smax.last_write_date and s.last_write_date  # noqa: PT018
   99:             staleness = smax.last_write_date - s.last_write_date + selection.heartbeat_frequency
  100: 
  101:             if staleness <= max_staleness:
  102:                 sds.append(s)
  103:         else:
  104:             sds.append(s)
  105: 
  106:     return selection.with_server_descriptions(sds)
  107: 
  108: 
  109: def select(max_staleness: int, selection: Selection) -> Selection:
  110:     """Apply max_staleness, in seconds, to a Selection."""
  111:     if max_staleness == -1:
  112:         return selection
  113: 
  114:     # Server Selection Spec: If the TopologyType is ReplicaSetWithPrimary or
  115:     # ReplicaSetNoPrimary, a client MUST raise an error if maxStaleness <
  116:     # heartbeatFrequency + IDLE_WRITE_PERIOD, or if maxStaleness < 90.
  117:     _validate_max_staleness(max_staleness, selection.heartbeat_frequency)
  118: 
  119:     if selection.primary:
  120:         return _with_primary(max_staleness, selection)
  121:     else:
  122:         return _no_primary(max_staleness, selection)
