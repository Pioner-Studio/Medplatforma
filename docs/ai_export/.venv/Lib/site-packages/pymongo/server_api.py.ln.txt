    1: # Copyright 2020-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License"); you
    4: # may not use this file except in compliance with the License.  You
    5: # may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   12: # implied.  See the License for the specific language governing
   13: # permissions and limitations under the License.
   14: 
   15: """Support for MongoDB Stable API.
   16: 
   17: .. _versioned-api-ref:
   18: 
   19: MongoDB Stable API
   20: =====================
   21: 
   22: Starting in MongoDB 5.0, applications can specify the server API version
   23: to use when creating a :class:`~pymongo.mongo_client.MongoClient`. Doing so
   24: ensures that the driver behaves in a manner compatible with that server API
   25: version, regardless of the server's actual release version.
   26: 
   27: Declaring an API Version
   28: ````````````````````````
   29: 
   30: .. attention:: Stable API requires MongoDB >=5.0.
   31: 
   32: To configure MongoDB Stable API, pass the ``server_api`` keyword option to
   33: :class:`~pymongo.mongo_client.MongoClient`::
   34: 
   35:     >>> from pymongo.mongo_client import MongoClient
   36:     >>> from pymongo.server_api import ServerApi
   37:     >>>
   38:     >>> # Declare API version "1" for MongoClient "client"
   39:     >>> server_api = ServerApi('1')
   40:     >>> client = MongoClient(server_api=server_api)
   41: 
   42: The declared API version is applied to all commands run through ``client``,
   43: including those sent through the generic
   44: :meth:`~pymongo.database.Database.command` helper.
   45: 
   46: .. note:: Declaring an API version on the
   47:    :class:`~pymongo.mongo_client.MongoClient` **and** specifying stable
   48:    API options in :meth:`~pymongo.database.Database.command` command document
   49:    is not supported and will lead to undefined behaviour.
   50: 
   51: To run any command without declaring a server API version or using a different
   52: API version, create a separate :class:`~pymongo.mongo_client.MongoClient`
   53: instance.
   54: 
   55: Strict Mode
   56: ```````````
   57: 
   58: Configuring ``strict`` mode will cause the MongoDB server to reject all
   59: commands that are not part of the declared :attr:`ServerApi.version`. This
   60: includes command options and aggregation pipeline stages.
   61: 
   62: For example::
   63: 
   64:     >>> server_api = ServerApi('1', strict=True)
   65:     >>> client = MongoClient(server_api=server_api)
   66:     >>> client.test.command('count', 'test')
   67:     Traceback (most recent call last):
   68:     ...
   69:     pymongo.errors.OperationFailure: Provided apiStrict:true, but the command count is not in API Version 1, full error: {'ok': 0.0, 'errmsg': 'Provided apiStrict:true, but the command count is not in API Version 1', 'code': 323, 'codeName': 'APIStrictError'
   70: 
   71: Detecting API Deprecations
   72: ``````````````````````````
   73: 
   74: The ``deprecationErrors`` option can be used to enable command failures
   75: when using functionality that is deprecated from the configured
   76: :attr:`ServerApi.version`. For example::
   77: 
   78:     >>> server_api = ServerApi('1', deprecation_errors=True)
   79:     >>> client = MongoClient(server_api=server_api)
   80: 
   81: Note that at the time of this writing, no deprecated APIs exist.
   82: 
   83: Classes
   84: =======
   85: """
   86: from __future__ import annotations
   87: 
   88: from typing import Any, MutableMapping, Optional
   89: 
   90: 
   91: class ServerApiVersion:
   92:     """An enum that defines values for :attr:`ServerApi.version`.
   93: 
   94:     .. versionadded:: 3.12
   95:     """
   96: 
   97:     V1 = "1"
   98:     """Server API version "1"."""
   99: 
  100: 
  101: class ServerApi:
  102:     """MongoDB Stable API."""
  103: 
  104:     def __init__(
  105:         self, version: str, strict: Optional[bool] = None, deprecation_errors: Optional[bool] = None
  106:     ):
  107:         """Options to configure MongoDB Stable API.
  108: 
  109:         :param version: The API version string. Must be one of the values in
  110:             :class:`ServerApiVersion`.
  111:         :param strict: Set to ``True`` to enable API strict mode.
  112:             Defaults to ``None`` which means "use the server's default".
  113:         :param deprecation_errors: Set to ``True`` to enable
  114:             deprecation errors. Defaults to ``None`` which means "use the
  115:             server's default".
  116: 
  117:         .. versionadded:: 3.12
  118:         """
  119:         if version != ServerApiVersion.V1:
  120:             raise ValueError(f"Unknown ServerApi version: {version}")
  121:         if strict is not None and not isinstance(strict, bool):
  122:             raise TypeError(
  123:                 "Wrong type for ServerApi strict, value must be an instance "
  124:                 f"of bool, not {type(strict)}"
  125:             )
  126:         if deprecation_errors is not None and not isinstance(deprecation_errors, bool):
  127:             raise TypeError(
  128:                 "Wrong type for ServerApi deprecation_errors, value must be "
  129:                 f"an instance of bool, not {type(deprecation_errors)}"
  130:             )
  131:         self._version = version
  132:         self._strict = strict
  133:         self._deprecation_errors = deprecation_errors
  134: 
  135:     @property
  136:     def version(self) -> str:
  137:         """The API version setting.
  138: 
  139:         This value is sent to the server in the "apiVersion" field.
  140:         """
  141:         return self._version
  142: 
  143:     @property
  144:     def strict(self) -> Optional[bool]:
  145:         """The API strict mode setting.
  146: 
  147:         When set, this value is sent to the server in the "apiStrict" field.
  148:         """
  149:         return self._strict
  150: 
  151:     @property
  152:     def deprecation_errors(self) -> Optional[bool]:
  153:         """The API deprecation errors setting.
  154: 
  155:         When set, this value is sent to the server in the
  156:         "apiDeprecationErrors" field.
  157:         """
  158:         return self._deprecation_errors
  159: 
  160: 
  161: def _add_to_command(cmd: MutableMapping[str, Any], server_api: Optional[ServerApi]) -> None:
  162:     """Internal helper which adds API versioning options to a command.
  163: 
  164:     :param cmd: The command.
  165:     :param server_api: A :class:`ServerApi` or ``None``.
  166:     """
  167:     if not server_api:
  168:         return
  169:     cmd["apiVersion"] = server_api.version
  170:     if server_api.strict is not None:
  171:         cmd["apiStrict"] = server_api.strict
  172:     if server_api.deprecation_errors is not None:
  173:         cmd["apiDeprecationErrors"] = server_api.deprecation_errors
