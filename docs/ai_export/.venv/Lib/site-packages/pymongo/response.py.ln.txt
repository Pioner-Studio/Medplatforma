    1: # Copyright 2014-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Represent a response from the server."""
   16: from __future__ import annotations
   17: 
   18: from typing import TYPE_CHECKING, Any, Mapping, Optional, Sequence, Union
   19: 
   20: if TYPE_CHECKING:
   21:     from datetime import timedelta
   22: 
   23:     from pymongo.message import _OpMsg, _OpReply
   24:     from pymongo.pool import Connection
   25:     from pymongo.typings import _Address, _DocumentOut
   26: 
   27: 
   28: class Response:
   29:     __slots__ = ("_data", "_address", "_request_id", "_duration", "_from_command", "_docs")
   30: 
   31:     def __init__(
   32:         self,
   33:         data: Union[_OpMsg, _OpReply],
   34:         address: _Address,
   35:         request_id: int,
   36:         duration: Optional[timedelta],
   37:         from_command: bool,
   38:         docs: Sequence[Mapping[str, Any]],
   39:     ):
   40:         """Represent a response from the server.
   41: 
   42:         :param data: A network response message.
   43:         :param address: (host, port) of the source server.
   44:         :param request_id: The request id of this operation.
   45:         :param duration: The duration of the operation.
   46:         :param from_command: if the response is the result of a db command.
   47:         """
   48:         self._data = data
   49:         self._address = address
   50:         self._request_id = request_id
   51:         self._duration = duration
   52:         self._from_command = from_command
   53:         self._docs = docs
   54: 
   55:     @property
   56:     def data(self) -> Union[_OpMsg, _OpReply]:
   57:         """Server response's raw BSON bytes."""
   58:         return self._data
   59: 
   60:     @property
   61:     def address(self) -> _Address:
   62:         """(host, port) of the source server."""
   63:         return self._address
   64: 
   65:     @property
   66:     def request_id(self) -> int:
   67:         """The request id of this operation."""
   68:         return self._request_id
   69: 
   70:     @property
   71:     def duration(self) -> Optional[timedelta]:
   72:         """The duration of the operation."""
   73:         return self._duration
   74: 
   75:     @property
   76:     def from_command(self) -> bool:
   77:         """If the response is a result from a db command."""
   78:         return self._from_command
   79: 
   80:     @property
   81:     def docs(self) -> Sequence[Mapping[str, Any]]:
   82:         """The decoded document(s)."""
   83:         return self._docs
   84: 
   85: 
   86: class PinnedResponse(Response):
   87:     __slots__ = ("_conn", "_more_to_come")
   88: 
   89:     def __init__(
   90:         self,
   91:         data: Union[_OpMsg, _OpReply],
   92:         address: _Address,
   93:         conn: Connection,
   94:         request_id: int,
   95:         duration: Optional[timedelta],
   96:         from_command: bool,
   97:         docs: list[_DocumentOut],
   98:         more_to_come: bool,
   99:     ):
  100:         """Represent a response to an exhaust cursor's initial query.
  101: 
  102:         :param data:  A network response message.
  103:         :param address: (host, port) of the source server.
  104:         :param conn: The Connection used for the initial query.
  105:         :param request_id: The request id of this operation.
  106:         :param duration: The duration of the operation.
  107:         :param from_command: If the response is the result of a db command.
  108:         :param docs: List of documents.
  109:         :param more_to_come: Bool indicating whether cursor is ready to be
  110:             exhausted.
  111:         """
  112:         super().__init__(data, address, request_id, duration, from_command, docs)
  113:         self._conn = conn
  114:         self._more_to_come = more_to_come
  115: 
  116:     @property
  117:     def conn(self) -> Connection:
  118:         """The Connection used for the initial query.
  119: 
  120:         The server will send batches on this socket, without waiting for
  121:         getMores from the client, until the result set is exhausted or there
  122:         is an error.
  123:         """
  124:         return self._conn
  125: 
  126:     @property
  127:     def more_to_come(self) -> bool:
  128:         """If true, server is ready to send batches on the socket until the
  129:         result set is exhausted or there is an error.
  130:         """
  131:         return self._more_to_come
