    1: # Copyright 2015-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Result class definitions."""
   16: from __future__ import annotations
   17: 
   18: from typing import Any, Mapping, Optional, cast
   19: 
   20: from pymongo.errors import InvalidOperation
   21: 
   22: 
   23: class _WriteResult:
   24:     """Base class for write result classes."""
   25: 
   26:     __slots__ = ("__acknowledged",)
   27: 
   28:     def __init__(self, acknowledged: bool) -> None:
   29:         self.__acknowledged = acknowledged
   30: 
   31:     def __repr__(self) -> str:
   32:         return f"{self.__class__.__name__}({self.__acknowledged})"
   33: 
   34:     def _raise_if_unacknowledged(self, property_name: str) -> None:
   35:         """Raise an exception on property access if unacknowledged."""
   36:         if not self.__acknowledged:
   37:             raise InvalidOperation(
   38:                 f"A value for {property_name} is not available when "
   39:                 "the write is unacknowledged. Check the "
   40:                 "acknowledged attribute to avoid this "
   41:                 "error."
   42:             )
   43: 
   44:     @property
   45:     def acknowledged(self) -> bool:
   46:         """Is this the result of an acknowledged write operation?
   47: 
   48:         The :attr:`acknowledged` attribute will be ``False`` when using
   49:         ``WriteConcern(w=0)``, otherwise ``True``.
   50: 
   51:         .. note::
   52:           If the :attr:`acknowledged` attribute is ``False`` all other
   53:           attributes of this class will raise
   54:           :class:`~pymongo.errors.InvalidOperation` when accessed. Values for
   55:           other attributes cannot be determined if the write operation was
   56:           unacknowledged.
   57: 
   58:         .. seealso::
   59:           :class:`~pymongo.write_concern.WriteConcern`
   60:         """
   61:         return self.__acknowledged
   62: 
   63: 
   64: class InsertOneResult(_WriteResult):
   65:     """The return type for :meth:`~pymongo.collection.Collection.insert_one`."""
   66: 
   67:     __slots__ = ("__inserted_id",)
   68: 
   69:     def __init__(self, inserted_id: Any, acknowledged: bool) -> None:
   70:         self.__inserted_id = inserted_id
   71:         super().__init__(acknowledged)
   72: 
   73:     def __repr__(self) -> str:
   74:         return (
   75:             f"{self.__class__.__name__}({self.__inserted_id!r}, acknowledged={self.acknowledged})"
   76:         )
   77: 
   78:     @property
   79:     def inserted_id(self) -> Any:
   80:         """The inserted document's _id."""
   81:         return self.__inserted_id
   82: 
   83: 
   84: class InsertManyResult(_WriteResult):
   85:     """The return type for :meth:`~pymongo.collection.Collection.insert_many`."""
   86: 
   87:     __slots__ = ("__inserted_ids",)
   88: 
   89:     def __init__(self, inserted_ids: list[Any], acknowledged: bool) -> None:
   90:         self.__inserted_ids = inserted_ids
   91:         super().__init__(acknowledged)
   92: 
   93:     def __repr__(self) -> str:
   94:         return (
   95:             f"{self.__class__.__name__}({self.__inserted_ids!r}, acknowledged={self.acknowledged})"
   96:         )
   97: 
   98:     @property
   99:     def inserted_ids(self) -> list[Any]:
  100:         """A list of _ids of the inserted documents, in the order provided.
  101: 
  102:         .. note:: If ``False`` is passed for the `ordered` parameter to
  103:           :meth:`~pymongo.collection.Collection.insert_many` the server
  104:           may have inserted the documents in a different order than what
  105:           is presented here.
  106:         """
  107:         return self.__inserted_ids
  108: 
  109: 
  110: class UpdateResult(_WriteResult):
  111:     """The return type for :meth:`~pymongo.collection.Collection.update_one`,
  112:     :meth:`~pymongo.collection.Collection.update_many`, and
  113:     :meth:`~pymongo.collection.Collection.replace_one`.
  114:     """
  115: 
  116:     __slots__ = ("__raw_result",)
  117: 
  118:     def __init__(self, raw_result: Optional[Mapping[str, Any]], acknowledged: bool):
  119:         self.__raw_result = raw_result
  120:         super().__init__(acknowledged)
  121: 
  122:     def __repr__(self) -> str:
  123:         return f"{self.__class__.__name__}({self.__raw_result!r}, acknowledged={self.acknowledged})"
  124: 
  125:     @property
  126:     def raw_result(self) -> Optional[Mapping[str, Any]]:
  127:         """The raw result document returned by the server."""
  128:         return self.__raw_result
  129: 
  130:     @property
  131:     def matched_count(self) -> int:
  132:         """The number of documents matched for this update."""
  133:         self._raise_if_unacknowledged("matched_count")
  134:         if self.upserted_id is not None:
  135:             return 0
  136:         assert self.__raw_result is not None
  137:         return self.__raw_result.get("n", 0)
  138: 
  139:     @property
  140:     def modified_count(self) -> int:
  141:         """The number of documents modified."""
  142:         self._raise_if_unacknowledged("modified_count")
  143:         assert self.__raw_result is not None
  144:         return cast(int, self.__raw_result.get("nModified"))
  145: 
  146:     @property
  147:     def upserted_id(self) -> Any:
  148:         """The _id of the inserted document if an upsert took place. Otherwise
  149:         ``None``.
  150:         """
  151:         self._raise_if_unacknowledged("upserted_id")
  152:         assert self.__raw_result is not None
  153:         return self.__raw_result.get("upserted")
  154: 
  155: 
  156: class DeleteResult(_WriteResult):
  157:     """The return type for :meth:`~pymongo.collection.Collection.delete_one`
  158:     and :meth:`~pymongo.collection.Collection.delete_many`
  159:     """
  160: 
  161:     __slots__ = ("__raw_result",)
  162: 
  163:     def __init__(self, raw_result: Mapping[str, Any], acknowledged: bool) -> None:
  164:         self.__raw_result = raw_result
  165:         super().__init__(acknowledged)
  166: 
  167:     def __repr__(self) -> str:
  168:         return f"{self.__class__.__name__}({self.__raw_result!r}, acknowledged={self.acknowledged})"
  169: 
  170:     @property
  171:     def raw_result(self) -> Mapping[str, Any]:
  172:         """The raw result document returned by the server."""
  173:         return self.__raw_result
  174: 
  175:     @property
  176:     def deleted_count(self) -> int:
  177:         """The number of documents deleted."""
  178:         self._raise_if_unacknowledged("deleted_count")
  179:         return self.__raw_result.get("n", 0)
  180: 
  181: 
  182: class BulkWriteResult(_WriteResult):
  183:     """An object wrapper for bulk API write results."""
  184: 
  185:     __slots__ = ("__bulk_api_result",)
  186: 
  187:     def __init__(self, bulk_api_result: dict[str, Any], acknowledged: bool) -> None:
  188:         """Create a BulkWriteResult instance.
  189: 
  190:         :param bulk_api_result: A result dict from the bulk API
  191:         :param acknowledged: Was this write result acknowledged? If ``False``
  192:             then all properties of this object will raise
  193:             :exc:`~pymongo.errors.InvalidOperation`.
  194:         """
  195:         self.__bulk_api_result = bulk_api_result
  196:         super().__init__(acknowledged)
  197: 
  198:     def __repr__(self) -> str:
  199:         return f"{self.__class__.__name__}({self.__bulk_api_result!r}, acknowledged={self.acknowledged})"
  200: 
  201:     @property
  202:     def bulk_api_result(self) -> dict[str, Any]:
  203:         """The raw bulk API result."""
  204:         return self.__bulk_api_result
  205: 
  206:     @property
  207:     def inserted_count(self) -> int:
  208:         """The number of documents inserted."""
  209:         self._raise_if_unacknowledged("inserted_count")
  210:         return cast(int, self.__bulk_api_result.get("nInserted"))
  211: 
  212:     @property
  213:     def matched_count(self) -> int:
  214:         """The number of documents matched for an update."""
  215:         self._raise_if_unacknowledged("matched_count")
  216:         return cast(int, self.__bulk_api_result.get("nMatched"))
  217: 
  218:     @property
  219:     def modified_count(self) -> int:
  220:         """The number of documents modified."""
  221:         self._raise_if_unacknowledged("modified_count")
  222:         return cast(int, self.__bulk_api_result.get("nModified"))
  223: 
  224:     @property
  225:     def deleted_count(self) -> int:
  226:         """The number of documents deleted."""
  227:         self._raise_if_unacknowledged("deleted_count")
  228:         return cast(int, self.__bulk_api_result.get("nRemoved"))
  229: 
  230:     @property
  231:     def upserted_count(self) -> int:
  232:         """The number of documents upserted."""
  233:         self._raise_if_unacknowledged("upserted_count")
  234:         return cast(int, self.__bulk_api_result.get("nUpserted"))
  235: 
  236:     @property
  237:     def upserted_ids(self) -> Optional[dict[int, Any]]:
  238:         """A map of operation index to the _id of the upserted document."""
  239:         self._raise_if_unacknowledged("upserted_ids")
  240:         if self.__bulk_api_result:
  241:             return {upsert["index"]: upsert["_id"] for upsert in self.bulk_api_result["upserted"]}
  242:         return None
