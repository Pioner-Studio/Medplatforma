    1: from typing import Type
    2: 
    3: from cryptography.hazmat.primitives import serialization
    4: from cryptography.hazmat.primitives.asymmetric import ed448, ed25519
    5: 
    6: from dns.dnssecalgs.cryptography import CryptographyPrivateKey, CryptographyPublicKey
    7: from dns.dnssectypes import Algorithm
    8: from dns.rdtypes.ANY.DNSKEY import DNSKEY
    9: 
   10: 
   11: class PublicEDDSA(CryptographyPublicKey):
   12:     def verify(self, signature: bytes, data: bytes) -> None:
   13:         self.key.verify(signature, data)
   14: 
   15:     def encode_key_bytes(self) -> bytes:
   16:         """Encode a public key per RFC 8080, section 3."""
   17:         return self.key.public_bytes(
   18:             encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw
   19:         )
   20: 
   21:     @classmethod
   22:     def from_dnskey(cls, key: DNSKEY) -> "PublicEDDSA":
   23:         cls._ensure_algorithm_key_combination(key)
   24:         return cls(
   25:             key=cls.key_cls.from_public_bytes(key.key),
   26:         )
   27: 
   28: 
   29: class PrivateEDDSA(CryptographyPrivateKey):
   30:     public_cls: Type[PublicEDDSA]
   31: 
   32:     def sign(self, data: bytes, verify: bool = False) -> bytes:
   33:         """Sign using a private key per RFC 8080, section 4."""
   34:         signature = self.key.sign(data)
   35:         if verify:
   36:             self.public_key().verify(signature, data)
   37:         return signature
   38: 
   39:     @classmethod
   40:     def generate(cls) -> "PrivateEDDSA":
   41:         return cls(key=cls.key_cls.generate())
   42: 
   43: 
   44: class PublicED25519(PublicEDDSA):
   45:     key: ed25519.Ed25519PublicKey
   46:     key_cls = ed25519.Ed25519PublicKey
   47:     algorithm = Algorithm.ED25519
   48: 
   49: 
   50: class PrivateED25519(PrivateEDDSA):
   51:     key: ed25519.Ed25519PrivateKey
   52:     key_cls = ed25519.Ed25519PrivateKey
   53:     public_cls = PublicED25519
   54: 
   55: 
   56: class PublicED448(PublicEDDSA):
   57:     key: ed448.Ed448PublicKey
   58:     key_cls = ed448.Ed448PublicKey
   59:     algorithm = Algorithm.ED448
   60: 
   61: 
   62: class PrivateED448(PrivateEDDSA):
   63:     key: ed448.Ed448PrivateKey
   64:     key_cls = ed448.Ed448PrivateKey
   65:     public_cls = PublicED448
