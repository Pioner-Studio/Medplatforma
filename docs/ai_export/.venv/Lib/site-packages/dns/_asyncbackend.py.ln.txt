    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # This is a nullcontext for both sync and async.  3.7 has a nullcontext,
    4: # but it is only for sync use.
    5: 
    6: 
    7: class NullContext:
    8:     def __init__(self, enter_result=None):
    9:         self.enter_result = enter_result
   10: 
   11:     def __enter__(self):
   12:         return self.enter_result
   13: 
   14:     def __exit__(self, exc_type, exc_value, traceback):
   15:         pass
   16: 
   17:     async def __aenter__(self):
   18:         return self.enter_result
   19: 
   20:     async def __aexit__(self, exc_type, exc_value, traceback):
   21:         pass
   22: 
   23: 
   24: # These are declared here so backends can import them without creating
   25: # circular dependencies with dns.asyncbackend.
   26: 
   27: 
   28: class Socket:  # pragma: no cover
   29:     async def close(self):
   30:         pass
   31: 
   32:     async def getpeername(self):
   33:         raise NotImplementedError
   34: 
   35:     async def getsockname(self):
   36:         raise NotImplementedError
   37: 
   38:     async def getpeercert(self, timeout):
   39:         raise NotImplementedError
   40: 
   41:     async def __aenter__(self):
   42:         return self
   43: 
   44:     async def __aexit__(self, exc_type, exc_value, traceback):
   45:         await self.close()
   46: 
   47: 
   48: class DatagramSocket(Socket):  # pragma: no cover
   49:     def __init__(self, family: int):
   50:         self.family = family
   51: 
   52:     async def sendto(self, what, destination, timeout):
   53:         raise NotImplementedError
   54: 
   55:     async def recvfrom(self, size, timeout):
   56:         raise NotImplementedError
   57: 
   58: 
   59: class StreamSocket(Socket):  # pragma: no cover
   60:     async def sendall(self, what, timeout):
   61:         raise NotImplementedError
   62: 
   63:     async def recv(self, size, timeout):
   64:         raise NotImplementedError
   65: 
   66: 
   67: class NullTransport:
   68:     async def connect_tcp(self, host, port, timeout, local_address):
   69:         raise NotImplementedError
   70: 
   71: 
   72: class Backend:  # pragma: no cover
   73:     def name(self):
   74:         return "unknown"
   75: 
   76:     async def make_socket(
   77:         self,
   78:         af,
   79:         socktype,
   80:         proto=0,
   81:         source=None,
   82:         destination=None,
   83:         timeout=None,
   84:         ssl_context=None,
   85:         server_hostname=None,
   86:     ):
   87:         raise NotImplementedError
   88: 
   89:     def datagram_connection_required(self):
   90:         return False
   91: 
   92:     async def sleep(self, interval):
   93:         raise NotImplementedError
   94: 
   95:     def get_transport_class(self):
   96:         raise NotImplementedError
   97: 
   98:     async def wait_for(self, awaitable, timeout):
   99:         raise NotImplementedError
