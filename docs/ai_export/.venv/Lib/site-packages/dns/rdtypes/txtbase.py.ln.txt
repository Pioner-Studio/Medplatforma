    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2006-2017 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: """TXT-like base class."""
   19: 
   20: from typing import Any, Dict, Iterable, Optional, Tuple, Union
   21: 
   22: import dns.exception
   23: import dns.immutable
   24: import dns.rdata
   25: import dns.renderer
   26: import dns.tokenizer
   27: 
   28: 
   29: @dns.immutable.immutable
   30: class TXTBase(dns.rdata.Rdata):
   31:     """Base class for rdata that is like a TXT record (see RFC 1035)."""
   32: 
   33:     __slots__ = ["strings"]
   34: 
   35:     def __init__(
   36:         self,
   37:         rdclass: dns.rdataclass.RdataClass,
   38:         rdtype: dns.rdatatype.RdataType,
   39:         strings: Iterable[Union[bytes, str]],
   40:     ):
   41:         """Initialize a TXT-like rdata.
   42: 
   43:         *rdclass*, an ``int`` is the rdataclass of the Rdata.
   44: 
   45:         *rdtype*, an ``int`` is the rdatatype of the Rdata.
   46: 
   47:         *strings*, a tuple of ``bytes``
   48:         """
   49:         super().__init__(rdclass, rdtype)
   50:         self.strings: Tuple[bytes] = self._as_tuple(
   51:             strings, lambda x: self._as_bytes(x, True, 255)
   52:         )
   53: 
   54:     def to_text(
   55:         self,
   56:         origin: Optional[dns.name.Name] = None,
   57:         relativize: bool = True,
   58:         **kw: Dict[str, Any],
   59:     ) -> str:
   60:         txt = ""
   61:         prefix = ""
   62:         for s in self.strings:
   63:             txt += '{}"{}"'.format(prefix, dns.rdata._escapify(s))
   64:             prefix = " "
   65:         return txt
   66: 
   67:     @classmethod
   68:     def from_text(
   69:         cls,
   70:         rdclass: dns.rdataclass.RdataClass,
   71:         rdtype: dns.rdatatype.RdataType,
   72:         tok: dns.tokenizer.Tokenizer,
   73:         origin: Optional[dns.name.Name] = None,
   74:         relativize: bool = True,
   75:         relativize_to: Optional[dns.name.Name] = None,
   76:     ) -> dns.rdata.Rdata:
   77:         strings = []
   78:         for token in tok.get_remaining():
   79:             token = token.unescape_to_bytes()
   80:             # The 'if' below is always true in the current code, but we
   81:             # are leaving this check in in case things change some day.
   82:             if not (
   83:                 token.is_quoted_string() or token.is_identifier()
   84:             ):  # pragma: no cover
   85:                 raise dns.exception.SyntaxError("expected a string")
   86:             if len(token.value) > 255:
   87:                 raise dns.exception.SyntaxError("string too long")
   88:             strings.append(token.value)
   89:         if len(strings) == 0:
   90:             raise dns.exception.UnexpectedEnd
   91:         return cls(rdclass, rdtype, strings)
   92: 
   93:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   94:         for s in self.strings:
   95:             with dns.renderer.prefixed_length(file, 1):
   96:                 file.write(s)
   97: 
   98:     @classmethod
   99:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
  100:         strings = []
  101:         while parser.remaining() > 0:
  102:             s = parser.get_counted_bytes()
  103:             strings.append(s)
  104:         return cls(rdclass, rdtype, strings)
