    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2005-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import binascii
   19: import struct
   20: 
   21: import dns.immutable
   22: import dns.rdata
   23: import dns.rdatatype
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class TLSABase(dns.rdata.Rdata):
   28:     """Base class for TLSA and SMIMEA records"""
   29: 
   30:     # see: RFC 6698
   31: 
   32:     __slots__ = ["usage", "selector", "mtype", "cert"]
   33: 
   34:     def __init__(self, rdclass, rdtype, usage, selector, mtype, cert):
   35:         super().__init__(rdclass, rdtype)
   36:         self.usage = self._as_uint8(usage)
   37:         self.selector = self._as_uint8(selector)
   38:         self.mtype = self._as_uint8(mtype)
   39:         self.cert = self._as_bytes(cert)
   40: 
   41:     def to_text(self, origin=None, relativize=True, **kw):
   42:         kw = kw.copy()
   43:         chunksize = kw.pop("chunksize", 128)
   44:         return "%d %d %d %s" % (
   45:             self.usage,
   46:             self.selector,
   47:             self.mtype,
   48:             dns.rdata._hexify(self.cert, chunksize=chunksize, **kw),
   49:         )
   50: 
   51:     @classmethod
   52:     def from_text(
   53:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   54:     ):
   55:         usage = tok.get_uint8()
   56:         selector = tok.get_uint8()
   57:         mtype = tok.get_uint8()
   58:         cert = tok.concatenate_remaining_identifiers().encode()
   59:         cert = binascii.unhexlify(cert)
   60:         return cls(rdclass, rdtype, usage, selector, mtype, cert)
   61: 
   62:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   63:         header = struct.pack("!BBB", self.usage, self.selector, self.mtype)
   64:         file.write(header)
   65:         file.write(self.cert)
   66: 
   67:     @classmethod
   68:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   69:         header = parser.get_struct("BBB")
   70:         cert = parser.get_remaining()
   71:         return cls(rdclass, rdtype, header[0], header[1], header[2], cert)
