    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2005-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import binascii
   19: import struct
   20: 
   21: import dns.immutable
   22: import dns.rdata
   23: import dns.rdatatype
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class SSHFP(dns.rdata.Rdata):
   28:     """SSHFP record"""
   29: 
   30:     # See RFC 4255
   31: 
   32:     __slots__ = ["algorithm", "fp_type", "fingerprint"]
   33: 
   34:     def __init__(self, rdclass, rdtype, algorithm, fp_type, fingerprint):
   35:         super().__init__(rdclass, rdtype)
   36:         self.algorithm = self._as_uint8(algorithm)
   37:         self.fp_type = self._as_uint8(fp_type)
   38:         self.fingerprint = self._as_bytes(fingerprint, True)
   39: 
   40:     def to_text(self, origin=None, relativize=True, **kw):
   41:         kw = kw.copy()
   42:         chunksize = kw.pop("chunksize", 128)
   43:         return "%d %d %s" % (
   44:             self.algorithm,
   45:             self.fp_type,
   46:             dns.rdata._hexify(self.fingerprint, chunksize=chunksize, **kw),
   47:         )
   48: 
   49:     @classmethod
   50:     def from_text(
   51:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   52:     ):
   53:         algorithm = tok.get_uint8()
   54:         fp_type = tok.get_uint8()
   55:         fingerprint = tok.concatenate_remaining_identifiers().encode()
   56:         fingerprint = binascii.unhexlify(fingerprint)
   57:         return cls(rdclass, rdtype, algorithm, fp_type, fingerprint)
   58: 
   59:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   60:         header = struct.pack("!BB", self.algorithm, self.fp_type)
   61:         file.write(header)
   62:         file.write(self.fingerprint)
   63: 
   64:     @classmethod
   65:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   66:         header = parser.get_struct("BB")
   67:         fingerprint = parser.get_remaining()
   68:         return cls(rdclass, rdtype, header[0], header[1], fingerprint)
