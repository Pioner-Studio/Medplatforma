    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2003-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import struct
   19: 
   20: import dns.exception
   21: import dns.immutable
   22: import dns.rdata
   23: import dns.tokenizer
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class HINFO(dns.rdata.Rdata):
   28:     """HINFO record"""
   29: 
   30:     # see: RFC 1035
   31: 
   32:     __slots__ = ["cpu", "os"]
   33: 
   34:     def __init__(self, rdclass, rdtype, cpu, os):
   35:         super().__init__(rdclass, rdtype)
   36:         self.cpu = self._as_bytes(cpu, True, 255)
   37:         self.os = self._as_bytes(os, True, 255)
   38: 
   39:     def to_text(self, origin=None, relativize=True, **kw):
   40:         return '"{}" "{}"'.format(
   41:             dns.rdata._escapify(self.cpu), dns.rdata._escapify(self.os)
   42:         )
   43: 
   44:     @classmethod
   45:     def from_text(
   46:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   47:     ):
   48:         cpu = tok.get_string(max_length=255)
   49:         os = tok.get_string(max_length=255)
   50:         return cls(rdclass, rdtype, cpu, os)
   51: 
   52:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   53:         l = len(self.cpu)
   54:         assert l < 256
   55:         file.write(struct.pack("!B", l))
   56:         file.write(self.cpu)
   57:         l = len(self.os)
   58:         assert l < 256
   59:         file.write(struct.pack("!B", l))
   60:         file.write(self.os)
   61: 
   62:     @classmethod
   63:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   64:         cpu = parser.get_counted_bytes()
   65:         os = parser.get_counted_bytes()
   66:         return cls(rdclass, rdtype, cpu, os)
