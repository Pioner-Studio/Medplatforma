    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: import struct
    4: 
    5: import dns.immutable
    6: import dns.rdtypes.util
    7: 
    8: 
    9: @dns.immutable.immutable
   10: class NID(dns.rdata.Rdata):
   11:     """NID record"""
   12: 
   13:     # see: rfc6742.txt
   14: 
   15:     __slots__ = ["preference", "nodeid"]
   16: 
   17:     def __init__(self, rdclass, rdtype, preference, nodeid):
   18:         super().__init__(rdclass, rdtype)
   19:         self.preference = self._as_uint16(preference)
   20:         if isinstance(nodeid, bytes):
   21:             if len(nodeid) != 8:
   22:                 raise ValueError("invalid nodeid")
   23:             self.nodeid = dns.rdata._hexify(nodeid, 4, b":")
   24:         else:
   25:             dns.rdtypes.util.parse_formatted_hex(nodeid, 4, 4, ":")
   26:             self.nodeid = nodeid
   27: 
   28:     def to_text(self, origin=None, relativize=True, **kw):
   29:         return f"{self.preference} {self.nodeid}"
   30: 
   31:     @classmethod
   32:     def from_text(
   33:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   34:     ):
   35:         preference = tok.get_uint16()
   36:         nodeid = tok.get_identifier()
   37:         return cls(rdclass, rdtype, preference, nodeid)
   38: 
   39:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   40:         file.write(struct.pack("!H", self.preference))
   41:         file.write(dns.rdtypes.util.parse_formatted_hex(self.nodeid, 4, 4, ":"))
   42: 
   43:     @classmethod
   44:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   45:         preference = parser.get_uint16()
   46:         nodeid = parser.get_remaining()
   47:         return cls(rdclass, rdtype, preference, nodeid)
