    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2016 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import base64
   19: 
   20: import dns.exception
   21: import dns.immutable
   22: import dns.rdata
   23: import dns.tokenizer
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class OPENPGPKEY(dns.rdata.Rdata):
   28:     """OPENPGPKEY record"""
   29: 
   30:     # see: RFC 7929
   31: 
   32:     def __init__(self, rdclass, rdtype, key):
   33:         super().__init__(rdclass, rdtype)
   34:         self.key = self._as_bytes(key)
   35: 
   36:     def to_text(self, origin=None, relativize=True, **kw):
   37:         return dns.rdata._base64ify(self.key, chunksize=None, **kw)
   38: 
   39:     @classmethod
   40:     def from_text(
   41:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   42:     ):
   43:         b64 = tok.concatenate_remaining_identifiers().encode()
   44:         key = base64.b64decode(b64)
   45:         return cls(rdclass, rdtype, key)
   46: 
   47:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   48:         file.write(self.key)
   49: 
   50:     @classmethod
   51:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   52:         key = parser.get_remaining()
   53:         return cls(rdclass, rdtype, key)
