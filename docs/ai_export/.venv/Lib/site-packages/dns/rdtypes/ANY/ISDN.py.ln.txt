    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2003-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import struct
   19: 
   20: import dns.exception
   21: import dns.immutable
   22: import dns.rdata
   23: import dns.tokenizer
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class ISDN(dns.rdata.Rdata):
   28:     """ISDN record"""
   29: 
   30:     # see: RFC 1183
   31: 
   32:     __slots__ = ["address", "subaddress"]
   33: 
   34:     def __init__(self, rdclass, rdtype, address, subaddress):
   35:         super().__init__(rdclass, rdtype)
   36:         self.address = self._as_bytes(address, True, 255)
   37:         self.subaddress = self._as_bytes(subaddress, True, 255)
   38: 
   39:     def to_text(self, origin=None, relativize=True, **kw):
   40:         if self.subaddress:
   41:             return '"{}" "{}"'.format(
   42:                 dns.rdata._escapify(self.address), dns.rdata._escapify(self.subaddress)
   43:             )
   44:         else:
   45:             return '"%s"' % dns.rdata._escapify(self.address)
   46: 
   47:     @classmethod
   48:     def from_text(
   49:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   50:     ):
   51:         address = tok.get_string()
   52:         tokens = tok.get_remaining(max_tokens=1)
   53:         if len(tokens) >= 1:
   54:             subaddress = tokens[0].unescape().value
   55:         else:
   56:             subaddress = ""
   57:         return cls(rdclass, rdtype, address, subaddress)
   58: 
   59:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   60:         l = len(self.address)
   61:         assert l < 256
   62:         file.write(struct.pack("!B", l))
   63:         file.write(self.address)
   64:         l = len(self.subaddress)
   65:         if l > 0:
   66:             assert l < 256
   67:             file.write(struct.pack("!B", l))
   68:             file.write(self.subaddress)
   69: 
   70:     @classmethod
   71:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   72:         address = parser.get_counted_bytes()
   73:         if parser.remaining() > 0:
   74:             subaddress = parser.get_counted_bytes()
   75:         else:
   76:             subaddress = b""
   77:         return cls(rdclass, rdtype, address, subaddress)
