    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2003-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import struct
   19: 
   20: import dns.exception
   21: import dns.immutable
   22: import dns.name
   23: import dns.rdata
   24: 
   25: 
   26: @dns.immutable.immutable
   27: class SOA(dns.rdata.Rdata):
   28:     """SOA record"""
   29: 
   30:     # see: RFC 1035
   31: 
   32:     __slots__ = ["mname", "rname", "serial", "refresh", "retry", "expire", "minimum"]
   33: 
   34:     def __init__(
   35:         self, rdclass, rdtype, mname, rname, serial, refresh, retry, expire, minimum
   36:     ):
   37:         super().__init__(rdclass, rdtype)
   38:         self.mname = self._as_name(mname)
   39:         self.rname = self._as_name(rname)
   40:         self.serial = self._as_uint32(serial)
   41:         self.refresh = self._as_ttl(refresh)
   42:         self.retry = self._as_ttl(retry)
   43:         self.expire = self._as_ttl(expire)
   44:         self.minimum = self._as_ttl(minimum)
   45: 
   46:     def to_text(self, origin=None, relativize=True, **kw):
   47:         mname = self.mname.choose_relativity(origin, relativize)
   48:         rname = self.rname.choose_relativity(origin, relativize)
   49:         return "%s %s %d %d %d %d %d" % (
   50:             mname,
   51:             rname,
   52:             self.serial,
   53:             self.refresh,
   54:             self.retry,
   55:             self.expire,
   56:             self.minimum,
   57:         )
   58: 
   59:     @classmethod
   60:     def from_text(
   61:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   62:     ):
   63:         mname = tok.get_name(origin, relativize, relativize_to)
   64:         rname = tok.get_name(origin, relativize, relativize_to)
   65:         serial = tok.get_uint32()
   66:         refresh = tok.get_ttl()
   67:         retry = tok.get_ttl()
   68:         expire = tok.get_ttl()
   69:         minimum = tok.get_ttl()
   70:         return cls(
   71:             rdclass, rdtype, mname, rname, serial, refresh, retry, expire, minimum
   72:         )
   73: 
   74:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   75:         self.mname.to_wire(file, compress, origin, canonicalize)
   76:         self.rname.to_wire(file, compress, origin, canonicalize)
   77:         five_ints = struct.pack(
   78:             "!IIIII", self.serial, self.refresh, self.retry, self.expire, self.minimum
   79:         )
   80:         file.write(five_ints)
   81: 
   82:     @classmethod
   83:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   84:         mname = parser.get_name(origin)
   85:         rname = parser.get_name(origin)
   86:         return cls(rdclass, rdtype, mname, rname, *parser.get_struct("!IIIII"))
