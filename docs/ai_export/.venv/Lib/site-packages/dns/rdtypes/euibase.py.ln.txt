    1: # Copyright (C) 2015 Red Hat, Inc.
    2: # Author: Petr Spacek <pspacek@redhat.com>
    3: #
    4: # Permission to use, copy, modify, and distribute this software and its
    5: # documentation for any purpose with or without fee is hereby granted,
    6: # provided that the above copyright notice and this permission notice
    7: # appear in all copies.
    8: #
    9: # THE SOFTWARE IS PROVIDED 'AS IS' AND RED HAT DISCLAIMS ALL WARRANTIES
   10: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   11: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   12: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   13: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   14: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   15: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   16: 
   17: import binascii
   18: 
   19: import dns.immutable
   20: import dns.rdata
   21: 
   22: 
   23: @dns.immutable.immutable
   24: class EUIBase(dns.rdata.Rdata):
   25:     """EUIxx record"""
   26: 
   27:     # see: rfc7043.txt
   28: 
   29:     __slots__ = ["eui"]
   30:     # define these in subclasses
   31:     # byte_len = 6  # 0123456789ab (in hex)
   32:     # text_len = byte_len * 3 - 1  # 01-23-45-67-89-ab
   33: 
   34:     def __init__(self, rdclass, rdtype, eui):
   35:         super().__init__(rdclass, rdtype)
   36:         self.eui = self._as_bytes(eui)
   37:         if len(self.eui) != self.byte_len:
   38:             raise dns.exception.FormError(
   39:                 "EUI%s rdata has to have %s bytes" % (self.byte_len * 8, self.byte_len)
   40:             )
   41: 
   42:     def to_text(self, origin=None, relativize=True, **kw):
   43:         return dns.rdata._hexify(self.eui, chunksize=2, separator=b"-", **kw)
   44: 
   45:     @classmethod
   46:     def from_text(
   47:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   48:     ):
   49:         text = tok.get_string()
   50:         if len(text) != cls.text_len:
   51:             raise dns.exception.SyntaxError(
   52:                 "Input text must have %s characters" % cls.text_len
   53:             )
   54:         for i in range(2, cls.byte_len * 3 - 1, 3):
   55:             if text[i] != "-":
   56:                 raise dns.exception.SyntaxError("Dash expected at position %s" % i)
   57:         text = text.replace("-", "")
   58:         try:
   59:             data = binascii.unhexlify(text.encode())
   60:         except (ValueError, TypeError) as ex:
   61:             raise dns.exception.SyntaxError("Hex decoding error: %s" % str(ex))
   62:         return cls(rdclass, rdtype, data)
   63: 
   64:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   65:         file.write(self.eui)
   66: 
   67:     @classmethod
   68:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   69:         eui = parser.get_bytes(cls.byte_len)
   70:         return cls(rdclass, rdtype, eui)
