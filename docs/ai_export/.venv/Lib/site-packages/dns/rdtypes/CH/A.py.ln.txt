    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2003-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import struct
   19: 
   20: import dns.immutable
   21: import dns.rdtypes.mxbase
   22: 
   23: 
   24: @dns.immutable.immutable
   25: class A(dns.rdata.Rdata):
   26:     """A record for Chaosnet"""
   27: 
   28:     # domain: the domain of the address
   29:     # address: the 16-bit address
   30: 
   31:     __slots__ = ["domain", "address"]
   32: 
   33:     def __init__(self, rdclass, rdtype, domain, address):
   34:         super().__init__(rdclass, rdtype)
   35:         self.domain = self._as_name(domain)
   36:         self.address = self._as_uint16(address)
   37: 
   38:     def to_text(self, origin=None, relativize=True, **kw):
   39:         domain = self.domain.choose_relativity(origin, relativize)
   40:         return "%s %o" % (domain, self.address)
   41: 
   42:     @classmethod
   43:     def from_text(
   44:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   45:     ):
   46:         domain = tok.get_name(origin, relativize, relativize_to)
   47:         address = tok.get_uint16(base=8)
   48:         return cls(rdclass, rdtype, domain, address)
   49: 
   50:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   51:         self.domain.to_wire(file, compress, origin, canonicalize)
   52:         pref = struct.pack("!H", self.address)
   53:         file.write(pref)
   54: 
   55:     @classmethod
   56:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   57:         domain = parser.get_name(origin)
   58:         address = parser.get_uint16()
   59:         return cls(rdclass, rdtype, domain, address)
