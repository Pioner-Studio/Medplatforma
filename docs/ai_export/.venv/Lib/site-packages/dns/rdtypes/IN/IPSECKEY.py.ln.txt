    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2006, 2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import base64
   19: import struct
   20: 
   21: import dns.exception
   22: import dns.immutable
   23: import dns.rdtypes.util
   24: 
   25: 
   26: class Gateway(dns.rdtypes.util.Gateway):
   27:     name = "IPSECKEY gateway"
   28: 
   29: 
   30: @dns.immutable.immutable
   31: class IPSECKEY(dns.rdata.Rdata):
   32:     """IPSECKEY record"""
   33: 
   34:     # see: RFC 4025
   35: 
   36:     __slots__ = ["precedence", "gateway_type", "algorithm", "gateway", "key"]
   37: 
   38:     def __init__(
   39:         self, rdclass, rdtype, precedence, gateway_type, algorithm, gateway, key
   40:     ):
   41:         super().__init__(rdclass, rdtype)
   42:         gateway = Gateway(gateway_type, gateway)
   43:         self.precedence = self._as_uint8(precedence)
   44:         self.gateway_type = gateway.type
   45:         self.algorithm = self._as_uint8(algorithm)
   46:         self.gateway = gateway.gateway
   47:         self.key = self._as_bytes(key)
   48: 
   49:     def to_text(self, origin=None, relativize=True, **kw):
   50:         gateway = Gateway(self.gateway_type, self.gateway).to_text(origin, relativize)
   51:         return "%d %d %d %s %s" % (
   52:             self.precedence,
   53:             self.gateway_type,
   54:             self.algorithm,
   55:             gateway,
   56:             dns.rdata._base64ify(self.key, **kw),
   57:         )
   58: 
   59:     @classmethod
   60:     def from_text(
   61:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   62:     ):
   63:         precedence = tok.get_uint8()
   64:         gateway_type = tok.get_uint8()
   65:         algorithm = tok.get_uint8()
   66:         gateway = Gateway.from_text(
   67:             gateway_type, tok, origin, relativize, relativize_to
   68:         )
   69:         b64 = tok.concatenate_remaining_identifiers().encode()
   70:         key = base64.b64decode(b64)
   71:         return cls(
   72:             rdclass, rdtype, precedence, gateway_type, algorithm, gateway.gateway, key
   73:         )
   74: 
   75:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   76:         header = struct.pack("!BBB", self.precedence, self.gateway_type, self.algorithm)
   77:         file.write(header)
   78:         Gateway(self.gateway_type, self.gateway).to_wire(
   79:             file, compress, origin, canonicalize
   80:         )
   81:         file.write(self.key)
   82: 
   83:     @classmethod
   84:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   85:         header = parser.get_struct("!BBB")
   86:         gateway_type = header[1]
   87:         gateway = Gateway.from_wire_parser(gateway_type, parser, origin)
   88:         key = parser.get_remaining()
   89:         return cls(
   90:             rdclass, rdtype, header[0], gateway_type, header[2], gateway.gateway, key
   91:         )
