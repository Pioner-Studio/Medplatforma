    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2003-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import struct
   19: 
   20: import dns.exception
   21: import dns.immutable
   22: import dns.name
   23: import dns.rdata
   24: import dns.rdtypes.util
   25: 
   26: 
   27: @dns.immutable.immutable
   28: class PX(dns.rdata.Rdata):
   29:     """PX record."""
   30: 
   31:     # see: RFC 2163
   32: 
   33:     __slots__ = ["preference", "map822", "mapx400"]
   34: 
   35:     def __init__(self, rdclass, rdtype, preference, map822, mapx400):
   36:         super().__init__(rdclass, rdtype)
   37:         self.preference = self._as_uint16(preference)
   38:         self.map822 = self._as_name(map822)
   39:         self.mapx400 = self._as_name(mapx400)
   40: 
   41:     def to_text(self, origin=None, relativize=True, **kw):
   42:         map822 = self.map822.choose_relativity(origin, relativize)
   43:         mapx400 = self.mapx400.choose_relativity(origin, relativize)
   44:         return "%d %s %s" % (self.preference, map822, mapx400)
   45: 
   46:     @classmethod
   47:     def from_text(
   48:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   49:     ):
   50:         preference = tok.get_uint16()
   51:         map822 = tok.get_name(origin, relativize, relativize_to)
   52:         mapx400 = tok.get_name(origin, relativize, relativize_to)
   53:         return cls(rdclass, rdtype, preference, map822, mapx400)
   54: 
   55:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   56:         pref = struct.pack("!H", self.preference)
   57:         file.write(pref)
   58:         self.map822.to_wire(file, None, origin, canonicalize)
   59:         self.mapx400.to_wire(file, None, origin, canonicalize)
   60: 
   61:     @classmethod
   62:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   63:         preference = parser.get_uint16()
   64:         map822 = parser.get_name(origin)
   65:         mapx400 = parser.get_name(origin)
   66:         return cls(rdclass, rdtype, preference, map822, mapx400)
   67: 
   68:     def _processing_priority(self):
   69:         return self.preference
   70: 
   71:     @classmethod
   72:     def _processing_order(cls, iterable):
   73:         return dns.rdtypes.util.priority_processing_order(iterable)
