    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2004-2007, 2009-2011 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: import base64
   19: import enum
   20: import struct
   21: 
   22: import dns.dnssectypes
   23: import dns.exception
   24: import dns.immutable
   25: import dns.rdata
   26: 
   27: # wildcard import
   28: __all__ = ["SEP", "REVOKE", "ZONE"]  # noqa: F822
   29: 
   30: 
   31: class Flag(enum.IntFlag):
   32:     SEP = 0x0001
   33:     REVOKE = 0x0080
   34:     ZONE = 0x0100
   35: 
   36: 
   37: @dns.immutable.immutable
   38: class DNSKEYBase(dns.rdata.Rdata):
   39:     """Base class for rdata that is like a DNSKEY record"""
   40: 
   41:     __slots__ = ["flags", "protocol", "algorithm", "key"]
   42: 
   43:     def __init__(self, rdclass, rdtype, flags, protocol, algorithm, key):
   44:         super().__init__(rdclass, rdtype)
   45:         self.flags = Flag(self._as_uint16(flags))
   46:         self.protocol = self._as_uint8(protocol)
   47:         self.algorithm = dns.dnssectypes.Algorithm.make(algorithm)
   48:         self.key = self._as_bytes(key)
   49: 
   50:     def to_text(self, origin=None, relativize=True, **kw):
   51:         return "%d %d %d %s" % (
   52:             self.flags,
   53:             self.protocol,
   54:             self.algorithm,
   55:             dns.rdata._base64ify(self.key, **kw),
   56:         )
   57: 
   58:     @classmethod
   59:     def from_text(
   60:         cls, rdclass, rdtype, tok, origin=None, relativize=True, relativize_to=None
   61:     ):
   62:         flags = tok.get_uint16()
   63:         protocol = tok.get_uint8()
   64:         algorithm = tok.get_string()
   65:         b64 = tok.concatenate_remaining_identifiers().encode()
   66:         key = base64.b64decode(b64)
   67:         return cls(rdclass, rdtype, flags, protocol, algorithm, key)
   68: 
   69:     def _to_wire(self, file, compress=None, origin=None, canonicalize=False):
   70:         header = struct.pack("!HBB", self.flags, self.protocol, self.algorithm)
   71:         file.write(header)
   72:         file.write(self.key)
   73: 
   74:     @classmethod
   75:     def from_wire_parser(cls, rdclass, rdtype, parser, origin=None):
   76:         header = parser.get_struct("!HBB")
   77:         key = parser.get_remaining()
   78:         return cls(rdclass, rdtype, header[0], header[1], header[2], key)
   79: 
   80: 
   81: ### BEGIN generated Flag constants
   82: 
   83: SEP = Flag.SEP
   84: REVOKE = Flag.REVOKE
   85: ZONE = Flag.ZONE
   86: 
   87: ### END generated Flag constants
