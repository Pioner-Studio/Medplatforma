    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: import dns._features
    4: import dns.asyncbackend
    5: 
    6: if dns._features.have("doq"):
    7:     import aioquic.quic.configuration  # type: ignore
    8: 
    9:     from dns._asyncbackend import NullContext
   10:     from dns.quic._asyncio import (
   11:         AsyncioQuicConnection,
   12:         AsyncioQuicManager,
   13:         AsyncioQuicStream,
   14:     )
   15:     from dns.quic._common import AsyncQuicConnection, AsyncQuicManager
   16:     from dns.quic._sync import SyncQuicConnection, SyncQuicManager, SyncQuicStream
   17: 
   18:     have_quic = True
   19: 
   20:     def null_factory(
   21:         *args,  # pylint: disable=unused-argument
   22:         **kwargs,  # pylint: disable=unused-argument
   23:     ):
   24:         return NullContext(None)
   25: 
   26:     def _asyncio_manager_factory(
   27:         context, *args, **kwargs  # pylint: disable=unused-argument
   28:     ):
   29:         return AsyncioQuicManager(*args, **kwargs)
   30: 
   31:     # We have a context factory and a manager factory as for trio we need to have
   32:     # a nursery.
   33: 
   34:     _async_factories = {"asyncio": (null_factory, _asyncio_manager_factory)}
   35: 
   36:     if dns._features.have("trio"):
   37:         import trio
   38: 
   39:         from dns.quic._trio import (  # pylint: disable=ungrouped-imports
   40:             TrioQuicConnection,
   41:             TrioQuicManager,
   42:             TrioQuicStream,
   43:         )
   44: 
   45:         def _trio_context_factory():
   46:             return trio.open_nursery()
   47: 
   48:         def _trio_manager_factory(context, *args, **kwargs):
   49:             return TrioQuicManager(context, *args, **kwargs)
   50: 
   51:         _async_factories["trio"] = (_trio_context_factory, _trio_manager_factory)
   52: 
   53:     def factories_for_backend(backend=None):
   54:         if backend is None:
   55:             backend = dns.asyncbackend.get_default_backend()
   56:         return _async_factories[backend.name()]
   57: 
   58: else:  # pragma: no cover
   59:     have_quic = False
   60: 
   61:     from typing import Any
   62: 
   63:     class AsyncQuicStream:  # type: ignore
   64:         pass
   65: 
   66:     class AsyncQuicConnection:  # type: ignore
   67:         async def make_stream(self) -> Any:
   68:             raise NotImplementedError
   69: 
   70:     class SyncQuicStream:  # type: ignore
   71:         pass
   72: 
   73:     class SyncQuicConnection:  # type: ignore
   74:         def make_stream(self) -> Any:
   75:             raise NotImplementedError
