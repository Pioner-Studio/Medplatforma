    1: # Copyright (C) Dnspython Contributors, see LICENSE for text of ISC license
    2: 
    3: # Copyright (C) 2001-2017 Nominum, Inc.
    4: #
    5: # Permission to use, copy, modify, and distribute this software and its
    6: # documentation for any purpose with or without fee is hereby granted,
    7: # provided that the above copyright notice and this permission notice
    8: # appear in all copies.
    9: #
   10: # THE SOFTWARE IS PROVIDED "AS IS" AND NOMINUM DISCLAIMS ALL WARRANTIES
   11: # WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   12: # MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL NOMINUM BE LIABLE FOR
   13: # ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   14: # WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   15: # ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
   16: # OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   17: 
   18: """DNS Rdata Types."""
   19: 
   20: from typing import Dict
   21: 
   22: import dns.enum
   23: import dns.exception
   24: 
   25: 
   26: class RdataType(dns.enum.IntEnum):
   27:     """DNS Rdata Type"""
   28: 
   29:     TYPE0 = 0
   30:     NONE = 0
   31:     A = 1
   32:     NS = 2
   33:     MD = 3
   34:     MF = 4
   35:     CNAME = 5
   36:     SOA = 6
   37:     MB = 7
   38:     MG = 8
   39:     MR = 9
   40:     NULL = 10
   41:     WKS = 11
   42:     PTR = 12
   43:     HINFO = 13
   44:     MINFO = 14
   45:     MX = 15
   46:     TXT = 16
   47:     RP = 17
   48:     AFSDB = 18
   49:     X25 = 19
   50:     ISDN = 20
   51:     RT = 21
   52:     NSAP = 22
   53:     NSAP_PTR = 23
   54:     SIG = 24
   55:     KEY = 25
   56:     PX = 26
   57:     GPOS = 27
   58:     AAAA = 28
   59:     LOC = 29
   60:     NXT = 30
   61:     SRV = 33
   62:     NAPTR = 35
   63:     KX = 36
   64:     CERT = 37
   65:     A6 = 38
   66:     DNAME = 39
   67:     OPT = 41
   68:     APL = 42
   69:     DS = 43
   70:     SSHFP = 44
   71:     IPSECKEY = 45
   72:     RRSIG = 46
   73:     NSEC = 47
   74:     DNSKEY = 48
   75:     DHCID = 49
   76:     NSEC3 = 50
   77:     NSEC3PARAM = 51
   78:     TLSA = 52
   79:     SMIMEA = 53
   80:     HIP = 55
   81:     NINFO = 56
   82:     CDS = 59
   83:     CDNSKEY = 60
   84:     OPENPGPKEY = 61
   85:     CSYNC = 62
   86:     ZONEMD = 63
   87:     SVCB = 64
   88:     HTTPS = 65
   89:     SPF = 99
   90:     UNSPEC = 103
   91:     NID = 104
   92:     L32 = 105
   93:     L64 = 106
   94:     LP = 107
   95:     EUI48 = 108
   96:     EUI64 = 109
   97:     TKEY = 249
   98:     TSIG = 250
   99:     IXFR = 251
  100:     AXFR = 252
  101:     MAILB = 253
  102:     MAILA = 254
  103:     ANY = 255
  104:     URI = 256
  105:     CAA = 257
  106:     AVC = 258
  107:     AMTRELAY = 260
  108:     TA = 32768
  109:     DLV = 32769
  110: 
  111:     @classmethod
  112:     def _maximum(cls):
  113:         return 65535
  114: 
  115:     @classmethod
  116:     def _short_name(cls):
  117:         return "type"
  118: 
  119:     @classmethod
  120:     def _prefix(cls):
  121:         return "TYPE"
  122: 
  123:     @classmethod
  124:     def _extra_from_text(cls, text):
  125:         if text.find("-") >= 0:
  126:             try:
  127:                 return cls[text.replace("-", "_")]
  128:             except KeyError:
  129:                 pass
  130:         return _registered_by_text.get(text)
  131: 
  132:     @classmethod
  133:     def _extra_to_text(cls, value, current_text):
  134:         if current_text is None:
  135:             return _registered_by_value.get(value)
  136:         if current_text.find("_") >= 0:
  137:             return current_text.replace("_", "-")
  138:         return current_text
  139: 
  140:     @classmethod
  141:     def _unknown_exception_class(cls):
  142:         return UnknownRdatatype
  143: 
  144: 
  145: _registered_by_text: Dict[str, RdataType] = {}
  146: _registered_by_value: Dict[RdataType, str] = {}
  147: 
  148: _metatypes = {RdataType.OPT}
  149: 
  150: _singletons = {
  151:     RdataType.SOA,
  152:     RdataType.NXT,
  153:     RdataType.DNAME,
  154:     RdataType.NSEC,
  155:     RdataType.CNAME,
  156: }
  157: 
  158: 
  159: class UnknownRdatatype(dns.exception.DNSException):
  160:     """DNS resource record type is unknown."""
  161: 
  162: 
  163: def from_text(text: str) -> RdataType:
  164:     """Convert text into a DNS rdata type value.
  165: 
  166:     The input text can be a defined DNS RR type mnemonic or
  167:     instance of the DNS generic type syntax.
  168: 
  169:     For example, "NS" and "TYPE2" will both result in a value of 2.
  170: 
  171:     Raises ``dns.rdatatype.UnknownRdatatype`` if the type is unknown.
  172: 
  173:     Raises ``ValueError`` if the rdata type value is not >= 0 and <= 65535.
  174: 
  175:     Returns a ``dns.rdatatype.RdataType``.
  176:     """
  177: 
  178:     return RdataType.from_text(text)
  179: 
  180: 
  181: def to_text(value: RdataType) -> str:
  182:     """Convert a DNS rdata type value to text.
  183: 
  184:     If the value has a known mnemonic, it will be used, otherwise the
  185:     DNS generic type syntax will be used.
  186: 
  187:     Raises ``ValueError`` if the rdata type value is not >= 0 and <= 65535.
  188: 
  189:     Returns a ``str``.
  190:     """
  191: 
  192:     return RdataType.to_text(value)
  193: 
  194: 
  195: def is_metatype(rdtype: RdataType) -> bool:
  196:     """True if the specified type is a metatype.
  197: 
  198:     *rdtype* is a ``dns.rdatatype.RdataType``.
  199: 
  200:     The currently defined metatypes are TKEY, TSIG, IXFR, AXFR, MAILA,
  201:     MAILB, ANY, and OPT.
  202: 
  203:     Returns a ``bool``.
  204:     """
  205: 
  206:     return (256 > rdtype >= 128) or rdtype in _metatypes
  207: 
  208: 
  209: def is_singleton(rdtype: RdataType) -> bool:
  210:     """Is the specified type a singleton type?
  211: 
  212:     Singleton types can only have a single rdata in an rdataset, or a single
  213:     RR in an RRset.
  214: 
  215:     The currently defined singleton types are CNAME, DNAME, NSEC, NXT, and
  216:     SOA.
  217: 
  218:     *rdtype* is an ``int``.
  219: 
  220:     Returns a ``bool``.
  221:     """
  222: 
  223:     if rdtype in _singletons:
  224:         return True
  225:     return False
  226: 
  227: 
  228: # pylint: disable=redefined-outer-name
  229: def register_type(
  230:     rdtype: RdataType, rdtype_text: str, is_singleton: bool = False
  231: ) -> None:
  232:     """Dynamically register an rdatatype.
  233: 
  234:     *rdtype*, a ``dns.rdatatype.RdataType``, the rdatatype to register.
  235: 
  236:     *rdtype_text*, a ``str``, the textual form of the rdatatype.
  237: 
  238:     *is_singleton*, a ``bool``, indicating if the type is a singleton (i.e.
  239:     RRsets of the type can have only one member.)
  240:     """
  241: 
  242:     _registered_by_text[rdtype_text] = rdtype
  243:     _registered_by_value[rdtype] = rdtype_text
  244:     if is_singleton:
  245:         _singletons.add(rdtype)
  246: 
  247: 
  248: ### BEGIN generated RdataType constants
  249: 
  250: TYPE0 = RdataType.TYPE0
  251: NONE = RdataType.NONE
  252: A = RdataType.A
  253: NS = RdataType.NS
  254: MD = RdataType.MD
  255: MF = RdataType.MF
  256: CNAME = RdataType.CNAME
  257: SOA = RdataType.SOA
  258: MB = RdataType.MB
  259: MG = RdataType.MG
  260: MR = RdataType.MR
  261: NULL = RdataType.NULL
  262: WKS = RdataType.WKS
  263: PTR = RdataType.PTR
  264: HINFO = RdataType.HINFO
  265: MINFO = RdataType.MINFO
  266: MX = RdataType.MX
  267: TXT = RdataType.TXT
  268: RP = RdataType.RP
  269: AFSDB = RdataType.AFSDB
  270: X25 = RdataType.X25
  271: ISDN = RdataType.ISDN
  272: RT = RdataType.RT
  273: NSAP = RdataType.NSAP
  274: NSAP_PTR = RdataType.NSAP_PTR
  275: SIG = RdataType.SIG
  276: KEY = RdataType.KEY
  277: PX = RdataType.PX
  278: GPOS = RdataType.GPOS
  279: AAAA = RdataType.AAAA
  280: LOC = RdataType.LOC
  281: NXT = RdataType.NXT
  282: SRV = RdataType.SRV
  283: NAPTR = RdataType.NAPTR
  284: KX = RdataType.KX
  285: CERT = RdataType.CERT
  286: A6 = RdataType.A6
  287: DNAME = RdataType.DNAME
  288: OPT = RdataType.OPT
  289: APL = RdataType.APL
  290: DS = RdataType.DS
  291: SSHFP = RdataType.SSHFP
  292: IPSECKEY = RdataType.IPSECKEY
  293: RRSIG = RdataType.RRSIG
  294: NSEC = RdataType.NSEC
  295: DNSKEY = RdataType.DNSKEY
  296: DHCID = RdataType.DHCID
  297: NSEC3 = RdataType.NSEC3
  298: NSEC3PARAM = RdataType.NSEC3PARAM
  299: TLSA = RdataType.TLSA
  300: SMIMEA = RdataType.SMIMEA
  301: HIP = RdataType.HIP
  302: NINFO = RdataType.NINFO
  303: CDS = RdataType.CDS
  304: CDNSKEY = RdataType.CDNSKEY
  305: OPENPGPKEY = RdataType.OPENPGPKEY
  306: CSYNC = RdataType.CSYNC
  307: ZONEMD = RdataType.ZONEMD
  308: SVCB = RdataType.SVCB
  309: HTTPS = RdataType.HTTPS
  310: SPF = RdataType.SPF
  311: UNSPEC = RdataType.UNSPEC
  312: NID = RdataType.NID
  313: L32 = RdataType.L32
  314: L64 = RdataType.L64
  315: LP = RdataType.LP
  316: EUI48 = RdataType.EUI48
  317: EUI64 = RdataType.EUI64
  318: TKEY = RdataType.TKEY
  319: TSIG = RdataType.TSIG
  320: IXFR = RdataType.IXFR
  321: AXFR = RdataType.AXFR
  322: MAILB = RdataType.MAILB
  323: MAILA = RdataType.MAILA
  324: ANY = RdataType.ANY
  325: URI = RdataType.URI
  326: CAA = RdataType.CAA
  327: AVC = RdataType.AVC
  328: AMTRELAY = RdataType.AMTRELAY
  329: TA = RdataType.TA
  330: DLV = RdataType.DLV
  331: 
  332: ### END generated RdataType constants
