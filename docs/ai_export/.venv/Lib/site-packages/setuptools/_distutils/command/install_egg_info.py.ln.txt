    1: """
    2: distutils.command.install_egg_info
    3: 
    4: Implements the Distutils 'install_egg_info' command, for installing
    5: a package's PKG-INFO metadata.
    6: """
    7: 
    8: import os
    9: import sys
   10: import re
   11: 
   12: from distutils.cmd import Command
   13: from distutils import log, dir_util
   14: 
   15: 
   16: class install_egg_info(Command):
   17:     """Install an .egg-info file for the package"""
   18: 
   19:     description = "Install package's PKG-INFO metadata as an .egg-info file"
   20:     user_options = [
   21:         ('install-dir=', 'd', "directory to install to"),
   22:     ]
   23: 
   24:     def initialize_options(self):
   25:         self.install_dir = None
   26: 
   27:     @property
   28:     def basename(self):
   29:         """
   30:         Allow basename to be overridden by child class.
   31:         Ref pypa/distutils#2.
   32:         """
   33:         return "%s-%s-py%d.%d.egg-info" % (
   34:             to_filename(safe_name(self.distribution.get_name())),
   35:             to_filename(safe_version(self.distribution.get_version())),
   36:             *sys.version_info[:2],
   37:         )
   38: 
   39:     def finalize_options(self):
   40:         self.set_undefined_options('install_lib', ('install_dir', 'install_dir'))
   41:         self.target = os.path.join(self.install_dir, self.basename)
   42:         self.outputs = [self.target]
   43: 
   44:     def run(self):
   45:         target = self.target
   46:         if os.path.isdir(target) and not os.path.islink(target):
   47:             dir_util.remove_tree(target, dry_run=self.dry_run)
   48:         elif os.path.exists(target):
   49:             self.execute(os.unlink, (self.target,), "Removing " + target)
   50:         elif not os.path.isdir(self.install_dir):
   51:             self.execute(
   52:                 os.makedirs, (self.install_dir,), "Creating " + self.install_dir
   53:             )
   54:         log.info("Writing %s", target)
   55:         if not self.dry_run:
   56:             with open(target, 'w', encoding='UTF-8') as f:
   57:                 self.distribution.metadata.write_pkg_file(f)
   58: 
   59:     def get_outputs(self):
   60:         return self.outputs
   61: 
   62: 
   63: # The following routines are taken from setuptools' pkg_resources module and
   64: # can be replaced by importing them from pkg_resources once it is included
   65: # in the stdlib.
   66: 
   67: 
   68: def safe_name(name):
   69:     """Convert an arbitrary string to a standard distribution name
   70: 
   71:     Any runs of non-alphanumeric/. characters are replaced with a single '-'.
   72:     """
   73:     return re.sub('[^A-Za-z0-9.]+', '-', name)
   74: 
   75: 
   76: def safe_version(version):
   77:     """Convert an arbitrary string to a standard version string
   78: 
   79:     Spaces become dots, and all other non-alphanumeric characters become
   80:     dashes, with runs of multiple dashes condensed to a single dash.
   81:     """
   82:     version = version.replace(' ', '.')
   83:     return re.sub('[^A-Za-z0-9.]+', '-', version)
   84: 
   85: 
   86: def to_filename(name):
   87:     """Convert a project or version name to its filename-escaped form
   88: 
   89:     Any '-' characters are currently replaced with '_'.
   90:     """
   91:     return name.replace('-', '_')
