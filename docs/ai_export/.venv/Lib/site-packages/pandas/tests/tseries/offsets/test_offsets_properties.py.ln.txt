    1: """
    2: Behavioral based tests for offsets and date_range.
    3: 
    4: This file is adapted from https://github.com/pandas-dev/pandas/pull/18761 -
    5: which was more ambitious but less idiomatic in its use of Hypothesis.
    6: 
    7: You may wish to consult the previous version for inspiration on further
    8: tests, or when trying to pin down the bugs exposed by the tests below.
    9: """
   10: from hypothesis import (
   11:     assume,
   12:     given,
   13: )
   14: import pytest
   15: import pytz
   16: 
   17: import pandas as pd
   18: from pandas._testing._hypothesis import (
   19:     DATETIME_JAN_1_1900_OPTIONAL_TZ,
   20:     YQM_OFFSET,
   21: )
   22: 
   23: # ----------------------------------------------------------------
   24: # Offset-specific behaviour tests
   25: 
   26: 
   27: @pytest.mark.arm_slow
   28: @given(DATETIME_JAN_1_1900_OPTIONAL_TZ, YQM_OFFSET)
   29: def test_on_offset_implementations(dt, offset):
   30:     assume(not offset.normalize)
   31:     # check that the class-specific implementations of is_on_offset match
   32:     # the general case definition:
   33:     #   (dt + offset) - offset == dt
   34:     try:
   35:         compare = (dt + offset) - offset
   36:     except (pytz.NonExistentTimeError, pytz.AmbiguousTimeError):
   37:         # When dt + offset does not exist or is DST-ambiguous, assume(False) to
   38:         # indicate to hypothesis that this is not a valid test case
   39:         # DST-ambiguous example (GH41906):
   40:         # dt = datetime.datetime(1900, 1, 1, tzinfo=pytz.timezone('Africa/Kinshasa'))
   41:         # offset = MonthBegin(66)
   42:         assume(False)
   43: 
   44:     assert offset.is_on_offset(dt) == (compare == dt)
   45: 
   46: 
   47: @given(YQM_OFFSET)
   48: def test_shift_across_dst(offset):
   49:     # GH#18319 check that 1) timezone is correctly normalized and
   50:     # 2) that hour is not incorrectly changed by this normalization
   51:     assume(not offset.normalize)
   52: 
   53:     # Note that dti includes a transition across DST boundary
   54:     dti = pd.date_range(
   55:         start="2017-10-30 12:00:00", end="2017-11-06", freq="D", tz="US/Eastern"
   56:     )
   57:     assert (dti.hour == 12).all()  # we haven't screwed up yet
   58: 
   59:     res = dti + offset
   60:     assert (res.hour == 12).all()
