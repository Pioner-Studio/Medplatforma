    1: from datetime import datetime
    2: 
    3: from pandas import DatetimeIndex
    4: import pandas._testing as tm
    5: 
    6: from pandas.tseries.holiday import (
    7:     AbstractHolidayCalendar,
    8:     USFederalHolidayCalendar,
    9:     USMartinLutherKingJr,
   10:     USMemorialDay,
   11: )
   12: 
   13: 
   14: def test_no_mlk_before_1986():
   15:     # see gh-10278
   16:     class MLKCalendar(AbstractHolidayCalendar):
   17:         rules = [USMartinLutherKingJr]
   18: 
   19:     holidays = MLKCalendar().holidays(start="1984", end="1988").to_pydatetime().tolist()
   20: 
   21:     # Testing to make sure holiday is not incorrectly observed before 1986.
   22:     assert holidays == [datetime(1986, 1, 20, 0, 0), datetime(1987, 1, 19, 0, 0)]
   23: 
   24: 
   25: def test_memorial_day():
   26:     class MemorialDay(AbstractHolidayCalendar):
   27:         rules = [USMemorialDay]
   28: 
   29:     holidays = MemorialDay().holidays(start="1971", end="1980").to_pydatetime().tolist()
   30: 
   31:     # Fixes 5/31 error and checked manually against Wikipedia.
   32:     assert holidays == [
   33:         datetime(1971, 5, 31, 0, 0),
   34:         datetime(1972, 5, 29, 0, 0),
   35:         datetime(1973, 5, 28, 0, 0),
   36:         datetime(1974, 5, 27, 0, 0),
   37:         datetime(1975, 5, 26, 0, 0),
   38:         datetime(1976, 5, 31, 0, 0),
   39:         datetime(1977, 5, 30, 0, 0),
   40:         datetime(1978, 5, 29, 0, 0),
   41:         datetime(1979, 5, 28, 0, 0),
   42:     ]
   43: 
   44: 
   45: def test_federal_holiday_inconsistent_returntype():
   46:     # GH 49075 test case
   47:     # Instantiate two calendars to rule out _cache
   48:     cal1 = USFederalHolidayCalendar()
   49:     cal2 = USFederalHolidayCalendar()
   50: 
   51:     results_2018 = cal1.holidays(start=datetime(2018, 8, 1), end=datetime(2018, 8, 31))
   52:     results_2019 = cal2.holidays(start=datetime(2019, 8, 1), end=datetime(2019, 8, 31))
   53:     expected_results = DatetimeIndex([], dtype="datetime64[ns]", freq=None)
   54: 
   55:     # Check against expected results to ensure both date
   56:     # ranges generate expected results as per GH49075 submission
   57:     tm.assert_index_equal(results_2018, expected_results)
   58:     tm.assert_index_equal(results_2019, expected_results)
