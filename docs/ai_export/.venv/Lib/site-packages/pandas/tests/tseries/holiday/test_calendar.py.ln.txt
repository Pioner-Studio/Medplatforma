    1: from datetime import datetime
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     DatetimeIndex,
    7:     offsets,
    8:     to_datetime,
    9: )
   10: import pandas._testing as tm
   11: 
   12: from pandas.tseries.holiday import (
   13:     AbstractHolidayCalendar,
   14:     Holiday,
   15:     Timestamp,
   16:     USFederalHolidayCalendar,
   17:     USLaborDay,
   18:     USThanksgivingDay,
   19:     get_calendar,
   20: )
   21: 
   22: 
   23: @pytest.mark.parametrize(
   24:     "transform", [lambda x: x, lambda x: x.strftime("%Y-%m-%d"), lambda x: Timestamp(x)]
   25: )
   26: def test_calendar(transform):
   27:     start_date = datetime(2012, 1, 1)
   28:     end_date = datetime(2012, 12, 31)
   29: 
   30:     calendar = USFederalHolidayCalendar()
   31:     holidays = calendar.holidays(transform(start_date), transform(end_date))
   32: 
   33:     expected = [
   34:         datetime(2012, 1, 2),
   35:         datetime(2012, 1, 16),
   36:         datetime(2012, 2, 20),
   37:         datetime(2012, 5, 28),
   38:         datetime(2012, 7, 4),
   39:         datetime(2012, 9, 3),
   40:         datetime(2012, 10, 8),
   41:         datetime(2012, 11, 12),
   42:         datetime(2012, 11, 22),
   43:         datetime(2012, 12, 25),
   44:     ]
   45: 
   46:     assert list(holidays.to_pydatetime()) == expected
   47: 
   48: 
   49: def test_calendar_caching():
   50:     # see gh-9552.
   51: 
   52:     class TestCalendar(AbstractHolidayCalendar):
   53:         def __init__(self, name=None, rules=None) -> None:
   54:             super().__init__(name=name, rules=rules)
   55: 
   56:     jan1 = TestCalendar(rules=[Holiday("jan1", year=2015, month=1, day=1)])
   57:     jan2 = TestCalendar(rules=[Holiday("jan2", year=2015, month=1, day=2)])
   58: 
   59:     # Getting holidays for Jan 1 should not alter results for Jan 2.
   60:     expected = DatetimeIndex(["01-Jan-2015"]).as_unit("ns")
   61:     tm.assert_index_equal(jan1.holidays(), expected)
   62: 
   63:     expected2 = DatetimeIndex(["02-Jan-2015"]).as_unit("ns")
   64:     tm.assert_index_equal(jan2.holidays(), expected2)
   65: 
   66: 
   67: def test_calendar_observance_dates():
   68:     # see gh-11477
   69:     us_fed_cal = get_calendar("USFederalHolidayCalendar")
   70:     holidays0 = us_fed_cal.holidays(
   71:         datetime(2015, 7, 3), datetime(2015, 7, 3)
   72:     )  # <-- same start and end dates
   73:     holidays1 = us_fed_cal.holidays(
   74:         datetime(2015, 7, 3), datetime(2015, 7, 6)
   75:     )  # <-- different start and end dates
   76:     holidays2 = us_fed_cal.holidays(
   77:         datetime(2015, 7, 3), datetime(2015, 7, 3)
   78:     )  # <-- same start and end dates
   79: 
   80:     # These should all produce the same result.
   81:     #
   82:     # In addition, calling with different start and end
   83:     # dates should not alter the output if we call the
   84:     # function again with the same start and end date.
   85:     tm.assert_index_equal(holidays0, holidays1)
   86:     tm.assert_index_equal(holidays0, holidays2)
   87: 
   88: 
   89: def test_rule_from_name():
   90:     us_fed_cal = get_calendar("USFederalHolidayCalendar")
   91:     assert us_fed_cal.rule_from_name("Thanksgiving Day") == USThanksgivingDay
   92: 
   93: 
   94: def test_calendar_2031():
   95:     # See gh-27790
   96:     #
   97:     # Labor Day 2031 is on September 1. Saturday before is August 30.
   98:     # Next working day after August 30 ought to be Tuesday, September 2.
   99: 
  100:     class testCalendar(AbstractHolidayCalendar):
  101:         rules = [USLaborDay]
  102: 
  103:     cal = testCalendar()
  104:     workDay = offsets.CustomBusinessDay(calendar=cal)
  105:     Sat_before_Labor_Day_2031 = to_datetime("2031-08-30")
  106:     next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay
  107:     assert next_working_day == to_datetime("2031-09-02")
  108: 
  109: 
  110: def test_no_holidays_calendar():
  111:     # Test for issue #31415
  112: 
  113:     class NoHolidaysCalendar(AbstractHolidayCalendar):
  114:         pass
  115: 
  116:     cal = NoHolidaysCalendar()
  117:     holidays = cal.holidays(Timestamp("01-Jan-2020"), Timestamp("01-Jan-2021"))
  118:     empty_index = DatetimeIndex([])  # Type is DatetimeIndex since return_name=False
  119:     tm.assert_index_equal(holidays, empty_index)
