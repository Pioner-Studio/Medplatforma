    1: """
    2: Tests for offsets.CustomBusinessDay / CDay
    3: """
    4: from datetime import (
    5:     datetime,
    6:     timedelta,
    7: )
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: from pandas._libs.tslibs.offsets import CDay
   13: 
   14: from pandas import (
   15:     _testing as tm,
   16:     read_pickle,
   17: )
   18: from pandas.tests.tseries.offsets.common import assert_offset_equal
   19: 
   20: from pandas.tseries.holiday import USFederalHolidayCalendar
   21: 
   22: 
   23: @pytest.fixture
   24: def offset():
   25:     return CDay()
   26: 
   27: 
   28: @pytest.fixture
   29: def offset2():
   30:     return CDay(2)
   31: 
   32: 
   33: class TestCustomBusinessDay:
   34:     def test_repr(self, offset, offset2):
   35:         assert repr(offset) == "<CustomBusinessDay>"
   36:         assert repr(offset2) == "<2 * CustomBusinessDays>"
   37: 
   38:         expected = "<BusinessDay: offset=datetime.timedelta(days=1)>"
   39:         assert repr(offset + timedelta(1)) == expected
   40: 
   41:     def test_holidays(self):
   42:         # Define a TradingDay offset
   43:         holidays = ["2012-05-01", datetime(2013, 5, 1), np.datetime64("2014-05-01")]
   44:         tday = CDay(holidays=holidays)
   45:         for year in range(2012, 2015):
   46:             dt = datetime(year, 4, 30)
   47:             xp = datetime(year, 5, 2)
   48:             rs = dt + tday
   49:             assert rs == xp
   50: 
   51:     def test_weekmask(self):
   52:         weekmask_saudi = "Sat Sun Mon Tue Wed"  # Thu-Fri Weekend
   53:         weekmask_uae = "1111001"  # Fri-Sat Weekend
   54:         weekmask_egypt = [1, 1, 1, 1, 0, 0, 1]  # Fri-Sat Weekend
   55:         bday_saudi = CDay(weekmask=weekmask_saudi)
   56:         bday_uae = CDay(weekmask=weekmask_uae)
   57:         bday_egypt = CDay(weekmask=weekmask_egypt)
   58:         dt = datetime(2013, 5, 1)
   59:         xp_saudi = datetime(2013, 5, 4)
   60:         xp_uae = datetime(2013, 5, 2)
   61:         xp_egypt = datetime(2013, 5, 2)
   62:         assert xp_saudi == dt + bday_saudi
   63:         assert xp_uae == dt + bday_uae
   64:         assert xp_egypt == dt + bday_egypt
   65:         xp2 = datetime(2013, 5, 5)
   66:         assert xp2 == dt + 2 * bday_saudi
   67:         assert xp2 == dt + 2 * bday_uae
   68:         assert xp2 == dt + 2 * bday_egypt
   69: 
   70:     def test_weekmask_and_holidays(self):
   71:         weekmask_egypt = "Sun Mon Tue Wed Thu"  # Fri-Sat Weekend
   72:         holidays = ["2012-05-01", datetime(2013, 5, 1), np.datetime64("2014-05-01")]
   73:         bday_egypt = CDay(holidays=holidays, weekmask=weekmask_egypt)
   74:         dt = datetime(2013, 4, 30)
   75:         xp_egypt = datetime(2013, 5, 5)
   76:         assert xp_egypt == dt + 2 * bday_egypt
   77: 
   78:     @pytest.mark.filterwarnings("ignore:Non:pandas.errors.PerformanceWarning")
   79:     def test_calendar(self):
   80:         calendar = USFederalHolidayCalendar()
   81:         dt = datetime(2014, 1, 17)
   82:         assert_offset_equal(CDay(calendar=calendar), dt, datetime(2014, 1, 21))
   83: 
   84:     def test_roundtrip_pickle(self, offset, offset2):
   85:         def _check_roundtrip(obj):
   86:             unpickled = tm.round_trip_pickle(obj)
   87:             assert unpickled == obj
   88: 
   89:         _check_roundtrip(offset)
   90:         _check_roundtrip(offset2)
   91:         _check_roundtrip(offset * 2)
   92: 
   93:     def test_pickle_compat_0_14_1(self, datapath):
   94:         hdays = [datetime(2013, 1, 1) for ele in range(4)]
   95:         pth = datapath("tseries", "offsets", "data", "cday-0.14.1.pickle")
   96:         cday0_14_1 = read_pickle(pth)
   97:         cday = CDay(holidays=hdays)
   98:         assert cday == cday0_14_1
