    1: """
    2: Tests for the following offsets:
    3: - SemiMonthBegin
    4: - SemiMonthEnd
    5: - MonthBegin
    6: - MonthEnd
    7: """
    8: from __future__ import annotations
    9: 
   10: from datetime import datetime
   11: 
   12: import pytest
   13: 
   14: from pandas._libs.tslibs import Timestamp
   15: from pandas._libs.tslibs.offsets import (
   16:     MonthBegin,
   17:     MonthEnd,
   18:     SemiMonthBegin,
   19:     SemiMonthEnd,
   20: )
   21: 
   22: from pandas import (
   23:     DatetimeIndex,
   24:     Series,
   25:     _testing as tm,
   26: )
   27: from pandas.tests.tseries.offsets.common import (
   28:     assert_is_on_offset,
   29:     assert_offset_equal,
   30: )
   31: 
   32: 
   33: class TestSemiMonthEnd:
   34:     def test_offset_whole_year(self):
   35:         dates = (
   36:             datetime(2007, 12, 31),
   37:             datetime(2008, 1, 15),
   38:             datetime(2008, 1, 31),
   39:             datetime(2008, 2, 15),
   40:             datetime(2008, 2, 29),
   41:             datetime(2008, 3, 15),
   42:             datetime(2008, 3, 31),
   43:             datetime(2008, 4, 15),
   44:             datetime(2008, 4, 30),
   45:             datetime(2008, 5, 15),
   46:             datetime(2008, 5, 31),
   47:             datetime(2008, 6, 15),
   48:             datetime(2008, 6, 30),
   49:             datetime(2008, 7, 15),
   50:             datetime(2008, 7, 31),
   51:             datetime(2008, 8, 15),
   52:             datetime(2008, 8, 31),
   53:             datetime(2008, 9, 15),
   54:             datetime(2008, 9, 30),
   55:             datetime(2008, 10, 15),
   56:             datetime(2008, 10, 31),
   57:             datetime(2008, 11, 15),
   58:             datetime(2008, 11, 30),
   59:             datetime(2008, 12, 15),
   60:             datetime(2008, 12, 31),
   61:         )
   62: 
   63:         for base, exp_date in zip(dates[:-1], dates[1:]):
   64:             assert_offset_equal(SemiMonthEnd(), base, exp_date)
   65: 
   66:         # ensure .apply_index works as expected
   67:         shift = DatetimeIndex(dates[:-1])
   68:         with tm.assert_produces_warning(None):
   69:             # GH#22535 check that we don't get a FutureWarning from adding
   70:             # an integer array to PeriodIndex
   71:             result = SemiMonthEnd() + shift
   72: 
   73:         exp = DatetimeIndex(dates[1:])
   74:         tm.assert_index_equal(result, exp)
   75: 
   76:     offset_cases = []
   77:     offset_cases.append(
   78:         (
   79:             SemiMonthEnd(),
   80:             {
   81:                 datetime(2008, 1, 1): datetime(2008, 1, 15),
   82:                 datetime(2008, 1, 15): datetime(2008, 1, 31),
   83:                 datetime(2008, 1, 31): datetime(2008, 2, 15),
   84:                 datetime(2006, 12, 14): datetime(2006, 12, 15),
   85:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
   86:                 datetime(2006, 12, 31): datetime(2007, 1, 15),
   87:                 datetime(2007, 1, 1): datetime(2007, 1, 15),
   88:                 datetime(2006, 12, 1): datetime(2006, 12, 15),
   89:                 datetime(2006, 12, 15): datetime(2006, 12, 31),
   90:             },
   91:         )
   92:     )
   93: 
   94:     offset_cases.append(
   95:         (
   96:             SemiMonthEnd(day_of_month=20),
   97:             {
   98:                 datetime(2008, 1, 1): datetime(2008, 1, 20),
   99:                 datetime(2008, 1, 15): datetime(2008, 1, 20),
  100:                 datetime(2008, 1, 21): datetime(2008, 1, 31),
  101:                 datetime(2008, 1, 31): datetime(2008, 2, 20),
  102:                 datetime(2006, 12, 14): datetime(2006, 12, 20),
  103:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
  104:                 datetime(2006, 12, 31): datetime(2007, 1, 20),
  105:                 datetime(2007, 1, 1): datetime(2007, 1, 20),
  106:                 datetime(2006, 12, 1): datetime(2006, 12, 20),
  107:                 datetime(2006, 12, 15): datetime(2006, 12, 20),
  108:             },
  109:         )
  110:     )
  111: 
  112:     offset_cases.append(
  113:         (
  114:             SemiMonthEnd(0),
  115:             {
  116:                 datetime(2008, 1, 1): datetime(2008, 1, 15),
  117:                 datetime(2008, 1, 16): datetime(2008, 1, 31),
  118:                 datetime(2008, 1, 15): datetime(2008, 1, 15),
  119:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  120:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
  121:                 datetime(2006, 12, 31): datetime(2006, 12, 31),
  122:                 datetime(2007, 1, 1): datetime(2007, 1, 15),
  123:             },
  124:         )
  125:     )
  126: 
  127:     offset_cases.append(
  128:         (
  129:             SemiMonthEnd(0, day_of_month=16),
  130:             {
  131:                 datetime(2008, 1, 1): datetime(2008, 1, 16),
  132:                 datetime(2008, 1, 16): datetime(2008, 1, 16),
  133:                 datetime(2008, 1, 15): datetime(2008, 1, 16),
  134:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  135:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
  136:                 datetime(2006, 12, 31): datetime(2006, 12, 31),
  137:                 datetime(2007, 1, 1): datetime(2007, 1, 16),
  138:             },
  139:         )
  140:     )
  141: 
  142:     offset_cases.append(
  143:         (
  144:             SemiMonthEnd(2),
  145:             {
  146:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  147:                 datetime(2008, 1, 31): datetime(2008, 2, 29),
  148:                 datetime(2006, 12, 29): datetime(2007, 1, 15),
  149:                 datetime(2006, 12, 31): datetime(2007, 1, 31),
  150:                 datetime(2007, 1, 1): datetime(2007, 1, 31),
  151:                 datetime(2007, 1, 16): datetime(2007, 2, 15),
  152:                 datetime(2006, 11, 1): datetime(2006, 11, 30),
  153:             },
  154:         )
  155:     )
  156: 
  157:     offset_cases.append(
  158:         (
  159:             SemiMonthEnd(-1),
  160:             {
  161:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  162:                 datetime(2008, 6, 30): datetime(2008, 6, 15),
  163:                 datetime(2008, 12, 31): datetime(2008, 12, 15),
  164:                 datetime(2006, 12, 29): datetime(2006, 12, 15),
  165:                 datetime(2006, 12, 30): datetime(2006, 12, 15),
  166:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  167:             },
  168:         )
  169:     )
  170: 
  171:     offset_cases.append(
  172:         (
  173:             SemiMonthEnd(-1, day_of_month=4),
  174:             {
  175:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  176:                 datetime(2007, 1, 4): datetime(2006, 12, 31),
  177:                 datetime(2008, 6, 30): datetime(2008, 6, 4),
  178:                 datetime(2008, 12, 31): datetime(2008, 12, 4),
  179:                 datetime(2006, 12, 5): datetime(2006, 12, 4),
  180:                 datetime(2006, 12, 30): datetime(2006, 12, 4),
  181:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  182:             },
  183:         )
  184:     )
  185: 
  186:     offset_cases.append(
  187:         (
  188:             SemiMonthEnd(-2),
  189:             {
  190:                 datetime(2007, 1, 1): datetime(2006, 12, 15),
  191:                 datetime(2008, 6, 30): datetime(2008, 5, 31),
  192:                 datetime(2008, 3, 15): datetime(2008, 2, 15),
  193:                 datetime(2008, 12, 31): datetime(2008, 11, 30),
  194:                 datetime(2006, 12, 29): datetime(2006, 11, 30),
  195:                 datetime(2006, 12, 14): datetime(2006, 11, 15),
  196:                 datetime(2007, 1, 1): datetime(2006, 12, 15),
  197:             },
  198:         )
  199:     )
  200: 
  201:     @pytest.mark.parametrize("case", offset_cases)
  202:     def test_offset(self, case):
  203:         offset, cases = case
  204:         for base, expected in cases.items():
  205:             assert_offset_equal(offset, base, expected)
  206: 
  207:     @pytest.mark.parametrize("case", offset_cases)
  208:     def test_apply_index(self, case):
  209:         # https://github.com/pandas-dev/pandas/issues/34580
  210:         offset, cases = case
  211:         shift = DatetimeIndex(cases.keys())
  212:         exp = DatetimeIndex(cases.values())
  213: 
  214:         with tm.assert_produces_warning(None):
  215:             # GH#22535 check that we don't get a FutureWarning from adding
  216:             # an integer array to PeriodIndex
  217:             result = offset + shift
  218:         tm.assert_index_equal(result, exp)
  219: 
  220:     on_offset_cases = [
  221:         (datetime(2007, 12, 31), True),
  222:         (datetime(2007, 12, 15), True),
  223:         (datetime(2007, 12, 14), False),
  224:         (datetime(2007, 12, 1), False),
  225:         (datetime(2008, 2, 29), True),
  226:     ]
  227: 
  228:     @pytest.mark.parametrize("case", on_offset_cases)
  229:     def test_is_on_offset(self, case):
  230:         dt, expected = case
  231:         assert_is_on_offset(SemiMonthEnd(), dt, expected)
  232: 
  233:     @pytest.mark.parametrize("klass", [Series, DatetimeIndex])
  234:     def test_vectorized_offset_addition(self, klass):
  235:         shift = klass(
  236:             [
  237:                 Timestamp("2000-01-15 00:15:00", tz="US/Central"),
  238:                 Timestamp("2000-02-15", tz="US/Central"),
  239:             ],
  240:             name="a",
  241:         )
  242: 
  243:         with tm.assert_produces_warning(None):
  244:             # GH#22535 check that we don't get a FutureWarning from adding
  245:             # an integer array to PeriodIndex
  246:             result = shift + SemiMonthEnd()
  247:             result2 = SemiMonthEnd() + shift
  248: 
  249:         exp = klass(
  250:             [
  251:                 Timestamp("2000-01-31 00:15:00", tz="US/Central"),
  252:                 Timestamp("2000-02-29", tz="US/Central"),
  253:             ],
  254:             name="a",
  255:         )
  256:         tm.assert_equal(result, exp)
  257:         tm.assert_equal(result2, exp)
  258: 
  259:         shift = klass(
  260:             [
  261:                 Timestamp("2000-01-01 00:15:00", tz="US/Central"),
  262:                 Timestamp("2000-02-01", tz="US/Central"),
  263:             ],
  264:             name="a",
  265:         )
  266: 
  267:         with tm.assert_produces_warning(None):
  268:             # GH#22535 check that we don't get a FutureWarning from adding
  269:             # an integer array to PeriodIndex
  270:             result = shift + SemiMonthEnd()
  271:             result2 = SemiMonthEnd() + shift
  272: 
  273:         exp = klass(
  274:             [
  275:                 Timestamp("2000-01-15 00:15:00", tz="US/Central"),
  276:                 Timestamp("2000-02-15", tz="US/Central"),
  277:             ],
  278:             name="a",
  279:         )
  280:         tm.assert_equal(result, exp)
  281:         tm.assert_equal(result2, exp)
  282: 
  283: 
  284: class TestSemiMonthBegin:
  285:     def test_offset_whole_year(self):
  286:         dates = (
  287:             datetime(2007, 12, 15),
  288:             datetime(2008, 1, 1),
  289:             datetime(2008, 1, 15),
  290:             datetime(2008, 2, 1),
  291:             datetime(2008, 2, 15),
  292:             datetime(2008, 3, 1),
  293:             datetime(2008, 3, 15),
  294:             datetime(2008, 4, 1),
  295:             datetime(2008, 4, 15),
  296:             datetime(2008, 5, 1),
  297:             datetime(2008, 5, 15),
  298:             datetime(2008, 6, 1),
  299:             datetime(2008, 6, 15),
  300:             datetime(2008, 7, 1),
  301:             datetime(2008, 7, 15),
  302:             datetime(2008, 8, 1),
  303:             datetime(2008, 8, 15),
  304:             datetime(2008, 9, 1),
  305:             datetime(2008, 9, 15),
  306:             datetime(2008, 10, 1),
  307:             datetime(2008, 10, 15),
  308:             datetime(2008, 11, 1),
  309:             datetime(2008, 11, 15),
  310:             datetime(2008, 12, 1),
  311:             datetime(2008, 12, 15),
  312:         )
  313: 
  314:         for base, exp_date in zip(dates[:-1], dates[1:]):
  315:             assert_offset_equal(SemiMonthBegin(), base, exp_date)
  316: 
  317:         # ensure .apply_index works as expected
  318:         shift = DatetimeIndex(dates[:-1])
  319:         with tm.assert_produces_warning(None):
  320:             # GH#22535 check that we don't get a FutureWarning from adding
  321:             # an integer array to PeriodIndex
  322:             result = SemiMonthBegin() + shift
  323: 
  324:         exp = DatetimeIndex(dates[1:])
  325:         tm.assert_index_equal(result, exp)
  326: 
  327:     offset_cases = [
  328:         (
  329:             SemiMonthBegin(),
  330:             {
  331:                 datetime(2008, 1, 1): datetime(2008, 1, 15),
  332:                 datetime(2008, 1, 15): datetime(2008, 2, 1),
  333:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  334:                 datetime(2006, 12, 14): datetime(2006, 12, 15),
  335:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
  336:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
  337:                 datetime(2007, 1, 1): datetime(2007, 1, 15),
  338:                 datetime(2006, 12, 1): datetime(2006, 12, 15),
  339:                 datetime(2006, 12, 15): datetime(2007, 1, 1),
  340:             },
  341:         ),
  342:         (
  343:             SemiMonthBegin(day_of_month=20),
  344:             {
  345:                 datetime(2008, 1, 1): datetime(2008, 1, 20),
  346:                 datetime(2008, 1, 15): datetime(2008, 1, 20),
  347:                 datetime(2008, 1, 21): datetime(2008, 2, 1),
  348:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  349:                 datetime(2006, 12, 14): datetime(2006, 12, 20),
  350:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
  351:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
  352:                 datetime(2007, 1, 1): datetime(2007, 1, 20),
  353:                 datetime(2006, 12, 1): datetime(2006, 12, 20),
  354:                 datetime(2006, 12, 15): datetime(2006, 12, 20),
  355:             },
  356:         ),
  357:         (
  358:             SemiMonthBegin(0),
  359:             {
  360:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  361:                 datetime(2008, 1, 16): datetime(2008, 2, 1),
  362:                 datetime(2008, 1, 15): datetime(2008, 1, 15),
  363:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  364:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
  365:                 datetime(2006, 12, 2): datetime(2006, 12, 15),
  366:                 datetime(2007, 1, 1): datetime(2007, 1, 1),
  367:             },
  368:         ),
  369:         (
  370:             SemiMonthBegin(0, day_of_month=16),
  371:             {
  372:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  373:                 datetime(2008, 1, 16): datetime(2008, 1, 16),
  374:                 datetime(2008, 1, 15): datetime(2008, 1, 16),
  375:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  376:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
  377:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
  378:                 datetime(2007, 1, 5): datetime(2007, 1, 16),
  379:                 datetime(2007, 1, 1): datetime(2007, 1, 1),
  380:             },
  381:         ),
  382:         (
  383:             SemiMonthBegin(2),
  384:             {
  385:                 datetime(2008, 1, 1): datetime(2008, 2, 1),
  386:                 datetime(2008, 1, 31): datetime(2008, 2, 15),
  387:                 datetime(2006, 12, 1): datetime(2007, 1, 1),
  388:                 datetime(2006, 12, 29): datetime(2007, 1, 15),
  389:                 datetime(2006, 12, 15): datetime(2007, 1, 15),
  390:                 datetime(2007, 1, 1): datetime(2007, 2, 1),
  391:                 datetime(2007, 1, 16): datetime(2007, 2, 15),
  392:                 datetime(2006, 11, 1): datetime(2006, 12, 1),
  393:             },
  394:         ),
  395:         (
  396:             SemiMonthBegin(-1),
  397:             {
  398:                 datetime(2007, 1, 1): datetime(2006, 12, 15),
  399:                 datetime(2008, 6, 30): datetime(2008, 6, 15),
  400:                 datetime(2008, 6, 14): datetime(2008, 6, 1),
  401:                 datetime(2008, 12, 31): datetime(2008, 12, 15),
  402:                 datetime(2006, 12, 29): datetime(2006, 12, 15),
  403:                 datetime(2006, 12, 15): datetime(2006, 12, 1),
  404:                 datetime(2007, 1, 1): datetime(2006, 12, 15),
  405:             },
  406:         ),
  407:         (
  408:             SemiMonthBegin(-1, day_of_month=4),
  409:             {
  410:                 datetime(2007, 1, 1): datetime(2006, 12, 4),
  411:                 datetime(2007, 1, 4): datetime(2007, 1, 1),
  412:                 datetime(2008, 6, 30): datetime(2008, 6, 4),
  413:                 datetime(2008, 12, 31): datetime(2008, 12, 4),
  414:                 datetime(2006, 12, 5): datetime(2006, 12, 4),
  415:                 datetime(2006, 12, 30): datetime(2006, 12, 4),
  416:                 datetime(2006, 12, 2): datetime(2006, 12, 1),
  417:                 datetime(2007, 1, 1): datetime(2006, 12, 4),
  418:             },
  419:         ),
  420:         (
  421:             SemiMonthBegin(-2),
  422:             {
  423:                 datetime(2007, 1, 1): datetime(2006, 12, 1),
  424:                 datetime(2008, 6, 30): datetime(2008, 6, 1),
  425:                 datetime(2008, 6, 14): datetime(2008, 5, 15),
  426:                 datetime(2008, 12, 31): datetime(2008, 12, 1),
  427:                 datetime(2006, 12, 29): datetime(2006, 12, 1),
  428:                 datetime(2006, 12, 15): datetime(2006, 11, 15),
  429:                 datetime(2007, 1, 1): datetime(2006, 12, 1),
  430:             },
  431:         ),
  432:     ]
  433: 
  434:     @pytest.mark.parametrize("case", offset_cases)
  435:     def test_offset(self, case):
  436:         offset, cases = case
  437:         for base, expected in cases.items():
  438:             assert_offset_equal(offset, base, expected)
  439: 
  440:     @pytest.mark.parametrize("case", offset_cases)
  441:     def test_apply_index(self, case):
  442:         offset, cases = case
  443:         shift = DatetimeIndex(cases.keys())
  444: 
  445:         with tm.assert_produces_warning(None):
  446:             # GH#22535 check that we don't get a FutureWarning from adding
  447:             # an integer array to PeriodIndex
  448:             result = offset + shift
  449: 
  450:         exp = DatetimeIndex(cases.values())
  451:         tm.assert_index_equal(result, exp)
  452: 
  453:     on_offset_cases = [
  454:         (datetime(2007, 12, 1), True),
  455:         (datetime(2007, 12, 15), True),
  456:         (datetime(2007, 12, 14), False),
  457:         (datetime(2007, 12, 31), False),
  458:         (datetime(2008, 2, 15), True),
  459:     ]
  460: 
  461:     @pytest.mark.parametrize("case", on_offset_cases)
  462:     def test_is_on_offset(self, case):
  463:         dt, expected = case
  464:         assert_is_on_offset(SemiMonthBegin(), dt, expected)
  465: 
  466:     @pytest.mark.parametrize("klass", [Series, DatetimeIndex])
  467:     def test_vectorized_offset_addition(self, klass):
  468:         shift = klass(
  469:             [
  470:                 Timestamp("2000-01-15 00:15:00", tz="US/Central"),
  471:                 Timestamp("2000-02-15", tz="US/Central"),
  472:             ],
  473:             name="a",
  474:         )
  475:         with tm.assert_produces_warning(None):
  476:             # GH#22535 check that we don't get a FutureWarning from adding
  477:             # an integer array to PeriodIndex
  478:             result = shift + SemiMonthBegin()
  479:             result2 = SemiMonthBegin() + shift
  480: 
  481:         exp = klass(
  482:             [
  483:                 Timestamp("2000-02-01 00:15:00", tz="US/Central"),
  484:                 Timestamp("2000-03-01", tz="US/Central"),
  485:             ],
  486:             name="a",
  487:         )
  488:         tm.assert_equal(result, exp)
  489:         tm.assert_equal(result2, exp)
  490: 
  491:         shift = klass(
  492:             [
  493:                 Timestamp("2000-01-01 00:15:00", tz="US/Central"),
  494:                 Timestamp("2000-02-01", tz="US/Central"),
  495:             ],
  496:             name="a",
  497:         )
  498:         with tm.assert_produces_warning(None):
  499:             # GH#22535 check that we don't get a FutureWarning from adding
  500:             # an integer array to PeriodIndex
  501:             result = shift + SemiMonthBegin()
  502:             result2 = SemiMonthBegin() + shift
  503: 
  504:         exp = klass(
  505:             [
  506:                 Timestamp("2000-01-15 00:15:00", tz="US/Central"),
  507:                 Timestamp("2000-02-15", tz="US/Central"),
  508:             ],
  509:             name="a",
  510:         )
  511:         tm.assert_equal(result, exp)
  512:         tm.assert_equal(result2, exp)
  513: 
  514: 
  515: class TestMonthBegin:
  516:     offset_cases = []
  517:     # NOTE: I'm not entirely happy with the logic here for Begin -ss
  518:     # see thread 'offset conventions' on the ML
  519:     offset_cases.append(
  520:         (
  521:             MonthBegin(),
  522:             {
  523:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  524:                 datetime(2008, 2, 1): datetime(2008, 3, 1),
  525:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
  526:                 datetime(2006, 12, 1): datetime(2007, 1, 1),
  527:                 datetime(2007, 1, 31): datetime(2007, 2, 1),
  528:             },
  529:         )
  530:     )
  531: 
  532:     offset_cases.append(
  533:         (
  534:             MonthBegin(0),
  535:             {
  536:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  537:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  538:                 datetime(2006, 12, 3): datetime(2007, 1, 1),
  539:                 datetime(2007, 1, 31): datetime(2007, 2, 1),
  540:             },
  541:         )
  542:     )
  543: 
  544:     offset_cases.append(
  545:         (
  546:             MonthBegin(2),
  547:             {
  548:                 datetime(2008, 2, 29): datetime(2008, 4, 1),
  549:                 datetime(2008, 1, 31): datetime(2008, 3, 1),
  550:                 datetime(2006, 12, 31): datetime(2007, 2, 1),
  551:                 datetime(2007, 12, 28): datetime(2008, 2, 1),
  552:                 datetime(2007, 1, 1): datetime(2007, 3, 1),
  553:                 datetime(2006, 11, 1): datetime(2007, 1, 1),
  554:             },
  555:         )
  556:     )
  557: 
  558:     offset_cases.append(
  559:         (
  560:             MonthBegin(-1),
  561:             {
  562:                 datetime(2007, 1, 1): datetime(2006, 12, 1),
  563:                 datetime(2008, 5, 31): datetime(2008, 5, 1),
  564:                 datetime(2008, 12, 31): datetime(2008, 12, 1),
  565:                 datetime(2006, 12, 29): datetime(2006, 12, 1),
  566:                 datetime(2006, 1, 2): datetime(2006, 1, 1),
  567:             },
  568:         )
  569:     )
  570: 
  571:     @pytest.mark.parametrize("case", offset_cases)
  572:     def test_offset(self, case):
  573:         offset, cases = case
  574:         for base, expected in cases.items():
  575:             assert_offset_equal(offset, base, expected)
  576: 
  577: 
  578: class TestMonthEnd:
  579:     def test_day_of_month(self):
  580:         dt = datetime(2007, 1, 1)
  581:         offset = MonthEnd()
  582: 
  583:         result = dt + offset
  584:         assert result == Timestamp(2007, 1, 31)
  585: 
  586:         result = result + offset
  587:         assert result == Timestamp(2007, 2, 28)
  588: 
  589:     def test_normalize(self):
  590:         dt = datetime(2007, 1, 1, 3)
  591: 
  592:         result = dt + MonthEnd(normalize=True)
  593:         expected = dt.replace(hour=0) + MonthEnd()
  594:         assert result == expected
  595: 
  596:     offset_cases = []
  597:     offset_cases.append(
  598:         (
  599:             MonthEnd(),
  600:             {
  601:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  602:                 datetime(2008, 1, 31): datetime(2008, 2, 29),
  603:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
  604:                 datetime(2006, 12, 31): datetime(2007, 1, 31),
  605:                 datetime(2007, 1, 1): datetime(2007, 1, 31),
  606:                 datetime(2006, 12, 1): datetime(2006, 12, 31),
  607:             },
  608:         )
  609:     )
  610: 
  611:     offset_cases.append(
  612:         (
  613:             MonthEnd(0),
  614:             {
  615:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  616:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  617:                 datetime(2006, 12, 29): datetime(2006, 12, 31),
  618:                 datetime(2006, 12, 31): datetime(2006, 12, 31),
  619:                 datetime(2007, 1, 1): datetime(2007, 1, 31),
  620:             },
  621:         )
  622:     )
  623: 
  624:     offset_cases.append(
  625:         (
  626:             MonthEnd(2),
  627:             {
  628:                 datetime(2008, 1, 1): datetime(2008, 2, 29),
  629:                 datetime(2008, 1, 31): datetime(2008, 3, 31),
  630:                 datetime(2006, 12, 29): datetime(2007, 1, 31),
  631:                 datetime(2006, 12, 31): datetime(2007, 2, 28),
  632:                 datetime(2007, 1, 1): datetime(2007, 2, 28),
  633:                 datetime(2006, 11, 1): datetime(2006, 12, 31),
  634:             },
  635:         )
  636:     )
  637: 
  638:     offset_cases.append(
  639:         (
  640:             MonthEnd(-1),
  641:             {
  642:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  643:                 datetime(2008, 6, 30): datetime(2008, 5, 31),
  644:                 datetime(2008, 12, 31): datetime(2008, 11, 30),
  645:                 datetime(2006, 12, 29): datetime(2006, 11, 30),
  646:                 datetime(2006, 12, 30): datetime(2006, 11, 30),
  647:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  648:             },
  649:         )
  650:     )
  651: 
  652:     @pytest.mark.parametrize("case", offset_cases)
  653:     def test_offset(self, case):
  654:         offset, cases = case
  655:         for base, expected in cases.items():
  656:             assert_offset_equal(offset, base, expected)
  657: 
  658:     on_offset_cases = [
  659:         (MonthEnd(), datetime(2007, 12, 31), True),
  660:         (MonthEnd(), datetime(2008, 1, 1), False),
  661:     ]
  662: 
  663:     @pytest.mark.parametrize("case", on_offset_cases)
  664:     def test_is_on_offset(self, case):
  665:         offset, dt, expected = case
  666:         assert_is_on_offset(offset, dt, expected)
