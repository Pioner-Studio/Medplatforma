    1: """
    2: Tests for the following offsets:
    3: - QuarterBegin
    4: - QuarterEnd
    5: """
    6: from __future__ import annotations
    7: 
    8: from datetime import datetime
    9: 
   10: import pytest
   11: 
   12: import pandas._testing as tm
   13: from pandas.tests.tseries.offsets.common import (
   14:     assert_is_on_offset,
   15:     assert_offset_equal,
   16: )
   17: 
   18: from pandas.tseries.offsets import (
   19:     QuarterBegin,
   20:     QuarterEnd,
   21: )
   22: 
   23: 
   24: @pytest.mark.parametrize("klass", (QuarterBegin, QuarterEnd))
   25: def test_quarterly_dont_normalize(klass):
   26:     date = datetime(2012, 3, 31, 5, 30)
   27:     result = date + klass()
   28:     assert result.time() == date.time()
   29: 
   30: 
   31: @pytest.mark.parametrize("offset", [QuarterBegin(), QuarterEnd()])
   32: @pytest.mark.parametrize(
   33:     "date",
   34:     [
   35:         datetime(2016, m, d)
   36:         for m in [10, 11, 12]
   37:         for d in [1, 2, 3, 28, 29, 30, 31]
   38:         if not (m == 11 and d == 31)
   39:     ],
   40: )
   41: def test_on_offset(offset, date):
   42:     res = offset.is_on_offset(date)
   43:     slow_version = date == (date + offset) - offset
   44:     assert res == slow_version
   45: 
   46: 
   47: class TestQuarterBegin:
   48:     def test_repr(self):
   49:         expected = "<QuarterBegin: startingMonth=3>"
   50:         assert repr(QuarterBegin()) == expected
   51:         expected = "<QuarterBegin: startingMonth=3>"
   52:         assert repr(QuarterBegin(startingMonth=3)) == expected
   53:         expected = "<QuarterBegin: startingMonth=1>"
   54:         assert repr(QuarterBegin(startingMonth=1)) == expected
   55: 
   56:     def test_is_anchored(self):
   57:         msg = "QuarterBegin.is_anchored is deprecated "
   58: 
   59:         with tm.assert_produces_warning(FutureWarning, match=msg):
   60:             assert QuarterBegin(startingMonth=1).is_anchored()
   61:             assert QuarterBegin().is_anchored()
   62:             assert not QuarterBegin(2, startingMonth=1).is_anchored()
   63: 
   64:     def test_offset_corner_case(self):
   65:         # corner
   66:         offset = QuarterBegin(n=-1, startingMonth=1)
   67:         assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 1)
   68: 
   69:     offset_cases = []
   70:     offset_cases.append(
   71:         (
   72:             QuarterBegin(startingMonth=1),
   73:             {
   74:                 datetime(2007, 12, 1): datetime(2008, 1, 1),
   75:                 datetime(2008, 1, 1): datetime(2008, 4, 1),
   76:                 datetime(2008, 2, 15): datetime(2008, 4, 1),
   77:                 datetime(2008, 2, 29): datetime(2008, 4, 1),
   78:                 datetime(2008, 3, 15): datetime(2008, 4, 1),
   79:                 datetime(2008, 3, 31): datetime(2008, 4, 1),
   80:                 datetime(2008, 4, 15): datetime(2008, 7, 1),
   81:                 datetime(2008, 4, 1): datetime(2008, 7, 1),
   82:             },
   83:         )
   84:     )
   85: 
   86:     offset_cases.append(
   87:         (
   88:             QuarterBegin(startingMonth=2),
   89:             {
   90:                 datetime(2008, 1, 1): datetime(2008, 2, 1),
   91:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
   92:                 datetime(2008, 1, 15): datetime(2008, 2, 1),
   93:                 datetime(2008, 2, 29): datetime(2008, 5, 1),
   94:                 datetime(2008, 3, 15): datetime(2008, 5, 1),
   95:                 datetime(2008, 3, 31): datetime(2008, 5, 1),
   96:                 datetime(2008, 4, 15): datetime(2008, 5, 1),
   97:                 datetime(2008, 4, 30): datetime(2008, 5, 1),
   98:             },
   99:         )
  100:     )
  101: 
  102:     offset_cases.append(
  103:         (
  104:             QuarterBegin(startingMonth=1, n=0),
  105:             {
  106:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  107:                 datetime(2008, 12, 1): datetime(2009, 1, 1),
  108:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  109:                 datetime(2008, 2, 15): datetime(2008, 4, 1),
  110:                 datetime(2008, 2, 29): datetime(2008, 4, 1),
  111:                 datetime(2008, 3, 15): datetime(2008, 4, 1),
  112:                 datetime(2008, 3, 31): datetime(2008, 4, 1),
  113:                 datetime(2008, 4, 15): datetime(2008, 7, 1),
  114:                 datetime(2008, 4, 30): datetime(2008, 7, 1),
  115:             },
  116:         )
  117:     )
  118: 
  119:     offset_cases.append(
  120:         (
  121:             QuarterBegin(startingMonth=1, n=-1),
  122:             {
  123:                 datetime(2008, 1, 1): datetime(2007, 10, 1),
  124:                 datetime(2008, 1, 31): datetime(2008, 1, 1),
  125:                 datetime(2008, 2, 15): datetime(2008, 1, 1),
  126:                 datetime(2008, 2, 29): datetime(2008, 1, 1),
  127:                 datetime(2008, 3, 15): datetime(2008, 1, 1),
  128:                 datetime(2008, 3, 31): datetime(2008, 1, 1),
  129:                 datetime(2008, 4, 15): datetime(2008, 4, 1),
  130:                 datetime(2008, 4, 30): datetime(2008, 4, 1),
  131:                 datetime(2008, 7, 1): datetime(2008, 4, 1),
  132:             },
  133:         )
  134:     )
  135: 
  136:     offset_cases.append(
  137:         (
  138:             QuarterBegin(startingMonth=1, n=2),
  139:             {
  140:                 datetime(2008, 1, 1): datetime(2008, 7, 1),
  141:                 datetime(2008, 2, 15): datetime(2008, 7, 1),
  142:                 datetime(2008, 2, 29): datetime(2008, 7, 1),
  143:                 datetime(2008, 3, 15): datetime(2008, 7, 1),
  144:                 datetime(2008, 3, 31): datetime(2008, 7, 1),
  145:                 datetime(2008, 4, 15): datetime(2008, 10, 1),
  146:                 datetime(2008, 4, 1): datetime(2008, 10, 1),
  147:             },
  148:         )
  149:     )
  150: 
  151:     @pytest.mark.parametrize("case", offset_cases)
  152:     def test_offset(self, case):
  153:         offset, cases = case
  154:         for base, expected in cases.items():
  155:             assert_offset_equal(offset, base, expected)
  156: 
  157: 
  158: class TestQuarterEnd:
  159:     def test_repr(self):
  160:         expected = "<QuarterEnd: startingMonth=3>"
  161:         assert repr(QuarterEnd()) == expected
  162:         expected = "<QuarterEnd: startingMonth=3>"
  163:         assert repr(QuarterEnd(startingMonth=3)) == expected
  164:         expected = "<QuarterEnd: startingMonth=1>"
  165:         assert repr(QuarterEnd(startingMonth=1)) == expected
  166: 
  167:     def test_is_anchored(self):
  168:         msg = "QuarterEnd.is_anchored is deprecated "
  169: 
  170:         with tm.assert_produces_warning(FutureWarning, match=msg):
  171:             assert QuarterEnd(startingMonth=1).is_anchored()
  172:             assert QuarterEnd().is_anchored()
  173:             assert not QuarterEnd(2, startingMonth=1).is_anchored()
  174: 
  175:     def test_offset_corner_case(self):
  176:         # corner
  177:         offset = QuarterEnd(n=-1, startingMonth=1)
  178:         assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 31)
  179: 
  180:     offset_cases = []
  181:     offset_cases.append(
  182:         (
  183:             QuarterEnd(startingMonth=1),
  184:             {
  185:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  186:                 datetime(2008, 1, 31): datetime(2008, 4, 30),
  187:                 datetime(2008, 2, 15): datetime(2008, 4, 30),
  188:                 datetime(2008, 2, 29): datetime(2008, 4, 30),
  189:                 datetime(2008, 3, 15): datetime(2008, 4, 30),
  190:                 datetime(2008, 3, 31): datetime(2008, 4, 30),
  191:                 datetime(2008, 4, 15): datetime(2008, 4, 30),
  192:                 datetime(2008, 4, 30): datetime(2008, 7, 31),
  193:             },
  194:         )
  195:     )
  196: 
  197:     offset_cases.append(
  198:         (
  199:             QuarterEnd(startingMonth=2),
  200:             {
  201:                 datetime(2008, 1, 1): datetime(2008, 2, 29),
  202:                 datetime(2008, 1, 31): datetime(2008, 2, 29),
  203:                 datetime(2008, 2, 15): datetime(2008, 2, 29),
  204:                 datetime(2008, 2, 29): datetime(2008, 5, 31),
  205:                 datetime(2008, 3, 15): datetime(2008, 5, 31),
  206:                 datetime(2008, 3, 31): datetime(2008, 5, 31),
  207:                 datetime(2008, 4, 15): datetime(2008, 5, 31),
  208:                 datetime(2008, 4, 30): datetime(2008, 5, 31),
  209:             },
  210:         )
  211:     )
  212: 
  213:     offset_cases.append(
  214:         (
  215:             QuarterEnd(startingMonth=1, n=0),
  216:             {
  217:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  218:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  219:                 datetime(2008, 2, 15): datetime(2008, 4, 30),
  220:                 datetime(2008, 2, 29): datetime(2008, 4, 30),
  221:                 datetime(2008, 3, 15): datetime(2008, 4, 30),
  222:                 datetime(2008, 3, 31): datetime(2008, 4, 30),
  223:                 datetime(2008, 4, 15): datetime(2008, 4, 30),
  224:                 datetime(2008, 4, 30): datetime(2008, 4, 30),
  225:             },
  226:         )
  227:     )
  228: 
  229:     offset_cases.append(
  230:         (
  231:             QuarterEnd(startingMonth=1, n=-1),
  232:             {
  233:                 datetime(2008, 1, 1): datetime(2007, 10, 31),
  234:                 datetime(2008, 1, 31): datetime(2007, 10, 31),
  235:                 datetime(2008, 2, 15): datetime(2008, 1, 31),
  236:                 datetime(2008, 2, 29): datetime(2008, 1, 31),
  237:                 datetime(2008, 3, 15): datetime(2008, 1, 31),
  238:                 datetime(2008, 3, 31): datetime(2008, 1, 31),
  239:                 datetime(2008, 4, 15): datetime(2008, 1, 31),
  240:                 datetime(2008, 4, 30): datetime(2008, 1, 31),
  241:                 datetime(2008, 7, 1): datetime(2008, 4, 30),
  242:             },
  243:         )
  244:     )
  245: 
  246:     offset_cases.append(
  247:         (
  248:             QuarterEnd(startingMonth=1, n=2),
  249:             {
  250:                 datetime(2008, 1, 31): datetime(2008, 7, 31),
  251:                 datetime(2008, 2, 15): datetime(2008, 7, 31),
  252:                 datetime(2008, 2, 29): datetime(2008, 7, 31),
  253:                 datetime(2008, 3, 15): datetime(2008, 7, 31),
  254:                 datetime(2008, 3, 31): datetime(2008, 7, 31),
  255:                 datetime(2008, 4, 15): datetime(2008, 7, 31),
  256:                 datetime(2008, 4, 30): datetime(2008, 10, 31),
  257:             },
  258:         )
  259:     )
  260: 
  261:     @pytest.mark.parametrize("case", offset_cases)
  262:     def test_offset(self, case):
  263:         offset, cases = case
  264:         for base, expected in cases.items():
  265:             assert_offset_equal(offset, base, expected)
  266: 
  267:     on_offset_cases = [
  268:         (QuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
  269:         (QuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
  270:         (QuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
  271:         (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
  272:         (QuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
  273:         (QuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
  274:         (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
  275:         (QuarterEnd(1, startingMonth=1), datetime(2008, 5, 31), False),
  276:         (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
  277:         (QuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
  278:         (QuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
  279:         (QuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
  280:         (QuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
  281:         (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
  282:         (QuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
  283:         (QuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
  284:         (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), False),
  285:         (QuarterEnd(1, startingMonth=2), datetime(2008, 5, 31), True),
  286:         (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
  287:         (QuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
  288:         (QuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
  289:         (QuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
  290:         (QuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
  291:         (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), False),
  292:         (QuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), True),
  293:         (QuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
  294:         (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
  295:         (QuarterEnd(1, startingMonth=3), datetime(2008, 5, 31), False),
  296:         (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), False),
  297:         (QuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), True),
  298:     ]
  299: 
  300:     @pytest.mark.parametrize("case", on_offset_cases)
  301:     def test_is_on_offset(self, case):
  302:         offset, dt, expected = case
  303:         assert_is_on_offset(offset, dt, expected)
