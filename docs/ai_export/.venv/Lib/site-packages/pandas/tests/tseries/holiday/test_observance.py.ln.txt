    1: from datetime import datetime
    2: 
    3: import pytest
    4: 
    5: from pandas.tseries.holiday import (
    6:     after_nearest_workday,
    7:     before_nearest_workday,
    8:     nearest_workday,
    9:     next_monday,
   10:     next_monday_or_tuesday,
   11:     next_workday,
   12:     previous_friday,
   13:     previous_workday,
   14:     sunday_to_monday,
   15:     weekend_to_monday,
   16: )
   17: 
   18: _WEDNESDAY = datetime(2014, 4, 9)
   19: _THURSDAY = datetime(2014, 4, 10)
   20: _FRIDAY = datetime(2014, 4, 11)
   21: _SATURDAY = datetime(2014, 4, 12)
   22: _SUNDAY = datetime(2014, 4, 13)
   23: _MONDAY = datetime(2014, 4, 14)
   24: _TUESDAY = datetime(2014, 4, 15)
   25: _NEXT_WEDNESDAY = datetime(2014, 4, 16)
   26: 
   27: 
   28: @pytest.mark.parametrize("day", [_SATURDAY, _SUNDAY])
   29: def test_next_monday(day):
   30:     assert next_monday(day) == _MONDAY
   31: 
   32: 
   33: @pytest.mark.parametrize(
   34:     "day,expected", [(_SATURDAY, _MONDAY), (_SUNDAY, _TUESDAY), (_MONDAY, _TUESDAY)]
   35: )
   36: def test_next_monday_or_tuesday(day, expected):
   37:     assert next_monday_or_tuesday(day) == expected
   38: 
   39: 
   40: @pytest.mark.parametrize("day", [_SATURDAY, _SUNDAY])
   41: def test_previous_friday(day):
   42:     assert previous_friday(day) == _FRIDAY
   43: 
   44: 
   45: def test_sunday_to_monday():
   46:     assert sunday_to_monday(_SUNDAY) == _MONDAY
   47: 
   48: 
   49: @pytest.mark.parametrize(
   50:     "day,expected", [(_SATURDAY, _FRIDAY), (_SUNDAY, _MONDAY), (_MONDAY, _MONDAY)]
   51: )
   52: def test_nearest_workday(day, expected):
   53:     assert nearest_workday(day) == expected
   54: 
   55: 
   56: @pytest.mark.parametrize(
   57:     "day,expected", [(_SATURDAY, _MONDAY), (_SUNDAY, _MONDAY), (_MONDAY, _MONDAY)]
   58: )
   59: def test_weekend_to_monday(day, expected):
   60:     assert weekend_to_monday(day) == expected
   61: 
   62: 
   63: @pytest.mark.parametrize(
   64:     "day,expected",
   65:     [
   66:         (_WEDNESDAY, _THURSDAY),
   67:         (_THURSDAY, _FRIDAY),
   68:         (_SATURDAY, _MONDAY),
   69:         (_SUNDAY, _MONDAY),
   70:         (_MONDAY, _TUESDAY),
   71:         (_TUESDAY, _NEXT_WEDNESDAY),  # WED is same week as TUE
   72:     ],
   73: )
   74: def test_next_workday(day, expected):
   75:     assert next_workday(day) == expected
   76: 
   77: 
   78: @pytest.mark.parametrize(
   79:     "day,expected", [(_SATURDAY, _FRIDAY), (_SUNDAY, _FRIDAY), (_TUESDAY, _MONDAY)]
   80: )
   81: def test_previous_workday(day, expected):
   82:     assert previous_workday(day) == expected
   83: 
   84: 
   85: @pytest.mark.parametrize(
   86:     "day,expected",
   87:     [
   88:         (_THURSDAY, _WEDNESDAY),
   89:         (_FRIDAY, _THURSDAY),
   90:         (_SATURDAY, _THURSDAY),
   91:         (_SUNDAY, _FRIDAY),
   92:         (_MONDAY, _FRIDAY),  # last week Friday
   93:         (_TUESDAY, _MONDAY),
   94:         (_NEXT_WEDNESDAY, _TUESDAY),  # WED is same week as TUE
   95:     ],
   96: )
   97: def test_before_nearest_workday(day, expected):
   98:     assert before_nearest_workday(day) == expected
   99: 
  100: 
  101: @pytest.mark.parametrize(
  102:     "day,expected", [(_SATURDAY, _MONDAY), (_SUNDAY, _TUESDAY), (_FRIDAY, _MONDAY)]
  103: )
  104: def test_after_nearest_workday(day, expected):
  105:     assert after_nearest_workday(day) == expected
