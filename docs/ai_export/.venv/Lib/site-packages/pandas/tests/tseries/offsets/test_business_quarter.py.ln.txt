    1: """
    2: Tests for the following offsets:
    3: - BQuarterBegin
    4: - BQuarterEnd
    5: """
    6: from __future__ import annotations
    7: 
    8: from datetime import datetime
    9: 
   10: import pytest
   11: 
   12: import pandas._testing as tm
   13: from pandas.tests.tseries.offsets.common import (
   14:     assert_is_on_offset,
   15:     assert_offset_equal,
   16: )
   17: 
   18: from pandas.tseries.offsets import (
   19:     BQuarterBegin,
   20:     BQuarterEnd,
   21: )
   22: 
   23: 
   24: def test_quarterly_dont_normalize():
   25:     date = datetime(2012, 3, 31, 5, 30)
   26: 
   27:     offsets = (BQuarterEnd, BQuarterBegin)
   28: 
   29:     for klass in offsets:
   30:         result = date + klass()
   31:         assert result.time() == date.time()
   32: 
   33: 
   34: @pytest.mark.parametrize("offset", [BQuarterBegin(), BQuarterEnd()])
   35: def test_on_offset(offset):
   36:     dates = [
   37:         datetime(2016, m, d)
   38:         for m in [10, 11, 12]
   39:         for d in [1, 2, 3, 28, 29, 30, 31]
   40:         if not (m == 11 and d == 31)
   41:     ]
   42:     for date in dates:
   43:         res = offset.is_on_offset(date)
   44:         slow_version = date == (date + offset) - offset
   45:         assert res == slow_version
   46: 
   47: 
   48: class TestBQuarterBegin:
   49:     def test_repr(self):
   50:         expected = "<BusinessQuarterBegin: startingMonth=3>"
   51:         assert repr(BQuarterBegin()) == expected
   52:         expected = "<BusinessQuarterBegin: startingMonth=3>"
   53:         assert repr(BQuarterBegin(startingMonth=3)) == expected
   54:         expected = "<BusinessQuarterBegin: startingMonth=1>"
   55:         assert repr(BQuarterBegin(startingMonth=1)) == expected
   56: 
   57:     def test_is_anchored(self):
   58:         msg = "BQuarterBegin.is_anchored is deprecated "
   59: 
   60:         with tm.assert_produces_warning(FutureWarning, match=msg):
   61:             assert BQuarterBegin(startingMonth=1).is_anchored()
   62:             assert BQuarterBegin().is_anchored()
   63:             assert not BQuarterBegin(2, startingMonth=1).is_anchored()
   64: 
   65:     def test_offset_corner_case(self):
   66:         # corner
   67:         offset = BQuarterBegin(n=-1, startingMonth=1)
   68:         assert datetime(2007, 4, 3) + offset == datetime(2007, 4, 2)
   69: 
   70:     offset_cases = []
   71:     offset_cases.append(
   72:         (
   73:             BQuarterBegin(startingMonth=1),
   74:             {
   75:                 datetime(2008, 1, 1): datetime(2008, 4, 1),
   76:                 datetime(2008, 1, 31): datetime(2008, 4, 1),
   77:                 datetime(2008, 2, 15): datetime(2008, 4, 1),
   78:                 datetime(2008, 2, 29): datetime(2008, 4, 1),
   79:                 datetime(2008, 3, 15): datetime(2008, 4, 1),
   80:                 datetime(2008, 3, 31): datetime(2008, 4, 1),
   81:                 datetime(2008, 4, 15): datetime(2008, 7, 1),
   82:                 datetime(2007, 3, 15): datetime(2007, 4, 2),
   83:                 datetime(2007, 2, 28): datetime(2007, 4, 2),
   84:                 datetime(2007, 1, 1): datetime(2007, 4, 2),
   85:                 datetime(2007, 4, 15): datetime(2007, 7, 2),
   86:                 datetime(2007, 7, 1): datetime(2007, 7, 2),
   87:                 datetime(2007, 4, 1): datetime(2007, 4, 2),
   88:                 datetime(2007, 4, 2): datetime(2007, 7, 2),
   89:                 datetime(2008, 4, 30): datetime(2008, 7, 1),
   90:             },
   91:         )
   92:     )
   93: 
   94:     offset_cases.append(
   95:         (
   96:             BQuarterBegin(startingMonth=2),
   97:             {
   98:                 datetime(2008, 1, 1): datetime(2008, 2, 1),
   99:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
  100:                 datetime(2008, 1, 15): datetime(2008, 2, 1),
  101:                 datetime(2008, 2, 29): datetime(2008, 5, 1),
  102:                 datetime(2008, 3, 15): datetime(2008, 5, 1),
  103:                 datetime(2008, 3, 31): datetime(2008, 5, 1),
  104:                 datetime(2008, 4, 15): datetime(2008, 5, 1),
  105:                 datetime(2008, 8, 15): datetime(2008, 11, 3),
  106:                 datetime(2008, 9, 15): datetime(2008, 11, 3),
  107:                 datetime(2008, 11, 1): datetime(2008, 11, 3),
  108:                 datetime(2008, 4, 30): datetime(2008, 5, 1),
  109:             },
  110:         )
  111:     )
  112: 
  113:     offset_cases.append(
  114:         (
  115:             BQuarterBegin(startingMonth=1, n=0),
  116:             {
  117:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  118:                 datetime(2007, 12, 31): datetime(2008, 1, 1),
  119:                 datetime(2008, 2, 15): datetime(2008, 4, 1),
  120:                 datetime(2008, 2, 29): datetime(2008, 4, 1),
  121:                 datetime(2008, 1, 15): datetime(2008, 4, 1),
  122:                 datetime(2008, 2, 27): datetime(2008, 4, 1),
  123:                 datetime(2008, 3, 15): datetime(2008, 4, 1),
  124:                 datetime(2007, 4, 1): datetime(2007, 4, 2),
  125:                 datetime(2007, 4, 2): datetime(2007, 4, 2),
  126:                 datetime(2007, 7, 1): datetime(2007, 7, 2),
  127:                 datetime(2007, 4, 15): datetime(2007, 7, 2),
  128:                 datetime(2007, 7, 2): datetime(2007, 7, 2),
  129:             },
  130:         )
  131:     )
  132: 
  133:     offset_cases.append(
  134:         (
  135:             BQuarterBegin(startingMonth=1, n=-1),
  136:             {
  137:                 datetime(2008, 1, 1): datetime(2007, 10, 1),
  138:                 datetime(2008, 1, 31): datetime(2008, 1, 1),
  139:                 datetime(2008, 2, 15): datetime(2008, 1, 1),
  140:                 datetime(2008, 2, 29): datetime(2008, 1, 1),
  141:                 datetime(2008, 3, 15): datetime(2008, 1, 1),
  142:                 datetime(2008, 3, 31): datetime(2008, 1, 1),
  143:                 datetime(2008, 4, 15): datetime(2008, 4, 1),
  144:                 datetime(2007, 7, 3): datetime(2007, 7, 2),
  145:                 datetime(2007, 4, 3): datetime(2007, 4, 2),
  146:                 datetime(2007, 7, 2): datetime(2007, 4, 2),
  147:                 datetime(2008, 4, 1): datetime(2008, 1, 1),
  148:             },
  149:         )
  150:     )
  151: 
  152:     offset_cases.append(
  153:         (
  154:             BQuarterBegin(startingMonth=1, n=2),
  155:             {
  156:                 datetime(2008, 1, 1): datetime(2008, 7, 1),
  157:                 datetime(2008, 1, 15): datetime(2008, 7, 1),
  158:                 datetime(2008, 2, 29): datetime(2008, 7, 1),
  159:                 datetime(2008, 3, 15): datetime(2008, 7, 1),
  160:                 datetime(2007, 3, 31): datetime(2007, 7, 2),
  161:                 datetime(2007, 4, 15): datetime(2007, 10, 1),
  162:                 datetime(2008, 4, 30): datetime(2008, 10, 1),
  163:             },
  164:         )
  165:     )
  166: 
  167:     @pytest.mark.parametrize("case", offset_cases)
  168:     def test_offset(self, case):
  169:         offset, cases = case
  170:         for base, expected in cases.items():
  171:             assert_offset_equal(offset, base, expected)
  172: 
  173: 
  174: class TestBQuarterEnd:
  175:     def test_repr(self):
  176:         expected = "<BusinessQuarterEnd: startingMonth=3>"
  177:         assert repr(BQuarterEnd()) == expected
  178:         expected = "<BusinessQuarterEnd: startingMonth=3>"
  179:         assert repr(BQuarterEnd(startingMonth=3)) == expected
  180:         expected = "<BusinessQuarterEnd: startingMonth=1>"
  181:         assert repr(BQuarterEnd(startingMonth=1)) == expected
  182: 
  183:     def test_is_anchored(self):
  184:         msg = "BQuarterEnd.is_anchored is deprecated "
  185: 
  186:         with tm.assert_produces_warning(FutureWarning, match=msg):
  187:             assert BQuarterEnd(startingMonth=1).is_anchored()
  188:             assert BQuarterEnd().is_anchored()
  189:             assert not BQuarterEnd(2, startingMonth=1).is_anchored()
  190: 
  191:     def test_offset_corner_case(self):
  192:         # corner
  193:         offset = BQuarterEnd(n=-1, startingMonth=1)
  194:         assert datetime(2010, 1, 31) + offset == datetime(2010, 1, 29)
  195: 
  196:     offset_cases = []
  197:     offset_cases.append(
  198:         (
  199:             BQuarterEnd(startingMonth=1),
  200:             {
  201:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  202:                 datetime(2008, 1, 31): datetime(2008, 4, 30),
  203:                 datetime(2008, 2, 15): datetime(2008, 4, 30),
  204:                 datetime(2008, 2, 29): datetime(2008, 4, 30),
  205:                 datetime(2008, 3, 15): datetime(2008, 4, 30),
  206:                 datetime(2008, 3, 31): datetime(2008, 4, 30),
  207:                 datetime(2008, 4, 15): datetime(2008, 4, 30),
  208:                 datetime(2008, 4, 30): datetime(2008, 7, 31),
  209:             },
  210:         )
  211:     )
  212: 
  213:     offset_cases.append(
  214:         (
  215:             BQuarterEnd(startingMonth=2),
  216:             {
  217:                 datetime(2008, 1, 1): datetime(2008, 2, 29),
  218:                 datetime(2008, 1, 31): datetime(2008, 2, 29),
  219:                 datetime(2008, 2, 15): datetime(2008, 2, 29),
  220:                 datetime(2008, 2, 29): datetime(2008, 5, 30),
  221:                 datetime(2008, 3, 15): datetime(2008, 5, 30),
  222:                 datetime(2008, 3, 31): datetime(2008, 5, 30),
  223:                 datetime(2008, 4, 15): datetime(2008, 5, 30),
  224:                 datetime(2008, 4, 30): datetime(2008, 5, 30),
  225:             },
  226:         )
  227:     )
  228: 
  229:     offset_cases.append(
  230:         (
  231:             BQuarterEnd(startingMonth=1, n=0),
  232:             {
  233:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  234:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  235:                 datetime(2008, 2, 15): datetime(2008, 4, 30),
  236:                 datetime(2008, 2, 29): datetime(2008, 4, 30),
  237:                 datetime(2008, 3, 15): datetime(2008, 4, 30),
  238:                 datetime(2008, 3, 31): datetime(2008, 4, 30),
  239:                 datetime(2008, 4, 15): datetime(2008, 4, 30),
  240:                 datetime(2008, 4, 30): datetime(2008, 4, 30),
  241:             },
  242:         )
  243:     )
  244: 
  245:     offset_cases.append(
  246:         (
  247:             BQuarterEnd(startingMonth=1, n=-1),
  248:             {
  249:                 datetime(2008, 1, 1): datetime(2007, 10, 31),
  250:                 datetime(2008, 1, 31): datetime(2007, 10, 31),
  251:                 datetime(2008, 2, 15): datetime(2008, 1, 31),
  252:                 datetime(2008, 2, 29): datetime(2008, 1, 31),
  253:                 datetime(2008, 3, 15): datetime(2008, 1, 31),
  254:                 datetime(2008, 3, 31): datetime(2008, 1, 31),
  255:                 datetime(2008, 4, 15): datetime(2008, 1, 31),
  256:                 datetime(2008, 4, 30): datetime(2008, 1, 31),
  257:             },
  258:         )
  259:     )
  260: 
  261:     offset_cases.append(
  262:         (
  263:             BQuarterEnd(startingMonth=1, n=2),
  264:             {
  265:                 datetime(2008, 1, 31): datetime(2008, 7, 31),
  266:                 datetime(2008, 2, 15): datetime(2008, 7, 31),
  267:                 datetime(2008, 2, 29): datetime(2008, 7, 31),
  268:                 datetime(2008, 3, 15): datetime(2008, 7, 31),
  269:                 datetime(2008, 3, 31): datetime(2008, 7, 31),
  270:                 datetime(2008, 4, 15): datetime(2008, 7, 31),
  271:                 datetime(2008, 4, 30): datetime(2008, 10, 31),
  272:             },
  273:         )
  274:     )
  275: 
  276:     @pytest.mark.parametrize("case", offset_cases)
  277:     def test_offset(self, case):
  278:         offset, cases = case
  279:         for base, expected in cases.items():
  280:             assert_offset_equal(offset, base, expected)
  281: 
  282:     on_offset_cases = [
  283:         (BQuarterEnd(1, startingMonth=1), datetime(2008, 1, 31), True),
  284:         (BQuarterEnd(1, startingMonth=1), datetime(2007, 12, 31), False),
  285:         (BQuarterEnd(1, startingMonth=1), datetime(2008, 2, 29), False),
  286:         (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 30), False),
  287:         (BQuarterEnd(1, startingMonth=1), datetime(2007, 3, 31), False),
  288:         (BQuarterEnd(1, startingMonth=1), datetime(2008, 4, 30), True),
  289:         (BQuarterEnd(1, startingMonth=1), datetime(2008, 5, 30), False),
  290:         (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 29), False),
  291:         (BQuarterEnd(1, startingMonth=1), datetime(2007, 6, 30), False),
  292:         (BQuarterEnd(1, startingMonth=2), datetime(2008, 1, 31), False),
  293:         (BQuarterEnd(1, startingMonth=2), datetime(2007, 12, 31), False),
  294:         (BQuarterEnd(1, startingMonth=2), datetime(2008, 2, 29), True),
  295:         (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 30), False),
  296:         (BQuarterEnd(1, startingMonth=2), datetime(2007, 3, 31), False),
  297:         (BQuarterEnd(1, startingMonth=2), datetime(2008, 4, 30), False),
  298:         (BQuarterEnd(1, startingMonth=2), datetime(2008, 5, 30), True),
  299:         (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 29), False),
  300:         (BQuarterEnd(1, startingMonth=2), datetime(2007, 6, 30), False),
  301:         (BQuarterEnd(1, startingMonth=3), datetime(2008, 1, 31), False),
  302:         (BQuarterEnd(1, startingMonth=3), datetime(2007, 12, 31), True),
  303:         (BQuarterEnd(1, startingMonth=3), datetime(2008, 2, 29), False),
  304:         (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 30), True),
  305:         (BQuarterEnd(1, startingMonth=3), datetime(2007, 3, 31), False),
  306:         (BQuarterEnd(1, startingMonth=3), datetime(2008, 4, 30), False),
  307:         (BQuarterEnd(1, startingMonth=3), datetime(2008, 5, 30), False),
  308:         (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 29), True),
  309:         (BQuarterEnd(1, startingMonth=3), datetime(2007, 6, 30), False),
  310:     ]
  311: 
  312:     @pytest.mark.parametrize("case", on_offset_cases)
  313:     def test_is_on_offset(self, case):
  314:         offset, dt, expected = case
  315:         assert_is_on_offset(offset, dt, expected)
