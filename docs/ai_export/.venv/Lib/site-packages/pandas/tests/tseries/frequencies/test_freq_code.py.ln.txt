    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import (
    5:     Period,
    6:     to_offset,
    7: )
    8: 
    9: 
   10: @pytest.mark.parametrize(
   11:     "freqstr,exp_freqstr",
   12:     [("D", "D"), ("W", "D"), ("ME", "D"), ("s", "s"), ("min", "s"), ("h", "s")],
   13: )
   14: def test_get_to_timestamp_base(freqstr, exp_freqstr):
   15:     off = to_offset(freqstr)
   16:     per = Period._from_ordinal(1, off)
   17:     exp_code = to_offset(exp_freqstr)._period_dtype_code
   18: 
   19:     result_code = per._dtype._get_to_timestamp_base()
   20:     assert result_code == exp_code
   21: 
   22: 
   23: @pytest.mark.parametrize(
   24:     "args,expected",
   25:     [
   26:         ((1.5, "min"), (90, "s")),
   27:         ((62.4, "min"), (3744, "s")),
   28:         ((1.04, "h"), (3744, "s")),
   29:         ((1, "D"), (1, "D")),
   30:         ((0.342931, "h"), (1234551600, "us")),
   31:         ((1.2345, "D"), (106660800, "ms")),
   32:     ],
   33: )
   34: def test_resolution_bumping(args, expected):
   35:     # see gh-14378
   36:     off = to_offset(str(args[0]) + args[1])
   37:     assert off.n == expected[0]
   38:     assert off._prefix == expected[1]
   39: 
   40: 
   41: @pytest.mark.parametrize(
   42:     "args",
   43:     [
   44:         (0.5, "ns"),
   45:         # Too much precision in the input can prevent.
   46:         (0.3429324798798269273987982, "h"),
   47:     ],
   48: )
   49: def test_cat(args):
   50:     msg = "Invalid frequency"
   51: 
   52:     with pytest.raises(ValueError, match=msg):
   53:         to_offset(str(args[0]) + args[1])
   54: 
   55: 
   56: @pytest.mark.parametrize(
   57:     "freqstr,expected",
   58:     [
   59:         ("1h", "2021-01-01T09:00:00"),
   60:         ("1D", "2021-01-02T08:00:00"),
   61:         ("1W", "2021-01-03T08:00:00"),
   62:         ("1ME", "2021-01-31T08:00:00"),
   63:         ("1YE", "2021-12-31T08:00:00"),
   64:     ],
   65: )
   66: def test_compatibility(freqstr, expected):
   67:     ts_np = np.datetime64("2021-01-01T08:00:00.00")
   68:     do = to_offset(freqstr)
   69:     assert ts_np + do == np.datetime64(expected)
