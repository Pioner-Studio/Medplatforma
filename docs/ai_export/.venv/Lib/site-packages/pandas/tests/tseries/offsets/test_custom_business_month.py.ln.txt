    1: """
    2: Tests for the following offsets:
    3: - CustomBusinessMonthBase
    4: - CustomBusinessMonthBegin
    5: - CustomBusinessMonthEnd
    6: """
    7: from __future__ import annotations
    8: 
    9: from datetime import (
   10:     date,
   11:     datetime,
   12:     timedelta,
   13: )
   14: 
   15: import numpy as np
   16: import pytest
   17: 
   18: from pandas._libs.tslibs.offsets import (
   19:     CBMonthBegin,
   20:     CBMonthEnd,
   21:     CDay,
   22: )
   23: 
   24: import pandas._testing as tm
   25: from pandas.tests.tseries.offsets.common import (
   26:     assert_is_on_offset,
   27:     assert_offset_equal,
   28: )
   29: 
   30: from pandas.tseries import offsets
   31: 
   32: 
   33: @pytest.fixture
   34: def dt():
   35:     return datetime(2008, 1, 1)
   36: 
   37: 
   38: class TestCommonCBM:
   39:     @pytest.mark.parametrize("offset2", [CBMonthBegin(2), CBMonthEnd(2)])
   40:     def test_eq(self, offset2):
   41:         assert offset2 == offset2
   42: 
   43:     @pytest.mark.parametrize("offset2", [CBMonthBegin(2), CBMonthEnd(2)])
   44:     def test_hash(self, offset2):
   45:         assert hash(offset2) == hash(offset2)
   46: 
   47:     @pytest.mark.parametrize("_offset", [CBMonthBegin, CBMonthEnd])
   48:     def test_roundtrip_pickle(self, _offset):
   49:         def _check_roundtrip(obj):
   50:             unpickled = tm.round_trip_pickle(obj)
   51:             assert unpickled == obj
   52: 
   53:         _check_roundtrip(_offset())
   54:         _check_roundtrip(_offset(2))
   55:         _check_roundtrip(_offset() * 2)
   56: 
   57:     @pytest.mark.parametrize("_offset", [CBMonthBegin, CBMonthEnd])
   58:     def test_copy(self, _offset):
   59:         # GH 17452
   60:         off = _offset(weekmask="Mon Wed Fri")
   61:         assert off == off.copy()
   62: 
   63: 
   64: class TestCustomBusinessMonthBegin:
   65:     @pytest.fixture
   66:     def _offset(self):
   67:         return CBMonthBegin
   68: 
   69:     @pytest.fixture
   70:     def offset(self):
   71:         return CBMonthBegin()
   72: 
   73:     @pytest.fixture
   74:     def offset2(self):
   75:         return CBMonthBegin(2)
   76: 
   77:     def test_different_normalize_equals(self, _offset):
   78:         # GH#21404 changed __eq__ to return False when `normalize` does not match
   79:         offset = _offset()
   80:         offset2 = _offset(normalize=True)
   81:         assert offset != offset2
   82: 
   83:     def test_repr(self, offset, offset2):
   84:         assert repr(offset) == "<CustomBusinessMonthBegin>"
   85:         assert repr(offset2) == "<2 * CustomBusinessMonthBegins>"
   86: 
   87:     def test_add_datetime(self, dt, offset2):
   88:         assert offset2 + dt == datetime(2008, 3, 3)
   89: 
   90:     def testRollback1(self):
   91:         assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)
   92: 
   93:     def testRollback2(self, dt):
   94:         assert CBMonthBegin(10).rollback(dt) == datetime(2008, 1, 1)
   95: 
   96:     def testRollforward1(self, dt):
   97:         assert CBMonthBegin(10).rollforward(dt) == datetime(2008, 1, 1)
   98: 
   99:     def test_roll_date_object(self):
  100:         offset = CBMonthBegin()
  101: 
  102:         dt = date(2012, 9, 15)
  103: 
  104:         result = offset.rollback(dt)
  105:         assert result == datetime(2012, 9, 3)
  106: 
  107:         result = offset.rollforward(dt)
  108:         assert result == datetime(2012, 10, 1)
  109: 
  110:         offset = offsets.Day()
  111:         result = offset.rollback(dt)
  112:         assert result == datetime(2012, 9, 15)
  113: 
  114:         result = offset.rollforward(dt)
  115:         assert result == datetime(2012, 9, 15)
  116: 
  117:     on_offset_cases = [
  118:         (CBMonthBegin(), datetime(2008, 1, 1), True),
  119:         (CBMonthBegin(), datetime(2008, 1, 31), False),
  120:     ]
  121: 
  122:     @pytest.mark.parametrize("case", on_offset_cases)
  123:     def test_is_on_offset(self, case):
  124:         offset, dt, expected = case
  125:         assert_is_on_offset(offset, dt, expected)
  126: 
  127:     apply_cases = [
  128:         (
  129:             CBMonthBegin(),
  130:             {
  131:                 datetime(2008, 1, 1): datetime(2008, 2, 1),
  132:                 datetime(2008, 2, 7): datetime(2008, 3, 3),
  133:             },
  134:         ),
  135:         (
  136:             2 * CBMonthBegin(),
  137:             {
  138:                 datetime(2008, 1, 1): datetime(2008, 3, 3),
  139:                 datetime(2008, 2, 7): datetime(2008, 4, 1),
  140:             },
  141:         ),
  142:         (
  143:             -CBMonthBegin(),
  144:             {
  145:                 datetime(2008, 1, 1): datetime(2007, 12, 3),
  146:                 datetime(2008, 2, 8): datetime(2008, 2, 1),
  147:             },
  148:         ),
  149:         (
  150:             -2 * CBMonthBegin(),
  151:             {
  152:                 datetime(2008, 1, 1): datetime(2007, 11, 1),
  153:                 datetime(2008, 2, 9): datetime(2008, 1, 1),
  154:             },
  155:         ),
  156:         (
  157:             CBMonthBegin(0),
  158:             {
  159:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
  160:                 datetime(2008, 1, 7): datetime(2008, 2, 1),
  161:             },
  162:         ),
  163:     ]
  164: 
  165:     @pytest.mark.parametrize("case", apply_cases)
  166:     def test_apply(self, case):
  167:         offset, cases = case
  168:         for base, expected in cases.items():
  169:             assert_offset_equal(offset, base, expected)
  170: 
  171:     def test_apply_large_n(self):
  172:         dt = datetime(2012, 10, 23)
  173: 
  174:         result = dt + CBMonthBegin(10)
  175:         assert result == datetime(2013, 8, 1)
  176: 
  177:         result = dt + CDay(100) - CDay(100)
  178:         assert result == dt
  179: 
  180:         off = CBMonthBegin() * 6
  181:         rs = datetime(2012, 1, 1) - off
  182:         xp = datetime(2011, 7, 1)
  183:         assert rs == xp
  184: 
  185:         st = datetime(2011, 12, 18)
  186:         rs = st + off
  187: 
  188:         xp = datetime(2012, 6, 1)
  189:         assert rs == xp
  190: 
  191:     def test_holidays(self):
  192:         # Define a TradingDay offset
  193:         holidays = ["2012-02-01", datetime(2012, 2, 2), np.datetime64("2012-03-01")]
  194:         bm_offset = CBMonthBegin(holidays=holidays)
  195:         dt = datetime(2012, 1, 1)
  196: 
  197:         assert dt + bm_offset == datetime(2012, 1, 2)
  198:         assert dt + 2 * bm_offset == datetime(2012, 2, 3)
  199: 
  200:     @pytest.mark.parametrize(
  201:         "case",
  202:         [
  203:             (
  204:                 CBMonthBegin(n=1, offset=timedelta(days=5)),
  205:                 {
  206:                     datetime(2021, 3, 1): datetime(2021, 4, 1) + timedelta(days=5),
  207:                     datetime(2021, 4, 17): datetime(2021, 5, 3) + timedelta(days=5),
  208:                 },
  209:             ),
  210:             (
  211:                 CBMonthBegin(n=2, offset=timedelta(days=40)),
  212:                 {
  213:                     datetime(2021, 3, 10): datetime(2021, 5, 3) + timedelta(days=40),
  214:                     datetime(2021, 4, 30): datetime(2021, 6, 1) + timedelta(days=40),
  215:                 },
  216:             ),
  217:             (
  218:                 CBMonthBegin(n=1, offset=timedelta(days=-5)),
  219:                 {
  220:                     datetime(2021, 3, 1): datetime(2021, 4, 1) - timedelta(days=5),
  221:                     datetime(2021, 4, 11): datetime(2021, 5, 3) - timedelta(days=5),
  222:                 },
  223:             ),
  224:             (
  225:                 -2 * CBMonthBegin(n=1, offset=timedelta(days=10)),
  226:                 {
  227:                     datetime(2021, 3, 1): datetime(2021, 1, 1) + timedelta(days=10),
  228:                     datetime(2021, 4, 3): datetime(2021, 3, 1) + timedelta(days=10),
  229:                 },
  230:             ),
  231:             (
  232:                 CBMonthBegin(n=0, offset=timedelta(days=1)),
  233:                 {
  234:                     datetime(2021, 3, 2): datetime(2021, 4, 1) + timedelta(days=1),
  235:                     datetime(2021, 4, 1): datetime(2021, 4, 1) + timedelta(days=1),
  236:                 },
  237:             ),
  238:             (
  239:                 CBMonthBegin(
  240:                     n=1, holidays=["2021-04-01", "2021-04-02"], offset=timedelta(days=1)
  241:                 ),
  242:                 {
  243:                     datetime(2021, 3, 2): datetime(2021, 4, 5) + timedelta(days=1),
  244:                 },
  245:             ),
  246:         ],
  247:     )
  248:     def test_apply_with_extra_offset(self, case):
  249:         offset, cases = case
  250:         for base, expected in cases.items():
  251:             assert_offset_equal(offset, base, expected)
  252: 
  253: 
  254: class TestCustomBusinessMonthEnd:
  255:     @pytest.fixture
  256:     def _offset(self):
  257:         return CBMonthEnd
  258: 
  259:     @pytest.fixture
  260:     def offset(self):
  261:         return CBMonthEnd()
  262: 
  263:     @pytest.fixture
  264:     def offset2(self):
  265:         return CBMonthEnd(2)
  266: 
  267:     def test_different_normalize_equals(self, _offset):
  268:         # GH#21404 changed __eq__ to return False when `normalize` does not match
  269:         offset = _offset()
  270:         offset2 = _offset(normalize=True)
  271:         assert offset != offset2
  272: 
  273:     def test_repr(self, offset, offset2):
  274:         assert repr(offset) == "<CustomBusinessMonthEnd>"
  275:         assert repr(offset2) == "<2 * CustomBusinessMonthEnds>"
  276: 
  277:     def test_add_datetime(self, dt, offset2):
  278:         assert offset2 + dt == datetime(2008, 2, 29)
  279: 
  280:     def testRollback1(self):
  281:         assert CDay(10).rollback(datetime(2007, 12, 31)) == datetime(2007, 12, 31)
  282: 
  283:     def testRollback2(self, dt):
  284:         assert CBMonthEnd(10).rollback(dt) == datetime(2007, 12, 31)
  285: 
  286:     def testRollforward1(self, dt):
  287:         assert CBMonthEnd(10).rollforward(dt) == datetime(2008, 1, 31)
  288: 
  289:     def test_roll_date_object(self):
  290:         offset = CBMonthEnd()
  291: 
  292:         dt = date(2012, 9, 15)
  293: 
  294:         result = offset.rollback(dt)
  295:         assert result == datetime(2012, 8, 31)
  296: 
  297:         result = offset.rollforward(dt)
  298:         assert result == datetime(2012, 9, 28)
  299: 
  300:         offset = offsets.Day()
  301:         result = offset.rollback(dt)
  302:         assert result == datetime(2012, 9, 15)
  303: 
  304:         result = offset.rollforward(dt)
  305:         assert result == datetime(2012, 9, 15)
  306: 
  307:     on_offset_cases = [
  308:         (CBMonthEnd(), datetime(2008, 1, 31), True),
  309:         (CBMonthEnd(), datetime(2008, 1, 1), False),
  310:     ]
  311: 
  312:     @pytest.mark.parametrize("case", on_offset_cases)
  313:     def test_is_on_offset(self, case):
  314:         offset, dt, expected = case
  315:         assert_is_on_offset(offset, dt, expected)
  316: 
  317:     apply_cases = [
  318:         (
  319:             CBMonthEnd(),
  320:             {
  321:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  322:                 datetime(2008, 2, 7): datetime(2008, 2, 29),
  323:             },
  324:         ),
  325:         (
  326:             2 * CBMonthEnd(),
  327:             {
  328:                 datetime(2008, 1, 1): datetime(2008, 2, 29),
  329:                 datetime(2008, 2, 7): datetime(2008, 3, 31),
  330:             },
  331:         ),
  332:         (
  333:             -CBMonthEnd(),
  334:             {
  335:                 datetime(2008, 1, 1): datetime(2007, 12, 31),
  336:                 datetime(2008, 2, 8): datetime(2008, 1, 31),
  337:             },
  338:         ),
  339:         (
  340:             -2 * CBMonthEnd(),
  341:             {
  342:                 datetime(2008, 1, 1): datetime(2007, 11, 30),
  343:                 datetime(2008, 2, 9): datetime(2007, 12, 31),
  344:             },
  345:         ),
  346:         (
  347:             CBMonthEnd(0),
  348:             {
  349:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  350:                 datetime(2008, 2, 7): datetime(2008, 2, 29),
  351:             },
  352:         ),
  353:     ]
  354: 
  355:     @pytest.mark.parametrize("case", apply_cases)
  356:     def test_apply(self, case):
  357:         offset, cases = case
  358:         for base, expected in cases.items():
  359:             assert_offset_equal(offset, base, expected)
  360: 
  361:     def test_apply_large_n(self):
  362:         dt = datetime(2012, 10, 23)
  363: 
  364:         result = dt + CBMonthEnd(10)
  365:         assert result == datetime(2013, 7, 31)
  366: 
  367:         result = dt + CDay(100) - CDay(100)
  368:         assert result == dt
  369: 
  370:         off = CBMonthEnd() * 6
  371:         rs = datetime(2012, 1, 1) - off
  372:         xp = datetime(2011, 7, 29)
  373:         assert rs == xp
  374: 
  375:         st = datetime(2011, 12, 18)
  376:         rs = st + off
  377:         xp = datetime(2012, 5, 31)
  378:         assert rs == xp
  379: 
  380:     def test_holidays(self):
  381:         # Define a TradingDay offset
  382:         holidays = ["2012-01-31", datetime(2012, 2, 28), np.datetime64("2012-02-29")]
  383:         bm_offset = CBMonthEnd(holidays=holidays)
  384:         dt = datetime(2012, 1, 1)
  385:         assert dt + bm_offset == datetime(2012, 1, 30)
  386:         assert dt + 2 * bm_offset == datetime(2012, 2, 27)
  387: 
  388:     @pytest.mark.parametrize(
  389:         "case",
  390:         [
  391:             (
  392:                 CBMonthEnd(n=1, offset=timedelta(days=5)),
  393:                 {
  394:                     datetime(2021, 3, 1): datetime(2021, 3, 31) + timedelta(days=5),
  395:                     datetime(2021, 4, 17): datetime(2021, 4, 30) + timedelta(days=5),
  396:                 },
  397:             ),
  398:             (
  399:                 CBMonthEnd(n=2, offset=timedelta(days=40)),
  400:                 {
  401:                     datetime(2021, 3, 10): datetime(2021, 4, 30) + timedelta(days=40),
  402:                     datetime(2021, 4, 30): datetime(2021, 6, 30) + timedelta(days=40),
  403:                 },
  404:             ),
  405:             (
  406:                 CBMonthEnd(n=1, offset=timedelta(days=-5)),
  407:                 {
  408:                     datetime(2021, 3, 1): datetime(2021, 3, 31) - timedelta(days=5),
  409:                     datetime(2021, 4, 11): datetime(2021, 4, 30) - timedelta(days=5),
  410:                 },
  411:             ),
  412:             (
  413:                 -2 * CBMonthEnd(n=1, offset=timedelta(days=10)),
  414:                 {
  415:                     datetime(2021, 3, 1): datetime(2021, 1, 29) + timedelta(days=10),
  416:                     datetime(2021, 4, 3): datetime(2021, 2, 26) + timedelta(days=10),
  417:                 },
  418:             ),
  419:             (
  420:                 CBMonthEnd(n=0, offset=timedelta(days=1)),
  421:                 {
  422:                     datetime(2021, 3, 2): datetime(2021, 3, 31) + timedelta(days=1),
  423:                     datetime(2021, 4, 1): datetime(2021, 4, 30) + timedelta(days=1),
  424:                 },
  425:             ),
  426:             (
  427:                 CBMonthEnd(n=1, holidays=["2021-03-31"], offset=timedelta(days=1)),
  428:                 {
  429:                     datetime(2021, 3, 2): datetime(2021, 3, 30) + timedelta(days=1),
  430:                 },
  431:             ),
  432:         ],
  433:     )
  434:     def test_apply_with_extra_offset(self, case):
  435:         offset, cases = case
  436:         for base, expected in cases.items():
  437:             assert_offset_equal(offset, base, expected)
