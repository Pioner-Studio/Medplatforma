    1: """
    2: Tests for offsets.CustomBusinessHour
    3: """
    4: from __future__ import annotations
    5: 
    6: from datetime import (
    7:     datetime,
    8:     time as dt_time,
    9: )
   10: 
   11: import numpy as np
   12: import pytest
   13: 
   14: from pandas._libs.tslibs import Timestamp
   15: from pandas._libs.tslibs.offsets import (
   16:     BusinessHour,
   17:     CustomBusinessHour,
   18:     Nano,
   19: )
   20: 
   21: from pandas.tests.tseries.offsets.common import assert_offset_equal
   22: 
   23: from pandas.tseries.holiday import USFederalHolidayCalendar
   24: 
   25: holidays = ["2014-06-27", datetime(2014, 6, 30), np.datetime64("2014-07-02")]
   26: 
   27: 
   28: @pytest.fixture
   29: def dt():
   30:     return datetime(2014, 7, 1, 10, 00)
   31: 
   32: 
   33: @pytest.fixture
   34: def _offset():
   35:     return CustomBusinessHour
   36: 
   37: 
   38: # 2014 Calendar to check custom holidays
   39: #   Sun Mon Tue Wed Thu Fri Sat
   40: #  6/22  23  24  25  26  27  28
   41: #    29  30 7/1   2   3   4   5
   42: #     6   7   8   9  10  11  12
   43: @pytest.fixture
   44: def offset1():
   45:     return CustomBusinessHour(weekmask="Tue Wed Thu Fri")
   46: 
   47: 
   48: @pytest.fixture
   49: def offset2():
   50:     return CustomBusinessHour(holidays=holidays)
   51: 
   52: 
   53: class TestCustomBusinessHour:
   54:     def test_constructor_errors(self):
   55:         msg = "time data must be specified only with hour and minute"
   56:         with pytest.raises(ValueError, match=msg):
   57:             CustomBusinessHour(start=dt_time(11, 0, 5))
   58:         msg = "time data must match '%H:%M' format"
   59:         with pytest.raises(ValueError, match=msg):
   60:             CustomBusinessHour(start="AAA")
   61:         msg = "time data must match '%H:%M' format"
   62:         with pytest.raises(ValueError, match=msg):
   63:             CustomBusinessHour(start="14:00:05")
   64: 
   65:     def test_different_normalize_equals(self, _offset):
   66:         # GH#21404 changed __eq__ to return False when `normalize` does not match
   67:         offset = _offset()
   68:         offset2 = _offset(normalize=True)
   69:         assert offset != offset2
   70: 
   71:     def test_repr(self, offset1, offset2):
   72:         assert repr(offset1) == "<CustomBusinessHour: cbh=09:00-17:00>"
   73:         assert repr(offset2) == "<CustomBusinessHour: cbh=09:00-17:00>"
   74: 
   75:     def test_with_offset(self, dt):
   76:         expected = Timestamp("2014-07-01 13:00")
   77: 
   78:         assert dt + CustomBusinessHour() * 3 == expected
   79:         assert dt + CustomBusinessHour(n=3) == expected
   80: 
   81:     def test_eq(self, offset1, offset2):
   82:         for offset in [offset1, offset2]:
   83:             assert offset == offset
   84: 
   85:         assert CustomBusinessHour() != CustomBusinessHour(-1)
   86:         assert CustomBusinessHour(start="09:00") == CustomBusinessHour()
   87:         assert CustomBusinessHour(start="09:00") != CustomBusinessHour(start="09:01")
   88:         assert CustomBusinessHour(start="09:00", end="17:00") != CustomBusinessHour(
   89:             start="17:00", end="09:01"
   90:         )
   91: 
   92:         assert CustomBusinessHour(weekmask="Tue Wed Thu Fri") != CustomBusinessHour(
   93:             weekmask="Mon Tue Wed Thu Fri"
   94:         )
   95:         assert CustomBusinessHour(holidays=["2014-06-27"]) != CustomBusinessHour(
   96:             holidays=["2014-06-28"]
   97:         )
   98: 
   99:     def test_hash(self, offset1, offset2):
  100:         assert hash(offset1) == hash(offset1)
  101:         assert hash(offset2) == hash(offset2)
  102: 
  103:     def test_add_dateime(self, dt, offset1, offset2):
  104:         assert offset1 + dt == datetime(2014, 7, 1, 11)
  105:         assert offset2 + dt == datetime(2014, 7, 1, 11)
  106: 
  107:     def testRollback1(self, dt, offset1, offset2):
  108:         assert offset1.rollback(dt) == dt
  109:         assert offset2.rollback(dt) == dt
  110: 
  111:         d = datetime(2014, 7, 1, 0)
  112: 
  113:         # 2014/07/01 is Tuesday, 06/30 is Monday(holiday)
  114:         assert offset1.rollback(d) == datetime(2014, 6, 27, 17)
  115: 
  116:         # 2014/6/30 and 2014/6/27 are holidays
  117:         assert offset2.rollback(d) == datetime(2014, 6, 26, 17)
  118: 
  119:     def testRollback2(self, _offset):
  120:         assert _offset(-3).rollback(datetime(2014, 7, 5, 15, 0)) == datetime(
  121:             2014, 7, 4, 17, 0
  122:         )
  123: 
  124:     def testRollforward1(self, dt, offset1, offset2):
  125:         assert offset1.rollforward(dt) == dt
  126:         assert offset2.rollforward(dt) == dt
  127: 
  128:         d = datetime(2014, 7, 1, 0)
  129:         assert offset1.rollforward(d) == datetime(2014, 7, 1, 9)
  130:         assert offset2.rollforward(d) == datetime(2014, 7, 1, 9)
  131: 
  132:     def testRollforward2(self, _offset):
  133:         assert _offset(-3).rollforward(datetime(2014, 7, 5, 16, 0)) == datetime(
  134:             2014, 7, 7, 9
  135:         )
  136: 
  137:     def test_roll_date_object(self):
  138:         offset = BusinessHour()
  139: 
  140:         dt = datetime(2014, 7, 6, 15, 0)
  141: 
  142:         result = offset.rollback(dt)
  143:         assert result == datetime(2014, 7, 4, 17)
  144: 
  145:         result = offset.rollforward(dt)
  146:         assert result == datetime(2014, 7, 7, 9)
  147: 
  148:     normalize_cases = [
  149:         (
  150:             CustomBusinessHour(normalize=True, holidays=holidays),
  151:             {
  152:                 datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
  153:                 datetime(2014, 7, 1, 17): datetime(2014, 7, 3),
  154:                 datetime(2014, 7, 1, 16): datetime(2014, 7, 3),
  155:                 datetime(2014, 7, 1, 23): datetime(2014, 7, 3),
  156:                 datetime(2014, 7, 1, 0): datetime(2014, 7, 1),
  157:                 datetime(2014, 7, 4, 15): datetime(2014, 7, 4),
  158:                 datetime(2014, 7, 4, 15, 59): datetime(2014, 7, 4),
  159:                 datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7),
  160:                 datetime(2014, 7, 5, 23): datetime(2014, 7, 7),
  161:                 datetime(2014, 7, 6, 10): datetime(2014, 7, 7),
  162:             },
  163:         ),
  164:         (
  165:             CustomBusinessHour(-1, normalize=True, holidays=holidays),
  166:             {
  167:                 datetime(2014, 7, 1, 8): datetime(2014, 6, 26),
  168:                 datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
  169:                 datetime(2014, 7, 1, 16): datetime(2014, 7, 1),
  170:                 datetime(2014, 7, 1, 10): datetime(2014, 6, 26),
  171:                 datetime(2014, 7, 1, 0): datetime(2014, 6, 26),
  172:                 datetime(2014, 7, 7, 10): datetime(2014, 7, 4),
  173:                 datetime(2014, 7, 7, 10, 1): datetime(2014, 7, 7),
  174:                 datetime(2014, 7, 5, 23): datetime(2014, 7, 4),
  175:                 datetime(2014, 7, 6, 10): datetime(2014, 7, 4),
  176:             },
  177:         ),
  178:         (
  179:             CustomBusinessHour(
  180:                 1, normalize=True, start="17:00", end="04:00", holidays=holidays
  181:             ),
  182:             {
  183:                 datetime(2014, 7, 1, 8): datetime(2014, 7, 1),
  184:                 datetime(2014, 7, 1, 17): datetime(2014, 7, 1),
  185:                 datetime(2014, 7, 1, 23): datetime(2014, 7, 2),
  186:                 datetime(2014, 7, 2, 2): datetime(2014, 7, 2),
  187:                 datetime(2014, 7, 2, 3): datetime(2014, 7, 3),
  188:                 datetime(2014, 7, 4, 23): datetime(2014, 7, 5),
  189:                 datetime(2014, 7, 5, 2): datetime(2014, 7, 5),
  190:                 datetime(2014, 7, 7, 2): datetime(2014, 7, 7),
  191:                 datetime(2014, 7, 7, 17): datetime(2014, 7, 7),
  192:             },
  193:         ),
  194:     ]
  195: 
  196:     @pytest.mark.parametrize("norm_cases", normalize_cases)
  197:     def test_normalize(self, norm_cases):
  198:         offset, cases = norm_cases
  199:         for dt, expected in cases.items():
  200:             assert offset._apply(dt) == expected
  201: 
  202:     @pytest.mark.parametrize(
  203:         "dt, expected",
  204:         [
  205:             [datetime(2014, 7, 1, 9), False],
  206:             [datetime(2014, 7, 1, 10), True],
  207:             [datetime(2014, 7, 1, 15), True],
  208:             [datetime(2014, 7, 1, 15, 1), False],
  209:             [datetime(2014, 7, 5, 12), False],
  210:             [datetime(2014, 7, 6, 12), False],
  211:         ],
  212:     )
  213:     def test_is_on_offset(self, dt, expected):
  214:         offset = CustomBusinessHour(start="10:00", end="15:00", holidays=holidays)
  215:         assert offset.is_on_offset(dt) == expected
  216: 
  217:     apply_cases = [
  218:         (
  219:             CustomBusinessHour(holidays=holidays),
  220:             {
  221:                 datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 12),
  222:                 datetime(2014, 7, 1, 13): datetime(2014, 7, 1, 14),
  223:                 datetime(2014, 7, 1, 15): datetime(2014, 7, 1, 16),
  224:                 datetime(2014, 7, 1, 19): datetime(2014, 7, 3, 10),
  225:                 datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 9),
  226:                 datetime(2014, 7, 1, 16, 30, 15): datetime(2014, 7, 3, 9, 30, 15),
  227:                 datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 10),
  228:                 datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 10),
  229:                 # out of business hours
  230:                 datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 10),
  231:                 datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 10),
  232:                 datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 10),
  233:                 datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 10),
  234:                 # saturday
  235:                 datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 10),
  236:                 datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 10),
  237:                 datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 9, 30),
  238:                 datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 9, 30, 30),
  239:             },
  240:         ),
  241:         (
  242:             CustomBusinessHour(4, holidays=holidays),
  243:             {
  244:                 datetime(2014, 7, 1, 11): datetime(2014, 7, 1, 15),
  245:                 datetime(2014, 7, 1, 13): datetime(2014, 7, 3, 9),
  246:                 datetime(2014, 7, 1, 15): datetime(2014, 7, 3, 11),
  247:                 datetime(2014, 7, 1, 16): datetime(2014, 7, 3, 12),
  248:                 datetime(2014, 7, 1, 17): datetime(2014, 7, 3, 13),
  249:                 datetime(2014, 7, 2, 11): datetime(2014, 7, 3, 13),
  250:                 datetime(2014, 7, 2, 8): datetime(2014, 7, 3, 13),
  251:                 datetime(2014, 7, 2, 19): datetime(2014, 7, 3, 13),
  252:                 datetime(2014, 7, 2, 23): datetime(2014, 7, 3, 13),
  253:                 datetime(2014, 7, 3, 0): datetime(2014, 7, 3, 13),
  254:                 datetime(2014, 7, 5, 15): datetime(2014, 7, 7, 13),
  255:                 datetime(2014, 7, 4, 17): datetime(2014, 7, 7, 13),
  256:                 datetime(2014, 7, 4, 16, 30): datetime(2014, 7, 7, 12, 30),
  257:                 datetime(2014, 7, 4, 16, 30, 30): datetime(2014, 7, 7, 12, 30, 30),
  258:             },
  259:         ),
  260:     ]
  261: 
  262:     @pytest.mark.parametrize("apply_case", apply_cases)
  263:     def test_apply(self, apply_case):
  264:         offset, cases = apply_case
  265:         for base, expected in cases.items():
  266:             assert_offset_equal(offset, base, expected)
  267: 
  268:     nano_cases = [
  269:         (
  270:             CustomBusinessHour(holidays=holidays),
  271:             {
  272:                 Timestamp("2014-07-01 15:00")
  273:                 + Nano(5): Timestamp("2014-07-01 16:00")
  274:                 + Nano(5),
  275:                 Timestamp("2014-07-01 16:00")
  276:                 + Nano(5): Timestamp("2014-07-03 09:00")
  277:                 + Nano(5),
  278:                 Timestamp("2014-07-01 16:00")
  279:                 - Nano(5): Timestamp("2014-07-01 17:00")
  280:                 - Nano(5),
  281:             },
  282:         ),
  283:         (
  284:             CustomBusinessHour(-1, holidays=holidays),
  285:             {
  286:                 Timestamp("2014-07-01 15:00")
  287:                 + Nano(5): Timestamp("2014-07-01 14:00")
  288:                 + Nano(5),
  289:                 Timestamp("2014-07-01 10:00")
  290:                 + Nano(5): Timestamp("2014-07-01 09:00")
  291:                 + Nano(5),
  292:                 Timestamp("2014-07-01 10:00")
  293:                 - Nano(5): Timestamp("2014-06-26 17:00")
  294:                 - Nano(5),
  295:             },
  296:         ),
  297:     ]
  298: 
  299:     @pytest.mark.parametrize("nano_case", nano_cases)
  300:     def test_apply_nanoseconds(self, nano_case):
  301:         offset, cases = nano_case
  302:         for base, expected in cases.items():
  303:             assert_offset_equal(offset, base, expected)
  304: 
  305:     def test_us_federal_holiday_with_datetime(self):
  306:         # GH 16867
  307:         bhour_us = CustomBusinessHour(calendar=USFederalHolidayCalendar())
  308:         t0 = datetime(2014, 1, 17, 15)
  309:         result = t0 + bhour_us * 8
  310:         expected = Timestamp("2014-01-21 15:00:00")
  311:         assert result == expected
  312: 
  313: 
  314: @pytest.mark.parametrize(
  315:     "weekmask, expected_time, mult",
  316:     [
  317:         ["Mon Tue Wed Thu Fri Sat", "2018-11-10 09:00:00", 10],
  318:         ["Tue Wed Thu Fri Sat", "2018-11-13 08:00:00", 18],
  319:     ],
  320: )
  321: def test_custom_businesshour_weekmask_and_holidays(weekmask, expected_time, mult):
  322:     # GH 23542
  323:     holidays = ["2018-11-09"]
  324:     bh = CustomBusinessHour(
  325:         start="08:00", end="17:00", weekmask=weekmask, holidays=holidays
  326:     )
  327:     result = Timestamp("2018-11-08 08:00") + mult * bh
  328:     expected = Timestamp(expected_time)
  329:     assert result == expected
