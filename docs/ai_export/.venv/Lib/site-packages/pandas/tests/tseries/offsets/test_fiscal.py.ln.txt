    1: """
    2: Tests for Fiscal Year and Fiscal Quarter offset classes
    3: """
    4: from datetime import datetime
    5: 
    6: from dateutil.relativedelta import relativedelta
    7: import pytest
    8: 
    9: from pandas import Timestamp
   10: import pandas._testing as tm
   11: from pandas.tests.tseries.offsets.common import (
   12:     WeekDay,
   13:     assert_is_on_offset,
   14:     assert_offset_equal,
   15: )
   16: 
   17: from pandas.tseries.offsets import (
   18:     FY5253,
   19:     FY5253Quarter,
   20: )
   21: 
   22: 
   23: def makeFY5253LastOfMonthQuarter(*args, **kwds):
   24:     return FY5253Quarter(*args, variation="last", **kwds)
   25: 
   26: 
   27: def makeFY5253NearestEndMonthQuarter(*args, **kwds):
   28:     return FY5253Quarter(*args, variation="nearest", **kwds)
   29: 
   30: 
   31: def makeFY5253NearestEndMonth(*args, **kwds):
   32:     return FY5253(*args, variation="nearest", **kwds)
   33: 
   34: 
   35: def makeFY5253LastOfMonth(*args, **kwds):
   36:     return FY5253(*args, variation="last", **kwds)
   37: 
   38: 
   39: def test_get_offset_name():
   40:     assert (
   41:         makeFY5253LastOfMonthQuarter(
   42:             weekday=1, startingMonth=3, qtr_with_extra_week=4
   43:         ).freqstr
   44:         == "REQ-L-MAR-TUE-4"
   45:     )
   46:     assert (
   47:         makeFY5253NearestEndMonthQuarter(
   48:             weekday=1, startingMonth=3, qtr_with_extra_week=3
   49:         ).freqstr
   50:         == "REQ-N-MAR-TUE-3"
   51:     )
   52: 
   53: 
   54: class TestFY5253LastOfMonth:
   55:     offset_lom_sat_aug = makeFY5253LastOfMonth(1, startingMonth=8, weekday=WeekDay.SAT)
   56:     offset_lom_sat_sep = makeFY5253LastOfMonth(1, startingMonth=9, weekday=WeekDay.SAT)
   57: 
   58:     on_offset_cases = [
   59:         # From Wikipedia (see:
   60:         # https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar#Last_Saturday_of_the_month_at_fiscal_year_end)
   61:         (offset_lom_sat_aug, datetime(2006, 8, 26), True),
   62:         (offset_lom_sat_aug, datetime(2007, 8, 25), True),
   63:         (offset_lom_sat_aug, datetime(2008, 8, 30), True),
   64:         (offset_lom_sat_aug, datetime(2009, 8, 29), True),
   65:         (offset_lom_sat_aug, datetime(2010, 8, 28), True),
   66:         (offset_lom_sat_aug, datetime(2011, 8, 27), True),
   67:         (offset_lom_sat_aug, datetime(2012, 8, 25), True),
   68:         (offset_lom_sat_aug, datetime(2013, 8, 31), True),
   69:         (offset_lom_sat_aug, datetime(2014, 8, 30), True),
   70:         (offset_lom_sat_aug, datetime(2015, 8, 29), True),
   71:         (offset_lom_sat_aug, datetime(2016, 8, 27), True),
   72:         (offset_lom_sat_aug, datetime(2017, 8, 26), True),
   73:         (offset_lom_sat_aug, datetime(2018, 8, 25), True),
   74:         (offset_lom_sat_aug, datetime(2019, 8, 31), True),
   75:         (offset_lom_sat_aug, datetime(2006, 8, 27), False),
   76:         (offset_lom_sat_aug, datetime(2007, 8, 28), False),
   77:         (offset_lom_sat_aug, datetime(2008, 8, 31), False),
   78:         (offset_lom_sat_aug, datetime(2009, 8, 30), False),
   79:         (offset_lom_sat_aug, datetime(2010, 8, 29), False),
   80:         (offset_lom_sat_aug, datetime(2011, 8, 28), False),
   81:         (offset_lom_sat_aug, datetime(2006, 8, 25), False),
   82:         (offset_lom_sat_aug, datetime(2007, 8, 24), False),
   83:         (offset_lom_sat_aug, datetime(2008, 8, 29), False),
   84:         (offset_lom_sat_aug, datetime(2009, 8, 28), False),
   85:         (offset_lom_sat_aug, datetime(2010, 8, 27), False),
   86:         (offset_lom_sat_aug, datetime(2011, 8, 26), False),
   87:         (offset_lom_sat_aug, datetime(2019, 8, 30), False),
   88:         # From GMCR (see for example:
   89:         # http://yahoo.brand.edgar-online.com/Default.aspx?
   90:         # companyid=3184&formtypeID=7)
   91:         (offset_lom_sat_sep, datetime(2010, 9, 25), True),
   92:         (offset_lom_sat_sep, datetime(2011, 9, 24), True),
   93:         (offset_lom_sat_sep, datetime(2012, 9, 29), True),
   94:     ]
   95: 
   96:     @pytest.mark.parametrize("case", on_offset_cases)
   97:     def test_is_on_offset(self, case):
   98:         offset, dt, expected = case
   99:         assert_is_on_offset(offset, dt, expected)
  100: 
  101:     def test_apply(self):
  102:         offset_lom_aug_sat = makeFY5253LastOfMonth(startingMonth=8, weekday=WeekDay.SAT)
  103:         offset_lom_aug_sat_1 = makeFY5253LastOfMonth(
  104:             n=1, startingMonth=8, weekday=WeekDay.SAT
  105:         )
  106: 
  107:         date_seq_lom_aug_sat = [
  108:             datetime(2006, 8, 26),
  109:             datetime(2007, 8, 25),
  110:             datetime(2008, 8, 30),
  111:             datetime(2009, 8, 29),
  112:             datetime(2010, 8, 28),
  113:             datetime(2011, 8, 27),
  114:             datetime(2012, 8, 25),
  115:             datetime(2013, 8, 31),
  116:             datetime(2014, 8, 30),
  117:             datetime(2015, 8, 29),
  118:             datetime(2016, 8, 27),
  119:         ]
  120: 
  121:         tests = [
  122:             (offset_lom_aug_sat, date_seq_lom_aug_sat),
  123:             (offset_lom_aug_sat_1, date_seq_lom_aug_sat),
  124:             (offset_lom_aug_sat, [datetime(2006, 8, 25)] + date_seq_lom_aug_sat),
  125:             (offset_lom_aug_sat_1, [datetime(2006, 8, 27)] + date_seq_lom_aug_sat[1:]),
  126:             (
  127:                 makeFY5253LastOfMonth(n=-1, startingMonth=8, weekday=WeekDay.SAT),
  128:                 list(reversed(date_seq_lom_aug_sat)),
  129:             ),
  130:         ]
  131:         for test in tests:
  132:             offset, data = test
  133:             current = data[0]
  134:             for datum in data[1:]:
  135:                 current = current + offset
  136:                 assert current == datum
  137: 
  138: 
  139: class TestFY5253NearestEndMonth:
  140:     def test_get_year_end(self):
  141:         assert makeFY5253NearestEndMonth(
  142:             startingMonth=8, weekday=WeekDay.SAT
  143:         ).get_year_end(datetime(2013, 1, 1)) == datetime(2013, 8, 31)
  144:         assert makeFY5253NearestEndMonth(
  145:             startingMonth=8, weekday=WeekDay.SUN
  146:         ).get_year_end(datetime(2013, 1, 1)) == datetime(2013, 9, 1)
  147:         assert makeFY5253NearestEndMonth(
  148:             startingMonth=8, weekday=WeekDay.FRI
  149:         ).get_year_end(datetime(2013, 1, 1)) == datetime(2013, 8, 30)
  150: 
  151:         offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, variation="nearest")
  152:         assert offset_n.get_year_end(datetime(2012, 1, 1)) == datetime(2013, 1, 1)
  153:         assert offset_n.get_year_end(datetime(2012, 1, 10)) == datetime(2013, 1, 1)
  154: 
  155:         assert offset_n.get_year_end(datetime(2013, 1, 1)) == datetime(2013, 12, 31)
  156:         assert offset_n.get_year_end(datetime(2013, 1, 2)) == datetime(2013, 12, 31)
  157:         assert offset_n.get_year_end(datetime(2013, 1, 3)) == datetime(2013, 12, 31)
  158:         assert offset_n.get_year_end(datetime(2013, 1, 10)) == datetime(2013, 12, 31)
  159: 
  160:         JNJ = FY5253(n=1, startingMonth=12, weekday=6, variation="nearest")
  161:         assert JNJ.get_year_end(datetime(2006, 1, 1)) == datetime(2006, 12, 31)
  162: 
  163:     offset_lom_aug_sat = makeFY5253NearestEndMonth(
  164:         1, startingMonth=8, weekday=WeekDay.SAT
  165:     )
  166:     offset_lom_aug_thu = makeFY5253NearestEndMonth(
  167:         1, startingMonth=8, weekday=WeekDay.THU
  168:     )
  169:     offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, variation="nearest")
  170: 
  171:     on_offset_cases = [
  172:         #    From Wikipedia (see:
  173:         #    https://en.wikipedia.org/wiki/4%E2%80%934%E2%80%935_calendar
  174:         #    #Saturday_nearest_the_end_of_month)
  175:         #    2006-09-02   2006 September 2
  176:         #    2007-09-01   2007 September 1
  177:         #    2008-08-30   2008 August 30    (leap year)
  178:         #    2009-08-29   2009 August 29
  179:         #    2010-08-28   2010 August 28
  180:         #    2011-09-03   2011 September 3
  181:         #    2012-09-01   2012 September 1  (leap year)
  182:         #    2013-08-31   2013 August 31
  183:         #    2014-08-30   2014 August 30
  184:         #    2015-08-29   2015 August 29
  185:         #    2016-09-03   2016 September 3  (leap year)
  186:         #    2017-09-02   2017 September 2
  187:         #    2018-09-01   2018 September 1
  188:         #    2019-08-31   2019 August 31
  189:         (offset_lom_aug_sat, datetime(2006, 9, 2), True),
  190:         (offset_lom_aug_sat, datetime(2007, 9, 1), True),
  191:         (offset_lom_aug_sat, datetime(2008, 8, 30), True),
  192:         (offset_lom_aug_sat, datetime(2009, 8, 29), True),
  193:         (offset_lom_aug_sat, datetime(2010, 8, 28), True),
  194:         (offset_lom_aug_sat, datetime(2011, 9, 3), True),
  195:         (offset_lom_aug_sat, datetime(2016, 9, 3), True),
  196:         (offset_lom_aug_sat, datetime(2017, 9, 2), True),
  197:         (offset_lom_aug_sat, datetime(2018, 9, 1), True),
  198:         (offset_lom_aug_sat, datetime(2019, 8, 31), True),
  199:         (offset_lom_aug_sat, datetime(2006, 8, 27), False),
  200:         (offset_lom_aug_sat, datetime(2007, 8, 28), False),
  201:         (offset_lom_aug_sat, datetime(2008, 8, 31), False),
  202:         (offset_lom_aug_sat, datetime(2009, 8, 30), False),
  203:         (offset_lom_aug_sat, datetime(2010, 8, 29), False),
  204:         (offset_lom_aug_sat, datetime(2011, 8, 28), False),
  205:         (offset_lom_aug_sat, datetime(2006, 8, 25), False),
  206:         (offset_lom_aug_sat, datetime(2007, 8, 24), False),
  207:         (offset_lom_aug_sat, datetime(2008, 8, 29), False),
  208:         (offset_lom_aug_sat, datetime(2009, 8, 28), False),
  209:         (offset_lom_aug_sat, datetime(2010, 8, 27), False),
  210:         (offset_lom_aug_sat, datetime(2011, 8, 26), False),
  211:         (offset_lom_aug_sat, datetime(2019, 8, 30), False),
  212:         # From Micron, see:
  213:         # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
  214:         (offset_lom_aug_thu, datetime(2012, 8, 30), True),
  215:         (offset_lom_aug_thu, datetime(2011, 9, 1), True),
  216:         (offset_n, datetime(2012, 12, 31), False),
  217:         (offset_n, datetime(2013, 1, 1), True),
  218:         (offset_n, datetime(2013, 1, 2), False),
  219:     ]
  220: 
  221:     @pytest.mark.parametrize("case", on_offset_cases)
  222:     def test_is_on_offset(self, case):
  223:         offset, dt, expected = case
  224:         assert_is_on_offset(offset, dt, expected)
  225: 
  226:     def test_apply(self):
  227:         date_seq_nem_8_sat = [
  228:             datetime(2006, 9, 2),
  229:             datetime(2007, 9, 1),
  230:             datetime(2008, 8, 30),
  231:             datetime(2009, 8, 29),
  232:             datetime(2010, 8, 28),
  233:             datetime(2011, 9, 3),
  234:         ]
  235: 
  236:         JNJ = [
  237:             datetime(2005, 1, 2),
  238:             datetime(2006, 1, 1),
  239:             datetime(2006, 12, 31),
  240:             datetime(2007, 12, 30),
  241:             datetime(2008, 12, 28),
  242:             datetime(2010, 1, 3),
  243:             datetime(2011, 1, 2),
  244:             datetime(2012, 1, 1),
  245:             datetime(2012, 12, 30),
  246:         ]
  247: 
  248:         DEC_SAT = FY5253(n=-1, startingMonth=12, weekday=5, variation="nearest")
  249: 
  250:         tests = [
  251:             (
  252:                 makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT),
  253:                 date_seq_nem_8_sat,
  254:             ),
  255:             (
  256:                 makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT),
  257:                 date_seq_nem_8_sat,
  258:             ),
  259:             (
  260:                 makeFY5253NearestEndMonth(startingMonth=8, weekday=WeekDay.SAT),
  261:                 [datetime(2006, 9, 1)] + date_seq_nem_8_sat,
  262:             ),
  263:             (
  264:                 makeFY5253NearestEndMonth(n=1, startingMonth=8, weekday=WeekDay.SAT),
  265:                 [datetime(2006, 9, 3)] + date_seq_nem_8_sat[1:],
  266:             ),
  267:             (
  268:                 makeFY5253NearestEndMonth(n=-1, startingMonth=8, weekday=WeekDay.SAT),
  269:                 list(reversed(date_seq_nem_8_sat)),
  270:             ),
  271:             (
  272:                 makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN),
  273:                 JNJ,
  274:             ),
  275:             (
  276:                 makeFY5253NearestEndMonth(n=-1, startingMonth=12, weekday=WeekDay.SUN),
  277:                 list(reversed(JNJ)),
  278:             ),
  279:             (
  280:                 makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN),
  281:                 [datetime(2005, 1, 2), datetime(2006, 1, 1)],
  282:             ),
  283:             (
  284:                 makeFY5253NearestEndMonth(n=1, startingMonth=12, weekday=WeekDay.SUN),
  285:                 [datetime(2006, 1, 2), datetime(2006, 12, 31)],
  286:             ),
  287:             (DEC_SAT, [datetime(2013, 1, 15), datetime(2012, 12, 29)]),
  288:         ]
  289:         for test in tests:
  290:             offset, data = test
  291:             current = data[0]
  292:             for datum in data[1:]:
  293:                 current = current + offset
  294:                 assert current == datum
  295: 
  296: 
  297: class TestFY5253LastOfMonthQuarter:
  298:     def test_is_anchored(self):
  299:         msg = "FY5253Quarter.is_anchored is deprecated "
  300: 
  301:         with tm.assert_produces_warning(FutureWarning, match=msg):
  302:             assert makeFY5253LastOfMonthQuarter(
  303:                 startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  304:             ).is_anchored()
  305:             assert makeFY5253LastOfMonthQuarter(
  306:                 weekday=WeekDay.SAT, startingMonth=3, qtr_with_extra_week=4
  307:             ).is_anchored()
  308:             assert not makeFY5253LastOfMonthQuarter(
  309:                 2, startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  310:             ).is_anchored()
  311: 
  312:     def test_equality(self):
  313:         assert makeFY5253LastOfMonthQuarter(
  314:             startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  315:         ) == makeFY5253LastOfMonthQuarter(
  316:             startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  317:         )
  318:         assert makeFY5253LastOfMonthQuarter(
  319:             startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  320:         ) != makeFY5253LastOfMonthQuarter(
  321:             startingMonth=1, weekday=WeekDay.SUN, qtr_with_extra_week=4
  322:         )
  323:         assert makeFY5253LastOfMonthQuarter(
  324:             startingMonth=1, weekday=WeekDay.SAT, qtr_with_extra_week=4
  325:         ) != makeFY5253LastOfMonthQuarter(
  326:             startingMonth=2, weekday=WeekDay.SAT, qtr_with_extra_week=4
  327:         )
  328: 
  329:     def test_offset(self):
  330:         offset = makeFY5253LastOfMonthQuarter(
  331:             1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  332:         )
  333:         offset2 = makeFY5253LastOfMonthQuarter(
  334:             2, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  335:         )
  336:         offset4 = makeFY5253LastOfMonthQuarter(
  337:             4, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  338:         )
  339: 
  340:         offset_neg1 = makeFY5253LastOfMonthQuarter(
  341:             -1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  342:         )
  343:         offset_neg2 = makeFY5253LastOfMonthQuarter(
  344:             -2, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  345:         )
  346: 
  347:         GMCR = [
  348:             datetime(2010, 3, 27),
  349:             datetime(2010, 6, 26),
  350:             datetime(2010, 9, 25),
  351:             datetime(2010, 12, 25),
  352:             datetime(2011, 3, 26),
  353:             datetime(2011, 6, 25),
  354:             datetime(2011, 9, 24),
  355:             datetime(2011, 12, 24),
  356:             datetime(2012, 3, 24),
  357:             datetime(2012, 6, 23),
  358:             datetime(2012, 9, 29),
  359:             datetime(2012, 12, 29),
  360:             datetime(2013, 3, 30),
  361:             datetime(2013, 6, 29),
  362:         ]
  363: 
  364:         assert_offset_equal(offset, base=GMCR[0], expected=GMCR[1])
  365:         assert_offset_equal(
  366:             offset, base=GMCR[0] + relativedelta(days=-1), expected=GMCR[0]
  367:         )
  368:         assert_offset_equal(offset, base=GMCR[1], expected=GMCR[2])
  369: 
  370:         assert_offset_equal(offset2, base=GMCR[0], expected=GMCR[2])
  371:         assert_offset_equal(offset4, base=GMCR[0], expected=GMCR[4])
  372: 
  373:         assert_offset_equal(offset_neg1, base=GMCR[-1], expected=GMCR[-2])
  374:         assert_offset_equal(
  375:             offset_neg1, base=GMCR[-1] + relativedelta(days=+1), expected=GMCR[-1]
  376:         )
  377:         assert_offset_equal(offset_neg2, base=GMCR[-1], expected=GMCR[-3])
  378: 
  379:         date = GMCR[0] + relativedelta(days=-1)
  380:         for expected in GMCR:
  381:             assert_offset_equal(offset, date, expected)
  382:             date = date + offset
  383: 
  384:         date = GMCR[-1] + relativedelta(days=+1)
  385:         for expected in reversed(GMCR):
  386:             assert_offset_equal(offset_neg1, date, expected)
  387:             date = date + offset_neg1
  388: 
  389:     lomq_aug_sat_4 = makeFY5253LastOfMonthQuarter(
  390:         1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4
  391:     )
  392:     lomq_sep_sat_4 = makeFY5253LastOfMonthQuarter(
  393:         1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4
  394:     )
  395: 
  396:     on_offset_cases = [
  397:         # From Wikipedia
  398:         (lomq_aug_sat_4, datetime(2006, 8, 26), True),
  399:         (lomq_aug_sat_4, datetime(2007, 8, 25), True),
  400:         (lomq_aug_sat_4, datetime(2008, 8, 30), True),
  401:         (lomq_aug_sat_4, datetime(2009, 8, 29), True),
  402:         (lomq_aug_sat_4, datetime(2010, 8, 28), True),
  403:         (lomq_aug_sat_4, datetime(2011, 8, 27), True),
  404:         (lomq_aug_sat_4, datetime(2019, 8, 31), True),
  405:         (lomq_aug_sat_4, datetime(2006, 8, 27), False),
  406:         (lomq_aug_sat_4, datetime(2007, 8, 28), False),
  407:         (lomq_aug_sat_4, datetime(2008, 8, 31), False),
  408:         (lomq_aug_sat_4, datetime(2009, 8, 30), False),
  409:         (lomq_aug_sat_4, datetime(2010, 8, 29), False),
  410:         (lomq_aug_sat_4, datetime(2011, 8, 28), False),
  411:         (lomq_aug_sat_4, datetime(2006, 8, 25), False),
  412:         (lomq_aug_sat_4, datetime(2007, 8, 24), False),
  413:         (lomq_aug_sat_4, datetime(2008, 8, 29), False),
  414:         (lomq_aug_sat_4, datetime(2009, 8, 28), False),
  415:         (lomq_aug_sat_4, datetime(2010, 8, 27), False),
  416:         (lomq_aug_sat_4, datetime(2011, 8, 26), False),
  417:         (lomq_aug_sat_4, datetime(2019, 8, 30), False),
  418:         # From GMCR
  419:         (lomq_sep_sat_4, datetime(2010, 9, 25), True),
  420:         (lomq_sep_sat_4, datetime(2011, 9, 24), True),
  421:         (lomq_sep_sat_4, datetime(2012, 9, 29), True),
  422:         (lomq_sep_sat_4, datetime(2013, 6, 29), True),
  423:         (lomq_sep_sat_4, datetime(2012, 6, 23), True),
  424:         (lomq_sep_sat_4, datetime(2012, 6, 30), False),
  425:         (lomq_sep_sat_4, datetime(2013, 3, 30), True),
  426:         (lomq_sep_sat_4, datetime(2012, 3, 24), True),
  427:         (lomq_sep_sat_4, datetime(2012, 12, 29), True),
  428:         (lomq_sep_sat_4, datetime(2011, 12, 24), True),
  429:         # INTC (extra week in Q1)
  430:         # See: http://www.intc.com/releasedetail.cfm?ReleaseID=542844
  431:         (
  432:             makeFY5253LastOfMonthQuarter(
  433:                 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  434:             ),
  435:             datetime(2011, 4, 2),
  436:             True,
  437:         ),
  438:         # see: http://google.brand.edgar-online.com/?sym=INTC&formtypeID=7
  439:         (
  440:             makeFY5253LastOfMonthQuarter(
  441:                 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  442:             ),
  443:             datetime(2012, 12, 29),
  444:             True,
  445:         ),
  446:         (
  447:             makeFY5253LastOfMonthQuarter(
  448:                 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  449:             ),
  450:             datetime(2011, 12, 31),
  451:             True,
  452:         ),
  453:         (
  454:             makeFY5253LastOfMonthQuarter(
  455:                 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  456:             ),
  457:             datetime(2010, 12, 25),
  458:             True,
  459:         ),
  460:     ]
  461: 
  462:     @pytest.mark.parametrize("case", on_offset_cases)
  463:     def test_is_on_offset(self, case):
  464:         offset, dt, expected = case
  465:         assert_is_on_offset(offset, dt, expected)
  466: 
  467:     def test_year_has_extra_week(self):
  468:         # End of long Q1
  469:         assert makeFY5253LastOfMonthQuarter(
  470:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  471:         ).year_has_extra_week(datetime(2011, 4, 2))
  472: 
  473:         # Start of long Q1
  474:         assert makeFY5253LastOfMonthQuarter(
  475:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  476:         ).year_has_extra_week(datetime(2010, 12, 26))
  477: 
  478:         # End of year before year with long Q1
  479:         assert not makeFY5253LastOfMonthQuarter(
  480:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  481:         ).year_has_extra_week(datetime(2010, 12, 25))
  482: 
  483:         for year in [
  484:             x for x in range(1994, 2011 + 1) if x not in [2011, 2005, 2000, 1994]
  485:         ]:
  486:             assert not makeFY5253LastOfMonthQuarter(
  487:                 1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  488:             ).year_has_extra_week(datetime(year, 4, 2))
  489: 
  490:         # Other long years
  491:         assert makeFY5253LastOfMonthQuarter(
  492:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  493:         ).year_has_extra_week(datetime(2005, 4, 2))
  494: 
  495:         assert makeFY5253LastOfMonthQuarter(
  496:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  497:         ).year_has_extra_week(datetime(2000, 4, 2))
  498: 
  499:         assert makeFY5253LastOfMonthQuarter(
  500:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  501:         ).year_has_extra_week(datetime(1994, 4, 2))
  502: 
  503:     def test_get_weeks(self):
  504:         sat_dec_1 = makeFY5253LastOfMonthQuarter(
  505:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1
  506:         )
  507:         sat_dec_4 = makeFY5253LastOfMonthQuarter(
  508:             1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4
  509:         )
  510: 
  511:         assert sat_dec_1.get_weeks(datetime(2011, 4, 2)) == [14, 13, 13, 13]
  512:         assert sat_dec_4.get_weeks(datetime(2011, 4, 2)) == [13, 13, 13, 14]
  513:         assert sat_dec_1.get_weeks(datetime(2010, 12, 25)) == [13, 13, 13, 13]
  514: 
  515: 
  516: class TestFY5253NearestEndMonthQuarter:
  517:     offset_nem_sat_aug_4 = makeFY5253NearestEndMonthQuarter(
  518:         1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4
  519:     )
  520:     offset_nem_thu_aug_4 = makeFY5253NearestEndMonthQuarter(
  521:         1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4
  522:     )
  523:     offset_n = FY5253(weekday=WeekDay.TUE, startingMonth=12, variation="nearest")
  524: 
  525:     on_offset_cases = [
  526:         # From Wikipedia
  527:         (offset_nem_sat_aug_4, datetime(2006, 9, 2), True),
  528:         (offset_nem_sat_aug_4, datetime(2007, 9, 1), True),
  529:         (offset_nem_sat_aug_4, datetime(2008, 8, 30), True),
  530:         (offset_nem_sat_aug_4, datetime(2009, 8, 29), True),
  531:         (offset_nem_sat_aug_4, datetime(2010, 8, 28), True),
  532:         (offset_nem_sat_aug_4, datetime(2011, 9, 3), True),
  533:         (offset_nem_sat_aug_4, datetime(2016, 9, 3), True),
  534:         (offset_nem_sat_aug_4, datetime(2017, 9, 2), True),
  535:         (offset_nem_sat_aug_4, datetime(2018, 9, 1), True),
  536:         (offset_nem_sat_aug_4, datetime(2019, 8, 31), True),
  537:         (offset_nem_sat_aug_4, datetime(2006, 8, 27), False),
  538:         (offset_nem_sat_aug_4, datetime(2007, 8, 28), False),
  539:         (offset_nem_sat_aug_4, datetime(2008, 8, 31), False),
  540:         (offset_nem_sat_aug_4, datetime(2009, 8, 30), False),
  541:         (offset_nem_sat_aug_4, datetime(2010, 8, 29), False),
  542:         (offset_nem_sat_aug_4, datetime(2011, 8, 28), False),
  543:         (offset_nem_sat_aug_4, datetime(2006, 8, 25), False),
  544:         (offset_nem_sat_aug_4, datetime(2007, 8, 24), False),
  545:         (offset_nem_sat_aug_4, datetime(2008, 8, 29), False),
  546:         (offset_nem_sat_aug_4, datetime(2009, 8, 28), False),
  547:         (offset_nem_sat_aug_4, datetime(2010, 8, 27), False),
  548:         (offset_nem_sat_aug_4, datetime(2011, 8, 26), False),
  549:         (offset_nem_sat_aug_4, datetime(2019, 8, 30), False),
  550:         # From Micron, see:
  551:         # http://google.brand.edgar-online.com/?sym=MU&formtypeID=7
  552:         (offset_nem_thu_aug_4, datetime(2012, 8, 30), True),
  553:         (offset_nem_thu_aug_4, datetime(2011, 9, 1), True),
  554:         # See: http://google.brand.edgar-online.com/?sym=MU&formtypeID=13
  555:         (offset_nem_thu_aug_4, datetime(2013, 5, 30), True),
  556:         (offset_nem_thu_aug_4, datetime(2013, 2, 28), True),
  557:         (offset_nem_thu_aug_4, datetime(2012, 11, 29), True),
  558:         (offset_nem_thu_aug_4, datetime(2012, 5, 31), True),
  559:         (offset_nem_thu_aug_4, datetime(2007, 3, 1), True),
  560:         (offset_nem_thu_aug_4, datetime(1994, 3, 3), True),
  561:         (offset_n, datetime(2012, 12, 31), False),
  562:         (offset_n, datetime(2013, 1, 1), True),
  563:         (offset_n, datetime(2013, 1, 2), False),
  564:     ]
  565: 
  566:     @pytest.mark.parametrize("case", on_offset_cases)
  567:     def test_is_on_offset(self, case):
  568:         offset, dt, expected = case
  569:         assert_is_on_offset(offset, dt, expected)
  570: 
  571:     def test_offset(self):
  572:         offset = makeFY5253NearestEndMonthQuarter(
  573:             1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4
  574:         )
  575: 
  576:         MU = [
  577:             datetime(2012, 5, 31),
  578:             datetime(2012, 8, 30),
  579:             datetime(2012, 11, 29),
  580:             datetime(2013, 2, 28),
  581:             datetime(2013, 5, 30),
  582:         ]
  583: 
  584:         date = MU[0] + relativedelta(days=-1)
  585:         for expected in MU:
  586:             assert_offset_equal(offset, date, expected)
  587:             date = date + offset
  588: 
  589:         assert_offset_equal(offset, datetime(2012, 5, 31), datetime(2012, 8, 30))
  590:         assert_offset_equal(offset, datetime(2012, 5, 30), datetime(2012, 5, 31))
  591: 
  592:         offset2 = FY5253Quarter(
  593:             weekday=5, startingMonth=12, variation="last", qtr_with_extra_week=4
  594:         )
  595: 
  596:         assert_offset_equal(offset2, datetime(2013, 1, 15), datetime(2013, 3, 30))
  597: 
  598: 
  599: def test_bunched_yearends():
  600:     # GH#14774 cases with two fiscal year-ends in the same calendar-year
  601:     fy = FY5253(n=1, weekday=5, startingMonth=12, variation="nearest")
  602:     dt = Timestamp("2004-01-01")
  603:     assert fy.rollback(dt) == Timestamp("2002-12-28")
  604:     assert (-fy)._apply(dt) == Timestamp("2002-12-28")
  605:     assert dt - fy == Timestamp("2002-12-28")
  606: 
  607:     assert fy.rollforward(dt) == Timestamp("2004-01-03")
  608:     assert fy._apply(dt) == Timestamp("2004-01-03")
  609:     assert fy + dt == Timestamp("2004-01-03")
  610:     assert dt + fy == Timestamp("2004-01-03")
  611: 
  612:     # Same thing, but starting from a Timestamp in the previous year.
  613:     dt = Timestamp("2003-12-31")
  614:     assert fy.rollback(dt) == Timestamp("2002-12-28")
  615:     assert (-fy)._apply(dt) == Timestamp("2002-12-28")
  616:     assert dt - fy == Timestamp("2002-12-28")
  617: 
  618: 
  619: def test_fy5253_last_onoffset():
  620:     # GH#18877 dates on the year-end but not normalized to midnight
  621:     offset = FY5253(n=-5, startingMonth=5, variation="last", weekday=0)
  622:     ts = Timestamp("1984-05-28 06:29:43.955911354+0200", tz="Europe/San_Marino")
  623:     fast = offset.is_on_offset(ts)
  624:     slow = (ts + offset) - offset == ts
  625:     assert fast == slow
  626: 
  627: 
  628: def test_fy5253_nearest_onoffset():
  629:     # GH#18877 dates on the year-end but not normalized to midnight
  630:     offset = FY5253(n=3, startingMonth=7, variation="nearest", weekday=2)
  631:     ts = Timestamp("2032-07-28 00:12:59.035729419+0000", tz="Africa/Dakar")
  632:     fast = offset.is_on_offset(ts)
  633:     slow = (ts + offset) - offset == ts
  634:     assert fast == slow
  635: 
  636: 
  637: def test_fy5253qtr_onoffset_nearest():
  638:     # GH#19036
  639:     ts = Timestamp("1985-09-02 23:57:46.232550356-0300", tz="Atlantic/Bermuda")
  640:     offset = FY5253Quarter(
  641:         n=3, qtr_with_extra_week=1, startingMonth=2, variation="nearest", weekday=0
  642:     )
  643:     fast = offset.is_on_offset(ts)
  644:     slow = (ts + offset) - offset == ts
  645:     assert fast == slow
  646: 
  647: 
  648: def test_fy5253qtr_onoffset_last():
  649:     # GH#19036
  650:     offset = FY5253Quarter(
  651:         n=-2, qtr_with_extra_week=1, startingMonth=7, variation="last", weekday=2
  652:     )
  653:     ts = Timestamp("2011-01-26 19:03:40.331096129+0200", tz="Africa/Windhoek")
  654:     slow = (ts + offset) - offset == ts
  655:     fast = offset.is_on_offset(ts)
  656:     assert fast == slow
