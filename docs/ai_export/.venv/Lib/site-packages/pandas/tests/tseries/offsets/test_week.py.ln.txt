    1: """
    2: Tests for the following offsets:
    3: - Week
    4: - WeekOfMonth
    5: - LastWeekOfMonth
    6: """
    7: from __future__ import annotations
    8: 
    9: from datetime import (
   10:     datetime,
   11:     timedelta,
   12: )
   13: 
   14: import pytest
   15: 
   16: from pandas._libs.tslibs import Timestamp
   17: from pandas._libs.tslibs.offsets import (
   18:     Day,
   19:     LastWeekOfMonth,
   20:     Week,
   21:     WeekOfMonth,
   22: )
   23: 
   24: import pandas._testing as tm
   25: from pandas.tests.tseries.offsets.common import (
   26:     WeekDay,
   27:     assert_is_on_offset,
   28:     assert_offset_equal,
   29: )
   30: 
   31: 
   32: class TestWeek:
   33:     def test_repr(self):
   34:         assert repr(Week(weekday=0)) == "<Week: weekday=0>"
   35:         assert repr(Week(n=-1, weekday=0)) == "<-1 * Week: weekday=0>"
   36:         assert repr(Week(n=-2, weekday=0)) == "<-2 * Weeks: weekday=0>"
   37: 
   38:     def test_corner(self):
   39:         with pytest.raises(ValueError, match="Day must be"):
   40:             Week(weekday=7)
   41: 
   42:         with pytest.raises(ValueError, match="Day must be"):
   43:             Week(weekday=-1)
   44: 
   45:     def test_is_anchored(self):
   46:         msg = "Week.is_anchored is deprecated "
   47: 
   48:         with tm.assert_produces_warning(FutureWarning, match=msg):
   49:             assert Week(weekday=0).is_anchored()
   50:             assert not Week().is_anchored()
   51:             assert not Week(2, weekday=2).is_anchored()
   52:             assert not Week(2).is_anchored()
   53: 
   54:     offset_cases = []
   55:     # not business week
   56:     offset_cases.append(
   57:         (
   58:             Week(),
   59:             {
   60:                 datetime(2008, 1, 1): datetime(2008, 1, 8),
   61:                 datetime(2008, 1, 4): datetime(2008, 1, 11),
   62:                 datetime(2008, 1, 5): datetime(2008, 1, 12),
   63:                 datetime(2008, 1, 6): datetime(2008, 1, 13),
   64:                 datetime(2008, 1, 7): datetime(2008, 1, 14),
   65:             },
   66:         )
   67:     )
   68: 
   69:     # Mon
   70:     offset_cases.append(
   71:         (
   72:             Week(weekday=0),
   73:             {
   74:                 datetime(2007, 12, 31): datetime(2008, 1, 7),
   75:                 datetime(2008, 1, 4): datetime(2008, 1, 7),
   76:                 datetime(2008, 1, 5): datetime(2008, 1, 7),
   77:                 datetime(2008, 1, 6): datetime(2008, 1, 7),
   78:                 datetime(2008, 1, 7): datetime(2008, 1, 14),
   79:             },
   80:         )
   81:     )
   82: 
   83:     # n=0 -> roll forward. Mon
   84:     offset_cases.append(
   85:         (
   86:             Week(0, weekday=0),
   87:             {
   88:                 datetime(2007, 12, 31): datetime(2007, 12, 31),
   89:                 datetime(2008, 1, 4): datetime(2008, 1, 7),
   90:                 datetime(2008, 1, 5): datetime(2008, 1, 7),
   91:                 datetime(2008, 1, 6): datetime(2008, 1, 7),
   92:                 datetime(2008, 1, 7): datetime(2008, 1, 7),
   93:             },
   94:         )
   95:     )
   96: 
   97:     # n=0 -> roll forward. Mon
   98:     offset_cases.append(
   99:         (
  100:             Week(-2, weekday=1),
  101:             {
  102:                 datetime(2010, 4, 6): datetime(2010, 3, 23),
  103:                 datetime(2010, 4, 8): datetime(2010, 3, 30),
  104:                 datetime(2010, 4, 5): datetime(2010, 3, 23),
  105:             },
  106:         )
  107:     )
  108: 
  109:     @pytest.mark.parametrize("case", offset_cases)
  110:     def test_offset(self, case):
  111:         offset, cases = case
  112:         for base, expected in cases.items():
  113:             assert_offset_equal(offset, base, expected)
  114: 
  115:     @pytest.mark.parametrize("weekday", range(7))
  116:     def test_is_on_offset(self, weekday):
  117:         offset = Week(weekday=weekday)
  118: 
  119:         for day in range(1, 8):
  120:             date = datetime(2008, 1, day)
  121:             expected = day % 7 == weekday
  122:         assert_is_on_offset(offset, date, expected)
  123: 
  124:     @pytest.mark.parametrize(
  125:         "n,date",
  126:         [
  127:             (2, "1862-01-13 09:03:34.873477378+0210"),
  128:             (-2, "1856-10-24 16:18:36.556360110-0717"),
  129:         ],
  130:     )
  131:     def test_is_on_offset_weekday_none(self, n, date):
  132:         # GH 18510 Week with weekday = None, normalize = False
  133:         # should always be is_on_offset
  134:         offset = Week(n=n, weekday=None)
  135:         ts = Timestamp(date, tz="Africa/Lusaka")
  136:         fast = offset.is_on_offset(ts)
  137:         slow = (ts + offset) - offset == ts
  138:         assert fast == slow
  139: 
  140:     def test_week_add_invalid(self):
  141:         # Week with weekday should raise TypeError and _not_ AttributeError
  142:         #  when adding invalid offset
  143:         offset = Week(weekday=1)
  144:         other = Day()
  145:         with pytest.raises(TypeError, match="Cannot add"):
  146:             offset + other
  147: 
  148: 
  149: class TestWeekOfMonth:
  150:     def test_constructor(self):
  151:         with pytest.raises(ValueError, match="^Week"):
  152:             WeekOfMonth(n=1, week=4, weekday=0)
  153: 
  154:         with pytest.raises(ValueError, match="^Week"):
  155:             WeekOfMonth(n=1, week=-1, weekday=0)
  156: 
  157:         with pytest.raises(ValueError, match="^Day"):
  158:             WeekOfMonth(n=1, week=0, weekday=-1)
  159: 
  160:         with pytest.raises(ValueError, match="^Day"):
  161:             WeekOfMonth(n=1, week=0, weekday=-7)
  162: 
  163:     def test_repr(self):
  164:         assert (
  165:             repr(WeekOfMonth(weekday=1, week=2)) == "<WeekOfMonth: week=2, weekday=1>"
  166:         )
  167: 
  168:     def test_offset(self):
  169:         date1 = datetime(2011, 1, 4)  # 1st Tuesday of Month
  170:         date2 = datetime(2011, 1, 11)  # 2nd Tuesday of Month
  171:         date3 = datetime(2011, 1, 18)  # 3rd Tuesday of Month
  172:         date4 = datetime(2011, 1, 25)  # 4th Tuesday of Month
  173: 
  174:         # see for loop for structure
  175:         test_cases = [
  176:             (-2, 2, 1, date1, datetime(2010, 11, 16)),
  177:             (-2, 2, 1, date2, datetime(2010, 11, 16)),
  178:             (-2, 2, 1, date3, datetime(2010, 11, 16)),
  179:             (-2, 2, 1, date4, datetime(2010, 12, 21)),
  180:             (-1, 2, 1, date1, datetime(2010, 12, 21)),
  181:             (-1, 2, 1, date2, datetime(2010, 12, 21)),
  182:             (-1, 2, 1, date3, datetime(2010, 12, 21)),
  183:             (-1, 2, 1, date4, datetime(2011, 1, 18)),
  184:             (0, 0, 1, date1, datetime(2011, 1, 4)),
  185:             (0, 0, 1, date2, datetime(2011, 2, 1)),
  186:             (0, 0, 1, date3, datetime(2011, 2, 1)),
  187:             (0, 0, 1, date4, datetime(2011, 2, 1)),
  188:             (0, 1, 1, date1, datetime(2011, 1, 11)),
  189:             (0, 1, 1, date2, datetime(2011, 1, 11)),
  190:             (0, 1, 1, date3, datetime(2011, 2, 8)),
  191:             (0, 1, 1, date4, datetime(2011, 2, 8)),
  192:             (0, 0, 1, date1, datetime(2011, 1, 4)),
  193:             (0, 1, 1, date2, datetime(2011, 1, 11)),
  194:             (0, 2, 1, date3, datetime(2011, 1, 18)),
  195:             (0, 3, 1, date4, datetime(2011, 1, 25)),
  196:             (1, 0, 0, date1, datetime(2011, 2, 7)),
  197:             (1, 0, 0, date2, datetime(2011, 2, 7)),
  198:             (1, 0, 0, date3, datetime(2011, 2, 7)),
  199:             (1, 0, 0, date4, datetime(2011, 2, 7)),
  200:             (1, 0, 1, date1, datetime(2011, 2, 1)),
  201:             (1, 0, 1, date2, datetime(2011, 2, 1)),
  202:             (1, 0, 1, date3, datetime(2011, 2, 1)),
  203:             (1, 0, 1, date4, datetime(2011, 2, 1)),
  204:             (1, 0, 2, date1, datetime(2011, 1, 5)),
  205:             (1, 0, 2, date2, datetime(2011, 2, 2)),
  206:             (1, 0, 2, date3, datetime(2011, 2, 2)),
  207:             (1, 0, 2, date4, datetime(2011, 2, 2)),
  208:             (1, 2, 1, date1, datetime(2011, 1, 18)),
  209:             (1, 2, 1, date2, datetime(2011, 1, 18)),
  210:             (1, 2, 1, date3, datetime(2011, 2, 15)),
  211:             (1, 2, 1, date4, datetime(2011, 2, 15)),
  212:             (2, 2, 1, date1, datetime(2011, 2, 15)),
  213:             (2, 2, 1, date2, datetime(2011, 2, 15)),
  214:             (2, 2, 1, date3, datetime(2011, 3, 15)),
  215:             (2, 2, 1, date4, datetime(2011, 3, 15)),
  216:         ]
  217: 
  218:         for n, week, weekday, dt, expected in test_cases:
  219:             offset = WeekOfMonth(n, week=week, weekday=weekday)
  220:             assert_offset_equal(offset, dt, expected)
  221: 
  222:         # try subtracting
  223:         result = datetime(2011, 2, 1) - WeekOfMonth(week=1, weekday=2)
  224:         assert result == datetime(2011, 1, 12)
  225: 
  226:         result = datetime(2011, 2, 3) - WeekOfMonth(week=0, weekday=2)
  227:         assert result == datetime(2011, 2, 2)
  228: 
  229:     on_offset_cases = [
  230:         (0, 0, datetime(2011, 2, 7), True),
  231:         (0, 0, datetime(2011, 2, 6), False),
  232:         (0, 0, datetime(2011, 2, 14), False),
  233:         (1, 0, datetime(2011, 2, 14), True),
  234:         (0, 1, datetime(2011, 2, 1), True),
  235:         (0, 1, datetime(2011, 2, 8), False),
  236:     ]
  237: 
  238:     @pytest.mark.parametrize("case", on_offset_cases)
  239:     def test_is_on_offset(self, case):
  240:         week, weekday, dt, expected = case
  241:         offset = WeekOfMonth(week=week, weekday=weekday)
  242:         assert offset.is_on_offset(dt) == expected
  243: 
  244:     @pytest.mark.parametrize(
  245:         "n,week,date,tz",
  246:         [
  247:             (2, 2, "1916-05-15 01:14:49.583410462+0422", "Asia/Qyzylorda"),
  248:             (-3, 1, "1980-12-08 03:38:52.878321185+0500", "Asia/Oral"),
  249:         ],
  250:     )
  251:     def test_is_on_offset_nanoseconds(self, n, week, date, tz):
  252:         # GH 18864
  253:         # Make sure that nanoseconds don't trip up is_on_offset (and with it apply)
  254:         offset = WeekOfMonth(n=n, week=week, weekday=0)
  255:         ts = Timestamp(date, tz=tz)
  256:         fast = offset.is_on_offset(ts)
  257:         slow = (ts + offset) - offset == ts
  258:         assert fast == slow
  259: 
  260: 
  261: class TestLastWeekOfMonth:
  262:     def test_constructor(self):
  263:         with pytest.raises(ValueError, match="^N cannot be 0"):
  264:             LastWeekOfMonth(n=0, weekday=1)
  265: 
  266:         with pytest.raises(ValueError, match="^Day"):
  267:             LastWeekOfMonth(n=1, weekday=-1)
  268: 
  269:         with pytest.raises(ValueError, match="^Day"):
  270:             LastWeekOfMonth(n=1, weekday=7)
  271: 
  272:     def test_offset(self):
  273:         # Saturday
  274:         last_sat = datetime(2013, 8, 31)
  275:         next_sat = datetime(2013, 9, 28)
  276:         offset_sat = LastWeekOfMonth(n=1, weekday=5)
  277: 
  278:         one_day_before = last_sat + timedelta(days=-1)
  279:         assert one_day_before + offset_sat == last_sat
  280: 
  281:         one_day_after = last_sat + timedelta(days=+1)
  282:         assert one_day_after + offset_sat == next_sat
  283: 
  284:         # Test On that day
  285:         assert last_sat + offset_sat == next_sat
  286: 
  287:         # Thursday
  288: 
  289:         offset_thur = LastWeekOfMonth(n=1, weekday=3)
  290:         last_thurs = datetime(2013, 1, 31)
  291:         next_thurs = datetime(2013, 2, 28)
  292: 
  293:         one_day_before = last_thurs + timedelta(days=-1)
  294:         assert one_day_before + offset_thur == last_thurs
  295: 
  296:         one_day_after = last_thurs + timedelta(days=+1)
  297:         assert one_day_after + offset_thur == next_thurs
  298: 
  299:         # Test on that day
  300:         assert last_thurs + offset_thur == next_thurs
  301: 
  302:         three_before = last_thurs + timedelta(days=-3)
  303:         assert three_before + offset_thur == last_thurs
  304: 
  305:         two_after = last_thurs + timedelta(days=+2)
  306:         assert two_after + offset_thur == next_thurs
  307: 
  308:         offset_sunday = LastWeekOfMonth(n=1, weekday=WeekDay.SUN)
  309:         assert datetime(2013, 7, 31) + offset_sunday == datetime(2013, 8, 25)
  310: 
  311:     on_offset_cases = [
  312:         (WeekDay.SUN, datetime(2013, 1, 27), True),
  313:         (WeekDay.SAT, datetime(2013, 3, 30), True),
  314:         (WeekDay.MON, datetime(2013, 2, 18), False),  # Not the last Mon
  315:         (WeekDay.SUN, datetime(2013, 2, 25), False),  # Not a SUN
  316:         (WeekDay.MON, datetime(2013, 2, 25), True),
  317:         (WeekDay.SAT, datetime(2013, 11, 30), True),
  318:         (WeekDay.SAT, datetime(2006, 8, 26), True),
  319:         (WeekDay.SAT, datetime(2007, 8, 25), True),
  320:         (WeekDay.SAT, datetime(2008, 8, 30), True),
  321:         (WeekDay.SAT, datetime(2009, 8, 29), True),
  322:         (WeekDay.SAT, datetime(2010, 8, 28), True),
  323:         (WeekDay.SAT, datetime(2011, 8, 27), True),
  324:         (WeekDay.SAT, datetime(2019, 8, 31), True),
  325:     ]
  326: 
  327:     @pytest.mark.parametrize("case", on_offset_cases)
  328:     def test_is_on_offset(self, case):
  329:         weekday, dt, expected = case
  330:         offset = LastWeekOfMonth(weekday=weekday)
  331:         assert offset.is_on_offset(dt) == expected
  332: 
  333:     @pytest.mark.parametrize(
  334:         "n,weekday,date,tz",
  335:         [
  336:             (4, 6, "1917-05-27 20:55:27.084284178+0200", "Europe/Warsaw"),
  337:             (-4, 5, "2005-08-27 05:01:42.799392561-0500", "America/Rainy_River"),
  338:         ],
  339:     )
  340:     def test_last_week_of_month_on_offset(self, n, weekday, date, tz):
  341:         # GH 19036, GH 18977 _adjust_dst was incorrect for LastWeekOfMonth
  342:         offset = LastWeekOfMonth(n=n, weekday=weekday)
  343:         ts = Timestamp(date, tz=tz)
  344:         slow = (ts + offset) - offset == ts
  345:         fast = offset.is_on_offset(ts)
  346:         assert fast == slow
  347: 
  348:     def test_repr(self):
  349:         assert (
  350:             repr(LastWeekOfMonth(n=2, weekday=1)) == "<2 * LastWeekOfMonths: weekday=1>"
  351:         )
