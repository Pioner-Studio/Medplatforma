    1: """
    2: Tests for the following offsets:
    3: - BMonthBegin
    4: - BMonthEnd
    5: """
    6: from __future__ import annotations
    7: 
    8: from datetime import datetime
    9: 
   10: import pytest
   11: 
   12: import pandas as pd
   13: from pandas.tests.tseries.offsets.common import (
   14:     assert_is_on_offset,
   15:     assert_offset_equal,
   16: )
   17: 
   18: from pandas.tseries.offsets import (
   19:     BMonthBegin,
   20:     BMonthEnd,
   21: )
   22: 
   23: 
   24: @pytest.mark.parametrize("n", [-2, 1])
   25: @pytest.mark.parametrize(
   26:     "cls",
   27:     [
   28:         BMonthBegin,
   29:         BMonthEnd,
   30:     ],
   31: )
   32: def test_apply_index(cls, n):
   33:     offset = cls(n=n)
   34:     rng = pd.date_range(start="1/1/2000", periods=100000, freq="min")
   35:     ser = pd.Series(rng)
   36: 
   37:     res = rng + offset
   38:     assert res.freq is None  # not retained
   39:     assert res[0] == rng[0] + offset
   40:     assert res[-1] == rng[-1] + offset
   41:     res2 = ser + offset
   42:     # apply_index is only for indexes, not series, so no res2_v2
   43:     assert res2.iloc[0] == ser.iloc[0] + offset
   44:     assert res2.iloc[-1] == ser.iloc[-1] + offset
   45: 
   46: 
   47: class TestBMonthBegin:
   48:     def test_offsets_compare_equal(self):
   49:         # root cause of #456
   50:         offset1 = BMonthBegin()
   51:         offset2 = BMonthBegin()
   52:         assert not offset1 != offset2
   53: 
   54:     offset_cases = []
   55:     offset_cases.append(
   56:         (
   57:             BMonthBegin(),
   58:             {
   59:                 datetime(2008, 1, 1): datetime(2008, 2, 1),
   60:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
   61:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
   62:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
   63:                 datetime(2006, 9, 1): datetime(2006, 10, 2),
   64:                 datetime(2007, 1, 1): datetime(2007, 2, 1),
   65:                 datetime(2006, 12, 1): datetime(2007, 1, 1),
   66:             },
   67:         )
   68:     )
   69: 
   70:     offset_cases.append(
   71:         (
   72:             BMonthBegin(0),
   73:             {
   74:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
   75:                 datetime(2006, 10, 2): datetime(2006, 10, 2),
   76:                 datetime(2008, 1, 31): datetime(2008, 2, 1),
   77:                 datetime(2006, 12, 29): datetime(2007, 1, 1),
   78:                 datetime(2006, 12, 31): datetime(2007, 1, 1),
   79:                 datetime(2006, 9, 15): datetime(2006, 10, 2),
   80:             },
   81:         )
   82:     )
   83: 
   84:     offset_cases.append(
   85:         (
   86:             BMonthBegin(2),
   87:             {
   88:                 datetime(2008, 1, 1): datetime(2008, 3, 3),
   89:                 datetime(2008, 1, 15): datetime(2008, 3, 3),
   90:                 datetime(2006, 12, 29): datetime(2007, 2, 1),
   91:                 datetime(2006, 12, 31): datetime(2007, 2, 1),
   92:                 datetime(2007, 1, 1): datetime(2007, 3, 1),
   93:                 datetime(2006, 11, 1): datetime(2007, 1, 1),
   94:             },
   95:         )
   96:     )
   97: 
   98:     offset_cases.append(
   99:         (
  100:             BMonthBegin(-1),
  101:             {
  102:                 datetime(2007, 1, 1): datetime(2006, 12, 1),
  103:                 datetime(2008, 6, 30): datetime(2008, 6, 2),
  104:                 datetime(2008, 6, 1): datetime(2008, 5, 1),
  105:                 datetime(2008, 3, 10): datetime(2008, 3, 3),
  106:                 datetime(2008, 12, 31): datetime(2008, 12, 1),
  107:                 datetime(2006, 12, 29): datetime(2006, 12, 1),
  108:                 datetime(2006, 12, 30): datetime(2006, 12, 1),
  109:                 datetime(2007, 1, 1): datetime(2006, 12, 1),
  110:             },
  111:         )
  112:     )
  113: 
  114:     @pytest.mark.parametrize("case", offset_cases)
  115:     def test_offset(self, case):
  116:         offset, cases = case
  117:         for base, expected in cases.items():
  118:             assert_offset_equal(offset, base, expected)
  119: 
  120:     on_offset_cases = [
  121:         (BMonthBegin(), datetime(2007, 12, 31), False),
  122:         (BMonthBegin(), datetime(2008, 1, 1), True),
  123:         (BMonthBegin(), datetime(2001, 4, 2), True),
  124:         (BMonthBegin(), datetime(2008, 3, 3), True),
  125:     ]
  126: 
  127:     @pytest.mark.parametrize("case", on_offset_cases)
  128:     def test_is_on_offset(self, case):
  129:         offset, dt, expected = case
  130:         assert_is_on_offset(offset, dt, expected)
  131: 
  132: 
  133: class TestBMonthEnd:
  134:     def test_normalize(self):
  135:         dt = datetime(2007, 1, 1, 3)
  136: 
  137:         result = dt + BMonthEnd(normalize=True)
  138:         expected = dt.replace(hour=0) + BMonthEnd()
  139:         assert result == expected
  140: 
  141:     def test_offsets_compare_equal(self):
  142:         # root cause of #456
  143:         offset1 = BMonthEnd()
  144:         offset2 = BMonthEnd()
  145:         assert not offset1 != offset2
  146: 
  147:     offset_cases = []
  148:     offset_cases.append(
  149:         (
  150:             BMonthEnd(),
  151:             {
  152:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  153:                 datetime(2008, 1, 31): datetime(2008, 2, 29),
  154:                 datetime(2006, 12, 29): datetime(2007, 1, 31),
  155:                 datetime(2006, 12, 31): datetime(2007, 1, 31),
  156:                 datetime(2007, 1, 1): datetime(2007, 1, 31),
  157:                 datetime(2006, 12, 1): datetime(2006, 12, 29),
  158:             },
  159:         )
  160:     )
  161: 
  162:     offset_cases.append(
  163:         (
  164:             BMonthEnd(0),
  165:             {
  166:                 datetime(2008, 1, 1): datetime(2008, 1, 31),
  167:                 datetime(2008, 1, 31): datetime(2008, 1, 31),
  168:                 datetime(2006, 12, 29): datetime(2006, 12, 29),
  169:                 datetime(2006, 12, 31): datetime(2007, 1, 31),
  170:                 datetime(2007, 1, 1): datetime(2007, 1, 31),
  171:             },
  172:         )
  173:     )
  174: 
  175:     offset_cases.append(
  176:         (
  177:             BMonthEnd(2),
  178:             {
  179:                 datetime(2008, 1, 1): datetime(2008, 2, 29),
  180:                 datetime(2008, 1, 31): datetime(2008, 3, 31),
  181:                 datetime(2006, 12, 29): datetime(2007, 2, 28),
  182:                 datetime(2006, 12, 31): datetime(2007, 2, 28),
  183:                 datetime(2007, 1, 1): datetime(2007, 2, 28),
  184:                 datetime(2006, 11, 1): datetime(2006, 12, 29),
  185:             },
  186:         )
  187:     )
  188: 
  189:     offset_cases.append(
  190:         (
  191:             BMonthEnd(-1),
  192:             {
  193:                 datetime(2007, 1, 1): datetime(2006, 12, 29),
  194:                 datetime(2008, 6, 30): datetime(2008, 5, 30),
  195:                 datetime(2008, 12, 31): datetime(2008, 11, 28),
  196:                 datetime(2006, 12, 29): datetime(2006, 11, 30),
  197:                 datetime(2006, 12, 30): datetime(2006, 12, 29),
  198:                 datetime(2007, 1, 1): datetime(2006, 12, 29),
  199:             },
  200:         )
  201:     )
  202: 
  203:     @pytest.mark.parametrize("case", offset_cases)
  204:     def test_offset(self, case):
  205:         offset, cases = case
  206:         for base, expected in cases.items():
  207:             assert_offset_equal(offset, base, expected)
  208: 
  209:     on_offset_cases = [
  210:         (BMonthEnd(), datetime(2007, 12, 31), True),
  211:         (BMonthEnd(), datetime(2008, 1, 1), False),
  212:     ]
  213: 
  214:     @pytest.mark.parametrize("case", on_offset_cases)
  215:     def test_is_on_offset(self, case):
  216:         offset, dt, expected = case
  217:         assert_is_on_offset(offset, dt, expected)
