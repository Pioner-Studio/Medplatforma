    1: """
    2: Tests for the following offsets:
    3: - BYearBegin
    4: - BYearEnd
    5: """
    6: from __future__ import annotations
    7: 
    8: from datetime import datetime
    9: 
   10: import pytest
   11: 
   12: from pandas.tests.tseries.offsets.common import (
   13:     assert_is_on_offset,
   14:     assert_offset_equal,
   15: )
   16: 
   17: from pandas.tseries.offsets import (
   18:     BYearBegin,
   19:     BYearEnd,
   20: )
   21: 
   22: 
   23: class TestBYearBegin:
   24:     def test_misspecified(self):
   25:         msg = "Month must go from 1 to 12"
   26:         with pytest.raises(ValueError, match=msg):
   27:             BYearBegin(month=13)
   28:         with pytest.raises(ValueError, match=msg):
   29:             BYearEnd(month=13)
   30: 
   31:     offset_cases = []
   32:     offset_cases.append(
   33:         (
   34:             BYearBegin(),
   35:             {
   36:                 datetime(2008, 1, 1): datetime(2009, 1, 1),
   37:                 datetime(2008, 6, 30): datetime(2009, 1, 1),
   38:                 datetime(2008, 12, 31): datetime(2009, 1, 1),
   39:                 datetime(2011, 1, 1): datetime(2011, 1, 3),
   40:                 datetime(2011, 1, 3): datetime(2012, 1, 2),
   41:                 datetime(2005, 12, 30): datetime(2006, 1, 2),
   42:                 datetime(2005, 12, 31): datetime(2006, 1, 2),
   43:             },
   44:         )
   45:     )
   46: 
   47:     offset_cases.append(
   48:         (
   49:             BYearBegin(0),
   50:             {
   51:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
   52:                 datetime(2008, 6, 30): datetime(2009, 1, 1),
   53:                 datetime(2008, 12, 31): datetime(2009, 1, 1),
   54:                 datetime(2005, 12, 30): datetime(2006, 1, 2),
   55:                 datetime(2005, 12, 31): datetime(2006, 1, 2),
   56:             },
   57:         )
   58:     )
   59: 
   60:     offset_cases.append(
   61:         (
   62:             BYearBegin(-1),
   63:             {
   64:                 datetime(2007, 1, 1): datetime(2006, 1, 2),
   65:                 datetime(2009, 1, 4): datetime(2009, 1, 1),
   66:                 datetime(2009, 1, 1): datetime(2008, 1, 1),
   67:                 datetime(2008, 6, 30): datetime(2008, 1, 1),
   68:                 datetime(2008, 12, 31): datetime(2008, 1, 1),
   69:                 datetime(2006, 12, 29): datetime(2006, 1, 2),
   70:                 datetime(2006, 12, 30): datetime(2006, 1, 2),
   71:                 datetime(2006, 1, 1): datetime(2005, 1, 3),
   72:             },
   73:         )
   74:     )
   75: 
   76:     offset_cases.append(
   77:         (
   78:             BYearBegin(-2),
   79:             {
   80:                 datetime(2007, 1, 1): datetime(2005, 1, 3),
   81:                 datetime(2007, 6, 30): datetime(2006, 1, 2),
   82:                 datetime(2008, 12, 31): datetime(2007, 1, 1),
   83:             },
   84:         )
   85:     )
   86: 
   87:     @pytest.mark.parametrize("case", offset_cases)
   88:     def test_offset(self, case):
   89:         offset, cases = case
   90:         for base, expected in cases.items():
   91:             assert_offset_equal(offset, base, expected)
   92: 
   93: 
   94: class TestBYearEnd:
   95:     offset_cases = []
   96:     offset_cases.append(
   97:         (
   98:             BYearEnd(),
   99:             {
  100:                 datetime(2008, 1, 1): datetime(2008, 12, 31),
  101:                 datetime(2008, 6, 30): datetime(2008, 12, 31),
  102:                 datetime(2008, 12, 31): datetime(2009, 12, 31),
  103:                 datetime(2005, 12, 30): datetime(2006, 12, 29),
  104:                 datetime(2005, 12, 31): datetime(2006, 12, 29),
  105:             },
  106:         )
  107:     )
  108: 
  109:     offset_cases.append(
  110:         (
  111:             BYearEnd(0),
  112:             {
  113:                 datetime(2008, 1, 1): datetime(2008, 12, 31),
  114:                 datetime(2008, 6, 30): datetime(2008, 12, 31),
  115:                 datetime(2008, 12, 31): datetime(2008, 12, 31),
  116:                 datetime(2005, 12, 31): datetime(2006, 12, 29),
  117:             },
  118:         )
  119:     )
  120: 
  121:     offset_cases.append(
  122:         (
  123:             BYearEnd(-1),
  124:             {
  125:                 datetime(2007, 1, 1): datetime(2006, 12, 29),
  126:                 datetime(2008, 6, 30): datetime(2007, 12, 31),
  127:                 datetime(2008, 12, 31): datetime(2007, 12, 31),
  128:                 datetime(2006, 12, 29): datetime(2005, 12, 30),
  129:                 datetime(2006, 12, 30): datetime(2006, 12, 29),
  130:                 datetime(2007, 1, 1): datetime(2006, 12, 29),
  131:             },
  132:         )
  133:     )
  134: 
  135:     offset_cases.append(
  136:         (
  137:             BYearEnd(-2),
  138:             {
  139:                 datetime(2007, 1, 1): datetime(2005, 12, 30),
  140:                 datetime(2008, 6, 30): datetime(2006, 12, 29),
  141:                 datetime(2008, 12, 31): datetime(2006, 12, 29),
  142:             },
  143:         )
  144:     )
  145: 
  146:     @pytest.mark.parametrize("case", offset_cases)
  147:     def test_offset(self, case):
  148:         offset, cases = case
  149:         for base, expected in cases.items():
  150:             assert_offset_equal(offset, base, expected)
  151: 
  152:     on_offset_cases = [
  153:         (BYearEnd(), datetime(2007, 12, 31), True),
  154:         (BYearEnd(), datetime(2008, 1, 1), False),
  155:         (BYearEnd(), datetime(2006, 12, 31), False),
  156:         (BYearEnd(), datetime(2006, 12, 29), True),
  157:     ]
  158: 
  159:     @pytest.mark.parametrize("case", on_offset_cases)
  160:     def test_is_on_offset(self, case):
  161:         offset, dt, expected = case
  162:         assert_is_on_offset(offset, dt, expected)
  163: 
  164: 
  165: class TestBYearEndLagged:
  166:     def test_bad_month_fail(self):
  167:         msg = "Month must go from 1 to 12"
  168:         with pytest.raises(ValueError, match=msg):
  169:             BYearEnd(month=13)
  170:         with pytest.raises(ValueError, match=msg):
  171:             BYearEnd(month=0)
  172: 
  173:     offset_cases = []
  174:     offset_cases.append(
  175:         (
  176:             BYearEnd(month=6),
  177:             {
  178:                 datetime(2008, 1, 1): datetime(2008, 6, 30),
  179:                 datetime(2007, 6, 30): datetime(2008, 6, 30),
  180:             },
  181:         )
  182:     )
  183: 
  184:     offset_cases.append(
  185:         (
  186:             BYearEnd(n=-1, month=6),
  187:             {
  188:                 datetime(2008, 1, 1): datetime(2007, 6, 29),
  189:                 datetime(2007, 6, 30): datetime(2007, 6, 29),
  190:             },
  191:         )
  192:     )
  193: 
  194:     @pytest.mark.parametrize("case", offset_cases)
  195:     def test_offset(self, case):
  196:         offset, cases = case
  197:         for base, expected in cases.items():
  198:             assert_offset_equal(offset, base, expected)
  199: 
  200:     def test_roll(self):
  201:         offset = BYearEnd(month=6)
  202:         date = datetime(2009, 11, 30)
  203: 
  204:         assert offset.rollforward(date) == datetime(2010, 6, 30)
  205:         assert offset.rollback(date) == datetime(2009, 6, 30)
  206: 
  207:     on_offset_cases = [
  208:         (BYearEnd(month=2), datetime(2007, 2, 28), True),
  209:         (BYearEnd(month=6), datetime(2007, 6, 30), False),
  210:     ]
  211: 
  212:     @pytest.mark.parametrize("case", on_offset_cases)
  213:     def test_is_on_offset(self, case):
  214:         offset, dt, expected = case
  215:         assert_is_on_offset(offset, dt, expected)
