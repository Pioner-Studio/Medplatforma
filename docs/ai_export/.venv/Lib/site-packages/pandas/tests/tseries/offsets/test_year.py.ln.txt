    1: """
    2: Tests for the following offsets:
    3: - YearBegin
    4: - YearEnd
    5: """
    6: from __future__ import annotations
    7: 
    8: from datetime import datetime
    9: 
   10: import numpy as np
   11: import pytest
   12: 
   13: from pandas import Timestamp
   14: from pandas.tests.tseries.offsets.common import (
   15:     assert_is_on_offset,
   16:     assert_offset_equal,
   17: )
   18: 
   19: from pandas.tseries.offsets import (
   20:     YearBegin,
   21:     YearEnd,
   22: )
   23: 
   24: 
   25: class TestYearBegin:
   26:     def test_misspecified(self):
   27:         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
   28:             YearBegin(month=13)
   29: 
   30:     offset_cases = []
   31:     offset_cases.append(
   32:         (
   33:             YearBegin(),
   34:             {
   35:                 datetime(2008, 1, 1): datetime(2009, 1, 1),
   36:                 datetime(2008, 6, 30): datetime(2009, 1, 1),
   37:                 datetime(2008, 12, 31): datetime(2009, 1, 1),
   38:                 datetime(2005, 12, 30): datetime(2006, 1, 1),
   39:                 datetime(2005, 12, 31): datetime(2006, 1, 1),
   40:             },
   41:         )
   42:     )
   43: 
   44:     offset_cases.append(
   45:         (
   46:             YearBegin(0),
   47:             {
   48:                 datetime(2008, 1, 1): datetime(2008, 1, 1),
   49:                 datetime(2008, 6, 30): datetime(2009, 1, 1),
   50:                 datetime(2008, 12, 31): datetime(2009, 1, 1),
   51:                 datetime(2005, 12, 30): datetime(2006, 1, 1),
   52:                 datetime(2005, 12, 31): datetime(2006, 1, 1),
   53:             },
   54:         )
   55:     )
   56: 
   57:     offset_cases.append(
   58:         (
   59:             YearBegin(3),
   60:             {
   61:                 datetime(2008, 1, 1): datetime(2011, 1, 1),
   62:                 datetime(2008, 6, 30): datetime(2011, 1, 1),
   63:                 datetime(2008, 12, 31): datetime(2011, 1, 1),
   64:                 datetime(2005, 12, 30): datetime(2008, 1, 1),
   65:                 datetime(2005, 12, 31): datetime(2008, 1, 1),
   66:             },
   67:         )
   68:     )
   69: 
   70:     offset_cases.append(
   71:         (
   72:             YearBegin(-1),
   73:             {
   74:                 datetime(2007, 1, 1): datetime(2006, 1, 1),
   75:                 datetime(2007, 1, 15): datetime(2007, 1, 1),
   76:                 datetime(2008, 6, 30): datetime(2008, 1, 1),
   77:                 datetime(2008, 12, 31): datetime(2008, 1, 1),
   78:                 datetime(2006, 12, 29): datetime(2006, 1, 1),
   79:                 datetime(2006, 12, 30): datetime(2006, 1, 1),
   80:                 datetime(2007, 1, 1): datetime(2006, 1, 1),
   81:             },
   82:         )
   83:     )
   84: 
   85:     offset_cases.append(
   86:         (
   87:             YearBegin(-2),
   88:             {
   89:                 datetime(2007, 1, 1): datetime(2005, 1, 1),
   90:                 datetime(2008, 6, 30): datetime(2007, 1, 1),
   91:                 datetime(2008, 12, 31): datetime(2007, 1, 1),
   92:             },
   93:         )
   94:     )
   95: 
   96:     offset_cases.append(
   97:         (
   98:             YearBegin(month=4),
   99:             {
  100:                 datetime(2007, 4, 1): datetime(2008, 4, 1),
  101:                 datetime(2007, 4, 15): datetime(2008, 4, 1),
  102:                 datetime(2007, 3, 1): datetime(2007, 4, 1),
  103:                 datetime(2007, 12, 15): datetime(2008, 4, 1),
  104:                 datetime(2012, 1, 31): datetime(2012, 4, 1),
  105:             },
  106:         )
  107:     )
  108: 
  109:     offset_cases.append(
  110:         (
  111:             YearBegin(0, month=4),
  112:             {
  113:                 datetime(2007, 4, 1): datetime(2007, 4, 1),
  114:                 datetime(2007, 3, 1): datetime(2007, 4, 1),
  115:                 datetime(2007, 12, 15): datetime(2008, 4, 1),
  116:                 datetime(2012, 1, 31): datetime(2012, 4, 1),
  117:             },
  118:         )
  119:     )
  120: 
  121:     offset_cases.append(
  122:         (
  123:             YearBegin(4, month=4),
  124:             {
  125:                 datetime(2007, 4, 1): datetime(2011, 4, 1),
  126:                 datetime(2007, 4, 15): datetime(2011, 4, 1),
  127:                 datetime(2007, 3, 1): datetime(2010, 4, 1),
  128:                 datetime(2007, 12, 15): datetime(2011, 4, 1),
  129:                 datetime(2012, 1, 31): datetime(2015, 4, 1),
  130:             },
  131:         )
  132:     )
  133: 
  134:     offset_cases.append(
  135:         (
  136:             YearBegin(-1, month=4),
  137:             {
  138:                 datetime(2007, 4, 1): datetime(2006, 4, 1),
  139:                 datetime(2007, 3, 1): datetime(2006, 4, 1),
  140:                 datetime(2007, 12, 15): datetime(2007, 4, 1),
  141:                 datetime(2012, 1, 31): datetime(2011, 4, 1),
  142:             },
  143:         )
  144:     )
  145: 
  146:     offset_cases.append(
  147:         (
  148:             YearBegin(-3, month=4),
  149:             {
  150:                 datetime(2007, 4, 1): datetime(2004, 4, 1),
  151:                 datetime(2007, 3, 1): datetime(2004, 4, 1),
  152:                 datetime(2007, 12, 15): datetime(2005, 4, 1),
  153:                 datetime(2012, 1, 31): datetime(2009, 4, 1),
  154:             },
  155:         )
  156:     )
  157: 
  158:     @pytest.mark.parametrize("case", offset_cases)
  159:     def test_offset(self, case):
  160:         offset, cases = case
  161:         for base, expected in cases.items():
  162:             assert_offset_equal(offset, base, expected)
  163: 
  164:     on_offset_cases = [
  165:         (YearBegin(), datetime(2007, 1, 3), False),
  166:         (YearBegin(), datetime(2008, 1, 1), True),
  167:         (YearBegin(), datetime(2006, 12, 31), False),
  168:         (YearBegin(), datetime(2006, 1, 2), False),
  169:     ]
  170: 
  171:     @pytest.mark.parametrize("case", on_offset_cases)
  172:     def test_is_on_offset(self, case):
  173:         offset, dt, expected = case
  174:         assert_is_on_offset(offset, dt, expected)
  175: 
  176: 
  177: class TestYearEnd:
  178:     def test_misspecified(self):
  179:         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
  180:             YearEnd(month=13)
  181: 
  182:     offset_cases = []
  183:     offset_cases.append(
  184:         (
  185:             YearEnd(),
  186:             {
  187:                 datetime(2008, 1, 1): datetime(2008, 12, 31),
  188:                 datetime(2008, 6, 30): datetime(2008, 12, 31),
  189:                 datetime(2008, 12, 31): datetime(2009, 12, 31),
  190:                 datetime(2005, 12, 30): datetime(2005, 12, 31),
  191:                 datetime(2005, 12, 31): datetime(2006, 12, 31),
  192:             },
  193:         )
  194:     )
  195: 
  196:     offset_cases.append(
  197:         (
  198:             YearEnd(0),
  199:             {
  200:                 datetime(2008, 1, 1): datetime(2008, 12, 31),
  201:                 datetime(2008, 6, 30): datetime(2008, 12, 31),
  202:                 datetime(2008, 12, 31): datetime(2008, 12, 31),
  203:                 datetime(2005, 12, 30): datetime(2005, 12, 31),
  204:             },
  205:         )
  206:     )
  207: 
  208:     offset_cases.append(
  209:         (
  210:             YearEnd(-1),
  211:             {
  212:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  213:                 datetime(2008, 6, 30): datetime(2007, 12, 31),
  214:                 datetime(2008, 12, 31): datetime(2007, 12, 31),
  215:                 datetime(2006, 12, 29): datetime(2005, 12, 31),
  216:                 datetime(2006, 12, 30): datetime(2005, 12, 31),
  217:                 datetime(2007, 1, 1): datetime(2006, 12, 31),
  218:             },
  219:         )
  220:     )
  221: 
  222:     offset_cases.append(
  223:         (
  224:             YearEnd(-2),
  225:             {
  226:                 datetime(2007, 1, 1): datetime(2005, 12, 31),
  227:                 datetime(2008, 6, 30): datetime(2006, 12, 31),
  228:                 datetime(2008, 12, 31): datetime(2006, 12, 31),
  229:             },
  230:         )
  231:     )
  232: 
  233:     @pytest.mark.parametrize("case", offset_cases)
  234:     def test_offset(self, case):
  235:         offset, cases = case
  236:         for base, expected in cases.items():
  237:             assert_offset_equal(offset, base, expected)
  238: 
  239:     on_offset_cases = [
  240:         (YearEnd(), datetime(2007, 12, 31), True),
  241:         (YearEnd(), datetime(2008, 1, 1), False),
  242:         (YearEnd(), datetime(2006, 12, 31), True),
  243:         (YearEnd(), datetime(2006, 12, 29), False),
  244:     ]
  245: 
  246:     @pytest.mark.parametrize("case", on_offset_cases)
  247:     def test_is_on_offset(self, case):
  248:         offset, dt, expected = case
  249:         assert_is_on_offset(offset, dt, expected)
  250: 
  251: 
  252: class TestYearEndDiffMonth:
  253:     offset_cases = []
  254:     offset_cases.append(
  255:         (
  256:             YearEnd(month=3),
  257:             {
  258:                 datetime(2008, 1, 1): datetime(2008, 3, 31),
  259:                 datetime(2008, 2, 15): datetime(2008, 3, 31),
  260:                 datetime(2008, 3, 31): datetime(2009, 3, 31),
  261:                 datetime(2008, 3, 30): datetime(2008, 3, 31),
  262:                 datetime(2005, 3, 31): datetime(2006, 3, 31),
  263:                 datetime(2006, 7, 30): datetime(2007, 3, 31),
  264:             },
  265:         )
  266:     )
  267: 
  268:     offset_cases.append(
  269:         (
  270:             YearEnd(0, month=3),
  271:             {
  272:                 datetime(2008, 1, 1): datetime(2008, 3, 31),
  273:                 datetime(2008, 2, 28): datetime(2008, 3, 31),
  274:                 datetime(2008, 3, 31): datetime(2008, 3, 31),
  275:                 datetime(2005, 3, 30): datetime(2005, 3, 31),
  276:             },
  277:         )
  278:     )
  279: 
  280:     offset_cases.append(
  281:         (
  282:             YearEnd(-1, month=3),
  283:             {
  284:                 datetime(2007, 1, 1): datetime(2006, 3, 31),
  285:                 datetime(2008, 2, 28): datetime(2007, 3, 31),
  286:                 datetime(2008, 3, 31): datetime(2007, 3, 31),
  287:                 datetime(2006, 3, 29): datetime(2005, 3, 31),
  288:                 datetime(2006, 3, 30): datetime(2005, 3, 31),
  289:                 datetime(2007, 3, 1): datetime(2006, 3, 31),
  290:             },
  291:         )
  292:     )
  293: 
  294:     offset_cases.append(
  295:         (
  296:             YearEnd(-2, month=3),
  297:             {
  298:                 datetime(2007, 1, 1): datetime(2005, 3, 31),
  299:                 datetime(2008, 6, 30): datetime(2007, 3, 31),
  300:                 datetime(2008, 3, 31): datetime(2006, 3, 31),
  301:             },
  302:         )
  303:     )
  304: 
  305:     @pytest.mark.parametrize("case", offset_cases)
  306:     def test_offset(self, case):
  307:         offset, cases = case
  308:         for base, expected in cases.items():
  309:             assert_offset_equal(offset, base, expected)
  310: 
  311:     on_offset_cases = [
  312:         (YearEnd(month=3), datetime(2007, 3, 31), True),
  313:         (YearEnd(month=3), datetime(2008, 1, 1), False),
  314:         (YearEnd(month=3), datetime(2006, 3, 31), True),
  315:         (YearEnd(month=3), datetime(2006, 3, 29), False),
  316:     ]
  317: 
  318:     @pytest.mark.parametrize("case", on_offset_cases)
  319:     def test_is_on_offset(self, case):
  320:         offset, dt, expected = case
  321:         assert_is_on_offset(offset, dt, expected)
  322: 
  323: 
  324: def test_add_out_of_pydatetime_range():
  325:     # GH#50348 don't raise in Timestamp.replace
  326:     ts = Timestamp(np.datetime64("-20000-12-31"))
  327:     off = YearEnd()
  328: 
  329:     result = ts + off
  330:     # TODO(cython3): "arg: datetime" annotation will impose
  331:     # datetime limitations on Timestamp. The fused type below works in cy3
  332:     # ctypedef fused datetimelike:
  333:     #     _Timestamp
  334:     #     datetime
  335:     # expected = Timestamp(np.datetime64("-19999-12-31"))
  336:     # assert result == expected
  337:     assert result.year in (-19999, 1973)
  338:     assert result.month == 12
  339:     assert result.day == 31
