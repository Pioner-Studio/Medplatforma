    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     CategoricalDtype,
    7:     CategoricalIndex,
    8:     DataFrame,
    9:     Index,
   10:     MultiIndex,
   11:     Series,
   12:     crosstab,
   13: )
   14: import pandas._testing as tm
   15: 
   16: 
   17: @pytest.fixture
   18: def df():
   19:     df = DataFrame(
   20:         {
   21:             "A": [
   22:                 "foo",
   23:                 "foo",
   24:                 "foo",
   25:                 "foo",
   26:                 "bar",
   27:                 "bar",
   28:                 "bar",
   29:                 "bar",
   30:                 "foo",
   31:                 "foo",
   32:                 "foo",
   33:             ],
   34:             "B": [
   35:                 "one",
   36:                 "one",
   37:                 "one",
   38:                 "two",
   39:                 "one",
   40:                 "one",
   41:                 "one",
   42:                 "two",
   43:                 "two",
   44:                 "two",
   45:                 "one",
   46:             ],
   47:             "C": [
   48:                 "dull",
   49:                 "dull",
   50:                 "shiny",
   51:                 "dull",
   52:                 "dull",
   53:                 "shiny",
   54:                 "shiny",
   55:                 "dull",
   56:                 "shiny",
   57:                 "shiny",
   58:                 "shiny",
   59:             ],
   60:             "D": np.random.default_rng(2).standard_normal(11),
   61:             "E": np.random.default_rng(2).standard_normal(11),
   62:             "F": np.random.default_rng(2).standard_normal(11),
   63:         }
   64:     )
   65: 
   66:     return pd.concat([df, df], ignore_index=True)
   67: 
   68: 
   69: class TestCrosstab:
   70:     def test_crosstab_single(self, df):
   71:         result = crosstab(df["A"], df["C"])
   72:         expected = df.groupby(["A", "C"]).size().unstack()
   73:         tm.assert_frame_equal(result, expected.fillna(0).astype(np.int64))
   74: 
   75:     def test_crosstab_multiple(self, df):
   76:         result = crosstab(df["A"], [df["B"], df["C"]])
   77:         expected = df.groupby(["A", "B", "C"]).size()
   78:         expected = expected.unstack("B").unstack("C").fillna(0).astype(np.int64)
   79:         tm.assert_frame_equal(result, expected)
   80: 
   81:         result = crosstab([df["B"], df["C"]], df["A"])
   82:         expected = df.groupby(["B", "C", "A"]).size()
   83:         expected = expected.unstack("A").fillna(0).astype(np.int64)
   84:         tm.assert_frame_equal(result, expected)
   85: 
   86:     @pytest.mark.parametrize("box", [np.array, list, tuple])
   87:     def test_crosstab_ndarray(self, box):
   88:         # GH 44076
   89:         a = box(np.random.default_rng(2).integers(0, 5, size=100))
   90:         b = box(np.random.default_rng(2).integers(0, 3, size=100))
   91:         c = box(np.random.default_rng(2).integers(0, 10, size=100))
   92: 
   93:         df = DataFrame({"a": a, "b": b, "c": c})
   94: 
   95:         result = crosstab(a, [b, c], rownames=["a"], colnames=("b", "c"))
   96:         expected = crosstab(df["a"], [df["b"], df["c"]])
   97:         tm.assert_frame_equal(result, expected)
   98: 
   99:         result = crosstab([b, c], a, colnames=["a"], rownames=("b", "c"))
  100:         expected = crosstab([df["b"], df["c"]], df["a"])
  101:         tm.assert_frame_equal(result, expected)
  102: 
  103:         # assign arbitrary names
  104:         result = crosstab(a, c)
  105:         expected = crosstab(df["a"], df["c"])
  106:         expected.index.names = ["row_0"]
  107:         expected.columns.names = ["col_0"]
  108:         tm.assert_frame_equal(result, expected)
  109: 
  110:     def test_crosstab_non_aligned(self):
  111:         # GH 17005
  112:         a = Series([0, 1, 1], index=["a", "b", "c"])
  113:         b = Series([3, 4, 3, 4, 3], index=["a", "b", "c", "d", "f"])
  114:         c = np.array([3, 4, 3], dtype=np.int64)
  115: 
  116:         expected = DataFrame(
  117:             [[1, 0], [1, 1]],
  118:             index=Index([0, 1], name="row_0"),
  119:             columns=Index([3, 4], name="col_0"),
  120:         )
  121: 
  122:         result = crosstab(a, b)
  123:         tm.assert_frame_equal(result, expected)
  124: 
  125:         result = crosstab(a, c)
  126:         tm.assert_frame_equal(result, expected)
  127: 
  128:     def test_crosstab_margins(self):
  129:         a = np.random.default_rng(2).integers(0, 7, size=100)
  130:         b = np.random.default_rng(2).integers(0, 3, size=100)
  131:         c = np.random.default_rng(2).integers(0, 5, size=100)
  132: 
  133:         df = DataFrame({"a": a, "b": b, "c": c})
  134: 
  135:         result = crosstab(a, [b, c], rownames=["a"], colnames=("b", "c"), margins=True)
  136: 
  137:         assert result.index.names == ("a",)
  138:         assert result.columns.names == ["b", "c"]
  139: 
  140:         all_cols = result["All", ""]
  141:         exp_cols = df.groupby(["a"]).size().astype("i8")
  142:         # to keep index.name
  143:         exp_margin = Series([len(df)], index=Index(["All"], name="a"))
  144:         exp_cols = pd.concat([exp_cols, exp_margin])
  145:         exp_cols.name = ("All", "")
  146: 
  147:         tm.assert_series_equal(all_cols, exp_cols)
  148: 
  149:         all_rows = result.loc["All"]
  150:         exp_rows = df.groupby(["b", "c"]).size().astype("i8")
  151:         exp_rows = pd.concat([exp_rows, Series([len(df)], index=[("All", "")])])
  152:         exp_rows.name = "All"
  153: 
  154:         exp_rows = exp_rows.reindex(all_rows.index)
  155:         exp_rows = exp_rows.fillna(0).astype(np.int64)
  156:         tm.assert_series_equal(all_rows, exp_rows)
  157: 
  158:     def test_crosstab_margins_set_margin_name(self):
  159:         # GH 15972
  160:         a = np.random.default_rng(2).integers(0, 7, size=100)
  161:         b = np.random.default_rng(2).integers(0, 3, size=100)
  162:         c = np.random.default_rng(2).integers(0, 5, size=100)
  163: 
  164:         df = DataFrame({"a": a, "b": b, "c": c})
  165: 
  166:         result = crosstab(
  167:             a,
  168:             [b, c],
  169:             rownames=["a"],
  170:             colnames=("b", "c"),
  171:             margins=True,
  172:             margins_name="TOTAL",
  173:         )
  174: 
  175:         assert result.index.names == ("a",)
  176:         assert result.columns.names == ["b", "c"]
  177: 
  178:         all_cols = result["TOTAL", ""]
  179:         exp_cols = df.groupby(["a"]).size().astype("i8")
  180:         # to keep index.name
  181:         exp_margin = Series([len(df)], index=Index(["TOTAL"], name="a"))
  182:         exp_cols = pd.concat([exp_cols, exp_margin])
  183:         exp_cols.name = ("TOTAL", "")
  184: 
  185:         tm.assert_series_equal(all_cols, exp_cols)
  186: 
  187:         all_rows = result.loc["TOTAL"]
  188:         exp_rows = df.groupby(["b", "c"]).size().astype("i8")
  189:         exp_rows = pd.concat([exp_rows, Series([len(df)], index=[("TOTAL", "")])])
  190:         exp_rows.name = "TOTAL"
  191: 
  192:         exp_rows = exp_rows.reindex(all_rows.index)
  193:         exp_rows = exp_rows.fillna(0).astype(np.int64)
  194:         tm.assert_series_equal(all_rows, exp_rows)
  195: 
  196:         msg = "margins_name argument must be a string"
  197:         for margins_name in [666, None, ["a", "b"]]:
  198:             with pytest.raises(ValueError, match=msg):
  199:                 crosstab(
  200:                     a,
  201:                     [b, c],
  202:                     rownames=["a"],
  203:                     colnames=("b", "c"),
  204:                     margins=True,
  205:                     margins_name=margins_name,
  206:                 )
  207: 
  208:     def test_crosstab_pass_values(self):
  209:         a = np.random.default_rng(2).integers(0, 7, size=100)
  210:         b = np.random.default_rng(2).integers(0, 3, size=100)
  211:         c = np.random.default_rng(2).integers(0, 5, size=100)
  212:         values = np.random.default_rng(2).standard_normal(100)
  213: 
  214:         table = crosstab(
  215:             [a, b], c, values, aggfunc="sum", rownames=["foo", "bar"], colnames=["baz"]
  216:         )
  217: 
  218:         df = DataFrame({"foo": a, "bar": b, "baz": c, "values": values})
  219: 
  220:         expected = df.pivot_table(
  221:             "values", index=["foo", "bar"], columns="baz", aggfunc="sum"
  222:         )
  223:         tm.assert_frame_equal(table, expected)
  224: 
  225:     def test_crosstab_dropna(self):
  226:         # GH 3820
  227:         a = np.array(["foo", "foo", "foo", "bar", "bar", "foo", "foo"], dtype=object)
  228:         b = np.array(["one", "one", "two", "one", "two", "two", "two"], dtype=object)
  229:         c = np.array(
  230:             ["dull", "dull", "dull", "dull", "dull", "shiny", "shiny"], dtype=object
  231:         )
  232:         res = crosstab(a, [b, c], rownames=["a"], colnames=["b", "c"], dropna=False)
  233:         m = MultiIndex.from_tuples(
  234:             [("one", "dull"), ("one", "shiny"), ("two", "dull"), ("two", "shiny")],
  235:             names=["b", "c"],
  236:         )
  237:         tm.assert_index_equal(res.columns, m)
  238: 
  239:     def test_crosstab_no_overlap(self):
  240:         # GS 10291
  241: 
  242:         s1 = Series([1, 2, 3], index=[1, 2, 3])
  243:         s2 = Series([4, 5, 6], index=[4, 5, 6])
  244: 
  245:         actual = crosstab(s1, s2)
  246:         expected = DataFrame(
  247:             index=Index([], dtype="int64", name="row_0"),
  248:             columns=Index([], dtype="int64", name="col_0"),
  249:         )
  250: 
  251:         tm.assert_frame_equal(actual, expected)
  252: 
  253:     def test_margin_dropna(self):
  254:         # GH 12577
  255:         # pivot_table counts null into margin ('All')
  256:         # when margins=true and dropna=true
  257: 
  258:         df = DataFrame({"a": [1, 2, 2, 2, 2, np.nan], "b": [3, 3, 4, 4, 4, 4]})
  259:         actual = crosstab(df.a, df.b, margins=True, dropna=True)
  260:         expected = DataFrame([[1, 0, 1], [1, 3, 4], [2, 3, 5]])
  261:         expected.index = Index([1.0, 2.0, "All"], name="a")
  262:         expected.columns = Index([3, 4, "All"], name="b")
  263:         tm.assert_frame_equal(actual, expected)
  264: 
  265:     def test_margin_dropna2(self):
  266:         df = DataFrame(
  267:             {"a": [1, np.nan, np.nan, np.nan, 2, np.nan], "b": [3, np.nan, 4, 4, 4, 4]}
  268:         )
  269:         actual = crosstab(df.a, df.b, margins=True, dropna=True)
  270:         expected = DataFrame([[1, 0, 1], [0, 1, 1], [1, 1, 2]])
  271:         expected.index = Index([1.0, 2.0, "All"], name="a")
  272:         expected.columns = Index([3.0, 4.0, "All"], name="b")
  273:         tm.assert_frame_equal(actual, expected)
  274: 
  275:     def test_margin_dropna3(self):
  276:         df = DataFrame(
  277:             {"a": [1, np.nan, np.nan, np.nan, np.nan, 2], "b": [3, 3, 4, 4, 4, 4]}
  278:         )
  279:         actual = crosstab(df.a, df.b, margins=True, dropna=True)
  280:         expected = DataFrame([[1, 0, 1], [0, 1, 1], [1, 1, 2]])
  281:         expected.index = Index([1.0, 2.0, "All"], name="a")
  282:         expected.columns = Index([3, 4, "All"], name="b")
  283:         tm.assert_frame_equal(actual, expected)
  284: 
  285:     def test_margin_dropna4(self):
  286:         # GH 12642
  287:         # _add_margins raises KeyError: Level None not found
  288:         # when margins=True and dropna=False
  289:         # GH: 10772: Keep np.nan in result with dropna=False
  290:         df = DataFrame({"a": [1, 2, 2, 2, 2, np.nan], "b": [3, 3, 4, 4, 4, 4]})
  291:         actual = crosstab(df.a, df.b, margins=True, dropna=False)
  292:         expected = DataFrame([[1, 0, 1.0], [1, 3, 4.0], [0, 1, np.nan], [2, 4, 6.0]])
  293:         expected.index = Index([1.0, 2.0, np.nan, "All"], name="a")
  294:         expected.columns = Index([3, 4, "All"], name="b")
  295:         tm.assert_frame_equal(actual, expected)
  296: 
  297:     def test_margin_dropna5(self):
  298:         # GH: 10772: Keep np.nan in result with dropna=False
  299:         df = DataFrame(
  300:             {"a": [1, np.nan, np.nan, np.nan, 2, np.nan], "b": [3, np.nan, 4, 4, 4, 4]}
  301:         )
  302:         actual = crosstab(df.a, df.b, margins=True, dropna=False)
  303:         expected = DataFrame(
  304:             [[1, 0, 0, 1.0], [0, 1, 0, 1.0], [0, 3, 1, np.nan], [1, 4, 0, 6.0]]
  305:         )
  306:         expected.index = Index([1.0, 2.0, np.nan, "All"], name="a")
  307:         expected.columns = Index([3.0, 4.0, np.nan, "All"], name="b")
  308:         tm.assert_frame_equal(actual, expected)
  309: 
  310:     def test_margin_dropna6(self):
  311:         # GH: 10772: Keep np.nan in result with dropna=False
  312:         a = np.array(["foo", "foo", "foo", "bar", "bar", "foo", "foo"], dtype=object)
  313:         b = np.array(["one", "one", "two", "one", "two", np.nan, "two"], dtype=object)
  314:         c = np.array(
  315:             ["dull", "dull", "dull", "dull", "dull", "shiny", "shiny"], dtype=object
  316:         )
  317: 
  318:         actual = crosstab(
  319:             a, [b, c], rownames=["a"], colnames=["b", "c"], margins=True, dropna=False
  320:         )
  321:         m = MultiIndex.from_arrays(
  322:             [
  323:                 ["one", "one", "two", "two", np.nan, np.nan, "All"],
  324:                 ["dull", "shiny", "dull", "shiny", "dull", "shiny", ""],
  325:             ],
  326:             names=["b", "c"],
  327:         )
  328:         expected = DataFrame(
  329:             [[1, 0, 1, 0, 0, 0, 2], [2, 0, 1, 1, 0, 1, 5], [3, 0, 2, 1, 0, 0, 7]],
  330:             columns=m,
  331:         )
  332:         expected.index = Index(["bar", "foo", "All"], name="a")
  333:         tm.assert_frame_equal(actual, expected)
  334: 
  335:         actual = crosstab(
  336:             [a, b], c, rownames=["a", "b"], colnames=["c"], margins=True, dropna=False
  337:         )
  338:         m = MultiIndex.from_arrays(
  339:             [
  340:                 ["bar", "bar", "bar", "foo", "foo", "foo", "All"],
  341:                 ["one", "two", np.nan, "one", "two", np.nan, ""],
  342:             ],
  343:             names=["a", "b"],
  344:         )
  345:         expected = DataFrame(
  346:             [
  347:                 [1, 0, 1.0],
  348:                 [1, 0, 1.0],
  349:                 [0, 0, np.nan],
  350:                 [2, 0, 2.0],
  351:                 [1, 1, 2.0],
  352:                 [0, 1, np.nan],
  353:                 [5, 2, 7.0],
  354:             ],
  355:             index=m,
  356:         )
  357:         expected.columns = Index(["dull", "shiny", "All"], name="c")
  358:         tm.assert_frame_equal(actual, expected)
  359: 
  360:         actual = crosstab(
  361:             [a, b], c, rownames=["a", "b"], colnames=["c"], margins=True, dropna=True
  362:         )
  363:         m = MultiIndex.from_arrays(
  364:             [["bar", "bar", "foo", "foo", "All"], ["one", "two", "one", "two", ""]],
  365:             names=["a", "b"],
  366:         )
  367:         expected = DataFrame(
  368:             [[1, 0, 1], [1, 0, 1], [2, 0, 2], [1, 1, 2], [5, 1, 6]], index=m
  369:         )
  370:         expected.columns = Index(["dull", "shiny", "All"], name="c")
  371:         tm.assert_frame_equal(actual, expected)
  372: 
  373:     def test_crosstab_normalize(self):
  374:         # Issue 12578
  375:         df = DataFrame(
  376:             {"a": [1, 2, 2, 2, 2], "b": [3, 3, 4, 4, 4], "c": [1, 1, np.nan, 1, 1]}
  377:         )
  378: 
  379:         rindex = Index([1, 2], name="a")
  380:         cindex = Index([3, 4], name="b")
  381:         full_normal = DataFrame([[0.2, 0], [0.2, 0.6]], index=rindex, columns=cindex)
  382:         row_normal = DataFrame([[1.0, 0], [0.25, 0.75]], index=rindex, columns=cindex)
  383:         col_normal = DataFrame([[0.5, 0], [0.5, 1.0]], index=rindex, columns=cindex)
  384: 
  385:         # Check all normalize args
  386:         tm.assert_frame_equal(crosstab(df.a, df.b, normalize="all"), full_normal)
  387:         tm.assert_frame_equal(crosstab(df.a, df.b, normalize=True), full_normal)
  388:         tm.assert_frame_equal(crosstab(df.a, df.b, normalize="index"), row_normal)
  389:         tm.assert_frame_equal(crosstab(df.a, df.b, normalize="columns"), col_normal)
  390:         tm.assert_frame_equal(
  391:             crosstab(df.a, df.b, normalize=1),
  392:             crosstab(df.a, df.b, normalize="columns"),
  393:         )
  394:         tm.assert_frame_equal(
  395:             crosstab(df.a, df.b, normalize=0), crosstab(df.a, df.b, normalize="index")
  396:         )
  397: 
  398:         row_normal_margins = DataFrame(
  399:             [[1.0, 0], [0.25, 0.75], [0.4, 0.6]],
  400:             index=Index([1, 2, "All"], name="a", dtype="object"),
  401:             columns=Index([3, 4], name="b", dtype="object"),
  402:         )
  403:         col_normal_margins = DataFrame(
  404:             [[0.5, 0, 0.2], [0.5, 1.0, 0.8]],
  405:             index=Index([1, 2], name="a", dtype="object"),
  406:             columns=Index([3, 4, "All"], name="b", dtype="object"),
  407:         )
  408: 
  409:         all_normal_margins = DataFrame(
  410:             [[0.2, 0, 0.2], [0.2, 0.6, 0.8], [0.4, 0.6, 1]],
  411:             index=Index([1, 2, "All"], name="a", dtype="object"),
  412:             columns=Index([3, 4, "All"], name="b", dtype="object"),
  413:         )
  414:         tm.assert_frame_equal(
  415:             crosstab(df.a, df.b, normalize="index", margins=True), row_normal_margins
  416:         )
  417:         tm.assert_frame_equal(
  418:             crosstab(df.a, df.b, normalize="columns", margins=True), col_normal_margins
  419:         )
  420:         tm.assert_frame_equal(
  421:             crosstab(df.a, df.b, normalize=True, margins=True), all_normal_margins
  422:         )
  423: 
  424:     def test_crosstab_normalize_arrays(self):
  425:         # GH#12578
  426:         df = DataFrame(
  427:             {"a": [1, 2, 2, 2, 2], "b": [3, 3, 4, 4, 4], "c": [1, 1, np.nan, 1, 1]}
  428:         )
  429: 
  430:         # Test arrays
  431:         crosstab(
  432:             [np.array([1, 1, 2, 2]), np.array([1, 2, 1, 2])], np.array([1, 2, 1, 2])
  433:         )
  434: 
  435:         # Test with aggfunc
  436:         norm_counts = DataFrame(
  437:             [[0.25, 0, 0.25], [0.25, 0.5, 0.75], [0.5, 0.5, 1]],
  438:             index=Index([1, 2, "All"], name="a", dtype="object"),
  439:             columns=Index([3, 4, "All"], name="b"),
  440:         )
  441:         test_case = crosstab(
  442:             df.a, df.b, df.c, aggfunc="count", normalize="all", margins=True
  443:         )
  444:         tm.assert_frame_equal(test_case, norm_counts)
  445: 
  446:         df = DataFrame(
  447:             {"a": [1, 2, 2, 2, 2], "b": [3, 3, 4, 4, 4], "c": [0, 4, np.nan, 3, 3]}
  448:         )
  449: 
  450:         norm_sum = DataFrame(
  451:             [[0, 0, 0.0], [0.4, 0.6, 1], [0.4, 0.6, 1]],
  452:             index=Index([1, 2, "All"], name="a", dtype="object"),
  453:             columns=Index([3, 4, "All"], name="b", dtype="object"),
  454:         )
  455:         msg = "using DataFrameGroupBy.sum"
  456:         with tm.assert_produces_warning(FutureWarning, match=msg):
  457:             test_case = crosstab(
  458:                 df.a, df.b, df.c, aggfunc=np.sum, normalize="all", margins=True
  459:             )
  460:         tm.assert_frame_equal(test_case, norm_sum)
  461: 
  462:     def test_crosstab_with_empties(self, using_array_manager):
  463:         # Check handling of empties
  464:         df = DataFrame(
  465:             {
  466:                 "a": [1, 2, 2, 2, 2],
  467:                 "b": [3, 3, 4, 4, 4],
  468:                 "c": [np.nan, np.nan, np.nan, np.nan, np.nan],
  469:             }
  470:         )
  471: 
  472:         empty = DataFrame(
  473:             [[0.0, 0.0], [0.0, 0.0]],
  474:             index=Index([1, 2], name="a", dtype="int64"),
  475:             columns=Index([3, 4], name="b"),
  476:         )
  477: 
  478:         for i in [True, "index", "columns"]:
  479:             calculated = crosstab(df.a, df.b, values=df.c, aggfunc="count", normalize=i)
  480:             tm.assert_frame_equal(empty, calculated)
  481: 
  482:         nans = DataFrame(
  483:             [[0.0, np.nan], [0.0, 0.0]],
  484:             index=Index([1, 2], name="a", dtype="int64"),
  485:             columns=Index([3, 4], name="b"),
  486:         )
  487:         if using_array_manager:
  488:             # INFO(ArrayManager) column without NaNs can preserve int dtype
  489:             nans[3] = nans[3].astype("int64")
  490: 
  491:         calculated = crosstab(df.a, df.b, values=df.c, aggfunc="count", normalize=False)
  492:         tm.assert_frame_equal(nans, calculated)
  493: 
  494:     def test_crosstab_errors(self):
  495:         # Issue 12578
  496: 
  497:         df = DataFrame(
  498:             {"a": [1, 2, 2, 2, 2], "b": [3, 3, 4, 4, 4], "c": [1, 1, np.nan, 1, 1]}
  499:         )
  500: 
  501:         error = "values cannot be used without an aggfunc."
  502:         with pytest.raises(ValueError, match=error):
  503:             crosstab(df.a, df.b, values=df.c)
  504: 
  505:         error = "aggfunc cannot be used without values"
  506:         with pytest.raises(ValueError, match=error):
  507:             crosstab(df.a, df.b, aggfunc=np.mean)
  508: 
  509:         error = "Not a valid normalize argument"
  510:         with pytest.raises(ValueError, match=error):
  511:             crosstab(df.a, df.b, normalize="42")
  512: 
  513:         with pytest.raises(ValueError, match=error):
  514:             crosstab(df.a, df.b, normalize=42)
  515: 
  516:         error = "Not a valid margins argument"
  517:         with pytest.raises(ValueError, match=error):
  518:             crosstab(df.a, df.b, normalize="all", margins=42)
  519: 
  520:     def test_crosstab_with_categorial_columns(self):
  521:         # GH 8860
  522:         df = DataFrame(
  523:             {
  524:                 "MAKE": ["Honda", "Acura", "Tesla", "Honda", "Honda", "Acura"],
  525:                 "MODEL": ["Sedan", "Sedan", "Electric", "Pickup", "Sedan", "Sedan"],
  526:             }
  527:         )
  528:         categories = ["Sedan", "Electric", "Pickup"]
  529:         df["MODEL"] = df["MODEL"].astype("category").cat.set_categories(categories)
  530:         result = crosstab(df["MAKE"], df["MODEL"])
  531: 
  532:         expected_index = Index(["Acura", "Honda", "Tesla"], name="MAKE")
  533:         expected_columns = CategoricalIndex(
  534:             categories, categories=categories, ordered=False, name="MODEL"
  535:         )
  536:         expected_data = [[2, 0, 0], [2, 0, 1], [0, 1, 0]]
  537:         expected = DataFrame(
  538:             expected_data, index=expected_index, columns=expected_columns
  539:         )
  540:         tm.assert_frame_equal(result, expected)
  541: 
  542:     def test_crosstab_with_numpy_size(self):
  543:         # GH 4003
  544:         df = DataFrame(
  545:             {
  546:                 "A": ["one", "one", "two", "three"] * 6,
  547:                 "B": ["A", "B", "C"] * 8,
  548:                 "C": ["foo", "foo", "foo", "bar", "bar", "bar"] * 4,
  549:                 "D": np.random.default_rng(2).standard_normal(24),
  550:                 "E": np.random.default_rng(2).standard_normal(24),
  551:             }
  552:         )
  553:         result = crosstab(
  554:             index=[df["A"], df["B"]],
  555:             columns=[df["C"]],
  556:             margins=True,
  557:             aggfunc=np.size,
  558:             values=df["D"],
  559:         )
  560:         expected_index = MultiIndex(
  561:             levels=[["All", "one", "three", "two"], ["", "A", "B", "C"]],
  562:             codes=[[1, 1, 1, 2, 2, 2, 3, 3, 3, 0], [1, 2, 3, 1, 2, 3, 1, 2, 3, 0]],
  563:             names=["A", "B"],
  564:         )
  565:         expected_column = Index(["bar", "foo", "All"], name="C")
  566:         expected_data = np.array(
  567:             [
  568:                 [2.0, 2.0, 4.0],
  569:                 [2.0, 2.0, 4.0],
  570:                 [2.0, 2.0, 4.0],
  571:                 [2.0, np.nan, 2.0],
  572:                 [np.nan, 2.0, 2.0],
  573:                 [2.0, np.nan, 2.0],
  574:                 [np.nan, 2.0, 2.0],
  575:                 [2.0, np.nan, 2.0],
  576:                 [np.nan, 2.0, 2.0],
  577:                 [12.0, 12.0, 24.0],
  578:             ]
  579:         )
  580:         expected = DataFrame(
  581:             expected_data, index=expected_index, columns=expected_column
  582:         )
  583:         # aggfunc is np.size, resulting in integers
  584:         expected["All"] = expected["All"].astype("int64")
  585:         tm.assert_frame_equal(result, expected)
  586: 
  587:     def test_crosstab_duplicate_names(self):
  588:         # GH 13279 / 22529
  589: 
  590:         s1 = Series(range(3), name="foo")
  591:         s2_foo = Series(range(1, 4), name="foo")
  592:         s2_bar = Series(range(1, 4), name="bar")
  593:         s3 = Series(range(3), name="waldo")
  594: 
  595:         # check result computed with duplicate labels against
  596:         # result computed with unique labels, then relabelled
  597:         mapper = {"bar": "foo"}
  598: 
  599:         # duplicate row, column labels
  600:         result = crosstab(s1, s2_foo)
  601:         expected = crosstab(s1, s2_bar).rename_axis(columns=mapper, axis=1)
  602:         tm.assert_frame_equal(result, expected)
  603: 
  604:         # duplicate row, unique column labels
  605:         result = crosstab([s1, s2_foo], s3)
  606:         expected = crosstab([s1, s2_bar], s3).rename_axis(index=mapper, axis=0)
  607:         tm.assert_frame_equal(result, expected)
  608: 
  609:         # unique row, duplicate column labels
  610:         result = crosstab(s3, [s1, s2_foo])
  611:         expected = crosstab(s3, [s1, s2_bar]).rename_axis(columns=mapper, axis=1)
  612: 
  613:         tm.assert_frame_equal(result, expected)
  614: 
  615:     @pytest.mark.parametrize("names", [["a", ("b", "c")], [("a", "b"), "c"]])
  616:     def test_crosstab_tuple_name(self, names):
  617:         s1 = Series(range(3), name=names[0])
  618:         s2 = Series(range(1, 4), name=names[1])
  619: 
  620:         mi = MultiIndex.from_arrays([range(3), range(1, 4)], names=names)
  621:         expected = Series(1, index=mi).unstack(1, fill_value=0)
  622: 
  623:         result = crosstab(s1, s2)
  624:         tm.assert_frame_equal(result, expected)
  625: 
  626:     def test_crosstab_both_tuple_names(self):
  627:         # GH 18321
  628:         s1 = Series(range(3), name=("a", "b"))
  629:         s2 = Series(range(3), name=("c", "d"))
  630: 
  631:         expected = DataFrame(
  632:             np.eye(3, dtype="int64"),
  633:             index=Index(range(3), name=("a", "b")),
  634:             columns=Index(range(3), name=("c", "d")),
  635:         )
  636:         result = crosstab(s1, s2)
  637:         tm.assert_frame_equal(result, expected)
  638: 
  639:     def test_crosstab_unsorted_order(self):
  640:         df = DataFrame({"b": [3, 1, 2], "a": [5, 4, 6]}, index=["C", "A", "B"])
  641:         result = crosstab(df.index, [df.b, df.a])
  642:         e_idx = Index(["A", "B", "C"], name="row_0")
  643:         e_columns = MultiIndex.from_tuples([(1, 4), (2, 6), (3, 5)], names=["b", "a"])
  644:         expected = DataFrame(
  645:             [[1, 0, 0], [0, 1, 0], [0, 0, 1]], index=e_idx, columns=e_columns
  646:         )
  647:         tm.assert_frame_equal(result, expected)
  648: 
  649:     def test_crosstab_normalize_multiple_columns(self):
  650:         # GH 15150
  651:         df = DataFrame(
  652:             {
  653:                 "A": ["one", "one", "two", "three"] * 6,
  654:                 "B": ["A", "B", "C"] * 8,
  655:                 "C": ["foo", "foo", "foo", "bar", "bar", "bar"] * 4,
  656:                 "D": [0] * 24,
  657:                 "E": [0] * 24,
  658:             }
  659:         )
  660: 
  661:         msg = "using DataFrameGroupBy.sum"
  662:         with tm.assert_produces_warning(FutureWarning, match=msg):
  663:             result = crosstab(
  664:                 [df.A, df.B],
  665:                 df.C,
  666:                 values=df.D,
  667:                 aggfunc=np.sum,
  668:                 normalize=True,
  669:                 margins=True,
  670:             )
  671:         expected = DataFrame(
  672:             np.array([0] * 29 + [1], dtype=float).reshape(10, 3),
  673:             columns=Index(["bar", "foo", "All"], name="C"),
  674:             index=MultiIndex.from_tuples(
  675:                 [
  676:                     ("one", "A"),
  677:                     ("one", "B"),
  678:                     ("one", "C"),
  679:                     ("three", "A"),
  680:                     ("three", "B"),
  681:                     ("three", "C"),
  682:                     ("two", "A"),
  683:                     ("two", "B"),
  684:                     ("two", "C"),
  685:                     ("All", ""),
  686:                 ],
  687:                 names=["A", "B"],
  688:             ),
  689:         )
  690:         tm.assert_frame_equal(result, expected)
  691: 
  692:     def test_margin_normalize(self):
  693:         # GH 27500
  694:         df = DataFrame(
  695:             {
  696:                 "A": ["foo", "foo", "foo", "foo", "foo", "bar", "bar", "bar", "bar"],
  697:                 "B": ["one", "one", "one", "two", "two", "one", "one", "two", "two"],
  698:                 "C": [
  699:                     "small",
  700:                     "large",
  701:                     "large",
  702:                     "small",
  703:                     "small",
  704:                     "large",
  705:                     "small",
  706:                     "small",
  707:                     "large",
  708:                 ],
  709:                 "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
  710:                 "E": [2, 4, 5, 5, 6, 6, 8, 9, 9],
  711:             }
  712:         )
  713:         # normalize on index
  714:         result = crosstab(
  715:             [df.A, df.B], df.C, margins=True, margins_name="Sub-Total", normalize=0
  716:         )
  717:         expected = DataFrame(
  718:             [[0.5, 0.5], [0.5, 0.5], [0.666667, 0.333333], [0, 1], [0.444444, 0.555556]]
  719:         )
  720:         expected.index = MultiIndex(
  721:             levels=[["Sub-Total", "bar", "foo"], ["", "one", "two"]],
  722:             codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],
  723:             names=["A", "B"],
  724:         )
  725:         expected.columns = Index(["large", "small"], name="C")
  726:         tm.assert_frame_equal(result, expected)
  727: 
  728:         # normalize on columns
  729:         result = crosstab(
  730:             [df.A, df.B], df.C, margins=True, margins_name="Sub-Total", normalize=1
  731:         )
  732:         expected = DataFrame(
  733:             [
  734:                 [0.25, 0.2, 0.222222],
  735:                 [0.25, 0.2, 0.222222],
  736:                 [0.5, 0.2, 0.333333],
  737:                 [0, 0.4, 0.222222],
  738:             ]
  739:         )
  740:         expected.columns = Index(["large", "small", "Sub-Total"], name="C")
  741:         expected.index = MultiIndex(
  742:             levels=[["bar", "foo"], ["one", "two"]],
  743:             codes=[[0, 0, 1, 1], [0, 1, 0, 1]],
  744:             names=["A", "B"],
  745:         )
  746:         tm.assert_frame_equal(result, expected)
  747: 
  748:         # normalize on both index and column
  749:         result = crosstab(
  750:             [df.A, df.B], df.C, margins=True, margins_name="Sub-Total", normalize=True
  751:         )
  752:         expected = DataFrame(
  753:             [
  754:                 [0.111111, 0.111111, 0.222222],
  755:                 [0.111111, 0.111111, 0.222222],
  756:                 [0.222222, 0.111111, 0.333333],
  757:                 [0.000000, 0.222222, 0.222222],
  758:                 [0.444444, 0.555555, 1],
  759:             ]
  760:         )
  761:         expected.columns = Index(["large", "small", "Sub-Total"], name="C")
  762:         expected.index = MultiIndex(
  763:             levels=[["Sub-Total", "bar", "foo"], ["", "one", "two"]],
  764:             codes=[[1, 1, 2, 2, 0], [1, 2, 1, 2, 0]],
  765:             names=["A", "B"],
  766:         )
  767:         tm.assert_frame_equal(result, expected)
  768: 
  769:     def test_margin_normalize_multiple_columns(self):
  770:         # GH 35144
  771:         # use multiple columns with margins and normalization
  772:         df = DataFrame(
  773:             {
  774:                 "A": ["foo", "foo", "foo", "foo", "foo", "bar", "bar", "bar", "bar"],
  775:                 "B": ["one", "one", "one", "two", "two", "one", "one", "two", "two"],
  776:                 "C": [
  777:                     "small",
  778:                     "large",
  779:                     "large",
  780:                     "small",
  781:                     "small",
  782:                     "large",
  783:                     "small",
  784:                     "small",
  785:                     "large",
  786:                 ],
  787:                 "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],
  788:                 "E": [2, 4, 5, 5, 6, 6, 8, 9, 9],
  789:             }
  790:         )
  791:         result = crosstab(
  792:             index=df.C,
  793:             columns=[df.A, df.B],
  794:             margins=True,
  795:             margins_name="margin",
  796:             normalize=True,
  797:         )
  798:         expected = DataFrame(
  799:             [
  800:                 [0.111111, 0.111111, 0.222222, 0.000000, 0.444444],
  801:                 [0.111111, 0.111111, 0.111111, 0.222222, 0.555556],
  802:                 [0.222222, 0.222222, 0.333333, 0.222222, 1.0],
  803:             ],
  804:             index=["large", "small", "margin"],
  805:         )
  806:         expected.columns = MultiIndex(
  807:             levels=[["bar", "foo", "margin"], ["", "one", "two"]],
  808:             codes=[[0, 0, 1, 1, 2], [1, 2, 1, 2, 0]],
  809:             names=["A", "B"],
  810:         )
  811:         expected.index.name = "C"
  812:         tm.assert_frame_equal(result, expected)
  813: 
  814:     def test_margin_support_Float(self):
  815:         # GH 50313
  816:         # use Float64 formats and function aggfunc with margins
  817:         df = DataFrame(
  818:             {"A": [1, 2, 2, 1], "B": [3, 3, 4, 5], "C": [-1.0, 10.0, 1.0, 10.0]},
  819:             dtype="Float64",
  820:         )
  821:         result = crosstab(
  822:             df["A"],
  823:             df["B"],
  824:             values=df["C"],
  825:             aggfunc="sum",
  826:             margins=True,
  827:         )
  828:         expected = DataFrame(
  829:             [
  830:                 [-1.0, pd.NA, 10.0, 9.0],
  831:                 [10.0, 1.0, pd.NA, 11.0],
  832:                 [9.0, 1.0, 10.0, 20.0],
  833:             ],
  834:             index=Index([1.0, 2.0, "All"], dtype="object", name="A"),
  835:             columns=Index([3.0, 4.0, 5.0, "All"], dtype="object", name="B"),
  836:             dtype="Float64",
  837:         )
  838:         tm.assert_frame_equal(result, expected)
  839: 
  840:     def test_margin_with_ordered_categorical_column(self):
  841:         # GH 25278
  842:         df = DataFrame(
  843:             {
  844:                 "First": ["B", "B", "C", "A", "B", "C"],
  845:                 "Second": ["C", "B", "B", "B", "C", "A"],
  846:             }
  847:         )
  848:         df["First"] = df["First"].astype(CategoricalDtype(ordered=True))
  849:         customized_categories_order = ["C", "A", "B"]
  850:         df["First"] = df["First"].cat.reorder_categories(customized_categories_order)
  851:         result = crosstab(df["First"], df["Second"], margins=True)
  852: 
  853:         expected_index = Index(["C", "A", "B", "All"], name="First")
  854:         expected_columns = Index(["A", "B", "C", "All"], name="Second")
  855:         expected_data = [[1, 1, 0, 2], [0, 1, 0, 1], [0, 1, 2, 3], [1, 3, 2, 6]]
  856:         expected = DataFrame(
  857:             expected_data, index=expected_index, columns=expected_columns
  858:         )
  859:         tm.assert_frame_equal(result, expected)
  860: 
  861: 
  862: @pytest.mark.parametrize("a_dtype", ["category", "int64"])
  863: @pytest.mark.parametrize("b_dtype", ["category", "int64"])
  864: def test_categoricals(a_dtype, b_dtype):
  865:     # https://github.com/pandas-dev/pandas/issues/37465
  866:     g = np.random.default_rng(2)
  867:     a = Series(g.integers(0, 3, size=100)).astype(a_dtype)
  868:     b = Series(g.integers(0, 2, size=100)).astype(b_dtype)
  869:     result = crosstab(a, b, margins=True, dropna=False)
  870:     columns = Index([0, 1, "All"], dtype="object", name="col_0")
  871:     index = Index([0, 1, 2, "All"], dtype="object", name="row_0")
  872:     values = [[10, 18, 28], [23, 16, 39], [17, 16, 33], [50, 50, 100]]
  873:     expected = DataFrame(values, index, columns)
  874:     tm.assert_frame_equal(result, expected)
  875: 
  876:     # Verify when categorical does not have all values present
  877:     a.loc[a == 1] = 2
  878:     a_is_cat = isinstance(a.dtype, CategoricalDtype)
  879:     assert not a_is_cat or a.value_counts().loc[1] == 0
  880:     result = crosstab(a, b, margins=True, dropna=False)
  881:     values = [[10, 18, 28], [0, 0, 0], [40, 32, 72], [50, 50, 100]]
  882:     expected = DataFrame(values, index, columns)
  883:     if not a_is_cat:
  884:         expected = expected.loc[[0, 2, "All"]]
  885:         expected["All"] = expected["All"].astype("int64")
  886:     tm.assert_frame_equal(result, expected)
