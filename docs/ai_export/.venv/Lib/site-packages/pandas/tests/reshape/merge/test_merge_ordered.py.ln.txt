    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     DataFrame,
    9:     merge_ordered,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: @pytest.fixture
   15: def left():
   16:     return DataFrame({"key": ["a", "c", "e"], "lvalue": [1, 2.0, 3]})
   17: 
   18: 
   19: @pytest.fixture
   20: def right():
   21:     return DataFrame({"key": ["b", "c", "d", "f"], "rvalue": [1, 2, 3.0, 4]})
   22: 
   23: 
   24: class TestMergeOrdered:
   25:     def test_basic(self, left, right):
   26:         result = merge_ordered(left, right, on="key")
   27:         expected = DataFrame(
   28:             {
   29:                 "key": ["a", "b", "c", "d", "e", "f"],
   30:                 "lvalue": [1, np.nan, 2, np.nan, 3, np.nan],
   31:                 "rvalue": [np.nan, 1, 2, 3, np.nan, 4],
   32:             }
   33:         )
   34: 
   35:         tm.assert_frame_equal(result, expected)
   36: 
   37:     def test_ffill(self, left, right):
   38:         result = merge_ordered(left, right, on="key", fill_method="ffill")
   39:         expected = DataFrame(
   40:             {
   41:                 "key": ["a", "b", "c", "d", "e", "f"],
   42:                 "lvalue": [1.0, 1, 2, 2, 3, 3.0],
   43:                 "rvalue": [np.nan, 1, 2, 3, 3, 4],
   44:             }
   45:         )
   46:         tm.assert_frame_equal(result, expected)
   47: 
   48:     def test_multigroup(self, left, right):
   49:         left = pd.concat([left, left], ignore_index=True)
   50: 
   51:         left["group"] = ["a"] * 3 + ["b"] * 3
   52: 
   53:         result = merge_ordered(
   54:             left, right, on="key", left_by="group", fill_method="ffill"
   55:         )
   56:         expected = DataFrame(
   57:             {
   58:                 "key": ["a", "b", "c", "d", "e", "f"] * 2,
   59:                 "lvalue": [1.0, 1, 2, 2, 3, 3.0] * 2,
   60:                 "rvalue": [np.nan, 1, 2, 3, 3, 4] * 2,
   61:             }
   62:         )
   63:         expected["group"] = ["a"] * 6 + ["b"] * 6
   64: 
   65:         tm.assert_frame_equal(result, expected.loc[:, result.columns])
   66: 
   67:         result2 = merge_ordered(
   68:             right, left, on="key", right_by="group", fill_method="ffill"
   69:         )
   70:         tm.assert_frame_equal(result, result2.loc[:, result.columns])
   71: 
   72:         result = merge_ordered(left, right, on="key", left_by="group")
   73:         assert result["group"].notna().all()
   74: 
   75:     @pytest.mark.filterwarnings(
   76:         "ignore:Passing a BlockManager|Passing a SingleBlockManager:DeprecationWarning"
   77:     )
   78:     def test_merge_type(self, left, right):
   79:         class NotADataFrame(DataFrame):
   80:             @property
   81:             def _constructor(self):
   82:                 return NotADataFrame
   83: 
   84:         nad = NotADataFrame(left)
   85:         result = nad.merge(right, on="key")
   86: 
   87:         assert isinstance(result, NotADataFrame)
   88: 
   89:     @pytest.mark.parametrize(
   90:         "df_seq, pattern",
   91:         [
   92:             ((), "[Nn]o objects"),
   93:             ([], "[Nn]o objects"),
   94:             ({}, "[Nn]o objects"),
   95:             ([None], "objects.*None"),
   96:             ([None, None], "objects.*None"),
   97:         ],
   98:     )
   99:     def test_empty_sequence_concat(self, df_seq, pattern):
  100:         # GH 9157
  101:         with pytest.raises(ValueError, match=pattern):
  102:             pd.concat(df_seq)
  103: 
  104:     @pytest.mark.parametrize(
  105:         "arg", [[DataFrame()], [None, DataFrame()], [DataFrame(), None]]
  106:     )
  107:     def test_empty_sequence_concat_ok(self, arg):
  108:         pd.concat(arg)
  109: 
  110:     def test_doc_example(self):
  111:         left = DataFrame(
  112:             {
  113:                 "group": list("aaabbb"),
  114:                 "key": ["a", "c", "e", "a", "c", "e"],
  115:                 "lvalue": [1, 2, 3] * 2,
  116:             }
  117:         )
  118: 
  119:         right = DataFrame({"key": ["b", "c", "d"], "rvalue": [1, 2, 3]})
  120: 
  121:         result = merge_ordered(left, right, fill_method="ffill", left_by="group")
  122: 
  123:         expected = DataFrame(
  124:             {
  125:                 "group": list("aaaaabbbbb"),
  126:                 "key": ["a", "b", "c", "d", "e"] * 2,
  127:                 "lvalue": [1, 1, 2, 2, 3] * 2,
  128:                 "rvalue": [np.nan, 1, 2, 3, 3] * 2,
  129:             }
  130:         )
  131: 
  132:         tm.assert_frame_equal(result, expected)
  133: 
  134:     @pytest.mark.parametrize(
  135:         "left, right, on, left_by, right_by, expected",
  136:         [
  137:             (
  138:                 DataFrame({"G": ["g", "g"], "H": ["h", "h"], "T": [1, 3]}),
  139:                 DataFrame({"T": [2], "E": [1]}),
  140:                 ["T"],
  141:                 ["G", "H"],
  142:                 None,
  143:                 DataFrame(
  144:                     {
  145:                         "G": ["g"] * 3,
  146:                         "H": ["h"] * 3,
  147:                         "T": [1, 2, 3],
  148:                         "E": [np.nan, 1.0, np.nan],
  149:                     }
  150:                 ),
  151:             ),
  152:             (
  153:                 DataFrame({"G": ["g", "g"], "H": ["h", "h"], "T": [1, 3]}),
  154:                 DataFrame({"T": [2], "E": [1]}),
  155:                 "T",
  156:                 ["G", "H"],
  157:                 None,
  158:                 DataFrame(
  159:                     {
  160:                         "G": ["g"] * 3,
  161:                         "H": ["h"] * 3,
  162:                         "T": [1, 2, 3],
  163:                         "E": [np.nan, 1.0, np.nan],
  164:                     }
  165:                 ),
  166:             ),
  167:             (
  168:                 DataFrame({"T": [2], "E": [1]}),
  169:                 DataFrame({"G": ["g", "g"], "H": ["h", "h"], "T": [1, 3]}),
  170:                 ["T"],
  171:                 None,
  172:                 ["G", "H"],
  173:                 DataFrame(
  174:                     {
  175:                         "T": [1, 2, 3],
  176:                         "E": [np.nan, 1.0, np.nan],
  177:                         "G": ["g"] * 3,
  178:                         "H": ["h"] * 3,
  179:                     }
  180:                 ),
  181:             ),
  182:         ],
  183:     )
  184:     def test_list_type_by(self, left, right, on, left_by, right_by, expected):
  185:         # GH 35269
  186:         result = merge_ordered(
  187:             left=left,
  188:             right=right,
  189:             on=on,
  190:             left_by=left_by,
  191:             right_by=right_by,
  192:         )
  193: 
  194:         tm.assert_frame_equal(result, expected)
  195: 
  196:     def test_left_by_length_equals_to_right_shape0(self):
  197:         # GH 38166
  198:         left = DataFrame([["g", "h", 1], ["g", "h", 3]], columns=list("GHE"))
  199:         right = DataFrame([[2, 1]], columns=list("ET"))
  200:         result = merge_ordered(left, right, on="E", left_by=["G", "H"])
  201:         expected = DataFrame(
  202:             {"G": ["g"] * 3, "H": ["h"] * 3, "E": [1, 2, 3], "T": [np.nan, 1.0, np.nan]}
  203:         )
  204: 
  205:         tm.assert_frame_equal(result, expected)
  206: 
  207:     def test_elements_not_in_by_but_in_df(self):
  208:         # GH 38167
  209:         left = DataFrame([["g", "h", 1], ["g", "h", 3]], columns=list("GHE"))
  210:         right = DataFrame([[2, 1]], columns=list("ET"))
  211:         msg = r"\{'h'\} not found in left columns"
  212:         with pytest.raises(KeyError, match=msg):
  213:             merge_ordered(left, right, on="E", left_by=["G", "h"])
  214: 
  215:     @pytest.mark.parametrize("invalid_method", ["linear", "carrot"])
  216:     def test_ffill_validate_fill_method(self, left, right, invalid_method):
  217:         # GH 55884
  218:         with pytest.raises(
  219:             ValueError, match=re.escape("fill_method must be 'ffill' or None")
  220:         ):
  221:             merge_ordered(left, right, on="key", fill_method=invalid_method)
  222: 
  223:     def test_ffill_left_merge(self):
  224:         # GH 57010
  225:         df1 = DataFrame(
  226:             {
  227:                 "key": ["a", "c", "e", "a", "c", "e"],
  228:                 "lvalue": [1, 2, 3, 1, 2, 3],
  229:                 "group": ["a", "a", "a", "b", "b", "b"],
  230:             }
  231:         )
  232:         df2 = DataFrame({"key": ["b", "c", "d"], "rvalue": [1, 2, 3]})
  233:         result = merge_ordered(
  234:             df1, df2, fill_method="ffill", left_by="group", how="left"
  235:         )
  236:         expected = DataFrame(
  237:             {
  238:                 "key": ["a", "c", "e", "a", "c", "e"],
  239:                 "lvalue": [1, 2, 3, 1, 2, 3],
  240:                 "group": ["a", "a", "a", "b", "b", "b"],
  241:                 "rvalue": [np.nan, 2.0, 2.0, np.nan, 2.0, 2.0],
  242:             }
  243:         )
  244:         tm.assert_frame_equal(result, expected)
