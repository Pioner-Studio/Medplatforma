    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import DataFrame
    6: import pandas._testing as tm
    7: 
    8: 
    9: class TestConcatSort:
   10:     def test_concat_sorts_columns(self, sort):
   11:         # GH-4588
   12:         df1 = DataFrame({"a": [1, 2], "b": [1, 2]}, columns=["b", "a"])
   13:         df2 = DataFrame({"a": [3, 4], "c": [5, 6]})
   14: 
   15:         # for sort=True/None
   16:         expected = DataFrame(
   17:             {"a": [1, 2, 3, 4], "b": [1, 2, None, None], "c": [None, None, 5, 6]},
   18:             columns=["a", "b", "c"],
   19:         )
   20: 
   21:         if sort is False:
   22:             expected = expected[["b", "a", "c"]]
   23: 
   24:         # default
   25:         with tm.assert_produces_warning(None):
   26:             result = pd.concat([df1, df2], ignore_index=True, sort=sort)
   27:         tm.assert_frame_equal(result, expected)
   28: 
   29:     def test_concat_sorts_index(self, sort):
   30:         df1 = DataFrame({"a": [1, 2, 3]}, index=["c", "a", "b"])
   31:         df2 = DataFrame({"b": [1, 2]}, index=["a", "b"])
   32: 
   33:         # For True/None
   34:         expected = DataFrame(
   35:             {"a": [2, 3, 1], "b": [1, 2, None]},
   36:             index=["a", "b", "c"],
   37:             columns=["a", "b"],
   38:         )
   39:         if sort is False:
   40:             expected = expected.loc[["c", "a", "b"]]
   41: 
   42:         # Warn and sort by default
   43:         with tm.assert_produces_warning(None):
   44:             result = pd.concat([df1, df2], axis=1, sort=sort)
   45:         tm.assert_frame_equal(result, expected)
   46: 
   47:     def test_concat_inner_sort(self, sort):
   48:         # https://github.com/pandas-dev/pandas/pull/20613
   49:         df1 = DataFrame(
   50:             {"a": [1, 2], "b": [1, 2], "c": [1, 2]}, columns=["b", "a", "c"]
   51:         )
   52:         df2 = DataFrame({"a": [1, 2], "b": [3, 4]}, index=[3, 4])
   53: 
   54:         with tm.assert_produces_warning(None):
   55:             # unset sort should *not* warn for inner join
   56:             # since that never sorted
   57:             result = pd.concat([df1, df2], sort=sort, join="inner", ignore_index=True)
   58: 
   59:         expected = DataFrame({"b": [1, 2, 3, 4], "a": [1, 2, 1, 2]}, columns=["b", "a"])
   60:         if sort is True:
   61:             expected = expected[["a", "b"]]
   62:         tm.assert_frame_equal(result, expected)
   63: 
   64:     def test_concat_aligned_sort(self):
   65:         # GH-4588
   66:         df = DataFrame({"c": [1, 2], "b": [3, 4], "a": [5, 6]}, columns=["c", "b", "a"])
   67:         result = pd.concat([df, df], sort=True, ignore_index=True)
   68:         expected = DataFrame(
   69:             {"a": [5, 6, 5, 6], "b": [3, 4, 3, 4], "c": [1, 2, 1, 2]},
   70:             columns=["a", "b", "c"],
   71:         )
   72:         tm.assert_frame_equal(result, expected)
   73: 
   74:         result = pd.concat(
   75:             [df, df[["c", "b"]]], join="inner", sort=True, ignore_index=True
   76:         )
   77:         expected = expected[["b", "c"]]
   78:         tm.assert_frame_equal(result, expected)
   79: 
   80:     def test_concat_aligned_sort_does_not_raise(self):
   81:         # GH-4588
   82:         # We catch TypeErrors from sorting internally and do not re-raise.
   83:         df = DataFrame({1: [1, 2], "a": [3, 4]}, columns=[1, "a"])
   84:         expected = DataFrame({1: [1, 2, 1, 2], "a": [3, 4, 3, 4]}, columns=[1, "a"])
   85:         result = pd.concat([df, df], ignore_index=True, sort=True)
   86:         tm.assert_frame_equal(result, expected)
   87: 
   88:     def test_concat_frame_with_sort_false(self):
   89:         # GH 43375
   90:         result = pd.concat(
   91:             [DataFrame({i: i}, index=[i]) for i in range(2, 0, -1)], sort=False
   92:         )
   93:         expected = DataFrame([[2, np.nan], [np.nan, 1]], index=[2, 1], columns=[2, 1])
   94: 
   95:         tm.assert_frame_equal(result, expected)
   96: 
   97:         # GH 37937
   98:         df1 = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]}, index=[1, 2, 3])
   99:         df2 = DataFrame({"c": [7, 8, 9], "d": [10, 11, 12]}, index=[3, 1, 6])
  100:         result = pd.concat([df2, df1], axis=1, sort=False)
  101:         expected = DataFrame(
  102:             [
  103:                 [7.0, 10.0, 3.0, 6.0],
  104:                 [8.0, 11.0, 1.0, 4.0],
  105:                 [9.0, 12.0, np.nan, np.nan],
  106:                 [np.nan, np.nan, 2.0, 5.0],
  107:             ],
  108:             index=[3, 1, 6, 2],
  109:             columns=["c", "d", "a", "b"],
  110:         )
  111:         tm.assert_frame_equal(result, expected)
  112: 
  113:     def test_concat_sort_none_raises(self):
  114:         # GH#41518
  115:         df = DataFrame({1: [1, 2], "a": [3, 4]})
  116:         msg = "The 'sort' keyword only accepts boolean values; None was passed."
  117:         with pytest.raises(ValueError, match=msg):
  118:             pd.concat([df, df], sort=None)
