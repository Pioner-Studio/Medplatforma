    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import DataFrame
    5: import pandas._testing as tm
    6: 
    7: 
    8: @pytest.fixture
    9: def df1():
   10:     return DataFrame(
   11:         {
   12:             "outer": [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4],
   13:             "inner": [1, 2, 3, 1, 2, 3, 4, 1, 2, 1, 2],
   14:             "v1": np.linspace(0, 1, 11),
   15:         }
   16:     )
   17: 
   18: 
   19: @pytest.fixture
   20: def df2():
   21:     return DataFrame(
   22:         {
   23:             "outer": [1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3],
   24:             "inner": [1, 2, 2, 3, 3, 4, 2, 3, 1, 1, 2, 3],
   25:             "v2": np.linspace(10, 11, 12),
   26:         }
   27:     )
   28: 
   29: 
   30: @pytest.fixture(params=[[], ["outer"], ["outer", "inner"]])
   31: def left_df(request, df1):
   32:     """Construct left test DataFrame with specified levels
   33:     (any of 'outer', 'inner', and 'v1')
   34:     """
   35:     levels = request.param
   36:     if levels:
   37:         df1 = df1.set_index(levels)
   38: 
   39:     return df1
   40: 
   41: 
   42: @pytest.fixture(params=[[], ["outer"], ["outer", "inner"]])
   43: def right_df(request, df2):
   44:     """Construct right test DataFrame with specified levels
   45:     (any of 'outer', 'inner', and 'v2')
   46:     """
   47:     levels = request.param
   48: 
   49:     if levels:
   50:         df2 = df2.set_index(levels)
   51: 
   52:     return df2
   53: 
   54: 
   55: def compute_expected(df_left, df_right, on=None, left_on=None, right_on=None, how=None):
   56:     """
   57:     Compute the expected merge result for the test case.
   58: 
   59:     This method computes the expected result of merging two DataFrames on
   60:     a combination of their columns and index levels. It does so by
   61:     explicitly dropping/resetting their named index levels, performing a
   62:     merge on their columns, and then finally restoring the appropriate
   63:     index in the result.
   64: 
   65:     Parameters
   66:     ----------
   67:     df_left : DataFrame
   68:         The left DataFrame (may have zero or more named index levels)
   69:     df_right : DataFrame
   70:         The right DataFrame (may have zero or more named index levels)
   71:     on : list of str
   72:         The on parameter to the merge operation
   73:     left_on : list of str
   74:         The left_on parameter to the merge operation
   75:     right_on : list of str
   76:         The right_on parameter to the merge operation
   77:     how : str
   78:         The how parameter to the merge operation
   79: 
   80:     Returns
   81:     -------
   82:     DataFrame
   83:         The expected merge result
   84:     """
   85:     # Handle on param if specified
   86:     if on is not None:
   87:         left_on, right_on = on, on
   88: 
   89:     # Compute input named index levels
   90:     left_levels = [n for n in df_left.index.names if n is not None]
   91:     right_levels = [n for n in df_right.index.names if n is not None]
   92: 
   93:     # Compute output named index levels
   94:     output_levels = [i for i in left_on if i in right_levels and i in left_levels]
   95: 
   96:     # Drop index levels that aren't involved in the merge
   97:     drop_left = [n for n in left_levels if n not in left_on]
   98:     if drop_left:
   99:         df_left = df_left.reset_index(drop_left, drop=True)
  100: 
  101:     drop_right = [n for n in right_levels if n not in right_on]
  102:     if drop_right:
  103:         df_right = df_right.reset_index(drop_right, drop=True)
  104: 
  105:     # Convert remaining index levels to columns
  106:     reset_left = [n for n in left_levels if n in left_on]
  107:     if reset_left:
  108:         df_left = df_left.reset_index(level=reset_left)
  109: 
  110:     reset_right = [n for n in right_levels if n in right_on]
  111:     if reset_right:
  112:         df_right = df_right.reset_index(level=reset_right)
  113: 
  114:     # Perform merge
  115:     expected = df_left.merge(df_right, left_on=left_on, right_on=right_on, how=how)
  116: 
  117:     # Restore index levels
  118:     if output_levels:
  119:         expected = expected.set_index(output_levels)
  120: 
  121:     return expected
  122: 
  123: 
  124: @pytest.mark.parametrize(
  125:     "on,how",
  126:     [
  127:         (["outer"], "inner"),
  128:         (["inner"], "left"),
  129:         (["outer", "inner"], "right"),
  130:         (["inner", "outer"], "outer"),
  131:     ],
  132: )
  133: def test_merge_indexes_and_columns_on(left_df, right_df, on, how):
  134:     # Construct expected result
  135:     expected = compute_expected(left_df, right_df, on=on, how=how)
  136: 
  137:     # Perform merge
  138:     result = left_df.merge(right_df, on=on, how=how)
  139:     tm.assert_frame_equal(result, expected, check_like=True)
  140: 
  141: 
  142: @pytest.mark.parametrize(
  143:     "left_on,right_on,how",
  144:     [
  145:         (["outer"], ["outer"], "inner"),
  146:         (["inner"], ["inner"], "right"),
  147:         (["outer", "inner"], ["outer", "inner"], "left"),
  148:         (["inner", "outer"], ["inner", "outer"], "outer"),
  149:     ],
  150: )
  151: def test_merge_indexes_and_columns_lefton_righton(
  152:     left_df, right_df, left_on, right_on, how
  153: ):
  154:     # Construct expected result
  155:     expected = compute_expected(
  156:         left_df, right_df, left_on=left_on, right_on=right_on, how=how
  157:     )
  158: 
  159:     # Perform merge
  160:     result = left_df.merge(right_df, left_on=left_on, right_on=right_on, how=how)
  161:     tm.assert_frame_equal(result, expected, check_like=True)
  162: 
  163: 
  164: @pytest.mark.parametrize("left_index", ["inner", ["inner", "outer"]])
  165: def test_join_indexes_and_columns_on(df1, df2, left_index, join_type):
  166:     # Construct left_df
  167:     left_df = df1.set_index(left_index)
  168: 
  169:     # Construct right_df
  170:     right_df = df2.set_index(["outer", "inner"])
  171: 
  172:     # Result
  173:     expected = (
  174:         left_df.reset_index()
  175:         .join(
  176:             right_df, on=["outer", "inner"], how=join_type, lsuffix="_x", rsuffix="_y"
  177:         )
  178:         .set_index(left_index)
  179:     )
  180: 
  181:     # Perform join
  182:     result = left_df.join(
  183:         right_df, on=["outer", "inner"], how=join_type, lsuffix="_x", rsuffix="_y"
  184:     )
  185: 
  186:     tm.assert_frame_equal(result, expected, check_like=True)
