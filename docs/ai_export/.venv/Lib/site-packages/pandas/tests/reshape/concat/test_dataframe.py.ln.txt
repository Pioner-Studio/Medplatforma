    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Index,
    8:     Series,
    9:     concat,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestDataFrameConcat:
   15:     def test_concat_multiple_frames_dtypes(self):
   16:         # GH#2759
   17:         df1 = DataFrame(data=np.ones((10, 2)), columns=["foo", "bar"], dtype=np.float64)
   18:         df2 = DataFrame(data=np.ones((10, 2)), dtype=np.float32)
   19:         results = concat((df1, df2), axis=1).dtypes
   20:         expected = Series(
   21:             [np.dtype("float64")] * 2 + [np.dtype("float32")] * 2,
   22:             index=["foo", "bar", 0, 1],
   23:         )
   24:         tm.assert_series_equal(results, expected)
   25: 
   26:     def test_concat_tuple_keys(self):
   27:         # GH#14438
   28:         df1 = DataFrame(np.ones((2, 2)), columns=list("AB"))
   29:         df2 = DataFrame(np.ones((3, 2)) * 2, columns=list("AB"))
   30:         results = concat((df1, df2), keys=[("bee", "bah"), ("bee", "boo")])
   31:         expected = DataFrame(
   32:             {
   33:                 "A": {
   34:                     ("bee", "bah", 0): 1.0,
   35:                     ("bee", "bah", 1): 1.0,
   36:                     ("bee", "boo", 0): 2.0,
   37:                     ("bee", "boo", 1): 2.0,
   38:                     ("bee", "boo", 2): 2.0,
   39:                 },
   40:                 "B": {
   41:                     ("bee", "bah", 0): 1.0,
   42:                     ("bee", "bah", 1): 1.0,
   43:                     ("bee", "boo", 0): 2.0,
   44:                     ("bee", "boo", 1): 2.0,
   45:                     ("bee", "boo", 2): 2.0,
   46:                 },
   47:             }
   48:         )
   49:         tm.assert_frame_equal(results, expected)
   50: 
   51:     def test_concat_named_keys(self):
   52:         # GH#14252
   53:         df = DataFrame({"foo": [1, 2], "bar": [0.1, 0.2]})
   54:         index = Index(["a", "b"], name="baz")
   55:         concatted_named_from_keys = concat([df, df], keys=index)
   56:         expected_named = DataFrame(
   57:             {"foo": [1, 2, 1, 2], "bar": [0.1, 0.2, 0.1, 0.2]},
   58:             index=pd.MultiIndex.from_product((["a", "b"], [0, 1]), names=["baz", None]),
   59:         )
   60:         tm.assert_frame_equal(concatted_named_from_keys, expected_named)
   61: 
   62:         index_no_name = Index(["a", "b"], name=None)
   63:         concatted_named_from_names = concat([df, df], keys=index_no_name, names=["baz"])
   64:         tm.assert_frame_equal(concatted_named_from_names, expected_named)
   65: 
   66:         concatted_unnamed = concat([df, df], keys=index_no_name)
   67:         expected_unnamed = DataFrame(
   68:             {"foo": [1, 2, 1, 2], "bar": [0.1, 0.2, 0.1, 0.2]},
   69:             index=pd.MultiIndex.from_product((["a", "b"], [0, 1]), names=[None, None]),
   70:         )
   71:         tm.assert_frame_equal(concatted_unnamed, expected_unnamed)
   72: 
   73:     def test_concat_axis_parameter(self):
   74:         # GH#14369
   75:         df1 = DataFrame({"A": [0.1, 0.2]}, index=range(2))
   76:         df2 = DataFrame({"A": [0.3, 0.4]}, index=range(2))
   77: 
   78:         # Index/row/0 DataFrame
   79:         expected_index = DataFrame({"A": [0.1, 0.2, 0.3, 0.4]}, index=[0, 1, 0, 1])
   80: 
   81:         concatted_index = concat([df1, df2], axis="index")
   82:         tm.assert_frame_equal(concatted_index, expected_index)
   83: 
   84:         concatted_row = concat([df1, df2], axis="rows")
   85:         tm.assert_frame_equal(concatted_row, expected_index)
   86: 
   87:         concatted_0 = concat([df1, df2], axis=0)
   88:         tm.assert_frame_equal(concatted_0, expected_index)
   89: 
   90:         # Columns/1 DataFrame
   91:         expected_columns = DataFrame(
   92:             [[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=["A", "A"]
   93:         )
   94: 
   95:         concatted_columns = concat([df1, df2], axis="columns")
   96:         tm.assert_frame_equal(concatted_columns, expected_columns)
   97: 
   98:         concatted_1 = concat([df1, df2], axis=1)
   99:         tm.assert_frame_equal(concatted_1, expected_columns)
  100: 
  101:         series1 = Series([0.1, 0.2])
  102:         series2 = Series([0.3, 0.4])
  103: 
  104:         # Index/row/0 Series
  105:         expected_index_series = Series([0.1, 0.2, 0.3, 0.4], index=[0, 1, 0, 1])
  106: 
  107:         concatted_index_series = concat([series1, series2], axis="index")
  108:         tm.assert_series_equal(concatted_index_series, expected_index_series)
  109: 
  110:         concatted_row_series = concat([series1, series2], axis="rows")
  111:         tm.assert_series_equal(concatted_row_series, expected_index_series)
  112: 
  113:         concatted_0_series = concat([series1, series2], axis=0)
  114:         tm.assert_series_equal(concatted_0_series, expected_index_series)
  115: 
  116:         # Columns/1 Series
  117:         expected_columns_series = DataFrame(
  118:             [[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=[0, 1]
  119:         )
  120: 
  121:         concatted_columns_series = concat([series1, series2], axis="columns")
  122:         tm.assert_frame_equal(concatted_columns_series, expected_columns_series)
  123: 
  124:         concatted_1_series = concat([series1, series2], axis=1)
  125:         tm.assert_frame_equal(concatted_1_series, expected_columns_series)
  126: 
  127:         # Testing ValueError
  128:         with pytest.raises(ValueError, match="No axis named"):
  129:             concat([series1, series2], axis="something")
  130: 
  131:     def test_concat_numerical_names(self):
  132:         # GH#15262, GH#12223
  133:         df = DataFrame(
  134:             {"col": range(9)},
  135:             dtype="int32",
  136:             index=(
  137:                 pd.MultiIndex.from_product(
  138:                     [["A0", "A1", "A2"], ["B0", "B1", "B2"]], names=[1, 2]
  139:                 )
  140:             ),
  141:         )
  142:         result = concat((df.iloc[:2, :], df.iloc[-2:, :]))
  143:         expected = DataFrame(
  144:             {"col": [0, 1, 7, 8]},
  145:             dtype="int32",
  146:             index=pd.MultiIndex.from_tuples(
  147:                 [("A0", "B0"), ("A0", "B1"), ("A2", "B1"), ("A2", "B2")], names=[1, 2]
  148:             ),
  149:         )
  150:         tm.assert_frame_equal(result, expected)
  151: 
  152:     def test_concat_astype_dup_col(self):
  153:         # GH#23049
  154:         df = DataFrame([{"a": "b"}])
  155:         df = concat([df, df], axis=1)
  156: 
  157:         result = df.astype("category")
  158:         expected = DataFrame(
  159:             np.array(["b", "b"]).reshape(1, 2), columns=["a", "a"]
  160:         ).astype("category")
  161:         tm.assert_frame_equal(result, expected)
  162: 
  163:     def test_concat_dataframe_keys_bug(self, sort):
  164:         t1 = DataFrame(
  165:             {"value": Series([1, 2, 3], index=Index(["a", "b", "c"], name="id"))}
  166:         )
  167:         t2 = DataFrame({"value": Series([7, 8], index=Index(["a", "b"], name="id"))})
  168: 
  169:         # it works
  170:         result = concat([t1, t2], axis=1, keys=["t1", "t2"], sort=sort)
  171:         assert list(result.columns) == [("t1", "value"), ("t2", "value")]
  172: 
  173:     def test_concat_bool_with_int(self):
  174:         # GH#42092 we may want to change this to return object, but that
  175:         #  would need a deprecation
  176:         df1 = DataFrame(Series([True, False, True, True], dtype="bool"))
  177:         df2 = DataFrame(Series([1, 0, 1], dtype="int64"))
  178: 
  179:         result = concat([df1, df2])
  180:         expected = concat([df1.astype("int64"), df2])
  181:         tm.assert_frame_equal(result, expected)
  182: 
  183:     def test_concat_duplicates_in_index_with_keys(self):
  184:         # GH#42651
  185:         index = [1, 1, 3]
  186:         data = [1, 2, 3]
  187: 
  188:         df = DataFrame(data=data, index=index)
  189:         result = concat([df], keys=["A"], names=["ID", "date"])
  190:         mi = pd.MultiIndex.from_product([["A"], index], names=["ID", "date"])
  191:         expected = DataFrame(data=data, index=mi)
  192:         tm.assert_frame_equal(result, expected)
  193:         tm.assert_index_equal(result.index.levels[1], Index([1, 3], name="date"))
  194: 
  195:     @pytest.mark.parametrize("ignore_index", [True, False])
  196:     @pytest.mark.parametrize("order", ["C", "F"])
  197:     @pytest.mark.parametrize("axis", [0, 1])
  198:     def test_concat_copies(self, axis, order, ignore_index, using_copy_on_write):
  199:         # based on asv ConcatDataFrames
  200:         df = DataFrame(np.zeros((10, 5), dtype=np.float32, order=order))
  201: 
  202:         res = concat([df] * 5, axis=axis, ignore_index=ignore_index, copy=True)
  203: 
  204:         if not using_copy_on_write:
  205:             for arr in res._iter_column_arrays():
  206:                 for arr2 in df._iter_column_arrays():
  207:                     assert not np.shares_memory(arr, arr2)
  208: 
  209:     def test_outer_sort_columns(self):
  210:         # GH#47127
  211:         df1 = DataFrame({"A": [0], "B": [1], 0: 1})
  212:         df2 = DataFrame({"A": [100]})
  213:         result = concat([df1, df2], ignore_index=True, join="outer", sort=True)
  214:         expected = DataFrame({0: [1.0, np.nan], "A": [0, 100], "B": [1.0, np.nan]})
  215:         tm.assert_frame_equal(result, expected)
  216: 
  217:     def test_inner_sort_columns(self):
  218:         # GH#47127
  219:         df1 = DataFrame({"A": [0], "B": [1], 0: 1})
  220:         df2 = DataFrame({"A": [100], 0: 2})
  221:         result = concat([df1, df2], ignore_index=True, join="inner", sort=True)
  222:         expected = DataFrame({0: [1, 2], "A": [0, 100]})
  223:         tm.assert_frame_equal(result, expected)
  224: 
  225:     def test_sort_columns_one_df(self):
  226:         # GH#47127
  227:         df1 = DataFrame({"A": [100], 0: 2})
  228:         result = concat([df1], ignore_index=True, join="inner", sort=True)
  229:         expected = DataFrame({0: [2], "A": [100]})
  230:         tm.assert_frame_equal(result, expected)
