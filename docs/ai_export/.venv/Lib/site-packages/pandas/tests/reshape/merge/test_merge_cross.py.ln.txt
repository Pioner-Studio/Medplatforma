    1: import pytest
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Series,
    6: )
    7: import pandas._testing as tm
    8: from pandas.core.reshape.merge import (
    9:     MergeError,
   10:     merge,
   11: )
   12: 
   13: 
   14: @pytest.mark.parametrize(
   15:     ("input_col", "output_cols"), [("b", ["a", "b"]), ("a", ["a_x", "a_y"])]
   16: )
   17: def test_merge_cross(input_col, output_cols):
   18:     # GH#5401
   19:     left = DataFrame({"a": [1, 3]})
   20:     right = DataFrame({input_col: [3, 4]})
   21:     left_copy = left.copy()
   22:     right_copy = right.copy()
   23:     result = merge(left, right, how="cross")
   24:     expected = DataFrame({output_cols[0]: [1, 1, 3, 3], output_cols[1]: [3, 4, 3, 4]})
   25:     tm.assert_frame_equal(result, expected)
   26:     tm.assert_frame_equal(left, left_copy)
   27:     tm.assert_frame_equal(right, right_copy)
   28: 
   29: 
   30: @pytest.mark.parametrize(
   31:     "kwargs",
   32:     [
   33:         {"left_index": True},
   34:         {"right_index": True},
   35:         {"on": "a"},
   36:         {"left_on": "a"},
   37:         {"right_on": "b"},
   38:     ],
   39: )
   40: def test_merge_cross_error_reporting(kwargs):
   41:     # GH#5401
   42:     left = DataFrame({"a": [1, 3]})
   43:     right = DataFrame({"b": [3, 4]})
   44:     msg = (
   45:         "Can not pass on, right_on, left_on or set right_index=True or "
   46:         "left_index=True"
   47:     )
   48:     with pytest.raises(MergeError, match=msg):
   49:         merge(left, right, how="cross", **kwargs)
   50: 
   51: 
   52: def test_merge_cross_mixed_dtypes():
   53:     # GH#5401
   54:     left = DataFrame(["a", "b", "c"], columns=["A"])
   55:     right = DataFrame(range(2), columns=["B"])
   56:     result = merge(left, right, how="cross")
   57:     expected = DataFrame({"A": ["a", "a", "b", "b", "c", "c"], "B": [0, 1, 0, 1, 0, 1]})
   58:     tm.assert_frame_equal(result, expected)
   59: 
   60: 
   61: def test_merge_cross_more_than_one_column():
   62:     # GH#5401
   63:     left = DataFrame({"A": list("ab"), "B": [2, 1]})
   64:     right = DataFrame({"C": range(2), "D": range(4, 6)})
   65:     result = merge(left, right, how="cross")
   66:     expected = DataFrame(
   67:         {
   68:             "A": ["a", "a", "b", "b"],
   69:             "B": [2, 2, 1, 1],
   70:             "C": [0, 1, 0, 1],
   71:             "D": [4, 5, 4, 5],
   72:         }
   73:     )
   74:     tm.assert_frame_equal(result, expected)
   75: 
   76: 
   77: def test_merge_cross_null_values(nulls_fixture):
   78:     # GH#5401
   79:     left = DataFrame({"a": [1, nulls_fixture]})
   80:     right = DataFrame({"b": ["a", "b"], "c": [1.0, 2.0]})
   81:     result = merge(left, right, how="cross")
   82:     expected = DataFrame(
   83:         {
   84:             "a": [1, 1, nulls_fixture, nulls_fixture],
   85:             "b": ["a", "b", "a", "b"],
   86:             "c": [1.0, 2.0, 1.0, 2.0],
   87:         }
   88:     )
   89:     tm.assert_frame_equal(result, expected)
   90: 
   91: 
   92: def test_join_cross_error_reporting():
   93:     # GH#5401
   94:     left = DataFrame({"a": [1, 3]})
   95:     right = DataFrame({"a": [3, 4]})
   96:     msg = (
   97:         "Can not pass on, right_on, left_on or set right_index=True or "
   98:         "left_index=True"
   99:     )
  100:     with pytest.raises(MergeError, match=msg):
  101:         left.join(right, how="cross", on="a")
  102: 
  103: 
  104: def test_merge_cross_series():
  105:     # GH#54055
  106:     ls = Series([1, 2, 3, 4], index=[1, 2, 3, 4], name="left")
  107:     rs = Series([3, 4, 5, 6], index=[3, 4, 5, 6], name="right")
  108:     res = merge(ls, rs, how="cross")
  109: 
  110:     expected = merge(ls.to_frame(), rs.to_frame(), how="cross")
  111:     tm.assert_frame_equal(res, expected)
