    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs import lib
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     Index,
    9:     MultiIndex,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: @pytest.mark.parametrize(
   15:     "input_index, input_columns, input_values, "
   16:     "expected_values, expected_columns, expected_index",
   17:     [
   18:         (
   19:             ["lev4"],
   20:             "lev3",
   21:             "values",
   22:             [
   23:                 [0.0, np.nan],
   24:                 [np.nan, 1.0],
   25:                 [2.0, np.nan],
   26:                 [np.nan, 3.0],
   27:                 [4.0, np.nan],
   28:                 [np.nan, 5.0],
   29:                 [6.0, np.nan],
   30:                 [np.nan, 7.0],
   31:             ],
   32:             Index([1, 2], name="lev3"),
   33:             Index([1, 2, 3, 4, 5, 6, 7, 8], name="lev4"),
   34:         ),
   35:         (
   36:             ["lev4"],
   37:             "lev3",
   38:             lib.no_default,
   39:             [
   40:                 [1.0, np.nan, 1.0, np.nan, 0.0, np.nan],
   41:                 [np.nan, 1.0, np.nan, 1.0, np.nan, 1.0],
   42:                 [1.0, np.nan, 2.0, np.nan, 2.0, np.nan],
   43:                 [np.nan, 1.0, np.nan, 2.0, np.nan, 3.0],
   44:                 [2.0, np.nan, 1.0, np.nan, 4.0, np.nan],
   45:                 [np.nan, 2.0, np.nan, 1.0, np.nan, 5.0],
   46:                 [2.0, np.nan, 2.0, np.nan, 6.0, np.nan],
   47:                 [np.nan, 2.0, np.nan, 2.0, np.nan, 7.0],
   48:             ],
   49:             MultiIndex.from_tuples(
   50:                 [
   51:                     ("lev1", 1),
   52:                     ("lev1", 2),
   53:                     ("lev2", 1),
   54:                     ("lev2", 2),
   55:                     ("values", 1),
   56:                     ("values", 2),
   57:                 ],
   58:                 names=[None, "lev3"],
   59:             ),
   60:             Index([1, 2, 3, 4, 5, 6, 7, 8], name="lev4"),
   61:         ),
   62:         (
   63:             ["lev1", "lev2"],
   64:             "lev3",
   65:             "values",
   66:             [[0, 1], [2, 3], [4, 5], [6, 7]],
   67:             Index([1, 2], name="lev3"),
   68:             MultiIndex.from_tuples(
   69:                 [(1, 1), (1, 2), (2, 1), (2, 2)], names=["lev1", "lev2"]
   70:             ),
   71:         ),
   72:         (
   73:             ["lev1", "lev2"],
   74:             "lev3",
   75:             lib.no_default,
   76:             [[1, 2, 0, 1], [3, 4, 2, 3], [5, 6, 4, 5], [7, 8, 6, 7]],
   77:             MultiIndex.from_tuples(
   78:                 [("lev4", 1), ("lev4", 2), ("values", 1), ("values", 2)],
   79:                 names=[None, "lev3"],
   80:             ),
   81:             MultiIndex.from_tuples(
   82:                 [(1, 1), (1, 2), (2, 1), (2, 2)], names=["lev1", "lev2"]
   83:             ),
   84:         ),
   85:     ],
   86: )
   87: def test_pivot_list_like_index(
   88:     input_index,
   89:     input_columns,
   90:     input_values,
   91:     expected_values,
   92:     expected_columns,
   93:     expected_index,
   94: ):
   95:     # GH 21425, test when index is given a list
   96:     df = pd.DataFrame(
   97:         {
   98:             "lev1": [1, 1, 1, 1, 2, 2, 2, 2],
   99:             "lev2": [1, 1, 2, 2, 1, 1, 2, 2],
  100:             "lev3": [1, 2, 1, 2, 1, 2, 1, 2],
  101:             "lev4": [1, 2, 3, 4, 5, 6, 7, 8],
  102:             "values": [0, 1, 2, 3, 4, 5, 6, 7],
  103:         }
  104:     )
  105: 
  106:     result = df.pivot(index=input_index, columns=input_columns, values=input_values)
  107:     expected = pd.DataFrame(
  108:         expected_values, columns=expected_columns, index=expected_index
  109:     )
  110:     tm.assert_frame_equal(result, expected)
  111: 
  112: 
  113: @pytest.mark.parametrize(
  114:     "input_index, input_columns, input_values, "
  115:     "expected_values, expected_columns, expected_index",
  116:     [
  117:         (
  118:             "lev4",
  119:             ["lev3"],
  120:             "values",
  121:             [
  122:                 [0.0, np.nan],
  123:                 [np.nan, 1.0],
  124:                 [2.0, np.nan],
  125:                 [np.nan, 3.0],
  126:                 [4.0, np.nan],
  127:                 [np.nan, 5.0],
  128:                 [6.0, np.nan],
  129:                 [np.nan, 7.0],
  130:             ],
  131:             Index([1, 2], name="lev3"),
  132:             Index([1, 2, 3, 4, 5, 6, 7, 8], name="lev4"),
  133:         ),
  134:         (
  135:             ["lev1", "lev2"],
  136:             ["lev3"],
  137:             "values",
  138:             [[0, 1], [2, 3], [4, 5], [6, 7]],
  139:             Index([1, 2], name="lev3"),
  140:             MultiIndex.from_tuples(
  141:                 [(1, 1), (1, 2), (2, 1), (2, 2)], names=["lev1", "lev2"]
  142:             ),
  143:         ),
  144:         (
  145:             ["lev1"],
  146:             ["lev2", "lev3"],
  147:             "values",
  148:             [[0, 1, 2, 3], [4, 5, 6, 7]],
  149:             MultiIndex.from_tuples(
  150:                 [(1, 1), (1, 2), (2, 1), (2, 2)], names=["lev2", "lev3"]
  151:             ),
  152:             Index([1, 2], name="lev1"),
  153:         ),
  154:         (
  155:             ["lev1", "lev2"],
  156:             ["lev3", "lev4"],
  157:             "values",
  158:             [
  159:                 [0.0, 1.0, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan],
  160:                 [np.nan, np.nan, 2.0, 3.0, np.nan, np.nan, np.nan, np.nan],
  161:                 [np.nan, np.nan, np.nan, np.nan, 4.0, 5.0, np.nan, np.nan],
  162:                 [np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, 6.0, 7.0],
  163:             ],
  164:             MultiIndex.from_tuples(
  165:                 [(1, 1), (2, 2), (1, 3), (2, 4), (1, 5), (2, 6), (1, 7), (2, 8)],
  166:                 names=["lev3", "lev4"],
  167:             ),
  168:             MultiIndex.from_tuples(
  169:                 [(1, 1), (1, 2), (2, 1), (2, 2)], names=["lev1", "lev2"]
  170:             ),
  171:         ),
  172:     ],
  173: )
  174: def test_pivot_list_like_columns(
  175:     input_index,
  176:     input_columns,
  177:     input_values,
  178:     expected_values,
  179:     expected_columns,
  180:     expected_index,
  181: ):
  182:     # GH 21425, test when columns is given a list
  183:     df = pd.DataFrame(
  184:         {
  185:             "lev1": [1, 1, 1, 1, 2, 2, 2, 2],
  186:             "lev2": [1, 1, 2, 2, 1, 1, 2, 2],
  187:             "lev3": [1, 2, 1, 2, 1, 2, 1, 2],
  188:             "lev4": [1, 2, 3, 4, 5, 6, 7, 8],
  189:             "values": [0, 1, 2, 3, 4, 5, 6, 7],
  190:         }
  191:     )
  192: 
  193:     result = df.pivot(index=input_index, columns=input_columns, values=input_values)
  194:     expected = pd.DataFrame(
  195:         expected_values, columns=expected_columns, index=expected_index
  196:     )
  197:     tm.assert_frame_equal(result, expected)
  198: 
  199: 
  200: def test_pivot_multiindexed_rows_and_cols(using_array_manager):
  201:     # GH 36360
  202: 
  203:     df = pd.DataFrame(
  204:         data=np.arange(12).reshape(4, 3),
  205:         columns=MultiIndex.from_tuples(
  206:             [(0, 0), (0, 1), (0, 2)], names=["col_L0", "col_L1"]
  207:         ),
  208:         index=MultiIndex.from_tuples(
  209:             [(0, 0, 0), (0, 0, 1), (1, 1, 1), (1, 0, 0)],
  210:             names=["idx_L0", "idx_L1", "idx_L2"],
  211:         ),
  212:     )
  213: 
  214:     res = df.pivot_table(
  215:         index=["idx_L0"],
  216:         columns=["idx_L1"],
  217:         values=[(0, 1)],
  218:         aggfunc=lambda col: col.values.sum(),
  219:     )
  220: 
  221:     expected = pd.DataFrame(
  222:         data=[[5, np.nan], [10, 7.0]],
  223:         columns=MultiIndex.from_tuples(
  224:             [(0, 1, 0), (0, 1, 1)], names=["col_L0", "col_L1", "idx_L1"]
  225:         ),
  226:         index=Index([0, 1], dtype="int64", name="idx_L0"),
  227:     )
  228:     if not using_array_manager:
  229:         # BlockManager does not preserve the dtypes
  230:         expected = expected.astype("float64")
  231: 
  232:     tm.assert_frame_equal(res, expected)
  233: 
  234: 
  235: def test_pivot_df_multiindex_index_none():
  236:     # GH 23955
  237:     df = pd.DataFrame(
  238:         [
  239:             ["A", "A1", "label1", 1],
  240:             ["A", "A2", "label2", 2],
  241:             ["B", "A1", "label1", 3],
  242:             ["B", "A2", "label2", 4],
  243:         ],
  244:         columns=["index_1", "index_2", "label", "value"],
  245:     )
  246:     df = df.set_index(["index_1", "index_2"])
  247: 
  248:     result = df.pivot(columns="label", values="value")
  249:     expected = pd.DataFrame(
  250:         [[1.0, np.nan], [np.nan, 2.0], [3.0, np.nan], [np.nan, 4.0]],
  251:         index=df.index,
  252:         columns=Index(["label1", "label2"], name="label"),
  253:     )
  254:     tm.assert_frame_equal(result, expected)
