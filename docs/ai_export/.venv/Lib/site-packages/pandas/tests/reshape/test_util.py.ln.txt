    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     date_range,
    7: )
    8: import pandas._testing as tm
    9: from pandas.core.reshape.util import cartesian_product
   10: 
   11: 
   12: class TestCartesianProduct:
   13:     def test_simple(self):
   14:         x, y = list("ABC"), [1, 22]
   15:         result1, result2 = cartesian_product([x, y])
   16:         expected1 = np.array(["A", "A", "B", "B", "C", "C"])
   17:         expected2 = np.array([1, 22, 1, 22, 1, 22])
   18:         tm.assert_numpy_array_equal(result1, expected1)
   19:         tm.assert_numpy_array_equal(result2, expected2)
   20: 
   21:     def test_datetimeindex(self):
   22:         # regression test for GitHub issue #6439
   23:         # make sure that the ordering on datetimeindex is consistent
   24:         x = date_range("2000-01-01", periods=2)
   25:         result1, result2 = (Index(y).day for y in cartesian_product([x, x]))
   26:         expected1 = Index([1, 1, 2, 2], dtype=np.int32)
   27:         expected2 = Index([1, 2, 1, 2], dtype=np.int32)
   28:         tm.assert_index_equal(result1, expected1)
   29:         tm.assert_index_equal(result2, expected2)
   30: 
   31:     def test_tzaware_retained(self):
   32:         x = date_range("2000-01-01", periods=2, tz="US/Pacific")
   33:         y = np.array([3, 4])
   34:         result1, result2 = cartesian_product([x, y])
   35: 
   36:         expected = x.repeat(2)
   37:         tm.assert_index_equal(result1, expected)
   38: 
   39:     def test_tzaware_retained_categorical(self):
   40:         x = date_range("2000-01-01", periods=2, tz="US/Pacific").astype("category")
   41:         y = np.array([3, 4])
   42:         result1, result2 = cartesian_product([x, y])
   43: 
   44:         expected = x.repeat(2)
   45:         tm.assert_index_equal(result1, expected)
   46: 
   47:     @pytest.mark.parametrize("x, y", [[[], []], [[0, 1], []], [[], ["a", "b", "c"]]])
   48:     def test_empty(self, x, y):
   49:         # product of empty factors
   50:         expected1 = np.array([], dtype=np.asarray(x).dtype)
   51:         expected2 = np.array([], dtype=np.asarray(y).dtype)
   52:         result1, result2 = cartesian_product([x, y])
   53:         tm.assert_numpy_array_equal(result1, expected1)
   54:         tm.assert_numpy_array_equal(result2, expected2)
   55: 
   56:     def test_empty_input(self):
   57:         # empty product (empty input):
   58:         result = cartesian_product([])
   59:         expected = []
   60:         assert result == expected
   61: 
   62:     @pytest.mark.parametrize(
   63:         "X", [1, [1], [1, 2], [[1], 2], "a", ["a"], ["a", "b"], [["a"], "b"]]
   64:     )
   65:     def test_invalid_input(self, X):
   66:         msg = "Input must be a list-like of list-likes"
   67: 
   68:         with pytest.raises(TypeError, match=msg):
   69:             cartesian_product(X=X)
   70: 
   71:     def test_exceed_product_space(self):
   72:         # GH31355: raise useful error when produce space is too large
   73:         msg = "Product space too large to allocate arrays!"
   74: 
   75:         with pytest.raises(ValueError, match=msg):
   76:             dims = [np.arange(0, 22, dtype=np.int16) for i in range(12)] + [
   77:                 (np.arange(15128, dtype=np.int16)),
   78:             ]
   79:             cartesian_product(X=dims)
