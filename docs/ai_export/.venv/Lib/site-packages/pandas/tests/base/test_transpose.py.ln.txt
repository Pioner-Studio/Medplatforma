    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     CategoricalDtype,
    6:     DataFrame,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: def test_transpose(index_or_series_obj):
   12:     obj = index_or_series_obj
   13:     tm.assert_equal(obj.transpose(), obj)
   14: 
   15: 
   16: def test_transpose_non_default_axes(index_or_series_obj):
   17:     msg = "the 'axes' parameter is not supported"
   18:     obj = index_or_series_obj
   19:     with pytest.raises(ValueError, match=msg):
   20:         obj.transpose(1)
   21:     with pytest.raises(ValueError, match=msg):
   22:         obj.transpose(axes=1)
   23: 
   24: 
   25: def test_numpy_transpose(index_or_series_obj):
   26:     msg = "the 'axes' parameter is not supported"
   27:     obj = index_or_series_obj
   28:     tm.assert_equal(np.transpose(obj), obj)
   29: 
   30:     with pytest.raises(ValueError, match=msg):
   31:         np.transpose(obj, axes=1)
   32: 
   33: 
   34: @pytest.mark.parametrize(
   35:     "data, transposed_data, index, columns, dtype",
   36:     [
   37:         ([[1], [2]], [[1, 2]], ["a", "a"], ["b"], int),
   38:         ([[1], [2]], [[1, 2]], ["a", "a"], ["b"], CategoricalDtype([1, 2])),
   39:         ([[1, 2]], [[1], [2]], ["b"], ["a", "a"], int),
   40:         ([[1, 2]], [[1], [2]], ["b"], ["a", "a"], CategoricalDtype([1, 2])),
   41:         ([[1, 2], [3, 4]], [[1, 3], [2, 4]], ["a", "a"], ["b", "b"], int),
   42:         (
   43:             [[1, 2], [3, 4]],
   44:             [[1, 3], [2, 4]],
   45:             ["a", "a"],
   46:             ["b", "b"],
   47:             CategoricalDtype([1, 2, 3, 4]),
   48:         ),
   49:     ],
   50: )
   51: def test_duplicate_labels(data, transposed_data, index, columns, dtype):
   52:     # GH 42380
   53:     df = DataFrame(data, index=index, columns=columns, dtype=dtype)
   54:     result = df.T
   55:     expected = DataFrame(transposed_data, index=columns, columns=index, dtype=dtype)
   56:     tm.assert_frame_equal(result, expected)
