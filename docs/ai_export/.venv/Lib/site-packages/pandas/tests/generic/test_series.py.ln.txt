    1: from operator import methodcaller
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     MultiIndex,
    9:     Series,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestSeries:
   16:     @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
   17:     def test_set_axis_name_mi(self, func):
   18:         ser = Series(
   19:             [11, 21, 31],
   20:             index=MultiIndex.from_tuples(
   21:                 [("A", x) for x in ["a", "B", "c"]], names=["l1", "l2"]
   22:             ),
   23:         )
   24: 
   25:         result = methodcaller(func, ["L1", "L2"])(ser)
   26:         assert ser.index.name is None
   27:         assert ser.index.names == ["l1", "l2"]
   28:         assert result.index.name is None
   29:         assert result.index.names, ["L1", "L2"]
   30: 
   31:     def test_set_axis_name_raises(self):
   32:         ser = Series([1])
   33:         msg = "No axis named 1 for object type Series"
   34:         with pytest.raises(ValueError, match=msg):
   35:             ser._set_axis_name(name="a", axis=1)
   36: 
   37:     def test_get_bool_data_preserve_dtype(self):
   38:         ser = Series([True, False, True])
   39:         result = ser._get_bool_data()
   40:         tm.assert_series_equal(result, ser)
   41: 
   42:     def test_nonzero_single_element(self):
   43:         # allow single item via bool method
   44:         msg_warn = (
   45:             "Series.bool is now deprecated and will be removed "
   46:             "in future version of pandas"
   47:         )
   48:         ser = Series([True])
   49:         ser1 = Series([False])
   50:         with tm.assert_produces_warning(FutureWarning, match=msg_warn):
   51:             assert ser.bool()
   52:         with tm.assert_produces_warning(FutureWarning, match=msg_warn):
   53:             assert not ser1.bool()
   54: 
   55:     @pytest.mark.parametrize("data", [np.nan, pd.NaT, True, False])
   56:     def test_nonzero_single_element_raise_1(self, data):
   57:         # single item nan to raise
   58:         series = Series([data])
   59: 
   60:         msg = "The truth value of a Series is ambiguous"
   61:         with pytest.raises(ValueError, match=msg):
   62:             bool(series)
   63: 
   64:     @pytest.mark.parametrize("data", [np.nan, pd.NaT])
   65:     def test_nonzero_single_element_raise_2(self, data):
   66:         msg_warn = (
   67:             "Series.bool is now deprecated and will be removed "
   68:             "in future version of pandas"
   69:         )
   70:         msg_err = "bool cannot act on a non-boolean single element Series"
   71:         series = Series([data])
   72:         with tm.assert_produces_warning(FutureWarning, match=msg_warn):
   73:             with pytest.raises(ValueError, match=msg_err):
   74:                 series.bool()
   75: 
   76:     @pytest.mark.parametrize("data", [(True, True), (False, False)])
   77:     def test_nonzero_multiple_element_raise(self, data):
   78:         # multiple bool are still an error
   79:         msg_warn = (
   80:             "Series.bool is now deprecated and will be removed "
   81:             "in future version of pandas"
   82:         )
   83:         msg_err = "The truth value of a Series is ambiguous"
   84:         series = Series([data])
   85:         with pytest.raises(ValueError, match=msg_err):
   86:             bool(series)
   87:         with tm.assert_produces_warning(FutureWarning, match=msg_warn):
   88:             with pytest.raises(ValueError, match=msg_err):
   89:                 series.bool()
   90: 
   91:     @pytest.mark.parametrize("data", [1, 0, "a", 0.0])
   92:     def test_nonbool_single_element_raise(self, data):
   93:         # single non-bool are an error
   94:         msg_warn = (
   95:             "Series.bool is now deprecated and will be removed "
   96:             "in future version of pandas"
   97:         )
   98:         msg_err1 = "The truth value of a Series is ambiguous"
   99:         msg_err2 = "bool cannot act on a non-boolean single element Series"
  100:         series = Series([data])
  101:         with pytest.raises(ValueError, match=msg_err1):
  102:             bool(series)
  103:         with tm.assert_produces_warning(FutureWarning, match=msg_warn):
  104:             with pytest.raises(ValueError, match=msg_err2):
  105:                 series.bool()
  106: 
  107:     def test_metadata_propagation_indiv_resample(self):
  108:         # resample
  109:         ts = Series(
  110:             np.random.default_rng(2).random(1000),
  111:             index=date_range("20130101", periods=1000, freq="s"),
  112:             name="foo",
  113:         )
  114:         result = ts.resample("1min").mean()
  115:         tm.assert_metadata_equivalent(ts, result)
  116: 
  117:         result = ts.resample("1min").min()
  118:         tm.assert_metadata_equivalent(ts, result)
  119: 
  120:         result = ts.resample("1min").apply(lambda x: x.sum())
  121:         tm.assert_metadata_equivalent(ts, result)
  122: 
  123:     def test_metadata_propagation_indiv(self, monkeypatch):
  124:         # check that the metadata matches up on the resulting ops
  125: 
  126:         ser = Series(range(3), range(3))
  127:         ser.name = "foo"
  128:         ser2 = Series(range(3), range(3))
  129:         ser2.name = "bar"
  130: 
  131:         result = ser.T
  132:         tm.assert_metadata_equivalent(ser, result)
  133: 
  134:         def finalize(self, other, method=None, **kwargs):
  135:             for name in self._metadata:
  136:                 if method == "concat" and name == "filename":
  137:                     value = "+".join(
  138:                         [
  139:                             getattr(obj, name)
  140:                             for obj in other.objs
  141:                             if getattr(obj, name, None)
  142:                         ]
  143:                     )
  144:                     object.__setattr__(self, name, value)
  145:                 else:
  146:                     object.__setattr__(self, name, getattr(other, name, None))
  147: 
  148:             return self
  149: 
  150:         with monkeypatch.context() as m:
  151:             m.setattr(Series, "_metadata", ["name", "filename"])
  152:             m.setattr(Series, "__finalize__", finalize)
  153: 
  154:             ser.filename = "foo"
  155:             ser2.filename = "bar"
  156: 
  157:             result = pd.concat([ser, ser2])
  158:             assert result.filename == "foo+bar"
  159:             assert result.name is None
