    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     DataFrame,
    7:     MultiIndex,
    8:     Series,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: pytest.importorskip("xarray")
   14: 
   15: 
   16: class TestDataFrameToXArray:
   17:     @pytest.fixture
   18:     def df(self):
   19:         return DataFrame(
   20:             {
   21:                 "a": list("abcd"),
   22:                 "b": list(range(1, 5)),
   23:                 "c": np.arange(3, 7).astype("u1"),
   24:                 "d": np.arange(4.0, 8.0, dtype="float64"),
   25:                 "e": [True, False, True, False],
   26:                 "f": Categorical(list("abcd")),
   27:                 "g": date_range("20130101", periods=4),
   28:                 "h": date_range("20130101", periods=4, tz="US/Eastern"),
   29:             }
   30:         )
   31: 
   32:     def test_to_xarray_index_types(self, index_flat, df, using_infer_string):
   33:         index = index_flat
   34:         # MultiIndex is tested in test_to_xarray_with_multiindex
   35:         if len(index) == 0:
   36:             pytest.skip("Test doesn't make sense for empty index")
   37: 
   38:         from xarray import Dataset
   39: 
   40:         df.index = index[:4]
   41:         df.index.name = "foo"
   42:         df.columns.name = "bar"
   43:         result = df.to_xarray()
   44:         assert result.sizes["foo"] == 4
   45:         assert len(result.coords) == 1
   46:         assert len(result.data_vars) == 8
   47:         tm.assert_almost_equal(list(result.coords.keys()), ["foo"])
   48:         assert isinstance(result, Dataset)
   49: 
   50:         # idempotency
   51:         # datetimes w/tz are preserved
   52:         # column names are lost
   53:         expected = df.copy()
   54:         expected["f"] = expected["f"].astype(
   55:             object if not using_infer_string else "string[pyarrow_numpy]"
   56:         )
   57:         expected.columns.name = None
   58:         tm.assert_frame_equal(result.to_dataframe(), expected)
   59: 
   60:     def test_to_xarray_empty(self, df):
   61:         from xarray import Dataset
   62: 
   63:         df.index.name = "foo"
   64:         result = df[0:0].to_xarray()
   65:         assert result.sizes["foo"] == 0
   66:         assert isinstance(result, Dataset)
   67: 
   68:     def test_to_xarray_with_multiindex(self, df, using_infer_string):
   69:         from xarray import Dataset
   70: 
   71:         # MultiIndex
   72:         df.index = MultiIndex.from_product([["a"], range(4)], names=["one", "two"])
   73:         result = df.to_xarray()
   74:         assert result.sizes["one"] == 1
   75:         assert result.sizes["two"] == 4
   76:         assert len(result.coords) == 2
   77:         assert len(result.data_vars) == 8
   78:         tm.assert_almost_equal(list(result.coords.keys()), ["one", "two"])
   79:         assert isinstance(result, Dataset)
   80: 
   81:         result = result.to_dataframe()
   82:         expected = df.copy()
   83:         expected["f"] = expected["f"].astype(
   84:             object if not using_infer_string else "string[pyarrow_numpy]"
   85:         )
   86:         expected.columns.name = None
   87:         tm.assert_frame_equal(result, expected)
   88: 
   89: 
   90: class TestSeriesToXArray:
   91:     def test_to_xarray_index_types(self, index_flat):
   92:         index = index_flat
   93:         # MultiIndex is tested in test_to_xarray_with_multiindex
   94: 
   95:         from xarray import DataArray
   96: 
   97:         ser = Series(range(len(index)), index=index, dtype="int64")
   98:         ser.index.name = "foo"
   99:         result = ser.to_xarray()
  100:         repr(result)
  101:         assert len(result) == len(index)
  102:         assert len(result.coords) == 1
  103:         tm.assert_almost_equal(list(result.coords.keys()), ["foo"])
  104:         assert isinstance(result, DataArray)
  105: 
  106:         # idempotency
  107:         tm.assert_series_equal(result.to_series(), ser)
  108: 
  109:     def test_to_xarray_empty(self):
  110:         from xarray import DataArray
  111: 
  112:         ser = Series([], dtype=object)
  113:         ser.index.name = "foo"
  114:         result = ser.to_xarray()
  115:         assert len(result) == 0
  116:         assert len(result.coords) == 1
  117:         tm.assert_almost_equal(list(result.coords.keys()), ["foo"])
  118:         assert isinstance(result, DataArray)
  119: 
  120:     def test_to_xarray_with_multiindex(self):
  121:         from xarray import DataArray
  122: 
  123:         mi = MultiIndex.from_product([["a", "b"], range(3)], names=["one", "two"])
  124:         ser = Series(range(6), dtype="int64", index=mi)
  125:         result = ser.to_xarray()
  126:         assert len(result) == 2
  127:         tm.assert_almost_equal(list(result.coords.keys()), ["one", "two"])
  128:         assert isinstance(result, DataArray)
  129:         res = result.to_series()
  130:         tm.assert_series_equal(res, ser)
