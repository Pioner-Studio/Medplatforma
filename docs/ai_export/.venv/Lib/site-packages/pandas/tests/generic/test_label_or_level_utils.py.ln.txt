    1: import pytest
    2: 
    3: from pandas.core.dtypes.missing import array_equivalent
    4: 
    5: import pandas as pd
    6: 
    7: 
    8: # Fixtures
    9: # ========
   10: @pytest.fixture
   11: def df():
   12:     """DataFrame with columns 'L1', 'L2', and 'L3'"""
   13:     return pd.DataFrame({"L1": [1, 2, 3], "L2": [11, 12, 13], "L3": ["A", "B", "C"]})
   14: 
   15: 
   16: @pytest.fixture(params=[[], ["L1"], ["L1", "L2"], ["L1", "L2", "L3"]])
   17: def df_levels(request, df):
   18:     """DataFrame with columns or index levels 'L1', 'L2', and 'L3'"""
   19:     levels = request.param
   20: 
   21:     if levels:
   22:         df = df.set_index(levels)
   23: 
   24:     return df
   25: 
   26: 
   27: @pytest.fixture
   28: def df_ambig(df):
   29:     """DataFrame with levels 'L1' and 'L2' and labels 'L1' and 'L3'"""
   30:     df = df.set_index(["L1", "L2"])
   31: 
   32:     df["L1"] = df["L3"]
   33: 
   34:     return df
   35: 
   36: 
   37: @pytest.fixture
   38: def df_duplabels(df):
   39:     """DataFrame with level 'L1' and labels 'L2', 'L3', and 'L2'"""
   40:     df = df.set_index(["L1"])
   41:     df = pd.concat([df, df["L2"]], axis=1)
   42: 
   43:     return df
   44: 
   45: 
   46: # Test is label/level reference
   47: # =============================
   48: def get_labels_levels(df_levels):
   49:     expected_labels = list(df_levels.columns)
   50:     expected_levels = [name for name in df_levels.index.names if name is not None]
   51:     return expected_labels, expected_levels
   52: 
   53: 
   54: def assert_label_reference(frame, labels, axis):
   55:     for label in labels:
   56:         assert frame._is_label_reference(label, axis=axis)
   57:         assert not frame._is_level_reference(label, axis=axis)
   58:         assert frame._is_label_or_level_reference(label, axis=axis)
   59: 
   60: 
   61: def assert_level_reference(frame, levels, axis):
   62:     for level in levels:
   63:         assert frame._is_level_reference(level, axis=axis)
   64:         assert not frame._is_label_reference(level, axis=axis)
   65:         assert frame._is_label_or_level_reference(level, axis=axis)
   66: 
   67: 
   68: # DataFrame
   69: # ---------
   70: def test_is_level_or_label_reference_df_simple(df_levels, axis):
   71:     axis = df_levels._get_axis_number(axis)
   72:     # Compute expected labels and levels
   73:     expected_labels, expected_levels = get_labels_levels(df_levels)
   74: 
   75:     # Transpose frame if axis == 1
   76:     if axis == 1:
   77:         df_levels = df_levels.T
   78: 
   79:     # Perform checks
   80:     assert_level_reference(df_levels, expected_levels, axis=axis)
   81:     assert_label_reference(df_levels, expected_labels, axis=axis)
   82: 
   83: 
   84: def test_is_level_reference_df_ambig(df_ambig, axis):
   85:     axis = df_ambig._get_axis_number(axis)
   86: 
   87:     # Transpose frame if axis == 1
   88:     if axis == 1:
   89:         df_ambig = df_ambig.T
   90: 
   91:     # df has both an on-axis level and off-axis label named L1
   92:     # Therefore L1 should reference the label, not the level
   93:     assert_label_reference(df_ambig, ["L1"], axis=axis)
   94: 
   95:     # df has an on-axis level named L2 and it is not ambiguous
   96:     # Therefore L2 is an level reference
   97:     assert_level_reference(df_ambig, ["L2"], axis=axis)
   98: 
   99:     # df has a column named L3 and it not an level reference
  100:     assert_label_reference(df_ambig, ["L3"], axis=axis)
  101: 
  102: 
  103: # Series
  104: # ------
  105: def test_is_level_reference_series_simple_axis0(df):
  106:     # Make series with L1 as index
  107:     s = df.set_index("L1").L2
  108:     assert_level_reference(s, ["L1"], axis=0)
  109:     assert not s._is_level_reference("L2")
  110: 
  111:     # Make series with L1 and L2 as index
  112:     s = df.set_index(["L1", "L2"]).L3
  113:     assert_level_reference(s, ["L1", "L2"], axis=0)
  114:     assert not s._is_level_reference("L3")
  115: 
  116: 
  117: def test_is_level_reference_series_axis1_error(df):
  118:     # Make series with L1 as index
  119:     s = df.set_index("L1").L2
  120: 
  121:     with pytest.raises(ValueError, match="No axis named 1"):
  122:         s._is_level_reference("L1", axis=1)
  123: 
  124: 
  125: # Test _check_label_or_level_ambiguity_df
  126: # =======================================
  127: 
  128: 
  129: # DataFrame
  130: # ---------
  131: def test_check_label_or_level_ambiguity_df(df_ambig, axis):
  132:     axis = df_ambig._get_axis_number(axis)
  133:     # Transpose frame if axis == 1
  134:     if axis == 1:
  135:         df_ambig = df_ambig.T
  136:         msg = "'L1' is both a column level and an index label"
  137: 
  138:     else:
  139:         msg = "'L1' is both an index level and a column label"
  140:     # df_ambig has both an on-axis level and off-axis label named L1
  141:     # Therefore, L1 is ambiguous.
  142:     with pytest.raises(ValueError, match=msg):
  143:         df_ambig._check_label_or_level_ambiguity("L1", axis=axis)
  144: 
  145:     # df_ambig has an on-axis level named L2,, and it is not ambiguous.
  146:     df_ambig._check_label_or_level_ambiguity("L2", axis=axis)
  147: 
  148:     # df_ambig has an off-axis label named L3, and it is not ambiguous
  149:     assert not df_ambig._check_label_or_level_ambiguity("L3", axis=axis)
  150: 
  151: 
  152: # Series
  153: # ------
  154: def test_check_label_or_level_ambiguity_series(df):
  155:     # A series has no columns and therefore references are never ambiguous
  156: 
  157:     # Make series with L1 as index
  158:     s = df.set_index("L1").L2
  159:     s._check_label_or_level_ambiguity("L1", axis=0)
  160:     s._check_label_or_level_ambiguity("L2", axis=0)
  161: 
  162:     # Make series with L1 and L2 as index
  163:     s = df.set_index(["L1", "L2"]).L3
  164:     s._check_label_or_level_ambiguity("L1", axis=0)
  165:     s._check_label_or_level_ambiguity("L2", axis=0)
  166:     s._check_label_or_level_ambiguity("L3", axis=0)
  167: 
  168: 
  169: def test_check_label_or_level_ambiguity_series_axis1_error(df):
  170:     # Make series with L1 as index
  171:     s = df.set_index("L1").L2
  172: 
  173:     with pytest.raises(ValueError, match="No axis named 1"):
  174:         s._check_label_or_level_ambiguity("L1", axis=1)
  175: 
  176: 
  177: # Test _get_label_or_level_values
  178: # ===============================
  179: def assert_label_values(frame, labels, axis):
  180:     axis = frame._get_axis_number(axis)
  181:     for label in labels:
  182:         if axis == 0:
  183:             expected = frame[label]._values
  184:         else:
  185:             expected = frame.loc[label]._values
  186: 
  187:         result = frame._get_label_or_level_values(label, axis=axis)
  188:         assert array_equivalent(expected, result)
  189: 
  190: 
  191: def assert_level_values(frame, levels, axis):
  192:     axis = frame._get_axis_number(axis)
  193:     for level in levels:
  194:         if axis == 0:
  195:             expected = frame.index.get_level_values(level=level)._values
  196:         else:
  197:             expected = frame.columns.get_level_values(level=level)._values
  198: 
  199:         result = frame._get_label_or_level_values(level, axis=axis)
  200:         assert array_equivalent(expected, result)
  201: 
  202: 
  203: # DataFrame
  204: # ---------
  205: def test_get_label_or_level_values_df_simple(df_levels, axis):
  206:     # Compute expected labels and levels
  207:     expected_labels, expected_levels = get_labels_levels(df_levels)
  208: 
  209:     axis = df_levels._get_axis_number(axis)
  210:     # Transpose frame if axis == 1
  211:     if axis == 1:
  212:         df_levels = df_levels.T
  213: 
  214:     # Perform checks
  215:     assert_label_values(df_levels, expected_labels, axis=axis)
  216:     assert_level_values(df_levels, expected_levels, axis=axis)
  217: 
  218: 
  219: def test_get_label_or_level_values_df_ambig(df_ambig, axis):
  220:     axis = df_ambig._get_axis_number(axis)
  221:     # Transpose frame if axis == 1
  222:     if axis == 1:
  223:         df_ambig = df_ambig.T
  224: 
  225:     # df has an on-axis level named L2, and it is not ambiguous.
  226:     assert_level_values(df_ambig, ["L2"], axis=axis)
  227: 
  228:     # df has an off-axis label named L3, and it is not ambiguous.
  229:     assert_label_values(df_ambig, ["L3"], axis=axis)
  230: 
  231: 
  232: def test_get_label_or_level_values_df_duplabels(df_duplabels, axis):
  233:     axis = df_duplabels._get_axis_number(axis)
  234:     # Transpose frame if axis == 1
  235:     if axis == 1:
  236:         df_duplabels = df_duplabels.T
  237: 
  238:     # df has unambiguous level 'L1'
  239:     assert_level_values(df_duplabels, ["L1"], axis=axis)
  240: 
  241:     # df has unique label 'L3'
  242:     assert_label_values(df_duplabels, ["L3"], axis=axis)
  243: 
  244:     # df has duplicate labels 'L2'
  245:     if axis == 0:
  246:         expected_msg = "The column label 'L2' is not unique"
  247:     else:
  248:         expected_msg = "The index label 'L2' is not unique"
  249: 
  250:     with pytest.raises(ValueError, match=expected_msg):
  251:         assert_label_values(df_duplabels, ["L2"], axis=axis)
  252: 
  253: 
  254: # Series
  255: # ------
  256: def test_get_label_or_level_values_series_axis0(df):
  257:     # Make series with L1 as index
  258:     s = df.set_index("L1").L2
  259:     assert_level_values(s, ["L1"], axis=0)
  260: 
  261:     # Make series with L1 and L2 as index
  262:     s = df.set_index(["L1", "L2"]).L3
  263:     assert_level_values(s, ["L1", "L2"], axis=0)
  264: 
  265: 
  266: def test_get_label_or_level_values_series_axis1_error(df):
  267:     # Make series with L1 as index
  268:     s = df.set_index("L1").L2
  269: 
  270:     with pytest.raises(ValueError, match="No axis named 1"):
  271:         s._get_label_or_level_values("L1", axis=1)
  272: 
  273: 
  274: # Test _drop_labels_or_levels
  275: # ===========================
  276: def assert_labels_dropped(frame, labels, axis):
  277:     axis = frame._get_axis_number(axis)
  278:     for label in labels:
  279:         df_dropped = frame._drop_labels_or_levels(label, axis=axis)
  280: 
  281:         if axis == 0:
  282:             assert label in frame.columns
  283:             assert label not in df_dropped.columns
  284:         else:
  285:             assert label in frame.index
  286:             assert label not in df_dropped.index
  287: 
  288: 
  289: def assert_levels_dropped(frame, levels, axis):
  290:     axis = frame._get_axis_number(axis)
  291:     for level in levels:
  292:         df_dropped = frame._drop_labels_or_levels(level, axis=axis)
  293: 
  294:         if axis == 0:
  295:             assert level in frame.index.names
  296:             assert level not in df_dropped.index.names
  297:         else:
  298:             assert level in frame.columns.names
  299:             assert level not in df_dropped.columns.names
  300: 
  301: 
  302: # DataFrame
  303: # ---------
  304: def test_drop_labels_or_levels_df(df_levels, axis):
  305:     # Compute expected labels and levels
  306:     expected_labels, expected_levels = get_labels_levels(df_levels)
  307: 
  308:     axis = df_levels._get_axis_number(axis)
  309:     # Transpose frame if axis == 1
  310:     if axis == 1:
  311:         df_levels = df_levels.T
  312: 
  313:     # Perform checks
  314:     assert_labels_dropped(df_levels, expected_labels, axis=axis)
  315:     assert_levels_dropped(df_levels, expected_levels, axis=axis)
  316: 
  317:     with pytest.raises(ValueError, match="not valid labels or levels"):
  318:         df_levels._drop_labels_or_levels("L4", axis=axis)
  319: 
  320: 
  321: # Series
  322: # ------
  323: def test_drop_labels_or_levels_series(df):
  324:     # Make series with L1 as index
  325:     s = df.set_index("L1").L2
  326:     assert_levels_dropped(s, ["L1"], axis=0)
  327: 
  328:     with pytest.raises(ValueError, match="not valid labels or levels"):
  329:         s._drop_labels_or_levels("L4", axis=0)
  330: 
  331:     # Make series with L1 and L2 as index
  332:     s = df.set_index(["L1", "L2"]).L3
  333:     assert_levels_dropped(s, ["L1", "L2"], axis=0)
  334: 
  335:     with pytest.raises(ValueError, match="not valid labels or levels"):
  336:         s._drop_labels_or_levels("L4", axis=0)
