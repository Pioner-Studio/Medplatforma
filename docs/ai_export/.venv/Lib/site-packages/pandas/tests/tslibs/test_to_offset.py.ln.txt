    1: import re
    2: 
    3: import pytest
    4: 
    5: from pandas._libs.tslibs import (
    6:     Timedelta,
    7:     offsets,
    8:     to_offset,
    9: )
   10: 
   11: 
   12: @pytest.mark.parametrize(
   13:     "freq_input,expected",
   14:     [
   15:         (to_offset("10us"), offsets.Micro(10)),
   16:         (offsets.Hour(), offsets.Hour()),
   17:         ("2h30min", offsets.Minute(150)),
   18:         ("2h 30min", offsets.Minute(150)),
   19:         ("2h30min15s", offsets.Second(150 * 60 + 15)),
   20:         ("2h 60min", offsets.Hour(3)),
   21:         ("2h 20.5min", offsets.Second(8430)),
   22:         ("1.5min", offsets.Second(90)),
   23:         ("0.5s", offsets.Milli(500)),
   24:         ("15ms500us", offsets.Micro(15500)),
   25:         ("10s75ms", offsets.Milli(10075)),
   26:         ("1s0.25ms", offsets.Micro(1000250)),
   27:         ("1s0.25ms", offsets.Micro(1000250)),
   28:         ("2800ns", offsets.Nano(2800)),
   29:         ("2SME", offsets.SemiMonthEnd(2)),
   30:         ("2SME-16", offsets.SemiMonthEnd(2, day_of_month=16)),
   31:         ("2SMS-14", offsets.SemiMonthBegin(2, day_of_month=14)),
   32:         ("2SMS-15", offsets.SemiMonthBegin(2)),
   33:     ],
   34: )
   35: def test_to_offset(freq_input, expected):
   36:     result = to_offset(freq_input)
   37:     assert result == expected
   38: 
   39: 
   40: @pytest.mark.parametrize(
   41:     "freqstr,expected", [("-1s", -1), ("-2SME", -2), ("-1SMS", -1), ("-5min10s", -310)]
   42: )
   43: def test_to_offset_negative(freqstr, expected):
   44:     result = to_offset(freqstr)
   45:     assert result.n == expected
   46: 
   47: 
   48: @pytest.mark.filterwarnings("ignore:.*'m' is deprecated.*:FutureWarning")
   49: @pytest.mark.parametrize(
   50:     "freqstr",
   51:     [
   52:         "2h20m",
   53:         "us1",
   54:         "-us",
   55:         "3us1",
   56:         "-2-3us",
   57:         "-2D:3h",
   58:         "1.5.0s",
   59:         "2SMS-15-15",
   60:         "2SMS-15D",
   61:         "100foo",
   62:         # Invalid leading +/- signs.
   63:         "+-1d",
   64:         "-+1h",
   65:         "+1",
   66:         "-7",
   67:         "+d",
   68:         "-m",
   69:         # Invalid shortcut anchors.
   70:         "SME-0",
   71:         "SME-28",
   72:         "SME-29",
   73:         "SME-FOO",
   74:         "BSM",
   75:         "SME--1",
   76:         "SMS-1",
   77:         "SMS-28",
   78:         "SMS-30",
   79:         "SMS-BAR",
   80:         "SMS-BYR",
   81:         "BSMS",
   82:         "SMS--2",
   83:     ],
   84: )
   85: def test_to_offset_invalid(freqstr):
   86:     # see gh-13930
   87: 
   88:     # We escape string because some of our
   89:     # inputs contain regex special characters.
   90:     msg = re.escape(f"Invalid frequency: {freqstr}")
   91:     with pytest.raises(ValueError, match=msg):
   92:         to_offset(freqstr)
   93: 
   94: 
   95: def test_to_offset_no_evaluate():
   96:     msg = str(("", ""))
   97:     with pytest.raises(TypeError, match=msg):
   98:         to_offset(("", ""))
   99: 
  100: 
  101: def test_to_offset_tuple_unsupported():
  102:     with pytest.raises(TypeError, match="pass as a string instead"):
  103:         to_offset((5, "T"))
  104: 
  105: 
  106: @pytest.mark.parametrize(
  107:     "freqstr,expected",
  108:     [
  109:         ("2D 3h", offsets.Hour(51)),
  110:         ("2 D3 h", offsets.Hour(51)),
  111:         ("2 D 3 h", offsets.Hour(51)),
  112:         ("  2 D 3 h  ", offsets.Hour(51)),
  113:         ("   h    ", offsets.Hour()),
  114:         (" 3  h    ", offsets.Hour(3)),
  115:     ],
  116: )
  117: def test_to_offset_whitespace(freqstr, expected):
  118:     result = to_offset(freqstr)
  119:     assert result == expected
  120: 
  121: 
  122: @pytest.mark.parametrize(
  123:     "freqstr,expected", [("00h 00min 01s", 1), ("-00h 03min 14s", -194)]
  124: )
  125: def test_to_offset_leading_zero(freqstr, expected):
  126:     result = to_offset(freqstr)
  127:     assert result.n == expected
  128: 
  129: 
  130: @pytest.mark.parametrize("freqstr,expected", [("+1d", 1), ("+2h30min", 150)])
  131: def test_to_offset_leading_plus(freqstr, expected):
  132:     result = to_offset(freqstr)
  133:     assert result.n == expected
  134: 
  135: 
  136: @pytest.mark.parametrize(
  137:     "kwargs,expected",
  138:     [
  139:         ({"days": 1, "seconds": 1}, offsets.Second(86401)),
  140:         ({"days": -1, "seconds": 1}, offsets.Second(-86399)),
  141:         ({"hours": 1, "minutes": 10}, offsets.Minute(70)),
  142:         ({"hours": 1, "minutes": -10}, offsets.Minute(50)),
  143:         ({"weeks": 1}, offsets.Day(7)),
  144:         ({"hours": 1}, offsets.Hour(1)),
  145:         ({"hours": 1}, to_offset("60min")),
  146:         ({"microseconds": 1}, offsets.Micro(1)),
  147:         ({"microseconds": 0}, offsets.Nano(0)),
  148:     ],
  149: )
  150: def test_to_offset_pd_timedelta(kwargs, expected):
  151:     # see gh-9064
  152:     td = Timedelta(**kwargs)
  153:     result = to_offset(td)
  154:     assert result == expected
  155: 
  156: 
  157: @pytest.mark.parametrize(
  158:     "shortcut,expected",
  159:     [
  160:         ("W", offsets.Week(weekday=6)),
  161:         ("W-SUN", offsets.Week(weekday=6)),
  162:         ("QE", offsets.QuarterEnd(startingMonth=12)),
  163:         ("QE-DEC", offsets.QuarterEnd(startingMonth=12)),
  164:         ("QE-MAY", offsets.QuarterEnd(startingMonth=5)),
  165:         ("SME", offsets.SemiMonthEnd(day_of_month=15)),
  166:         ("SME-15", offsets.SemiMonthEnd(day_of_month=15)),
  167:         ("SME-1", offsets.SemiMonthEnd(day_of_month=1)),
  168:         ("SME-27", offsets.SemiMonthEnd(day_of_month=27)),
  169:         ("SMS-2", offsets.SemiMonthBegin(day_of_month=2)),
  170:         ("SMS-27", offsets.SemiMonthBegin(day_of_month=27)),
  171:     ],
  172: )
  173: def test_anchored_shortcuts(shortcut, expected):
  174:     result = to_offset(shortcut)
  175:     assert result == expected
  176: 
  177: 
  178: @pytest.mark.parametrize(
  179:     "freq_depr",
  180:     [
  181:         "2ye-mar",
  182:         "2ys",
  183:         "2qe",
  184:         "2qs-feb",
  185:         "2bqs",
  186:         "2sms",
  187:         "2bms",
  188:         "2cbme",
  189:         "2me",
  190:         "2w",
  191:     ],
  192: )
  193: def test_to_offset_lowercase_frequency_deprecated(freq_depr):
  194:     # GH#54939
  195:     depr_msg = f"'{freq_depr[1:]}' is deprecated and will be removed in a "
  196:     f"future version, please use '{freq_depr.upper()[1:]}' instead."
  197: 
  198:     with pytest.raises(FutureWarning, match=depr_msg):
  199:         to_offset(freq_depr)
  200: 
  201: 
  202: @pytest.mark.parametrize(
  203:     "freq_depr",
  204:     [
  205:         "2H",
  206:         "2BH",
  207:         "2MIN",
  208:         "2S",
  209:         "2Us",
  210:         "2NS",
  211:     ],
  212: )
  213: def test_to_offset_uppercase_frequency_deprecated(freq_depr):
  214:     # GH#54939
  215:     depr_msg = f"'{freq_depr[1:]}' is deprecated and will be removed in a "
  216:     f"future version, please use '{freq_depr.lower()[1:]}' instead."
  217: 
  218:     with pytest.raises(FutureWarning, match=depr_msg):
  219:         to_offset(freq_depr)
