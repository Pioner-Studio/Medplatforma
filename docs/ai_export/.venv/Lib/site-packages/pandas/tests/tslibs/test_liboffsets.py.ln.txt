    1: """
    2: Tests for helper functions in the cython tslibs.offsets
    3: """
    4: from datetime import datetime
    5: 
    6: import pytest
    7: 
    8: from pandas._libs.tslibs.ccalendar import (
    9:     get_firstbday,
   10:     get_lastbday,
   11: )
   12: import pandas._libs.tslibs.offsets as liboffsets
   13: from pandas._libs.tslibs.offsets import roll_qtrday
   14: 
   15: from pandas import Timestamp
   16: 
   17: 
   18: @pytest.fixture(params=["start", "end", "business_start", "business_end"])
   19: def day_opt(request):
   20:     return request.param
   21: 
   22: 
   23: @pytest.mark.parametrize(
   24:     "dt,exp_week_day,exp_last_day",
   25:     [
   26:         (datetime(2017, 11, 30), 3, 30),  # Business day.
   27:         (datetime(1993, 10, 31), 6, 29),  # Non-business day.
   28:     ],
   29: )
   30: def test_get_last_bday(dt, exp_week_day, exp_last_day):
   31:     assert dt.weekday() == exp_week_day
   32:     assert get_lastbday(dt.year, dt.month) == exp_last_day
   33: 
   34: 
   35: @pytest.mark.parametrize(
   36:     "dt,exp_week_day,exp_first_day",
   37:     [
   38:         (datetime(2017, 4, 1), 5, 3),  # Non-weekday.
   39:         (datetime(1993, 10, 1), 4, 1),  # Business day.
   40:     ],
   41: )
   42: def test_get_first_bday(dt, exp_week_day, exp_first_day):
   43:     assert dt.weekday() == exp_week_day
   44:     assert get_firstbday(dt.year, dt.month) == exp_first_day
   45: 
   46: 
   47: @pytest.mark.parametrize(
   48:     "months,day_opt,expected",
   49:     [
   50:         (0, 15, datetime(2017, 11, 15)),
   51:         (0, None, datetime(2017, 11, 30)),
   52:         (1, "start", datetime(2017, 12, 1)),
   53:         (-145, "end", datetime(2005, 10, 31)),
   54:         (0, "business_end", datetime(2017, 11, 30)),
   55:         (0, "business_start", datetime(2017, 11, 1)),
   56:     ],
   57: )
   58: def test_shift_month_dt(months, day_opt, expected):
   59:     dt = datetime(2017, 11, 30)
   60:     assert liboffsets.shift_month(dt, months, day_opt=day_opt) == expected
   61: 
   62: 
   63: @pytest.mark.parametrize(
   64:     "months,day_opt,expected",
   65:     [
   66:         (1, "start", Timestamp("1929-06-01")),
   67:         (-3, "end", Timestamp("1929-02-28")),
   68:         (25, None, Timestamp("1931-06-5")),
   69:         (-1, 31, Timestamp("1929-04-30")),
   70:     ],
   71: )
   72: def test_shift_month_ts(months, day_opt, expected):
   73:     ts = Timestamp("1929-05-05")
   74:     assert liboffsets.shift_month(ts, months, day_opt=day_opt) == expected
   75: 
   76: 
   77: def test_shift_month_error():
   78:     dt = datetime(2017, 11, 15)
   79:     day_opt = "this should raise"
   80: 
   81:     with pytest.raises(ValueError, match=day_opt):
   82:         liboffsets.shift_month(dt, 3, day_opt=day_opt)
   83: 
   84: 
   85: @pytest.mark.parametrize(
   86:     "other,expected",
   87:     [
   88:         # Before March 1.
   89:         (datetime(2017, 2, 10), {2: 1, -7: -7, 0: 0}),
   90:         # After March 1.
   91:         (Timestamp("2014-03-15", tz="US/Eastern"), {2: 2, -7: -6, 0: 1}),
   92:     ],
   93: )
   94: @pytest.mark.parametrize("n", [2, -7, 0])
   95: def test_roll_qtrday_year(other, expected, n):
   96:     month = 3
   97:     day_opt = "start"  # `other` will be compared to March 1.
   98: 
   99:     assert roll_qtrday(other, n, month, day_opt, modby=12) == expected[n]
  100: 
  101: 
  102: @pytest.mark.parametrize(
  103:     "other,expected",
  104:     [
  105:         # Before June 30.
  106:         (datetime(1999, 6, 29), {5: 4, -7: -7, 0: 0}),
  107:         # After June 30.
  108:         (Timestamp(2072, 8, 24, 6, 17, 18), {5: 5, -7: -6, 0: 1}),
  109:     ],
  110: )
  111: @pytest.mark.parametrize("n", [5, -7, 0])
  112: def test_roll_qtrday_year2(other, expected, n):
  113:     month = 6
  114:     day_opt = "end"  # `other` will be compared to June 30.
  115: 
  116:     assert roll_qtrday(other, n, month, day_opt, modby=12) == expected[n]
  117: 
  118: 
  119: def test_get_day_of_month_error():
  120:     # get_day_of_month is not directly exposed.
  121:     # We test it via roll_qtrday.
  122:     dt = datetime(2017, 11, 15)
  123:     day_opt = "foo"
  124: 
  125:     with pytest.raises(ValueError, match=day_opt):
  126:         # To hit the raising case we need month == dt.month and n > 0.
  127:         roll_qtrday(dt, n=3, month=11, day_opt=day_opt, modby=12)
  128: 
  129: 
  130: @pytest.mark.parametrize(
  131:     "month",
  132:     [3, 5],  # (other.month % 3) < (month % 3)  # (other.month % 3) > (month % 3)
  133: )
  134: @pytest.mark.parametrize("n", [4, -3])
  135: def test_roll_qtr_day_not_mod_unequal(day_opt, month, n):
  136:     expected = {3: {-3: -2, 4: 4}, 5: {-3: -3, 4: 3}}
  137: 
  138:     other = Timestamp(2072, 10, 1, 6, 17, 18)  # Saturday.
  139:     assert roll_qtrday(other, n, month, day_opt, modby=3) == expected[month][n]
  140: 
  141: 
  142: @pytest.mark.parametrize(
  143:     "other,month,exp_dict",
  144:     [
  145:         # Monday.
  146:         (datetime(1999, 5, 31), 2, {-1: {"start": 0, "business_start": 0}}),
  147:         # Saturday.
  148:         (
  149:             Timestamp(2072, 10, 1, 6, 17, 18),
  150:             4,
  151:             {2: {"end": 1, "business_end": 1, "business_start": 1}},
  152:         ),
  153:         # First business day.
  154:         (
  155:             Timestamp(2072, 10, 3, 6, 17, 18),
  156:             4,
  157:             {2: {"end": 1, "business_end": 1}, -1: {"start": 0}},
  158:         ),
  159:     ],
  160: )
  161: @pytest.mark.parametrize("n", [2, -1])
  162: def test_roll_qtr_day_mod_equal(other, month, exp_dict, n, day_opt):
  163:     # All cases have (other.month % 3) == (month % 3).
  164:     expected = exp_dict.get(n, {}).get(day_opt, n)
  165:     assert roll_qtrday(other, n, month, day_opt, modby=3) == expected
  166: 
  167: 
  168: @pytest.mark.parametrize(
  169:     "n,expected", [(42, {29: 42, 1: 42, 31: 41}), (-4, {29: -4, 1: -3, 31: -4})]
  170: )
  171: @pytest.mark.parametrize("compare", [29, 1, 31])
  172: def test_roll_convention(n, expected, compare):
  173:     assert liboffsets.roll_convention(29, n, compare) == expected[compare]
