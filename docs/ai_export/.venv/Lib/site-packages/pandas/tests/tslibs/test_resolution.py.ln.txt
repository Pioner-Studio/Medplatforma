    1: import numpy as np
    2: import pytest
    3: import pytz
    4: 
    5: from pandas._libs.tslibs import (
    6:     Resolution,
    7:     get_resolution,
    8: )
    9: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
   10: 
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_get_resolution_nano():
   15:     # don't return the fallback RESO_DAY
   16:     arr = np.array([1], dtype=np.int64)
   17:     res = get_resolution(arr)
   18:     assert res == Resolution.RESO_NS
   19: 
   20: 
   21: def test_get_resolution_non_nano_data():
   22:     arr = np.array([1], dtype=np.int64)
   23:     res = get_resolution(arr, None, NpyDatetimeUnit.NPY_FR_us.value)
   24:     assert res == Resolution.RESO_US
   25: 
   26:     res = get_resolution(arr, pytz.UTC, NpyDatetimeUnit.NPY_FR_us.value)
   27:     assert res == Resolution.RESO_US
   28: 
   29: 
   30: @pytest.mark.parametrize(
   31:     "freqstr,expected",
   32:     [
   33:         ("Y", "year"),
   34:         ("Q", "quarter"),
   35:         ("M", "month"),
   36:         ("D", "day"),
   37:         ("h", "hour"),
   38:         ("min", "minute"),
   39:         ("s", "second"),
   40:         ("ms", "millisecond"),
   41:         ("us", "microsecond"),
   42:         ("ns", "nanosecond"),
   43:     ],
   44: )
   45: def test_get_attrname_from_abbrev(freqstr, expected):
   46:     reso = Resolution.get_reso_from_freqstr(freqstr)
   47:     assert reso.attr_abbrev == freqstr
   48:     assert reso.attrname == expected
   49: 
   50: 
   51: @pytest.mark.parametrize("freq", ["A", "H", "T", "S", "L", "U", "N"])
   52: def test_units_A_H_T_S_L_U_N_deprecated_from_attrname_to_abbrevs(freq):
   53:     # GH#52536
   54:     msg = f"'{freq}' is deprecated and will be removed in a future version."
   55: 
   56:     with tm.assert_produces_warning(FutureWarning, match=msg):
   57:         Resolution.get_reso_from_freqstr(freq)
