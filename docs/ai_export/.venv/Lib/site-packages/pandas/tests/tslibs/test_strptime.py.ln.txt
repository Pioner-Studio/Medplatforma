    1: from datetime import (
    2:     datetime,
    3:     timezone,
    4: )
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
   10: from pandas._libs.tslibs.strptime import array_strptime
   11: 
   12: from pandas import (
   13:     NaT,
   14:     Timestamp,
   15: )
   16: import pandas._testing as tm
   17: 
   18: creso_infer = NpyDatetimeUnit.NPY_FR_GENERIC.value
   19: 
   20: 
   21: class TestArrayStrptimeResolutionInference:
   22:     def test_array_strptime_resolution_all_nat(self):
   23:         arr = np.array([NaT, np.nan], dtype=object)
   24: 
   25:         fmt = "%Y-%m-%d %H:%M:%S"
   26:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   27:         assert res.dtype == "M8[s]"
   28: 
   29:         res, _ = array_strptime(arr, fmt=fmt, utc=True, creso=creso_infer)
   30:         assert res.dtype == "M8[s]"
   31: 
   32:     @pytest.mark.parametrize("tz", [None, timezone.utc])
   33:     def test_array_strptime_resolution_inference_homogeneous_strings(self, tz):
   34:         dt = datetime(2016, 1, 2, 3, 4, 5, 678900, tzinfo=tz)
   35: 
   36:         fmt = "%Y-%m-%d %H:%M:%S"
   37:         dtstr = dt.strftime(fmt)
   38:         arr = np.array([dtstr] * 3, dtype=object)
   39:         expected = np.array([dt.replace(tzinfo=None)] * 3, dtype="M8[s]")
   40: 
   41:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   42:         tm.assert_numpy_array_equal(res, expected)
   43: 
   44:         fmt = "%Y-%m-%d %H:%M:%S.%f"
   45:         dtstr = dt.strftime(fmt)
   46:         arr = np.array([dtstr] * 3, dtype=object)
   47:         expected = np.array([dt.replace(tzinfo=None)] * 3, dtype="M8[us]")
   48: 
   49:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   50:         tm.assert_numpy_array_equal(res, expected)
   51: 
   52:         fmt = "ISO8601"
   53:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   54:         tm.assert_numpy_array_equal(res, expected)
   55: 
   56:     @pytest.mark.parametrize("tz", [None, timezone.utc])
   57:     def test_array_strptime_resolution_mixed(self, tz):
   58:         dt = datetime(2016, 1, 2, 3, 4, 5, 678900, tzinfo=tz)
   59: 
   60:         ts = Timestamp(dt).as_unit("ns")
   61: 
   62:         arr = np.array([dt, ts], dtype=object)
   63:         expected = np.array(
   64:             [Timestamp(dt).as_unit("ns").asm8, ts.asm8],
   65:             dtype="M8[ns]",
   66:         )
   67: 
   68:         fmt = "%Y-%m-%d %H:%M:%S"
   69:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   70:         tm.assert_numpy_array_equal(res, expected)
   71: 
   72:         fmt = "ISO8601"
   73:         res, _ = array_strptime(arr, fmt=fmt, utc=False, creso=creso_infer)
   74:         tm.assert_numpy_array_equal(res, expected)
   75: 
   76:     def test_array_strptime_resolution_todaynow(self):
   77:         # specifically case where today/now is the *first* item
   78:         vals = np.array(["today", np.datetime64("2017-01-01", "us")], dtype=object)
   79: 
   80:         now = Timestamp("now").asm8
   81:         res, _ = array_strptime(vals, fmt="%Y-%m-%d", utc=False, creso=creso_infer)
   82:         res2, _ = array_strptime(
   83:             vals[::-1], fmt="%Y-%m-%d", utc=False, creso=creso_infer
   84:         )
   85: 
   86:         # 1s is an arbitrary cutoff for call overhead; in local testing the
   87:         #  actual difference is about 250us
   88:         tolerance = np.timedelta64(1, "s")
   89: 
   90:         assert res.dtype == "M8[us]"
   91:         assert abs(res[0] - now) < tolerance
   92:         assert res[1] == vals[1]
   93: 
   94:         assert res2.dtype == "M8[us]"
   95:         assert abs(res2[1] - now) < tolerance * 2
   96:         assert res2[0] == vals[1]
   97: 
   98:     def test_array_strptime_str_outside_nano_range(self):
   99:         vals = np.array(["2401-09-15"], dtype=object)
  100:         expected = np.array(["2401-09-15"], dtype="M8[s]")
  101:         fmt = "ISO8601"
  102:         res, _ = array_strptime(vals, fmt=fmt, creso=creso_infer)
  103:         tm.assert_numpy_array_equal(res, expected)
  104: 
  105:         # non-iso -> different path
  106:         vals2 = np.array(["Sep 15, 2401"], dtype=object)
  107:         expected2 = np.array(["2401-09-15"], dtype="M8[s]")
  108:         fmt2 = "%b %d, %Y"
  109:         res2, _ = array_strptime(vals2, fmt=fmt2, creso=creso_infer)
  110:         tm.assert_numpy_array_equal(res2, expected2)
