    1: from datetime import (
    2:     date,
    3:     datetime,
    4: )
    5: 
    6: from hypothesis import given
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas._libs.tslibs import ccalendar
   11: 
   12: from pandas._testing._hypothesis import DATETIME_IN_PD_TIMESTAMP_RANGE_NO_TZ
   13: 
   14: 
   15: @pytest.mark.parametrize(
   16:     "date_tuple,expected",
   17:     [
   18:         ((2001, 3, 1), 60),
   19:         ((2004, 3, 1), 61),
   20:         ((1907, 12, 31), 365),  # End-of-year, non-leap year.
   21:         ((2004, 12, 31), 366),  # End-of-year, leap year.
   22:     ],
   23: )
   24: def test_get_day_of_year_numeric(date_tuple, expected):
   25:     assert ccalendar.get_day_of_year(*date_tuple) == expected
   26: 
   27: 
   28: def test_get_day_of_year_dt():
   29:     dt = datetime.fromordinal(1 + np.random.default_rng(2).integers(365 * 4000))
   30:     result = ccalendar.get_day_of_year(dt.year, dt.month, dt.day)
   31: 
   32:     expected = (dt - dt.replace(month=1, day=1)).days + 1
   33:     assert result == expected
   34: 
   35: 
   36: @pytest.mark.parametrize(
   37:     "input_date_tuple, expected_iso_tuple",
   38:     [
   39:         [(2020, 1, 1), (2020, 1, 3)],
   40:         [(2019, 12, 31), (2020, 1, 2)],
   41:         [(2019, 12, 30), (2020, 1, 1)],
   42:         [(2009, 12, 31), (2009, 53, 4)],
   43:         [(2010, 1, 1), (2009, 53, 5)],
   44:         [(2010, 1, 3), (2009, 53, 7)],
   45:         [(2010, 1, 4), (2010, 1, 1)],
   46:         [(2006, 1, 1), (2005, 52, 7)],
   47:         [(2005, 12, 31), (2005, 52, 6)],
   48:         [(2008, 12, 28), (2008, 52, 7)],
   49:         [(2008, 12, 29), (2009, 1, 1)],
   50:     ],
   51: )
   52: def test_dt_correct_iso_8601_year_week_and_day(input_date_tuple, expected_iso_tuple):
   53:     result = ccalendar.get_iso_calendar(*input_date_tuple)
   54:     expected_from_date_isocalendar = date(*input_date_tuple).isocalendar()
   55:     assert result == expected_from_date_isocalendar
   56:     assert result == expected_iso_tuple
   57: 
   58: 
   59: @given(DATETIME_IN_PD_TIMESTAMP_RANGE_NO_TZ)
   60: def test_isocalendar(dt):
   61:     expected = dt.isocalendar()
   62:     result = ccalendar.get_iso_calendar(dt.year, dt.month, dt.day)
   63:     assert result == expected
