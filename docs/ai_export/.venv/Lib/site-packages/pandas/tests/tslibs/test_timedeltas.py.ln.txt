    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs.tslibs.timedeltas import (
    7:     array_to_timedelta64,
    8:     delta_to_nanoseconds,
    9:     ints_to_pytimedelta,
   10: )
   11: 
   12: from pandas import (
   13:     Timedelta,
   14:     offsets,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: @pytest.mark.parametrize(
   20:     "obj,expected",
   21:     [
   22:         (np.timedelta64(14, "D"), 14 * 24 * 3600 * 1e9),
   23:         (Timedelta(minutes=-7), -7 * 60 * 1e9),
   24:         (Timedelta(minutes=-7).to_pytimedelta(), -7 * 60 * 1e9),
   25:         (Timedelta(seconds=1234e-9), 1234),  # GH43764, GH40946
   26:         (
   27:             Timedelta(seconds=1e-9, milliseconds=1e-5, microseconds=1e-1),
   28:             111,
   29:         ),  # GH43764
   30:         (
   31:             Timedelta(days=1, seconds=1e-9, milliseconds=1e-5, microseconds=1e-1),
   32:             24 * 3600e9 + 111,
   33:         ),  # GH43764
   34:         (offsets.Nano(125), 125),
   35:     ],
   36: )
   37: def test_delta_to_nanoseconds(obj, expected):
   38:     result = delta_to_nanoseconds(obj)
   39:     assert result == expected
   40: 
   41: 
   42: def test_delta_to_nanoseconds_error():
   43:     obj = np.array([123456789], dtype="m8[ns]")
   44: 
   45:     with pytest.raises(TypeError, match="<class 'numpy.ndarray'>"):
   46:         delta_to_nanoseconds(obj)
   47: 
   48:     with pytest.raises(TypeError, match="float"):
   49:         delta_to_nanoseconds(1.5)
   50:     with pytest.raises(TypeError, match="int"):
   51:         delta_to_nanoseconds(1)
   52:     with pytest.raises(TypeError, match="int"):
   53:         delta_to_nanoseconds(np.int64(2))
   54:     with pytest.raises(TypeError, match="int"):
   55:         delta_to_nanoseconds(np.int32(3))
   56: 
   57: 
   58: def test_delta_to_nanoseconds_td64_MY_raises():
   59:     msg = (
   60:         "delta_to_nanoseconds does not support Y or M units, "
   61:         "as their duration in nanoseconds is ambiguous"
   62:     )
   63: 
   64:     td = np.timedelta64(1234, "Y")
   65: 
   66:     with pytest.raises(ValueError, match=msg):
   67:         delta_to_nanoseconds(td)
   68: 
   69:     td = np.timedelta64(1234, "M")
   70: 
   71:     with pytest.raises(ValueError, match=msg):
   72:         delta_to_nanoseconds(td)
   73: 
   74: 
   75: @pytest.mark.parametrize("unit", ["Y", "M"])
   76: def test_unsupported_td64_unit_raises(unit):
   77:     # GH 52806
   78:     with pytest.raises(
   79:         ValueError,
   80:         match=f"Unit {unit} is not supported. "
   81:         "Only unambiguous timedelta values durations are supported. "
   82:         "Allowed units are 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns'",
   83:     ):
   84:         Timedelta(np.timedelta64(1, unit))
   85: 
   86: 
   87: def test_huge_nanoseconds_overflow():
   88:     # GH 32402
   89:     assert delta_to_nanoseconds(Timedelta(1e10)) == 1e10
   90:     assert delta_to_nanoseconds(Timedelta(nanoseconds=1e10)) == 1e10
   91: 
   92: 
   93: @pytest.mark.parametrize(
   94:     "kwargs", [{"Seconds": 1}, {"seconds": 1, "Nanoseconds": 1}, {"Foo": 2}]
   95: )
   96: def test_kwarg_assertion(kwargs):
   97:     err_message = (
   98:         "cannot construct a Timedelta from the passed arguments, "
   99:         "allowed keywords are "
  100:         "[weeks, days, hours, minutes, seconds, "
  101:         "milliseconds, microseconds, nanoseconds]"
  102:     )
  103: 
  104:     with pytest.raises(ValueError, match=re.escape(err_message)):
  105:         Timedelta(**kwargs)
  106: 
  107: 
  108: class TestArrayToTimedelta64:
  109:     def test_array_to_timedelta64_string_with_unit_2d_raises(self):
  110:         # check the 'unit is not None and errors != "coerce"' path
  111:         #  in array_to_timedelta64 raises correctly with 2D values
  112:         values = np.array([["1", 2], [3, "4"]], dtype=object)
  113:         with pytest.raises(ValueError, match="unit must not be specified"):
  114:             array_to_timedelta64(values, unit="s")
  115: 
  116:     def test_array_to_timedelta64_non_object_raises(self):
  117:         # check we raise, not segfault
  118:         values = np.arange(5)
  119: 
  120:         msg = "'values' must have object dtype"
  121:         with pytest.raises(TypeError, match=msg):
  122:             array_to_timedelta64(values)
  123: 
  124: 
  125: @pytest.mark.parametrize("unit", ["s", "ms", "us"])
  126: def test_ints_to_pytimedelta(unit):
  127:     # tests for non-nanosecond cases
  128:     arr = np.arange(6, dtype=np.int64).view(f"m8[{unit}]")
  129: 
  130:     res = ints_to_pytimedelta(arr, box=False)
  131:     # For non-nanosecond, .astype(object) gives pytimedelta objects
  132:     #  instead of integers
  133:     expected = arr.astype(object)
  134:     tm.assert_numpy_array_equal(res, expected)
  135: 
  136:     res = ints_to_pytimedelta(arr, box=True)
  137:     expected = np.array([Timedelta(x) for x in arr], dtype=object)
  138:     tm.assert_numpy_array_equal(res, expected)
  139: 
  140: 
  141: @pytest.mark.parametrize("unit", ["Y", "M", "ps", "fs", "as"])
  142: def test_ints_to_pytimedelta_unsupported(unit):
  143:     arr = np.arange(6, dtype=np.int64).view(f"m8[{unit}]")
  144: 
  145:     with pytest.raises(NotImplementedError, match=r"\d{1,2}"):
  146:         ints_to_pytimedelta(arr, box=False)
  147:     msg = "Only resolutions 's', 'ms', 'us', 'ns' are supported"
  148:     with pytest.raises(NotImplementedError, match=msg):
  149:         ints_to_pytimedelta(arr, box=True)
