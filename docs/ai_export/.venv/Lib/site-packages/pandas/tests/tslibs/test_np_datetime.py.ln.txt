    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
    5: from pandas._libs.tslibs.np_datetime import (
    6:     OutOfBoundsDatetime,
    7:     OutOfBoundsTimedelta,
    8:     astype_overflowsafe,
    9:     is_unitless,
   10:     py_get_unit_from_dtype,
   11:     py_td64_to_tdstruct,
   12: )
   13: 
   14: import pandas._testing as tm
   15: 
   16: 
   17: def test_is_unitless():
   18:     dtype = np.dtype("M8[ns]")
   19:     assert not is_unitless(dtype)
   20: 
   21:     dtype = np.dtype("datetime64")
   22:     assert is_unitless(dtype)
   23: 
   24:     dtype = np.dtype("m8[ns]")
   25:     assert not is_unitless(dtype)
   26: 
   27:     dtype = np.dtype("timedelta64")
   28:     assert is_unitless(dtype)
   29: 
   30:     msg = "dtype must be datetime64 or timedelta64"
   31:     with pytest.raises(ValueError, match=msg):
   32:         is_unitless(np.dtype(np.int64))
   33: 
   34:     msg = "Argument 'dtype' has incorrect type"
   35:     with pytest.raises(TypeError, match=msg):
   36:         is_unitless("foo")
   37: 
   38: 
   39: def test_get_unit_from_dtype():
   40:     # datetime64
   41:     assert py_get_unit_from_dtype(np.dtype("M8[Y]")) == NpyDatetimeUnit.NPY_FR_Y.value
   42:     assert py_get_unit_from_dtype(np.dtype("M8[M]")) == NpyDatetimeUnit.NPY_FR_M.value
   43:     assert py_get_unit_from_dtype(np.dtype("M8[W]")) == NpyDatetimeUnit.NPY_FR_W.value
   44:     # B has been deprecated and removed -> no 3
   45:     assert py_get_unit_from_dtype(np.dtype("M8[D]")) == NpyDatetimeUnit.NPY_FR_D.value
   46:     assert py_get_unit_from_dtype(np.dtype("M8[h]")) == NpyDatetimeUnit.NPY_FR_h.value
   47:     assert py_get_unit_from_dtype(np.dtype("M8[m]")) == NpyDatetimeUnit.NPY_FR_m.value
   48:     assert py_get_unit_from_dtype(np.dtype("M8[s]")) == NpyDatetimeUnit.NPY_FR_s.value
   49:     assert py_get_unit_from_dtype(np.dtype("M8[ms]")) == NpyDatetimeUnit.NPY_FR_ms.value
   50:     assert py_get_unit_from_dtype(np.dtype("M8[us]")) == NpyDatetimeUnit.NPY_FR_us.value
   51:     assert py_get_unit_from_dtype(np.dtype("M8[ns]")) == NpyDatetimeUnit.NPY_FR_ns.value
   52:     assert py_get_unit_from_dtype(np.dtype("M8[ps]")) == NpyDatetimeUnit.NPY_FR_ps.value
   53:     assert py_get_unit_from_dtype(np.dtype("M8[fs]")) == NpyDatetimeUnit.NPY_FR_fs.value
   54:     assert py_get_unit_from_dtype(np.dtype("M8[as]")) == NpyDatetimeUnit.NPY_FR_as.value
   55: 
   56:     # timedelta64
   57:     assert py_get_unit_from_dtype(np.dtype("m8[Y]")) == NpyDatetimeUnit.NPY_FR_Y.value
   58:     assert py_get_unit_from_dtype(np.dtype("m8[M]")) == NpyDatetimeUnit.NPY_FR_M.value
   59:     assert py_get_unit_from_dtype(np.dtype("m8[W]")) == NpyDatetimeUnit.NPY_FR_W.value
   60:     # B has been deprecated and removed -> no 3
   61:     assert py_get_unit_from_dtype(np.dtype("m8[D]")) == NpyDatetimeUnit.NPY_FR_D.value
   62:     assert py_get_unit_from_dtype(np.dtype("m8[h]")) == NpyDatetimeUnit.NPY_FR_h.value
   63:     assert py_get_unit_from_dtype(np.dtype("m8[m]")) == NpyDatetimeUnit.NPY_FR_m.value
   64:     assert py_get_unit_from_dtype(np.dtype("m8[s]")) == NpyDatetimeUnit.NPY_FR_s.value
   65:     assert py_get_unit_from_dtype(np.dtype("m8[ms]")) == NpyDatetimeUnit.NPY_FR_ms.value
   66:     assert py_get_unit_from_dtype(np.dtype("m8[us]")) == NpyDatetimeUnit.NPY_FR_us.value
   67:     assert py_get_unit_from_dtype(np.dtype("m8[ns]")) == NpyDatetimeUnit.NPY_FR_ns.value
   68:     assert py_get_unit_from_dtype(np.dtype("m8[ps]")) == NpyDatetimeUnit.NPY_FR_ps.value
   69:     assert py_get_unit_from_dtype(np.dtype("m8[fs]")) == NpyDatetimeUnit.NPY_FR_fs.value
   70:     assert py_get_unit_from_dtype(np.dtype("m8[as]")) == NpyDatetimeUnit.NPY_FR_as.value
   71: 
   72: 
   73: def test_td64_to_tdstruct():
   74:     val = 12454636234  # arbitrary value
   75: 
   76:     res1 = py_td64_to_tdstruct(val, NpyDatetimeUnit.NPY_FR_ns.value)
   77:     exp1 = {
   78:         "days": 0,
   79:         "hrs": 0,
   80:         "min": 0,
   81:         "sec": 12,
   82:         "ms": 454,
   83:         "us": 636,
   84:         "ns": 234,
   85:         "seconds": 12,
   86:         "microseconds": 454636,
   87:         "nanoseconds": 234,
   88:     }
   89:     assert res1 == exp1
   90: 
   91:     res2 = py_td64_to_tdstruct(val, NpyDatetimeUnit.NPY_FR_us.value)
   92:     exp2 = {
   93:         "days": 0,
   94:         "hrs": 3,
   95:         "min": 27,
   96:         "sec": 34,
   97:         "ms": 636,
   98:         "us": 234,
   99:         "ns": 0,
  100:         "seconds": 12454,
  101:         "microseconds": 636234,
  102:         "nanoseconds": 0,
  103:     }
  104:     assert res2 == exp2
  105: 
  106:     res3 = py_td64_to_tdstruct(val, NpyDatetimeUnit.NPY_FR_ms.value)
  107:     exp3 = {
  108:         "days": 144,
  109:         "hrs": 3,
  110:         "min": 37,
  111:         "sec": 16,
  112:         "ms": 234,
  113:         "us": 0,
  114:         "ns": 0,
  115:         "seconds": 13036,
  116:         "microseconds": 234000,
  117:         "nanoseconds": 0,
  118:     }
  119:     assert res3 == exp3
  120: 
  121:     # Note this out of bounds for nanosecond Timedelta
  122:     res4 = py_td64_to_tdstruct(val, NpyDatetimeUnit.NPY_FR_s.value)
  123:     exp4 = {
  124:         "days": 144150,
  125:         "hrs": 21,
  126:         "min": 10,
  127:         "sec": 34,
  128:         "ms": 0,
  129:         "us": 0,
  130:         "ns": 0,
  131:         "seconds": 76234,
  132:         "microseconds": 0,
  133:         "nanoseconds": 0,
  134:     }
  135:     assert res4 == exp4
  136: 
  137: 
  138: class TestAstypeOverflowSafe:
  139:     def test_pass_non_dt64_array(self):
  140:         # check that we raise, not segfault
  141:         arr = np.arange(5)
  142:         dtype = np.dtype("M8[ns]")
  143: 
  144:         msg = (
  145:             "astype_overflowsafe values.dtype and dtype must be either "
  146:             "both-datetime64 or both-timedelta64"
  147:         )
  148:         with pytest.raises(TypeError, match=msg):
  149:             astype_overflowsafe(arr, dtype, copy=True)
  150: 
  151:         with pytest.raises(TypeError, match=msg):
  152:             astype_overflowsafe(arr, dtype, copy=False)
  153: 
  154:     def test_pass_non_dt64_dtype(self):
  155:         # check that we raise, not segfault
  156:         arr = np.arange(5, dtype="i8").view("M8[D]")
  157:         dtype = np.dtype("m8[ns]")
  158: 
  159:         msg = (
  160:             "astype_overflowsafe values.dtype and dtype must be either "
  161:             "both-datetime64 or both-timedelta64"
  162:         )
  163:         with pytest.raises(TypeError, match=msg):
  164:             astype_overflowsafe(arr, dtype, copy=True)
  165: 
  166:         with pytest.raises(TypeError, match=msg):
  167:             astype_overflowsafe(arr, dtype, copy=False)
  168: 
  169:     def test_astype_overflowsafe_dt64(self):
  170:         dtype = np.dtype("M8[ns]")
  171: 
  172:         dt = np.datetime64("2262-04-05", "D")
  173:         arr = dt + np.arange(10, dtype="m8[D]")
  174: 
  175:         # arr.astype silently overflows, so this
  176:         wrong = arr.astype(dtype)
  177:         roundtrip = wrong.astype(arr.dtype)
  178:         assert not (wrong == roundtrip).all()
  179: 
  180:         msg = "Out of bounds nanosecond timestamp"
  181:         with pytest.raises(OutOfBoundsDatetime, match=msg):
  182:             astype_overflowsafe(arr, dtype)
  183: 
  184:         # But converting to microseconds is fine, and we match numpy's results.
  185:         dtype2 = np.dtype("M8[us]")
  186:         result = astype_overflowsafe(arr, dtype2)
  187:         expected = arr.astype(dtype2)
  188:         tm.assert_numpy_array_equal(result, expected)
  189: 
  190:     def test_astype_overflowsafe_td64(self):
  191:         dtype = np.dtype("m8[ns]")
  192: 
  193:         dt = np.datetime64("2262-04-05", "D")
  194:         arr = dt + np.arange(10, dtype="m8[D]")
  195:         arr = arr.view("m8[D]")
  196: 
  197:         # arr.astype silently overflows, so this
  198:         wrong = arr.astype(dtype)
  199:         roundtrip = wrong.astype(arr.dtype)
  200:         assert not (wrong == roundtrip).all()
  201: 
  202:         msg = r"Cannot convert 106752 days to timedelta64\[ns\] without overflow"
  203:         with pytest.raises(OutOfBoundsTimedelta, match=msg):
  204:             astype_overflowsafe(arr, dtype)
  205: 
  206:         # But converting to microseconds is fine, and we match numpy's results.
  207:         dtype2 = np.dtype("m8[us]")
  208:         result = astype_overflowsafe(arr, dtype2)
  209:         expected = arr.astype(dtype2)
  210:         tm.assert_numpy_array_equal(result, expected)
  211: 
  212:     def test_astype_overflowsafe_disallow_rounding(self):
  213:         arr = np.array([-1500, 1500], dtype="M8[ns]")
  214:         dtype = np.dtype("M8[us]")
  215: 
  216:         msg = "Cannot losslessly cast '-1500 ns' to us"
  217:         with pytest.raises(ValueError, match=msg):
  218:             astype_overflowsafe(arr, dtype, round_ok=False)
  219: 
  220:         result = astype_overflowsafe(arr, dtype, round_ok=True)
  221:         expected = arr.astype(dtype)
  222:         tm.assert_numpy_array_equal(result, expected)
