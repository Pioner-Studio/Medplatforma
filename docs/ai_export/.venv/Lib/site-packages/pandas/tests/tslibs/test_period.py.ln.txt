    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import (
    5:     iNaT,
    6:     to_offset,
    7: )
    8: from pandas._libs.tslibs.period import (
    9:     extract_ordinals,
   10:     get_period_field_arr,
   11:     period_asfreq,
   12:     period_ordinal,
   13: )
   14: 
   15: import pandas._testing as tm
   16: 
   17: 
   18: def get_freq_code(freqstr: str) -> int:
   19:     off = to_offset(freqstr, is_period=True)
   20:     # error: "BaseOffset" has no attribute "_period_dtype_code"
   21:     code = off._period_dtype_code  # type: ignore[attr-defined]
   22:     return code
   23: 
   24: 
   25: @pytest.mark.parametrize(
   26:     "freq1,freq2,expected",
   27:     [
   28:         ("D", "h", 24),
   29:         ("D", "min", 1440),
   30:         ("D", "s", 86400),
   31:         ("D", "ms", 86400000),
   32:         ("D", "us", 86400000000),
   33:         ("D", "ns", 86400000000000),
   34:         ("h", "min", 60),
   35:         ("h", "s", 3600),
   36:         ("h", "ms", 3600000),
   37:         ("h", "us", 3600000000),
   38:         ("h", "ns", 3600000000000),
   39:         ("min", "s", 60),
   40:         ("min", "ms", 60000),
   41:         ("min", "us", 60000000),
   42:         ("min", "ns", 60000000000),
   43:         ("s", "ms", 1000),
   44:         ("s", "us", 1000000),
   45:         ("s", "ns", 1000000000),
   46:         ("ms", "us", 1000),
   47:         ("ms", "ns", 1000000),
   48:         ("us", "ns", 1000),
   49:     ],
   50: )
   51: def test_intra_day_conversion_factors(freq1, freq2, expected):
   52:     assert (
   53:         period_asfreq(1, get_freq_code(freq1), get_freq_code(freq2), False) == expected
   54:     )
   55: 
   56: 
   57: @pytest.mark.parametrize(
   58:     "freq,expected", [("Y", 0), ("M", 0), ("W", 1), ("D", 0), ("B", 0)]
   59: )
   60: def test_period_ordinal_start_values(freq, expected):
   61:     # information for Jan. 1, 1970.
   62:     assert period_ordinal(1970, 1, 1, 0, 0, 0, 0, 0, get_freq_code(freq)) == expected
   63: 
   64: 
   65: @pytest.mark.parametrize(
   66:     "dt,expected",
   67:     [
   68:         ((1970, 1, 4, 0, 0, 0, 0, 0), 1),
   69:         ((1970, 1, 5, 0, 0, 0, 0, 0), 2),
   70:         ((2013, 10, 6, 0, 0, 0, 0, 0), 2284),
   71:         ((2013, 10, 7, 0, 0, 0, 0, 0), 2285),
   72:     ],
   73: )
   74: def test_period_ordinal_week(dt, expected):
   75:     args = dt + (get_freq_code("W"),)
   76:     assert period_ordinal(*args) == expected
   77: 
   78: 
   79: @pytest.mark.parametrize(
   80:     "day,expected",
   81:     [
   82:         # Thursday (Oct. 3, 2013).
   83:         (3, 11415),
   84:         # Friday (Oct. 4, 2013).
   85:         (4, 11416),
   86:         # Saturday (Oct. 5, 2013).
   87:         (5, 11417),
   88:         # Sunday (Oct. 6, 2013).
   89:         (6, 11417),
   90:         # Monday (Oct. 7, 2013).
   91:         (7, 11417),
   92:         # Tuesday (Oct. 8, 2013).
   93:         (8, 11418),
   94:     ],
   95: )
   96: def test_period_ordinal_business_day(day, expected):
   97:     # 5000 is PeriodDtypeCode for BusinessDay
   98:     args = (2013, 10, day, 0, 0, 0, 0, 0, 5000)
   99:     assert period_ordinal(*args) == expected
  100: 
  101: 
  102: class TestExtractOrdinals:
  103:     def test_extract_ordinals_raises(self):
  104:         # with non-object, make sure we raise TypeError, not segfault
  105:         arr = np.arange(5)
  106:         freq = to_offset("D")
  107:         with pytest.raises(TypeError, match="values must be object-dtype"):
  108:             extract_ordinals(arr, freq)
  109: 
  110:     def test_extract_ordinals_2d(self):
  111:         freq = to_offset("D")
  112:         arr = np.empty(10, dtype=object)
  113:         arr[:] = iNaT
  114: 
  115:         res = extract_ordinals(arr, freq)
  116:         res2 = extract_ordinals(arr.reshape(5, 2), freq)
  117:         tm.assert_numpy_array_equal(res, res2.reshape(-1))
  118: 
  119: 
  120: def test_get_period_field_array_raises_on_out_of_range():
  121:     msg = "Buffer dtype mismatch, expected 'const int64_t' but got 'double'"
  122:     with pytest.raises(ValueError, match=msg):
  123:         get_period_field_arr(-1, np.empty(1), 0)
