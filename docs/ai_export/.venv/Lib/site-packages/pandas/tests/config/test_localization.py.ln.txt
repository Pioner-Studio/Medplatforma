    1: import codecs
    2: import locale
    3: import os
    4: 
    5: import pytest
    6: 
    7: from pandas._config.localization import (
    8:     can_set_locale,
    9:     get_locales,
   10:     set_locale,
   11: )
   12: 
   13: from pandas.compat import ISMUSL
   14: 
   15: import pandas as pd
   16: 
   17: _all_locales = get_locales()
   18: _current_locale = locale.setlocale(locale.LC_ALL)  # getlocale() is wrong, see GH#46595
   19: 
   20: # Don't run any of these tests if we have no locales.
   21: pytestmark = pytest.mark.skipif(not _all_locales, reason="Need locales")
   22: 
   23: _skip_if_only_one_locale = pytest.mark.skipif(
   24:     len(_all_locales) <= 1, reason="Need multiple locales for meaningful test"
   25: )
   26: 
   27: 
   28: def _get_current_locale(lc_var: int = locale.LC_ALL) -> str:
   29:     # getlocale is not always compliant with setlocale, use setlocale. GH#46595
   30:     return locale.setlocale(lc_var)
   31: 
   32: 
   33: @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
   34: def test_can_set_current_locale(lc_var):
   35:     # Can set the current locale
   36:     before_locale = _get_current_locale(lc_var)
   37:     assert can_set_locale(before_locale, lc_var=lc_var)
   38:     after_locale = _get_current_locale(lc_var)
   39:     assert before_locale == after_locale
   40: 
   41: 
   42: @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
   43: def test_can_set_locale_valid_set(lc_var):
   44:     # Can set the default locale.
   45:     before_locale = _get_current_locale(lc_var)
   46:     assert can_set_locale("", lc_var=lc_var)
   47:     after_locale = _get_current_locale(lc_var)
   48:     assert before_locale == after_locale
   49: 
   50: 
   51: @pytest.mark.parametrize(
   52:     "lc_var",
   53:     (
   54:         locale.LC_ALL,
   55:         locale.LC_CTYPE,
   56:         pytest.param(
   57:             locale.LC_TIME,
   58:             marks=pytest.mark.skipif(
   59:                 ISMUSL, reason="MUSL allows setting invalid LC_TIME."
   60:             ),
   61:         ),
   62:     ),
   63: )
   64: def test_can_set_locale_invalid_set(lc_var):
   65:     # Cannot set an invalid locale.
   66:     before_locale = _get_current_locale(lc_var)
   67:     assert not can_set_locale("non-existent_locale", lc_var=lc_var)
   68:     after_locale = _get_current_locale(lc_var)
   69:     assert before_locale == after_locale
   70: 
   71: 
   72: @pytest.mark.parametrize(
   73:     "lang,enc",
   74:     [
   75:         ("it_CH", "UTF-8"),
   76:         ("en_US", "ascii"),
   77:         ("zh_CN", "GB2312"),
   78:         ("it_IT", "ISO-8859-1"),
   79:     ],
   80: )
   81: @pytest.mark.parametrize("lc_var", (locale.LC_ALL, locale.LC_CTYPE, locale.LC_TIME))
   82: def test_can_set_locale_no_leak(lang, enc, lc_var):
   83:     # Test that can_set_locale does not leak even when returning False. See GH#46595
   84:     before_locale = _get_current_locale(lc_var)
   85:     can_set_locale((lang, enc), locale.LC_ALL)
   86:     after_locale = _get_current_locale(lc_var)
   87:     assert before_locale == after_locale
   88: 
   89: 
   90: def test_can_set_locale_invalid_get(monkeypatch):
   91:     # see GH#22129
   92:     # In some cases, an invalid locale can be set,
   93:     #  but a subsequent getlocale() raises a ValueError.
   94: 
   95:     def mock_get_locale():
   96:         raise ValueError()
   97: 
   98:     with monkeypatch.context() as m:
   99:         m.setattr(locale, "getlocale", mock_get_locale)
  100:         assert not can_set_locale("")
  101: 
  102: 
  103: def test_get_locales_at_least_one():
  104:     # see GH#9744
  105:     assert len(_all_locales) > 0
  106: 
  107: 
  108: @_skip_if_only_one_locale
  109: def test_get_locales_prefix():
  110:     first_locale = _all_locales[0]
  111:     assert len(get_locales(prefix=first_locale[:2])) > 0
  112: 
  113: 
  114: @_skip_if_only_one_locale
  115: @pytest.mark.parametrize(
  116:     "lang,enc",
  117:     [
  118:         ("it_CH", "UTF-8"),
  119:         ("en_US", "ascii"),
  120:         ("zh_CN", "GB2312"),
  121:         ("it_IT", "ISO-8859-1"),
  122:     ],
  123: )
  124: def test_set_locale(lang, enc):
  125:     before_locale = _get_current_locale()
  126: 
  127:     enc = codecs.lookup(enc).name
  128:     new_locale = lang, enc
  129: 
  130:     if not can_set_locale(new_locale):
  131:         msg = "unsupported locale setting"
  132: 
  133:         with pytest.raises(locale.Error, match=msg):
  134:             with set_locale(new_locale):
  135:                 pass
  136:     else:
  137:         with set_locale(new_locale) as normalized_locale:
  138:             new_lang, new_enc = normalized_locale.split(".")
  139:             new_enc = codecs.lookup(enc).name
  140: 
  141:             normalized_locale = new_lang, new_enc
  142:             assert normalized_locale == new_locale
  143: 
  144:     # Once we exit the "with" statement, locale should be back to what it was.
  145:     after_locale = _get_current_locale()
  146:     assert before_locale == after_locale
  147: 
  148: 
  149: def test_encoding_detected():
  150:     system_locale = os.environ.get("LC_ALL")
  151:     system_encoding = system_locale.split(".")[-1] if system_locale else "utf-8"
  152: 
  153:     assert (
  154:         codecs.lookup(pd.options.display.encoding).name
  155:         == codecs.lookup(system_encoding).name
  156:     )
