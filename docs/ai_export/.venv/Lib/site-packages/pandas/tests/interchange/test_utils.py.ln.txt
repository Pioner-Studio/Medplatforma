    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas.core.interchange.utils import dtype_to_arrow_c_fmt
    6: 
    7: # TODO: use ArrowSchema to get reference C-string.
    8: # At the time, there is no way to access ArrowSchema holding a type format string
    9: # from python. The only way to access it is to export the structure to a C-pointer,
   10: # see DataType._export_to_c() method defined in
   11: # https://github.com/apache/arrow/blob/master/python/pyarrow/types.pxi
   12: 
   13: 
   14: @pytest.mark.parametrize(
   15:     "pandas_dtype, c_string",
   16:     [
   17:         (np.dtype("bool"), "b"),
   18:         (np.dtype("int8"), "c"),
   19:         (np.dtype("uint8"), "C"),
   20:         (np.dtype("int16"), "s"),
   21:         (np.dtype("uint16"), "S"),
   22:         (np.dtype("int32"), "i"),
   23:         (np.dtype("uint32"), "I"),
   24:         (np.dtype("int64"), "l"),
   25:         (np.dtype("uint64"), "L"),
   26:         (np.dtype("float16"), "e"),
   27:         (np.dtype("float32"), "f"),
   28:         (np.dtype("float64"), "g"),
   29:         (pd.Series(["a"]).dtype, "u"),
   30:         (
   31:             pd.Series([0]).astype("datetime64[ns]").dtype,
   32:             "tsn:",
   33:         ),
   34:         (pd.CategoricalDtype(["a"]), "l"),
   35:         (np.dtype("O"), "u"),
   36:     ],
   37: )
   38: def test_dtype_to_arrow_c_fmt(pandas_dtype, c_string):  # PR01
   39:     """Test ``dtype_to_arrow_c_fmt`` utility function."""
   40:     assert dtype_to_arrow_c_fmt(pandas_dtype) == c_string
   41: 
   42: 
   43: @pytest.mark.parametrize(
   44:     "pa_dtype, args_kwargs, c_string",
   45:     [
   46:         ["null", {}, "n"],
   47:         ["bool_", {}, "b"],
   48:         ["uint8", {}, "C"],
   49:         ["uint16", {}, "S"],
   50:         ["uint32", {}, "I"],
   51:         ["uint64", {}, "L"],
   52:         ["int8", {}, "c"],
   53:         ["int16", {}, "S"],
   54:         ["int32", {}, "i"],
   55:         ["int64", {}, "l"],
   56:         ["float16", {}, "e"],
   57:         ["float32", {}, "f"],
   58:         ["float64", {}, "g"],
   59:         ["string", {}, "u"],
   60:         ["binary", {}, "z"],
   61:         ["time32", ("s",), "tts"],
   62:         ["time32", ("ms",), "ttm"],
   63:         ["time64", ("us",), "ttu"],
   64:         ["time64", ("ns",), "ttn"],
   65:         ["date32", {}, "tdD"],
   66:         ["date64", {}, "tdm"],
   67:         ["timestamp", {"unit": "s"}, "tss:"],
   68:         ["timestamp", {"unit": "ms"}, "tsm:"],
   69:         ["timestamp", {"unit": "us"}, "tsu:"],
   70:         ["timestamp", {"unit": "ns"}, "tsn:"],
   71:         ["timestamp", {"unit": "ns", "tz": "UTC"}, "tsn:UTC"],
   72:         ["duration", ("s",), "tDs"],
   73:         ["duration", ("ms",), "tDm"],
   74:         ["duration", ("us",), "tDu"],
   75:         ["duration", ("ns",), "tDn"],
   76:         ["decimal128", {"precision": 4, "scale": 2}, "d:4,2"],
   77:     ],
   78: )
   79: def test_dtype_to_arrow_c_fmt_arrowdtype(pa_dtype, args_kwargs, c_string):
   80:     # GH 52323
   81:     pa = pytest.importorskip("pyarrow")
   82:     if not args_kwargs:
   83:         pa_type = getattr(pa, pa_dtype)()
   84:     elif isinstance(args_kwargs, tuple):
   85:         pa_type = getattr(pa, pa_dtype)(*args_kwargs)
   86:     else:
   87:         pa_type = getattr(pa, pa_dtype)(**args_kwargs)
   88:     arrow_type = pd.ArrowDtype(pa_type)
   89:     assert dtype_to_arrow_c_fmt(arrow_type) == c_string
