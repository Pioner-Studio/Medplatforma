    1: import numpy as np
    2: 
    3: from pandas import (
    4:     Series,
    5:     interval_range,
    6: )
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestInferObjects:
   11:     def test_copy(self, index_or_series):
   12:         # GH#50096
   13:         # case where we don't need to do inference because it is already non-object
   14:         obj = index_or_series(np.array([1, 2, 3], dtype="int64"))
   15: 
   16:         result = obj.infer_objects(copy=False)
   17:         assert tm.shares_memory(result, obj)
   18: 
   19:         # case where we try to do inference but can't do better than object
   20:         obj2 = index_or_series(np.array(["foo", 2], dtype=object))
   21:         result2 = obj2.infer_objects(copy=False)
   22:         assert tm.shares_memory(result2, obj2)
   23: 
   24:     def test_infer_objects_series(self, index_or_series):
   25:         # GH#11221
   26:         actual = index_or_series(np.array([1, 2, 3], dtype="O")).infer_objects()
   27:         expected = index_or_series([1, 2, 3])
   28:         tm.assert_equal(actual, expected)
   29: 
   30:         actual = index_or_series(np.array([1, 2, 3, None], dtype="O")).infer_objects()
   31:         expected = index_or_series([1.0, 2.0, 3.0, np.nan])
   32:         tm.assert_equal(actual, expected)
   33: 
   34:         # only soft conversions, unconvertible pass thru unchanged
   35: 
   36:         obj = index_or_series(np.array([1, 2, 3, None, "a"], dtype="O"))
   37:         actual = obj.infer_objects()
   38:         expected = index_or_series([1, 2, 3, None, "a"], dtype=object)
   39: 
   40:         assert actual.dtype == "object"
   41:         tm.assert_equal(actual, expected)
   42: 
   43:     def test_infer_objects_interval(self, index_or_series):
   44:         # GH#50090
   45:         ii = interval_range(1, 10)
   46:         obj = index_or_series(ii)
   47: 
   48:         result = obj.astype(object).infer_objects()
   49:         tm.assert_equal(result, obj)
   50: 
   51:     def test_infer_objects_bytes(self):
   52:         # GH#49650
   53:         ser = Series([b"a"], dtype="bytes")
   54:         expected = ser.copy()
   55:         result = ser.infer_objects()
   56:         tm.assert_series_equal(result, expected)
