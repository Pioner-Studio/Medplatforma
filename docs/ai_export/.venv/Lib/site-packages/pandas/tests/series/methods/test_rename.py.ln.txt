    1: from datetime import datetime
    2: import re
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     Index,
    9:     MultiIndex,
   10:     Series,
   11:     array,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestRename:
   17:     def test_rename(self, datetime_series):
   18:         ts = datetime_series
   19:         renamer = lambda x: x.strftime("%Y%m%d")
   20:         renamed = ts.rename(renamer)
   21:         assert renamed.index[0] == renamer(ts.index[0])
   22: 
   23:         # dict
   24:         rename_dict = dict(zip(ts.index, renamed.index))
   25:         renamed2 = ts.rename(rename_dict)
   26:         tm.assert_series_equal(renamed, renamed2)
   27: 
   28:     def test_rename_partial_dict(self):
   29:         # partial dict
   30:         ser = Series(np.arange(4), index=["a", "b", "c", "d"], dtype="int64")
   31:         renamed = ser.rename({"b": "foo", "d": "bar"})
   32:         tm.assert_index_equal(renamed.index, Index(["a", "foo", "c", "bar"]))
   33: 
   34:     def test_rename_retain_index_name(self):
   35:         # index with name
   36:         renamer = Series(
   37:             np.arange(4), index=Index(["a", "b", "c", "d"], name="name"), dtype="int64"
   38:         )
   39:         renamed = renamer.rename({})
   40:         assert renamed.index.name == renamer.index.name
   41: 
   42:     def test_rename_by_series(self):
   43:         ser = Series(range(5), name="foo")
   44:         renamer = Series({1: 10, 2: 20})
   45:         result = ser.rename(renamer)
   46:         expected = Series(range(5), index=[0, 10, 20, 3, 4], name="foo")
   47:         tm.assert_series_equal(result, expected)
   48: 
   49:     def test_rename_set_name(self, using_infer_string):
   50:         ser = Series(range(4), index=list("abcd"))
   51:         for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
   52:             result = ser.rename(name)
   53:             assert result.name == name
   54:             if using_infer_string:
   55:                 tm.assert_extension_array_equal(result.index.values, ser.index.values)
   56:             else:
   57:                 tm.assert_numpy_array_equal(result.index.values, ser.index.values)
   58:             assert ser.name is None
   59: 
   60:     def test_rename_set_name_inplace(self, using_infer_string):
   61:         ser = Series(range(3), index=list("abc"))
   62:         for name in ["foo", 123, 123.0, datetime(2001, 11, 11), ("foo",)]:
   63:             ser.rename(name, inplace=True)
   64:             assert ser.name == name
   65:             exp = np.array(["a", "b", "c"], dtype=np.object_)
   66:             if using_infer_string:
   67:                 exp = array(exp, dtype="string[pyarrow_numpy]")
   68:                 tm.assert_extension_array_equal(ser.index.values, exp)
   69:             else:
   70:                 tm.assert_numpy_array_equal(ser.index.values, exp)
   71: 
   72:     def test_rename_axis_supported(self):
   73:         # Supporting axis for compatibility, detailed in GH-18589
   74:         ser = Series(range(5))
   75:         ser.rename({}, axis=0)
   76:         ser.rename({}, axis="index")
   77: 
   78:         with pytest.raises(ValueError, match="No axis named 5"):
   79:             ser.rename({}, axis=5)
   80: 
   81:     def test_rename_inplace(self, datetime_series):
   82:         renamer = lambda x: x.strftime("%Y%m%d")
   83:         expected = renamer(datetime_series.index[0])
   84: 
   85:         datetime_series.rename(renamer, inplace=True)
   86:         assert datetime_series.index[0] == expected
   87: 
   88:     def test_rename_with_custom_indexer(self):
   89:         # GH 27814
   90:         class MyIndexer:
   91:             pass
   92: 
   93:         ix = MyIndexer()
   94:         ser = Series([1, 2, 3]).rename(ix)
   95:         assert ser.name is ix
   96: 
   97:     def test_rename_with_custom_indexer_inplace(self):
   98:         # GH 27814
   99:         class MyIndexer:
  100:             pass
  101: 
  102:         ix = MyIndexer()
  103:         ser = Series([1, 2, 3])
  104:         ser.rename(ix, inplace=True)
  105:         assert ser.name is ix
  106: 
  107:     def test_rename_callable(self):
  108:         # GH 17407
  109:         ser = Series(range(1, 6), index=Index(range(2, 7), name="IntIndex"))
  110:         result = ser.rename(str)
  111:         expected = ser.rename(lambda i: str(i))
  112:         tm.assert_series_equal(result, expected)
  113: 
  114:         assert result.name == expected.name
  115: 
  116:     def test_rename_none(self):
  117:         # GH 40977
  118:         ser = Series([1, 2], name="foo")
  119:         result = ser.rename(None)
  120:         expected = Series([1, 2])
  121:         tm.assert_series_equal(result, expected)
  122: 
  123:     def test_rename_series_with_multiindex(self):
  124:         # issue #43659
  125:         arrays = [
  126:             ["bar", "baz", "baz", "foo", "qux"],
  127:             ["one", "one", "two", "two", "one"],
  128:         ]
  129: 
  130:         index = MultiIndex.from_arrays(arrays, names=["first", "second"])
  131:         ser = Series(np.ones(5), index=index)
  132:         result = ser.rename(index={"one": "yes"}, level="second", errors="raise")
  133: 
  134:         arrays_expected = [
  135:             ["bar", "baz", "baz", "foo", "qux"],
  136:             ["yes", "yes", "two", "two", "yes"],
  137:         ]
  138: 
  139:         index_expected = MultiIndex.from_arrays(
  140:             arrays_expected, names=["first", "second"]
  141:         )
  142:         series_expected = Series(np.ones(5), index=index_expected)
  143: 
  144:         tm.assert_series_equal(result, series_expected)
  145: 
  146:     def test_rename_series_with_multiindex_keeps_ea_dtypes(self):
  147:         # GH21055
  148:         arrays = [
  149:             Index([1, 2, 3], dtype="Int64").astype("category"),
  150:             Index([1, 2, 3], dtype="Int64"),
  151:         ]
  152:         mi = MultiIndex.from_arrays(arrays, names=["A", "B"])
  153:         ser = Series(1, index=mi)
  154:         result = ser.rename({1: 4}, level=1)
  155: 
  156:         arrays_expected = [
  157:             Index([1, 2, 3], dtype="Int64").astype("category"),
  158:             Index([4, 2, 3], dtype="Int64"),
  159:         ]
  160:         mi_expected = MultiIndex.from_arrays(arrays_expected, names=["A", "B"])
  161:         expected = Series(1, index=mi_expected)
  162: 
  163:         tm.assert_series_equal(result, expected)
  164: 
  165:     def test_rename_error_arg(self):
  166:         # GH 46889
  167:         ser = Series(["foo", "bar"])
  168:         match = re.escape("[2] not found in axis")
  169:         with pytest.raises(KeyError, match=match):
  170:             ser.rename({2: 9}, errors="raise")
  171: 
  172:     def test_rename_copy_false(self, using_copy_on_write, warn_copy_on_write):
  173:         # GH 46889
  174:         ser = Series(["foo", "bar"])
  175:         ser_orig = ser.copy()
  176:         shallow_copy = ser.rename({1: 9}, copy=False)
  177:         with tm.assert_cow_warning(warn_copy_on_write):
  178:             ser[0] = "foobar"
  179:         if using_copy_on_write:
  180:             assert ser_orig[0] == shallow_copy[0]
  181:             assert ser_orig[1] == shallow_copy[9]
  182:         else:
  183:             assert ser[0] == shallow_copy[0]
  184:             assert ser[1] == shallow_copy[9]
