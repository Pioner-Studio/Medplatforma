    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_basic():
    9:     s = pd.Series([[0, 1, 2], np.nan, [], (3, 4)], index=list("abcd"), name="foo")
   10:     result = s.explode()
   11:     expected = pd.Series(
   12:         [0, 1, 2, np.nan, np.nan, 3, 4], index=list("aaabcdd"), dtype=object, name="foo"
   13:     )
   14:     tm.assert_series_equal(result, expected)
   15: 
   16: 
   17: def test_mixed_type():
   18:     s = pd.Series(
   19:         [[0, 1, 2], np.nan, None, np.array([]), pd.Series(["a", "b"])], name="foo"
   20:     )
   21:     result = s.explode()
   22:     expected = pd.Series(
   23:         [0, 1, 2, np.nan, None, np.nan, "a", "b"],
   24:         index=[0, 0, 0, 1, 2, 3, 4, 4],
   25:         dtype=object,
   26:         name="foo",
   27:     )
   28:     tm.assert_series_equal(result, expected)
   29: 
   30: 
   31: def test_empty():
   32:     s = pd.Series(dtype=object)
   33:     result = s.explode()
   34:     expected = s.copy()
   35:     tm.assert_series_equal(result, expected)
   36: 
   37: 
   38: def test_nested_lists():
   39:     s = pd.Series([[[1, 2, 3]], [1, 2], 1])
   40:     result = s.explode()
   41:     expected = pd.Series([[1, 2, 3], 1, 2, 1], index=[0, 1, 1, 2])
   42:     tm.assert_series_equal(result, expected)
   43: 
   44: 
   45: def test_multi_index():
   46:     s = pd.Series(
   47:         [[0, 1, 2], np.nan, [], (3, 4)],
   48:         name="foo",
   49:         index=pd.MultiIndex.from_product([list("ab"), range(2)], names=["foo", "bar"]),
   50:     )
   51:     result = s.explode()
   52:     index = pd.MultiIndex.from_tuples(
   53:         [("a", 0), ("a", 0), ("a", 0), ("a", 1), ("b", 0), ("b", 1), ("b", 1)],
   54:         names=["foo", "bar"],
   55:     )
   56:     expected = pd.Series(
   57:         [0, 1, 2, np.nan, np.nan, 3, 4], index=index, dtype=object, name="foo"
   58:     )
   59:     tm.assert_series_equal(result, expected)
   60: 
   61: 
   62: def test_large():
   63:     s = pd.Series([range(256)]).explode()
   64:     result = s.explode()
   65:     tm.assert_series_equal(result, s)
   66: 
   67: 
   68: def test_invert_array():
   69:     df = pd.DataFrame({"a": pd.date_range("20190101", periods=3, tz="UTC")})
   70: 
   71:     listify = df.apply(lambda x: x.array, axis=1)
   72:     result = listify.explode()
   73:     tm.assert_series_equal(result, df["a"].rename())
   74: 
   75: 
   76: @pytest.mark.parametrize(
   77:     "s", [pd.Series([1, 2, 3]), pd.Series(pd.date_range("2019", periods=3, tz="UTC"))]
   78: )
   79: def test_non_object_dtype(s):
   80:     result = s.explode()
   81:     tm.assert_series_equal(result, s)
   82: 
   83: 
   84: def test_typical_usecase():
   85:     df = pd.DataFrame(
   86:         [{"var1": "a,b,c", "var2": 1}, {"var1": "d,e,f", "var2": 2}],
   87:         columns=["var1", "var2"],
   88:     )
   89:     exploded = df.var1.str.split(",").explode()
   90:     result = df[["var2"]].join(exploded)
   91:     expected = pd.DataFrame(
   92:         {"var2": [1, 1, 1, 2, 2, 2], "var1": list("abcdef")},
   93:         columns=["var2", "var1"],
   94:         index=[0, 0, 0, 1, 1, 1],
   95:     )
   96:     tm.assert_frame_equal(result, expected)
   97: 
   98: 
   99: def test_nested_EA():
  100:     # a nested EA array
  101:     s = pd.Series(
  102:         [
  103:             pd.date_range("20170101", periods=3, tz="UTC"),
  104:             pd.date_range("20170104", periods=3, tz="UTC"),
  105:         ]
  106:     )
  107:     result = s.explode()
  108:     expected = pd.Series(
  109:         pd.date_range("20170101", periods=6, tz="UTC"), index=[0, 0, 0, 1, 1, 1]
  110:     )
  111:     tm.assert_series_equal(result, expected)
  112: 
  113: 
  114: def test_duplicate_index():
  115:     # GH 28005
  116:     s = pd.Series([[1, 2], [3, 4]], index=[0, 0])
  117:     result = s.explode()
  118:     expected = pd.Series([1, 2, 3, 4], index=[0, 0, 0, 0], dtype=object)
  119:     tm.assert_series_equal(result, expected)
  120: 
  121: 
  122: def test_ignore_index():
  123:     # GH 34932
  124:     s = pd.Series([[1, 2], [3, 4]])
  125:     result = s.explode(ignore_index=True)
  126:     expected = pd.Series([1, 2, 3, 4], index=[0, 1, 2, 3], dtype=object)
  127:     tm.assert_series_equal(result, expected)
  128: 
  129: 
  130: def test_explode_sets():
  131:     # https://github.com/pandas-dev/pandas/issues/35614
  132:     s = pd.Series([{"a", "b", "c"}], index=[1])
  133:     result = s.explode().sort_values()
  134:     expected = pd.Series(["a", "b", "c"], index=[1, 1, 1])
  135:     tm.assert_series_equal(result, expected)
  136: 
  137: 
  138: def test_explode_scalars_can_ignore_index():
  139:     # https://github.com/pandas-dev/pandas/issues/40487
  140:     s = pd.Series([1, 2, 3], index=["a", "b", "c"])
  141:     result = s.explode(ignore_index=True)
  142:     expected = pd.Series([1, 2, 3])
  143:     tm.assert_series_equal(result, expected)
  144: 
  145: 
  146: @pytest.mark.parametrize("ignore_index", [True, False])
  147: def test_explode_pyarrow_list_type(ignore_index):
  148:     # GH 53602
  149:     pa = pytest.importorskip("pyarrow")
  150: 
  151:     data = [
  152:         [None, None],
  153:         [1],
  154:         [],
  155:         [2, 3],
  156:         None,
  157:     ]
  158:     ser = pd.Series(data, dtype=pd.ArrowDtype(pa.list_(pa.int64())))
  159:     result = ser.explode(ignore_index=ignore_index)
  160:     expected = pd.Series(
  161:         data=[None, None, 1, None, 2, 3, None],
  162:         index=None if ignore_index else [0, 0, 1, 2, 3, 3, 4],
  163:         dtype=pd.ArrowDtype(pa.int64()),
  164:     )
  165:     tm.assert_series_equal(result, expected)
  166: 
  167: 
  168: @pytest.mark.parametrize("ignore_index", [True, False])
  169: def test_explode_pyarrow_non_list_type(ignore_index):
  170:     pa = pytest.importorskip("pyarrow")
  171:     data = [1, 2, 3]
  172:     ser = pd.Series(data, dtype=pd.ArrowDtype(pa.int64()))
  173:     result = ser.explode(ignore_index=ignore_index)
  174:     expected = pd.Series([1, 2, 3], dtype="int64[pyarrow]", index=[0, 1, 2])
  175:     tm.assert_series_equal(result, expected)
