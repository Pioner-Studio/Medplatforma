    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Series,
    6:     bdate_range,
    7:     date_range,
    8:     period_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestBetween:
   14:     def test_between(self):
   15:         series = Series(date_range("1/1/2000", periods=10))
   16:         left, right = series[[2, 7]]
   17: 
   18:         result = series.between(left, right)
   19:         expected = (series >= left) & (series <= right)
   20:         tm.assert_series_equal(result, expected)
   21: 
   22:     def test_between_datetime_object_dtype(self):
   23:         ser = Series(bdate_range("1/1/2000", periods=20), dtype=object)
   24:         ser[::2] = np.nan
   25: 
   26:         result = ser[ser.between(ser[3], ser[17])]
   27:         expected = ser[3:18].dropna()
   28:         tm.assert_series_equal(result, expected)
   29: 
   30:         result = ser[ser.between(ser[3], ser[17], inclusive="neither")]
   31:         expected = ser[5:16].dropna()
   32:         tm.assert_series_equal(result, expected)
   33: 
   34:     def test_between_period_values(self):
   35:         ser = Series(period_range("2000-01-01", periods=10, freq="D"))
   36:         left, right = ser[[2, 7]]
   37:         result = ser.between(left, right)
   38:         expected = (ser >= left) & (ser <= right)
   39:         tm.assert_series_equal(result, expected)
   40: 
   41:     def test_between_inclusive_string(self):
   42:         # GH 40628
   43:         series = Series(date_range("1/1/2000", periods=10))
   44:         left, right = series[[2, 7]]
   45: 
   46:         result = series.between(left, right, inclusive="both")
   47:         expected = (series >= left) & (series <= right)
   48:         tm.assert_series_equal(result, expected)
   49: 
   50:         result = series.between(left, right, inclusive="left")
   51:         expected = (series >= left) & (series < right)
   52:         tm.assert_series_equal(result, expected)
   53: 
   54:         result = series.between(left, right, inclusive="right")
   55:         expected = (series > left) & (series <= right)
   56:         tm.assert_series_equal(result, expected)
   57: 
   58:         result = series.between(left, right, inclusive="neither")
   59:         expected = (series > left) & (series < right)
   60:         tm.assert_series_equal(result, expected)
   61: 
   62:     @pytest.mark.parametrize("inclusive", ["yes", True, False])
   63:     def test_between_error_args(self, inclusive):
   64:         # GH 40628
   65:         series = Series(date_range("1/1/2000", periods=10))
   66:         left, right = series[[2, 7]]
   67: 
   68:         value_error_msg = (
   69:             "Inclusive has to be either string of 'both',"
   70:             "'left', 'right', or 'neither'."
   71:         )
   72: 
   73:         with pytest.raises(ValueError, match=value_error_msg):
   74:             series = Series(date_range("1/1/2000", periods=10))
   75:             series.between(left, right, inclusive=inclusive)
