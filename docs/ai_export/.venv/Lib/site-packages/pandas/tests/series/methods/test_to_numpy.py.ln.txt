    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas import (
    7:     NA,
    8:     Series,
    9:     Timedelta,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: @pytest.mark.parametrize("dtype", ["int64", "float64"])
   15: def test_to_numpy_na_value(dtype):
   16:     # GH#48951
   17:     ser = Series([1, 2, NA, 4])
   18:     result = ser.to_numpy(dtype=dtype, na_value=0)
   19:     expected = np.array([1, 2, 0, 4], dtype=dtype)
   20:     tm.assert_numpy_array_equal(result, expected)
   21: 
   22: 
   23: def test_to_numpy_cast_before_setting_na():
   24:     # GH#50600
   25:     ser = Series([1])
   26:     result = ser.to_numpy(dtype=np.float64, na_value=np.nan)
   27:     expected = np.array([1.0])
   28:     tm.assert_numpy_array_equal(result, expected)
   29: 
   30: 
   31: @td.skip_if_no("pyarrow")
   32: def test_to_numpy_arrow_dtype_given():
   33:     # GH#57121
   34:     ser = Series([1, NA], dtype="int64[pyarrow]")
   35:     result = ser.to_numpy(dtype="float64")
   36:     expected = np.array([1.0, np.nan])
   37:     tm.assert_numpy_array_equal(result, expected)
   38: 
   39: 
   40: def test_astype_ea_int_to_td_ts():
   41:     # GH#57093
   42:     ser = Series([1, None], dtype="Int64")
   43:     result = ser.astype("m8[ns]")
   44:     expected = Series([1, Timedelta("nat")], dtype="m8[ns]")
   45:     tm.assert_series_equal(result, expected)
   46: 
   47:     result = ser.astype("M8[ns]")
   48:     expected = Series([1, Timedelta("nat")], dtype="M8[ns]")
   49:     tm.assert_series_equal(result, expected)
