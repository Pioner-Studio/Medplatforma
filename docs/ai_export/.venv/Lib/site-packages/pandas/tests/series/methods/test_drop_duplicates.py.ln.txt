    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     Categorical,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: @pytest.mark.parametrize(
   13:     "keep, expected",
   14:     [
   15:         ("first", Series([False, False, False, False, True, True, False])),
   16:         ("last", Series([False, True, True, False, False, False, False])),
   17:         (False, Series([False, True, True, False, True, True, False])),
   18:     ],
   19: )
   20: def test_drop_duplicates(any_numpy_dtype, keep, expected):
   21:     tc = Series([1, 0, 3, 5, 3, 0, 4], dtype=np.dtype(any_numpy_dtype))
   22: 
   23:     if tc.dtype == "bool":
   24:         pytest.skip("tested separately in test_drop_duplicates_bool")
   25: 
   26:     tm.assert_series_equal(tc.duplicated(keep=keep), expected)
   27:     tm.assert_series_equal(tc.drop_duplicates(keep=keep), tc[~expected])
   28:     sc = tc.copy()
   29:     return_value = sc.drop_duplicates(keep=keep, inplace=True)
   30:     assert return_value is None
   31:     tm.assert_series_equal(sc, tc[~expected])
   32: 
   33: 
   34: @pytest.mark.parametrize(
   35:     "keep, expected",
   36:     [
   37:         ("first", Series([False, False, True, True])),
   38:         ("last", Series([True, True, False, False])),
   39:         (False, Series([True, True, True, True])),
   40:     ],
   41: )
   42: def test_drop_duplicates_bool(keep, expected):
   43:     tc = Series([True, False, True, False])
   44: 
   45:     tm.assert_series_equal(tc.duplicated(keep=keep), expected)
   46:     tm.assert_series_equal(tc.drop_duplicates(keep=keep), tc[~expected])
   47:     sc = tc.copy()
   48:     return_value = sc.drop_duplicates(keep=keep, inplace=True)
   49:     tm.assert_series_equal(sc, tc[~expected])
   50:     assert return_value is None
   51: 
   52: 
   53: @pytest.mark.parametrize("values", [[], list(range(5))])
   54: def test_drop_duplicates_no_duplicates(any_numpy_dtype, keep, values):
   55:     tc = Series(values, dtype=np.dtype(any_numpy_dtype))
   56:     expected = Series([False] * len(tc), dtype="bool")
   57: 
   58:     if tc.dtype == "bool":
   59:         # 0 -> False and 1-> True
   60:         # any other value would be duplicated
   61:         tc = tc[:2]
   62:         expected = expected[:2]
   63: 
   64:     tm.assert_series_equal(tc.duplicated(keep=keep), expected)
   65: 
   66:     result_dropped = tc.drop_duplicates(keep=keep)
   67:     tm.assert_series_equal(result_dropped, tc)
   68: 
   69:     # validate shallow copy
   70:     assert result_dropped is not tc
   71: 
   72: 
   73: class TestSeriesDropDuplicates:
   74:     @pytest.fixture(
   75:         params=["int_", "uint", "float64", "str_", "timedelta64[h]", "datetime64[D]"]
   76:     )
   77:     def dtype(self, request):
   78:         return request.param
   79: 
   80:     @pytest.fixture
   81:     def cat_series_unused_category(self, dtype, ordered):
   82:         # Test case 1
   83:         cat_array = np.array([1, 2, 3, 4, 5], dtype=np.dtype(dtype))
   84: 
   85:         input1 = np.array([1, 2, 3, 3], dtype=np.dtype(dtype))
   86:         cat = Categorical(input1, categories=cat_array, ordered=ordered)
   87:         tc1 = Series(cat)
   88:         return tc1
   89: 
   90:     def test_drop_duplicates_categorical_non_bool(self, cat_series_unused_category):
   91:         tc1 = cat_series_unused_category
   92: 
   93:         expected = Series([False, False, False, True])
   94: 
   95:         result = tc1.duplicated()
   96:         tm.assert_series_equal(result, expected)
   97: 
   98:         result = tc1.drop_duplicates()
   99:         tm.assert_series_equal(result, tc1[~expected])
  100: 
  101:         sc = tc1.copy()
  102:         return_value = sc.drop_duplicates(inplace=True)
  103:         assert return_value is None
  104:         tm.assert_series_equal(sc, tc1[~expected])
  105: 
  106:     def test_drop_duplicates_categorical_non_bool_keeplast(
  107:         self, cat_series_unused_category
  108:     ):
  109:         tc1 = cat_series_unused_category
  110: 
  111:         expected = Series([False, False, True, False])
  112: 
  113:         result = tc1.duplicated(keep="last")
  114:         tm.assert_series_equal(result, expected)
  115: 
  116:         result = tc1.drop_duplicates(keep="last")
  117:         tm.assert_series_equal(result, tc1[~expected])
  118: 
  119:         sc = tc1.copy()
  120:         return_value = sc.drop_duplicates(keep="last", inplace=True)
  121:         assert return_value is None
  122:         tm.assert_series_equal(sc, tc1[~expected])
  123: 
  124:     def test_drop_duplicates_categorical_non_bool_keepfalse(
  125:         self, cat_series_unused_category
  126:     ):
  127:         tc1 = cat_series_unused_category
  128: 
  129:         expected = Series([False, False, True, True])
  130: 
  131:         result = tc1.duplicated(keep=False)
  132:         tm.assert_series_equal(result, expected)
  133: 
  134:         result = tc1.drop_duplicates(keep=False)
  135:         tm.assert_series_equal(result, tc1[~expected])
  136: 
  137:         sc = tc1.copy()
  138:         return_value = sc.drop_duplicates(keep=False, inplace=True)
  139:         assert return_value is None
  140:         tm.assert_series_equal(sc, tc1[~expected])
  141: 
  142:     @pytest.fixture
  143:     def cat_series(self, dtype, ordered):
  144:         # no unused categories, unlike cat_series_unused_category
  145:         cat_array = np.array([1, 2, 3, 4, 5], dtype=np.dtype(dtype))
  146: 
  147:         input2 = np.array([1, 2, 3, 5, 3, 2, 4], dtype=np.dtype(dtype))
  148:         cat = Categorical(input2, categories=cat_array, ordered=ordered)
  149:         tc2 = Series(cat)
  150:         return tc2
  151: 
  152:     def test_drop_duplicates_categorical_non_bool2(self, cat_series):
  153:         tc2 = cat_series
  154: 
  155:         expected = Series([False, False, False, False, True, True, False])
  156: 
  157:         result = tc2.duplicated()
  158:         tm.assert_series_equal(result, expected)
  159: 
  160:         result = tc2.drop_duplicates()
  161:         tm.assert_series_equal(result, tc2[~expected])
  162: 
  163:         sc = tc2.copy()
  164:         return_value = sc.drop_duplicates(inplace=True)
  165:         assert return_value is None
  166:         tm.assert_series_equal(sc, tc2[~expected])
  167: 
  168:     def test_drop_duplicates_categorical_non_bool2_keeplast(self, cat_series):
  169:         tc2 = cat_series
  170: 
  171:         expected = Series([False, True, True, False, False, False, False])
  172: 
  173:         result = tc2.duplicated(keep="last")
  174:         tm.assert_series_equal(result, expected)
  175: 
  176:         result = tc2.drop_duplicates(keep="last")
  177:         tm.assert_series_equal(result, tc2[~expected])
  178: 
  179:         sc = tc2.copy()
  180:         return_value = sc.drop_duplicates(keep="last", inplace=True)
  181:         assert return_value is None
  182:         tm.assert_series_equal(sc, tc2[~expected])
  183: 
  184:     def test_drop_duplicates_categorical_non_bool2_keepfalse(self, cat_series):
  185:         tc2 = cat_series
  186: 
  187:         expected = Series([False, True, True, False, True, True, False])
  188: 
  189:         result = tc2.duplicated(keep=False)
  190:         tm.assert_series_equal(result, expected)
  191: 
  192:         result = tc2.drop_duplicates(keep=False)
  193:         tm.assert_series_equal(result, tc2[~expected])
  194: 
  195:         sc = tc2.copy()
  196:         return_value = sc.drop_duplicates(keep=False, inplace=True)
  197:         assert return_value is None
  198:         tm.assert_series_equal(sc, tc2[~expected])
  199: 
  200:     def test_drop_duplicates_categorical_bool(self, ordered):
  201:         tc = Series(
  202:             Categorical(
  203:                 [True, False, True, False], categories=[True, False], ordered=ordered
  204:             )
  205:         )
  206: 
  207:         expected = Series([False, False, True, True])
  208:         tm.assert_series_equal(tc.duplicated(), expected)
  209:         tm.assert_series_equal(tc.drop_duplicates(), tc[~expected])
  210:         sc = tc.copy()
  211:         return_value = sc.drop_duplicates(inplace=True)
  212:         assert return_value is None
  213:         tm.assert_series_equal(sc, tc[~expected])
  214: 
  215:         expected = Series([True, True, False, False])
  216:         tm.assert_series_equal(tc.duplicated(keep="last"), expected)
  217:         tm.assert_series_equal(tc.drop_duplicates(keep="last"), tc[~expected])
  218:         sc = tc.copy()
  219:         return_value = sc.drop_duplicates(keep="last", inplace=True)
  220:         assert return_value is None
  221:         tm.assert_series_equal(sc, tc[~expected])
  222: 
  223:         expected = Series([True, True, True, True])
  224:         tm.assert_series_equal(tc.duplicated(keep=False), expected)
  225:         tm.assert_series_equal(tc.drop_duplicates(keep=False), tc[~expected])
  226:         sc = tc.copy()
  227:         return_value = sc.drop_duplicates(keep=False, inplace=True)
  228:         assert return_value is None
  229:         tm.assert_series_equal(sc, tc[~expected])
  230: 
  231:     def test_drop_duplicates_categorical_bool_na(self, nulls_fixture):
  232:         # GH#44351
  233:         ser = Series(
  234:             Categorical(
  235:                 [True, False, True, False, nulls_fixture],
  236:                 categories=[True, False],
  237:                 ordered=True,
  238:             )
  239:         )
  240:         result = ser.drop_duplicates()
  241:         expected = Series(
  242:             Categorical([True, False, np.nan], categories=[True, False], ordered=True),
  243:             index=[0, 1, 4],
  244:         )
  245:         tm.assert_series_equal(result, expected)
  246: 
  247:     def test_drop_duplicates_ignore_index(self):
  248:         # GH#48304
  249:         ser = Series([1, 2, 2, 3])
  250:         result = ser.drop_duplicates(ignore_index=True)
  251:         expected = Series([1, 2, 3])
  252:         tm.assert_series_equal(result, expected)
  253: 
  254:     def test_duplicated_arrow_dtype(self):
  255:         pytest.importorskip("pyarrow")
  256:         ser = Series([True, False, None, False], dtype="bool[pyarrow]")
  257:         result = ser.drop_duplicates()
  258:         expected = Series([True, False, None], dtype="bool[pyarrow]")
  259:         tm.assert_series_equal(result, expected)
  260: 
  261:     def test_drop_duplicates_arrow_strings(self):
  262:         # GH#54904
  263:         pa = pytest.importorskip("pyarrow")
  264:         ser = Series(["a", "a"], dtype=pd.ArrowDtype(pa.string()))
  265:         result = ser.drop_duplicates()
  266:         expecetd = Series(["a"], dtype=pd.ArrowDtype(pa.string()))
  267:         tm.assert_series_equal(result, expecetd)
