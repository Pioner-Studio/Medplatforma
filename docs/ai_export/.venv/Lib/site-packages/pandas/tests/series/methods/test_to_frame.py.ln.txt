    1: import pytest
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Index,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestToFrame:
   12:     def test_to_frame_respects_name_none(self):
   13:         # GH#44212 if we explicitly pass name=None, then that should be respected,
   14:         #  not changed to 0
   15:         # GH-45448 this is first deprecated & enforced in 2.0
   16:         ser = Series(range(3))
   17:         result = ser.to_frame(None)
   18: 
   19:         exp_index = Index([None], dtype=object)
   20:         tm.assert_index_equal(result.columns, exp_index)
   21: 
   22:         result = ser.rename("foo").to_frame(None)
   23:         exp_index = Index([None], dtype=object)
   24:         tm.assert_index_equal(result.columns, exp_index)
   25: 
   26:     def test_to_frame(self, datetime_series):
   27:         datetime_series.name = None
   28:         rs = datetime_series.to_frame()
   29:         xp = DataFrame(datetime_series.values, index=datetime_series.index)
   30:         tm.assert_frame_equal(rs, xp)
   31: 
   32:         datetime_series.name = "testname"
   33:         rs = datetime_series.to_frame()
   34:         xp = DataFrame(
   35:             {"testname": datetime_series.values}, index=datetime_series.index
   36:         )
   37:         tm.assert_frame_equal(rs, xp)
   38: 
   39:         rs = datetime_series.to_frame(name="testdifferent")
   40:         xp = DataFrame(
   41:             {"testdifferent": datetime_series.values}, index=datetime_series.index
   42:         )
   43:         tm.assert_frame_equal(rs, xp)
   44: 
   45:     @pytest.mark.filterwarnings(
   46:         "ignore:Passing a BlockManager|Passing a SingleBlockManager:DeprecationWarning"
   47:     )
   48:     def test_to_frame_expanddim(self):
   49:         # GH#9762
   50: 
   51:         class SubclassedSeries(Series):
   52:             @property
   53:             def _constructor_expanddim(self):
   54:                 return SubclassedFrame
   55: 
   56:         class SubclassedFrame(DataFrame):
   57:             pass
   58: 
   59:         ser = SubclassedSeries([1, 2, 3], name="X")
   60:         result = ser.to_frame()
   61:         assert isinstance(result, SubclassedFrame)
   62:         expected = SubclassedFrame({"X": [1, 2, 3]})
   63:         tm.assert_frame_equal(result, expected)
