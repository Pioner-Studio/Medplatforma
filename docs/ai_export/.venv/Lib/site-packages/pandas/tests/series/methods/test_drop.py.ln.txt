    1: import pytest
    2: 
    3: from pandas import (
    4:     Index,
    5:     Series,
    6: )
    7: import pandas._testing as tm
    8: from pandas.api.types import is_bool_dtype
    9: 
   10: 
   11: @pytest.mark.parametrize(
   12:     "data, index, drop_labels, axis, expected_data, expected_index",
   13:     [
   14:         # Unique Index
   15:         ([1, 2], ["one", "two"], ["two"], 0, [1], ["one"]),
   16:         ([1, 2], ["one", "two"], ["two"], "rows", [1], ["one"]),
   17:         ([1, 1, 2], ["one", "two", "one"], ["two"], 0, [1, 2], ["one", "one"]),
   18:         # GH 5248 Non-Unique Index
   19:         ([1, 1, 2], ["one", "two", "one"], "two", 0, [1, 2], ["one", "one"]),
   20:         ([1, 1, 2], ["one", "two", "one"], ["one"], 0, [1], ["two"]),
   21:         ([1, 1, 2], ["one", "two", "one"], "one", 0, [1], ["two"]),
   22:     ],
   23: )
   24: def test_drop_unique_and_non_unique_index(
   25:     data, index, axis, drop_labels, expected_data, expected_index
   26: ):
   27:     ser = Series(data=data, index=index)
   28:     result = ser.drop(drop_labels, axis=axis)
   29:     expected = Series(data=expected_data, index=expected_index)
   30:     tm.assert_series_equal(result, expected)
   31: 
   32: 
   33: @pytest.mark.parametrize(
   34:     "data, index, drop_labels, axis, error_type, error_desc",
   35:     [
   36:         # single string/tuple-like
   37:         (range(3), list("abc"), "bc", 0, KeyError, "not found in axis"),
   38:         # bad axis
   39:         (range(3), list("abc"), ("a",), 0, KeyError, "not found in axis"),
   40:         (range(3), list("abc"), "one", "columns", ValueError, "No axis named columns"),
   41:     ],
   42: )
   43: def test_drop_exception_raised(data, index, drop_labels, axis, error_type, error_desc):
   44:     ser = Series(data, index=index)
   45:     with pytest.raises(error_type, match=error_desc):
   46:         ser.drop(drop_labels, axis=axis)
   47: 
   48: 
   49: def test_drop_with_ignore_errors():
   50:     # errors='ignore'
   51:     ser = Series(range(3), index=list("abc"))
   52:     result = ser.drop("bc", errors="ignore")
   53:     tm.assert_series_equal(result, ser)
   54:     result = ser.drop(["a", "d"], errors="ignore")
   55:     expected = ser.iloc[1:]
   56:     tm.assert_series_equal(result, expected)
   57: 
   58:     # GH 8522
   59:     ser = Series([2, 3], index=[True, False])
   60:     assert is_bool_dtype(ser.index)
   61:     assert ser.index.dtype == bool
   62:     result = ser.drop(True)
   63:     expected = Series([3], index=[False])
   64:     tm.assert_series_equal(result, expected)
   65: 
   66: 
   67: @pytest.mark.parametrize("index", [[1, 2, 3], [1, 1, 3]])
   68: @pytest.mark.parametrize("drop_labels", [[], [1], [3]])
   69: def test_drop_empty_list(index, drop_labels):
   70:     # GH 21494
   71:     expected_index = [i for i in index if i not in drop_labels]
   72:     series = Series(index=index, dtype=object).drop(drop_labels)
   73:     expected = Series(index=expected_index, dtype=object)
   74:     tm.assert_series_equal(series, expected)
   75: 
   76: 
   77: @pytest.mark.parametrize(
   78:     "data, index, drop_labels",
   79:     [
   80:         (None, [1, 2, 3], [1, 4]),
   81:         (None, [1, 2, 2], [1, 4]),
   82:         ([2, 3], [0, 1], [False, True]),
   83:     ],
   84: )
   85: def test_drop_non_empty_list(data, index, drop_labels):
   86:     # GH 21494 and GH 16877
   87:     dtype = object if data is None else None
   88:     ser = Series(data=data, index=index, dtype=dtype)
   89:     with pytest.raises(KeyError, match="not found in axis"):
   90:         ser.drop(drop_labels)
   91: 
   92: 
   93: def test_drop_index_ea_dtype(any_numeric_ea_dtype):
   94:     # GH#45860
   95:     df = Series(100, index=Index([1, 2, 2], dtype=any_numeric_ea_dtype))
   96:     idx = Index([df.index[1]])
   97:     result = df.drop(idx)
   98:     expected = Series(100, index=Index([1], dtype=any_numeric_ea_dtype))
   99:     tm.assert_series_equal(result, expected)
