    1: import pytest
    2: 
    3: from pandas import (
    4:     Index,
    5:     MultiIndex,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestSeriesRenameAxis:
   12:     def test_rename_axis_mapper(self):
   13:         # GH 19978
   14:         mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
   15:         ser = Series(list(range(len(mi))), index=mi)
   16: 
   17:         result = ser.rename_axis(index={"ll": "foo"})
   18:         assert result.index.names == ["foo", "nn"]
   19: 
   20:         result = ser.rename_axis(index=str.upper, axis=0)
   21:         assert result.index.names == ["LL", "NN"]
   22: 
   23:         result = ser.rename_axis(index=["foo", "goo"])
   24:         assert result.index.names == ["foo", "goo"]
   25: 
   26:         with pytest.raises(TypeError, match="unexpected"):
   27:             ser.rename_axis(columns="wrong")
   28: 
   29:     def test_rename_axis_inplace(self, datetime_series):
   30:         # GH 15704
   31:         expected = datetime_series.rename_axis("foo")
   32:         result = datetime_series
   33:         no_return = result.rename_axis("foo", inplace=True)
   34: 
   35:         assert no_return is None
   36:         tm.assert_series_equal(result, expected)
   37: 
   38:     @pytest.mark.parametrize("kwargs", [{"mapper": None}, {"index": None}, {}])
   39:     def test_rename_axis_none(self, kwargs):
   40:         # GH 25034
   41:         index = Index(list("abc"), name="foo")
   42:         ser = Series([1, 2, 3], index=index)
   43: 
   44:         result = ser.rename_axis(**kwargs)
   45:         expected_index = index.rename(None) if kwargs else index
   46:         expected = Series([1, 2, 3], index=expected_index)
   47:         tm.assert_series_equal(result, expected)
