    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import Series
    6: import pandas._testing as tm
    7: 
    8: 
    9: class TestSeriesRound:
   10:     def test_round(self, datetime_series):
   11:         datetime_series.index.name = "index_name"
   12:         result = datetime_series.round(2)
   13:         expected = Series(
   14:             np.round(datetime_series.values, 2), index=datetime_series.index, name="ts"
   15:         )
   16:         tm.assert_series_equal(result, expected)
   17:         assert result.name == datetime_series.name
   18: 
   19:     def test_round_numpy(self, any_float_dtype):
   20:         # See GH#12600
   21:         ser = Series([1.53, 1.36, 0.06], dtype=any_float_dtype)
   22:         out = np.round(ser, decimals=0)
   23:         expected = Series([2.0, 1.0, 0.0], dtype=any_float_dtype)
   24:         tm.assert_series_equal(out, expected)
   25: 
   26:         msg = "the 'out' parameter is not supported"
   27:         with pytest.raises(ValueError, match=msg):
   28:             np.round(ser, decimals=0, out=ser)
   29: 
   30:     def test_round_numpy_with_nan(self, any_float_dtype):
   31:         # See GH#14197
   32:         ser = Series([1.53, np.nan, 0.06], dtype=any_float_dtype)
   33:         with tm.assert_produces_warning(None):
   34:             result = ser.round()
   35:         expected = Series([2.0, np.nan, 0.0], dtype=any_float_dtype)
   36:         tm.assert_series_equal(result, expected)
   37: 
   38:     def test_round_builtin(self, any_float_dtype):
   39:         ser = Series(
   40:             [1.123, 2.123, 3.123],
   41:             index=range(3),
   42:             dtype=any_float_dtype,
   43:         )
   44:         result = round(ser)
   45:         expected_rounded0 = Series(
   46:             [1.0, 2.0, 3.0], index=range(3), dtype=any_float_dtype
   47:         )
   48:         tm.assert_series_equal(result, expected_rounded0)
   49: 
   50:         decimals = 2
   51:         expected_rounded = Series(
   52:             [1.12, 2.12, 3.12], index=range(3), dtype=any_float_dtype
   53:         )
   54:         result = round(ser, decimals)
   55:         tm.assert_series_equal(result, expected_rounded)
   56: 
   57:     @pytest.mark.parametrize("method", ["round", "floor", "ceil"])
   58:     @pytest.mark.parametrize("freq", ["s", "5s", "min", "5min", "h", "5h"])
   59:     def test_round_nat(self, method, freq, unit):
   60:         # GH14940, GH#56158
   61:         ser = Series([pd.NaT], dtype=f"M8[{unit}]")
   62:         expected = Series(pd.NaT, dtype=f"M8[{unit}]")
   63:         round_method = getattr(ser.dt, method)
   64:         result = round_method(freq)
   65:         tm.assert_series_equal(result, expected)
   66: 
   67:     def test_round_ea_boolean(self):
   68:         # GH#55936
   69:         ser = Series([True, False], dtype="boolean")
   70:         expected = ser.copy()
   71:         result = ser.round(2)
   72:         tm.assert_series_equal(result, expected)
   73:         result.iloc[0] = False
   74:         tm.assert_series_equal(ser, expected)
