    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7:     array as pd_array,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: @pytest.fixture
   14: def df():
   15:     """
   16:     base dataframe for testing
   17:     """
   18:     return DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   19: 
   20: 
   21: def test_case_when_caselist_is_not_a_list(df):
   22:     """
   23:     Raise ValueError if caselist is not a list.
   24:     """
   25:     msg = "The caselist argument should be a list; "
   26:     msg += "instead got.+"
   27:     with pytest.raises(TypeError, match=msg):  # GH39154
   28:         df["a"].case_when(caselist=())
   29: 
   30: 
   31: def test_case_when_no_caselist(df):
   32:     """
   33:     Raise ValueError if no caselist is provided.
   34:     """
   35:     msg = "provide at least one boolean condition, "
   36:     msg += "with a corresponding replacement."
   37:     with pytest.raises(ValueError, match=msg):  # GH39154
   38:         df["a"].case_when([])
   39: 
   40: 
   41: def test_case_when_odd_caselist(df):
   42:     """
   43:     Raise ValueError if no of caselist is odd.
   44:     """
   45:     msg = "Argument 0 must have length 2; "
   46:     msg += "a condition and replacement; instead got length 3."
   47: 
   48:     with pytest.raises(ValueError, match=msg):
   49:         df["a"].case_when([(df["a"].eq(1), 1, df.a.gt(1))])
   50: 
   51: 
   52: def test_case_when_raise_error_from_mask(df):
   53:     """
   54:     Raise Error from within Series.mask
   55:     """
   56:     msg = "Failed to apply condition0 and replacement0."
   57:     with pytest.raises(ValueError, match=msg):
   58:         df["a"].case_when([(df["a"].eq(1), [1, 2])])
   59: 
   60: 
   61: def test_case_when_single_condition(df):
   62:     """
   63:     Test output on a single condition.
   64:     """
   65:     result = Series([np.nan, np.nan, np.nan]).case_when([(df.a.eq(1), 1)])
   66:     expected = Series([1, np.nan, np.nan])
   67:     tm.assert_series_equal(result, expected)
   68: 
   69: 
   70: def test_case_when_multiple_conditions(df):
   71:     """
   72:     Test output when booleans are derived from a computation
   73:     """
   74:     result = Series([np.nan, np.nan, np.nan]).case_when(
   75:         [(df.a.eq(1), 1), (Series([False, True, False]), 2)]
   76:     )
   77:     expected = Series([1, 2, np.nan])
   78:     tm.assert_series_equal(result, expected)
   79: 
   80: 
   81: def test_case_when_multiple_conditions_replacement_list(df):
   82:     """
   83:     Test output when replacement is a list
   84:     """
   85:     result = Series([np.nan, np.nan, np.nan]).case_when(
   86:         [([True, False, False], 1), (df["a"].gt(1) & df["b"].eq(5), [1, 2, 3])]
   87:     )
   88:     expected = Series([1, 2, np.nan])
   89:     tm.assert_series_equal(result, expected)
   90: 
   91: 
   92: def test_case_when_multiple_conditions_replacement_extension_dtype(df):
   93:     """
   94:     Test output when replacement has an extension dtype
   95:     """
   96:     result = Series([np.nan, np.nan, np.nan]).case_when(
   97:         [
   98:             ([True, False, False], 1),
   99:             (df["a"].gt(1) & df["b"].eq(5), pd_array([1, 2, 3], dtype="Int64")),
  100:         ],
  101:     )
  102:     expected = Series([1, 2, np.nan], dtype="Float64")
  103:     tm.assert_series_equal(result, expected)
  104: 
  105: 
  106: def test_case_when_multiple_conditions_replacement_series(df):
  107:     """
  108:     Test output when replacement is a Series
  109:     """
  110:     result = Series([np.nan, np.nan, np.nan]).case_when(
  111:         [
  112:             (np.array([True, False, False]), 1),
  113:             (df["a"].gt(1) & df["b"].eq(5), Series([1, 2, 3])),
  114:         ],
  115:     )
  116:     expected = Series([1, 2, np.nan])
  117:     tm.assert_series_equal(result, expected)
  118: 
  119: 
  120: def test_case_when_non_range_index():
  121:     """
  122:     Test output if index is not RangeIndex
  123:     """
  124:     rng = np.random.default_rng(seed=123)
  125:     dates = date_range("1/1/2000", periods=8)
  126:     df = DataFrame(
  127:         rng.standard_normal(size=(8, 4)), index=dates, columns=["A", "B", "C", "D"]
  128:     )
  129:     result = Series(5, index=df.index, name="A").case_when([(df.A.gt(0), df.B)])
  130:     expected = df.A.mask(df.A.gt(0), df.B).where(df.A.gt(0), 5)
  131:     tm.assert_series_equal(result, expected)
  132: 
  133: 
  134: def test_case_when_callable():
  135:     """
  136:     Test output on a callable
  137:     """
  138:     # https://numpy.org/doc/stable/reference/generated/numpy.piecewise.html
  139:     x = np.linspace(-2.5, 2.5, 6)
  140:     ser = Series(x)
  141:     result = ser.case_when(
  142:         caselist=[
  143:             (lambda df: df < 0, lambda df: -df),
  144:             (lambda df: df >= 0, lambda df: df),
  145:         ]
  146:     )
  147:     expected = np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])
  148:     tm.assert_series_equal(result, Series(expected))
