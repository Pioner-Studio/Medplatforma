    1: import math
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     Series,
    9:     date_range,
   10:     isna,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestSeriesCov:
   16:     def test_cov(self, datetime_series):
   17:         # full overlap
   18:         tm.assert_almost_equal(
   19:             datetime_series.cov(datetime_series), datetime_series.std() ** 2
   20:         )
   21: 
   22:         # partial overlap
   23:         tm.assert_almost_equal(
   24:             datetime_series[:15].cov(datetime_series[5:]),
   25:             datetime_series[5:15].std() ** 2,
   26:         )
   27: 
   28:         # No overlap
   29:         assert np.isnan(datetime_series[::2].cov(datetime_series[1::2]))
   30: 
   31:         # all NA
   32:         cp = datetime_series[:10].copy()
   33:         cp[:] = np.nan
   34:         assert isna(cp.cov(cp))
   35: 
   36:         # min_periods
   37:         assert isna(datetime_series[:15].cov(datetime_series[5:], min_periods=12))
   38: 
   39:         ts1 = datetime_series[:15].reindex(datetime_series.index)
   40:         ts2 = datetime_series[5:].reindex(datetime_series.index)
   41:         assert isna(ts1.cov(ts2, min_periods=12))
   42: 
   43:     @pytest.mark.parametrize("test_ddof", [None, 0, 1, 2, 3])
   44:     @pytest.mark.parametrize("dtype", ["float64", "Float64"])
   45:     def test_cov_ddof(self, test_ddof, dtype):
   46:         # GH#34611
   47:         np_array1 = np.random.default_rng(2).random(10)
   48:         np_array2 = np.random.default_rng(2).random(10)
   49: 
   50:         s1 = Series(np_array1, dtype=dtype)
   51:         s2 = Series(np_array2, dtype=dtype)
   52: 
   53:         result = s1.cov(s2, ddof=test_ddof)
   54:         expected = np.cov(np_array1, np_array2, ddof=test_ddof)[0][1]
   55:         assert math.isclose(expected, result)
   56: 
   57: 
   58: class TestSeriesCorr:
   59:     @pytest.mark.parametrize("dtype", ["float64", "Float64"])
   60:     def test_corr(self, datetime_series, dtype):
   61:         stats = pytest.importorskip("scipy.stats")
   62: 
   63:         datetime_series = datetime_series.astype(dtype)
   64: 
   65:         # full overlap
   66:         tm.assert_almost_equal(datetime_series.corr(datetime_series), 1)
   67: 
   68:         # partial overlap
   69:         tm.assert_almost_equal(datetime_series[:15].corr(datetime_series[5:]), 1)
   70: 
   71:         assert isna(datetime_series[:15].corr(datetime_series[5:], min_periods=12))
   72: 
   73:         ts1 = datetime_series[:15].reindex(datetime_series.index)
   74:         ts2 = datetime_series[5:].reindex(datetime_series.index)
   75:         assert isna(ts1.corr(ts2, min_periods=12))
   76: 
   77:         # No overlap
   78:         assert np.isnan(datetime_series[::2].corr(datetime_series[1::2]))
   79: 
   80:         # all NA
   81:         cp = datetime_series[:10].copy()
   82:         cp[:] = np.nan
   83:         assert isna(cp.corr(cp))
   84: 
   85:         A = Series(
   86:             np.arange(10, dtype=np.float64),
   87:             index=date_range("2020-01-01", periods=10),
   88:             name="ts",
   89:         )
   90:         B = A.copy()
   91:         result = A.corr(B)
   92:         expected, _ = stats.pearsonr(A, B)
   93:         tm.assert_almost_equal(result, expected)
   94: 
   95:     def test_corr_rank(self):
   96:         stats = pytest.importorskip("scipy.stats")
   97: 
   98:         # kendall and spearman
   99:         A = Series(
  100:             np.arange(10, dtype=np.float64),
  101:             index=date_range("2020-01-01", periods=10),
  102:             name="ts",
  103:         )
  104:         B = A.copy()
  105:         A[-5:] = A[:5].copy()
  106:         result = A.corr(B, method="kendall")
  107:         expected = stats.kendalltau(A, B)[0]
  108:         tm.assert_almost_equal(result, expected)
  109: 
  110:         result = A.corr(B, method="spearman")
  111:         expected = stats.spearmanr(A, B)[0]
  112:         tm.assert_almost_equal(result, expected)
  113: 
  114:         # results from R
  115:         A = Series(
  116:             [
  117:                 -0.89926396,
  118:                 0.94209606,
  119:                 -1.03289164,
  120:                 -0.95445587,
  121:                 0.76910310,
  122:                 -0.06430576,
  123:                 -2.09704447,
  124:                 0.40660407,
  125:                 -0.89926396,
  126:                 0.94209606,
  127:             ]
  128:         )
  129:         B = Series(
  130:             [
  131:                 -1.01270225,
  132:                 -0.62210117,
  133:                 -1.56895827,
  134:                 0.59592943,
  135:                 -0.01680292,
  136:                 1.17258718,
  137:                 -1.06009347,
  138:                 -0.10222060,
  139:                 -0.89076239,
  140:                 0.89372375,
  141:             ]
  142:         )
  143:         kexp = 0.4319297
  144:         sexp = 0.5853767
  145:         tm.assert_almost_equal(A.corr(B, method="kendall"), kexp)
  146:         tm.assert_almost_equal(A.corr(B, method="spearman"), sexp)
  147: 
  148:     def test_corr_invalid_method(self):
  149:         # GH PR #22298
  150:         s1 = Series(np.random.default_rng(2).standard_normal(10))
  151:         s2 = Series(np.random.default_rng(2).standard_normal(10))
  152:         msg = "method must be either 'pearson', 'spearman', 'kendall', or a callable, "
  153:         with pytest.raises(ValueError, match=msg):
  154:             s1.corr(s2, method="____")
  155: 
  156:     def test_corr_callable_method(self, datetime_series):
  157:         # simple correlation example
  158:         # returns 1 if exact equality, 0 otherwise
  159:         my_corr = lambda a, b: 1.0 if (a == b).all() else 0.0
  160: 
  161:         # simple example
  162:         s1 = Series([1, 2, 3, 4, 5])
  163:         s2 = Series([5, 4, 3, 2, 1])
  164:         expected = 0
  165:         tm.assert_almost_equal(s1.corr(s2, method=my_corr), expected)
  166: 
  167:         # full overlap
  168:         tm.assert_almost_equal(
  169:             datetime_series.corr(datetime_series, method=my_corr), 1.0
  170:         )
  171: 
  172:         # partial overlap
  173:         tm.assert_almost_equal(
  174:             datetime_series[:15].corr(datetime_series[5:], method=my_corr), 1.0
  175:         )
  176: 
  177:         # No overlap
  178:         assert np.isnan(
  179:             datetime_series[::2].corr(datetime_series[1::2], method=my_corr)
  180:         )
  181: 
  182:         # dataframe example
  183:         df = pd.DataFrame([s1, s2])
  184:         expected = pd.DataFrame([{0: 1.0, 1: 0}, {0: 0, 1: 1.0}])
  185:         tm.assert_almost_equal(df.transpose().corr(method=my_corr), expected)
