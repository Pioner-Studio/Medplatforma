    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Series,
    6:     Timestamp,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestCopy:
   12:     @pytest.mark.parametrize("deep", ["default", None, False, True])
   13:     def test_copy(self, deep, using_copy_on_write, warn_copy_on_write):
   14:         ser = Series(np.arange(10), dtype="float64")
   15: 
   16:         # default deep is True
   17:         if deep == "default":
   18:             ser2 = ser.copy()
   19:         else:
   20:             ser2 = ser.copy(deep=deep)
   21: 
   22:         if using_copy_on_write:
   23:             # INFO(CoW) a shallow copy doesn't yet copy the data
   24:             # but parent will not be modified (CoW)
   25:             if deep is None or deep is False:
   26:                 assert np.may_share_memory(ser.values, ser2.values)
   27:             else:
   28:                 assert not np.may_share_memory(ser.values, ser2.values)
   29: 
   30:         with tm.assert_cow_warning(warn_copy_on_write and deep is False):
   31:             ser2[::2] = np.nan
   32: 
   33:         if deep is not False or using_copy_on_write:
   34:             # Did not modify original Series
   35:             assert np.isnan(ser2[0])
   36:             assert not np.isnan(ser[0])
   37:         else:
   38:             # we DID modify the original Series
   39:             assert np.isnan(ser2[0])
   40:             assert np.isnan(ser[0])
   41: 
   42:     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
   43:     @pytest.mark.parametrize("deep", ["default", None, False, True])
   44:     def test_copy_tzaware(self, deep, using_copy_on_write):
   45:         # GH#11794
   46:         # copy of tz-aware
   47:         expected = Series([Timestamp("2012/01/01", tz="UTC")])
   48:         expected2 = Series([Timestamp("1999/01/01", tz="UTC")])
   49: 
   50:         ser = Series([Timestamp("2012/01/01", tz="UTC")])
   51: 
   52:         if deep == "default":
   53:             ser2 = ser.copy()
   54:         else:
   55:             ser2 = ser.copy(deep=deep)
   56: 
   57:         if using_copy_on_write:
   58:             # INFO(CoW) a shallow copy doesn't yet copy the data
   59:             # but parent will not be modified (CoW)
   60:             if deep is None or deep is False:
   61:                 assert np.may_share_memory(ser.values, ser2.values)
   62:             else:
   63:                 assert not np.may_share_memory(ser.values, ser2.values)
   64: 
   65:         ser2[0] = Timestamp("1999/01/01", tz="UTC")
   66: 
   67:         # default deep is True
   68:         if deep is not False or using_copy_on_write:
   69:             # Did not modify original Series
   70:             tm.assert_series_equal(ser2, expected2)
   71:             tm.assert_series_equal(ser, expected)
   72:         else:
   73:             # we DID modify the original Series
   74:             tm.assert_series_equal(ser2, expected2)
   75:             tm.assert_series_equal(ser, expected2)
   76: 
   77:     def test_copy_name(self, datetime_series):
   78:         result = datetime_series.copy()
   79:         assert result.name == datetime_series.name
   80: 
   81:     def test_copy_index_name_checking(self, datetime_series):
   82:         # don't want to be able to modify the index stored elsewhere after
   83:         # making a copy
   84: 
   85:         datetime_series.index.name = None
   86:         assert datetime_series.index.name is None
   87:         assert datetime_series is datetime_series
   88: 
   89:         cp = datetime_series.copy()
   90:         cp.index.name = "foo"
   91:         assert datetime_series.index.name is None
