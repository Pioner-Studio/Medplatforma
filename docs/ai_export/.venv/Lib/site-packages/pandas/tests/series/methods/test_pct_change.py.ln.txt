    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Series,
    6:     date_range,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestSeriesPctChange:
   12:     def test_pct_change(self, datetime_series):
   13:         msg = (
   14:             "The 'fill_method' keyword being not None and the 'limit' keyword in "
   15:             "Series.pct_change are deprecated"
   16:         )
   17: 
   18:         rs = datetime_series.pct_change(fill_method=None)
   19:         tm.assert_series_equal(rs, datetime_series / datetime_series.shift(1) - 1)
   20: 
   21:         rs = datetime_series.pct_change(2)
   22:         filled = datetime_series.ffill()
   23:         tm.assert_series_equal(rs, filled / filled.shift(2) - 1)
   24: 
   25:         with tm.assert_produces_warning(FutureWarning, match=msg):
   26:             rs = datetime_series.pct_change(fill_method="bfill", limit=1)
   27:         filled = datetime_series.bfill(limit=1)
   28:         tm.assert_series_equal(rs, filled / filled.shift(1) - 1)
   29: 
   30:         rs = datetime_series.pct_change(freq="5D")
   31:         filled = datetime_series.ffill()
   32:         tm.assert_series_equal(
   33:             rs, (filled / filled.shift(freq="5D") - 1).reindex_like(filled)
   34:         )
   35: 
   36:     def test_pct_change_with_duplicate_axis(self):
   37:         # GH#28664
   38:         common_idx = date_range("2019-11-14", periods=5, freq="D")
   39:         result = Series(range(5), common_idx).pct_change(freq="B")
   40: 
   41:         # the reason that the expected should be like this is documented at PR 28681
   42:         expected = Series([np.nan, np.inf, np.nan, np.nan, 3.0], common_idx)
   43: 
   44:         tm.assert_series_equal(result, expected)
   45: 
   46:     def test_pct_change_shift_over_nas(self):
   47:         s = Series([1.0, 1.5, np.nan, 2.5, 3.0])
   48: 
   49:         msg = "The default fill_method='pad' in Series.pct_change is deprecated"
   50:         with tm.assert_produces_warning(FutureWarning, match=msg):
   51:             chg = s.pct_change()
   52: 
   53:         expected = Series([np.nan, 0.5, 0.0, 2.5 / 1.5 - 1, 0.2])
   54:         tm.assert_series_equal(chg, expected)
   55: 
   56:     @pytest.mark.parametrize(
   57:         "freq, periods, fill_method, limit",
   58:         [
   59:             ("5B", 5, None, None),
   60:             ("3B", 3, None, None),
   61:             ("3B", 3, "bfill", None),
   62:             ("7B", 7, "pad", 1),
   63:             ("7B", 7, "bfill", 3),
   64:             ("14B", 14, None, None),
   65:         ],
   66:     )
   67:     def test_pct_change_periods_freq(
   68:         self, freq, periods, fill_method, limit, datetime_series
   69:     ):
   70:         msg = (
   71:             "The 'fill_method' keyword being not None and the 'limit' keyword in "
   72:             "Series.pct_change are deprecated"
   73:         )
   74: 
   75:         # GH#7292
   76:         with tm.assert_produces_warning(FutureWarning, match=msg):
   77:             rs_freq = datetime_series.pct_change(
   78:                 freq=freq, fill_method=fill_method, limit=limit
   79:             )
   80:         with tm.assert_produces_warning(FutureWarning, match=msg):
   81:             rs_periods = datetime_series.pct_change(
   82:                 periods, fill_method=fill_method, limit=limit
   83:             )
   84:         tm.assert_series_equal(rs_freq, rs_periods)
   85: 
   86:         empty_ts = Series(index=datetime_series.index, dtype=object)
   87:         with tm.assert_produces_warning(FutureWarning, match=msg):
   88:             rs_freq = empty_ts.pct_change(
   89:                 freq=freq, fill_method=fill_method, limit=limit
   90:             )
   91:         with tm.assert_produces_warning(FutureWarning, match=msg):
   92:             rs_periods = empty_ts.pct_change(
   93:                 periods, fill_method=fill_method, limit=limit
   94:             )
   95:         tm.assert_series_equal(rs_freq, rs_periods)
   96: 
   97: 
   98: @pytest.mark.parametrize("fill_method", ["pad", "ffill", None])
   99: def test_pct_change_with_duplicated_indices(fill_method):
  100:     # GH30463
  101:     s = Series([np.nan, 1, 2, 3, 9, 18], index=["a", "b"] * 3)
  102: 
  103:     warn = None if fill_method is None else FutureWarning
  104:     msg = (
  105:         "The 'fill_method' keyword being not None and the 'limit' keyword in "
  106:         "Series.pct_change are deprecated"
  107:     )
  108:     with tm.assert_produces_warning(warn, match=msg):
  109:         result = s.pct_change(fill_method=fill_method)
  110: 
  111:     expected = Series([np.nan, np.nan, 1.0, 0.5, 2.0, 1.0], index=["a", "b"] * 3)
  112:     tm.assert_series_equal(result, expected)
  113: 
  114: 
  115: def test_pct_change_no_warning_na_beginning():
  116:     # GH#54981
  117:     ser = Series([None, None, 1, 2, 3])
  118:     result = ser.pct_change()
  119:     expected = Series([np.nan, np.nan, np.nan, 1, 0.5])
  120:     tm.assert_series_equal(result, expected)
  121: 
  122: 
  123: def test_pct_change_empty():
  124:     # GH 57056
  125:     ser = Series([], dtype="float64")
  126:     expected = ser.copy()
  127:     result = ser.pct_change(periods=0)
  128:     tm.assert_series_equal(expected, result)
