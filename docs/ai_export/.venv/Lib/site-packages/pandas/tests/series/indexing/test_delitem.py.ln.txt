    1: import pytest
    2: 
    3: from pandas import (
    4:     Index,
    5:     Series,
    6:     date_range,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestSeriesDelItem:
   12:     def test_delitem(self):
   13:         # GH#5542
   14:         # should delete the item inplace
   15:         s = Series(range(5))
   16:         del s[0]
   17: 
   18:         expected = Series(range(1, 5), index=range(1, 5))
   19:         tm.assert_series_equal(s, expected)
   20: 
   21:         del s[1]
   22:         expected = Series(range(2, 5), index=range(2, 5))
   23:         tm.assert_series_equal(s, expected)
   24: 
   25:         # only 1 left, del, add, del
   26:         s = Series(1)
   27:         del s[0]
   28:         tm.assert_series_equal(s, Series(dtype="int64", index=Index([], dtype="int64")))
   29:         s[0] = 1
   30:         tm.assert_series_equal(s, Series(1))
   31:         del s[0]
   32:         tm.assert_series_equal(s, Series(dtype="int64", index=Index([], dtype="int64")))
   33: 
   34:     def test_delitem_object_index(self, using_infer_string):
   35:         # Index(dtype=object)
   36:         dtype = "string[pyarrow_numpy]" if using_infer_string else object
   37:         s = Series(1, index=Index(["a"], dtype=dtype))
   38:         del s["a"]
   39:         tm.assert_series_equal(s, Series(dtype="int64", index=Index([], dtype=dtype)))
   40:         s["a"] = 1
   41:         tm.assert_series_equal(s, Series(1, index=Index(["a"], dtype=dtype)))
   42:         del s["a"]
   43:         tm.assert_series_equal(s, Series(dtype="int64", index=Index([], dtype=dtype)))
   44: 
   45:     def test_delitem_missing_key(self):
   46:         # empty
   47:         s = Series(dtype=object)
   48: 
   49:         with pytest.raises(KeyError, match=r"^0$"):
   50:             del s[0]
   51: 
   52:     def test_delitem_extension_dtype(self):
   53:         # GH#40386
   54:         # DatetimeTZDtype
   55:         dti = date_range("2016-01-01", periods=3, tz="US/Pacific")
   56:         ser = Series(dti)
   57: 
   58:         expected = ser[[0, 2]]
   59:         del ser[1]
   60:         assert ser.dtype == dti.dtype
   61:         tm.assert_series_equal(ser, expected)
   62: 
   63:         # PeriodDtype
   64:         pi = dti.tz_localize(None).to_period("D")
   65:         ser = Series(pi)
   66: 
   67:         expected = ser[:2]
   68:         del ser[2]
   69:         assert ser.dtype == pi.dtype
   70:         tm.assert_series_equal(ser, expected)
