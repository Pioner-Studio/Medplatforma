    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     MultiIndex,
    6:     Series,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def test_xs_datetimelike_wrapping():
   13:     # GH#31630 a case where we shouldn't wrap datetime64 in Timestamp
   14:     arr = date_range("2016-01-01", periods=3)._data._ndarray
   15: 
   16:     ser = Series(arr, dtype=object)
   17:     for i in range(len(ser)):
   18:         ser.iloc[i] = arr[i]
   19:     assert ser.dtype == object
   20:     assert isinstance(ser[0], np.datetime64)
   21: 
   22:     result = ser.xs(0)
   23:     assert isinstance(result, np.datetime64)
   24: 
   25: 
   26: class TestXSWithMultiIndex:
   27:     def test_xs_level_series(self, multiindex_dataframe_random_data):
   28:         df = multiindex_dataframe_random_data
   29:         ser = df["A"]
   30:         expected = ser[:, "two"]
   31:         result = df.xs("two", level=1)["A"]
   32:         tm.assert_series_equal(result, expected)
   33: 
   34:     def test_series_getitem_multiindex_xs_by_label(self):
   35:         # GH#5684
   36:         idx = MultiIndex.from_tuples(
   37:             [("a", "one"), ("a", "two"), ("b", "one"), ("b", "two")]
   38:         )
   39:         ser = Series([1, 2, 3, 4], index=idx)
   40:         return_value = ser.index.set_names(["L1", "L2"], inplace=True)
   41:         assert return_value is None
   42:         expected = Series([1, 3], index=["a", "b"])
   43:         return_value = expected.index.set_names(["L1"], inplace=True)
   44:         assert return_value is None
   45: 
   46:         result = ser.xs("one", level="L2")
   47:         tm.assert_series_equal(result, expected)
   48: 
   49:     def test_series_getitem_multiindex_xs(self):
   50:         # GH#6258
   51:         dt = list(date_range("20130903", periods=3))
   52:         idx = MultiIndex.from_product([list("AB"), dt])
   53:         ser = Series([1, 3, 4, 1, 3, 4], index=idx)
   54:         expected = Series([1, 1], index=list("AB"))
   55: 
   56:         result = ser.xs("20130903", level=1)
   57:         tm.assert_series_equal(result, expected)
   58: 
   59:     def test_series_xs_droplevel_false(self):
   60:         # GH: 19056
   61:         mi = MultiIndex.from_tuples(
   62:             [("a", "x"), ("a", "y"), ("b", "x")], names=["level1", "level2"]
   63:         )
   64:         ser = Series([1, 1, 1], index=mi)
   65:         result = ser.xs("a", axis=0, drop_level=False)
   66:         expected = Series(
   67:             [1, 1],
   68:             index=MultiIndex.from_tuples(
   69:                 [("a", "x"), ("a", "y")], names=["level1", "level2"]
   70:             ),
   71:         )
   72:         tm.assert_series_equal(result, expected)
   73: 
   74:     def test_xs_key_as_list(self):
   75:         # GH#41760
   76:         mi = MultiIndex.from_tuples([("a", "x")], names=["level1", "level2"])
   77:         ser = Series([1], index=mi)
   78:         with pytest.raises(TypeError, match="list keys are not supported"):
   79:             ser.xs(["a", "x"], axis=0, drop_level=False)
   80: 
   81:         with pytest.raises(TypeError, match="list keys are not supported"):
   82:             ser.xs(["a"], axis=0, drop_level=False)
