    1: """
    2: Tests for np.foo applied to Series, not necessarily ufuncs.
    3: """
    4: 
    5: import numpy as np
    6: import pytest
    7: 
    8: import pandas.util._test_decorators as td
    9: 
   10: from pandas import Series
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestPtp:
   15:     def test_ptp(self):
   16:         # GH#21614
   17:         N = 1000
   18:         arr = np.random.default_rng(2).standard_normal(N)
   19:         ser = Series(arr)
   20:         assert np.ptp(ser) == np.ptp(arr)
   21: 
   22: 
   23: def test_numpy_unique(datetime_series):
   24:     # it works!
   25:     np.unique(datetime_series)
   26: 
   27: 
   28: @pytest.mark.parametrize("index", [["a", "b", "c", "d", "e"], None])
   29: def test_numpy_argwhere(index):
   30:     # GH#35331
   31: 
   32:     s = Series(range(5), index=index, dtype=np.int64)
   33: 
   34:     result = np.argwhere(s > 2).astype(np.int64)
   35:     expected = np.array([[3], [4]], dtype=np.int64)
   36: 
   37:     tm.assert_numpy_array_equal(result, expected)
   38: 
   39: 
   40: @td.skip_if_no("pyarrow")
   41: def test_log_arrow_backed_missing_value():
   42:     # GH#56285
   43:     ser = Series([1, 2, None], dtype="float64[pyarrow]")
   44:     result = np.log(ser)
   45:     expected = np.log(Series([1, 2, None], dtype="float64"))
   46:     tm.assert_series_equal(result, expected)
