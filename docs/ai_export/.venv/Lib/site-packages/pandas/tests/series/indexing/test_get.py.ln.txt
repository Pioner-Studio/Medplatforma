    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DatetimeIndex,
    7:     Index,
    8:     Series,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_get():
   15:     # GH 6383
   16:     s = Series(
   17:         np.array(
   18:             [
   19:                 43,
   20:                 48,
   21:                 60,
   22:                 48,
   23:                 50,
   24:                 51,
   25:                 50,
   26:                 45,
   27:                 57,
   28:                 48,
   29:                 56,
   30:                 45,
   31:                 51,
   32:                 39,
   33:                 55,
   34:                 43,
   35:                 54,
   36:                 52,
   37:                 51,
   38:                 54,
   39:             ]
   40:         )
   41:     )
   42: 
   43:     result = s.get(25, 0)
   44:     expected = 0
   45:     assert result == expected
   46: 
   47:     s = Series(
   48:         np.array(
   49:             [
   50:                 43,
   51:                 48,
   52:                 60,
   53:                 48,
   54:                 50,
   55:                 51,
   56:                 50,
   57:                 45,
   58:                 57,
   59:                 48,
   60:                 56,
   61:                 45,
   62:                 51,
   63:                 39,
   64:                 55,
   65:                 43,
   66:                 54,
   67:                 52,
   68:                 51,
   69:                 54,
   70:             ]
   71:         ),
   72:         index=Index(
   73:             [
   74:                 25.0,
   75:                 36.0,
   76:                 49.0,
   77:                 64.0,
   78:                 81.0,
   79:                 100.0,
   80:                 121.0,
   81:                 144.0,
   82:                 169.0,
   83:                 196.0,
   84:                 1225.0,
   85:                 1296.0,
   86:                 1369.0,
   87:                 1444.0,
   88:                 1521.0,
   89:                 1600.0,
   90:                 1681.0,
   91:                 1764.0,
   92:                 1849.0,
   93:                 1936.0,
   94:             ],
   95:             dtype=np.float64,
   96:         ),
   97:     )
   98: 
   99:     result = s.get(25, 0)
  100:     expected = 43
  101:     assert result == expected
  102: 
  103:     # GH 7407
  104:     # with a boolean accessor
  105:     df = pd.DataFrame({"i": [0] * 3, "b": [False] * 3})
  106:     vc = df.i.value_counts()
  107:     result = vc.get(99, default="Missing")
  108:     assert result == "Missing"
  109: 
  110:     vc = df.b.value_counts()
  111:     result = vc.get(False, default="Missing")
  112:     assert result == 3
  113: 
  114:     result = vc.get(True, default="Missing")
  115:     assert result == "Missing"
  116: 
  117: 
  118: def test_get_nan(float_numpy_dtype):
  119:     # GH 8569
  120:     s = Index(range(10), dtype=float_numpy_dtype).to_series()
  121:     assert s.get(np.nan) is None
  122:     assert s.get(np.nan, default="Missing") == "Missing"
  123: 
  124: 
  125: def test_get_nan_multiple(float_numpy_dtype):
  126:     # GH 8569
  127:     # ensure that fixing "test_get_nan" above hasn't broken get
  128:     # with multiple elements
  129:     s = Index(range(10), dtype=float_numpy_dtype).to_series()
  130: 
  131:     idx = [2, 30]
  132:     assert s.get(idx) is None
  133: 
  134:     idx = [2, np.nan]
  135:     assert s.get(idx) is None
  136: 
  137:     # GH 17295 - all missing keys
  138:     idx = [20, 30]
  139:     assert s.get(idx) is None
  140: 
  141:     idx = [np.nan, np.nan]
  142:     assert s.get(idx) is None
  143: 
  144: 
  145: def test_get_with_default():
  146:     # GH#7725
  147:     d0 = ["a", "b", "c", "d"]
  148:     d1 = np.arange(4, dtype="int64")
  149: 
  150:     for data, index in ((d0, d1), (d1, d0)):
  151:         s = Series(data, index=index)
  152:         for i, d in zip(index, data):
  153:             assert s.get(i) == d
  154:             assert s.get(i, d) == d
  155:             assert s.get(i, "z") == d
  156: 
  157:             assert s.get("e", "z") == "z"
  158:             assert s.get("e", "e") == "e"
  159: 
  160:             msg = "Series.__getitem__ treating keys as positions is deprecated"
  161:             warn = None
  162:             if index is d0:
  163:                 warn = FutureWarning
  164:             with tm.assert_produces_warning(warn, match=msg):
  165:                 assert s.get(10, "z") == "z"
  166:                 assert s.get(10, 10) == 10
  167: 
  168: 
  169: @pytest.mark.parametrize(
  170:     "arr",
  171:     [
  172:         np.random.default_rng(2).standard_normal(10),
  173:         DatetimeIndex(date_range("2020-01-01", periods=10), name="a").tz_localize(
  174:             tz="US/Eastern"
  175:         ),
  176:     ],
  177: )
  178: def test_get_with_ea(arr):
  179:     # GH#21260
  180:     ser = Series(arr, index=[2 * i for i in range(len(arr))])
  181:     assert ser.get(4) == ser.iloc[2]
  182: 
  183:     result = ser.get([4, 6])
  184:     expected = ser.iloc[[2, 3]]
  185:     tm.assert_series_equal(result, expected)
  186: 
  187:     result = ser.get(slice(2))
  188:     expected = ser.iloc[[0, 1]]
  189:     tm.assert_series_equal(result, expected)
  190: 
  191:     assert ser.get(-1) is None
  192:     assert ser.get(ser.index.max() + 1) is None
  193: 
  194:     ser = Series(arr[:6], index=list("abcdef"))
  195:     assert ser.get("c") == ser.iloc[2]
  196: 
  197:     result = ser.get(slice("b", "d"))
  198:     expected = ser.iloc[[1, 2, 3]]
  199:     tm.assert_series_equal(result, expected)
  200: 
  201:     result = ser.get("Z")
  202:     assert result is None
  203: 
  204:     msg = "Series.__getitem__ treating keys as positions is deprecated"
  205:     with tm.assert_produces_warning(FutureWarning, match=msg):
  206:         assert ser.get(4) == ser.iloc[4]
  207:     with tm.assert_produces_warning(FutureWarning, match=msg):
  208:         assert ser.get(-1) == ser.iloc[-1]
  209:     with tm.assert_produces_warning(FutureWarning, match=msg):
  210:         assert ser.get(len(ser)) is None
  211: 
  212:     # GH#21257
  213:     ser = Series(arr)
  214:     ser2 = ser[::2]
  215:     assert ser2.get(1) is None
  216: 
  217: 
  218: def test_getitem_get(string_series, object_series):
  219:     msg = "Series.__getitem__ treating keys as positions is deprecated"
  220: 
  221:     for obj in [string_series, object_series]:
  222:         idx = obj.index[5]
  223: 
  224:         assert obj[idx] == obj.get(idx)
  225:         assert obj[idx] == obj.iloc[5]
  226: 
  227:     with tm.assert_produces_warning(FutureWarning, match=msg):
  228:         assert string_series.get(-1) == string_series.get(string_series.index[-1])
  229:     assert string_series.iloc[5] == string_series.get(string_series.index[5])
  230: 
  231: 
  232: def test_get_none():
  233:     # GH#5652
  234:     s1 = Series(dtype=object)
  235:     s2 = Series(dtype=object, index=list("abc"))
  236:     for s in [s1, s2]:
  237:         result = s.get(None)
  238:         assert result is None
