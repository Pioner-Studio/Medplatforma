    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Index,
    8:     MultiIndex,
    9:     Series,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: def test_unstack_preserves_object():
   16:     mi = MultiIndex.from_product([["bar", "foo"], ["one", "two"]])
   17: 
   18:     ser = Series(np.arange(4.0), index=mi, dtype=object)
   19: 
   20:     res1 = ser.unstack()
   21:     assert (res1.dtypes == object).all()
   22: 
   23:     res2 = ser.unstack(level=0)
   24:     assert (res2.dtypes == object).all()
   25: 
   26: 
   27: def test_unstack():
   28:     index = MultiIndex(
   29:         levels=[["bar", "foo"], ["one", "three", "two"]],
   30:         codes=[[1, 1, 0, 0], [0, 1, 0, 2]],
   31:     )
   32: 
   33:     s = Series(np.arange(4.0), index=index)
   34:     unstacked = s.unstack()
   35: 
   36:     expected = DataFrame(
   37:         [[2.0, np.nan, 3.0], [0.0, 1.0, np.nan]],
   38:         index=["bar", "foo"],
   39:         columns=["one", "three", "two"],
   40:     )
   41: 
   42:     tm.assert_frame_equal(unstacked, expected)
   43: 
   44:     unstacked = s.unstack(level=0)
   45:     tm.assert_frame_equal(unstacked, expected.T)
   46: 
   47:     index = MultiIndex(
   48:         levels=[["bar"], ["one", "two", "three"], [0, 1]],
   49:         codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],
   50:     )
   51:     s = Series(np.random.default_rng(2).standard_normal(6), index=index)
   52:     exp_index = MultiIndex(
   53:         levels=[["one", "two", "three"], [0, 1]],
   54:         codes=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],
   55:     )
   56:     expected = DataFrame({"bar": s.values}, index=exp_index).sort_index(level=0)
   57:     unstacked = s.unstack(0).sort_index()
   58:     tm.assert_frame_equal(unstacked, expected)
   59: 
   60:     # GH5873
   61:     idx = MultiIndex.from_arrays([[101, 102], [3.5, np.nan]])
   62:     ts = Series([1, 2], index=idx)
   63:     left = ts.unstack()
   64:     right = DataFrame(
   65:         [[np.nan, 1], [2, np.nan]], index=[101, 102], columns=[np.nan, 3.5]
   66:     )
   67:     tm.assert_frame_equal(left, right)
   68: 
   69:     idx = MultiIndex.from_arrays(
   70:         [
   71:             ["cat", "cat", "cat", "dog", "dog"],
   72:             ["a", "a", "b", "a", "b"],
   73:             [1, 2, 1, 1, np.nan],
   74:         ]
   75:     )
   76:     ts = Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx)
   77:     right = DataFrame(
   78:         [[1.0, 1.3], [1.1, np.nan], [np.nan, 1.4], [1.2, np.nan]],
   79:         columns=["cat", "dog"],
   80:     )
   81:     tpls = [("a", 1), ("a", 2), ("b", np.nan), ("b", 1)]
   82:     right.index = MultiIndex.from_tuples(tpls)
   83:     tm.assert_frame_equal(ts.unstack(level=0), right)
   84: 
   85: 
   86: def test_unstack_tuplename_in_multiindex():
   87:     # GH 19966
   88:     idx = MultiIndex.from_product(
   89:         [["a", "b", "c"], [1, 2, 3]], names=[("A", "a"), ("B", "b")]
   90:     )
   91:     ser = Series(1, index=idx)
   92:     result = ser.unstack(("A", "a"))
   93: 
   94:     expected = DataFrame(
   95:         [[1, 1, 1], [1, 1, 1], [1, 1, 1]],
   96:         columns=MultiIndex.from_tuples([("a",), ("b",), ("c",)], names=[("A", "a")]),
   97:         index=Index([1, 2, 3], name=("B", "b")),
   98:     )
   99:     tm.assert_frame_equal(result, expected)
  100: 
  101: 
  102: @pytest.mark.parametrize(
  103:     "unstack_idx, expected_values, expected_index, expected_columns",
  104:     [
  105:         (
  106:             ("A", "a"),
  107:             [[1, 1], [1, 1], [1, 1], [1, 1]],
  108:             MultiIndex.from_tuples([(1, 3), (1, 4), (2, 3), (2, 4)], names=["B", "C"]),
  109:             MultiIndex.from_tuples([("a",), ("b",)], names=[("A", "a")]),
  110:         ),
  111:         (
  112:             (("A", "a"), "B"),
  113:             [[1, 1, 1, 1], [1, 1, 1, 1]],
  114:             Index([3, 4], name="C"),
  115:             MultiIndex.from_tuples(
  116:                 [("a", 1), ("a", 2), ("b", 1), ("b", 2)], names=[("A", "a"), "B"]
  117:             ),
  118:         ),
  119:     ],
  120: )
  121: def test_unstack_mixed_type_name_in_multiindex(
  122:     unstack_idx, expected_values, expected_index, expected_columns
  123: ):
  124:     # GH 19966
  125:     idx = MultiIndex.from_product(
  126:         [["a", "b"], [1, 2], [3, 4]], names=[("A", "a"), "B", "C"]
  127:     )
  128:     ser = Series(1, index=idx)
  129:     result = ser.unstack(unstack_idx)
  130: 
  131:     expected = DataFrame(
  132:         expected_values, columns=expected_columns, index=expected_index
  133:     )
  134:     tm.assert_frame_equal(result, expected)
  135: 
  136: 
  137: def test_unstack_multi_index_categorical_values():
  138:     df = DataFrame(
  139:         np.random.default_rng(2).standard_normal((10, 4)),
  140:         columns=Index(list("ABCD"), dtype=object),
  141:         index=date_range("2000-01-01", periods=10, freq="B"),
  142:     )
  143:     mi = df.stack(future_stack=True).index.rename(["major", "minor"])
  144:     ser = Series(["foo"] * len(mi), index=mi, name="category", dtype="category")
  145: 
  146:     result = ser.unstack()
  147: 
  148:     dti = ser.index.levels[0]
  149:     c = pd.Categorical(["foo"] * len(dti))
  150:     expected = DataFrame(
  151:         {"A": c.copy(), "B": c.copy(), "C": c.copy(), "D": c.copy()},
  152:         columns=Index(list("ABCD"), name="minor"),
  153:         index=dti.rename("major"),
  154:     )
  155:     tm.assert_frame_equal(result, expected)
  156: 
  157: 
  158: def test_unstack_mixed_level_names():
  159:     # GH#48763
  160:     arrays = [["a", "a"], [1, 2], ["red", "blue"]]
  161:     idx = MultiIndex.from_arrays(arrays, names=("x", 0, "y"))
  162:     ser = Series([1, 2], index=idx)
  163:     result = ser.unstack("x")
  164:     expected = DataFrame(
  165:         [[1], [2]],
  166:         columns=Index(["a"], name="x"),
  167:         index=MultiIndex.from_tuples([(1, "red"), (2, "blue")], names=[0, "y"]),
  168:     )
  169:     tm.assert_frame_equal(result, expected)
