    1: from contextlib import nullcontext
    2: import copy
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas._libs.missing import is_matching_na
    8: from pandas.compat.numpy import np_version_gte1p25
    9: 
   10: from pandas.core.dtypes.common import is_float
   11: 
   12: from pandas import (
   13:     Index,
   14:     MultiIndex,
   15:     Series,
   16: )
   17: import pandas._testing as tm
   18: 
   19: 
   20: @pytest.mark.parametrize(
   21:     "arr, idx",
   22:     [
   23:         ([1, 2, 3, 4], [0, 2, 1, 3]),
   24:         ([1, np.nan, 3, np.nan], [0, 2, 1, 3]),
   25:         (
   26:             [1, np.nan, 3, np.nan],
   27:             MultiIndex.from_tuples([(0, "a"), (1, "b"), (2, "c"), (3, "c")]),
   28:         ),
   29:     ],
   30: )
   31: def test_equals(arr, idx):
   32:     s1 = Series(arr, index=idx)
   33:     s2 = s1.copy()
   34:     assert s1.equals(s2)
   35: 
   36:     s1[1] = 9
   37:     assert not s1.equals(s2)
   38: 
   39: 
   40: @pytest.mark.parametrize(
   41:     "val", [1, 1.1, 1 + 1j, True, "abc", [1, 2], (1, 2), {1, 2}, {"a": 1}, None]
   42: )
   43: def test_equals_list_array(val):
   44:     # GH20676 Verify equals operator for list of Numpy arrays
   45:     arr = np.array([1, 2])
   46:     s1 = Series([arr, arr])
   47:     s2 = s1.copy()
   48:     assert s1.equals(s2)
   49: 
   50:     s1[1] = val
   51: 
   52:     cm = (
   53:         tm.assert_produces_warning(FutureWarning, check_stacklevel=False)
   54:         if isinstance(val, str) and not np_version_gte1p25
   55:         else nullcontext()
   56:     )
   57:     with cm:
   58:         assert not s1.equals(s2)
   59: 
   60: 
   61: def test_equals_false_negative():
   62:     # GH8437 Verify false negative behavior of equals function for dtype object
   63:     arr = [False, np.nan]
   64:     s1 = Series(arr)
   65:     s2 = s1.copy()
   66:     s3 = Series(index=range(2), dtype=object)
   67:     s4 = s3.copy()
   68:     s5 = s3.copy()
   69:     s6 = s3.copy()
   70: 
   71:     s3[:-1] = s4[:-1] = s5[0] = s6[0] = False
   72:     assert s1.equals(s1)
   73:     assert s1.equals(s2)
   74:     assert s1.equals(s3)
   75:     assert s1.equals(s4)
   76:     assert s1.equals(s5)
   77:     assert s5.equals(s6)
   78: 
   79: 
   80: def test_equals_matching_nas():
   81:     # matching but not identical NAs
   82:     left = Series([np.datetime64("NaT")], dtype=object)
   83:     right = Series([np.datetime64("NaT")], dtype=object)
   84:     assert left.equals(right)
   85:     with tm.assert_produces_warning(FutureWarning, match="Dtype inference"):
   86:         assert Index(left).equals(Index(right))
   87:     assert left.array.equals(right.array)
   88: 
   89:     left = Series([np.timedelta64("NaT")], dtype=object)
   90:     right = Series([np.timedelta64("NaT")], dtype=object)
   91:     assert left.equals(right)
   92:     with tm.assert_produces_warning(FutureWarning, match="Dtype inference"):
   93:         assert Index(left).equals(Index(right))
   94:     assert left.array.equals(right.array)
   95: 
   96:     left = Series([np.float64("NaN")], dtype=object)
   97:     right = Series([np.float64("NaN")], dtype=object)
   98:     assert left.equals(right)
   99:     assert Index(left, dtype=left.dtype).equals(Index(right, dtype=right.dtype))
  100:     assert left.array.equals(right.array)
  101: 
  102: 
  103: def test_equals_mismatched_nas(nulls_fixture, nulls_fixture2):
  104:     # GH#39650
  105:     left = nulls_fixture
  106:     right = nulls_fixture2
  107:     if hasattr(right, "copy"):
  108:         right = right.copy()
  109:     else:
  110:         right = copy.copy(right)
  111: 
  112:     ser = Series([left], dtype=object)
  113:     ser2 = Series([right], dtype=object)
  114: 
  115:     if is_matching_na(left, right):
  116:         assert ser.equals(ser2)
  117:     elif (left is None and is_float(right)) or (right is None and is_float(left)):
  118:         assert ser.equals(ser2)
  119:     else:
  120:         assert not ser.equals(ser2)
  121: 
  122: 
  123: def test_equals_none_vs_nan():
  124:     # GH#39650
  125:     ser = Series([1, None], dtype=object)
  126:     ser2 = Series([1, np.nan], dtype=object)
  127: 
  128:     assert ser.equals(ser2)
  129:     assert Index(ser, dtype=ser.dtype).equals(Index(ser2, dtype=ser2.dtype))
  130:     assert ser.array.equals(ser2.array)
  131: 
  132: 
  133: def test_equals_None_vs_float():
  134:     # GH#44190
  135:     left = Series([-np.inf, np.nan, -1.0, 0.0, 1.0, 10 / 3, np.inf], dtype=object)
  136:     right = Series([None] * len(left))
  137: 
  138:     # these series were found to be equal due to a bug, check that they are correctly
  139:     # found to not equal
  140:     assert not left.equals(right)
  141:     assert not right.equals(left)
  142:     assert not left.to_frame().equals(right.to_frame())
  143:     assert not right.to_frame().equals(left.to_frame())
  144:     assert not Index(left, dtype="object").equals(Index(right, dtype="object"))
  145:     assert not Index(right, dtype="object").equals(Index(left, dtype="object"))
