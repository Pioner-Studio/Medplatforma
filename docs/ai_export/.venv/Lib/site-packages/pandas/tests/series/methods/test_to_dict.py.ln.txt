    1: import collections
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import Series
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestSeriesToDict:
   11:     @pytest.mark.parametrize(
   12:         "mapping", (dict, collections.defaultdict(list), collections.OrderedDict)
   13:     )
   14:     def test_to_dict(self, mapping, datetime_series):
   15:         # GH#16122
   16:         result = Series(datetime_series.to_dict(into=mapping), name="ts")
   17:         expected = datetime_series.copy()
   18:         expected.index = expected.index._with_freq(None)
   19:         tm.assert_series_equal(result, expected)
   20: 
   21:         from_method = Series(datetime_series.to_dict(into=collections.Counter))
   22:         from_constructor = Series(collections.Counter(datetime_series.items()))
   23:         tm.assert_series_equal(from_method, from_constructor)
   24: 
   25:     @pytest.mark.parametrize(
   26:         "input",
   27:         (
   28:             {"a": np.int64(64), "b": 10},
   29:             {"a": np.int64(64), "b": 10, "c": "ABC"},
   30:             {"a": np.uint64(64), "b": 10, "c": "ABC"},
   31:         ),
   32:     )
   33:     def test_to_dict_return_types(self, input):
   34:         # GH25969
   35: 
   36:         d = Series(input).to_dict()
   37:         assert isinstance(d["a"], int)
   38:         assert isinstance(d["b"], int)
