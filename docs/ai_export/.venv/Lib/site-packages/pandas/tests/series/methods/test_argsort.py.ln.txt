    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Series,
    6:     Timestamp,
    7:     isna,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestSeriesArgsort:
   13:     def test_argsort_axis(self):
   14:         # GH#54257
   15:         ser = Series(range(3))
   16: 
   17:         msg = "No axis named 2 for object type Series"
   18:         with pytest.raises(ValueError, match=msg):
   19:             ser.argsort(axis=2)
   20: 
   21:     def test_argsort_numpy(self, datetime_series):
   22:         ser = datetime_series
   23: 
   24:         res = np.argsort(ser).values
   25:         expected = np.argsort(np.array(ser))
   26:         tm.assert_numpy_array_equal(res, expected)
   27: 
   28:         # with missing values
   29:         ts = ser.copy()
   30:         ts[::2] = np.nan
   31: 
   32:         msg = "The behavior of Series.argsort in the presence of NA values"
   33:         with tm.assert_produces_warning(
   34:             FutureWarning, match=msg, check_stacklevel=False
   35:         ):
   36:             result = np.argsort(ts)[1::2]
   37:         expected = np.argsort(np.array(ts.dropna()))
   38: 
   39:         tm.assert_numpy_array_equal(result.values, expected)
   40: 
   41:     def test_argsort(self, datetime_series):
   42:         argsorted = datetime_series.argsort()
   43:         assert issubclass(argsorted.dtype.type, np.integer)
   44: 
   45:     def test_argsort_dt64(self, unit):
   46:         # GH#2967 (introduced bug in 0.11-dev I think)
   47:         ser = Series(
   48:             [Timestamp(f"201301{i:02d}") for i in range(1, 6)], dtype=f"M8[{unit}]"
   49:         )
   50:         assert ser.dtype == f"datetime64[{unit}]"
   51:         shifted = ser.shift(-1)
   52:         assert shifted.dtype == f"datetime64[{unit}]"
   53:         assert isna(shifted[4])
   54: 
   55:         result = ser.argsort()
   56:         expected = Series(range(5), dtype=np.intp)
   57:         tm.assert_series_equal(result, expected)
   58: 
   59:         msg = "The behavior of Series.argsort in the presence of NA values"
   60:         with tm.assert_produces_warning(FutureWarning, match=msg):
   61:             result = shifted.argsort()
   62:         expected = Series(list(range(4)) + [-1], dtype=np.intp)
   63:         tm.assert_series_equal(result, expected)
   64: 
   65:     def test_argsort_stable(self):
   66:         ser = Series(np.random.default_rng(2).integers(0, 100, size=10000))
   67:         mindexer = ser.argsort(kind="mergesort")
   68:         qindexer = ser.argsort()
   69: 
   70:         mexpected = np.argsort(ser.values, kind="mergesort")
   71:         qexpected = np.argsort(ser.values, kind="quicksort")
   72: 
   73:         tm.assert_series_equal(mindexer.astype(np.intp), Series(mexpected))
   74:         tm.assert_series_equal(qindexer.astype(np.intp), Series(qexpected))
   75:         msg = (
   76:             r"ndarray Expected type <class 'numpy\.ndarray'>, "
   77:             r"found <class 'pandas\.core\.series\.Series'> instead"
   78:         )
   79:         with pytest.raises(AssertionError, match=msg):
   80:             tm.assert_numpy_array_equal(qindexer, mindexer)
   81: 
   82:     def test_argsort_preserve_name(self, datetime_series):
   83:         result = datetime_series.argsort()
   84:         assert result.name == datetime_series.name
