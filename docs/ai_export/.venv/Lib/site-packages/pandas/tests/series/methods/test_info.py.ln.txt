    1: from io import StringIO
    2: from string import ascii_uppercase
    3: import textwrap
    4: 
    5: import numpy as np
    6: import pytest
    7: 
    8: from pandas.compat import PYPY
    9: 
   10: from pandas import (
   11:     CategoricalIndex,
   12:     MultiIndex,
   13:     Series,
   14:     date_range,
   15: )
   16: 
   17: 
   18: def test_info_categorical_column_just_works():
   19:     n = 2500
   20:     data = np.array(list("abcdefghij")).take(
   21:         np.random.default_rng(2).integers(0, 10, size=n, dtype=int)
   22:     )
   23:     s = Series(data).astype("category")
   24:     s.isna()
   25:     buf = StringIO()
   26:     s.info(buf=buf)
   27: 
   28:     s2 = s[s == "d"]
   29:     buf = StringIO()
   30:     s2.info(buf=buf)
   31: 
   32: 
   33: def test_info_categorical():
   34:     # GH14298
   35:     idx = CategoricalIndex(["a", "b"])
   36:     s = Series(np.zeros(2), index=idx)
   37:     buf = StringIO()
   38:     s.info(buf=buf)
   39: 
   40: 
   41: @pytest.mark.parametrize("verbose", [True, False])
   42: def test_info_series(lexsorted_two_level_string_multiindex, verbose):
   43:     index = lexsorted_two_level_string_multiindex
   44:     ser = Series(range(len(index)), index=index, name="sth")
   45:     buf = StringIO()
   46:     ser.info(verbose=verbose, buf=buf)
   47:     result = buf.getvalue()
   48: 
   49:     expected = textwrap.dedent(
   50:         """\
   51:         <class 'pandas.core.series.Series'>
   52:         MultiIndex: 10 entries, ('foo', 'one') to ('qux', 'three')
   53:         """
   54:     )
   55:     if verbose:
   56:         expected += textwrap.dedent(
   57:             """\
   58:             Series name: sth
   59:             Non-Null Count  Dtype
   60:             --------------  -----
   61:             10 non-null     int64
   62:             """
   63:         )
   64:     expected += textwrap.dedent(
   65:         f"""\
   66:         dtypes: int64(1)
   67:         memory usage: {ser.memory_usage()}.0+ bytes
   68:         """
   69:     )
   70:     assert result == expected
   71: 
   72: 
   73: def test_info_memory():
   74:     s = Series([1, 2], dtype="i8")
   75:     buf = StringIO()
   76:     s.info(buf=buf)
   77:     result = buf.getvalue()
   78:     memory_bytes = float(s.memory_usage())
   79:     expected = textwrap.dedent(
   80:         f"""\
   81:     <class 'pandas.core.series.Series'>
   82:     RangeIndex: 2 entries, 0 to 1
   83:     Series name: None
   84:     Non-Null Count  Dtype
   85:     --------------  -----
   86:     2 non-null      int64
   87:     dtypes: int64(1)
   88:     memory usage: {memory_bytes} bytes
   89:     """
   90:     )
   91:     assert result == expected
   92: 
   93: 
   94: def test_info_wide():
   95:     s = Series(np.random.default_rng(2).standard_normal(101))
   96:     msg = "Argument `max_cols` can only be passed in DataFrame.info, not Series.info"
   97:     with pytest.raises(ValueError, match=msg):
   98:         s.info(max_cols=1)
   99: 
  100: 
  101: def test_info_shows_dtypes():
  102:     dtypes = [
  103:         "int64",
  104:         "float64",
  105:         "datetime64[ns]",
  106:         "timedelta64[ns]",
  107:         "complex128",
  108:         "object",
  109:         "bool",
  110:     ]
  111:     n = 10
  112:     for dtype in dtypes:
  113:         s = Series(np.random.default_rng(2).integers(2, size=n).astype(dtype))
  114:         buf = StringIO()
  115:         s.info(buf=buf)
  116:         res = buf.getvalue()
  117:         name = f"{n:d} non-null     {dtype}"
  118:         assert name in res
  119: 
  120: 
  121: @pytest.mark.xfail(PYPY, reason="on PyPy deep=True doesn't change result")
  122: def test_info_memory_usage_deep_not_pypy():
  123:     s_with_object_index = Series({"a": [1]}, index=["foo"])
  124:     assert s_with_object_index.memory_usage(
  125:         index=True, deep=True
  126:     ) > s_with_object_index.memory_usage(index=True)
  127: 
  128:     s_object = Series({"a": ["a"]})
  129:     assert s_object.memory_usage(deep=True) > s_object.memory_usage()
  130: 
  131: 
  132: @pytest.mark.xfail(not PYPY, reason="on PyPy deep=True does not change result")
  133: def test_info_memory_usage_deep_pypy():
  134:     s_with_object_index = Series({"a": [1]}, index=["foo"])
  135:     assert s_with_object_index.memory_usage(
  136:         index=True, deep=True
  137:     ) == s_with_object_index.memory_usage(index=True)
  138: 
  139:     s_object = Series({"a": ["a"]})
  140:     assert s_object.memory_usage(deep=True) == s_object.memory_usage()
  141: 
  142: 
  143: @pytest.mark.parametrize(
  144:     "series, plus",
  145:     [
  146:         (Series(1, index=[1, 2, 3]), False),
  147:         (Series(1, index=list("ABC")), True),
  148:         (Series(1, index=MultiIndex.from_product([range(3), range(3)])), False),
  149:         (
  150:             Series(1, index=MultiIndex.from_product([range(3), ["foo", "bar"]])),
  151:             True,
  152:         ),
  153:     ],
  154: )
  155: def test_info_memory_usage_qualified(series, plus):
  156:     buf = StringIO()
  157:     series.info(buf=buf)
  158:     if plus:
  159:         assert "+" in buf.getvalue()
  160:     else:
  161:         assert "+" not in buf.getvalue()
  162: 
  163: 
  164: def test_info_memory_usage_bug_on_multiindex():
  165:     # GH 14308
  166:     # memory usage introspection should not materialize .values
  167:     N = 100
  168:     M = len(ascii_uppercase)
  169:     index = MultiIndex.from_product(
  170:         [list(ascii_uppercase), date_range("20160101", periods=N)],
  171:         names=["id", "date"],
  172:     )
  173:     s = Series(np.random.default_rng(2).standard_normal(N * M), index=index)
  174: 
  175:     unstacked = s.unstack("id")
  176:     assert s.values.nbytes == unstacked.values.nbytes
  177:     assert s.memory_usage(deep=True) > unstacked.memory_usage(deep=True).sum()
  178: 
  179:     # high upper bound
  180:     diff = unstacked.memory_usage(deep=True).sum() - s.memory_usage(deep=True)
  181:     assert diff < 2000
