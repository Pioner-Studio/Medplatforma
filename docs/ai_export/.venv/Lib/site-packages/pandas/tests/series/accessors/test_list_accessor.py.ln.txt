    1: import re
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     ArrowDtype,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: 
   11: pa = pytest.importorskip("pyarrow")
   12: 
   13: from pandas.compat import pa_version_under11p0
   14: 
   15: 
   16: @pytest.mark.parametrize(
   17:     "list_dtype",
   18:     (
   19:         pa.list_(pa.int64()),
   20:         pa.list_(pa.int64(), list_size=3),
   21:         pa.large_list(pa.int64()),
   22:     ),
   23: )
   24: def test_list_getitem(list_dtype):
   25:     ser = Series(
   26:         [[1, 2, 3], [4, None, 5], None],
   27:         dtype=ArrowDtype(list_dtype),
   28:     )
   29:     actual = ser.list[1]
   30:     expected = Series([2, None, None], dtype="int64[pyarrow]")
   31:     tm.assert_series_equal(actual, expected)
   32: 
   33: 
   34: def test_list_getitem_slice():
   35:     ser = Series(
   36:         [[1, 2, 3], [4, None, 5], None],
   37:         dtype=ArrowDtype(pa.list_(pa.int64())),
   38:     )
   39:     if pa_version_under11p0:
   40:         with pytest.raises(
   41:             NotImplementedError, match="List slice not supported by pyarrow "
   42:         ):
   43:             ser.list[1:None:None]
   44:     else:
   45:         actual = ser.list[1:None:None]
   46:         expected = Series(
   47:             [[2, 3], [None, 5], None], dtype=ArrowDtype(pa.list_(pa.int64()))
   48:         )
   49:         tm.assert_series_equal(actual, expected)
   50: 
   51: 
   52: def test_list_len():
   53:     ser = Series(
   54:         [[1, 2, 3], [4, None], None],
   55:         dtype=ArrowDtype(pa.list_(pa.int64())),
   56:     )
   57:     actual = ser.list.len()
   58:     expected = Series([3, 2, None], dtype=ArrowDtype(pa.int32()))
   59:     tm.assert_series_equal(actual, expected)
   60: 
   61: 
   62: def test_list_flatten():
   63:     ser = Series(
   64:         [[1, 2, 3], [4, None], None],
   65:         dtype=ArrowDtype(pa.list_(pa.int64())),
   66:     )
   67:     actual = ser.list.flatten()
   68:     expected = Series([1, 2, 3, 4, None], dtype=ArrowDtype(pa.int64()))
   69:     tm.assert_series_equal(actual, expected)
   70: 
   71: 
   72: def test_list_getitem_slice_invalid():
   73:     ser = Series(
   74:         [[1, 2, 3], [4, None, 5], None],
   75:         dtype=ArrowDtype(pa.list_(pa.int64())),
   76:     )
   77:     if pa_version_under11p0:
   78:         with pytest.raises(
   79:             NotImplementedError, match="List slice not supported by pyarrow "
   80:         ):
   81:             ser.list[1:None:0]
   82:     else:
   83:         with pytest.raises(pa.lib.ArrowInvalid, match=re.escape("`step` must be >= 1")):
   84:             ser.list[1:None:0]
   85: 
   86: 
   87: def test_list_accessor_non_list_dtype():
   88:     ser = Series(
   89:         [1, 2, 4],
   90:         dtype=ArrowDtype(pa.int64()),
   91:     )
   92:     with pytest.raises(
   93:         AttributeError,
   94:         match=re.escape(
   95:             "Can only use the '.list' accessor with 'list[pyarrow]' dtype, "
   96:             "not int64[pyarrow]."
   97:         ),
   98:     ):
   99:         ser.list[1:None:0]
  100: 
  101: 
  102: @pytest.mark.parametrize(
  103:     "list_dtype",
  104:     (
  105:         pa.list_(pa.int64()),
  106:         pa.list_(pa.int64(), list_size=3),
  107:         pa.large_list(pa.int64()),
  108:     ),
  109: )
  110: def test_list_getitem_invalid_index(list_dtype):
  111:     ser = Series(
  112:         [[1, 2, 3], [4, None, 5], None],
  113:         dtype=ArrowDtype(list_dtype),
  114:     )
  115:     with pytest.raises(pa.lib.ArrowInvalid, match="Index -1 is out of bounds"):
  116:         ser.list[-1]
  117:     with pytest.raises(pa.lib.ArrowInvalid, match="Index 5 is out of bounds"):
  118:         ser.list[5]
  119:     with pytest.raises(ValueError, match="key must be an int or slice, got str"):
  120:         ser.list["abc"]
  121: 
  122: 
  123: def test_list_accessor_not_iterable():
  124:     ser = Series(
  125:         [[1, 2, 3], [4, None], None],
  126:         dtype=ArrowDtype(pa.list_(pa.int64())),
  127:     )
  128:     with pytest.raises(TypeError, match="'ListAccessor' object is not iterable"):
  129:         iter(ser.list)
