    1: from datetime import datetime
    2: import operator
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Index,
   10:     Series,
   11:     bdate_range,
   12: )
   13: import pandas._testing as tm
   14: from pandas.core import ops
   15: 
   16: 
   17: class TestSeriesLogicalOps:
   18:     @pytest.mark.filterwarnings("ignore:Downcasting object dtype arrays:FutureWarning")
   19:     @pytest.mark.parametrize("bool_op", [operator.and_, operator.or_, operator.xor])
   20:     def test_bool_operators_with_nas(self, bool_op):
   21:         # boolean &, |, ^ should work with object arrays and propagate NAs
   22:         ser = Series(bdate_range("1/1/2000", periods=10), dtype=object)
   23:         ser[::2] = np.nan
   24: 
   25:         mask = ser.isna()
   26:         filled = ser.fillna(ser[0])
   27: 
   28:         result = bool_op(ser < ser[9], ser > ser[3])
   29: 
   30:         expected = bool_op(filled < filled[9], filled > filled[3])
   31:         expected[mask] = False
   32:         tm.assert_series_equal(result, expected)
   33: 
   34:     def test_logical_operators_bool_dtype_with_empty(self):
   35:         # GH#9016: support bitwise op for integer types
   36:         index = list("bca")
   37: 
   38:         s_tft = Series([True, False, True], index=index)
   39:         s_fff = Series([False, False, False], index=index)
   40:         s_empty = Series([], dtype=object)
   41: 
   42:         res = s_tft & s_empty
   43:         expected = s_fff.sort_index()
   44:         tm.assert_series_equal(res, expected)
   45: 
   46:         res = s_tft | s_empty
   47:         expected = s_tft.sort_index()
   48:         tm.assert_series_equal(res, expected)
   49: 
   50:     def test_logical_operators_int_dtype_with_int_dtype(self):
   51:         # GH#9016: support bitwise op for integer types
   52: 
   53:         s_0123 = Series(range(4), dtype="int64")
   54:         s_3333 = Series([3] * 4)
   55:         s_4444 = Series([4] * 4)
   56: 
   57:         res = s_0123 & s_3333
   58:         expected = Series(range(4), dtype="int64")
   59:         tm.assert_series_equal(res, expected)
   60: 
   61:         res = s_0123 | s_4444
   62:         expected = Series(range(4, 8), dtype="int64")
   63:         tm.assert_series_equal(res, expected)
   64: 
   65:         s_1111 = Series([1] * 4, dtype="int8")
   66:         res = s_0123 & s_1111
   67:         expected = Series([0, 1, 0, 1], dtype="int64")
   68:         tm.assert_series_equal(res, expected)
   69: 
   70:         res = s_0123.astype(np.int16) | s_1111.astype(np.int32)
   71:         expected = Series([1, 1, 3, 3], dtype="int32")
   72:         tm.assert_series_equal(res, expected)
   73: 
   74:     def test_logical_operators_int_dtype_with_int_scalar(self):
   75:         # GH#9016: support bitwise op for integer types
   76:         s_0123 = Series(range(4), dtype="int64")
   77: 
   78:         res = s_0123 & 0
   79:         expected = Series([0] * 4)
   80:         tm.assert_series_equal(res, expected)
   81: 
   82:         res = s_0123 & 1
   83:         expected = Series([0, 1, 0, 1])
   84:         tm.assert_series_equal(res, expected)
   85: 
   86:     def test_logical_operators_int_dtype_with_float(self):
   87:         # GH#9016: support bitwise op for integer types
   88:         s_0123 = Series(range(4), dtype="int64")
   89: 
   90:         warn_msg = (
   91:             r"Logical ops \(and, or, xor\) between Pandas objects and "
   92:             "dtype-less sequences"
   93:         )
   94: 
   95:         msg = "Cannot perform.+with a dtyped.+array and scalar of type"
   96:         with pytest.raises(TypeError, match=msg):
   97:             s_0123 & np.nan
   98:         with pytest.raises(TypeError, match=msg):
   99:             s_0123 & 3.14
  100:         msg = "unsupported operand type.+for &:"
  101:         with pytest.raises(TypeError, match=msg):
  102:             with tm.assert_produces_warning(FutureWarning, match=warn_msg):
  103:                 s_0123 & [0.1, 4, 3.14, 2]
  104:         with pytest.raises(TypeError, match=msg):
  105:             s_0123 & np.array([0.1, 4, 3.14, 2])
  106:         with pytest.raises(TypeError, match=msg):
  107:             s_0123 & Series([0.1, 4, -3.14, 2])
  108: 
  109:     def test_logical_operators_int_dtype_with_str(self):
  110:         s_1111 = Series([1] * 4, dtype="int8")
  111: 
  112:         warn_msg = (
  113:             r"Logical ops \(and, or, xor\) between Pandas objects and "
  114:             "dtype-less sequences"
  115:         )
  116: 
  117:         msg = "Cannot perform 'and_' with a dtyped.+array and scalar of type"
  118:         with pytest.raises(TypeError, match=msg):
  119:             s_1111 & "a"
  120:         with pytest.raises(TypeError, match="unsupported operand.+for &"):
  121:             with tm.assert_produces_warning(FutureWarning, match=warn_msg):
  122:                 s_1111 & ["a", "b", "c", "d"]
  123: 
  124:     def test_logical_operators_int_dtype_with_bool(self):
  125:         # GH#9016: support bitwise op for integer types
  126:         s_0123 = Series(range(4), dtype="int64")
  127: 
  128:         expected = Series([False] * 4)
  129: 
  130:         result = s_0123 & False
  131:         tm.assert_series_equal(result, expected)
  132: 
  133:         warn_msg = (
  134:             r"Logical ops \(and, or, xor\) between Pandas objects and "
  135:             "dtype-less sequences"
  136:         )
  137:         with tm.assert_produces_warning(FutureWarning, match=warn_msg):
  138:             result = s_0123 & [False]
  139:         tm.assert_series_equal(result, expected)
  140: 
  141:         with tm.assert_produces_warning(FutureWarning, match=warn_msg):
  142:             result = s_0123 & (False,)
  143:         tm.assert_series_equal(result, expected)
  144: 
  145:         result = s_0123 ^ False
  146:         expected = Series([False, True, True, True])
  147:         tm.assert_series_equal(result, expected)
  148: 
  149:     def test_logical_operators_int_dtype_with_object(self, using_infer_string):
  150:         # GH#9016: support bitwise op for integer types
  151:         s_0123 = Series(range(4), dtype="int64")
  152: 
  153:         result = s_0123 & Series([False, np.nan, False, False])
  154:         expected = Series([False] * 4)
  155:         tm.assert_series_equal(result, expected)
  156: 
  157:         s_abNd = Series(["a", "b", np.nan, "d"])
  158:         if using_infer_string:
  159:             import pyarrow as pa
  160: 
  161:             with pytest.raises(pa.lib.ArrowNotImplementedError, match="has no kernel"):
  162:                 s_0123 & s_abNd
  163:         else:
  164:             with pytest.raises(TypeError, match="unsupported.* 'int' and 'str'"):
  165:                 s_0123 & s_abNd
  166: 
  167:     def test_logical_operators_bool_dtype_with_int(self):
  168:         index = list("bca")
  169: 
  170:         s_tft = Series([True, False, True], index=index)
  171:         s_fff = Series([False, False, False], index=index)
  172: 
  173:         res = s_tft & 0
  174:         expected = s_fff
  175:         tm.assert_series_equal(res, expected)
  176: 
  177:         res = s_tft & 1
  178:         expected = s_tft
  179:         tm.assert_series_equal(res, expected)
  180: 
  181:     def test_logical_ops_bool_dtype_with_ndarray(self):
  182:         # make sure we operate on ndarray the same as Series
  183:         left = Series([True, True, True, False, True])
  184:         right = [True, False, None, True, np.nan]
  185: 
  186:         msg = (
  187:             r"Logical ops \(and, or, xor\) between Pandas objects and "
  188:             "dtype-less sequences"
  189:         )
  190: 
  191:         expected = Series([True, False, False, False, False])
  192:         with tm.assert_produces_warning(FutureWarning, match=msg):
  193:             result = left & right
  194:         tm.assert_series_equal(result, expected)
  195:         result = left & np.array(right)
  196:         tm.assert_series_equal(result, expected)
  197:         result = left & Index(right)
  198:         tm.assert_series_equal(result, expected)
  199:         result = left & Series(right)
  200:         tm.assert_series_equal(result, expected)
  201: 
  202:         expected = Series([True, True, True, True, True])
  203:         with tm.assert_produces_warning(FutureWarning, match=msg):
  204:             result = left | right
  205:         tm.assert_series_equal(result, expected)
  206:         result = left | np.array(right)
  207:         tm.assert_series_equal(result, expected)
  208:         result = left | Index(right)
  209:         tm.assert_series_equal(result, expected)
  210:         result = left | Series(right)
  211:         tm.assert_series_equal(result, expected)
  212: 
  213:         expected = Series([False, True, True, True, True])
  214:         with tm.assert_produces_warning(FutureWarning, match=msg):
  215:             result = left ^ right
  216:         tm.assert_series_equal(result, expected)
  217:         result = left ^ np.array(right)
  218:         tm.assert_series_equal(result, expected)
  219:         result = left ^ Index(right)
  220:         tm.assert_series_equal(result, expected)
  221:         result = left ^ Series(right)
  222:         tm.assert_series_equal(result, expected)
  223: 
  224:     def test_logical_operators_int_dtype_with_bool_dtype_and_reindex(self):
  225:         # GH#9016: support bitwise op for integer types
  226: 
  227:         index = list("bca")
  228: 
  229:         s_tft = Series([True, False, True], index=index)
  230:         s_tft = Series([True, False, True], index=index)
  231:         s_tff = Series([True, False, False], index=index)
  232: 
  233:         s_0123 = Series(range(4), dtype="int64")
  234: 
  235:         # s_0123 will be all false now because of reindexing like s_tft
  236:         expected = Series([False] * 7, index=[0, 1, 2, 3, "a", "b", "c"])
  237:         with tm.assert_produces_warning(FutureWarning):
  238:             result = s_tft & s_0123
  239:         tm.assert_series_equal(result, expected)
  240: 
  241:         # GH 52538: Deprecate casting to object type when reindex is needed;
  242:         # matches DataFrame behavior
  243:         expected = Series([False] * 7, index=[0, 1, 2, 3, "a", "b", "c"])
  244:         with tm.assert_produces_warning(FutureWarning):
  245:             result = s_0123 & s_tft
  246:         tm.assert_series_equal(result, expected)
  247: 
  248:         s_a0b1c0 = Series([1], list("b"))
  249: 
  250:         with tm.assert_produces_warning(FutureWarning):
  251:             res = s_tft & s_a0b1c0
  252:         expected = s_tff.reindex(list("abc"))
  253:         tm.assert_series_equal(res, expected)
  254: 
  255:         with tm.assert_produces_warning(FutureWarning):
  256:             res = s_tft | s_a0b1c0
  257:         expected = s_tft.reindex(list("abc"))
  258:         tm.assert_series_equal(res, expected)
  259: 
  260:     def test_scalar_na_logical_ops_corners(self):
  261:         s = Series([2, 3, 4, 5, 6, 7, 8, 9, 10])
  262: 
  263:         msg = "Cannot perform.+with a dtyped.+array and scalar of type"
  264:         with pytest.raises(TypeError, match=msg):
  265:             s & datetime(2005, 1, 1)
  266: 
  267:         s = Series([2, 3, 4, 5, 6, 7, 8, 9, datetime(2005, 1, 1)])
  268:         s[::2] = np.nan
  269: 
  270:         expected = Series(True, index=s.index)
  271:         expected[::2] = False
  272: 
  273:         msg = (
  274:             r"Logical ops \(and, or, xor\) between Pandas objects and "
  275:             "dtype-less sequences"
  276:         )
  277:         with tm.assert_produces_warning(FutureWarning, match=msg):
  278:             result = s & list(s)
  279:         tm.assert_series_equal(result, expected)
  280: 
  281:     def test_scalar_na_logical_ops_corners_aligns(self):
  282:         s = Series([2, 3, 4, 5, 6, 7, 8, 9, datetime(2005, 1, 1)])
  283:         s[::2] = np.nan
  284:         d = DataFrame({"A": s})
  285: 
  286:         expected = DataFrame(False, index=range(9), columns=["A"] + list(range(9)))
  287: 
  288:         result = s & d
  289:         tm.assert_frame_equal(result, expected)
  290: 
  291:         result = d & s
  292:         tm.assert_frame_equal(result, expected)
  293: 
  294:     @pytest.mark.parametrize("op", [operator.and_, operator.or_, operator.xor])
  295:     def test_logical_ops_with_index(self, op):
  296:         # GH#22092, GH#19792
  297:         ser = Series([True, True, False, False])
  298:         idx1 = Index([True, False, True, False])
  299:         idx2 = Index([1, 0, 1, 0])
  300: 
  301:         expected = Series([op(ser[n], idx1[n]) for n in range(len(ser))])
  302: 
  303:         result = op(ser, idx1)
  304:         tm.assert_series_equal(result, expected)
  305: 
  306:         expected = Series([op(ser[n], idx2[n]) for n in range(len(ser))], dtype=bool)
  307: 
  308:         result = op(ser, idx2)
  309:         tm.assert_series_equal(result, expected)
  310: 
  311:     def test_reversed_xor_with_index_returns_series(self):
  312:         # GH#22092, GH#19792 pre-2.0 these were aliased to setops
  313:         ser = Series([True, True, False, False])
  314:         idx1 = Index([True, False, True, False], dtype=bool)
  315:         idx2 = Index([1, 0, 1, 0])
  316: 
  317:         expected = Series([False, True, True, False])
  318:         result = idx1 ^ ser
  319:         tm.assert_series_equal(result, expected)
  320: 
  321:         result = idx2 ^ ser
  322:         tm.assert_series_equal(result, expected)
  323: 
  324:     @pytest.mark.parametrize(
  325:         "op",
  326:         [
  327:             ops.rand_,
  328:             ops.ror_,
  329:         ],
  330:     )
  331:     def test_reversed_logical_op_with_index_returns_series(self, op):
  332:         # GH#22092, GH#19792
  333:         ser = Series([True, True, False, False])
  334:         idx1 = Index([True, False, True, False])
  335:         idx2 = Index([1, 0, 1, 0])
  336: 
  337:         expected = Series(op(idx1.values, ser.values))
  338:         result = op(ser, idx1)
  339:         tm.assert_series_equal(result, expected)
  340: 
  341:         expected = op(ser, Series(idx2))
  342:         result = op(ser, idx2)
  343:         tm.assert_series_equal(result, expected)
  344: 
  345:     @pytest.mark.parametrize(
  346:         "op, expected",
  347:         [
  348:             (ops.rand_, Series([False, False])),
  349:             (ops.ror_, Series([True, True])),
  350:             (ops.rxor, Series([True, True])),
  351:         ],
  352:     )
  353:     def test_reverse_ops_with_index(self, op, expected):
  354:         # https://github.com/pandas-dev/pandas/pull/23628
  355:         # multi-set Index ops are buggy, so let's avoid duplicates...
  356:         # GH#49503
  357:         ser = Series([True, False])
  358:         idx = Index([False, True])
  359: 
  360:         result = op(ser, idx)
  361:         tm.assert_series_equal(result, expected)
  362: 
  363:     def test_logical_ops_label_based(self, using_infer_string):
  364:         # GH#4947
  365:         # logical ops should be label based
  366: 
  367:         a = Series([True, False, True], list("bca"))
  368:         b = Series([False, True, False], list("abc"))
  369: 
  370:         expected = Series([False, True, False], list("abc"))
  371:         result = a & b
  372:         tm.assert_series_equal(result, expected)
  373: 
  374:         expected = Series([True, True, False], list("abc"))
  375:         result = a | b
  376:         tm.assert_series_equal(result, expected)
  377: 
  378:         expected = Series([True, False, False], list("abc"))
  379:         result = a ^ b
  380:         tm.assert_series_equal(result, expected)
  381: 
  382:         # rhs is bigger
  383:         a = Series([True, False, True], list("bca"))
  384:         b = Series([False, True, False, True], list("abcd"))
  385: 
  386:         expected = Series([False, True, False, False], list("abcd"))
  387:         result = a & b
  388:         tm.assert_series_equal(result, expected)
  389: 
  390:         expected = Series([True, True, False, False], list("abcd"))
  391:         result = a | b
  392:         tm.assert_series_equal(result, expected)
  393: 
  394:         # filling
  395: 
  396:         # vs empty
  397:         empty = Series([], dtype=object)
  398: 
  399:         result = a & empty.copy()
  400:         expected = Series([False, False, False], list("abc"))
  401:         tm.assert_series_equal(result, expected)
  402: 
  403:         result = a | empty.copy()
  404:         expected = Series([True, True, False], list("abc"))
  405:         tm.assert_series_equal(result, expected)
  406: 
  407:         # vs non-matching
  408:         with tm.assert_produces_warning(FutureWarning):
  409:             result = a & Series([1], ["z"])
  410:         expected = Series([False, False, False, False], list("abcz"))
  411:         tm.assert_series_equal(result, expected)
  412: 
  413:         with tm.assert_produces_warning(FutureWarning):
  414:             result = a | Series([1], ["z"])
  415:         expected = Series([True, True, False, False], list("abcz"))
  416:         tm.assert_series_equal(result, expected)
  417: 
  418:         # identity
  419:         # we would like s[s|e] == s to hold for any e, whether empty or not
  420:         with tm.assert_produces_warning(FutureWarning):
  421:             for e in [
  422:                 empty.copy(),
  423:                 Series([1], ["z"]),
  424:                 Series(np.nan, b.index),
  425:                 Series(np.nan, a.index),
  426:             ]:
  427:                 result = a[a | e]
  428:                 tm.assert_series_equal(result, a[a])
  429: 
  430:         for e in [Series(["z"])]:
  431:             warn = FutureWarning if using_infer_string else None
  432:             if using_infer_string:
  433:                 import pyarrow as pa
  434: 
  435:                 with tm.assert_produces_warning(warn, match="Operation between non"):
  436:                     with pytest.raises(
  437:                         pa.lib.ArrowNotImplementedError, match="has no kernel"
  438:                     ):
  439:                         result = a[a | e]
  440:             else:
  441:                 result = a[a | e]
  442:             tm.assert_series_equal(result, a[a])
  443: 
  444:         # vs scalars
  445:         index = list("bca")
  446:         t = Series([True, False, True])
  447: 
  448:         for v in [True, 1, 2]:
  449:             result = Series([True, False, True], index=index) | v
  450:             expected = Series([True, True, True], index=index)
  451:             tm.assert_series_equal(result, expected)
  452: 
  453:         msg = "Cannot perform.+with a dtyped.+array and scalar of type"
  454:         for v in [np.nan, "foo"]:
  455:             with pytest.raises(TypeError, match=msg):
  456:                 t | v
  457: 
  458:         for v in [False, 0]:
  459:             result = Series([True, False, True], index=index) | v
  460:             expected = Series([True, False, True], index=index)
  461:             tm.assert_series_equal(result, expected)
  462: 
  463:         for v in [True, 1]:
  464:             result = Series([True, False, True], index=index) & v
  465:             expected = Series([True, False, True], index=index)
  466:             tm.assert_series_equal(result, expected)
  467: 
  468:         for v in [False, 0]:
  469:             result = Series([True, False, True], index=index) & v
  470:             expected = Series([False, False, False], index=index)
  471:             tm.assert_series_equal(result, expected)
  472:         msg = "Cannot perform.+with a dtyped.+array and scalar of type"
  473:         for v in [np.nan]:
  474:             with pytest.raises(TypeError, match=msg):
  475:                 t & v
  476: 
  477:     def test_logical_ops_df_compat(self):
  478:         # GH#1134
  479:         s1 = Series([True, False, True], index=list("ABC"), name="x")
  480:         s2 = Series([True, True, False], index=list("ABD"), name="x")
  481: 
  482:         exp = Series([True, False, False, False], index=list("ABCD"), name="x")
  483:         tm.assert_series_equal(s1 & s2, exp)
  484:         tm.assert_series_equal(s2 & s1, exp)
  485: 
  486:         # True | np.nan => True
  487:         exp_or1 = Series([True, True, True, False], index=list("ABCD"), name="x")
  488:         tm.assert_series_equal(s1 | s2, exp_or1)
  489:         # np.nan | True => np.nan, filled with False
  490:         exp_or = Series([True, True, False, False], index=list("ABCD"), name="x")
  491:         tm.assert_series_equal(s2 | s1, exp_or)
  492: 
  493:         # DataFrame doesn't fill nan with False
  494:         tm.assert_frame_equal(s1.to_frame() & s2.to_frame(), exp.to_frame())
  495:         tm.assert_frame_equal(s2.to_frame() & s1.to_frame(), exp.to_frame())
  496: 
  497:         exp = DataFrame({"x": [True, True, np.nan, np.nan]}, index=list("ABCD"))
  498:         tm.assert_frame_equal(s1.to_frame() | s2.to_frame(), exp_or1.to_frame())
  499:         tm.assert_frame_equal(s2.to_frame() | s1.to_frame(), exp_or.to_frame())
  500: 
  501:         # different length
  502:         s3 = Series([True, False, True], index=list("ABC"), name="x")
  503:         s4 = Series([True, True, True, True], index=list("ABCD"), name="x")
  504: 
  505:         exp = Series([True, False, True, False], index=list("ABCD"), name="x")
  506:         tm.assert_series_equal(s3 & s4, exp)
  507:         tm.assert_series_equal(s4 & s3, exp)
  508: 
  509:         # np.nan | True => np.nan, filled with False
  510:         exp_or1 = Series([True, True, True, False], index=list("ABCD"), name="x")
  511:         tm.assert_series_equal(s3 | s4, exp_or1)
  512:         # True | np.nan => True
  513:         exp_or = Series([True, True, True, True], index=list("ABCD"), name="x")
  514:         tm.assert_series_equal(s4 | s3, exp_or)
  515: 
  516:         tm.assert_frame_equal(s3.to_frame() & s4.to_frame(), exp.to_frame())
  517:         tm.assert_frame_equal(s4.to_frame() & s3.to_frame(), exp.to_frame())
  518: 
  519:         tm.assert_frame_equal(s3.to_frame() | s4.to_frame(), exp_or1.to_frame())
  520:         tm.assert_frame_equal(s4.to_frame() | s3.to_frame(), exp_or.to_frame())
  521: 
  522:     @pytest.mark.xfail(reason="Will pass once #52839 deprecation is enforced")
  523:     def test_int_dtype_different_index_not_bool(self):
  524:         # GH 52500
  525:         ser1 = Series([1, 2, 3], index=[10, 11, 23], name="a")
  526:         ser2 = Series([10, 20, 30], index=[11, 10, 23], name="a")
  527:         result = np.bitwise_xor(ser1, ser2)
  528:         expected = Series([21, 8, 29], index=[10, 11, 23], name="a")
  529:         tm.assert_series_equal(result, expected)
  530: 
  531:         result = ser1 ^ ser2
  532:         tm.assert_series_equal(result, expected)
  533: 
  534:     def test_pyarrow_numpy_string_invalid(self):
  535:         # GH#56008
  536:         pytest.importorskip("pyarrow")
  537:         ser = Series([False, True])
  538:         ser2 = Series(["a", "b"], dtype="string[pyarrow_numpy]")
  539:         result = ser == ser2
  540:         expected = Series(False, index=ser.index)
  541:         tm.assert_series_equal(result, expected)
  542: 
  543:         result = ser != ser2
  544:         expected = Series(True, index=ser.index)
  545:         tm.assert_series_equal(result, expected)
  546: 
  547:         with pytest.raises(TypeError, match="Invalid comparison"):
  548:             ser > ser2
