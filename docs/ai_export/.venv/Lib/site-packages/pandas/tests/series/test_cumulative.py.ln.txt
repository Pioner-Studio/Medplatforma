    1: """
    2: Tests for Series cumulative operations.
    3: 
    4: See also
    5: --------
    6: tests.frame.test_cumulative
    7: """
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: import pandas as pd
   13: import pandas._testing as tm
   14: 
   15: methods = {
   16:     "cumsum": np.cumsum,
   17:     "cumprod": np.cumprod,
   18:     "cummin": np.minimum.accumulate,
   19:     "cummax": np.maximum.accumulate,
   20: }
   21: 
   22: 
   23: class TestSeriesCumulativeOps:
   24:     @pytest.mark.parametrize("func", [np.cumsum, np.cumprod])
   25:     def test_datetime_series(self, datetime_series, func):
   26:         tm.assert_numpy_array_equal(
   27:             func(datetime_series).values,
   28:             func(np.array(datetime_series)),
   29:             check_dtype=True,
   30:         )
   31: 
   32:         # with missing values
   33:         ts = datetime_series.copy()
   34:         ts[::2] = np.nan
   35: 
   36:         result = func(ts)[1::2]
   37:         expected = func(np.array(ts.dropna()))
   38: 
   39:         tm.assert_numpy_array_equal(result.values, expected, check_dtype=False)
   40: 
   41:     @pytest.mark.parametrize("method", ["cummin", "cummax"])
   42:     def test_cummin_cummax(self, datetime_series, method):
   43:         ufunc = methods[method]
   44: 
   45:         result = getattr(datetime_series, method)().values
   46:         expected = ufunc(np.array(datetime_series))
   47: 
   48:         tm.assert_numpy_array_equal(result, expected)
   49:         ts = datetime_series.copy()
   50:         ts[::2] = np.nan
   51:         result = getattr(ts, method)()[1::2]
   52:         expected = ufunc(ts.dropna())
   53: 
   54:         result.index = result.index._with_freq(None)
   55:         tm.assert_series_equal(result, expected)
   56: 
   57:     @pytest.mark.parametrize(
   58:         "ts",
   59:         [
   60:             pd.Timedelta(0),
   61:             pd.Timestamp("1999-12-31"),
   62:             pd.Timestamp("1999-12-31").tz_localize("US/Pacific"),
   63:         ],
   64:     )
   65:     @pytest.mark.parametrize(
   66:         "method, skipna, exp_tdi",
   67:         [
   68:             ["cummax", True, ["NaT", "2 days", "NaT", "2 days", "NaT", "3 days"]],
   69:             ["cummin", True, ["NaT", "2 days", "NaT", "1 days", "NaT", "1 days"]],
   70:             [
   71:                 "cummax",
   72:                 False,
   73:                 ["NaT", "NaT", "NaT", "NaT", "NaT", "NaT"],
   74:             ],
   75:             [
   76:                 "cummin",
   77:                 False,
   78:                 ["NaT", "NaT", "NaT", "NaT", "NaT", "NaT"],
   79:             ],
   80:         ],
   81:     )
   82:     def test_cummin_cummax_datetimelike(self, ts, method, skipna, exp_tdi):
   83:         # with ts==pd.Timedelta(0), we are testing td64; with naive Timestamp
   84:         #  we are testing datetime64[ns]; with Timestamp[US/Pacific]
   85:         #  we are testing dt64tz
   86:         tdi = pd.to_timedelta(["NaT", "2 days", "NaT", "1 days", "NaT", "3 days"])
   87:         ser = pd.Series(tdi + ts)
   88: 
   89:         exp_tdi = pd.to_timedelta(exp_tdi)
   90:         expected = pd.Series(exp_tdi + ts)
   91:         result = getattr(ser, method)(skipna=skipna)
   92:         tm.assert_series_equal(expected, result)
   93: 
   94:     @pytest.mark.parametrize(
   95:         "func, exp",
   96:         [
   97:             ("cummin", pd.Period("2012-1-1", freq="D")),
   98:             ("cummax", pd.Period("2012-1-2", freq="D")),
   99:         ],
  100:     )
  101:     def test_cummin_cummax_period(self, func, exp):
  102:         # GH#28385
  103:         ser = pd.Series(
  104:             [pd.Period("2012-1-1", freq="D"), pd.NaT, pd.Period("2012-1-2", freq="D")]
  105:         )
  106:         result = getattr(ser, func)(skipna=False)
  107:         expected = pd.Series([pd.Period("2012-1-1", freq="D"), pd.NaT, pd.NaT])
  108:         tm.assert_series_equal(result, expected)
  109: 
  110:         result = getattr(ser, func)(skipna=True)
  111:         expected = pd.Series([pd.Period("2012-1-1", freq="D"), pd.NaT, exp])
  112:         tm.assert_series_equal(result, expected)
  113: 
  114:     @pytest.mark.parametrize(
  115:         "arg",
  116:         [
  117:             [False, False, False, True, True, False, False],
  118:             [False, False, False, False, False, False, False],
  119:         ],
  120:     )
  121:     @pytest.mark.parametrize(
  122:         "func", [lambda x: x, lambda x: ~x], ids=["identity", "inverse"]
  123:     )
  124:     @pytest.mark.parametrize("method", methods.keys())
  125:     def test_cummethods_bool(self, arg, func, method):
  126:         # GH#6270
  127:         # checking Series method vs the ufunc applied to the values
  128: 
  129:         ser = func(pd.Series(arg))
  130:         ufunc = methods[method]
  131: 
  132:         exp_vals = ufunc(ser.values)
  133:         expected = pd.Series(exp_vals)
  134: 
  135:         result = getattr(ser, method)()
  136: 
  137:         tm.assert_series_equal(result, expected)
  138: 
  139:     @pytest.mark.parametrize(
  140:         "method, expected",
  141:         [
  142:             ["cumsum", pd.Series([0, 1, np.nan, 1], dtype=object)],
  143:             ["cumprod", pd.Series([False, 0, np.nan, 0])],
  144:             ["cummin", pd.Series([False, False, np.nan, False])],
  145:             ["cummax", pd.Series([False, True, np.nan, True])],
  146:         ],
  147:     )
  148:     def test_cummethods_bool_in_object_dtype(self, method, expected):
  149:         ser = pd.Series([False, True, np.nan, False])
  150:         result = getattr(ser, method)()
  151:         tm.assert_series_equal(result, expected)
  152: 
  153:     def test_cumprod_timedelta(self):
  154:         # GH#48111
  155:         ser = pd.Series([pd.Timedelta(days=1), pd.Timedelta(days=3)])
  156:         with pytest.raises(TypeError, match="cumprod not supported for Timedelta"):
  157:             ser.cumprod()
