    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     Series,
    7:     Timestamp,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: from pandas.api.types import is_scalar
   12: 
   13: 
   14: class TestSeriesSearchSorted:
   15:     def test_searchsorted(self):
   16:         ser = Series([1, 2, 3])
   17: 
   18:         result = ser.searchsorted(1, side="left")
   19:         assert is_scalar(result)
   20:         assert result == 0
   21: 
   22:         result = ser.searchsorted(1, side="right")
   23:         assert is_scalar(result)
   24:         assert result == 1
   25: 
   26:     def test_searchsorted_numeric_dtypes_scalar(self):
   27:         ser = Series([1, 2, 90, 1000, 3e9])
   28:         res = ser.searchsorted(30)
   29:         assert is_scalar(res)
   30:         assert res == 2
   31: 
   32:         res = ser.searchsorted([30])
   33:         exp = np.array([2], dtype=np.intp)
   34:         tm.assert_numpy_array_equal(res, exp)
   35: 
   36:     def test_searchsorted_numeric_dtypes_vector(self):
   37:         ser = Series([1, 2, 90, 1000, 3e9])
   38:         res = ser.searchsorted([91, 2e6])
   39:         exp = np.array([3, 4], dtype=np.intp)
   40:         tm.assert_numpy_array_equal(res, exp)
   41: 
   42:     def test_searchsorted_datetime64_scalar(self):
   43:         ser = Series(date_range("20120101", periods=10, freq="2D"))
   44:         val = Timestamp("20120102")
   45:         res = ser.searchsorted(val)
   46:         assert is_scalar(res)
   47:         assert res == 1
   48: 
   49:     def test_searchsorted_datetime64_scalar_mixed_timezones(self):
   50:         # GH 30086
   51:         ser = Series(date_range("20120101", periods=10, freq="2D", tz="UTC"))
   52:         val = Timestamp("20120102", tz="America/New_York")
   53:         res = ser.searchsorted(val)
   54:         assert is_scalar(res)
   55:         assert res == 1
   56: 
   57:     def test_searchsorted_datetime64_list(self):
   58:         ser = Series(date_range("20120101", periods=10, freq="2D"))
   59:         vals = [Timestamp("20120102"), Timestamp("20120104")]
   60:         res = ser.searchsorted(vals)
   61:         exp = np.array([1, 2], dtype=np.intp)
   62:         tm.assert_numpy_array_equal(res, exp)
   63: 
   64:     def test_searchsorted_sorter(self):
   65:         # GH8490
   66:         ser = Series([3, 1, 2])
   67:         res = ser.searchsorted([0, 3], sorter=np.argsort(ser))
   68:         exp = np.array([0, 2], dtype=np.intp)
   69:         tm.assert_numpy_array_equal(res, exp)
   70: 
   71:     def test_searchsorted_dataframe_fail(self):
   72:         # GH#49620
   73:         ser = Series([1, 2, 3, 4, 5])
   74:         vals = pd.DataFrame([[1, 2], [3, 4]])
   75:         msg = "Value must be 1-D array-like or scalar, DataFrame is not supported"
   76:         with pytest.raises(ValueError, match=msg):
   77:             ser.searchsorted(vals)
