    1: """
    2: Series.item method, mainly testing that we get python scalars as opposed to
    3: numpy scalars.
    4: """
    5: import pytest
    6: 
    7: from pandas import (
    8:     Series,
    9:     Timedelta,
   10:     Timestamp,
   11:     date_range,
   12: )
   13: 
   14: 
   15: class TestItem:
   16:     def test_item(self):
   17:         # We are testing that we get python scalars as opposed to numpy scalars
   18:         ser = Series([1])
   19:         result = ser.item()
   20:         assert result == 1
   21:         assert result == ser.iloc[0]
   22:         assert isinstance(result, int)  # i.e. not np.int64
   23: 
   24:         ser = Series([0.5], index=[3])
   25:         result = ser.item()
   26:         assert isinstance(result, float)
   27:         assert result == 0.5
   28: 
   29:         ser = Series([1, 2])
   30:         msg = "can only convert an array of size 1"
   31:         with pytest.raises(ValueError, match=msg):
   32:             ser.item()
   33: 
   34:         dti = date_range("2016-01-01", periods=2)
   35:         with pytest.raises(ValueError, match=msg):
   36:             dti.item()
   37:         with pytest.raises(ValueError, match=msg):
   38:             Series(dti).item()
   39: 
   40:         val = dti[:1].item()
   41:         assert isinstance(val, Timestamp)
   42:         val = Series(dti)[:1].item()
   43:         assert isinstance(val, Timestamp)
   44: 
   45:         tdi = dti - dti
   46:         with pytest.raises(ValueError, match=msg):
   47:             tdi.item()
   48:         with pytest.raises(ValueError, match=msg):
   49:             Series(tdi).item()
   50: 
   51:         val = tdi[:1].item()
   52:         assert isinstance(val, Timedelta)
   53:         val = Series(tdi)[:1].item()
   54:         assert isinstance(val, Timedelta)
   55: 
   56:         # Case where ser[0] would not work
   57:         ser = Series(dti, index=[5, 6])
   58:         val = ser.iloc[:1].item()
   59:         assert val == dti[0]
