    1: from datetime import timezone
    2: 
    3: import pytest
    4: import pytz
    5: 
    6: from pandas._libs.tslibs import timezones
    7: 
    8: from pandas import (
    9:     DatetimeIndex,
   10:     NaT,
   11:     Series,
   12:     Timestamp,
   13:     date_range,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestTZLocalize:
   19:     def test_series_tz_localize_ambiguous_bool(self):
   20:         # make sure that we are correctly accepting bool values as ambiguous
   21: 
   22:         # GH#14402
   23:         ts = Timestamp("2015-11-01 01:00:03")
   24:         expected0 = Timestamp("2015-11-01 01:00:03-0500", tz="US/Central")
   25:         expected1 = Timestamp("2015-11-01 01:00:03-0600", tz="US/Central")
   26: 
   27:         ser = Series([ts])
   28:         expected0 = Series([expected0])
   29:         expected1 = Series([expected1])
   30: 
   31:         with tm.external_error_raised(pytz.AmbiguousTimeError):
   32:             ser.dt.tz_localize("US/Central")
   33: 
   34:         result = ser.dt.tz_localize("US/Central", ambiguous=True)
   35:         tm.assert_series_equal(result, expected0)
   36: 
   37:         result = ser.dt.tz_localize("US/Central", ambiguous=[True])
   38:         tm.assert_series_equal(result, expected0)
   39: 
   40:         result = ser.dt.tz_localize("US/Central", ambiguous=False)
   41:         tm.assert_series_equal(result, expected1)
   42: 
   43:         result = ser.dt.tz_localize("US/Central", ambiguous=[False])
   44:         tm.assert_series_equal(result, expected1)
   45: 
   46:     def test_series_tz_localize_matching_index(self):
   47:         # Matching the index of the result with that of the original series
   48:         # GH 43080
   49:         dt_series = Series(
   50:             date_range(start="2021-01-01T02:00:00", periods=5, freq="1D"),
   51:             index=[2, 6, 7, 8, 11],
   52:             dtype="category",
   53:         )
   54:         result = dt_series.dt.tz_localize("Europe/Berlin")
   55:         expected = Series(
   56:             date_range(
   57:                 start="2021-01-01T02:00:00", periods=5, freq="1D", tz="Europe/Berlin"
   58:             ),
   59:             index=[2, 6, 7, 8, 11],
   60:         )
   61:         tm.assert_series_equal(result, expected)
   62: 
   63:     @pytest.mark.parametrize(
   64:         "method, exp",
   65:         [
   66:             ["shift_forward", "2015-03-29 03:00:00"],
   67:             ["shift_backward", "2015-03-29 01:59:59.999999999"],
   68:             ["NaT", NaT],
   69:             ["raise", None],
   70:             ["foo", "invalid"],
   71:         ],
   72:     )
   73:     def test_tz_localize_nonexistent(self, warsaw, method, exp, unit):
   74:         # GH 8917
   75:         tz = warsaw
   76:         n = 60
   77:         dti = date_range(start="2015-03-29 02:00:00", periods=n, freq="min", unit=unit)
   78:         ser = Series(1, index=dti)
   79:         df = ser.to_frame()
   80: 
   81:         if method == "raise":
   82:             with tm.external_error_raised(pytz.NonExistentTimeError):
   83:                 dti.tz_localize(tz, nonexistent=method)
   84:             with tm.external_error_raised(pytz.NonExistentTimeError):
   85:                 ser.tz_localize(tz, nonexistent=method)
   86:             with tm.external_error_raised(pytz.NonExistentTimeError):
   87:                 df.tz_localize(tz, nonexistent=method)
   88: 
   89:         elif exp == "invalid":
   90:             msg = (
   91:                 "The nonexistent argument must be one of "
   92:                 "'raise', 'NaT', 'shift_forward', 'shift_backward' "
   93:                 "or a timedelta object"
   94:             )
   95:             with pytest.raises(ValueError, match=msg):
   96:                 dti.tz_localize(tz, nonexistent=method)
   97:             with pytest.raises(ValueError, match=msg):
   98:                 ser.tz_localize(tz, nonexistent=method)
   99:             with pytest.raises(ValueError, match=msg):
  100:                 df.tz_localize(tz, nonexistent=method)
  101: 
  102:         else:
  103:             result = ser.tz_localize(tz, nonexistent=method)
  104:             expected = Series(1, index=DatetimeIndex([exp] * n, tz=tz).as_unit(unit))
  105:             tm.assert_series_equal(result, expected)
  106: 
  107:             result = df.tz_localize(tz, nonexistent=method)
  108:             expected = expected.to_frame()
  109:             tm.assert_frame_equal(result, expected)
  110: 
  111:             res_index = dti.tz_localize(tz, nonexistent=method)
  112:             tm.assert_index_equal(res_index, expected.index)
  113: 
  114:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
  115:     def test_series_tz_localize_empty(self, tzstr):
  116:         # GH#2248
  117:         ser = Series(dtype=object)
  118: 
  119:         ser2 = ser.tz_localize("utc")
  120:         assert ser2.index.tz == timezone.utc
  121: 
  122:         ser2 = ser.tz_localize(tzstr)
  123:         timezones.tz_compare(ser2.index.tz, timezones.maybe_get_tz(tzstr))
