    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     Series,
    7:     array,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: pytestmark = pytest.mark.filterwarnings(
   13:     "ignore:Series.view is deprecated and will be removed in a future version.:FutureWarning"  # noqa: E501
   14: )
   15: 
   16: 
   17: class TestView:
   18:     def test_view_i8_to_datetimelike(self):
   19:         dti = date_range("2000", periods=4, tz="US/Central")
   20:         ser = Series(dti.asi8)
   21: 
   22:         result = ser.view(dti.dtype)
   23:         tm.assert_datetime_array_equal(result._values, dti._data._with_freq(None))
   24: 
   25:         pi = dti.tz_localize(None).to_period("D")
   26:         ser = Series(pi.asi8)
   27:         result = ser.view(pi.dtype)
   28:         tm.assert_period_array_equal(result._values, pi._data)
   29: 
   30:     def test_view_tz(self):
   31:         # GH#24024
   32:         ser = Series(date_range("2000", periods=4, tz="US/Central"))
   33:         result = ser.view("i8")
   34:         expected = Series(
   35:             [
   36:                 946706400000000000,
   37:                 946792800000000000,
   38:                 946879200000000000,
   39:                 946965600000000000,
   40:             ]
   41:         )
   42:         tm.assert_series_equal(result, expected)
   43: 
   44:     @pytest.mark.parametrize(
   45:         "first", ["m8[ns]", "M8[ns]", "M8[ns, US/Central]", "period[D]"]
   46:     )
   47:     @pytest.mark.parametrize(
   48:         "second", ["m8[ns]", "M8[ns]", "M8[ns, US/Central]", "period[D]"]
   49:     )
   50:     @pytest.mark.parametrize("box", [Series, Index, array])
   51:     def test_view_between_datetimelike(self, first, second, box):
   52:         dti = date_range("2016-01-01", periods=3)
   53: 
   54:         orig = box(dti)
   55:         obj = orig.view(first)
   56:         assert obj.dtype == first
   57:         tm.assert_numpy_array_equal(np.asarray(obj.view("i8")), dti.asi8)
   58: 
   59:         res = obj.view(second)
   60:         assert res.dtype == second
   61:         tm.assert_numpy_array_equal(np.asarray(obj.view("i8")), dti.asi8)
