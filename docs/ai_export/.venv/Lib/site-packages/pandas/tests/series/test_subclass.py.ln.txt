    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: pytestmark = pytest.mark.filterwarnings(
    8:     "ignore:Passing a BlockManager|Passing a SingleBlockManager:DeprecationWarning"
    9: )
   10: 
   11: 
   12: class TestSeriesSubclassing:
   13:     @pytest.mark.parametrize(
   14:         "idx_method, indexer, exp_data, exp_idx",
   15:         [
   16:             ["loc", ["a", "b"], [1, 2], "ab"],
   17:             ["iloc", [2, 3], [3, 4], "cd"],
   18:         ],
   19:     )
   20:     def test_indexing_sliced(self, idx_method, indexer, exp_data, exp_idx):
   21:         s = tm.SubclassedSeries([1, 2, 3, 4], index=list("abcd"))
   22:         res = getattr(s, idx_method)[indexer]
   23:         exp = tm.SubclassedSeries(exp_data, index=list(exp_idx))
   24:         tm.assert_series_equal(res, exp)
   25: 
   26:     def test_to_frame(self):
   27:         s = tm.SubclassedSeries([1, 2, 3, 4], index=list("abcd"), name="xxx")
   28:         res = s.to_frame()
   29:         exp = tm.SubclassedDataFrame({"xxx": [1, 2, 3, 4]}, index=list("abcd"))
   30:         tm.assert_frame_equal(res, exp)
   31: 
   32:     def test_subclass_unstack(self):
   33:         # GH 15564
   34:         s = tm.SubclassedSeries([1, 2, 3, 4], index=[list("aabb"), list("xyxy")])
   35: 
   36:         res = s.unstack()
   37:         exp = tm.SubclassedDataFrame({"x": [1, 3], "y": [2, 4]}, index=["a", "b"])
   38: 
   39:         tm.assert_frame_equal(res, exp)
   40: 
   41:     def test_subclass_empty_repr(self):
   42:         sub_series = tm.SubclassedSeries()
   43:         assert "SubclassedSeries" in repr(sub_series)
   44: 
   45:     def test_asof(self):
   46:         N = 3
   47:         rng = pd.date_range("1/1/1990", periods=N, freq="53s")
   48:         s = tm.SubclassedSeries({"A": [np.nan, np.nan, np.nan]}, index=rng)
   49: 
   50:         result = s.asof(rng[-2:])
   51:         assert isinstance(result, tm.SubclassedSeries)
   52: 
   53:     def test_explode(self):
   54:         s = tm.SubclassedSeries([[1, 2, 3], "foo", [], [3, 4]])
   55:         result = s.explode()
   56:         assert isinstance(result, tm.SubclassedSeries)
   57: 
   58:     def test_equals(self):
   59:         # https://github.com/pandas-dev/pandas/pull/34402
   60:         # allow subclass in both directions
   61:         s1 = pd.Series([1, 2, 3])
   62:         s2 = tm.SubclassedSeries([1, 2, 3])
   63:         assert s1.equals(s2)
   64:         assert s2.equals(s1)
   65: 
   66: 
   67: class SubclassedSeries(pd.Series):
   68:     @property
   69:     def _constructor(self):
   70:         def _new(*args, **kwargs):
   71:             # some constructor logic that accesses the Series' name
   72:             if self.name == "test":
   73:                 return pd.Series(*args, **kwargs)
   74:             return SubclassedSeries(*args, **kwargs)
   75: 
   76:         return _new
   77: 
   78: 
   79: def test_constructor_from_dict():
   80:     # https://github.com/pandas-dev/pandas/issues/52445
   81:     result = SubclassedSeries({"a": 1, "b": 2, "c": 3})
   82:     assert isinstance(result, SubclassedSeries)
