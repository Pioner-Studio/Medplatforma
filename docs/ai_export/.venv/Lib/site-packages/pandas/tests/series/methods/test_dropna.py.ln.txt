    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DatetimeIndex,
    6:     IntervalIndex,
    7:     NaT,
    8:     Period,
    9:     Series,
   10:     Timestamp,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestDropna:
   16:     def test_dropna_empty(self):
   17:         ser = Series([], dtype=object)
   18: 
   19:         assert len(ser.dropna()) == 0
   20:         return_value = ser.dropna(inplace=True)
   21:         assert return_value is None
   22:         assert len(ser) == 0
   23: 
   24:         # invalid axis
   25:         msg = "No axis named 1 for object type Series"
   26:         with pytest.raises(ValueError, match=msg):
   27:             ser.dropna(axis=1)
   28: 
   29:     def test_dropna_preserve_name(self, datetime_series):
   30:         datetime_series[:5] = np.nan
   31:         result = datetime_series.dropna()
   32:         assert result.name == datetime_series.name
   33:         name = datetime_series.name
   34:         ts = datetime_series.copy()
   35:         return_value = ts.dropna(inplace=True)
   36:         assert return_value is None
   37:         assert ts.name == name
   38: 
   39:     def test_dropna_no_nan(self):
   40:         for ser in [
   41:             Series([1, 2, 3], name="x"),
   42:             Series([False, True, False], name="x"),
   43:         ]:
   44:             result = ser.dropna()
   45:             tm.assert_series_equal(result, ser)
   46:             assert result is not ser
   47: 
   48:             s2 = ser.copy()
   49:             return_value = s2.dropna(inplace=True)
   50:             assert return_value is None
   51:             tm.assert_series_equal(s2, ser)
   52: 
   53:     def test_dropna_intervals(self):
   54:         ser = Series(
   55:             [np.nan, 1, 2, 3],
   56:             IntervalIndex.from_arrays([np.nan, 0, 1, 2], [np.nan, 1, 2, 3]),
   57:         )
   58: 
   59:         result = ser.dropna()
   60:         expected = ser.iloc[1:]
   61:         tm.assert_series_equal(result, expected)
   62: 
   63:     def test_dropna_period_dtype(self):
   64:         # GH#13737
   65:         ser = Series([Period("2011-01", freq="M"), Period("NaT", freq="M")])
   66:         result = ser.dropna()
   67:         expected = Series([Period("2011-01", freq="M")])
   68: 
   69:         tm.assert_series_equal(result, expected)
   70: 
   71:     def test_datetime64_tz_dropna(self, unit):
   72:         # DatetimeLikeBlock
   73:         ser = Series(
   74:             [
   75:                 Timestamp("2011-01-01 10:00"),
   76:                 NaT,
   77:                 Timestamp("2011-01-03 10:00"),
   78:                 NaT,
   79:             ],
   80:             dtype=f"M8[{unit}]",
   81:         )
   82:         result = ser.dropna()
   83:         expected = Series(
   84:             [Timestamp("2011-01-01 10:00"), Timestamp("2011-01-03 10:00")],
   85:             index=[0, 2],
   86:             dtype=f"M8[{unit}]",
   87:         )
   88:         tm.assert_series_equal(result, expected)
   89: 
   90:         # DatetimeTZBlock
   91:         idx = DatetimeIndex(
   92:             ["2011-01-01 10:00", NaT, "2011-01-03 10:00", NaT], tz="Asia/Tokyo"
   93:         ).as_unit(unit)
   94:         ser = Series(idx)
   95:         assert ser.dtype == f"datetime64[{unit}, Asia/Tokyo]"
   96:         result = ser.dropna()
   97:         expected = Series(
   98:             [
   99:                 Timestamp("2011-01-01 10:00", tz="Asia/Tokyo"),
  100:                 Timestamp("2011-01-03 10:00", tz="Asia/Tokyo"),
  101:             ],
  102:             index=[0, 2],
  103:             dtype=f"datetime64[{unit}, Asia/Tokyo]",
  104:         )
  105:         assert result.dtype == f"datetime64[{unit}, Asia/Tokyo]"
  106:         tm.assert_series_equal(result, expected)
  107: 
  108:     @pytest.mark.parametrize("val", [1, 1.5])
  109:     def test_dropna_ignore_index(self, val):
  110:         # GH#31725
  111:         ser = Series([1, 2, val], index=[3, 2, 1])
  112:         result = ser.dropna(ignore_index=True)
  113:         expected = Series([1, 2, val])
  114:         tm.assert_series_equal(result, expected)
  115: 
  116:         ser.dropna(ignore_index=True, inplace=True)
  117:         tm.assert_series_equal(ser, expected)
