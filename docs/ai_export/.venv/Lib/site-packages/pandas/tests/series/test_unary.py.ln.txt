    1: import pytest
    2: 
    3: from pandas import Series
    4: import pandas._testing as tm
    5: 
    6: 
    7: class TestSeriesUnaryOps:
    8:     # __neg__, __pos__, __invert__
    9: 
   10:     def test_neg(self):
   11:         ser = Series(range(5), dtype="float64", name="series")
   12:         tm.assert_series_equal(-ser, -1 * ser)
   13: 
   14:     def test_invert(self):
   15:         ser = Series(range(5), dtype="float64", name="series")
   16:         tm.assert_series_equal(-(ser < 0), ~(ser < 0))
   17: 
   18:     @pytest.mark.parametrize(
   19:         "source, neg_target, abs_target",
   20:         [
   21:             ([1, 2, 3], [-1, -2, -3], [1, 2, 3]),
   22:             ([1, 2, None], [-1, -2, None], [1, 2, None]),
   23:         ],
   24:     )
   25:     def test_all_numeric_unary_operators(
   26:         self, any_numeric_ea_dtype, source, neg_target, abs_target
   27:     ):
   28:         # GH38794
   29:         dtype = any_numeric_ea_dtype
   30:         ser = Series(source, dtype=dtype)
   31:         neg_result, pos_result, abs_result = -ser, +ser, abs(ser)
   32:         if dtype.startswith("U"):
   33:             neg_target = -Series(source, dtype=dtype)
   34:         else:
   35:             neg_target = Series(neg_target, dtype=dtype)
   36: 
   37:         abs_target = Series(abs_target, dtype=dtype)
   38: 
   39:         tm.assert_series_equal(neg_result, neg_target)
   40:         tm.assert_series_equal(pos_result, ser)
   41:         tm.assert_series_equal(abs_result, abs_target)
   42: 
   43:     @pytest.mark.parametrize("op", ["__neg__", "__abs__"])
   44:     def test_unary_float_op_mask(self, float_ea_dtype, op):
   45:         dtype = float_ea_dtype
   46:         ser = Series([1.1, 2.2, 3.3], dtype=dtype)
   47:         result = getattr(ser, op)()
   48:         target = result.copy(deep=True)
   49:         ser[0] = None
   50:         tm.assert_series_equal(result, target)
