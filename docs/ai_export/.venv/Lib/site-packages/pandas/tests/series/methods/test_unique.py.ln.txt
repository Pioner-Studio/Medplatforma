    1: import numpy as np
    2: 
    3: from pandas import (
    4:     Categorical,
    5:     IntervalIndex,
    6:     Series,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestUnique:
   13:     def test_unique_uint64(self):
   14:         ser = Series([1, 2, 2**63, 2**63], dtype=np.uint64)
   15:         res = ser.unique()
   16:         exp = np.array([1, 2, 2**63], dtype=np.uint64)
   17:         tm.assert_numpy_array_equal(res, exp)
   18: 
   19:     def test_unique_data_ownership(self):
   20:         # it works! GH#1807
   21:         Series(Series(["a", "c", "b"]).unique()).sort_values()
   22: 
   23:     def test_unique(self):
   24:         # GH#714 also, dtype=float
   25:         ser = Series([1.2345] * 100)
   26:         ser[::2] = np.nan
   27:         result = ser.unique()
   28:         assert len(result) == 2
   29: 
   30:         # explicit f4 dtype
   31:         ser = Series([1.2345] * 100, dtype="f4")
   32:         ser[::2] = np.nan
   33:         result = ser.unique()
   34:         assert len(result) == 2
   35: 
   36:     def test_unique_nan_object_dtype(self):
   37:         # NAs in object arrays GH#714
   38:         ser = Series(["foo"] * 100, dtype="O")
   39:         ser[::2] = np.nan
   40:         result = ser.unique()
   41:         assert len(result) == 2
   42: 
   43:     def test_unique_none(self):
   44:         # decision about None
   45:         ser = Series([1, 2, 3, None, None, None], dtype=object)
   46:         result = ser.unique()
   47:         expected = np.array([1, 2, 3, None], dtype=object)
   48:         tm.assert_numpy_array_equal(result, expected)
   49: 
   50:     def test_unique_categorical(self):
   51:         # GH#18051
   52:         cat = Categorical([])
   53:         ser = Series(cat)
   54:         result = ser.unique()
   55:         tm.assert_categorical_equal(result, cat)
   56: 
   57:         cat = Categorical([np.nan])
   58:         ser = Series(cat)
   59:         result = ser.unique()
   60:         tm.assert_categorical_equal(result, cat)
   61: 
   62:     def test_tz_unique(self):
   63:         # GH 46128
   64:         dti1 = date_range("2016-01-01", periods=3)
   65:         ii1 = IntervalIndex.from_breaks(dti1)
   66:         ser1 = Series(ii1)
   67:         uni1 = ser1.unique()
   68:         tm.assert_interval_array_equal(ser1.array, uni1)
   69: 
   70:         dti2 = date_range("2016-01-01", periods=3, tz="US/Eastern")
   71:         ii2 = IntervalIndex.from_breaks(dti2)
   72:         ser2 = Series(ii2)
   73:         uni2 = ser2.unique()
   74:         tm.assert_interval_array_equal(ser2.array, uni2)
   75: 
   76:         assert uni1.dtype != uni2.dtype
