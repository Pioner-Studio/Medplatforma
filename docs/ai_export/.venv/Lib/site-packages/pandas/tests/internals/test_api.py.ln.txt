    1: """
    2: Tests for the pseudo-public API implemented in internals/api.py and exposed
    3: in core.internals
    4: """
    5: 
    6: import pytest
    7: 
    8: import pandas as pd
    9: import pandas._testing as tm
   10: from pandas.core import internals
   11: from pandas.core.internals import api
   12: 
   13: 
   14: def test_internals_api():
   15:     assert internals.make_block is api.make_block
   16: 
   17: 
   18: def test_namespace():
   19:     # SUBJECT TO CHANGE
   20: 
   21:     modules = [
   22:         "blocks",
   23:         "concat",
   24:         "managers",
   25:         "construction",
   26:         "array_manager",
   27:         "base",
   28:         "api",
   29:         "ops",
   30:     ]
   31:     expected = [
   32:         "make_block",
   33:         "DataManager",
   34:         "ArrayManager",
   35:         "BlockManager",
   36:         "SingleDataManager",
   37:         "SingleBlockManager",
   38:         "SingleArrayManager",
   39:         "concatenate_managers",
   40:     ]
   41: 
   42:     result = [x for x in dir(internals) if not x.startswith("__")]
   43:     assert set(result) == set(expected + modules)
   44: 
   45: 
   46: @pytest.mark.parametrize(
   47:     "name",
   48:     [
   49:         "NumericBlock",
   50:         "ObjectBlock",
   51:         "Block",
   52:         "ExtensionBlock",
   53:         "DatetimeTZBlock",
   54:     ],
   55: )
   56: def test_deprecations(name):
   57:     # GH#55139
   58:     msg = f"{name} is deprecated.* Use public APIs instead"
   59:     with tm.assert_produces_warning(DeprecationWarning, match=msg):
   60:         getattr(internals, name)
   61: 
   62:     if name not in ["NumericBlock", "ObjectBlock"]:
   63:         # NumericBlock and ObjectBlock are not in the internals.api namespace
   64:         with tm.assert_produces_warning(DeprecationWarning, match=msg):
   65:             getattr(api, name)
   66: 
   67: 
   68: def test_make_block_2d_with_dti():
   69:     # GH#41168
   70:     dti = pd.date_range("2012", periods=3, tz="UTC")
   71:     blk = api.make_block(dti, placement=[0])
   72: 
   73:     assert blk.shape == (1, 3)
   74:     assert blk.values.shape == (1, 3)
   75: 
   76: 
   77: def test_create_block_manager_from_blocks_deprecated():
   78:     # GH#33892
   79:     # If they must, downstream packages should get this from internals.api,
   80:     #  not internals.
   81:     msg = (
   82:         "create_block_manager_from_blocks is deprecated and will be "
   83:         "removed in a future version. Use public APIs instead"
   84:     )
   85:     with tm.assert_produces_warning(DeprecationWarning, match=msg):
   86:         internals.create_block_manager_from_blocks
