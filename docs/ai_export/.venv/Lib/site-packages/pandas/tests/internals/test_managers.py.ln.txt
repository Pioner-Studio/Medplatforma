    1: """
    2: Testing interaction between the different managers (BlockManager, ArrayManager)
    3: """
    4: import os
    5: import subprocess
    6: import sys
    7: 
    8: import pytest
    9: 
   10: from pandas.core.dtypes.missing import array_equivalent
   11: 
   12: import pandas as pd
   13: import pandas._testing as tm
   14: from pandas.core.internals import (
   15:     ArrayManager,
   16:     BlockManager,
   17:     SingleArrayManager,
   18:     SingleBlockManager,
   19: )
   20: 
   21: 
   22: def test_dataframe_creation():
   23:     msg = "data_manager option is deprecated"
   24:     with tm.assert_produces_warning(FutureWarning, match=msg):
   25:         with pd.option_context("mode.data_manager", "block"):
   26:             df_block = pd.DataFrame(
   27:                 {"a": [1, 2, 3], "b": [0.1, 0.2, 0.3], "c": [4, 5, 6]}
   28:             )
   29:     assert isinstance(df_block._mgr, BlockManager)
   30: 
   31:     with tm.assert_produces_warning(FutureWarning, match=msg):
   32:         with pd.option_context("mode.data_manager", "array"):
   33:             df_array = pd.DataFrame(
   34:                 {"a": [1, 2, 3], "b": [0.1, 0.2, 0.3], "c": [4, 5, 6]}
   35:             )
   36:     assert isinstance(df_array._mgr, ArrayManager)
   37: 
   38:     # also ensure both are seen as equal
   39:     tm.assert_frame_equal(df_block, df_array)
   40: 
   41:     # conversion from one manager to the other
   42:     result = df_block._as_manager("block")
   43:     assert isinstance(result._mgr, BlockManager)
   44:     result = df_block._as_manager("array")
   45:     assert isinstance(result._mgr, ArrayManager)
   46:     tm.assert_frame_equal(result, df_block)
   47:     assert all(
   48:         array_equivalent(left, right)
   49:         for left, right in zip(result._mgr.arrays, df_array._mgr.arrays)
   50:     )
   51: 
   52:     result = df_array._as_manager("array")
   53:     assert isinstance(result._mgr, ArrayManager)
   54:     result = df_array._as_manager("block")
   55:     assert isinstance(result._mgr, BlockManager)
   56:     tm.assert_frame_equal(result, df_array)
   57:     assert len(result._mgr.blocks) == 2
   58: 
   59: 
   60: def test_series_creation():
   61:     msg = "data_manager option is deprecated"
   62:     with tm.assert_produces_warning(FutureWarning, match=msg):
   63:         with pd.option_context("mode.data_manager", "block"):
   64:             s_block = pd.Series([1, 2, 3], name="A", index=["a", "b", "c"])
   65:     assert isinstance(s_block._mgr, SingleBlockManager)
   66: 
   67:     with tm.assert_produces_warning(FutureWarning, match=msg):
   68:         with pd.option_context("mode.data_manager", "array"):
   69:             s_array = pd.Series([1, 2, 3], name="A", index=["a", "b", "c"])
   70:     assert isinstance(s_array._mgr, SingleArrayManager)
   71: 
   72:     # also ensure both are seen as equal
   73:     tm.assert_series_equal(s_block, s_array)
   74: 
   75:     # conversion from one manager to the other
   76:     result = s_block._as_manager("block")
   77:     assert isinstance(result._mgr, SingleBlockManager)
   78:     result = s_block._as_manager("array")
   79:     assert isinstance(result._mgr, SingleArrayManager)
   80:     tm.assert_series_equal(result, s_block)
   81: 
   82:     result = s_array._as_manager("array")
   83:     assert isinstance(result._mgr, SingleArrayManager)
   84:     result = s_array._as_manager("block")
   85:     assert isinstance(result._mgr, SingleBlockManager)
   86:     tm.assert_series_equal(result, s_array)
   87: 
   88: 
   89: @pytest.mark.single_cpu
   90: @pytest.mark.parametrize("manager", ["block", "array"])
   91: def test_array_manager_depr_env_var(manager):
   92:     # GH#55043
   93:     test_env = os.environ.copy()
   94:     test_env["PANDAS_DATA_MANAGER"] = manager
   95:     response = subprocess.run(
   96:         [sys.executable, "-c", "import pandas"],
   97:         capture_output=True,
   98:         env=test_env,
   99:         check=True,
  100:     )
  101:     msg = "FutureWarning: The env variable PANDAS_DATA_MANAGER is set"
  102:     stderr_msg = response.stderr.decode("utf-8")
  103:     assert msg in stderr_msg, stderr_msg
