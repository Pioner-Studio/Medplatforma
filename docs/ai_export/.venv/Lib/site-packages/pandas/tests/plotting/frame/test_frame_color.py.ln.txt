    1: """ Test cases for DataFrame.plot """
    2: import re
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: import pandas as pd
    8: from pandas import DataFrame
    9: import pandas._testing as tm
   10: from pandas.tests.plotting.common import (
   11:     _check_colors,
   12:     _check_plot_works,
   13:     _unpack_cycler,
   14: )
   15: from pandas.util.version import Version
   16: 
   17: mpl = pytest.importorskip("matplotlib")
   18: plt = pytest.importorskip("matplotlib.pyplot")
   19: cm = pytest.importorskip("matplotlib.cm")
   20: 
   21: 
   22: def _check_colors_box(bp, box_c, whiskers_c, medians_c, caps_c="k", fliers_c=None):
   23:     if fliers_c is None:
   24:         fliers_c = "k"
   25:     _check_colors(bp["boxes"], linecolors=[box_c] * len(bp["boxes"]))
   26:     _check_colors(bp["whiskers"], linecolors=[whiskers_c] * len(bp["whiskers"]))
   27:     _check_colors(bp["medians"], linecolors=[medians_c] * len(bp["medians"]))
   28:     _check_colors(bp["fliers"], linecolors=[fliers_c] * len(bp["fliers"]))
   29:     _check_colors(bp["caps"], linecolors=[caps_c] * len(bp["caps"]))
   30: 
   31: 
   32: class TestDataFrameColor:
   33:     @pytest.mark.parametrize(
   34:         "color", ["C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9"]
   35:     )
   36:     def test_mpl2_color_cycle_str(self, color):
   37:         # GH 15516
   38:         df = DataFrame(
   39:             np.random.default_rng(2).standard_normal((10, 3)), columns=["a", "b", "c"]
   40:         )
   41:         _check_plot_works(df.plot, color=color)
   42: 
   43:     def test_color_single_series_list(self):
   44:         # GH 3486
   45:         df = DataFrame({"A": [1, 2, 3]})
   46:         _check_plot_works(df.plot, color=["red"])
   47: 
   48:     @pytest.mark.parametrize("color", [(1, 0, 0), (1, 0, 0, 0.5)])
   49:     def test_rgb_tuple_color(self, color):
   50:         # GH 16695
   51:         df = DataFrame({"x": [1, 2], "y": [3, 4]})
   52:         _check_plot_works(df.plot, x="x", y="y", color=color)
   53: 
   54:     def test_color_empty_string(self):
   55:         df = DataFrame(np.random.default_rng(2).standard_normal((10, 2)))
   56:         with pytest.raises(ValueError, match="Invalid color argument:"):
   57:             df.plot(color="")
   58: 
   59:     def test_color_and_style_arguments(self):
   60:         df = DataFrame({"x": [1, 2], "y": [3, 4]})
   61:         # passing both 'color' and 'style' arguments should be allowed
   62:         # if there is no color symbol in the style strings:
   63:         ax = df.plot(color=["red", "black"], style=["-", "--"])
   64:         # check that the linestyles are correctly set:
   65:         linestyle = [line.get_linestyle() for line in ax.lines]
   66:         assert linestyle == ["-", "--"]
   67:         # check that the colors are correctly set:
   68:         color = [line.get_color() for line in ax.lines]
   69:         assert color == ["red", "black"]
   70:         # passing both 'color' and 'style' arguments should not be allowed
   71:         # if there is a color symbol in the style strings:
   72:         msg = (
   73:             "Cannot pass 'style' string with a color symbol and 'color' keyword "
   74:             "argument. Please use one or the other or pass 'style' without a color "
   75:             "symbol"
   76:         )
   77:         with pytest.raises(ValueError, match=msg):
   78:             df.plot(color=["red", "black"], style=["k-", "r--"])
   79: 
   80:     @pytest.mark.parametrize(
   81:         "color, expected",
   82:         [
   83:             ("green", ["green"] * 4),
   84:             (["yellow", "red", "green", "blue"], ["yellow", "red", "green", "blue"]),
   85:         ],
   86:     )
   87:     def test_color_and_marker(self, color, expected):
   88:         # GH 21003
   89:         df = DataFrame(np.random.default_rng(2).random((7, 4)))
   90:         ax = df.plot(color=color, style="d--")
   91:         # check colors
   92:         result = [i.get_color() for i in ax.lines]
   93:         assert result == expected
   94:         # check markers and linestyles
   95:         assert all(i.get_linestyle() == "--" for i in ax.lines)
   96:         assert all(i.get_marker() == "d" for i in ax.lines)
   97: 
   98:     def test_bar_colors(self):
   99:         default_colors = _unpack_cycler(plt.rcParams)
  100: 
  101:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  102:         ax = df.plot.bar()
  103:         _check_colors(ax.patches[::5], facecolors=default_colors[:5])
  104: 
  105:     def test_bar_colors_custom(self):
  106:         custom_colors = "rgcby"
  107:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  108:         ax = df.plot.bar(color=custom_colors)
  109:         _check_colors(ax.patches[::5], facecolors=custom_colors)
  110: 
  111:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  112:     def test_bar_colors_cmap(self, colormap):
  113:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  114: 
  115:         ax = df.plot.bar(colormap=colormap)
  116:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, 5)]
  117:         _check_colors(ax.patches[::5], facecolors=rgba_colors)
  118: 
  119:     def test_bar_colors_single_col(self):
  120:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  121:         ax = df.loc[:, [0]].plot.bar(color="DodgerBlue")
  122:         _check_colors([ax.patches[0]], facecolors=["DodgerBlue"])
  123: 
  124:     def test_bar_colors_green(self):
  125:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  126:         ax = df.plot(kind="bar", color="green")
  127:         _check_colors(ax.patches[::5], facecolors=["green"] * 5)
  128: 
  129:     def test_bar_user_colors(self):
  130:         df = DataFrame(
  131:             {"A": range(4), "B": range(1, 5), "color": ["red", "blue", "blue", "red"]}
  132:         )
  133:         # This should *only* work when `y` is specified, else
  134:         # we use one color per column
  135:         ax = df.plot.bar(y="A", color=df["color"])
  136:         result = [p.get_facecolor() for p in ax.patches]
  137:         expected = [
  138:             (1.0, 0.0, 0.0, 1.0),
  139:             (0.0, 0.0, 1.0, 1.0),
  140:             (0.0, 0.0, 1.0, 1.0),
  141:             (1.0, 0.0, 0.0, 1.0),
  142:         ]
  143:         assert result == expected
  144: 
  145:     def test_if_scatterplot_colorbar_affects_xaxis_visibility(self):
  146:         # addressing issue #10611, to ensure colobar does not
  147:         # interfere with x-axis label and ticklabels with
  148:         # ipython inline backend.
  149:         random_array = np.random.default_rng(2).random((10, 3))
  150:         df = DataFrame(random_array, columns=["A label", "B label", "C label"])
  151: 
  152:         ax1 = df.plot.scatter(x="A label", y="B label")
  153:         ax2 = df.plot.scatter(x="A label", y="B label", c="C label")
  154: 
  155:         vis1 = [vis.get_visible() for vis in ax1.xaxis.get_minorticklabels()]
  156:         vis2 = [vis.get_visible() for vis in ax2.xaxis.get_minorticklabels()]
  157:         assert vis1 == vis2
  158: 
  159:         vis1 = [vis.get_visible() for vis in ax1.xaxis.get_majorticklabels()]
  160:         vis2 = [vis.get_visible() for vis in ax2.xaxis.get_majorticklabels()]
  161:         assert vis1 == vis2
  162: 
  163:         assert (
  164:             ax1.xaxis.get_label().get_visible() == ax2.xaxis.get_label().get_visible()
  165:         )
  166: 
  167:     def test_if_hexbin_xaxis_label_is_visible(self):
  168:         # addressing issue #10678, to ensure colobar does not
  169:         # interfere with x-axis label and ticklabels with
  170:         # ipython inline backend.
  171:         random_array = np.random.default_rng(2).random((10, 3))
  172:         df = DataFrame(random_array, columns=["A label", "B label", "C label"])
  173: 
  174:         ax = df.plot.hexbin("A label", "B label", gridsize=12)
  175:         assert all(vis.get_visible() for vis in ax.xaxis.get_minorticklabels())
  176:         assert all(vis.get_visible() for vis in ax.xaxis.get_majorticklabels())
  177:         assert ax.xaxis.get_label().get_visible()
  178: 
  179:     def test_if_scatterplot_colorbars_are_next_to_parent_axes(self):
  180:         random_array = np.random.default_rng(2).random((10, 3))
  181:         df = DataFrame(random_array, columns=["A label", "B label", "C label"])
  182: 
  183:         fig, axes = plt.subplots(1, 2)
  184:         df.plot.scatter("A label", "B label", c="C label", ax=axes[0])
  185:         df.plot.scatter("A label", "B label", c="C label", ax=axes[1])
  186:         plt.tight_layout()
  187: 
  188:         points = np.array([ax.get_position().get_points() for ax in fig.axes])
  189:         axes_x_coords = points[:, :, 0]
  190:         parent_distance = axes_x_coords[1, :] - axes_x_coords[0, :]
  191:         colorbar_distance = axes_x_coords[3, :] - axes_x_coords[2, :]
  192:         assert np.isclose(parent_distance, colorbar_distance, atol=1e-7).all()
  193: 
  194:     @pytest.mark.parametrize("cmap", [None, "Greys"])
  195:     def test_scatter_with_c_column_name_with_colors(self, cmap):
  196:         # https://github.com/pandas-dev/pandas/issues/34316
  197: 
  198:         df = DataFrame(
  199:             [[5.1, 3.5], [4.9, 3.0], [7.0, 3.2], [6.4, 3.2], [5.9, 3.0]],
  200:             columns=["length", "width"],
  201:         )
  202:         df["species"] = ["r", "r", "g", "g", "b"]
  203:         if cmap is not None:
  204:             with tm.assert_produces_warning(UserWarning, check_stacklevel=False):
  205:                 ax = df.plot.scatter(x=0, y=1, cmap=cmap, c="species")
  206:         else:
  207:             ax = df.plot.scatter(x=0, y=1, c="species", cmap=cmap)
  208:         assert ax.collections[0].colorbar is None
  209: 
  210:     def test_scatter_colors(self):
  211:         df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3], "c": [1, 2, 3]})
  212:         with pytest.raises(TypeError, match="Specify exactly one of `c` and `color`"):
  213:             df.plot.scatter(x="a", y="b", c="c", color="green")
  214: 
  215:     def test_scatter_colors_not_raising_warnings(self):
  216:         # GH-53908. Do not raise UserWarning: No data for colormapping
  217:         # provided via 'c'. Parameters 'cmap' will be ignored
  218:         df = DataFrame({"x": [1, 2, 3], "y": [1, 2, 3]})
  219:         with tm.assert_produces_warning(None):
  220:             df.plot.scatter(x="x", y="y", c="b")
  221: 
  222:     def test_scatter_colors_default(self):
  223:         df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3], "c": [1, 2, 3]})
  224:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  225: 
  226:         ax = df.plot.scatter(x="a", y="b", c="c")
  227:         tm.assert_numpy_array_equal(
  228:             ax.collections[0].get_facecolor()[0],
  229:             np.array(mpl.colors.ColorConverter.to_rgba(default_colors[0])),
  230:         )
  231: 
  232:     def test_scatter_colors_white(self):
  233:         df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3], "c": [1, 2, 3]})
  234:         ax = df.plot.scatter(x="a", y="b", color="white")
  235:         tm.assert_numpy_array_equal(
  236:             ax.collections[0].get_facecolor()[0],
  237:             np.array([1, 1, 1, 1], dtype=np.float64),
  238:         )
  239: 
  240:     def test_scatter_colorbar_different_cmap(self):
  241:         # GH 33389
  242:         df = DataFrame({"x": [1, 2, 3], "y": [1, 3, 2], "c": [1, 2, 3]})
  243:         df["x2"] = df["x"] + 1
  244: 
  245:         _, ax = plt.subplots()
  246:         df.plot("x", "y", c="c", kind="scatter", cmap="cividis", ax=ax)
  247:         df.plot("x2", "y", c="c", kind="scatter", cmap="magma", ax=ax)
  248: 
  249:         assert ax.collections[0].cmap.name == "cividis"
  250:         assert ax.collections[1].cmap.name == "magma"
  251: 
  252:     def test_line_colors(self):
  253:         custom_colors = "rgcby"
  254:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  255: 
  256:         ax = df.plot(color=custom_colors)
  257:         _check_colors(ax.get_lines(), linecolors=custom_colors)
  258: 
  259:         plt.close("all")
  260: 
  261:         ax2 = df.plot(color=custom_colors)
  262:         lines2 = ax2.get_lines()
  263: 
  264:         for l1, l2 in zip(ax.get_lines(), lines2):
  265:             assert l1.get_color() == l2.get_color()
  266: 
  267:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  268:     def test_line_colors_cmap(self, colormap):
  269:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  270:         ax = df.plot(colormap=colormap)
  271:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  272:         _check_colors(ax.get_lines(), linecolors=rgba_colors)
  273: 
  274:     def test_line_colors_single_col(self):
  275:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  276:         # make color a list if plotting one column frame
  277:         # handles cases like df.plot(color='DodgerBlue')
  278:         ax = df.loc[:, [0]].plot(color="DodgerBlue")
  279:         _check_colors(ax.lines, linecolors=["DodgerBlue"])
  280: 
  281:     def test_line_colors_single_color(self):
  282:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  283:         ax = df.plot(color="red")
  284:         _check_colors(ax.get_lines(), linecolors=["red"] * 5)
  285: 
  286:     def test_line_colors_hex(self):
  287:         # GH 10299
  288:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  289:         custom_colors = ["#FF0000", "#0000FF", "#FFFF00", "#000000", "#FFFFFF"]
  290:         ax = df.plot(color=custom_colors)
  291:         _check_colors(ax.get_lines(), linecolors=custom_colors)
  292: 
  293:     def test_dont_modify_colors(self):
  294:         colors = ["r", "g", "b"]
  295:         DataFrame(np.random.default_rng(2).random((10, 2))).plot(color=colors)
  296:         assert len(colors) == 3
  297: 
  298:     def test_line_colors_and_styles_subplots(self):
  299:         # GH 9894
  300:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  301: 
  302:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  303: 
  304:         axes = df.plot(subplots=True)
  305:         for ax, c in zip(axes, list(default_colors)):
  306:             _check_colors(ax.get_lines(), linecolors=[c])
  307: 
  308:     @pytest.mark.parametrize("color", ["k", "green"])
  309:     def test_line_colors_and_styles_subplots_single_color_str(self, color):
  310:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  311:         axes = df.plot(subplots=True, color=color)
  312:         for ax in axes:
  313:             _check_colors(ax.get_lines(), linecolors=[color])
  314: 
  315:     @pytest.mark.parametrize("color", ["rgcby", list("rgcby")])
  316:     def test_line_colors_and_styles_subplots_custom_colors(self, color):
  317:         # GH 9894
  318:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  319:         axes = df.plot(color=color, subplots=True)
  320:         for ax, c in zip(axes, list(color)):
  321:             _check_colors(ax.get_lines(), linecolors=[c])
  322: 
  323:     def test_line_colors_and_styles_subplots_colormap_hex(self):
  324:         # GH 9894
  325:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  326:         # GH 10299
  327:         custom_colors = ["#FF0000", "#0000FF", "#FFFF00", "#000000", "#FFFFFF"]
  328:         axes = df.plot(color=custom_colors, subplots=True)
  329:         for ax, c in zip(axes, list(custom_colors)):
  330:             _check_colors(ax.get_lines(), linecolors=[c])
  331: 
  332:     @pytest.mark.parametrize("cmap", ["jet", cm.jet])
  333:     def test_line_colors_and_styles_subplots_colormap_subplot(self, cmap):
  334:         # GH 9894
  335:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  336:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  337:         axes = df.plot(colormap=cmap, subplots=True)
  338:         for ax, c in zip(axes, rgba_colors):
  339:             _check_colors(ax.get_lines(), linecolors=[c])
  340: 
  341:     def test_line_colors_and_styles_subplots_single_col(self):
  342:         # GH 9894
  343:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  344:         # make color a list if plotting one column frame
  345:         # handles cases like df.plot(color='DodgerBlue')
  346:         axes = df.loc[:, [0]].plot(color="DodgerBlue", subplots=True)
  347:         _check_colors(axes[0].lines, linecolors=["DodgerBlue"])
  348: 
  349:     def test_line_colors_and_styles_subplots_single_char(self):
  350:         # GH 9894
  351:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  352:         # single character style
  353:         axes = df.plot(style="r", subplots=True)
  354:         for ax in axes:
  355:             _check_colors(ax.get_lines(), linecolors=["r"])
  356: 
  357:     def test_line_colors_and_styles_subplots_list_styles(self):
  358:         # GH 9894
  359:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  360:         # list of styles
  361:         styles = list("rgcby")
  362:         axes = df.plot(style=styles, subplots=True)
  363:         for ax, c in zip(axes, styles):
  364:             _check_colors(ax.get_lines(), linecolors=[c])
  365: 
  366:     def test_area_colors(self):
  367:         from matplotlib.collections import PolyCollection
  368: 
  369:         custom_colors = "rgcby"
  370:         df = DataFrame(np.random.default_rng(2).random((5, 5)))
  371: 
  372:         ax = df.plot.area(color=custom_colors)
  373:         _check_colors(ax.get_lines(), linecolors=custom_colors)
  374:         poly = [o for o in ax.get_children() if isinstance(o, PolyCollection)]
  375:         _check_colors(poly, facecolors=custom_colors)
  376: 
  377:         handles, _ = ax.get_legend_handles_labels()
  378:         _check_colors(handles, facecolors=custom_colors)
  379: 
  380:         for h in handles:
  381:             assert h.get_alpha() is None
  382: 
  383:     def test_area_colors_poly(self):
  384:         from matplotlib import cm
  385:         from matplotlib.collections import PolyCollection
  386: 
  387:         df = DataFrame(np.random.default_rng(2).random((5, 5)))
  388:         ax = df.plot.area(colormap="jet")
  389:         jet_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  390:         _check_colors(ax.get_lines(), linecolors=jet_colors)
  391:         poly = [o for o in ax.get_children() if isinstance(o, PolyCollection)]
  392:         _check_colors(poly, facecolors=jet_colors)
  393: 
  394:         handles, _ = ax.get_legend_handles_labels()
  395:         _check_colors(handles, facecolors=jet_colors)
  396:         for h in handles:
  397:             assert h.get_alpha() is None
  398: 
  399:     def test_area_colors_stacked_false(self):
  400:         from matplotlib import cm
  401:         from matplotlib.collections import PolyCollection
  402: 
  403:         df = DataFrame(np.random.default_rng(2).random((5, 5)))
  404:         jet_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  405:         # When stacked=False, alpha is set to 0.5
  406:         ax = df.plot.area(colormap=cm.jet, stacked=False)
  407:         _check_colors(ax.get_lines(), linecolors=jet_colors)
  408:         poly = [o for o in ax.get_children() if isinstance(o, PolyCollection)]
  409:         jet_with_alpha = [(c[0], c[1], c[2], 0.5) for c in jet_colors]
  410:         _check_colors(poly, facecolors=jet_with_alpha)
  411: 
  412:         handles, _ = ax.get_legend_handles_labels()
  413:         linecolors = jet_with_alpha
  414:         _check_colors(handles[: len(jet_colors)], linecolors=linecolors)
  415:         for h in handles:
  416:             assert h.get_alpha() == 0.5
  417: 
  418:     def test_hist_colors(self):
  419:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  420: 
  421:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  422:         ax = df.plot.hist()
  423:         _check_colors(ax.patches[::10], facecolors=default_colors[:5])
  424: 
  425:     def test_hist_colors_single_custom(self):
  426:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  427:         custom_colors = "rgcby"
  428:         ax = df.plot.hist(color=custom_colors)
  429:         _check_colors(ax.patches[::10], facecolors=custom_colors)
  430: 
  431:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  432:     def test_hist_colors_cmap(self, colormap):
  433:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  434:         ax = df.plot.hist(colormap=colormap)
  435:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, 5)]
  436:         _check_colors(ax.patches[::10], facecolors=rgba_colors)
  437: 
  438:     def test_hist_colors_single_col(self):
  439:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  440:         ax = df.loc[:, [0]].plot.hist(color="DodgerBlue")
  441:         _check_colors([ax.patches[0]], facecolors=["DodgerBlue"])
  442: 
  443:     def test_hist_colors_single_color(self):
  444:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  445:         ax = df.plot(kind="hist", color="green")
  446:         _check_colors(ax.patches[::10], facecolors=["green"] * 5)
  447: 
  448:     def test_kde_colors(self):
  449:         pytest.importorskip("scipy")
  450:         custom_colors = "rgcby"
  451:         df = DataFrame(np.random.default_rng(2).random((5, 5)))
  452: 
  453:         ax = df.plot.kde(color=custom_colors)
  454:         _check_colors(ax.get_lines(), linecolors=custom_colors)
  455: 
  456:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  457:     def test_kde_colors_cmap(self, colormap):
  458:         pytest.importorskip("scipy")
  459:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  460:         ax = df.plot.kde(colormap=colormap)
  461:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  462:         _check_colors(ax.get_lines(), linecolors=rgba_colors)
  463: 
  464:     def test_kde_colors_and_styles_subplots(self):
  465:         pytest.importorskip("scipy")
  466:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  467: 
  468:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  469: 
  470:         axes = df.plot(kind="kde", subplots=True)
  471:         for ax, c in zip(axes, list(default_colors)):
  472:             _check_colors(ax.get_lines(), linecolors=[c])
  473: 
  474:     @pytest.mark.parametrize("colormap", ["k", "red"])
  475:     def test_kde_colors_and_styles_subplots_single_col_str(self, colormap):
  476:         pytest.importorskip("scipy")
  477:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  478:         axes = df.plot(kind="kde", color=colormap, subplots=True)
  479:         for ax in axes:
  480:             _check_colors(ax.get_lines(), linecolors=[colormap])
  481: 
  482:     def test_kde_colors_and_styles_subplots_custom_color(self):
  483:         pytest.importorskip("scipy")
  484:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  485:         custom_colors = "rgcby"
  486:         axes = df.plot(kind="kde", color=custom_colors, subplots=True)
  487:         for ax, c in zip(axes, list(custom_colors)):
  488:             _check_colors(ax.get_lines(), linecolors=[c])
  489: 
  490:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  491:     def test_kde_colors_and_styles_subplots_cmap(self, colormap):
  492:         pytest.importorskip("scipy")
  493:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  494:         rgba_colors = [cm.jet(n) for n in np.linspace(0, 1, len(df))]
  495:         axes = df.plot(kind="kde", colormap=colormap, subplots=True)
  496:         for ax, c in zip(axes, rgba_colors):
  497:             _check_colors(ax.get_lines(), linecolors=[c])
  498: 
  499:     def test_kde_colors_and_styles_subplots_single_col(self):
  500:         pytest.importorskip("scipy")
  501:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  502:         # make color a list if plotting one column frame
  503:         # handles cases like df.plot(color='DodgerBlue')
  504:         axes = df.loc[:, [0]].plot(kind="kde", color="DodgerBlue", subplots=True)
  505:         _check_colors(axes[0].lines, linecolors=["DodgerBlue"])
  506: 
  507:     def test_kde_colors_and_styles_subplots_single_char(self):
  508:         pytest.importorskip("scipy")
  509:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  510:         # list of styles
  511:         # single character style
  512:         axes = df.plot(kind="kde", style="r", subplots=True)
  513:         for ax in axes:
  514:             _check_colors(ax.get_lines(), linecolors=["r"])
  515: 
  516:     def test_kde_colors_and_styles_subplots_list(self):
  517:         pytest.importorskip("scipy")
  518:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  519:         # list of styles
  520:         styles = list("rgcby")
  521:         axes = df.plot(kind="kde", style=styles, subplots=True)
  522:         for ax, c in zip(axes, styles):
  523:             _check_colors(ax.get_lines(), linecolors=[c])
  524: 
  525:     def test_boxplot_colors(self):
  526:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  527: 
  528:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  529:         bp = df.plot.box(return_type="dict")
  530:         _check_colors_box(
  531:             bp,
  532:             default_colors[0],
  533:             default_colors[0],
  534:             default_colors[2],
  535:             default_colors[0],
  536:         )
  537: 
  538:     def test_boxplot_colors_dict_colors(self):
  539:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  540:         dict_colors = {
  541:             "boxes": "#572923",
  542:             "whiskers": "#982042",
  543:             "medians": "#804823",
  544:             "caps": "#123456",
  545:         }
  546:         bp = df.plot.box(color=dict_colors, sym="r+", return_type="dict")
  547:         _check_colors_box(
  548:             bp,
  549:             dict_colors["boxes"],
  550:             dict_colors["whiskers"],
  551:             dict_colors["medians"],
  552:             dict_colors["caps"],
  553:             "r",
  554:         )
  555: 
  556:     def test_boxplot_colors_default_color(self):
  557:         default_colors = _unpack_cycler(mpl.pyplot.rcParams)
  558:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  559:         # partial colors
  560:         dict_colors = {"whiskers": "c", "medians": "m"}
  561:         bp = df.plot.box(color=dict_colors, return_type="dict")
  562:         _check_colors_box(bp, default_colors[0], "c", "m", default_colors[0])
  563: 
  564:     @pytest.mark.parametrize("colormap", ["jet", cm.jet])
  565:     def test_boxplot_colors_cmap(self, colormap):
  566:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  567:         bp = df.plot.box(colormap=colormap, return_type="dict")
  568:         jet_colors = [cm.jet(n) for n in np.linspace(0, 1, 3)]
  569:         _check_colors_box(
  570:             bp, jet_colors[0], jet_colors[0], jet_colors[2], jet_colors[0]
  571:         )
  572: 
  573:     def test_boxplot_colors_single(self):
  574:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  575:         # string color is applied to all artists except fliers
  576:         bp = df.plot.box(color="DodgerBlue", return_type="dict")
  577:         _check_colors_box(bp, "DodgerBlue", "DodgerBlue", "DodgerBlue", "DodgerBlue")
  578: 
  579:     def test_boxplot_colors_tuple(self):
  580:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  581:         # tuple is also applied to all artists except fliers
  582:         bp = df.plot.box(color=(0, 1, 0), sym="#123456", return_type="dict")
  583:         _check_colors_box(bp, (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), "#123456")
  584: 
  585:     def test_boxplot_colors_invalid(self):
  586:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  587:         msg = re.escape(
  588:             "color dict contains invalid key 'xxxx'. The key must be either "
  589:             "['boxes', 'whiskers', 'medians', 'caps']"
  590:         )
  591:         with pytest.raises(ValueError, match=msg):
  592:             # Color contains invalid key results in ValueError
  593:             df.plot.box(color={"boxes": "red", "xxxx": "blue"})
  594: 
  595:     def test_default_color_cycle(self):
  596:         import cycler
  597: 
  598:         colors = list("rgbk")
  599:         plt.rcParams["axes.prop_cycle"] = cycler.cycler("color", colors)
  600: 
  601:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))
  602:         ax = df.plot()
  603: 
  604:         expected = _unpack_cycler(plt.rcParams)[:3]
  605:         _check_colors(ax.get_lines(), linecolors=expected)
  606: 
  607:     def test_no_color_bar(self):
  608:         df = DataFrame(
  609:             {
  610:                 "A": np.random.default_rng(2).uniform(size=20),
  611:                 "B": np.random.default_rng(2).uniform(size=20),
  612:                 "C": np.arange(20) + np.random.default_rng(2).uniform(size=20),
  613:             }
  614:         )
  615:         ax = df.plot.hexbin(x="A", y="B", colorbar=None)
  616:         assert ax.collections[0].colorbar is None
  617: 
  618:     def test_mixing_cmap_and_colormap_raises(self):
  619:         df = DataFrame(
  620:             {
  621:                 "A": np.random.default_rng(2).uniform(size=20),
  622:                 "B": np.random.default_rng(2).uniform(size=20),
  623:                 "C": np.arange(20) + np.random.default_rng(2).uniform(size=20),
  624:             }
  625:         )
  626:         msg = "Only specify one of `cmap` and `colormap`"
  627:         with pytest.raises(TypeError, match=msg):
  628:             df.plot.hexbin(x="A", y="B", cmap="YlGn", colormap="BuGn")
  629: 
  630:     def test_passed_bar_colors(self):
  631:         color_tuples = [(0.9, 0, 0, 1), (0, 0.9, 0, 1), (0, 0, 0.9, 1)]
  632:         colormap = mpl.colors.ListedColormap(color_tuples)
  633:         barplot = DataFrame([[1, 2, 3]]).plot(kind="bar", cmap=colormap)
  634:         assert color_tuples == [c.get_facecolor() for c in barplot.patches]
  635: 
  636:     def test_rcParams_bar_colors(self):
  637:         color_tuples = [(0.9, 0, 0, 1), (0, 0.9, 0, 1), (0, 0, 0.9, 1)]
  638:         with mpl.rc_context(rc={"axes.prop_cycle": mpl.cycler("color", color_tuples)}):
  639:             barplot = DataFrame([[1, 2, 3]]).plot(kind="bar")
  640:         assert color_tuples == [c.get_facecolor() for c in barplot.patches]
  641: 
  642:     def test_colors_of_columns_with_same_name(self):
  643:         # ISSUE 11136 -> https://github.com/pandas-dev/pandas/issues/11136
  644:         # Creating a DataFrame with duplicate column labels and testing colors of them.
  645:         df = DataFrame({"b": [0, 1, 0], "a": [1, 2, 3]})
  646:         df1 = DataFrame({"a": [2, 4, 6]})
  647:         df_concat = pd.concat([df, df1], axis=1)
  648:         result = df_concat.plot()
  649:         legend = result.get_legend()
  650:         if Version(mpl.__version__) < Version("3.7"):
  651:             handles = legend.legendHandles
  652:         else:
  653:             handles = legend.legend_handles
  654:         for legend, line in zip(handles, result.lines):
  655:             assert legend.get_color() == line.get_color()
  656: 
  657:     def test_invalid_colormap(self):
  658:         df = DataFrame(
  659:             np.random.default_rng(2).standard_normal((3, 2)), columns=["A", "B"]
  660:         )
  661:         msg = "(is not a valid value)|(is not a known colormap)"
  662:         with pytest.raises((ValueError, KeyError), match=msg):
  663:             df.plot(colormap="invalid_colormap")
  664: 
  665:     def test_dataframe_none_color(self):
  666:         # GH51953
  667:         df = DataFrame([[1, 2, 3]])
  668:         ax = df.plot(color=None)
  669:         expected = _unpack_cycler(mpl.pyplot.rcParams)[:3]
  670:         _check_colors(ax.get_lines(), linecolors=expected)
