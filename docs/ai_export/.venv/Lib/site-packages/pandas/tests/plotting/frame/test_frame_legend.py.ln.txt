    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     date_range,
    9: )
   10: from pandas.tests.plotting.common import (
   11:     _check_legend_labels,
   12:     _check_legend_marker,
   13:     _check_text_labels,
   14: )
   15: from pandas.util.version import Version
   16: 
   17: mpl = pytest.importorskip("matplotlib")
   18: 
   19: 
   20: class TestFrameLegend:
   21:     @pytest.mark.xfail(
   22:         reason=(
   23:             "Open bug in matplotlib "
   24:             "https://github.com/matplotlib/matplotlib/issues/11357"
   25:         )
   26:     )
   27:     def test_mixed_yerr(self):
   28:         # https://github.com/pandas-dev/pandas/issues/39522
   29:         from matplotlib.collections import LineCollection
   30:         from matplotlib.lines import Line2D
   31: 
   32:         df = DataFrame([{"x": 1, "a": 1, "b": 1}, {"x": 2, "a": 2, "b": 3}])
   33: 
   34:         ax = df.plot("x", "a", c="orange", yerr=0.1, label="orange")
   35:         df.plot("x", "b", c="blue", yerr=None, ax=ax, label="blue")
   36: 
   37:         legend = ax.get_legend()
   38:         if Version(mpl.__version__) < Version("3.7"):
   39:             result_handles = legend.legendHandles
   40:         else:
   41:             result_handles = legend.legend_handles
   42: 
   43:         assert isinstance(result_handles[0], LineCollection)
   44:         assert isinstance(result_handles[1], Line2D)
   45: 
   46:     def test_legend_false(self):
   47:         # https://github.com/pandas-dev/pandas/issues/40044
   48:         df = DataFrame({"a": [1, 1], "b": [2, 3]})
   49:         df2 = DataFrame({"d": [2.5, 2.5]})
   50: 
   51:         ax = df.plot(legend=True, color={"a": "blue", "b": "green"}, secondary_y="b")
   52:         df2.plot(legend=True, color={"d": "red"}, ax=ax)
   53:         legend = ax.get_legend()
   54:         if Version(mpl.__version__) < Version("3.7"):
   55:             handles = legend.legendHandles
   56:         else:
   57:             handles = legend.legend_handles
   58:         result = [handle.get_color() for handle in handles]
   59:         expected = ["blue", "green", "red"]
   60:         assert result == expected
   61: 
   62:     @pytest.mark.parametrize("kind", ["line", "bar", "barh", "kde", "area", "hist"])
   63:     def test_df_legend_labels(self, kind):
   64:         pytest.importorskip("scipy")
   65:         df = DataFrame(np.random.default_rng(2).random((3, 3)), columns=["a", "b", "c"])
   66:         df2 = DataFrame(
   67:             np.random.default_rng(2).random((3, 3)), columns=["d", "e", "f"]
   68:         )
   69:         df3 = DataFrame(
   70:             np.random.default_rng(2).random((3, 3)), columns=["g", "h", "i"]
   71:         )
   72:         df4 = DataFrame(
   73:             np.random.default_rng(2).random((3, 3)), columns=["j", "k", "l"]
   74:         )
   75: 
   76:         ax = df.plot(kind=kind, legend=True)
   77:         _check_legend_labels(ax, labels=df.columns)
   78: 
   79:         ax = df2.plot(kind=kind, legend=False, ax=ax)
   80:         _check_legend_labels(ax, labels=df.columns)
   81: 
   82:         ax = df3.plot(kind=kind, legend=True, ax=ax)
   83:         _check_legend_labels(ax, labels=df.columns.union(df3.columns))
   84: 
   85:         ax = df4.plot(kind=kind, legend="reverse", ax=ax)
   86:         expected = list(df.columns.union(df3.columns)) + list(reversed(df4.columns))
   87:         _check_legend_labels(ax, labels=expected)
   88: 
   89:     def test_df_legend_labels_secondary_y(self):
   90:         pytest.importorskip("scipy")
   91:         df = DataFrame(np.random.default_rng(2).random((3, 3)), columns=["a", "b", "c"])
   92:         df2 = DataFrame(
   93:             np.random.default_rng(2).random((3, 3)), columns=["d", "e", "f"]
   94:         )
   95:         df3 = DataFrame(
   96:             np.random.default_rng(2).random((3, 3)), columns=["g", "h", "i"]
   97:         )
   98:         # Secondary Y
   99:         ax = df.plot(legend=True, secondary_y="b")
  100:         _check_legend_labels(ax, labels=["a", "b (right)", "c"])
  101:         ax = df2.plot(legend=False, ax=ax)
  102:         _check_legend_labels(ax, labels=["a", "b (right)", "c"])
  103:         ax = df3.plot(kind="bar", legend=True, secondary_y="h", ax=ax)
  104:         _check_legend_labels(ax, labels=["a", "b (right)", "c", "g", "h (right)", "i"])
  105: 
  106:     def test_df_legend_labels_time_series(self):
  107:         # Time Series
  108:         pytest.importorskip("scipy")
  109:         ind = date_range("1/1/2014", periods=3)
  110:         df = DataFrame(
  111:             np.random.default_rng(2).standard_normal((3, 3)),
  112:             columns=["a", "b", "c"],
  113:             index=ind,
  114:         )
  115:         df2 = DataFrame(
  116:             np.random.default_rng(2).standard_normal((3, 3)),
  117:             columns=["d", "e", "f"],
  118:             index=ind,
  119:         )
  120:         df3 = DataFrame(
  121:             np.random.default_rng(2).standard_normal((3, 3)),
  122:             columns=["g", "h", "i"],
  123:             index=ind,
  124:         )
  125:         ax = df.plot(legend=True, secondary_y="b")
  126:         _check_legend_labels(ax, labels=["a", "b (right)", "c"])
  127:         ax = df2.plot(legend=False, ax=ax)
  128:         _check_legend_labels(ax, labels=["a", "b (right)", "c"])
  129:         ax = df3.plot(legend=True, ax=ax)
  130:         _check_legend_labels(ax, labels=["a", "b (right)", "c", "g", "h", "i"])
  131: 
  132:     def test_df_legend_labels_time_series_scatter(self):
  133:         # Time Series
  134:         pytest.importorskip("scipy")
  135:         ind = date_range("1/1/2014", periods=3)
  136:         df = DataFrame(
  137:             np.random.default_rng(2).standard_normal((3, 3)),
  138:             columns=["a", "b", "c"],
  139:             index=ind,
  140:         )
  141:         df2 = DataFrame(
  142:             np.random.default_rng(2).standard_normal((3, 3)),
  143:             columns=["d", "e", "f"],
  144:             index=ind,
  145:         )
  146:         df3 = DataFrame(
  147:             np.random.default_rng(2).standard_normal((3, 3)),
  148:             columns=["g", "h", "i"],
  149:             index=ind,
  150:         )
  151:         # scatter
  152:         ax = df.plot.scatter(x="a", y="b", label="data1")
  153:         _check_legend_labels(ax, labels=["data1"])
  154:         ax = df2.plot.scatter(x="d", y="e", legend=False, label="data2", ax=ax)
  155:         _check_legend_labels(ax, labels=["data1"])
  156:         ax = df3.plot.scatter(x="g", y="h", label="data3", ax=ax)
  157:         _check_legend_labels(ax, labels=["data1", "data3"])
  158: 
  159:     def test_df_legend_labels_time_series_no_mutate(self):
  160:         pytest.importorskip("scipy")
  161:         ind = date_range("1/1/2014", periods=3)
  162:         df = DataFrame(
  163:             np.random.default_rng(2).standard_normal((3, 3)),
  164:             columns=["a", "b", "c"],
  165:             index=ind,
  166:         )
  167:         # ensure label args pass through and
  168:         # index name does not mutate
  169:         # column names don't mutate
  170:         df5 = df.set_index("a")
  171:         ax = df5.plot(y="b")
  172:         _check_legend_labels(ax, labels=["b"])
  173:         ax = df5.plot(y="b", label="LABEL_b")
  174:         _check_legend_labels(ax, labels=["LABEL_b"])
  175:         _check_text_labels(ax.xaxis.get_label(), "a")
  176:         ax = df5.plot(y="c", label="LABEL_c", ax=ax)
  177:         _check_legend_labels(ax, labels=["LABEL_b", "LABEL_c"])
  178:         assert df5.columns.tolist() == ["b", "c"]
  179: 
  180:     def test_missing_marker_multi_plots_on_same_ax(self):
  181:         # GH 18222
  182:         df = DataFrame(data=[[1, 1, 1, 1], [2, 2, 4, 8]], columns=["x", "r", "g", "b"])
  183:         _, ax = mpl.pyplot.subplots(nrows=1, ncols=3)
  184:         # Left plot
  185:         df.plot(x="x", y="r", linewidth=0, marker="o", color="r", ax=ax[0])
  186:         df.plot(x="x", y="g", linewidth=1, marker="x", color="g", ax=ax[0])
  187:         df.plot(x="x", y="b", linewidth=1, marker="o", color="b", ax=ax[0])
  188:         _check_legend_labels(ax[0], labels=["r", "g", "b"])
  189:         _check_legend_marker(ax[0], expected_markers=["o", "x", "o"])
  190:         # Center plot
  191:         df.plot(x="x", y="b", linewidth=1, marker="o", color="b", ax=ax[1])
  192:         df.plot(x="x", y="r", linewidth=0, marker="o", color="r", ax=ax[1])
  193:         df.plot(x="x", y="g", linewidth=1, marker="x", color="g", ax=ax[1])
  194:         _check_legend_labels(ax[1], labels=["b", "r", "g"])
  195:         _check_legend_marker(ax[1], expected_markers=["o", "o", "x"])
  196:         # Right plot
  197:         df.plot(x="x", y="g", linewidth=1, marker="x", color="g", ax=ax[2])
  198:         df.plot(x="x", y="b", linewidth=1, marker="o", color="b", ax=ax[2])
  199:         df.plot(x="x", y="r", linewidth=0, marker="o", color="r", ax=ax[2])
  200:         _check_legend_labels(ax[2], labels=["g", "b", "r"])
  201:         _check_legend_marker(ax[2], expected_markers=["x", "o", "o"])
  202: 
  203:     def test_legend_name(self):
  204:         multi = DataFrame(
  205:             np.random.default_rng(2).standard_normal((4, 4)),
  206:             columns=[np.array(["a", "a", "b", "b"]), np.array(["x", "y", "x", "y"])],
  207:         )
  208:         multi.columns.names = ["group", "individual"]
  209: 
  210:         ax = multi.plot()
  211:         leg_title = ax.legend_.get_title()
  212:         _check_text_labels(leg_title, "group,individual")
  213: 
  214:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 5)))
  215:         ax = df.plot(legend=True, ax=ax)
  216:         leg_title = ax.legend_.get_title()
  217:         _check_text_labels(leg_title, "group,individual")
  218: 
  219:         df.columns.name = "new"
  220:         ax = df.plot(legend=False, ax=ax)
  221:         leg_title = ax.legend_.get_title()
  222:         _check_text_labels(leg_title, "group,individual")
  223: 
  224:         ax = df.plot(legend=True, ax=ax)
  225:         leg_title = ax.legend_.get_title()
  226:         _check_text_labels(leg_title, "new")
  227: 
  228:     @pytest.mark.parametrize(
  229:         "kind",
  230:         [
  231:             "line",
  232:             "bar",
  233:             "barh",
  234:             pytest.param("kde", marks=td.skip_if_no("scipy")),
  235:             "area",
  236:             "hist",
  237:         ],
  238:     )
  239:     def test_no_legend(self, kind):
  240:         df = DataFrame(np.random.default_rng(2).random((3, 3)), columns=["a", "b", "c"])
  241:         ax = df.plot(kind=kind, legend=False)
  242:         _check_legend_labels(ax, visible=False)
  243: 
  244:     def test_missing_markers_legend(self):
  245:         # 14958
  246:         df = DataFrame(
  247:             np.random.default_rng(2).standard_normal((8, 3)), columns=["A", "B", "C"]
  248:         )
  249:         ax = df.plot(y=["A"], marker="x", linestyle="solid")
  250:         df.plot(y=["B"], marker="o", linestyle="dotted", ax=ax)
  251:         df.plot(y=["C"], marker="<", linestyle="dotted", ax=ax)
  252: 
  253:         _check_legend_labels(ax, labels=["A", "B", "C"])
  254:         _check_legend_marker(ax, expected_markers=["x", "o", "<"])
  255: 
  256:     def test_missing_markers_legend_using_style(self):
  257:         # 14563
  258:         df = DataFrame(
  259:             {
  260:                 "A": [1, 2, 3, 4, 5, 6],
  261:                 "B": [2, 4, 1, 3, 2, 4],
  262:                 "C": [3, 3, 2, 6, 4, 2],
  263:                 "X": [1, 2, 3, 4, 5, 6],
  264:             }
  265:         )
  266: 
  267:         _, ax = mpl.pyplot.subplots()
  268:         for kind in "ABC":
  269:             df.plot("X", kind, label=kind, ax=ax, style=".")
  270: 
  271:         _check_legend_labels(ax, labels=["A", "B", "C"])
  272:         _check_legend_marker(ax, expected_markers=[".", ".", "."])
