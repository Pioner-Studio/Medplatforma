    1: import pytest
    2: 
    3: from pandas import DataFrame
    4: from pandas.tests.plotting.common import (
    5:     _check_plot_works,
    6:     _check_ticks_props,
    7:     _gen_two_subplots,
    8: )
    9: 
   10: plt = pytest.importorskip("matplotlib.pyplot")
   11: 
   12: 
   13: class TestCommon:
   14:     def test__check_ticks_props(self):
   15:         # GH 34768
   16:         df = DataFrame({"b": [0, 1, 0], "a": [1, 2, 3]})
   17:         ax = _check_plot_works(df.plot, rot=30)
   18:         ax.yaxis.set_tick_params(rotation=30)
   19:         msg = "expected 0.00000 but got "
   20:         with pytest.raises(AssertionError, match=msg):
   21:             _check_ticks_props(ax, xrot=0)
   22:         with pytest.raises(AssertionError, match=msg):
   23:             _check_ticks_props(ax, xlabelsize=0)
   24:         with pytest.raises(AssertionError, match=msg):
   25:             _check_ticks_props(ax, yrot=0)
   26:         with pytest.raises(AssertionError, match=msg):
   27:             _check_ticks_props(ax, ylabelsize=0)
   28: 
   29:     def test__gen_two_subplots_with_ax(self):
   30:         fig = plt.gcf()
   31:         gen = _gen_two_subplots(f=lambda **kwargs: None, fig=fig, ax="test")
   32:         # On the first yield, no subplot should be added since ax was passed
   33:         next(gen)
   34:         assert fig.get_axes() == []
   35:         # On the second, the one axis should match fig.subplot(2, 1, 2)
   36:         next(gen)
   37:         axes = fig.get_axes()
   38:         assert len(axes) == 1
   39:         subplot_geometry = list(axes[0].get_subplotspec().get_geometry()[:-1])
   40:         subplot_geometry[-1] += 1
   41:         assert subplot_geometry == [2, 1, 2]
   42: 
   43:     def test_colorbar_layout(self):
   44:         fig = plt.figure()
   45: 
   46:         axes = fig.subplot_mosaic(
   47:             """
   48:             AB
   49:             CC
   50:             """
   51:         )
   52: 
   53:         x = [1, 2, 3]
   54:         y = [1, 2, 3]
   55: 
   56:         cs0 = axes["A"].scatter(x, y)
   57:         axes["B"].scatter(x, y)
   58: 
   59:         fig.colorbar(cs0, ax=[axes["A"], axes["B"]], location="right")
   60:         DataFrame(x).plot(ax=axes["C"])
