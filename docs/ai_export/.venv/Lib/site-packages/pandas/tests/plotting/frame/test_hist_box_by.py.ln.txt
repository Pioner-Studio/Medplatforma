    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import DataFrame
    7: import pandas._testing as tm
    8: from pandas.tests.plotting.common import (
    9:     _check_axes_shape,
   10:     _check_plot_works,
   11:     get_x_axis,
   12:     get_y_axis,
   13: )
   14: 
   15: pytest.importorskip("matplotlib")
   16: 
   17: 
   18: @pytest.fixture
   19: def hist_df():
   20:     df = DataFrame(
   21:         np.random.default_rng(2).standard_normal((30, 2)), columns=["A", "B"]
   22:     )
   23:     df["C"] = np.random.default_rng(2).choice(["a", "b", "c"], 30)
   24:     df["D"] = np.random.default_rng(2).choice(["a", "b", "c"], 30)
   25:     return df
   26: 
   27: 
   28: class TestHistWithBy:
   29:     @pytest.mark.slow
   30:     @pytest.mark.parametrize(
   31:         "by, column, titles, legends",
   32:         [
   33:             ("C", "A", ["a", "b", "c"], [["A"]] * 3),
   34:             ("C", ["A", "B"], ["a", "b", "c"], [["A", "B"]] * 3),
   35:             ("C", None, ["a", "b", "c"], [["A", "B"]] * 3),
   36:             (
   37:                 ["C", "D"],
   38:                 "A",
   39:                 [
   40:                     "(a, a)",
   41:                     "(b, b)",
   42:                     "(c, c)",
   43:                 ],
   44:                 [["A"]] * 3,
   45:             ),
   46:             (
   47:                 ["C", "D"],
   48:                 ["A", "B"],
   49:                 [
   50:                     "(a, a)",
   51:                     "(b, b)",
   52:                     "(c, c)",
   53:                 ],
   54:                 [["A", "B"]] * 3,
   55:             ),
   56:             (
   57:                 ["C", "D"],
   58:                 None,
   59:                 [
   60:                     "(a, a)",
   61:                     "(b, b)",
   62:                     "(c, c)",
   63:                 ],
   64:                 [["A", "B"]] * 3,
   65:             ),
   66:         ],
   67:     )
   68:     def test_hist_plot_by_argument(self, by, column, titles, legends, hist_df):
   69:         # GH 15079
   70:         axes = _check_plot_works(
   71:             hist_df.plot.hist, column=column, by=by, default_axes=True
   72:         )
   73:         result_titles = [ax.get_title() for ax in axes]
   74:         result_legends = [
   75:             [legend.get_text() for legend in ax.get_legend().texts] for ax in axes
   76:         ]
   77: 
   78:         assert result_legends == legends
   79:         assert result_titles == titles
   80: 
   81:     @pytest.mark.parametrize(
   82:         "by, column, titles, legends",
   83:         [
   84:             (0, "A", ["a", "b", "c"], [["A"]] * 3),
   85:             (0, None, ["a", "b", "c"], [["A", "B"]] * 3),
   86:             (
   87:                 [0, "D"],
   88:                 "A",
   89:                 [
   90:                     "(a, a)",
   91:                     "(b, b)",
   92:                     "(c, c)",
   93:                 ],
   94:                 [["A"]] * 3,
   95:             ),
   96:         ],
   97:     )
   98:     def test_hist_plot_by_0(self, by, column, titles, legends, hist_df):
   99:         # GH 15079
  100:         df = hist_df.copy()
  101:         df = df.rename(columns={"C": 0})
  102: 
  103:         axes = _check_plot_works(df.plot.hist, default_axes=True, column=column, by=by)
  104:         result_titles = [ax.get_title() for ax in axes]
  105:         result_legends = [
  106:             [legend.get_text() for legend in ax.get_legend().texts] for ax in axes
  107:         ]
  108: 
  109:         assert result_legends == legends
  110:         assert result_titles == titles
  111: 
  112:     @pytest.mark.parametrize(
  113:         "by, column",
  114:         [
  115:             ([], ["A"]),
  116:             ([], ["A", "B"]),
  117:             ((), None),
  118:             ((), ["A", "B"]),
  119:         ],
  120:     )
  121:     def test_hist_plot_empty_list_string_tuple_by(self, by, column, hist_df):
  122:         # GH 15079
  123:         msg = "No group keys passed"
  124:         with pytest.raises(ValueError, match=msg):
  125:             _check_plot_works(
  126:                 hist_df.plot.hist, default_axes=True, column=column, by=by
  127:             )
  128: 
  129:     @pytest.mark.slow
  130:     @pytest.mark.parametrize(
  131:         "by, column, layout, axes_num",
  132:         [
  133:             (["C"], "A", (2, 2), 3),
  134:             ("C", "A", (2, 2), 3),
  135:             (["C"], ["A"], (1, 3), 3),
  136:             ("C", None, (3, 1), 3),
  137:             ("C", ["A", "B"], (3, 1), 3),
  138:             (["C", "D"], "A", (9, 1), 3),
  139:             (["C", "D"], "A", (3, 3), 3),
  140:             (["C", "D"], ["A"], (5, 2), 3),
  141:             (["C", "D"], ["A", "B"], (9, 1), 3),
  142:             (["C", "D"], None, (9, 1), 3),
  143:             (["C", "D"], ["A", "B"], (5, 2), 3),
  144:         ],
  145:     )
  146:     def test_hist_plot_layout_with_by(self, by, column, layout, axes_num, hist_df):
  147:         # GH 15079
  148:         # _check_plot_works adds an ax so catch warning. see GH #13188
  149:         with tm.assert_produces_warning(UserWarning, check_stacklevel=False):
  150:             axes = _check_plot_works(
  151:                 hist_df.plot.hist, column=column, by=by, layout=layout
  152:             )
  153:         _check_axes_shape(axes, axes_num=axes_num, layout=layout)
  154: 
  155:     @pytest.mark.parametrize(
  156:         "msg, by, layout",
  157:         [
  158:             ("larger than required size", ["C", "D"], (1, 1)),
  159:             (re.escape("Layout must be a tuple of (rows, columns)"), "C", (1,)),
  160:             ("At least one dimension of layout must be positive", "C", (-1, -1)),
  161:         ],
  162:     )
  163:     def test_hist_plot_invalid_layout_with_by_raises(self, msg, by, layout, hist_df):
  164:         # GH 15079, test if error is raised when invalid layout is given
  165: 
  166:         with pytest.raises(ValueError, match=msg):
  167:             hist_df.plot.hist(column=["A", "B"], by=by, layout=layout)
  168: 
  169:     @pytest.mark.slow
  170:     def test_axis_share_x_with_by(self, hist_df):
  171:         # GH 15079
  172:         ax1, ax2, ax3 = hist_df.plot.hist(column="A", by="C", sharex=True)
  173: 
  174:         # share x
  175:         assert get_x_axis(ax1).joined(ax1, ax2)
  176:         assert get_x_axis(ax2).joined(ax1, ax2)
  177:         assert get_x_axis(ax3).joined(ax1, ax3)
  178:         assert get_x_axis(ax3).joined(ax2, ax3)
  179: 
  180:         # don't share y
  181:         assert not get_y_axis(ax1).joined(ax1, ax2)
  182:         assert not get_y_axis(ax2).joined(ax1, ax2)
  183:         assert not get_y_axis(ax3).joined(ax1, ax3)
  184:         assert not get_y_axis(ax3).joined(ax2, ax3)
  185: 
  186:     @pytest.mark.slow
  187:     def test_axis_share_y_with_by(self, hist_df):
  188:         # GH 15079
  189:         ax1, ax2, ax3 = hist_df.plot.hist(column="A", by="C", sharey=True)
  190: 
  191:         # share y
  192:         assert get_y_axis(ax1).joined(ax1, ax2)
  193:         assert get_y_axis(ax2).joined(ax1, ax2)
  194:         assert get_y_axis(ax3).joined(ax1, ax3)
  195:         assert get_y_axis(ax3).joined(ax2, ax3)
  196: 
  197:         # don't share x
  198:         assert not get_x_axis(ax1).joined(ax1, ax2)
  199:         assert not get_x_axis(ax2).joined(ax1, ax2)
  200:         assert not get_x_axis(ax3).joined(ax1, ax3)
  201:         assert not get_x_axis(ax3).joined(ax2, ax3)
  202: 
  203:     @pytest.mark.parametrize("figsize", [(12, 8), (20, 10)])
  204:     def test_figure_shape_hist_with_by(self, figsize, hist_df):
  205:         # GH 15079
  206:         axes = hist_df.plot.hist(column="A", by="C", figsize=figsize)
  207:         _check_axes_shape(axes, axes_num=3, figsize=figsize)
  208: 
  209: 
  210: class TestBoxWithBy:
  211:     @pytest.mark.parametrize(
  212:         "by, column, titles, xticklabels",
  213:         [
  214:             ("C", "A", ["A"], [["a", "b", "c"]]),
  215:             (
  216:                 ["C", "D"],
  217:                 "A",
  218:                 ["A"],
  219:                 [
  220:                     [
  221:                         "(a, a)",
  222:                         "(b, b)",
  223:                         "(c, c)",
  224:                     ]
  225:                 ],
  226:             ),
  227:             ("C", ["A", "B"], ["A", "B"], [["a", "b", "c"]] * 2),
  228:             (
  229:                 ["C", "D"],
  230:                 ["A", "B"],
  231:                 ["A", "B"],
  232:                 [
  233:                     [
  234:                         "(a, a)",
  235:                         "(b, b)",
  236:                         "(c, c)",
  237:                     ]
  238:                 ]
  239:                 * 2,
  240:             ),
  241:             (["C"], None, ["A", "B"], [["a", "b", "c"]] * 2),
  242:         ],
  243:     )
  244:     def test_box_plot_by_argument(self, by, column, titles, xticklabels, hist_df):
  245:         # GH 15079
  246:         axes = _check_plot_works(
  247:             hist_df.plot.box, default_axes=True, column=column, by=by
  248:         )
  249:         result_titles = [ax.get_title() for ax in axes]
  250:         result_xticklabels = [
  251:             [label.get_text() for label in ax.get_xticklabels()] for ax in axes
  252:         ]
  253: 
  254:         assert result_xticklabels == xticklabels
  255:         assert result_titles == titles
  256: 
  257:     @pytest.mark.parametrize(
  258:         "by, column, titles, xticklabels",
  259:         [
  260:             (0, "A", ["A"], [["a", "b", "c"]]),
  261:             (
  262:                 [0, "D"],
  263:                 "A",
  264:                 ["A"],
  265:                 [
  266:                     [
  267:                         "(a, a)",
  268:                         "(b, b)",
  269:                         "(c, c)",
  270:                     ]
  271:                 ],
  272:             ),
  273:             (0, None, ["A", "B"], [["a", "b", "c"]] * 2),
  274:         ],
  275:     )
  276:     def test_box_plot_by_0(self, by, column, titles, xticklabels, hist_df):
  277:         # GH 15079
  278:         df = hist_df.copy()
  279:         df = df.rename(columns={"C": 0})
  280: 
  281:         axes = _check_plot_works(df.plot.box, default_axes=True, column=column, by=by)
  282:         result_titles = [ax.get_title() for ax in axes]
  283:         result_xticklabels = [
  284:             [label.get_text() for label in ax.get_xticklabels()] for ax in axes
  285:         ]
  286: 
  287:         assert result_xticklabels == xticklabels
  288:         assert result_titles == titles
  289: 
  290:     @pytest.mark.parametrize(
  291:         "by, column",
  292:         [
  293:             ([], ["A"]),
  294:             ((), "A"),
  295:             ([], None),
  296:             ((), ["A", "B"]),
  297:         ],
  298:     )
  299:     def test_box_plot_with_none_empty_list_by(self, by, column, hist_df):
  300:         # GH 15079
  301:         msg = "No group keys passed"
  302:         with pytest.raises(ValueError, match=msg):
  303:             _check_plot_works(hist_df.plot.box, default_axes=True, column=column, by=by)
  304: 
  305:     @pytest.mark.slow
  306:     @pytest.mark.parametrize(
  307:         "by, column, layout, axes_num",
  308:         [
  309:             (["C"], "A", (1, 1), 1),
  310:             ("C", "A", (1, 1), 1),
  311:             ("C", None, (2, 1), 2),
  312:             ("C", ["A", "B"], (1, 2), 2),
  313:             (["C", "D"], "A", (1, 1), 1),
  314:             (["C", "D"], None, (1, 2), 2),
  315:         ],
  316:     )
  317:     def test_box_plot_layout_with_by(self, by, column, layout, axes_num, hist_df):
  318:         # GH 15079
  319:         axes = _check_plot_works(
  320:             hist_df.plot.box, default_axes=True, column=column, by=by, layout=layout
  321:         )
  322:         _check_axes_shape(axes, axes_num=axes_num, layout=layout)
  323: 
  324:     @pytest.mark.parametrize(
  325:         "msg, by, layout",
  326:         [
  327:             ("larger than required size", ["C", "D"], (1, 1)),
  328:             (re.escape("Layout must be a tuple of (rows, columns)"), "C", (1,)),
  329:             ("At least one dimension of layout must be positive", "C", (-1, -1)),
  330:         ],
  331:     )
  332:     def test_box_plot_invalid_layout_with_by_raises(self, msg, by, layout, hist_df):
  333:         # GH 15079, test if error is raised when invalid layout is given
  334: 
  335:         with pytest.raises(ValueError, match=msg):
  336:             hist_df.plot.box(column=["A", "B"], by=by, layout=layout)
  337: 
  338:     @pytest.mark.parametrize("figsize", [(12, 8), (20, 10)])
  339:     def test_figure_shape_hist_with_by(self, figsize, hist_df):
  340:         # GH 15079
  341:         axes = hist_df.plot.box(column="A", by="C", figsize=figsize)
  342:         _check_axes_shape(axes, axes_num=1, figsize=figsize)
