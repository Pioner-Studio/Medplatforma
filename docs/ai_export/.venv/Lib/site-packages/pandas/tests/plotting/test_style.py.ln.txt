    1: import pytest
    2: 
    3: from pandas import Series
    4: 
    5: pytest.importorskip("matplotlib")
    6: from pandas.plotting._matplotlib.style import get_standard_colors
    7: 
    8: 
    9: class TestGetStandardColors:
   10:     @pytest.mark.parametrize(
   11:         "num_colors, expected",
   12:         [
   13:             (3, ["red", "green", "blue"]),
   14:             (5, ["red", "green", "blue", "red", "green"]),
   15:             (7, ["red", "green", "blue", "red", "green", "blue", "red"]),
   16:             (2, ["red", "green"]),
   17:             (1, ["red"]),
   18:         ],
   19:     )
   20:     def test_default_colors_named_from_prop_cycle(self, num_colors, expected):
   21:         import matplotlib as mpl
   22:         from matplotlib.pyplot import cycler
   23: 
   24:         mpl_params = {
   25:             "axes.prop_cycle": cycler(color=["red", "green", "blue"]),
   26:         }
   27:         with mpl.rc_context(rc=mpl_params):
   28:             result = get_standard_colors(num_colors=num_colors)
   29:             assert result == expected
   30: 
   31:     @pytest.mark.parametrize(
   32:         "num_colors, expected",
   33:         [
   34:             (1, ["b"]),
   35:             (3, ["b", "g", "r"]),
   36:             (4, ["b", "g", "r", "y"]),
   37:             (5, ["b", "g", "r", "y", "b"]),
   38:             (7, ["b", "g", "r", "y", "b", "g", "r"]),
   39:         ],
   40:     )
   41:     def test_default_colors_named_from_prop_cycle_string(self, num_colors, expected):
   42:         import matplotlib as mpl
   43:         from matplotlib.pyplot import cycler
   44: 
   45:         mpl_params = {
   46:             "axes.prop_cycle": cycler(color="bgry"),
   47:         }
   48:         with mpl.rc_context(rc=mpl_params):
   49:             result = get_standard_colors(num_colors=num_colors)
   50:             assert result == expected
   51: 
   52:     @pytest.mark.parametrize(
   53:         "num_colors, expected_name",
   54:         [
   55:             (1, ["C0"]),
   56:             (3, ["C0", "C1", "C2"]),
   57:             (
   58:                 12,
   59:                 [
   60:                     "C0",
   61:                     "C1",
   62:                     "C2",
   63:                     "C3",
   64:                     "C4",
   65:                     "C5",
   66:                     "C6",
   67:                     "C7",
   68:                     "C8",
   69:                     "C9",
   70:                     "C0",
   71:                     "C1",
   72:                 ],
   73:             ),
   74:         ],
   75:     )
   76:     def test_default_colors_named_undefined_prop_cycle(self, num_colors, expected_name):
   77:         import matplotlib as mpl
   78:         import matplotlib.colors as mcolors
   79: 
   80:         with mpl.rc_context(rc={}):
   81:             expected = [mcolors.to_hex(x) for x in expected_name]
   82:             result = get_standard_colors(num_colors=num_colors)
   83:             assert result == expected
   84: 
   85:     @pytest.mark.parametrize(
   86:         "num_colors, expected",
   87:         [
   88:             (1, ["red", "green", (0.1, 0.2, 0.3)]),
   89:             (2, ["red", "green", (0.1, 0.2, 0.3)]),
   90:             (3, ["red", "green", (0.1, 0.2, 0.3)]),
   91:             (4, ["red", "green", (0.1, 0.2, 0.3), "red"]),
   92:         ],
   93:     )
   94:     def test_user_input_color_sequence(self, num_colors, expected):
   95:         color = ["red", "green", (0.1, 0.2, 0.3)]
   96:         result = get_standard_colors(color=color, num_colors=num_colors)
   97:         assert result == expected
   98: 
   99:     @pytest.mark.parametrize(
  100:         "num_colors, expected",
  101:         [
  102:             (1, ["r", "g", "b", "k"]),
  103:             (2, ["r", "g", "b", "k"]),
  104:             (3, ["r", "g", "b", "k"]),
  105:             (4, ["r", "g", "b", "k"]),
  106:             (5, ["r", "g", "b", "k", "r"]),
  107:             (6, ["r", "g", "b", "k", "r", "g"]),
  108:         ],
  109:     )
  110:     def test_user_input_color_string(self, num_colors, expected):
  111:         color = "rgbk"
  112:         result = get_standard_colors(color=color, num_colors=num_colors)
  113:         assert result == expected
  114: 
  115:     @pytest.mark.parametrize(
  116:         "num_colors, expected",
  117:         [
  118:             (1, [(0.1, 0.2, 0.3)]),
  119:             (2, [(0.1, 0.2, 0.3), (0.1, 0.2, 0.3)]),
  120:             (3, [(0.1, 0.2, 0.3), (0.1, 0.2, 0.3), (0.1, 0.2, 0.3)]),
  121:         ],
  122:     )
  123:     def test_user_input_color_floats(self, num_colors, expected):
  124:         color = (0.1, 0.2, 0.3)
  125:         result = get_standard_colors(color=color, num_colors=num_colors)
  126:         assert result == expected
  127: 
  128:     @pytest.mark.parametrize(
  129:         "color, num_colors, expected",
  130:         [
  131:             ("Crimson", 1, ["Crimson"]),
  132:             ("DodgerBlue", 2, ["DodgerBlue", "DodgerBlue"]),
  133:             ("firebrick", 3, ["firebrick", "firebrick", "firebrick"]),
  134:         ],
  135:     )
  136:     def test_user_input_named_color_string(self, color, num_colors, expected):
  137:         result = get_standard_colors(color=color, num_colors=num_colors)
  138:         assert result == expected
  139: 
  140:     @pytest.mark.parametrize("color", ["", [], (), Series([], dtype="object")])
  141:     def test_empty_color_raises(self, color):
  142:         with pytest.raises(ValueError, match="Invalid color argument"):
  143:             get_standard_colors(color=color, num_colors=1)
  144: 
  145:     @pytest.mark.parametrize(
  146:         "color",
  147:         [
  148:             "bad_color",
  149:             ("red", "green", "bad_color"),
  150:             (0.1,),
  151:             (0.1, 0.2),
  152:             (0.1, 0.2, 0.3, 0.4, 0.5),  # must be either 3 or 4 floats
  153:         ],
  154:     )
  155:     def test_bad_color_raises(self, color):
  156:         with pytest.raises(ValueError, match="Invalid color"):
  157:             get_standard_colors(color=color, num_colors=5)
