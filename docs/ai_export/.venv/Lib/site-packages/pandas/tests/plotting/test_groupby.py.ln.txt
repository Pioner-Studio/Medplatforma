    1: """ Test cases for GroupBy.plot """
    2: 
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Index,
   10:     Series,
   11: )
   12: from pandas.tests.plotting.common import (
   13:     _check_axes_shape,
   14:     _check_legend_labels,
   15: )
   16: 
   17: pytest.importorskip("matplotlib")
   18: 
   19: 
   20: class TestDataFrameGroupByPlots:
   21:     def test_series_groupby_plotting_nominally_works(self):
   22:         n = 10
   23:         weight = Series(np.random.default_rng(2).normal(166, 20, size=n))
   24:         gender = np.random.default_rng(2).choice(["male", "female"], size=n)
   25: 
   26:         weight.groupby(gender).plot()
   27: 
   28:     def test_series_groupby_plotting_nominally_works_hist(self):
   29:         n = 10
   30:         height = Series(np.random.default_rng(2).normal(60, 10, size=n))
   31:         gender = np.random.default_rng(2).choice(["male", "female"], size=n)
   32:         height.groupby(gender).hist()
   33: 
   34:     def test_series_groupby_plotting_nominally_works_alpha(self):
   35:         n = 10
   36:         height = Series(np.random.default_rng(2).normal(60, 10, size=n))
   37:         gender = np.random.default_rng(2).choice(["male", "female"], size=n)
   38:         # Regression test for GH8733
   39:         height.groupby(gender).plot(alpha=0.5)
   40: 
   41:     def test_plotting_with_float_index_works(self):
   42:         # GH 7025
   43:         df = DataFrame(
   44:             {
   45:                 "def": [1, 1, 1, 2, 2, 2, 3, 3, 3],
   46:                 "val": np.random.default_rng(2).standard_normal(9),
   47:             },
   48:             index=[1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0],
   49:         )
   50: 
   51:         df.groupby("def")["val"].plot()
   52: 
   53:     def test_plotting_with_float_index_works_apply(self):
   54:         # GH 7025
   55:         df = DataFrame(
   56:             {
   57:                 "def": [1, 1, 1, 2, 2, 2, 3, 3, 3],
   58:                 "val": np.random.default_rng(2).standard_normal(9),
   59:             },
   60:             index=[1.0, 2.0, 3.0, 1.0, 2.0, 3.0, 1.0, 2.0, 3.0],
   61:         )
   62:         df.groupby("def")["val"].apply(lambda x: x.plot())
   63: 
   64:     def test_hist_single_row(self):
   65:         # GH10214
   66:         bins = np.arange(80, 100 + 2, 1)
   67:         df = DataFrame({"Name": ["AAA", "BBB"], "ByCol": [1, 2], "Mark": [85, 89]})
   68:         df["Mark"].hist(by=df["ByCol"], bins=bins)
   69: 
   70:     def test_hist_single_row_single_bycol(self):
   71:         # GH10214
   72:         bins = np.arange(80, 100 + 2, 1)
   73:         df = DataFrame({"Name": ["AAA"], "ByCol": [1], "Mark": [85]})
   74:         df["Mark"].hist(by=df["ByCol"], bins=bins)
   75: 
   76:     def test_plot_submethod_works(self):
   77:         df = DataFrame({"x": [1, 2, 3, 4, 5], "y": [1, 2, 3, 2, 1], "z": list("ababa")})
   78:         df.groupby("z").plot.scatter("x", "y")
   79: 
   80:     def test_plot_submethod_works_line(self):
   81:         df = DataFrame({"x": [1, 2, 3, 4, 5], "y": [1, 2, 3, 2, 1], "z": list("ababa")})
   82:         df.groupby("z")["x"].plot.line()
   83: 
   84:     def test_plot_kwargs(self):
   85:         df = DataFrame({"x": [1, 2, 3, 4, 5], "y": [1, 2, 3, 2, 1], "z": list("ababa")})
   86: 
   87:         res = df.groupby("z").plot(kind="scatter", x="x", y="y")
   88:         # check that a scatter plot is effectively plotted: the axes should
   89:         # contain a PathCollection from the scatter plot (GH11805)
   90:         assert len(res["a"].collections) == 1
   91: 
   92:     def test_plot_kwargs_scatter(self):
   93:         df = DataFrame({"x": [1, 2, 3, 4, 5], "y": [1, 2, 3, 2, 1], "z": list("ababa")})
   94:         res = df.groupby("z").plot.scatter(x="x", y="y")
   95:         assert len(res["a"].collections) == 1
   96: 
   97:     @pytest.mark.parametrize("column, expected_axes_num", [(None, 2), ("b", 1)])
   98:     def test_groupby_hist_frame_with_legend(self, column, expected_axes_num):
   99:         # GH 6279 - DataFrameGroupBy histogram can have a legend
  100:         expected_layout = (1, expected_axes_num)
  101:         expected_labels = column or [["a"], ["b"]]
  102: 
  103:         index = Index(15 * ["1"] + 15 * ["2"], name="c")
  104:         df = DataFrame(
  105:             np.random.default_rng(2).standard_normal((30, 2)),
  106:             index=index,
  107:             columns=["a", "b"],
  108:         )
  109:         g = df.groupby("c")
  110: 
  111:         for axes in g.hist(legend=True, column=column):
  112:             _check_axes_shape(axes, axes_num=expected_axes_num, layout=expected_layout)
  113:             for ax, expected_label in zip(axes[0], expected_labels):
  114:                 _check_legend_labels(ax, expected_label)
  115: 
  116:     @pytest.mark.parametrize("column", [None, "b"])
  117:     def test_groupby_hist_frame_with_legend_raises(self, column):
  118:         # GH 6279 - DataFrameGroupBy histogram with legend and label raises
  119:         index = Index(15 * ["1"] + 15 * ["2"], name="c")
  120:         df = DataFrame(
  121:             np.random.default_rng(2).standard_normal((30, 2)),
  122:             index=index,
  123:             columns=["a", "b"],
  124:         )
  125:         g = df.groupby("c")
  126: 
  127:         with pytest.raises(ValueError, match="Cannot use both legend and label"):
  128:             g.hist(legend=True, column=column, label="d")
  129: 
  130:     def test_groupby_hist_series_with_legend(self):
  131:         # GH 6279 - SeriesGroupBy histogram can have a legend
  132:         index = Index(15 * ["1"] + 15 * ["2"], name="c")
  133:         df = DataFrame(
  134:             np.random.default_rng(2).standard_normal((30, 2)),
  135:             index=index,
  136:             columns=["a", "b"],
  137:         )
  138:         g = df.groupby("c")
  139: 
  140:         for ax in g["a"].hist(legend=True):
  141:             _check_axes_shape(ax, axes_num=1, layout=(1, 1))
  142:             _check_legend_labels(ax, ["1", "2"])
  143: 
  144:     def test_groupby_hist_series_with_legend_raises(self):
  145:         # GH 6279 - SeriesGroupBy histogram with legend and label raises
  146:         index = Index(15 * ["1"] + 15 * ["2"], name="c")
  147:         df = DataFrame(
  148:             np.random.default_rng(2).standard_normal((30, 2)),
  149:             index=index,
  150:             columns=["a", "b"],
  151:         )
  152:         g = df.groupby("c")
  153: 
  154:         with pytest.raises(ValueError, match="Cannot use both legend and label"):
  155:             g.hist(legend=True, label="d")
