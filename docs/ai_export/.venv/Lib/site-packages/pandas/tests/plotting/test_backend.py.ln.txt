    1: import sys
    2: import types
    3: 
    4: import pytest
    5: 
    6: import pandas.util._test_decorators as td
    7: 
    8: import pandas
    9: 
   10: 
   11: @pytest.fixture
   12: def dummy_backend():
   13:     db = types.ModuleType("pandas_dummy_backend")
   14:     setattr(db, "plot", lambda *args, **kwargs: "used_dummy")
   15:     return db
   16: 
   17: 
   18: @pytest.fixture
   19: def restore_backend():
   20:     """Restore the plotting backend to matplotlib"""
   21:     with pandas.option_context("plotting.backend", "matplotlib"):
   22:         yield
   23: 
   24: 
   25: def test_backend_is_not_module():
   26:     msg = "Could not find plotting backend 'not_an_existing_module'."
   27:     with pytest.raises(ValueError, match=msg):
   28:         pandas.set_option("plotting.backend", "not_an_existing_module")
   29: 
   30:     assert pandas.options.plotting.backend == "matplotlib"
   31: 
   32: 
   33: def test_backend_is_correct(monkeypatch, restore_backend, dummy_backend):
   34:     monkeypatch.setitem(sys.modules, "pandas_dummy_backend", dummy_backend)
   35: 
   36:     pandas.set_option("plotting.backend", "pandas_dummy_backend")
   37:     assert pandas.get_option("plotting.backend") == "pandas_dummy_backend"
   38:     assert (
   39:         pandas.plotting._core._get_plot_backend("pandas_dummy_backend") is dummy_backend
   40:     )
   41: 
   42: 
   43: def test_backend_can_be_set_in_plot_call(monkeypatch, restore_backend, dummy_backend):
   44:     monkeypatch.setitem(sys.modules, "pandas_dummy_backend", dummy_backend)
   45:     df = pandas.DataFrame([1, 2, 3])
   46: 
   47:     assert pandas.get_option("plotting.backend") == "matplotlib"
   48:     assert df.plot(backend="pandas_dummy_backend") == "used_dummy"
   49: 
   50: 
   51: def test_register_entrypoint(restore_backend, tmp_path, monkeypatch, dummy_backend):
   52:     monkeypatch.syspath_prepend(tmp_path)
   53:     monkeypatch.setitem(sys.modules, "pandas_dummy_backend", dummy_backend)
   54: 
   55:     dist_info = tmp_path / "my_backend-0.0.0.dist-info"
   56:     dist_info.mkdir()
   57:     # entry_point name should not match module name - otherwise pandas will
   58:     # fall back to backend lookup by module name
   59:     (dist_info / "entry_points.txt").write_bytes(
   60:         b"[pandas_plotting_backends]\nmy_ep_backend = pandas_dummy_backend\n"
   61:     )
   62: 
   63:     assert pandas.plotting._core._get_plot_backend("my_ep_backend") is dummy_backend
   64: 
   65:     with pandas.option_context("plotting.backend", "my_ep_backend"):
   66:         assert pandas.plotting._core._get_plot_backend() is dummy_backend
   67: 
   68: 
   69: def test_setting_backend_without_plot_raises(monkeypatch):
   70:     # GH-28163
   71:     module = types.ModuleType("pandas_plot_backend")
   72:     monkeypatch.setitem(sys.modules, "pandas_plot_backend", module)
   73: 
   74:     assert pandas.options.plotting.backend == "matplotlib"
   75:     with pytest.raises(
   76:         ValueError, match="Could not find plotting backend 'pandas_plot_backend'."
   77:     ):
   78:         pandas.set_option("plotting.backend", "pandas_plot_backend")
   79: 
   80:     assert pandas.options.plotting.backend == "matplotlib"
   81: 
   82: 
   83: @td.skip_if_installed("matplotlib")
   84: def test_no_matplotlib_ok():
   85:     msg = (
   86:         'matplotlib is required for plotting when the default backend "matplotlib" is '
   87:         "selected."
   88:     )
   89:     with pytest.raises(ImportError, match=msg):
   90:         pandas.plotting._core._get_plot_backend("matplotlib")
   91: 
   92: 
   93: def test_extra_kinds_ok(monkeypatch, restore_backend, dummy_backend):
   94:     # https://github.com/pandas-dev/pandas/pull/28647
   95:     monkeypatch.setitem(sys.modules, "pandas_dummy_backend", dummy_backend)
   96:     pandas.set_option("plotting.backend", "pandas_dummy_backend")
   97:     df = pandas.DataFrame({"A": [1, 2, 3]})
   98:     df.plot(kind="not a real kind")
