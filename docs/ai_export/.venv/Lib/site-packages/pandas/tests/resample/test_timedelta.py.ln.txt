    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas.util._test_decorators as td
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DataFrame,
   11:     Series,
   12: )
   13: import pandas._testing as tm
   14: from pandas.core.indexes.timedeltas import timedelta_range
   15: 
   16: 
   17: def test_asfreq_bug():
   18:     df = DataFrame(data=[1, 3], index=[timedelta(), timedelta(minutes=3)])
   19:     result = df.resample("1min").asfreq()
   20:     expected = DataFrame(
   21:         data=[1, np.nan, np.nan, 3],
   22:         index=timedelta_range("0 day", periods=4, freq="1min"),
   23:     )
   24:     tm.assert_frame_equal(result, expected)
   25: 
   26: 
   27: def test_resample_with_nat():
   28:     # GH 13223
   29:     index = pd.to_timedelta(["0s", pd.NaT, "2s"])
   30:     result = DataFrame({"value": [2, 3, 5]}, index).resample("1s").mean()
   31:     expected = DataFrame(
   32:         {"value": [2.5, np.nan, 5.0]},
   33:         index=timedelta_range("0 day", periods=3, freq="1s"),
   34:     )
   35:     tm.assert_frame_equal(result, expected)
   36: 
   37: 
   38: def test_resample_as_freq_with_subperiod():
   39:     # GH 13022
   40:     index = timedelta_range("00:00:00", "00:10:00", freq="5min")
   41:     df = DataFrame(data={"value": [1, 5, 10]}, index=index)
   42:     result = df.resample("2min").asfreq()
   43:     expected_data = {"value": [1, np.nan, np.nan, np.nan, np.nan, 10]}
   44:     expected = DataFrame(
   45:         data=expected_data, index=timedelta_range("00:00:00", "00:10:00", freq="2min")
   46:     )
   47:     tm.assert_frame_equal(result, expected)
   48: 
   49: 
   50: def test_resample_with_timedeltas():
   51:     expected = DataFrame({"A": np.arange(1480)})
   52:     expected = expected.groupby(expected.index // 30).sum()
   53:     expected.index = timedelta_range("0 days", freq="30min", periods=50)
   54: 
   55:     df = DataFrame(
   56:         {"A": np.arange(1480)}, index=pd.to_timedelta(np.arange(1480), unit="min")
   57:     )
   58:     result = df.resample("30min").sum()
   59: 
   60:     tm.assert_frame_equal(result, expected)
   61: 
   62:     s = df["A"]
   63:     result = s.resample("30min").sum()
   64:     tm.assert_series_equal(result, expected["A"])
   65: 
   66: 
   67: def test_resample_single_period_timedelta():
   68:     s = Series(list(range(5)), index=timedelta_range("1 day", freq="s", periods=5))
   69:     result = s.resample("2s").sum()
   70:     expected = Series([1, 5, 4], index=timedelta_range("1 day", freq="2s", periods=3))
   71:     tm.assert_series_equal(result, expected)
   72: 
   73: 
   74: def test_resample_timedelta_idempotency():
   75:     # GH 12072
   76:     index = timedelta_range("0", periods=9, freq="10ms")
   77:     series = Series(range(9), index=index)
   78:     result = series.resample("10ms").mean()
   79:     expected = series.astype(float)
   80:     tm.assert_series_equal(result, expected)
   81: 
   82: 
   83: def test_resample_offset_with_timedeltaindex():
   84:     # GH 10530 & 31809
   85:     rng = timedelta_range(start="0s", periods=25, freq="s")
   86:     ts = Series(np.random.default_rng(2).standard_normal(len(rng)), index=rng)
   87: 
   88:     with_base = ts.resample("2s", offset="5s").mean()
   89:     without_base = ts.resample("2s").mean()
   90: 
   91:     exp_without_base = timedelta_range(start="0s", end="25s", freq="2s")
   92:     exp_with_base = timedelta_range(start="5s", end="29s", freq="2s")
   93: 
   94:     tm.assert_index_equal(without_base.index, exp_without_base)
   95:     tm.assert_index_equal(with_base.index, exp_with_base)
   96: 
   97: 
   98: def test_resample_categorical_data_with_timedeltaindex():
   99:     # GH #12169
  100:     df = DataFrame({"Group_obj": "A"}, index=pd.to_timedelta(list(range(20)), unit="s"))
  101:     df["Group"] = df["Group_obj"].astype("category")
  102:     result = df.resample("10s").agg(lambda x: (x.value_counts().index[0]))
  103:     exp_tdi = pd.TimedeltaIndex(np.array([0, 10], dtype="m8[s]"), freq="10s").as_unit(
  104:         "ns"
  105:     )
  106:     expected = DataFrame(
  107:         {"Group_obj": ["A", "A"], "Group": ["A", "A"]},
  108:         index=exp_tdi,
  109:     )
  110:     expected = expected.reindex(["Group_obj", "Group"], axis=1)
  111:     expected["Group"] = expected["Group_obj"].astype("category")
  112:     tm.assert_frame_equal(result, expected)
  113: 
  114: 
  115: def test_resample_timedelta_values():
  116:     # GH 13119
  117:     # check that timedelta dtype is preserved when NaT values are
  118:     # introduced by the resampling
  119: 
  120:     times = timedelta_range("1 day", "6 day", freq="4D")
  121:     df = DataFrame({"time": times}, index=times)
  122: 
  123:     times2 = timedelta_range("1 day", "6 day", freq="2D")
  124:     exp = Series(times2, index=times2, name="time")
  125:     exp.iloc[1] = pd.NaT
  126: 
  127:     res = df.resample("2D").first()["time"]
  128:     tm.assert_series_equal(res, exp)
  129:     res = df["time"].resample("2D").first()
  130:     tm.assert_series_equal(res, exp)
  131: 
  132: 
  133: @pytest.mark.parametrize(
  134:     "start, end, freq, resample_freq",
  135:     [
  136:         ("8h", "21h59min50s", "10s", "3h"),  # GH 30353 example
  137:         ("3h", "22h", "1h", "5h"),
  138:         ("527D", "5006D", "3D", "10D"),
  139:         ("1D", "10D", "1D", "2D"),  # GH 13022 example
  140:         # tests that worked before GH 33498:
  141:         ("8h", "21h59min50s", "10s", "2h"),
  142:         ("0h", "21h59min50s", "10s", "3h"),
  143:         ("10D", "85D", "D", "2D"),
  144:     ],
  145: )
  146: def test_resample_timedelta_edge_case(start, end, freq, resample_freq):
  147:     # GH 33498
  148:     # check that the timedelta bins does not contains an extra bin
  149:     idx = timedelta_range(start=start, end=end, freq=freq)
  150:     s = Series(np.arange(len(idx)), index=idx)
  151:     result = s.resample(resample_freq).min()
  152:     expected_index = timedelta_range(freq=resample_freq, start=start, end=end)
  153:     tm.assert_index_equal(result.index, expected_index)
  154:     assert result.index.freq == expected_index.freq
  155:     assert not np.isnan(result.iloc[-1])
  156: 
  157: 
  158: @pytest.mark.parametrize("duplicates", [True, False])
  159: def test_resample_with_timedelta_yields_no_empty_groups(duplicates):
  160:     # GH 10603
  161:     df = DataFrame(
  162:         np.random.default_rng(2).normal(size=(10000, 4)),
  163:         index=timedelta_range(start="0s", periods=10000, freq="3906250ns"),
  164:     )
  165:     if duplicates:
  166:         # case with non-unique columns
  167:         df.columns = ["A", "B", "A", "C"]
  168: 
  169:     result = df.loc["1s":, :].resample("3s").apply(lambda x: len(x))
  170: 
  171:     expected = DataFrame(
  172:         [[768] * 4] * 12 + [[528] * 4],
  173:         index=timedelta_range(start="1s", periods=13, freq="3s"),
  174:     )
  175:     expected.columns = df.columns
  176:     tm.assert_frame_equal(result, expected)
  177: 
  178: 
  179: @pytest.mark.parametrize("unit", ["s", "ms", "us", "ns"])
  180: def test_resample_quantile_timedelta(unit):
  181:     # GH: 29485
  182:     dtype = np.dtype(f"m8[{unit}]")
  183:     df = DataFrame(
  184:         {"value": pd.to_timedelta(np.arange(4), unit="s").astype(dtype)},
  185:         index=pd.date_range("20200101", periods=4, tz="UTC"),
  186:     )
  187:     result = df.resample("2D").quantile(0.99)
  188:     expected = DataFrame(
  189:         {
  190:             "value": [
  191:                 pd.Timedelta("0 days 00:00:00.990000"),
  192:                 pd.Timedelta("0 days 00:00:02.990000"),
  193:             ]
  194:         },
  195:         index=pd.date_range("20200101", periods=2, tz="UTC", freq="2D"),
  196:     ).astype(dtype)
  197:     tm.assert_frame_equal(result, expected)
  198: 
  199: 
  200: def test_resample_closed_right():
  201:     # GH#45414
  202:     idx = pd.Index([pd.Timedelta(seconds=120 + i * 30) for i in range(10)])
  203:     ser = Series(range(10), index=idx)
  204:     result = ser.resample("min", closed="right", label="right").sum()
  205:     expected = Series(
  206:         [0, 3, 7, 11, 15, 9],
  207:         index=pd.TimedeltaIndex(
  208:             [pd.Timedelta(seconds=120 + i * 60) for i in range(6)], freq="min"
  209:         ),
  210:     )
  211:     tm.assert_series_equal(result, expected)
  212: 
  213: 
  214: @td.skip_if_no("pyarrow")
  215: def test_arrow_duration_resample():
  216:     # GH 56371
  217:     idx = pd.Index(timedelta_range("1 day", periods=5), dtype="duration[ns][pyarrow]")
  218:     expected = Series(np.arange(5, dtype=np.float64), index=idx)
  219:     result = expected.resample("1D").mean()
  220:     tm.assert_series_equal(result, expected)
