    1: import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestConvertDtypes:
   11:     @pytest.mark.parametrize(
   12:         "convert_integer, expected", [(False, np.dtype("int32")), (True, "Int32")]
   13:     )
   14:     def test_convert_dtypes(
   15:         self, convert_integer, expected, string_storage, using_infer_string
   16:     ):
   17:         # Specific types are tested in tests/series/test_dtypes.py
   18:         # Just check that it works for DataFrame here
   19:         if using_infer_string:
   20:             string_storage = "pyarrow_numpy"
   21:         df = pd.DataFrame(
   22:             {
   23:                 "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
   24:                 "b": pd.Series(["x", "y", "z"], dtype=np.dtype("O")),
   25:             }
   26:         )
   27:         with pd.option_context("string_storage", string_storage):
   28:             result = df.convert_dtypes(True, True, convert_integer, False)
   29:         expected = pd.DataFrame(
   30:             {
   31:                 "a": pd.Series([1, 2, 3], dtype=expected),
   32:                 "b": pd.Series(["x", "y", "z"], dtype=f"string[{string_storage}]"),
   33:             }
   34:         )
   35:         tm.assert_frame_equal(result, expected)
   36: 
   37:     def test_convert_empty(self):
   38:         # Empty DataFrame can pass convert_dtypes, see GH#40393
   39:         empty_df = pd.DataFrame()
   40:         tm.assert_frame_equal(empty_df, empty_df.convert_dtypes())
   41: 
   42:     def test_convert_dtypes_retain_column_names(self):
   43:         # GH#41435
   44:         df = pd.DataFrame({"a": [1, 2], "b": [3, 4]})
   45:         df.columns.name = "cols"
   46: 
   47:         result = df.convert_dtypes()
   48:         tm.assert_index_equal(result.columns, df.columns)
   49:         assert result.columns.name == "cols"
   50: 
   51:     def test_pyarrow_dtype_backend(self):
   52:         pa = pytest.importorskip("pyarrow")
   53:         df = pd.DataFrame(
   54:             {
   55:                 "a": pd.Series([1, 2, 3], dtype=np.dtype("int32")),
   56:                 "b": pd.Series(["x", "y", None], dtype=np.dtype("O")),
   57:                 "c": pd.Series([True, False, None], dtype=np.dtype("O")),
   58:                 "d": pd.Series([np.nan, 100.5, 200], dtype=np.dtype("float")),
   59:                 "e": pd.Series(pd.date_range("2022", periods=3)),
   60:                 "f": pd.Series(pd.date_range("2022", periods=3, tz="UTC").as_unit("s")),
   61:                 "g": pd.Series(pd.timedelta_range("1D", periods=3)),
   62:             }
   63:         )
   64:         result = df.convert_dtypes(dtype_backend="pyarrow")
   65:         expected = pd.DataFrame(
   66:             {
   67:                 "a": pd.arrays.ArrowExtensionArray(
   68:                     pa.array([1, 2, 3], type=pa.int32())
   69:                 ),
   70:                 "b": pd.arrays.ArrowExtensionArray(pa.array(["x", "y", None])),
   71:                 "c": pd.arrays.ArrowExtensionArray(pa.array([True, False, None])),
   72:                 "d": pd.arrays.ArrowExtensionArray(pa.array([None, 100.5, 200.0])),
   73:                 "e": pd.arrays.ArrowExtensionArray(
   74:                     pa.array(
   75:                         [
   76:                             datetime.datetime(2022, 1, 1),
   77:                             datetime.datetime(2022, 1, 2),
   78:                             datetime.datetime(2022, 1, 3),
   79:                         ],
   80:                         type=pa.timestamp(unit="ns"),
   81:                     )
   82:                 ),
   83:                 "f": pd.arrays.ArrowExtensionArray(
   84:                     pa.array(
   85:                         [
   86:                             datetime.datetime(2022, 1, 1),
   87:                             datetime.datetime(2022, 1, 2),
   88:                             datetime.datetime(2022, 1, 3),
   89:                         ],
   90:                         type=pa.timestamp(unit="s", tz="UTC"),
   91:                     )
   92:                 ),
   93:                 "g": pd.arrays.ArrowExtensionArray(
   94:                     pa.array(
   95:                         [
   96:                             datetime.timedelta(1),
   97:                             datetime.timedelta(2),
   98:                             datetime.timedelta(3),
   99:                         ],
  100:                         type=pa.duration("ns"),
  101:                     )
  102:                 ),
  103:             }
  104:         )
  105:         tm.assert_frame_equal(result, expected)
  106: 
  107:     def test_pyarrow_dtype_backend_already_pyarrow(self):
  108:         pytest.importorskip("pyarrow")
  109:         expected = pd.DataFrame([1, 2, 3], dtype="int64[pyarrow]")
  110:         result = expected.convert_dtypes(dtype_backend="pyarrow")
  111:         tm.assert_frame_equal(result, expected)
  112: 
  113:     def test_pyarrow_dtype_backend_from_pandas_nullable(self):
  114:         pa = pytest.importorskip("pyarrow")
  115:         df = pd.DataFrame(
  116:             {
  117:                 "a": pd.Series([1, 2, None], dtype="Int32"),
  118:                 "b": pd.Series(["x", "y", None], dtype="string[python]"),
  119:                 "c": pd.Series([True, False, None], dtype="boolean"),
  120:                 "d": pd.Series([None, 100.5, 200], dtype="Float64"),
  121:             }
  122:         )
  123:         result = df.convert_dtypes(dtype_backend="pyarrow")
  124:         expected = pd.DataFrame(
  125:             {
  126:                 "a": pd.arrays.ArrowExtensionArray(
  127:                     pa.array([1, 2, None], type=pa.int32())
  128:                 ),
  129:                 "b": pd.arrays.ArrowExtensionArray(pa.array(["x", "y", None])),
  130:                 "c": pd.arrays.ArrowExtensionArray(pa.array([True, False, None])),
  131:                 "d": pd.arrays.ArrowExtensionArray(pa.array([None, 100.5, 200.0])),
  132:             }
  133:         )
  134:         tm.assert_frame_equal(result, expected)
  135: 
  136:     def test_pyarrow_dtype_empty_object(self):
  137:         # GH 50970
  138:         pytest.importorskip("pyarrow")
  139:         expected = pd.DataFrame(columns=[0])
  140:         result = expected.convert_dtypes(dtype_backend="pyarrow")
  141:         tm.assert_frame_equal(result, expected)
  142: 
  143:     def test_pyarrow_engine_lines_false(self):
  144:         # GH 48893
  145:         df = pd.DataFrame({"a": [1, 2, 3]})
  146:         msg = (
  147:             "dtype_backend numpy is invalid, only 'numpy_nullable' and "
  148:             "'pyarrow' are allowed."
  149:         )
  150:         with pytest.raises(ValueError, match=msg):
  151:             df.convert_dtypes(dtype_backend="numpy")
  152: 
  153:     def test_pyarrow_backend_no_conversion(self):
  154:         # GH#52872
  155:         pytest.importorskip("pyarrow")
  156:         df = pd.DataFrame({"a": [1, 2], "b": 1.5, "c": True, "d": "x"})
  157:         expected = df.copy()
  158:         result = df.convert_dtypes(
  159:             convert_floating=False,
  160:             convert_integer=False,
  161:             convert_boolean=False,
  162:             convert_string=False,
  163:             dtype_backend="pyarrow",
  164:         )
  165:         tm.assert_frame_equal(result, expected)
  166: 
  167:     def test_convert_dtypes_pyarrow_to_np_nullable(self):
  168:         # GH 53648
  169:         pytest.importorskip("pyarrow")
  170:         ser = pd.DataFrame(range(2), dtype="int32[pyarrow]")
  171:         result = ser.convert_dtypes(dtype_backend="numpy_nullable")
  172:         expected = pd.DataFrame(range(2), dtype="Int32")
  173:         tm.assert_frame_equal(result, expected)
  174: 
  175:     def test_convert_dtypes_pyarrow_timestamp(self):
  176:         # GH 54191
  177:         pytest.importorskip("pyarrow")
  178:         ser = pd.Series(pd.date_range("2020-01-01", "2020-01-02", freq="1min"))
  179:         expected = ser.astype("timestamp[ms][pyarrow]")
  180:         result = expected.convert_dtypes(dtype_backend="pyarrow")
  181:         tm.assert_series_equal(result, expected)
  182: 
  183:     def test_convert_dtypes_avoid_block_splitting(self):
  184:         # GH#55341
  185:         df = pd.DataFrame({"a": [1, 2, 3], "b": [4, 5, 6], "c": "a"})
  186:         result = df.convert_dtypes(convert_integer=False)
  187:         expected = pd.DataFrame(
  188:             {
  189:                 "a": [1, 2, 3],
  190:                 "b": [4, 5, 6],
  191:                 "c": pd.Series(["a"] * 3, dtype="string[python]"),
  192:             }
  193:         )
  194:         tm.assert_frame_equal(result, expected)
  195:         assert result._mgr.nblocks == 2
  196: 
  197:     def test_convert_dtypes_from_arrow(self):
  198:         # GH#56581
  199:         df = pd.DataFrame([["a", datetime.time(18, 12)]], columns=["a", "b"])
  200:         result = df.convert_dtypes()
  201:         expected = df.astype({"a": "string[python]"})
  202:         tm.assert_frame_equal(result, expected)
