    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     DatetimeIndex,
    9:     PeriodIndex,
   10:     Series,
   11:     Timedelta,
   12:     date_range,
   13:     period_range,
   14:     to_datetime,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: def _get_with_delta(delta, freq="YE-DEC"):
   20:     return date_range(
   21:         to_datetime("1/1/2001") + delta,
   22:         to_datetime("12/31/2009") + delta,
   23:         freq=freq,
   24:     )
   25: 
   26: 
   27: class TestToTimestamp:
   28:     def test_to_timestamp(self, frame_or_series):
   29:         K = 5
   30:         index = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
   31:         obj = DataFrame(
   32:             np.random.default_rng(2).standard_normal((len(index), K)),
   33:             index=index,
   34:             columns=["A", "B", "C", "D", "E"],
   35:         )
   36:         obj["mix"] = "a"
   37:         obj = tm.get_obj(obj, frame_or_series)
   38: 
   39:         exp_index = date_range("1/1/2001", end="12/31/2009", freq="YE-DEC")
   40:         exp_index = exp_index + Timedelta(1, "D") - Timedelta(1, "ns")
   41:         result = obj.to_timestamp("D", "end")
   42:         tm.assert_index_equal(result.index, exp_index)
   43:         tm.assert_numpy_array_equal(result.values, obj.values)
   44:         if frame_or_series is Series:
   45:             assert result.name == "A"
   46: 
   47:         exp_index = date_range("1/1/2001", end="1/1/2009", freq="YS-JAN")
   48:         result = obj.to_timestamp("D", "start")
   49:         tm.assert_index_equal(result.index, exp_index)
   50: 
   51:         result = obj.to_timestamp(how="start")
   52:         tm.assert_index_equal(result.index, exp_index)
   53: 
   54:         delta = timedelta(hours=23)
   55:         result = obj.to_timestamp("H", "end")
   56:         exp_index = _get_with_delta(delta)
   57:         exp_index = exp_index + Timedelta(1, "h") - Timedelta(1, "ns")
   58:         tm.assert_index_equal(result.index, exp_index)
   59: 
   60:         delta = timedelta(hours=23, minutes=59)
   61:         result = obj.to_timestamp("T", "end")
   62:         exp_index = _get_with_delta(delta)
   63:         exp_index = exp_index + Timedelta(1, "m") - Timedelta(1, "ns")
   64:         tm.assert_index_equal(result.index, exp_index)
   65: 
   66:         result = obj.to_timestamp("S", "end")
   67:         delta = timedelta(hours=23, minutes=59, seconds=59)
   68:         exp_index = _get_with_delta(delta)
   69:         exp_index = exp_index + Timedelta(1, "s") - Timedelta(1, "ns")
   70:         tm.assert_index_equal(result.index, exp_index)
   71: 
   72:     def test_to_timestamp_columns(self):
   73:         K = 5
   74:         index = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
   75:         df = DataFrame(
   76:             np.random.default_rng(2).standard_normal((len(index), K)),
   77:             index=index,
   78:             columns=["A", "B", "C", "D", "E"],
   79:         )
   80:         df["mix"] = "a"
   81: 
   82:         # columns
   83:         df = df.T
   84: 
   85:         exp_index = date_range("1/1/2001", end="12/31/2009", freq="YE-DEC")
   86:         exp_index = exp_index + Timedelta(1, "D") - Timedelta(1, "ns")
   87:         result = df.to_timestamp("D", "end", axis=1)
   88:         tm.assert_index_equal(result.columns, exp_index)
   89:         tm.assert_numpy_array_equal(result.values, df.values)
   90: 
   91:         exp_index = date_range("1/1/2001", end="1/1/2009", freq="YS-JAN")
   92:         result = df.to_timestamp("D", "start", axis=1)
   93:         tm.assert_index_equal(result.columns, exp_index)
   94: 
   95:         delta = timedelta(hours=23)
   96:         result = df.to_timestamp("H", "end", axis=1)
   97:         exp_index = _get_with_delta(delta)
   98:         exp_index = exp_index + Timedelta(1, "h") - Timedelta(1, "ns")
   99:         tm.assert_index_equal(result.columns, exp_index)
  100: 
  101:         delta = timedelta(hours=23, minutes=59)
  102:         result = df.to_timestamp("min", "end", axis=1)
  103:         exp_index = _get_with_delta(delta)
  104:         exp_index = exp_index + Timedelta(1, "m") - Timedelta(1, "ns")
  105:         tm.assert_index_equal(result.columns, exp_index)
  106: 
  107:         result = df.to_timestamp("S", "end", axis=1)
  108:         delta = timedelta(hours=23, minutes=59, seconds=59)
  109:         exp_index = _get_with_delta(delta)
  110:         exp_index = exp_index + Timedelta(1, "s") - Timedelta(1, "ns")
  111:         tm.assert_index_equal(result.columns, exp_index)
  112: 
  113:         result1 = df.to_timestamp("5min", axis=1)
  114:         result2 = df.to_timestamp("min", axis=1)
  115:         expected = date_range("2001-01-01", "2009-01-01", freq="YS")
  116:         assert isinstance(result1.columns, DatetimeIndex)
  117:         assert isinstance(result2.columns, DatetimeIndex)
  118:         tm.assert_numpy_array_equal(result1.columns.asi8, expected.asi8)
  119:         tm.assert_numpy_array_equal(result2.columns.asi8, expected.asi8)
  120:         # PeriodIndex.to_timestamp always use 'infer'
  121:         assert result1.columns.freqstr == "YS-JAN"
  122:         assert result2.columns.freqstr == "YS-JAN"
  123: 
  124:     def test_to_timestamp_invalid_axis(self):
  125:         index = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
  126:         obj = DataFrame(
  127:             np.random.default_rng(2).standard_normal((len(index), 5)), index=index
  128:         )
  129: 
  130:         # invalid axis
  131:         with pytest.raises(ValueError, match="axis"):
  132:             obj.to_timestamp(axis=2)
  133: 
  134:     def test_to_timestamp_hourly(self, frame_or_series):
  135:         index = period_range(freq="h", start="1/1/2001", end="1/2/2001")
  136:         obj = Series(1, index=index, name="foo")
  137:         if frame_or_series is not Series:
  138:             obj = obj.to_frame()
  139: 
  140:         exp_index = date_range("1/1/2001 00:59:59", end="1/2/2001 00:59:59", freq="h")
  141:         result = obj.to_timestamp(how="end")
  142:         exp_index = exp_index + Timedelta(1, "s") - Timedelta(1, "ns")
  143:         tm.assert_index_equal(result.index, exp_index)
  144:         if frame_or_series is Series:
  145:             assert result.name == "foo"
  146: 
  147:     def test_to_timestamp_raises(self, index, frame_or_series):
  148:         # GH#33327
  149:         obj = frame_or_series(index=index, dtype=object)
  150: 
  151:         if not isinstance(index, PeriodIndex):
  152:             msg = f"unsupported Type {type(index).__name__}"
  153:             with pytest.raises(TypeError, match=msg):
  154:                 obj.to_timestamp()
