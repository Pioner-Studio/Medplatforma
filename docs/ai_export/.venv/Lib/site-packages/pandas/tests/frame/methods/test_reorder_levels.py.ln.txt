    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     MultiIndex,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestReorderLevels:
   12:     def test_reorder_levels(self, frame_or_series):
   13:         index = MultiIndex(
   14:             levels=[["bar"], ["one", "two", "three"], [0, 1]],
   15:             codes=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]],
   16:             names=["L0", "L1", "L2"],
   17:         )
   18:         df = DataFrame({"A": np.arange(6), "B": np.arange(6)}, index=index)
   19:         obj = tm.get_obj(df, frame_or_series)
   20: 
   21:         # no change, position
   22:         result = obj.reorder_levels([0, 1, 2])
   23:         tm.assert_equal(obj, result)
   24: 
   25:         # no change, labels
   26:         result = obj.reorder_levels(["L0", "L1", "L2"])
   27:         tm.assert_equal(obj, result)
   28: 
   29:         # rotate, position
   30:         result = obj.reorder_levels([1, 2, 0])
   31:         e_idx = MultiIndex(
   32:             levels=[["one", "two", "three"], [0, 1], ["bar"]],
   33:             codes=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1], [0, 0, 0, 0, 0, 0]],
   34:             names=["L1", "L2", "L0"],
   35:         )
   36:         expected = DataFrame({"A": np.arange(6), "B": np.arange(6)}, index=e_idx)
   37:         expected = tm.get_obj(expected, frame_or_series)
   38:         tm.assert_equal(result, expected)
   39: 
   40:         result = obj.reorder_levels([0, 0, 0])
   41:         e_idx = MultiIndex(
   42:             levels=[["bar"], ["bar"], ["bar"]],
   43:             codes=[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]],
   44:             names=["L0", "L0", "L0"],
   45:         )
   46:         expected = DataFrame({"A": np.arange(6), "B": np.arange(6)}, index=e_idx)
   47:         expected = tm.get_obj(expected, frame_or_series)
   48:         tm.assert_equal(result, expected)
   49: 
   50:         result = obj.reorder_levels(["L0", "L0", "L0"])
   51:         tm.assert_equal(result, expected)
   52: 
   53:     def test_reorder_levels_swaplevel_equivalence(
   54:         self, multiindex_year_month_day_dataframe_random_data
   55:     ):
   56:         ymd = multiindex_year_month_day_dataframe_random_data
   57: 
   58:         result = ymd.reorder_levels(["month", "day", "year"])
   59:         expected = ymd.swaplevel(0, 1).swaplevel(1, 2)
   60:         tm.assert_frame_equal(result, expected)
   61: 
   62:         result = ymd["A"].reorder_levels(["month", "day", "year"])
   63:         expected = ymd["A"].swaplevel(0, 1).swaplevel(1, 2)
   64:         tm.assert_series_equal(result, expected)
   65: 
   66:         result = ymd.T.reorder_levels(["month", "day", "year"], axis=1)
   67:         expected = ymd.T.swaplevel(0, 1, axis=1).swaplevel(1, 2, axis=1)
   68:         tm.assert_frame_equal(result, expected)
   69: 
   70:         with pytest.raises(TypeError, match="hierarchical axis"):
   71:             ymd.reorder_levels([1, 2], axis=1)
   72: 
   73:         with pytest.raises(IndexError, match="Too many levels"):
   74:             ymd.index.reorder_levels([1, 2, 3])
