    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class SharedSetAxisTests:
   12:     @pytest.fixture
   13:     def obj(self):
   14:         raise NotImplementedError("Implemented by subclasses")
   15: 
   16:     def test_set_axis(self, obj):
   17:         # GH14636; this tests setting index for both Series and DataFrame
   18:         new_index = list("abcd")[: len(obj)]
   19:         expected = obj.copy()
   20:         expected.index = new_index
   21:         result = obj.set_axis(new_index, axis=0)
   22:         tm.assert_equal(expected, result)
   23: 
   24:     def test_set_axis_copy(self, obj, using_copy_on_write):
   25:         # Test copy keyword GH#47932
   26:         new_index = list("abcd")[: len(obj)]
   27: 
   28:         orig = obj.iloc[:]
   29:         expected = obj.copy()
   30:         expected.index = new_index
   31: 
   32:         result = obj.set_axis(new_index, axis=0, copy=True)
   33:         tm.assert_equal(expected, result)
   34:         assert result is not obj
   35:         # check we DID make a copy
   36:         if not using_copy_on_write:
   37:             if obj.ndim == 1:
   38:                 assert not tm.shares_memory(result, obj)
   39:             else:
   40:                 assert not any(
   41:                     tm.shares_memory(result.iloc[:, i], obj.iloc[:, i])
   42:                     for i in range(obj.shape[1])
   43:                 )
   44: 
   45:         result = obj.set_axis(new_index, axis=0, copy=False)
   46:         tm.assert_equal(expected, result)
   47:         assert result is not obj
   48:         # check we did NOT make a copy
   49:         if obj.ndim == 1:
   50:             assert tm.shares_memory(result, obj)
   51:         else:
   52:             assert all(
   53:                 tm.shares_memory(result.iloc[:, i], obj.iloc[:, i])
   54:                 for i in range(obj.shape[1])
   55:             )
   56: 
   57:         # copy defaults to True
   58:         result = obj.set_axis(new_index, axis=0)
   59:         tm.assert_equal(expected, result)
   60:         assert result is not obj
   61:         if using_copy_on_write:
   62:             # check we DID NOT make a copy
   63:             if obj.ndim == 1:
   64:                 assert tm.shares_memory(result, obj)
   65:             else:
   66:                 assert any(
   67:                     tm.shares_memory(result.iloc[:, i], obj.iloc[:, i])
   68:                     for i in range(obj.shape[1])
   69:                 )
   70:         # check we DID make a copy
   71:         elif obj.ndim == 1:
   72:             assert not tm.shares_memory(result, obj)
   73:         else:
   74:             assert not any(
   75:                 tm.shares_memory(result.iloc[:, i], obj.iloc[:, i])
   76:                 for i in range(obj.shape[1])
   77:             )
   78: 
   79:         res = obj.set_axis(new_index, copy=False)
   80:         tm.assert_equal(expected, res)
   81:         # check we did NOT make a copy
   82:         if res.ndim == 1:
   83:             assert tm.shares_memory(res, orig)
   84:         else:
   85:             assert all(
   86:                 tm.shares_memory(res.iloc[:, i], orig.iloc[:, i])
   87:                 for i in range(res.shape[1])
   88:             )
   89: 
   90:     def test_set_axis_unnamed_kwarg_warns(self, obj):
   91:         # omitting the "axis" parameter
   92:         new_index = list("abcd")[: len(obj)]
   93: 
   94:         expected = obj.copy()
   95:         expected.index = new_index
   96: 
   97:         result = obj.set_axis(new_index)
   98:         tm.assert_equal(result, expected)
   99: 
  100:     @pytest.mark.parametrize("axis", [3, "foo"])
  101:     def test_set_axis_invalid_axis_name(self, axis, obj):
  102:         # wrong values for the "axis" parameter
  103:         with pytest.raises(ValueError, match="No axis named"):
  104:             obj.set_axis(list("abc"), axis=axis)
  105: 
  106:     def test_set_axis_setattr_index_not_collection(self, obj):
  107:         # wrong type
  108:         msg = (
  109:             r"Index\(\.\.\.\) must be called with a collection of some "
  110:             r"kind, None was passed"
  111:         )
  112:         with pytest.raises(TypeError, match=msg):
  113:             obj.index = None
  114: 
  115:     def test_set_axis_setattr_index_wrong_length(self, obj):
  116:         # wrong length
  117:         msg = (
  118:             f"Length mismatch: Expected axis has {len(obj)} elements, "
  119:             f"new values have {len(obj)-1} elements"
  120:         )
  121:         with pytest.raises(ValueError, match=msg):
  122:             obj.index = np.arange(len(obj) - 1)
  123: 
  124:         if obj.ndim == 2:
  125:             with pytest.raises(ValueError, match="Length mismatch"):
  126:                 obj.columns = obj.columns[::2]
  127: 
  128: 
  129: class TestDataFrameSetAxis(SharedSetAxisTests):
  130:     @pytest.fixture
  131:     def obj(self):
  132:         df = DataFrame(
  133:             {"A": [1.1, 2.2, 3.3], "B": [5.0, 6.1, 7.2], "C": [4.4, 5.5, 6.6]},
  134:             index=[2010, 2011, 2012],
  135:         )
  136:         return df
  137: 
  138: 
  139: class TestSeriesSetAxis(SharedSetAxisTests):
  140:     @pytest.fixture
  141:     def obj(self):
  142:         ser = Series(np.arange(4), index=[1, 3, 5, 7], dtype="int64")
  143:         return ser
