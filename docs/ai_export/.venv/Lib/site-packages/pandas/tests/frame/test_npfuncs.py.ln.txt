    1: """
    2: Tests for np.foo applied to DataFrame, not necessarily ufuncs.
    3: """
    4: import numpy as np
    5: 
    6: from pandas import (
    7:     Categorical,
    8:     DataFrame,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestAsArray:
   14:     def test_asarray_homogeneous(self):
   15:         df = DataFrame({"A": Categorical([1, 2]), "B": Categorical([1, 2])})
   16:         result = np.asarray(df)
   17:         # may change from object in the future
   18:         expected = np.array([[1, 1], [2, 2]], dtype="object")
   19:         tm.assert_numpy_array_equal(result, expected)
   20: 
   21:     def test_np_sqrt(self, float_frame):
   22:         with np.errstate(all="ignore"):
   23:             result = np.sqrt(float_frame)
   24:         assert isinstance(result, type(float_frame))
   25:         assert result.index.is_(float_frame.index)
   26:         assert result.columns.is_(float_frame.columns)
   27: 
   28:         tm.assert_frame_equal(result, float_frame.apply(np.sqrt))
   29: 
   30:     def test_sum_deprecated_axis_behavior(self):
   31:         # GH#52042 deprecated behavior of df.sum(axis=None), which gets
   32:         #  called when we do np.sum(df)
   33: 
   34:         arr = np.random.default_rng(2).standard_normal((4, 3))
   35:         df = DataFrame(arr)
   36: 
   37:         msg = "The behavior of DataFrame.sum with axis=None is deprecated"
   38:         with tm.assert_produces_warning(
   39:             FutureWarning, match=msg, check_stacklevel=False
   40:         ):
   41:             res = np.sum(df)
   42: 
   43:         with tm.assert_produces_warning(FutureWarning, match=msg):
   44:             expected = df.sum(axis=None)
   45:         tm.assert_series_equal(res, expected)
   46: 
   47:     def test_np_ravel(self):
   48:         # GH26247
   49:         arr = np.array(
   50:             [
   51:                 [0.11197053, 0.44361564, -0.92589452],
   52:                 [0.05883648, -0.00948922, -0.26469934],
   53:             ]
   54:         )
   55: 
   56:         result = np.ravel([DataFrame(batch.reshape(1, 3)) for batch in arr])
   57:         expected = np.array(
   58:             [
   59:                 0.11197053,
   60:                 0.44361564,
   61:                 -0.92589452,
   62:                 0.05883648,
   63:                 -0.00948922,
   64:                 -0.26469934,
   65:             ]
   66:         )
   67:         tm.assert_numpy_array_equal(result, expected)
   68: 
   69:         result = np.ravel(DataFrame(arr[0].reshape(1, 3), columns=["x1", "x2", "x3"]))
   70:         expected = np.array([0.11197053, 0.44361564, -0.92589452])
   71:         tm.assert_numpy_array_equal(result, expected)
   72: 
   73:         result = np.ravel(
   74:             [
   75:                 DataFrame(batch.reshape(1, 3), columns=["x1", "x2", "x3"])
   76:                 for batch in arr
   77:             ]
   78:         )
   79:         expected = np.array(
   80:             [
   81:                 0.11197053,
   82:                 0.44361564,
   83:                 -0.92589452,
   84:                 0.05883648,
   85:                 -0.00948922,
   86:                 -0.26469934,
   87:             ]
   88:         )
   89:         tm.assert_numpy_array_equal(result, expected)
