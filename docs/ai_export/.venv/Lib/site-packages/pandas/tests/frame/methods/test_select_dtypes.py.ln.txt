    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.dtypes import ExtensionDtype
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     DataFrame,
    9:     Timestamp,
   10: )
   11: import pandas._testing as tm
   12: from pandas.core.arrays import ExtensionArray
   13: 
   14: 
   15: class DummyDtype(ExtensionDtype):
   16:     type = int
   17: 
   18:     def __init__(self, numeric) -> None:
   19:         self._numeric = numeric
   20: 
   21:     @property
   22:     def name(self):
   23:         return "Dummy"
   24: 
   25:     @property
   26:     def _is_numeric(self):
   27:         return self._numeric
   28: 
   29: 
   30: class DummyArray(ExtensionArray):
   31:     def __init__(self, data, dtype) -> None:
   32:         self.data = data
   33:         self._dtype = dtype
   34: 
   35:     def __array__(self, dtype=None, copy=None):
   36:         return self.data
   37: 
   38:     @property
   39:     def dtype(self):
   40:         return self._dtype
   41: 
   42:     def __len__(self) -> int:
   43:         return len(self.data)
   44: 
   45:     def __getitem__(self, item):
   46:         pass
   47: 
   48:     def copy(self):
   49:         return self
   50: 
   51: 
   52: class TestSelectDtypes:
   53:     def test_select_dtypes_include_using_list_like(self):
   54:         df = DataFrame(
   55:             {
   56:                 "a": list("abc"),
   57:                 "b": list(range(1, 4)),
   58:                 "c": np.arange(3, 6).astype("u1"),
   59:                 "d": np.arange(4.0, 7.0, dtype="float64"),
   60:                 "e": [True, False, True],
   61:                 "f": pd.Categorical(list("abc")),
   62:                 "g": pd.date_range("20130101", periods=3),
   63:                 "h": pd.date_range("20130101", periods=3, tz="US/Eastern"),
   64:                 "i": pd.date_range("20130101", periods=3, tz="CET"),
   65:                 "j": pd.period_range("2013-01", periods=3, freq="M"),
   66:                 "k": pd.timedelta_range("1 day", periods=3),
   67:             }
   68:         )
   69: 
   70:         ri = df.select_dtypes(include=[np.number])
   71:         ei = df[["b", "c", "d", "k"]]
   72:         tm.assert_frame_equal(ri, ei)
   73: 
   74:         ri = df.select_dtypes(include=[np.number], exclude=["timedelta"])
   75:         ei = df[["b", "c", "d"]]
   76:         tm.assert_frame_equal(ri, ei)
   77: 
   78:         ri = df.select_dtypes(include=[np.number, "category"], exclude=["timedelta"])
   79:         ei = df[["b", "c", "d", "f"]]
   80:         tm.assert_frame_equal(ri, ei)
   81: 
   82:         ri = df.select_dtypes(include=["datetime"])
   83:         ei = df[["g"]]
   84:         tm.assert_frame_equal(ri, ei)
   85: 
   86:         ri = df.select_dtypes(include=["datetime64"])
   87:         ei = df[["g"]]
   88:         tm.assert_frame_equal(ri, ei)
   89: 
   90:         ri = df.select_dtypes(include=["datetimetz"])
   91:         ei = df[["h", "i"]]
   92:         tm.assert_frame_equal(ri, ei)
   93: 
   94:         with pytest.raises(NotImplementedError, match=r"^$"):
   95:             df.select_dtypes(include=["period"])
   96: 
   97:     def test_select_dtypes_exclude_using_list_like(self):
   98:         df = DataFrame(
   99:             {
  100:                 "a": list("abc"),
  101:                 "b": list(range(1, 4)),
  102:                 "c": np.arange(3, 6).astype("u1"),
  103:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  104:                 "e": [True, False, True],
  105:             }
  106:         )
  107:         re = df.select_dtypes(exclude=[np.number])
  108:         ee = df[["a", "e"]]
  109:         tm.assert_frame_equal(re, ee)
  110: 
  111:     def test_select_dtypes_exclude_include_using_list_like(self):
  112:         df = DataFrame(
  113:             {
  114:                 "a": list("abc"),
  115:                 "b": list(range(1, 4)),
  116:                 "c": np.arange(3, 6, dtype="u1"),
  117:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  118:                 "e": [True, False, True],
  119:                 "f": pd.date_range("now", periods=3).values,
  120:             }
  121:         )
  122:         exclude = (np.datetime64,)
  123:         include = np.bool_, "integer"
  124:         r = df.select_dtypes(include=include, exclude=exclude)
  125:         e = df[["b", "c", "e"]]
  126:         tm.assert_frame_equal(r, e)
  127: 
  128:         exclude = ("datetime",)
  129:         include = "bool", "int64", "int32"
  130:         r = df.select_dtypes(include=include, exclude=exclude)
  131:         e = df[["b", "e"]]
  132:         tm.assert_frame_equal(r, e)
  133: 
  134:     @pytest.mark.parametrize(
  135:         "include", [(np.bool_, "int"), (np.bool_, "integer"), ("bool", int)]
  136:     )
  137:     def test_select_dtypes_exclude_include_int(self, include):
  138:         # Fix select_dtypes(include='int') for Windows, FYI #36596
  139:         df = DataFrame(
  140:             {
  141:                 "a": list("abc"),
  142:                 "b": list(range(1, 4)),
  143:                 "c": np.arange(3, 6, dtype="int32"),
  144:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  145:                 "e": [True, False, True],
  146:                 "f": pd.date_range("now", periods=3).values,
  147:             }
  148:         )
  149:         exclude = (np.datetime64,)
  150:         result = df.select_dtypes(include=include, exclude=exclude)
  151:         expected = df[["b", "c", "e"]]
  152:         tm.assert_frame_equal(result, expected)
  153: 
  154:     def test_select_dtypes_include_using_scalars(self):
  155:         df = DataFrame(
  156:             {
  157:                 "a": list("abc"),
  158:                 "b": list(range(1, 4)),
  159:                 "c": np.arange(3, 6).astype("u1"),
  160:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  161:                 "e": [True, False, True],
  162:                 "f": pd.Categorical(list("abc")),
  163:                 "g": pd.date_range("20130101", periods=3),
  164:                 "h": pd.date_range("20130101", periods=3, tz="US/Eastern"),
  165:                 "i": pd.date_range("20130101", periods=3, tz="CET"),
  166:                 "j": pd.period_range("2013-01", periods=3, freq="M"),
  167:                 "k": pd.timedelta_range("1 day", periods=3),
  168:             }
  169:         )
  170: 
  171:         ri = df.select_dtypes(include=np.number)
  172:         ei = df[["b", "c", "d", "k"]]
  173:         tm.assert_frame_equal(ri, ei)
  174: 
  175:         ri = df.select_dtypes(include="datetime")
  176:         ei = df[["g"]]
  177:         tm.assert_frame_equal(ri, ei)
  178: 
  179:         ri = df.select_dtypes(include="datetime64")
  180:         ei = df[["g"]]
  181:         tm.assert_frame_equal(ri, ei)
  182: 
  183:         ri = df.select_dtypes(include="category")
  184:         ei = df[["f"]]
  185:         tm.assert_frame_equal(ri, ei)
  186: 
  187:         with pytest.raises(NotImplementedError, match=r"^$"):
  188:             df.select_dtypes(include="period")
  189: 
  190:     def test_select_dtypes_exclude_using_scalars(self):
  191:         df = DataFrame(
  192:             {
  193:                 "a": list("abc"),
  194:                 "b": list(range(1, 4)),
  195:                 "c": np.arange(3, 6).astype("u1"),
  196:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  197:                 "e": [True, False, True],
  198:                 "f": pd.Categorical(list("abc")),
  199:                 "g": pd.date_range("20130101", periods=3),
  200:                 "h": pd.date_range("20130101", periods=3, tz="US/Eastern"),
  201:                 "i": pd.date_range("20130101", periods=3, tz="CET"),
  202:                 "j": pd.period_range("2013-01", periods=3, freq="M"),
  203:                 "k": pd.timedelta_range("1 day", periods=3),
  204:             }
  205:         )
  206: 
  207:         ri = df.select_dtypes(exclude=np.number)
  208:         ei = df[["a", "e", "f", "g", "h", "i", "j"]]
  209:         tm.assert_frame_equal(ri, ei)
  210: 
  211:         ri = df.select_dtypes(exclude="category")
  212:         ei = df[["a", "b", "c", "d", "e", "g", "h", "i", "j", "k"]]
  213:         tm.assert_frame_equal(ri, ei)
  214: 
  215:         with pytest.raises(NotImplementedError, match=r"^$"):
  216:             df.select_dtypes(exclude="period")
  217: 
  218:     def test_select_dtypes_include_exclude_using_scalars(self):
  219:         df = DataFrame(
  220:             {
  221:                 "a": list("abc"),
  222:                 "b": list(range(1, 4)),
  223:                 "c": np.arange(3, 6).astype("u1"),
  224:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  225:                 "e": [True, False, True],
  226:                 "f": pd.Categorical(list("abc")),
  227:                 "g": pd.date_range("20130101", periods=3),
  228:                 "h": pd.date_range("20130101", periods=3, tz="US/Eastern"),
  229:                 "i": pd.date_range("20130101", periods=3, tz="CET"),
  230:                 "j": pd.period_range("2013-01", periods=3, freq="M"),
  231:                 "k": pd.timedelta_range("1 day", periods=3),
  232:             }
  233:         )
  234: 
  235:         ri = df.select_dtypes(include=np.number, exclude="floating")
  236:         ei = df[["b", "c", "k"]]
  237:         tm.assert_frame_equal(ri, ei)
  238: 
  239:     def test_select_dtypes_include_exclude_mixed_scalars_lists(self):
  240:         df = DataFrame(
  241:             {
  242:                 "a": list("abc"),
  243:                 "b": list(range(1, 4)),
  244:                 "c": np.arange(3, 6).astype("u1"),
  245:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  246:                 "e": [True, False, True],
  247:                 "f": pd.Categorical(list("abc")),
  248:                 "g": pd.date_range("20130101", periods=3),
  249:                 "h": pd.date_range("20130101", periods=3, tz="US/Eastern"),
  250:                 "i": pd.date_range("20130101", periods=3, tz="CET"),
  251:                 "j": pd.period_range("2013-01", periods=3, freq="M"),
  252:                 "k": pd.timedelta_range("1 day", periods=3),
  253:             }
  254:         )
  255: 
  256:         ri = df.select_dtypes(include=np.number, exclude=["floating", "timedelta"])
  257:         ei = df[["b", "c"]]
  258:         tm.assert_frame_equal(ri, ei)
  259: 
  260:         ri = df.select_dtypes(include=[np.number, "category"], exclude="floating")
  261:         ei = df[["b", "c", "f", "k"]]
  262:         tm.assert_frame_equal(ri, ei)
  263: 
  264:     def test_select_dtypes_duplicate_columns(self):
  265:         # GH20839
  266:         df = DataFrame(
  267:             {
  268:                 "a": ["a", "b", "c"],
  269:                 "b": [1, 2, 3],
  270:                 "c": np.arange(3, 6).astype("u1"),
  271:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  272:                 "e": [True, False, True],
  273:                 "f": pd.date_range("now", periods=3).values,
  274:             }
  275:         )
  276:         df.columns = ["a", "a", "b", "b", "b", "c"]
  277: 
  278:         expected = DataFrame(
  279:             {"a": list(range(1, 4)), "b": np.arange(3, 6).astype("u1")}
  280:         )
  281: 
  282:         result = df.select_dtypes(include=[np.number], exclude=["floating"])
  283:         tm.assert_frame_equal(result, expected)
  284: 
  285:     def test_select_dtypes_not_an_attr_but_still_valid_dtype(self, using_infer_string):
  286:         df = DataFrame(
  287:             {
  288:                 "a": list("abc"),
  289:                 "b": list(range(1, 4)),
  290:                 "c": np.arange(3, 6).astype("u1"),
  291:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  292:                 "e": [True, False, True],
  293:                 "f": pd.date_range("now", periods=3).values,
  294:             }
  295:         )
  296:         df["g"] = df.f.diff()
  297:         assert not hasattr(np, "u8")
  298:         r = df.select_dtypes(include=["i8", "O"], exclude=["timedelta"])
  299:         if using_infer_string:
  300:             e = df[["b"]]
  301:         else:
  302:             e = df[["a", "b"]]
  303:         tm.assert_frame_equal(r, e)
  304: 
  305:         r = df.select_dtypes(include=["i8", "O", "timedelta64[ns]"])
  306:         if using_infer_string:
  307:             e = df[["b", "g"]]
  308:         else:
  309:             e = df[["a", "b", "g"]]
  310:         tm.assert_frame_equal(r, e)
  311: 
  312:     def test_select_dtypes_empty(self):
  313:         df = DataFrame({"a": list("abc"), "b": list(range(1, 4))})
  314:         msg = "at least one of include or exclude must be nonempty"
  315:         with pytest.raises(ValueError, match=msg):
  316:             df.select_dtypes()
  317: 
  318:     def test_select_dtypes_bad_datetime64(self):
  319:         df = DataFrame(
  320:             {
  321:                 "a": list("abc"),
  322:                 "b": list(range(1, 4)),
  323:                 "c": np.arange(3, 6).astype("u1"),
  324:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  325:                 "e": [True, False, True],
  326:                 "f": pd.date_range("now", periods=3).values,
  327:             }
  328:         )
  329:         with pytest.raises(ValueError, match=".+ is too specific"):
  330:             df.select_dtypes(include=["datetime64[D]"])
  331: 
  332:         with pytest.raises(ValueError, match=".+ is too specific"):
  333:             df.select_dtypes(exclude=["datetime64[as]"])
  334: 
  335:     def test_select_dtypes_datetime_with_tz(self):
  336:         df2 = DataFrame(
  337:             {
  338:                 "A": Timestamp("20130102", tz="US/Eastern"),
  339:                 "B": Timestamp("20130603", tz="CET"),
  340:             },
  341:             index=range(5),
  342:         )
  343:         df3 = pd.concat([df2.A.to_frame(), df2.B.to_frame()], axis=1)
  344:         result = df3.select_dtypes(include=["datetime64[ns]"])
  345:         expected = df3.reindex(columns=[])
  346:         tm.assert_frame_equal(result, expected)
  347: 
  348:     @pytest.mark.parametrize("dtype", [str, "str", np.bytes_, "S1", np.str_, "U1"])
  349:     @pytest.mark.parametrize("arg", ["include", "exclude"])
  350:     def test_select_dtypes_str_raises(self, dtype, arg):
  351:         df = DataFrame(
  352:             {
  353:                 "a": list("abc"),
  354:                 "g": list("abc"),
  355:                 "b": list(range(1, 4)),
  356:                 "c": np.arange(3, 6).astype("u1"),
  357:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  358:                 "e": [True, False, True],
  359:                 "f": pd.date_range("now", periods=3).values,
  360:             }
  361:         )
  362:         msg = "string dtypes are not allowed"
  363:         kwargs = {arg: [dtype]}
  364: 
  365:         with pytest.raises(TypeError, match=msg):
  366:             df.select_dtypes(**kwargs)
  367: 
  368:     def test_select_dtypes_bad_arg_raises(self):
  369:         df = DataFrame(
  370:             {
  371:                 "a": list("abc"),
  372:                 "g": list("abc"),
  373:                 "b": list(range(1, 4)),
  374:                 "c": np.arange(3, 6).astype("u1"),
  375:                 "d": np.arange(4.0, 7.0, dtype="float64"),
  376:                 "e": [True, False, True],
  377:                 "f": pd.date_range("now", periods=3).values,
  378:             }
  379:         )
  380: 
  381:         msg = "data type.*not understood"
  382:         with pytest.raises(TypeError, match=msg):
  383:             df.select_dtypes(["blargy, blarg, blarg"])
  384: 
  385:     def test_select_dtypes_typecodes(self):
  386:         # GH 11990
  387:         df = DataFrame(np.random.default_rng(2).random((5, 3)))
  388:         FLOAT_TYPES = list(np.typecodes["AllFloat"])
  389:         tm.assert_frame_equal(df.select_dtypes(FLOAT_TYPES), df)
  390: 
  391:     @pytest.mark.parametrize(
  392:         "arr,expected",
  393:         (
  394:             (np.array([1, 2], dtype=np.int32), True),
  395:             (pd.array([1, 2], dtype="Int32"), True),
  396:             (DummyArray([1, 2], dtype=DummyDtype(numeric=True)), True),
  397:             (DummyArray([1, 2], dtype=DummyDtype(numeric=False)), False),
  398:         ),
  399:     )
  400:     def test_select_dtypes_numeric(self, arr, expected):
  401:         # GH 35340
  402: 
  403:         df = DataFrame(arr)
  404:         is_selected = df.select_dtypes(np.number).shape == df.shape
  405:         assert is_selected == expected
  406: 
  407:     def test_select_dtypes_numeric_nullable_string(self, nullable_string_dtype):
  408:         arr = pd.array(["a", "b"], dtype=nullable_string_dtype)
  409:         df = DataFrame(arr)
  410:         is_selected = df.select_dtypes(np.number).shape == df.shape
  411:         assert not is_selected
  412: 
  413:     @pytest.mark.parametrize(
  414:         "expected, float_dtypes",
  415:         [
  416:             [
  417:                 DataFrame(
  418:                     {"A": range(3), "B": range(5, 8), "C": range(10, 7, -1)}
  419:                 ).astype(dtype={"A": float, "B": np.float64, "C": np.float32}),
  420:                 float,
  421:             ],
  422:             [
  423:                 DataFrame(
  424:                     {"A": range(3), "B": range(5, 8), "C": range(10, 7, -1)}
  425:                 ).astype(dtype={"A": float, "B": np.float64, "C": np.float32}),
  426:                 "float",
  427:             ],
  428:             [DataFrame({"C": range(10, 7, -1)}, dtype=np.float32), np.float32],
  429:             [
  430:                 DataFrame({"A": range(3), "B": range(5, 8)}).astype(
  431:                     dtype={"A": float, "B": np.float64}
  432:                 ),
  433:                 np.float64,
  434:             ],
  435:         ],
  436:     )
  437:     def test_select_dtypes_float_dtype(self, expected, float_dtypes):
  438:         # GH#42452
  439:         dtype_dict = {"A": float, "B": np.float64, "C": np.float32}
  440:         df = DataFrame(
  441:             {"A": range(3), "B": range(5, 8), "C": range(10, 7, -1)},
  442:         )
  443:         df = df.astype(dtype_dict)
  444:         result = df.select_dtypes(include=float_dtypes)
  445:         tm.assert_frame_equal(result, expected)
  446: 
  447:     def test_np_bool_ea_boolean_include_number(self):
  448:         # GH 46870
  449:         df = DataFrame(
  450:             {
  451:                 "a": [1, 2, 3],
  452:                 "b": pd.Series([True, False, True], dtype="boolean"),
  453:                 "c": np.array([True, False, True]),
  454:                 "d": pd.Categorical([True, False, True]),
  455:                 "e": pd.arrays.SparseArray([True, False, True]),
  456:             }
  457:         )
  458:         result = df.select_dtypes(include="number")
  459:         expected = DataFrame({"a": [1, 2, 3]})
  460:         tm.assert_frame_equal(result, expected)
  461: 
  462:     def test_select_dtypes_no_view(self):
  463:         # https://github.com/pandas-dev/pandas/issues/48090
  464:         # result of this method is not a view on the original dataframe
  465:         df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
  466:         df_orig = df.copy()
  467:         result = df.select_dtypes(include=["number"])
  468:         result.iloc[0, 0] = 0
  469:         tm.assert_frame_equal(df, df_orig)
