    1: """
    2: Tests for DataFrame.mask; tests DataFrame.where as a side-effect.
    3: """
    4: 
    5: import numpy as np
    6: 
    7: from pandas import (
    8:     NA,
    9:     DataFrame,
   10:     Float64Dtype,
   11:     Series,
   12:     StringDtype,
   13:     Timedelta,
   14:     isna,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: class TestDataFrameMask:
   20:     def test_mask(self):
   21:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))
   22:         cond = df > 0
   23: 
   24:         rs = df.where(cond, np.nan)
   25:         tm.assert_frame_equal(rs, df.mask(df <= 0))
   26:         tm.assert_frame_equal(rs, df.mask(~cond))
   27: 
   28:         other = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))
   29:         rs = df.where(cond, other)
   30:         tm.assert_frame_equal(rs, df.mask(df <= 0, other))
   31:         tm.assert_frame_equal(rs, df.mask(~cond, other))
   32: 
   33:     def test_mask2(self):
   34:         # see GH#21891
   35:         df = DataFrame([1, 2])
   36:         res = df.mask([[True], [False]])
   37: 
   38:         exp = DataFrame([np.nan, 2])
   39:         tm.assert_frame_equal(res, exp)
   40: 
   41:     def test_mask_inplace(self):
   42:         # GH#8801
   43:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))
   44:         cond = df > 0
   45: 
   46:         rdf = df.copy()
   47: 
   48:         return_value = rdf.where(cond, inplace=True)
   49:         assert return_value is None
   50:         tm.assert_frame_equal(rdf, df.where(cond))
   51:         tm.assert_frame_equal(rdf, df.mask(~cond))
   52: 
   53:         rdf = df.copy()
   54:         return_value = rdf.where(cond, -df, inplace=True)
   55:         assert return_value is None
   56:         tm.assert_frame_equal(rdf, df.where(cond, -df))
   57:         tm.assert_frame_equal(rdf, df.mask(~cond, -df))
   58: 
   59:     def test_mask_edge_case_1xN_frame(self):
   60:         # GH#4071
   61:         df = DataFrame([[1, 2]])
   62:         res = df.mask(DataFrame([[True, False]]))
   63:         expec = DataFrame([[np.nan, 2]])
   64:         tm.assert_frame_equal(res, expec)
   65: 
   66:     def test_mask_callable(self):
   67:         # GH#12533
   68:         df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
   69:         result = df.mask(lambda x: x > 4, lambda x: x + 1)
   70:         exp = DataFrame([[1, 2, 3], [4, 6, 7], [8, 9, 10]])
   71:         tm.assert_frame_equal(result, exp)
   72:         tm.assert_frame_equal(result, df.mask(df > 4, df + 1))
   73: 
   74:         # return ndarray and scalar
   75:         result = df.mask(lambda x: (x % 2 == 0).values, lambda x: 99)
   76:         exp = DataFrame([[1, 99, 3], [99, 5, 99], [7, 99, 9]])
   77:         tm.assert_frame_equal(result, exp)
   78:         tm.assert_frame_equal(result, df.mask(df % 2 == 0, 99))
   79: 
   80:         # chain
   81:         result = (df + 2).mask(lambda x: x > 8, lambda x: x + 10)
   82:         exp = DataFrame([[3, 4, 5], [6, 7, 8], [19, 20, 21]])
   83:         tm.assert_frame_equal(result, exp)
   84:         tm.assert_frame_equal(result, (df + 2).mask((df + 2) > 8, (df + 2) + 10))
   85: 
   86:     def test_mask_dtype_bool_conversion(self):
   87:         # GH#3733
   88:         df = DataFrame(data=np.random.default_rng(2).standard_normal((100, 50)))
   89:         df = df.where(df > 0)  # create nans
   90:         bools = df > 0
   91:         mask = isna(df)
   92:         expected = bools.astype(object).mask(mask)
   93:         result = bools.mask(mask)
   94:         tm.assert_frame_equal(result, expected)
   95: 
   96: 
   97: def test_mask_stringdtype(frame_or_series):
   98:     # GH 40824
   99:     obj = DataFrame(
  100:         {"A": ["foo", "bar", "baz", NA]},
  101:         index=["id1", "id2", "id3", "id4"],
  102:         dtype=StringDtype(),
  103:     )
  104:     filtered_obj = DataFrame(
  105:         {"A": ["this", "that"]}, index=["id2", "id3"], dtype=StringDtype()
  106:     )
  107:     expected = DataFrame(
  108:         {"A": [NA, "this", "that", NA]},
  109:         index=["id1", "id2", "id3", "id4"],
  110:         dtype=StringDtype(),
  111:     )
  112:     if frame_or_series is Series:
  113:         obj = obj["A"]
  114:         filtered_obj = filtered_obj["A"]
  115:         expected = expected["A"]
  116: 
  117:     filter_ser = Series([False, True, True, False])
  118:     result = obj.mask(filter_ser, filtered_obj)
  119: 
  120:     tm.assert_equal(result, expected)
  121: 
  122: 
  123: def test_mask_where_dtype_timedelta():
  124:     # https://github.com/pandas-dev/pandas/issues/39548
  125:     df = DataFrame([Timedelta(i, unit="d") for i in range(5)])
  126: 
  127:     expected = DataFrame(np.full(5, np.nan, dtype="timedelta64[ns]"))
  128:     tm.assert_frame_equal(df.mask(df.notna()), expected)
  129: 
  130:     expected = DataFrame(
  131:         [np.nan, np.nan, np.nan, Timedelta("3 day"), Timedelta("4 day")]
  132:     )
  133:     tm.assert_frame_equal(df.where(df > Timedelta(2, unit="d")), expected)
  134: 
  135: 
  136: def test_mask_return_dtype():
  137:     # GH#50488
  138:     ser = Series([0.0, 1.0, 2.0, 3.0], dtype=Float64Dtype())
  139:     cond = ~ser.isna()
  140:     other = Series([True, False, True, False])
  141:     excepted = Series([1.0, 0.0, 1.0, 0.0], dtype=ser.dtype)
  142:     result = ser.mask(cond, other)
  143:     tm.assert_series_equal(result, excepted)
  144: 
  145: 
  146: def test_mask_inplace_no_other():
  147:     # GH#51685
  148:     df = DataFrame({"a": [1.0, 2.0], "b": ["x", "y"]})
  149:     cond = DataFrame({"a": [True, False], "b": [False, True]})
  150:     df.mask(cond, inplace=True)
  151:     expected = DataFrame({"a": [np.nan, 2], "b": ["x", np.nan]})
  152:     tm.assert_frame_equal(df, expected)
