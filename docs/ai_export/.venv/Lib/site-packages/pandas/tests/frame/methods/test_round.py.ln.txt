    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Series,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestDataFrameRound:
   14:     def test_round(self):
   15:         # GH#2665
   16: 
   17:         # Test that rounding an empty DataFrame does nothing
   18:         df = DataFrame()
   19:         tm.assert_frame_equal(df, df.round())
   20: 
   21:         # Here's the test frame we'll be working with
   22:         df = DataFrame({"col1": [1.123, 2.123, 3.123], "col2": [1.234, 2.234, 3.234]})
   23: 
   24:         # Default round to integer (i.e. decimals=0)
   25:         expected_rounded = DataFrame({"col1": [1.0, 2.0, 3.0], "col2": [1.0, 2.0, 3.0]})
   26:         tm.assert_frame_equal(df.round(), expected_rounded)
   27: 
   28:         # Round with an integer
   29:         decimals = 2
   30:         expected_rounded = DataFrame(
   31:             {"col1": [1.12, 2.12, 3.12], "col2": [1.23, 2.23, 3.23]}
   32:         )
   33:         tm.assert_frame_equal(df.round(decimals), expected_rounded)
   34: 
   35:         # This should also work with np.round (since np.round dispatches to
   36:         # df.round)
   37:         tm.assert_frame_equal(np.round(df, decimals), expected_rounded)
   38: 
   39:         # Round with a list
   40:         round_list = [1, 2]
   41:         msg = "decimals must be an integer, a dict-like or a Series"
   42:         with pytest.raises(TypeError, match=msg):
   43:             df.round(round_list)
   44: 
   45:         # Round with a dictionary
   46:         expected_rounded = DataFrame(
   47:             {"col1": [1.1, 2.1, 3.1], "col2": [1.23, 2.23, 3.23]}
   48:         )
   49:         round_dict = {"col1": 1, "col2": 2}
   50:         tm.assert_frame_equal(df.round(round_dict), expected_rounded)
   51: 
   52:         # Incomplete dict
   53:         expected_partially_rounded = DataFrame(
   54:             {"col1": [1.123, 2.123, 3.123], "col2": [1.2, 2.2, 3.2]}
   55:         )
   56:         partial_round_dict = {"col2": 1}
   57:         tm.assert_frame_equal(df.round(partial_round_dict), expected_partially_rounded)
   58: 
   59:         # Dict with unknown elements
   60:         wrong_round_dict = {"col3": 2, "col2": 1}
   61:         tm.assert_frame_equal(df.round(wrong_round_dict), expected_partially_rounded)
   62: 
   63:         # float input to `decimals`
   64:         non_int_round_dict = {"col1": 1, "col2": 0.5}
   65:         msg = "Values in decimals must be integers"
   66:         with pytest.raises(TypeError, match=msg):
   67:             df.round(non_int_round_dict)
   68: 
   69:         # String input
   70:         non_int_round_dict = {"col1": 1, "col2": "foo"}
   71:         with pytest.raises(TypeError, match=msg):
   72:             df.round(non_int_round_dict)
   73: 
   74:         non_int_round_Series = Series(non_int_round_dict)
   75:         with pytest.raises(TypeError, match=msg):
   76:             df.round(non_int_round_Series)
   77: 
   78:         # List input
   79:         non_int_round_dict = {"col1": 1, "col2": [1, 2]}
   80:         with pytest.raises(TypeError, match=msg):
   81:             df.round(non_int_round_dict)
   82: 
   83:         non_int_round_Series = Series(non_int_round_dict)
   84:         with pytest.raises(TypeError, match=msg):
   85:             df.round(non_int_round_Series)
   86: 
   87:         # Non integer Series inputs
   88:         non_int_round_Series = Series(non_int_round_dict)
   89:         with pytest.raises(TypeError, match=msg):
   90:             df.round(non_int_round_Series)
   91: 
   92:         non_int_round_Series = Series(non_int_round_dict)
   93:         with pytest.raises(TypeError, match=msg):
   94:             df.round(non_int_round_Series)
   95: 
   96:         # Negative numbers
   97:         negative_round_dict = {"col1": -1, "col2": -2}
   98:         big_df = df * 100
   99:         expected_neg_rounded = DataFrame(
  100:             {"col1": [110.0, 210, 310], "col2": [100.0, 200, 300]}
  101:         )
  102:         tm.assert_frame_equal(big_df.round(negative_round_dict), expected_neg_rounded)
  103: 
  104:         # nan in Series round
  105:         nan_round_Series = Series({"col1": np.nan, "col2": 1})
  106: 
  107:         with pytest.raises(TypeError, match=msg):
  108:             df.round(nan_round_Series)
  109: 
  110:         # Make sure this doesn't break existing Series.round
  111:         tm.assert_series_equal(df["col1"].round(1), expected_rounded["col1"])
  112: 
  113:         # named columns
  114:         # GH#11986
  115:         decimals = 2
  116:         expected_rounded = DataFrame(
  117:             {"col1": [1.12, 2.12, 3.12], "col2": [1.23, 2.23, 3.23]}
  118:         )
  119:         df.columns.name = "cols"
  120:         expected_rounded.columns.name = "cols"
  121:         tm.assert_frame_equal(df.round(decimals), expected_rounded)
  122: 
  123:         # interaction of named columns & series
  124:         tm.assert_series_equal(df["col1"].round(decimals), expected_rounded["col1"])
  125:         tm.assert_series_equal(df.round(decimals)["col1"], expected_rounded["col1"])
  126: 
  127:     def test_round_numpy(self):
  128:         # GH#12600
  129:         df = DataFrame([[1.53, 1.36], [0.06, 7.01]])
  130:         out = np.round(df, decimals=0)
  131:         expected = DataFrame([[2.0, 1.0], [0.0, 7.0]])
  132:         tm.assert_frame_equal(out, expected)
  133: 
  134:         msg = "the 'out' parameter is not supported"
  135:         with pytest.raises(ValueError, match=msg):
  136:             np.round(df, decimals=0, out=df)
  137: 
  138:     def test_round_numpy_with_nan(self):
  139:         # See GH#14197
  140:         df = Series([1.53, np.nan, 0.06]).to_frame()
  141:         with tm.assert_produces_warning(None):
  142:             result = df.round()
  143:         expected = Series([2.0, np.nan, 0.0]).to_frame()
  144:         tm.assert_frame_equal(result, expected)
  145: 
  146:     def test_round_mixed_type(self):
  147:         # GH#11885
  148:         df = DataFrame(
  149:             {
  150:                 "col1": [1.1, 2.2, 3.3, 4.4],
  151:                 "col2": ["1", "a", "c", "f"],
  152:                 "col3": date_range("20111111", periods=4),
  153:             }
  154:         )
  155:         round_0 = DataFrame(
  156:             {
  157:                 "col1": [1.0, 2.0, 3.0, 4.0],
  158:                 "col2": ["1", "a", "c", "f"],
  159:                 "col3": date_range("20111111", periods=4),
  160:             }
  161:         )
  162:         tm.assert_frame_equal(df.round(), round_0)
  163:         tm.assert_frame_equal(df.round(1), df)
  164:         tm.assert_frame_equal(df.round({"col1": 1}), df)
  165:         tm.assert_frame_equal(df.round({"col1": 0}), round_0)
  166:         tm.assert_frame_equal(df.round({"col1": 0, "col2": 1}), round_0)
  167:         tm.assert_frame_equal(df.round({"col3": 1}), df)
  168: 
  169:     def test_round_with_duplicate_columns(self):
  170:         # GH#11611
  171: 
  172:         df = DataFrame(
  173:             np.random.default_rng(2).random([3, 3]),
  174:             columns=["A", "B", "C"],
  175:             index=["first", "second", "third"],
  176:         )
  177: 
  178:         dfs = pd.concat((df, df), axis=1)
  179:         rounded = dfs.round()
  180:         tm.assert_index_equal(rounded.index, dfs.index)
  181: 
  182:         decimals = Series([1, 0, 2], index=["A", "B", "A"])
  183:         msg = "Index of decimals must be unique"
  184:         with pytest.raises(ValueError, match=msg):
  185:             df.round(decimals)
  186: 
  187:     def test_round_builtin(self):
  188:         # GH#11763
  189:         # Here's the test frame we'll be working with
  190:         df = DataFrame({"col1": [1.123, 2.123, 3.123], "col2": [1.234, 2.234, 3.234]})
  191: 
  192:         # Default round to integer (i.e. decimals=0)
  193:         expected_rounded = DataFrame({"col1": [1.0, 2.0, 3.0], "col2": [1.0, 2.0, 3.0]})
  194:         tm.assert_frame_equal(round(df), expected_rounded)
  195: 
  196:     def test_round_nonunique_categorical(self):
  197:         # See GH#21809
  198:         idx = pd.CategoricalIndex(["low"] * 3 + ["hi"] * 3)
  199:         df = DataFrame(np.random.default_rng(2).random((6, 3)), columns=list("abc"))
  200: 
  201:         expected = df.round(3)
  202:         expected.index = idx
  203: 
  204:         df_categorical = df.copy().set_index(idx)
  205:         assert df_categorical.shape == (6, 3)
  206:         result = df_categorical.round(3)
  207:         assert result.shape == (6, 3)
  208: 
  209:         tm.assert_frame_equal(result, expected)
  210: 
  211:     def test_round_interval_category_columns(self):
  212:         # GH#30063
  213:         columns = pd.CategoricalIndex(pd.interval_range(0, 2))
  214:         df = DataFrame([[0.66, 1.1], [0.3, 0.25]], columns=columns)
  215: 
  216:         result = df.round()
  217:         expected = DataFrame([[1.0, 1.0], [0.0, 0.0]], columns=columns)
  218:         tm.assert_frame_equal(result, expected)
  219: 
  220:     def test_round_empty_not_input(self):
  221:         # GH#51032
  222:         df = DataFrame()
  223:         result = df.round()
  224:         tm.assert_frame_equal(df, result)
  225:         assert df is not result
