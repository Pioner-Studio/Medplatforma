    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas import DataFrame
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestCopy:
   11:     @pytest.mark.parametrize("attr", ["index", "columns"])
   12:     def test_copy_index_name_checking(self, float_frame, attr):
   13:         # don't want to be able to modify the index stored elsewhere after
   14:         # making a copy
   15:         ind = getattr(float_frame, attr)
   16:         ind.name = None
   17:         cp = float_frame.copy()
   18:         getattr(cp, attr).name = "foo"
   19:         assert getattr(float_frame, attr).name is None
   20: 
   21:     @td.skip_copy_on_write_invalid_test
   22:     def test_copy_cache(self):
   23:         # GH#31784 _item_cache not cleared on copy causes incorrect reads after updates
   24:         df = DataFrame({"a": [1]})
   25: 
   26:         df["x"] = [0]
   27:         df["a"]
   28: 
   29:         df.copy()
   30: 
   31:         df["a"].values[0] = -1
   32: 
   33:         tm.assert_frame_equal(df, DataFrame({"a": [-1], "x": [0]}))
   34: 
   35:         df["y"] = [0]
   36: 
   37:         assert df["a"].values[0] == -1
   38:         tm.assert_frame_equal(df, DataFrame({"a": [-1], "x": [0], "y": [0]}))
   39: 
   40:     def test_copy(self, float_frame, float_string_frame):
   41:         cop = float_frame.copy()
   42:         cop["E"] = cop["A"]
   43:         assert "E" not in float_frame
   44: 
   45:         # copy objects
   46:         copy = float_string_frame.copy()
   47:         assert copy._mgr is not float_string_frame._mgr
   48: 
   49:     @td.skip_array_manager_invalid_test
   50:     def test_copy_consolidates(self):
   51:         # GH#42477
   52:         df = DataFrame(
   53:             {
   54:                 "a": np.random.default_rng(2).integers(0, 100, size=55),
   55:                 "b": np.random.default_rng(2).integers(0, 100, size=55),
   56:             }
   57:         )
   58: 
   59:         for i in range(10):
   60:             df.loc[:, f"n_{i}"] = np.random.default_rng(2).integers(0, 100, size=55)
   61: 
   62:         assert len(df._mgr.blocks) == 11
   63:         result = df.copy()
   64:         assert len(result._mgr.blocks) == 1
