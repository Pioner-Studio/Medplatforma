    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     DataFrame,
    9:     Series,
   10:     Timestamp,
   11:     date_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: from pandas.tseries.offsets import BDay
   16: 
   17: 
   18: def test_map(float_frame):
   19:     result = float_frame.map(lambda x: x * 2)
   20:     tm.assert_frame_equal(result, float_frame * 2)
   21:     float_frame.map(type)
   22: 
   23:     # GH 465: function returning tuples
   24:     result = float_frame.map(lambda x: (x, x))["A"].iloc[0]
   25:     assert isinstance(result, tuple)
   26: 
   27: 
   28: @pytest.mark.parametrize("val", [1, 1.0])
   29: def test_map_float_object_conversion(val):
   30:     # GH 2909: object conversion to float in constructor?
   31:     df = DataFrame(data=[val, "a"])
   32:     result = df.map(lambda x: x).dtypes[0]
   33:     assert result == object
   34: 
   35: 
   36: @pytest.mark.parametrize("na_action", [None, "ignore"])
   37: def test_map_keeps_dtype(na_action):
   38:     # GH52219
   39:     arr = Series(["a", np.nan, "b"])
   40:     sparse_arr = arr.astype(pd.SparseDtype(object))
   41:     df = DataFrame(data={"a": arr, "b": sparse_arr})
   42: 
   43:     def func(x):
   44:         return str.upper(x) if not pd.isna(x) else x
   45: 
   46:     result = df.map(func, na_action=na_action)
   47: 
   48:     expected_sparse = pd.array(["A", np.nan, "B"], dtype=pd.SparseDtype(object))
   49:     expected_arr = expected_sparse.astype(object)
   50:     expected = DataFrame({"a": expected_arr, "b": expected_sparse})
   51: 
   52:     tm.assert_frame_equal(result, expected)
   53: 
   54:     result_empty = df.iloc[:0, :].map(func, na_action=na_action)
   55:     expected_empty = expected.iloc[:0, :]
   56:     tm.assert_frame_equal(result_empty, expected_empty)
   57: 
   58: 
   59: def test_map_str():
   60:     # GH 2786
   61:     df = DataFrame(np.random.default_rng(2).random((3, 4)))
   62:     df2 = df.copy()
   63:     cols = ["a", "a", "a", "a"]
   64:     df.columns = cols
   65: 
   66:     expected = df2.map(str)
   67:     expected.columns = cols
   68:     result = df.map(str)
   69:     tm.assert_frame_equal(result, expected)
   70: 
   71: 
   72: @pytest.mark.parametrize(
   73:     "col, val",
   74:     [["datetime", Timestamp("20130101")], ["timedelta", pd.Timedelta("1 min")]],
   75: )
   76: def test_map_datetimelike(col, val):
   77:     # datetime/timedelta
   78:     df = DataFrame(np.random.default_rng(2).random((3, 4)))
   79:     df[col] = val
   80:     result = df.map(str)
   81:     assert result.loc[0, col] == str(df.loc[0, col])
   82: 
   83: 
   84: @pytest.mark.parametrize(
   85:     "expected",
   86:     [
   87:         DataFrame(),
   88:         DataFrame(columns=list("ABC")),
   89:         DataFrame(index=list("ABC")),
   90:         DataFrame({"A": [], "B": [], "C": []}),
   91:     ],
   92: )
   93: @pytest.mark.parametrize("func", [round, lambda x: x])
   94: def test_map_empty(expected, func):
   95:     # GH 8222
   96:     result = expected.map(func)
   97:     tm.assert_frame_equal(result, expected)
   98: 
   99: 
  100: def test_map_kwargs():
  101:     # GH 40652
  102:     result = DataFrame([[1, 2], [3, 4]]).map(lambda x, y: x + y, y=2)
  103:     expected = DataFrame([[3, 4], [5, 6]])
  104:     tm.assert_frame_equal(result, expected)
  105: 
  106: 
  107: def test_map_na_ignore(float_frame):
  108:     # GH 23803
  109:     strlen_frame = float_frame.map(lambda x: len(str(x)))
  110:     float_frame_with_na = float_frame.copy()
  111:     mask = np.random.default_rng(2).integers(0, 2, size=float_frame.shape, dtype=bool)
  112:     float_frame_with_na[mask] = pd.NA
  113:     strlen_frame_na_ignore = float_frame_with_na.map(
  114:         lambda x: len(str(x)), na_action="ignore"
  115:     )
  116:     # Set float64 type to avoid upcast when setting NA below
  117:     strlen_frame_with_na = strlen_frame.copy().astype("float64")
  118:     strlen_frame_with_na[mask] = pd.NA
  119:     tm.assert_frame_equal(strlen_frame_na_ignore, strlen_frame_with_na)
  120: 
  121: 
  122: def test_map_box_timestamps():
  123:     # GH 2689, GH 2627
  124:     ser = Series(date_range("1/1/2000", periods=10))
  125: 
  126:     def func(x):
  127:         return (x.hour, x.day, x.month)
  128: 
  129:     # it works!
  130:     DataFrame(ser).map(func)
  131: 
  132: 
  133: def test_map_box():
  134:     # ufunc will not be boxed. Same test cases as the test_map_box
  135:     df = DataFrame(
  136:         {
  137:             "a": [Timestamp("2011-01-01"), Timestamp("2011-01-02")],
  138:             "b": [
  139:                 Timestamp("2011-01-01", tz="US/Eastern"),
  140:                 Timestamp("2011-01-02", tz="US/Eastern"),
  141:             ],
  142:             "c": [pd.Timedelta("1 days"), pd.Timedelta("2 days")],
  143:             "d": [
  144:                 pd.Period("2011-01-01", freq="M"),
  145:                 pd.Period("2011-01-02", freq="M"),
  146:             ],
  147:         }
  148:     )
  149: 
  150:     result = df.map(lambda x: type(x).__name__)
  151:     expected = DataFrame(
  152:         {
  153:             "a": ["Timestamp", "Timestamp"],
  154:             "b": ["Timestamp", "Timestamp"],
  155:             "c": ["Timedelta", "Timedelta"],
  156:             "d": ["Period", "Period"],
  157:         }
  158:     )
  159:     tm.assert_frame_equal(result, expected)
  160: 
  161: 
  162: def test_frame_map_dont_convert_datetime64():
  163:     df = DataFrame({"x1": [datetime(1996, 1, 1)]})
  164: 
  165:     df = df.map(lambda x: x + BDay())
  166:     df = df.map(lambda x: x + BDay())
  167: 
  168:     result = df.x1.dtype
  169:     assert result == "M8[ns]"
  170: 
  171: 
  172: def test_map_function_runs_once():
  173:     df = DataFrame({"a": [1, 2, 3]})
  174:     values = []  # Save values function is applied to
  175: 
  176:     def reducing_function(val):
  177:         values.append(val)
  178: 
  179:     def non_reducing_function(val):
  180:         values.append(val)
  181:         return val
  182: 
  183:     for func in [reducing_function, non_reducing_function]:
  184:         del values[:]
  185: 
  186:         df.map(func)
  187:         assert values == df.a.to_list()
  188: 
  189: 
  190: def test_map_type():
  191:     # GH 46719
  192:     df = DataFrame(
  193:         {"col1": [3, "string", float], "col2": [0.25, datetime(2020, 1, 1), np.nan]},
  194:         index=["a", "b", "c"],
  195:     )
  196: 
  197:     result = df.map(type)
  198:     expected = DataFrame(
  199:         {"col1": [int, str, type], "col2": [float, datetime, float]},
  200:         index=["a", "b", "c"],
  201:     )
  202:     tm.assert_frame_equal(result, expected)
  203: 
  204: 
  205: def test_map_invalid_na_action(float_frame):
  206:     # GH 23803
  207:     with pytest.raises(ValueError, match="na_action must be .*Got 'abc'"):
  208:         float_frame.map(lambda x: len(str(x)), na_action="abc")
  209: 
  210: 
  211: def test_applymap_deprecated():
  212:     # GH52353
  213:     df = DataFrame({"a": [1, 2, 3]})
  214:     msg = "DataFrame.applymap has been deprecated. Use DataFrame.map instead."
  215:     with tm.assert_produces_warning(FutureWarning, match=msg):
  216:         df.applymap(lambda x: x)
