    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Series,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestDataFrameNonuniqueIndexes:
   14:     def test_setattr_columns_vs_construct_with_columns(self):
   15:         # assignment
   16:         # GH 3687
   17:         arr = np.random.default_rng(2).standard_normal((3, 2))
   18:         idx = list(range(2))
   19:         df = DataFrame(arr, columns=["A", "A"])
   20:         df.columns = idx
   21:         expected = DataFrame(arr, columns=idx)
   22:         tm.assert_frame_equal(df, expected)
   23: 
   24:     def test_setattr_columns_vs_construct_with_columns_datetimeindx(self):
   25:         idx = date_range("20130101", periods=4, freq="QE-NOV")
   26:         df = DataFrame(
   27:             [[1, 1, 1, 5], [1, 1, 2, 5], [2, 1, 3, 5]], columns=["a", "a", "a", "a"]
   28:         )
   29:         df.columns = idx
   30:         expected = DataFrame([[1, 1, 1, 5], [1, 1, 2, 5], [2, 1, 3, 5]], columns=idx)
   31:         tm.assert_frame_equal(df, expected)
   32: 
   33:     def test_insert_with_duplicate_columns(self):
   34:         # insert
   35:         df = DataFrame(
   36:             [[1, 1, 1, 5], [1, 1, 2, 5], [2, 1, 3, 5]],
   37:             columns=["foo", "bar", "foo", "hello"],
   38:         )
   39:         df["string"] = "bah"
   40:         expected = DataFrame(
   41:             [[1, 1, 1, 5, "bah"], [1, 1, 2, 5, "bah"], [2, 1, 3, 5, "bah"]],
   42:             columns=["foo", "bar", "foo", "hello", "string"],
   43:         )
   44:         tm.assert_frame_equal(df, expected)
   45:         with pytest.raises(ValueError, match="Length of value"):
   46:             df.insert(0, "AnotherColumn", range(len(df.index) - 1))
   47: 
   48:         # insert same dtype
   49:         df["foo2"] = 3
   50:         expected = DataFrame(
   51:             [[1, 1, 1, 5, "bah", 3], [1, 1, 2, 5, "bah", 3], [2, 1, 3, 5, "bah", 3]],
   52:             columns=["foo", "bar", "foo", "hello", "string", "foo2"],
   53:         )
   54:         tm.assert_frame_equal(df, expected)
   55: 
   56:         # set (non-dup)
   57:         df["foo2"] = 4
   58:         expected = DataFrame(
   59:             [[1, 1, 1, 5, "bah", 4], [1, 1, 2, 5, "bah", 4], [2, 1, 3, 5, "bah", 4]],
   60:             columns=["foo", "bar", "foo", "hello", "string", "foo2"],
   61:         )
   62:         tm.assert_frame_equal(df, expected)
   63:         df["foo2"] = 3
   64: 
   65:         # delete (non dup)
   66:         del df["bar"]
   67:         expected = DataFrame(
   68:             [[1, 1, 5, "bah", 3], [1, 2, 5, "bah", 3], [2, 3, 5, "bah", 3]],
   69:             columns=["foo", "foo", "hello", "string", "foo2"],
   70:         )
   71:         tm.assert_frame_equal(df, expected)
   72: 
   73:         # try to delete again (its not consolidated)
   74:         del df["hello"]
   75:         expected = DataFrame(
   76:             [[1, 1, "bah", 3], [1, 2, "bah", 3], [2, 3, "bah", 3]],
   77:             columns=["foo", "foo", "string", "foo2"],
   78:         )
   79:         tm.assert_frame_equal(df, expected)
   80: 
   81:         # consolidate
   82:         df = df._consolidate()
   83:         expected = DataFrame(
   84:             [[1, 1, "bah", 3], [1, 2, "bah", 3], [2, 3, "bah", 3]],
   85:             columns=["foo", "foo", "string", "foo2"],
   86:         )
   87:         tm.assert_frame_equal(df, expected)
   88: 
   89:         # insert
   90:         df.insert(2, "new_col", 5.0)
   91:         expected = DataFrame(
   92:             [[1, 1, 5.0, "bah", 3], [1, 2, 5.0, "bah", 3], [2, 3, 5.0, "bah", 3]],
   93:             columns=["foo", "foo", "new_col", "string", "foo2"],
   94:         )
   95:         tm.assert_frame_equal(df, expected)
   96: 
   97:         # insert a dup
   98:         with pytest.raises(ValueError, match="cannot insert"):
   99:             df.insert(2, "new_col", 4.0)
  100: 
  101:         df.insert(2, "new_col", 4.0, allow_duplicates=True)
  102:         expected = DataFrame(
  103:             [
  104:                 [1, 1, 4.0, 5.0, "bah", 3],
  105:                 [1, 2, 4.0, 5.0, "bah", 3],
  106:                 [2, 3, 4.0, 5.0, "bah", 3],
  107:             ],
  108:             columns=["foo", "foo", "new_col", "new_col", "string", "foo2"],
  109:         )
  110:         tm.assert_frame_equal(df, expected)
  111: 
  112:         # delete (dup)
  113:         del df["foo"]
  114:         expected = DataFrame(
  115:             [[4.0, 5.0, "bah", 3], [4.0, 5.0, "bah", 3], [4.0, 5.0, "bah", 3]],
  116:             columns=["new_col", "new_col", "string", "foo2"],
  117:         )
  118:         tm.assert_frame_equal(df, expected)
  119: 
  120:     def test_dup_across_dtypes(self):
  121:         # dup across dtypes
  122:         df = DataFrame(
  123:             [[1, 1, 1.0, 5], [1, 1, 2.0, 5], [2, 1, 3.0, 5]],
  124:             columns=["foo", "bar", "foo", "hello"],
  125:         )
  126: 
  127:         df["foo2"] = 7.0
  128:         expected = DataFrame(
  129:             [[1, 1, 1.0, 5, 7.0], [1, 1, 2.0, 5, 7.0], [2, 1, 3.0, 5, 7.0]],
  130:             columns=["foo", "bar", "foo", "hello", "foo2"],
  131:         )
  132:         tm.assert_frame_equal(df, expected)
  133: 
  134:         result = df["foo"]
  135:         expected = DataFrame([[1, 1.0], [1, 2.0], [2, 3.0]], columns=["foo", "foo"])
  136:         tm.assert_frame_equal(result, expected)
  137: 
  138:         # multiple replacements
  139:         df["foo"] = "string"
  140:         expected = DataFrame(
  141:             [
  142:                 ["string", 1, "string", 5, 7.0],
  143:                 ["string", 1, "string", 5, 7.0],
  144:                 ["string", 1, "string", 5, 7.0],
  145:             ],
  146:             columns=["foo", "bar", "foo", "hello", "foo2"],
  147:         )
  148:         tm.assert_frame_equal(df, expected)
  149: 
  150:         del df["foo"]
  151:         expected = DataFrame(
  152:             [[1, 5, 7.0], [1, 5, 7.0], [1, 5, 7.0]], columns=["bar", "hello", "foo2"]
  153:         )
  154:         tm.assert_frame_equal(df, expected)
  155: 
  156:     def test_column_dups_indexes(self):
  157:         # check column dups with index equal and not equal to df's index
  158:         df = DataFrame(
  159:             np.random.default_rng(2).standard_normal((5, 3)),
  160:             index=["a", "b", "c", "d", "e"],
  161:             columns=["A", "B", "A"],
  162:         )
  163:         for index in [df.index, pd.Index(list("edcba"))]:
  164:             this_df = df.copy()
  165:             expected_ser = Series(index.values, index=this_df.index)
  166:             expected_df = DataFrame(
  167:                 {"A": expected_ser, "B": this_df["B"]},
  168:                 columns=["A", "B", "A"],
  169:             )
  170:             this_df["A"] = index
  171:             tm.assert_frame_equal(this_df, expected_df)
  172: 
  173:     def test_changing_dtypes_with_duplicate_columns(self):
  174:         # multiple assignments that change dtypes
  175:         # the location indexer is a slice
  176:         # GH 6120
  177:         df = DataFrame(
  178:             np.random.default_rng(2).standard_normal((5, 2)), columns=["that", "that"]
  179:         )
  180:         expected = DataFrame(1.0, index=range(5), columns=["that", "that"])
  181: 
  182:         df["that"] = 1.0
  183:         tm.assert_frame_equal(df, expected)
  184: 
  185:         df = DataFrame(
  186:             np.random.default_rng(2).random((5, 2)), columns=["that", "that"]
  187:         )
  188:         expected = DataFrame(1, index=range(5), columns=["that", "that"])
  189: 
  190:         df["that"] = 1
  191:         tm.assert_frame_equal(df, expected)
  192: 
  193:     def test_dup_columns_comparisons(self):
  194:         # equality
  195:         df1 = DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=["A", "B"])
  196:         df2 = DataFrame([[0, 1], [2, 4], [2, np.nan], [4, 5]], columns=["A", "A"])
  197: 
  198:         # not-comparing like-labelled
  199:         msg = (
  200:             r"Can only compare identically-labeled \(both index and columns\) "
  201:             "DataFrame objects"
  202:         )
  203:         with pytest.raises(ValueError, match=msg):
  204:             df1 == df2
  205: 
  206:         df1r = df1.reindex_like(df2)
  207:         result = df1r == df2
  208:         expected = DataFrame(
  209:             [[False, True], [True, False], [False, False], [True, False]],
  210:             columns=["A", "A"],
  211:         )
  212:         tm.assert_frame_equal(result, expected)
  213: 
  214:     def test_mixed_column_selection(self):
  215:         # mixed column selection
  216:         # GH 5639
  217:         dfbool = DataFrame(
  218:             {
  219:                 "one": Series([True, True, False], index=["a", "b", "c"]),
  220:                 "two": Series([False, False, True, False], index=["a", "b", "c", "d"]),
  221:                 "three": Series([False, True, True, True], index=["a", "b", "c", "d"]),
  222:             }
  223:         )
  224:         expected = pd.concat([dfbool["one"], dfbool["three"], dfbool["one"]], axis=1)
  225:         result = dfbool[["one", "three", "one"]]
  226:         tm.assert_frame_equal(result, expected)
  227: 
  228:     def test_multi_axis_dups(self):
  229:         # multi-axis dups
  230:         # GH 6121
  231:         df = DataFrame(
  232:             np.arange(25.0).reshape(5, 5),
  233:             index=["a", "b", "c", "d", "e"],
  234:             columns=["A", "B", "C", "D", "E"],
  235:         )
  236:         z = df[["A", "C", "A"]].copy()
  237:         expected = z.loc[["a", "c", "a"]]
  238: 
  239:         df = DataFrame(
  240:             np.arange(25.0).reshape(5, 5),
  241:             index=["a", "b", "c", "d", "e"],
  242:             columns=["A", "B", "C", "D", "E"],
  243:         )
  244:         z = df[["A", "C", "A"]]
  245:         result = z.loc[["a", "c", "a"]]
  246:         tm.assert_frame_equal(result, expected)
  247: 
  248:     def test_columns_with_dups(self):
  249:         # GH 3468 related
  250: 
  251:         # basic
  252:         df = DataFrame([[1, 2]], columns=["a", "a"])
  253:         df.columns = ["a", "a.1"]
  254:         expected = DataFrame([[1, 2]], columns=["a", "a.1"])
  255:         tm.assert_frame_equal(df, expected)
  256: 
  257:         df = DataFrame([[1, 2, 3]], columns=["b", "a", "a"])
  258:         df.columns = ["b", "a", "a.1"]
  259:         expected = DataFrame([[1, 2, 3]], columns=["b", "a", "a.1"])
  260:         tm.assert_frame_equal(df, expected)
  261: 
  262:     def test_columns_with_dup_index(self):
  263:         # with a dup index
  264:         df = DataFrame([[1, 2]], columns=["a", "a"])
  265:         df.columns = ["b", "b"]
  266:         expected = DataFrame([[1, 2]], columns=["b", "b"])
  267:         tm.assert_frame_equal(df, expected)
  268: 
  269:     def test_multi_dtype(self):
  270:         # multi-dtype
  271:         df = DataFrame(
  272:             [[1, 2, 1.0, 2.0, 3.0, "foo", "bar"]],
  273:             columns=["a", "a", "b", "b", "d", "c", "c"],
  274:         )
  275:         df.columns = list("ABCDEFG")
  276:         expected = DataFrame(
  277:             [[1, 2, 1.0, 2.0, 3.0, "foo", "bar"]], columns=list("ABCDEFG")
  278:         )
  279:         tm.assert_frame_equal(df, expected)
  280: 
  281:     def test_multi_dtype2(self):
  282:         df = DataFrame([[1, 2, "foo", "bar"]], columns=["a", "a", "a", "a"])
  283:         df.columns = ["a", "a.1", "a.2", "a.3"]
  284:         expected = DataFrame([[1, 2, "foo", "bar"]], columns=["a", "a.1", "a.2", "a.3"])
  285:         tm.assert_frame_equal(df, expected)
  286: 
  287:     def test_dups_across_blocks(self, using_array_manager):
  288:         # dups across blocks
  289:         df_float = DataFrame(
  290:             np.random.default_rng(2).standard_normal((10, 3)), dtype="float64"
  291:         )
  292:         df_int = DataFrame(
  293:             np.random.default_rng(2).standard_normal((10, 3)).astype("int64")
  294:         )
  295:         df_bool = DataFrame(True, index=df_float.index, columns=df_float.columns)
  296:         df_object = DataFrame("foo", index=df_float.index, columns=df_float.columns)
  297:         df_dt = DataFrame(
  298:             pd.Timestamp("20010101"), index=df_float.index, columns=df_float.columns
  299:         )
  300:         df = pd.concat([df_float, df_int, df_bool, df_object, df_dt], axis=1)
  301: 
  302:         if not using_array_manager:
  303:             assert len(df._mgr.blknos) == len(df.columns)
  304:             assert len(df._mgr.blklocs) == len(df.columns)
  305: 
  306:         # testing iloc
  307:         for i in range(len(df.columns)):
  308:             df.iloc[:, i]
  309: 
  310:     def test_dup_columns_across_dtype(self):
  311:         # dup columns across dtype GH 2079/2194
  312:         vals = [[1, -1, 2.0], [2, -2, 3.0]]
  313:         rs = DataFrame(vals, columns=["A", "A", "B"])
  314:         xp = DataFrame(vals)
  315:         xp.columns = ["A", "A", "B"]
  316:         tm.assert_frame_equal(rs, xp)
  317: 
  318:     def test_set_value_by_index(self):
  319:         # See gh-12344
  320:         warn = None
  321:         msg = "will attempt to set the values inplace"
  322: 
  323:         df = DataFrame(np.arange(9).reshape(3, 3).T)
  324:         df.columns = list("AAA")
  325:         expected = df.iloc[:, 2].copy()
  326: 
  327:         with tm.assert_produces_warning(warn, match=msg):
  328:             df.iloc[:, 0] = 3
  329:         tm.assert_series_equal(df.iloc[:, 2], expected)
  330: 
  331:         df = DataFrame(np.arange(9).reshape(3, 3).T)
  332:         df.columns = [2, float(2), str(2)]
  333:         expected = df.iloc[:, 1].copy()
  334: 
  335:         with tm.assert_produces_warning(warn, match=msg):
  336:             df.iloc[:, 0] = 3
  337:         tm.assert_series_equal(df.iloc[:, 1], expected)
