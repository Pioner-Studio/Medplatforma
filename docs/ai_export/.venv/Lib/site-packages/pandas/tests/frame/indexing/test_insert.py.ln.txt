    1: """
    2: test_insert is specifically for the DataFrame.insert method; not to be
    3: confused with tests with "insert" in their names that are really testing
    4: __setitem__.
    5: """
    6: import numpy as np
    7: import pytest
    8: 
    9: from pandas.errors import PerformanceWarning
   10: 
   11: from pandas import (
   12:     DataFrame,
   13:     Index,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestDataFrameInsert:
   19:     def test_insert(self):
   20:         df = DataFrame(
   21:             np.random.default_rng(2).standard_normal((5, 3)),
   22:             index=np.arange(5),
   23:             columns=["c", "b", "a"],
   24:         )
   25: 
   26:         df.insert(0, "foo", df["a"])
   27:         tm.assert_index_equal(df.columns, Index(["foo", "c", "b", "a"]))
   28:         tm.assert_series_equal(df["a"], df["foo"], check_names=False)
   29: 
   30:         df.insert(2, "bar", df["c"])
   31:         tm.assert_index_equal(df.columns, Index(["foo", "c", "bar", "b", "a"]))
   32:         tm.assert_almost_equal(df["c"], df["bar"], check_names=False)
   33: 
   34:         with pytest.raises(ValueError, match="already exists"):
   35:             df.insert(1, "a", df["b"])
   36: 
   37:         msg = "cannot insert c, already exists"
   38:         with pytest.raises(ValueError, match=msg):
   39:             df.insert(1, "c", df["b"])
   40: 
   41:         df.columns.name = "some_name"
   42:         # preserve columns name field
   43:         df.insert(0, "baz", df["c"])
   44:         assert df.columns.name == "some_name"
   45: 
   46:     def test_insert_column_bug_4032(self):
   47:         # GH#4032, inserting a column and renaming causing errors
   48:         df = DataFrame({"b": [1.1, 2.2]})
   49: 
   50:         df = df.rename(columns={})
   51:         df.insert(0, "a", [1, 2])
   52:         result = df.rename(columns={})
   53: 
   54:         expected = DataFrame([[1, 1.1], [2, 2.2]], columns=["a", "b"])
   55:         tm.assert_frame_equal(result, expected)
   56: 
   57:         df.insert(0, "c", [1.3, 2.3])
   58:         result = df.rename(columns={})
   59: 
   60:         expected = DataFrame([[1.3, 1, 1.1], [2.3, 2, 2.2]], columns=["c", "a", "b"])
   61:         tm.assert_frame_equal(result, expected)
   62: 
   63:     def test_insert_with_columns_dups(self):
   64:         # GH#14291
   65:         df = DataFrame()
   66:         df.insert(0, "A", ["g", "h", "i"], allow_duplicates=True)
   67:         df.insert(0, "A", ["d", "e", "f"], allow_duplicates=True)
   68:         df.insert(0, "A", ["a", "b", "c"], allow_duplicates=True)
   69:         exp = DataFrame(
   70:             [["a", "d", "g"], ["b", "e", "h"], ["c", "f", "i"]], columns=["A", "A", "A"]
   71:         )
   72:         tm.assert_frame_equal(df, exp)
   73: 
   74:     def test_insert_item_cache(self, using_array_manager, using_copy_on_write):
   75:         df = DataFrame(np.random.default_rng(2).standard_normal((4, 3)))
   76:         ser = df[0]
   77: 
   78:         if using_array_manager:
   79:             expected_warning = None
   80:         else:
   81:             # with BlockManager warn about high fragmentation of single dtype
   82:             expected_warning = PerformanceWarning
   83: 
   84:         with tm.assert_produces_warning(expected_warning):
   85:             for n in range(100):
   86:                 df[n + 3] = df[1] * n
   87: 
   88:         if using_copy_on_write:
   89:             ser.iloc[0] = 99
   90:             assert df.iloc[0, 0] == df[0][0]
   91:             assert df.iloc[0, 0] != 99
   92:         else:
   93:             ser.values[0] = 99
   94:             assert df.iloc[0, 0] == df[0][0]
   95:             assert df.iloc[0, 0] == 99
   96: 
   97:     def test_insert_EA_no_warning(self):
   98:         # PerformanceWarning about fragmented frame should not be raised when
   99:         # using EAs (https://github.com/pandas-dev/pandas/issues/44098)
  100:         df = DataFrame(
  101:             np.random.default_rng(2).integers(0, 100, size=(3, 100)), dtype="Int64"
  102:         )
  103:         with tm.assert_produces_warning(None):
  104:             df["a"] = np.array([1, 2, 3])
  105: 
  106:     def test_insert_frame(self):
  107:         # GH#42403
  108:         df = DataFrame({"col1": [1, 2], "col2": [3, 4]})
  109: 
  110:         msg = (
  111:             "Expected a one-dimensional object, got a DataFrame with 2 columns instead."
  112:         )
  113:         with pytest.raises(ValueError, match=msg):
  114:             df.insert(1, "newcol", df)
  115: 
  116:     def test_insert_int64_loc(self):
  117:         # GH#53193
  118:         df = DataFrame({"a": [1, 2]})
  119:         df.insert(np.int64(0), "b", 0)
  120:         tm.assert_frame_equal(df, DataFrame({"b": [0, 0], "a": [1, 2]}))
