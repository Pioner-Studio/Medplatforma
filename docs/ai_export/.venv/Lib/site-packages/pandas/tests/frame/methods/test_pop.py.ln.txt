    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     MultiIndex,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestDataFramePop:
   12:     def test_pop(self, float_frame, warn_copy_on_write):
   13:         float_frame.columns.name = "baz"
   14: 
   15:         float_frame.pop("A")
   16:         assert "A" not in float_frame
   17: 
   18:         float_frame["foo"] = "bar"
   19:         float_frame.pop("foo")
   20:         assert "foo" not in float_frame
   21:         assert float_frame.columns.name == "baz"
   22: 
   23:         # gh-10912: inplace ops cause caching issue
   24:         a = DataFrame([[1, 2, 3], [4, 5, 6]], columns=["A", "B", "C"], index=["X", "Y"])
   25:         b = a.pop("B")
   26:         with tm.assert_cow_warning(warn_copy_on_write):
   27:             b += 1
   28: 
   29:         # original frame
   30:         expected = DataFrame([[1, 3], [4, 6]], columns=["A", "C"], index=["X", "Y"])
   31:         tm.assert_frame_equal(a, expected)
   32: 
   33:         # result
   34:         expected = Series([2, 5], index=["X", "Y"], name="B") + 1
   35:         tm.assert_series_equal(b, expected)
   36: 
   37:     def test_pop_non_unique_cols(self):
   38:         df = DataFrame({0: [0, 1], 1: [0, 1], 2: [4, 5]})
   39:         df.columns = ["a", "b", "a"]
   40: 
   41:         res = df.pop("a")
   42:         assert type(res) == DataFrame
   43:         assert len(res) == 2
   44:         assert len(df.columns) == 1
   45:         assert "b" in df.columns
   46:         assert "a" not in df.columns
   47:         assert len(df.index) == 2
   48: 
   49:     def test_mixed_depth_pop(self):
   50:         arrays = [
   51:             ["a", "top", "top", "routine1", "routine1", "routine2"],
   52:             ["", "OD", "OD", "result1", "result2", "result1"],
   53:             ["", "wx", "wy", "", "", ""],
   54:         ]
   55: 
   56:         tuples = sorted(zip(*arrays))
   57:         index = MultiIndex.from_tuples(tuples)
   58:         df = DataFrame(np.random.default_rng(2).standard_normal((4, 6)), columns=index)
   59: 
   60:         df1 = df.copy()
   61:         df2 = df.copy()
   62:         result = df1.pop("a")
   63:         expected = df2.pop(("a", "", ""))
   64:         tm.assert_series_equal(expected, result, check_names=False)
   65:         tm.assert_frame_equal(df1, df2)
   66:         assert result.name == "a"
   67: 
   68:         expected = df1["top"]
   69:         df1 = df1.drop(["top"], axis=1)
   70:         result = df2.pop("top")
   71:         tm.assert_frame_equal(expected, result)
   72:         tm.assert_frame_equal(df1, df2)
