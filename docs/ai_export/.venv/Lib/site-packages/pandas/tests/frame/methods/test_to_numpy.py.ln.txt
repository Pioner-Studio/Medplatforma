    1: import numpy as np
    2: 
    3: import pandas.util._test_decorators as td
    4: 
    5: from pandas import (
    6:     DataFrame,
    7:     Timestamp,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestToNumpy:
   13:     def test_to_numpy(self):
   14:         df = DataFrame({"A": [1, 2], "B": [3, 4.5]})
   15:         expected = np.array([[1, 3], [2, 4.5]])
   16:         result = df.to_numpy()
   17:         tm.assert_numpy_array_equal(result, expected)
   18: 
   19:     def test_to_numpy_dtype(self):
   20:         df = DataFrame({"A": [1, 2], "B": [3, 4.5]})
   21:         expected = np.array([[1, 3], [2, 4]], dtype="int64")
   22:         result = df.to_numpy(dtype="int64")
   23:         tm.assert_numpy_array_equal(result, expected)
   24: 
   25:     @td.skip_array_manager_invalid_test
   26:     def test_to_numpy_copy(self, using_copy_on_write):
   27:         arr = np.random.default_rng(2).standard_normal((4, 3))
   28:         df = DataFrame(arr)
   29:         if using_copy_on_write:
   30:             assert df.values.base is not arr
   31:             assert df.to_numpy(copy=False).base is df.values.base
   32:         else:
   33:             assert df.values.base is arr
   34:             assert df.to_numpy(copy=False).base is arr
   35:         assert df.to_numpy(copy=True).base is not arr
   36: 
   37:         # we still don't want a copy when na_value=np.nan is passed,
   38:         #  and that can be respected because we are already numpy-float
   39:         if using_copy_on_write:
   40:             assert df.to_numpy(copy=False).base is df.values.base
   41:         else:
   42:             assert df.to_numpy(copy=False, na_value=np.nan).base is arr
   43: 
   44:     def test_to_numpy_mixed_dtype_to_str(self):
   45:         # https://github.com/pandas-dev/pandas/issues/35455
   46:         df = DataFrame([[Timestamp("2020-01-01 00:00:00"), 100.0]])
   47:         result = df.to_numpy(dtype=str)
   48:         expected = np.array([["2020-01-01 00:00:00", "100.0"]], dtype=str)
   49:         tm.assert_numpy_array_equal(result, expected)
