    1: from collections import OrderedDict
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._config import using_pyarrow_string_dtype
    7: 
    8: from pandas import (
    9:     DataFrame,
   10:     Index,
   11:     MultiIndex,
   12:     RangeIndex,
   13:     Series,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestFromDict:
   19:     # Note: these tests are specific to the from_dict method, not for
   20:     #  passing dictionaries to DataFrame.__init__
   21: 
   22:     def test_constructor_list_of_odicts(self):
   23:         data = [
   24:             OrderedDict([["a", 1.5], ["b", 3], ["c", 4], ["d", 6]]),
   25:             OrderedDict([["a", 1.5], ["b", 3], ["d", 6]]),
   26:             OrderedDict([["a", 1.5], ["d", 6]]),
   27:             OrderedDict(),
   28:             OrderedDict([["a", 1.5], ["b", 3], ["c", 4]]),
   29:             OrderedDict([["b", 3], ["c", 4], ["d", 6]]),
   30:         ]
   31: 
   32:         result = DataFrame(data)
   33:         expected = DataFrame.from_dict(
   34:             dict(zip(range(len(data)), data)), orient="index"
   35:         )
   36:         tm.assert_frame_equal(result, expected.reindex(result.index))
   37: 
   38:     def test_constructor_single_row(self):
   39:         data = [OrderedDict([["a", 1.5], ["b", 3], ["c", 4], ["d", 6]])]
   40: 
   41:         result = DataFrame(data)
   42:         expected = DataFrame.from_dict(dict(zip([0], data)), orient="index").reindex(
   43:             result.index
   44:         )
   45:         tm.assert_frame_equal(result, expected)
   46: 
   47:     @pytest.mark.skipif(
   48:         using_pyarrow_string_dtype(), reason="columns inferring logic broken"
   49:     )
   50:     def test_constructor_list_of_series(self):
   51:         data = [
   52:             OrderedDict([["a", 1.5], ["b", 3.0], ["c", 4.0]]),
   53:             OrderedDict([["a", 1.5], ["b", 3.0], ["c", 6.0]]),
   54:         ]
   55:         sdict = OrderedDict(zip(["x", "y"], data))
   56:         idx = Index(["a", "b", "c"])
   57: 
   58:         # all named
   59:         data2 = [
   60:             Series([1.5, 3, 4], idx, dtype="O", name="x"),
   61:             Series([1.5, 3, 6], idx, name="y"),
   62:         ]
   63:         result = DataFrame(data2)
   64:         expected = DataFrame.from_dict(sdict, orient="index")
   65:         tm.assert_frame_equal(result, expected)
   66: 
   67:         # some unnamed
   68:         data2 = [
   69:             Series([1.5, 3, 4], idx, dtype="O", name="x"),
   70:             Series([1.5, 3, 6], idx),
   71:         ]
   72:         result = DataFrame(data2)
   73: 
   74:         sdict = OrderedDict(zip(["x", "Unnamed 0"], data))
   75:         expected = DataFrame.from_dict(sdict, orient="index")
   76:         tm.assert_frame_equal(result, expected)
   77: 
   78:         # none named
   79:         data = [
   80:             OrderedDict([["a", 1.5], ["b", 3], ["c", 4], ["d", 6]]),
   81:             OrderedDict([["a", 1.5], ["b", 3], ["d", 6]]),
   82:             OrderedDict([["a", 1.5], ["d", 6]]),
   83:             OrderedDict(),
   84:             OrderedDict([["a", 1.5], ["b", 3], ["c", 4]]),
   85:             OrderedDict([["b", 3], ["c", 4], ["d", 6]]),
   86:         ]
   87:         data = [Series(d) for d in data]
   88: 
   89:         result = DataFrame(data)
   90:         sdict = OrderedDict(zip(range(len(data)), data))
   91:         expected = DataFrame.from_dict(sdict, orient="index")
   92:         tm.assert_frame_equal(result, expected.reindex(result.index))
   93: 
   94:         result2 = DataFrame(data, index=np.arange(6, dtype=np.int64))
   95:         tm.assert_frame_equal(result, result2)
   96: 
   97:         result = DataFrame([Series(dtype=object)])
   98:         expected = DataFrame(index=[0])
   99:         tm.assert_frame_equal(result, expected)
  100: 
  101:         data = [
  102:             OrderedDict([["a", 1.5], ["b", 3.0], ["c", 4.0]]),
  103:             OrderedDict([["a", 1.5], ["b", 3.0], ["c", 6.0]]),
  104:         ]
  105:         sdict = OrderedDict(zip(range(len(data)), data))
  106: 
  107:         idx = Index(["a", "b", "c"])
  108:         data2 = [Series([1.5, 3, 4], idx, dtype="O"), Series([1.5, 3, 6], idx)]
  109:         result = DataFrame(data2)
  110:         expected = DataFrame.from_dict(sdict, orient="index")
  111:         tm.assert_frame_equal(result, expected)
  112: 
  113:     def test_constructor_orient(self, float_string_frame):
  114:         data_dict = float_string_frame.T._series
  115:         recons = DataFrame.from_dict(data_dict, orient="index")
  116:         expected = float_string_frame.reindex(index=recons.index)
  117:         tm.assert_frame_equal(recons, expected)
  118: 
  119:         # dict of sequence
  120:         a = {"hi": [32, 3, 3], "there": [3, 5, 3]}
  121:         rs = DataFrame.from_dict(a, orient="index")
  122:         xp = DataFrame.from_dict(a).T.reindex(list(a.keys()))
  123:         tm.assert_frame_equal(rs, xp)
  124: 
  125:     def test_constructor_from_ordered_dict(self):
  126:         # GH#8425
  127:         a = OrderedDict(
  128:             [
  129:                 ("one", OrderedDict([("col_a", "foo1"), ("col_b", "bar1")])),
  130:                 ("two", OrderedDict([("col_a", "foo2"), ("col_b", "bar2")])),
  131:                 ("three", OrderedDict([("col_a", "foo3"), ("col_b", "bar3")])),
  132:             ]
  133:         )
  134:         expected = DataFrame.from_dict(a, orient="columns").T
  135:         result = DataFrame.from_dict(a, orient="index")
  136:         tm.assert_frame_equal(result, expected)
  137: 
  138:     def test_from_dict_columns_parameter(self):
  139:         # GH#18529
  140:         # Test new columns parameter for from_dict that was added to make
  141:         # from_items(..., orient='index', columns=[...]) easier to replicate
  142:         result = DataFrame.from_dict(
  143:             OrderedDict([("A", [1, 2]), ("B", [4, 5])]),
  144:             orient="index",
  145:             columns=["one", "two"],
  146:         )
  147:         expected = DataFrame([[1, 2], [4, 5]], index=["A", "B"], columns=["one", "two"])
  148:         tm.assert_frame_equal(result, expected)
  149: 
  150:         msg = "cannot use columns parameter with orient='columns'"
  151:         with pytest.raises(ValueError, match=msg):
  152:             DataFrame.from_dict(
  153:                 {"A": [1, 2], "B": [4, 5]},
  154:                 orient="columns",
  155:                 columns=["one", "two"],
  156:             )
  157:         with pytest.raises(ValueError, match=msg):
  158:             DataFrame.from_dict({"A": [1, 2], "B": [4, 5]}, columns=["one", "two"])
  159: 
  160:     @pytest.mark.parametrize(
  161:         "data_dict, orient, expected",
  162:         [
  163:             ({}, "index", RangeIndex(0)),
  164:             (
  165:                 [{("a",): 1}, {("a",): 2}],
  166:                 "columns",
  167:                 Index([("a",)], tupleize_cols=False),
  168:             ),
  169:             (
  170:                 [OrderedDict([(("a",), 1), (("b",), 2)])],
  171:                 "columns",
  172:                 Index([("a",), ("b",)], tupleize_cols=False),
  173:             ),
  174:             ([{("a", "b"): 1}], "columns", Index([("a", "b")], tupleize_cols=False)),
  175:         ],
  176:     )
  177:     def test_constructor_from_dict_tuples(self, data_dict, orient, expected):
  178:         # GH#16769
  179:         df = DataFrame.from_dict(data_dict, orient)
  180:         result = df.columns
  181:         tm.assert_index_equal(result, expected)
  182: 
  183:     def test_frame_dict_constructor_empty_series(self):
  184:         s1 = Series(
  185:             [1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (2, 2), (2, 4)])
  186:         )
  187:         s2 = Series(
  188:             [1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (3, 2), (3, 4)])
  189:         )
  190:         s3 = Series(dtype=object)
  191: 
  192:         # it works!
  193:         DataFrame({"foo": s1, "bar": s2, "baz": s3})
  194:         DataFrame.from_dict({"foo": s1, "baz": s3, "bar": s2})
  195: 
  196:     def test_from_dict_scalars_requires_index(self):
  197:         msg = "If using all scalar values, you must pass an index"
  198:         with pytest.raises(ValueError, match=msg):
  199:             DataFrame.from_dict(OrderedDict([("b", 8), ("a", 5), ("a", 6)]))
  200: 
  201:     def test_from_dict_orient_invalid(self):
  202:         msg = (
  203:             "Expected 'index', 'columns' or 'tight' for orient parameter. "
  204:             "Got 'abc' instead"
  205:         )
  206:         with pytest.raises(ValueError, match=msg):
  207:             DataFrame.from_dict({"foo": 1, "baz": 3, "bar": 2}, orient="abc")
  208: 
  209:     def test_from_dict_order_with_single_column(self):
  210:         data = {
  211:             "alpha": {
  212:                 "value2": 123,
  213:                 "value1": 532,
  214:                 "animal": 222,
  215:                 "plant": False,
  216:                 "name": "test",
  217:             }
  218:         }
  219:         result = DataFrame.from_dict(
  220:             data,
  221:             orient="columns",
  222:         )
  223:         expected = DataFrame(
  224:             [[123], [532], [222], [False], ["test"]],
  225:             index=["value2", "value1", "animal", "plant", "name"],
  226:             columns=["alpha"],
  227:         )
  228:         tm.assert_frame_equal(result, expected)
