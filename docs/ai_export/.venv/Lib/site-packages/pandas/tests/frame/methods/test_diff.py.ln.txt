    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Series,
    8:     Timestamp,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestDataFrameDiff:
   15:     def test_diff_requires_integer(self):
   16:         df = DataFrame(np.random.default_rng(2).standard_normal((2, 2)))
   17:         with pytest.raises(ValueError, match="periods must be an integer"):
   18:             df.diff(1.5)
   19: 
   20:     # GH#44572 np.int64 is accepted
   21:     @pytest.mark.parametrize("num", [1, np.int64(1)])
   22:     def test_diff(self, datetime_frame, num):
   23:         df = datetime_frame
   24:         the_diff = df.diff(num)
   25: 
   26:         expected = df["A"] - df["A"].shift(num)
   27:         tm.assert_series_equal(the_diff["A"], expected)
   28: 
   29:     def test_diff_int_dtype(self):
   30:         # int dtype
   31:         a = 10_000_000_000_000_000
   32:         b = a + 1
   33:         ser = Series([a, b])
   34: 
   35:         rs = DataFrame({"s": ser}).diff()
   36:         assert rs.s[1] == 1
   37: 
   38:     def test_diff_mixed_numeric(self, datetime_frame):
   39:         # mixed numeric
   40:         tf = datetime_frame.astype("float32")
   41:         the_diff = tf.diff(1)
   42:         tm.assert_series_equal(the_diff["A"], tf["A"] - tf["A"].shift(1))
   43: 
   44:     def test_diff_axis1_nonconsolidated(self):
   45:         # GH#10907
   46:         df = DataFrame({"y": Series([2]), "z": Series([3])})
   47:         df.insert(0, "x", 1)
   48:         result = df.diff(axis=1)
   49:         expected = DataFrame({"x": np.nan, "y": Series(1), "z": Series(1)})
   50:         tm.assert_frame_equal(result, expected)
   51: 
   52:     def test_diff_timedelta64_with_nat(self):
   53:         # GH#32441
   54:         arr = np.arange(6).reshape(3, 2).astype("timedelta64[ns]")
   55:         arr[:, 0] = np.timedelta64("NaT", "ns")
   56: 
   57:         df = DataFrame(arr)
   58:         result = df.diff(1, axis=0)
   59: 
   60:         expected = DataFrame({0: df[0], 1: [pd.NaT, pd.Timedelta(2), pd.Timedelta(2)]})
   61:         tm.assert_equal(result, expected)
   62: 
   63:         result = df.diff(0)
   64:         expected = df - df
   65:         assert expected[0].isna().all()
   66:         tm.assert_equal(result, expected)
   67: 
   68:         result = df.diff(-1, axis=1)
   69:         expected = df * np.nan
   70:         tm.assert_equal(result, expected)
   71: 
   72:     @pytest.mark.parametrize("tz", [None, "UTC"])
   73:     def test_diff_datetime_axis0_with_nat(self, tz, unit):
   74:         # GH#32441
   75:         dti = pd.DatetimeIndex(["NaT", "2019-01-01", "2019-01-02"], tz=tz).as_unit(unit)
   76:         ser = Series(dti)
   77: 
   78:         df = ser.to_frame()
   79: 
   80:         result = df.diff()
   81:         ex_index = pd.TimedeltaIndex([pd.NaT, pd.NaT, pd.Timedelta(days=1)]).as_unit(
   82:             unit
   83:         )
   84:         expected = Series(ex_index).to_frame()
   85:         tm.assert_frame_equal(result, expected)
   86: 
   87:     @pytest.mark.parametrize("tz", [None, "UTC"])
   88:     def test_diff_datetime_with_nat_zero_periods(self, tz):
   89:         # diff on NaT values should give NaT, not timedelta64(0)
   90:         dti = date_range("2016-01-01", periods=4, tz=tz)
   91:         ser = Series(dti)
   92:         df = ser.to_frame().copy()
   93: 
   94:         df[1] = ser.copy()
   95: 
   96:         df.iloc[:, 0] = pd.NaT
   97: 
   98:         expected = df - df
   99:         assert expected[0].isna().all()
  100: 
  101:         result = df.diff(0, axis=0)
  102:         tm.assert_frame_equal(result, expected)
  103: 
  104:         result = df.diff(0, axis=1)
  105:         tm.assert_frame_equal(result, expected)
  106: 
  107:     @pytest.mark.parametrize("tz", [None, "UTC"])
  108:     def test_diff_datetime_axis0(self, tz):
  109:         # GH#18578
  110:         df = DataFrame(
  111:             {
  112:                 0: date_range("2010", freq="D", periods=2, tz=tz),
  113:                 1: date_range("2010", freq="D", periods=2, tz=tz),
  114:             }
  115:         )
  116: 
  117:         result = df.diff(axis=0)
  118:         expected = DataFrame(
  119:             {
  120:                 0: pd.TimedeltaIndex(["NaT", "1 days"]),
  121:                 1: pd.TimedeltaIndex(["NaT", "1 days"]),
  122:             }
  123:         )
  124:         tm.assert_frame_equal(result, expected)
  125: 
  126:     @pytest.mark.parametrize("tz", [None, "UTC"])
  127:     def test_diff_datetime_axis1(self, tz):
  128:         # GH#18578
  129:         df = DataFrame(
  130:             {
  131:                 0: date_range("2010", freq="D", periods=2, tz=tz),
  132:                 1: date_range("2010", freq="D", periods=2, tz=tz),
  133:             }
  134:         )
  135: 
  136:         result = df.diff(axis=1)
  137:         expected = DataFrame(
  138:             {
  139:                 0: pd.TimedeltaIndex(["NaT", "NaT"]),
  140:                 1: pd.TimedeltaIndex(["0 days", "0 days"]),
  141:             }
  142:         )
  143:         tm.assert_frame_equal(result, expected)
  144: 
  145:     def test_diff_timedelta(self, unit):
  146:         # GH#4533
  147:         df = DataFrame(
  148:             {
  149:                 "time": [Timestamp("20130101 9:01"), Timestamp("20130101 9:02")],
  150:                 "value": [1.0, 2.0],
  151:             }
  152:         )
  153:         df["time"] = df["time"].dt.as_unit(unit)
  154: 
  155:         res = df.diff()
  156:         exp = DataFrame(
  157:             [[pd.NaT, np.nan], [pd.Timedelta("00:01:00"), 1]], columns=["time", "value"]
  158:         )
  159:         exp["time"] = exp["time"].dt.as_unit(unit)
  160:         tm.assert_frame_equal(res, exp)
  161: 
  162:     def test_diff_mixed_dtype(self):
  163:         df = DataFrame(np.random.default_rng(2).standard_normal((5, 3)))
  164:         df["A"] = np.array([1, 2, 3, 4, 5], dtype=object)
  165: 
  166:         result = df.diff()
  167:         assert result[0].dtype == np.float64
  168: 
  169:     def test_diff_neg_n(self, datetime_frame):
  170:         rs = datetime_frame.diff(-1)
  171:         xp = datetime_frame - datetime_frame.shift(-1)
  172:         tm.assert_frame_equal(rs, xp)
  173: 
  174:     def test_diff_float_n(self, datetime_frame):
  175:         rs = datetime_frame.diff(1.0)
  176:         xp = datetime_frame.diff(1)
  177:         tm.assert_frame_equal(rs, xp)
  178: 
  179:     def test_diff_axis(self):
  180:         # GH#9727
  181:         df = DataFrame([[1.0, 2.0], [3.0, 4.0]])
  182:         tm.assert_frame_equal(
  183:             df.diff(axis=1), DataFrame([[np.nan, 1.0], [np.nan, 1.0]])
  184:         )
  185:         tm.assert_frame_equal(
  186:             df.diff(axis=0), DataFrame([[np.nan, np.nan], [2.0, 2.0]])
  187:         )
  188: 
  189:     def test_diff_period(self):
  190:         # GH#32995 Don't pass an incorrect axis
  191:         pi = date_range("2016-01-01", periods=3).to_period("D")
  192:         df = DataFrame({"A": pi})
  193: 
  194:         result = df.diff(1, axis=1)
  195: 
  196:         expected = (df - pd.NaT).astype(object)
  197:         tm.assert_frame_equal(result, expected)
  198: 
  199:     def test_diff_axis1_mixed_dtypes(self):
  200:         # GH#32995 operate column-wise when we have mixed dtypes and axis=1
  201:         df = DataFrame({"A": range(3), "B": 2 * np.arange(3, dtype=np.float64)})
  202: 
  203:         expected = DataFrame({"A": [np.nan, np.nan, np.nan], "B": df["B"] / 2})
  204: 
  205:         result = df.diff(axis=1)
  206:         tm.assert_frame_equal(result, expected)
  207: 
  208:         # GH#21437 mixed-float-dtypes
  209:         df = DataFrame(
  210:             {"a": np.arange(3, dtype="float32"), "b": np.arange(3, dtype="float64")}
  211:         )
  212:         result = df.diff(axis=1)
  213:         expected = DataFrame({"a": df["a"] * np.nan, "b": df["b"] * 0})
  214:         tm.assert_frame_equal(result, expected)
  215: 
  216:     def test_diff_axis1_mixed_dtypes_large_periods(self):
  217:         # GH#32995 operate column-wise when we have mixed dtypes and axis=1
  218:         df = DataFrame({"A": range(3), "B": 2 * np.arange(3, dtype=np.float64)})
  219: 
  220:         expected = df * np.nan
  221: 
  222:         result = df.diff(axis=1, periods=3)
  223:         tm.assert_frame_equal(result, expected)
  224: 
  225:     def test_diff_axis1_mixed_dtypes_negative_periods(self):
  226:         # GH#32995 operate column-wise when we have mixed dtypes and axis=1
  227:         df = DataFrame({"A": range(3), "B": 2 * np.arange(3, dtype=np.float64)})
  228: 
  229:         expected = DataFrame({"A": -1.0 * df["A"], "B": df["B"] * np.nan})
  230: 
  231:         result = df.diff(axis=1, periods=-1)
  232:         tm.assert_frame_equal(result, expected)
  233: 
  234:     def test_diff_sparse(self):
  235:         # GH#28813 .diff() should work for sparse dataframes as well
  236:         sparse_df = DataFrame([[0, 1], [1, 0]], dtype="Sparse[int]")
  237: 
  238:         result = sparse_df.diff()
  239:         expected = DataFrame(
  240:             [[np.nan, np.nan], [1.0, -1.0]], dtype=pd.SparseDtype("float", 0.0)
  241:         )
  242: 
  243:         tm.assert_frame_equal(result, expected)
  244: 
  245:     @pytest.mark.parametrize(
  246:         "axis,expected",
  247:         [
  248:             (
  249:                 0,
  250:                 DataFrame(
  251:                     {
  252:                         "a": [np.nan, 0, 1, 0, np.nan, np.nan, np.nan, 0],
  253:                         "b": [np.nan, 1, np.nan, np.nan, -2, 1, np.nan, np.nan],
  254:                         "c": np.repeat(np.nan, 8),
  255:                         "d": [np.nan, 3, 5, 7, 9, 11, 13, 15],
  256:                     },
  257:                     dtype="Int64",
  258:                 ),
  259:             ),
  260:             (
  261:                 1,
  262:                 DataFrame(
  263:                     {
  264:                         "a": np.repeat(np.nan, 8),
  265:                         "b": [0, 1, np.nan, 1, np.nan, np.nan, np.nan, 0],
  266:                         "c": np.repeat(np.nan, 8),
  267:                         "d": np.repeat(np.nan, 8),
  268:                     },
  269:                     dtype="Int64",
  270:                 ),
  271:             ),
  272:         ],
  273:     )
  274:     def test_diff_integer_na(self, axis, expected):
  275:         # GH#24171 IntegerNA Support for DataFrame.diff()
  276:         df = DataFrame(
  277:             {
  278:                 "a": np.repeat([0, 1, np.nan, 2], 2),
  279:                 "b": np.tile([0, 1, np.nan, 2], 2),
  280:                 "c": np.repeat(np.nan, 8),
  281:                 "d": np.arange(1, 9) ** 2,
  282:             },
  283:             dtype="Int64",
  284:         )
  285: 
  286:         # Test case for default behaviour of diff
  287:         result = df.diff(axis=axis)
  288:         tm.assert_frame_equal(result, expected)
  289: 
  290:     def test_diff_readonly(self):
  291:         # https://github.com/pandas-dev/pandas/issues/35559
  292:         arr = np.random.default_rng(2).standard_normal((5, 2))
  293:         arr.flags.writeable = False
  294:         df = DataFrame(arr)
  295:         result = df.diff()
  296:         expected = DataFrame(np.array(df)).diff()
  297:         tm.assert_frame_equal(result, expected)
  298: 
  299:     def test_diff_all_int_dtype(self, any_int_numpy_dtype):
  300:         # GH 14773
  301:         df = DataFrame(range(5))
  302:         df = df.astype(any_int_numpy_dtype)
  303:         result = df.diff()
  304:         expected_dtype = (
  305:             "float32" if any_int_numpy_dtype in ("int8", "int16") else "float64"
  306:         )
  307:         expected = DataFrame([np.nan, 1.0, 1.0, 1.0, 1.0], dtype=expected_dtype)
  308:         tm.assert_frame_equal(result, expected)
