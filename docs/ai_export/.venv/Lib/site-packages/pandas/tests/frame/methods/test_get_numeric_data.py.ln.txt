    1: import numpy as np
    2: 
    3: import pandas as pd
    4: from pandas import (
    5:     Categorical,
    6:     DataFrame,
    7:     Index,
    8:     Series,
    9:     Timestamp,
   10: )
   11: import pandas._testing as tm
   12: from pandas.core.arrays import IntervalArray
   13: 
   14: 
   15: class TestGetNumericData:
   16:     def test_get_numeric_data_preserve_dtype(self):
   17:         # get the numeric data
   18:         obj = DataFrame({"A": [1, "2", 3.0]}, columns=Index(["A"], dtype="object"))
   19:         result = obj._get_numeric_data()
   20:         expected = DataFrame(dtype=object, index=pd.RangeIndex(3), columns=[])
   21:         tm.assert_frame_equal(result, expected)
   22: 
   23:     def test_get_numeric_data(self, using_infer_string):
   24:         datetime64name = np.dtype("M8[s]").name
   25:         objectname = np.dtype(np.object_).name
   26: 
   27:         df = DataFrame(
   28:             {"a": 1.0, "b": 2, "c": "foo", "f": Timestamp("20010102")},
   29:             index=np.arange(10),
   30:         )
   31:         result = df.dtypes
   32:         expected = Series(
   33:             [
   34:                 np.dtype("float64"),
   35:                 np.dtype("int64"),
   36:                 np.dtype(objectname) if not using_infer_string else "string",
   37:                 np.dtype(datetime64name),
   38:             ],
   39:             index=["a", "b", "c", "f"],
   40:         )
   41:         tm.assert_series_equal(result, expected)
   42: 
   43:         df = DataFrame(
   44:             {
   45:                 "a": 1.0,
   46:                 "b": 2,
   47:                 "c": "foo",
   48:                 "d": np.array([1.0] * 10, dtype="float32"),
   49:                 "e": np.array([1] * 10, dtype="int32"),
   50:                 "f": np.array([1] * 10, dtype="int16"),
   51:                 "g": Timestamp("20010102"),
   52:             },
   53:             index=np.arange(10),
   54:         )
   55: 
   56:         result = df._get_numeric_data()
   57:         expected = df.loc[:, ["a", "b", "d", "e", "f"]]
   58:         tm.assert_frame_equal(result, expected)
   59: 
   60:         only_obj = df.loc[:, ["c", "g"]]
   61:         result = only_obj._get_numeric_data()
   62:         expected = df.loc[:, []]
   63:         tm.assert_frame_equal(result, expected)
   64: 
   65:         df = DataFrame.from_dict({"a": [1, 2], "b": ["foo", "bar"], "c": [np.pi, np.e]})
   66:         result = df._get_numeric_data()
   67:         expected = DataFrame.from_dict({"a": [1, 2], "c": [np.pi, np.e]})
   68:         tm.assert_frame_equal(result, expected)
   69: 
   70:         df = result.copy()
   71:         result = df._get_numeric_data()
   72:         expected = df
   73:         tm.assert_frame_equal(result, expected)
   74: 
   75:     def test_get_numeric_data_mixed_dtype(self):
   76:         # numeric and object columns
   77: 
   78:         df = DataFrame(
   79:             {
   80:                 "a": [1, 2, 3],
   81:                 "b": [True, False, True],
   82:                 "c": ["foo", "bar", "baz"],
   83:                 "d": [None, None, None],
   84:                 "e": [3.14, 0.577, 2.773],
   85:             }
   86:         )
   87:         result = df._get_numeric_data()
   88:         tm.assert_index_equal(result.columns, Index(["a", "b", "e"]))
   89: 
   90:     def test_get_numeric_data_extension_dtype(self):
   91:         # GH#22290
   92:         df = DataFrame(
   93:             {
   94:                 "A": pd.array([-10, np.nan, 0, 10, 20, 30], dtype="Int64"),
   95:                 "B": Categorical(list("abcabc")),
   96:                 "C": pd.array([0, 1, 2, 3, np.nan, 5], dtype="UInt8"),
   97:                 "D": IntervalArray.from_breaks(range(7)),
   98:             }
   99:         )
  100:         result = df._get_numeric_data()
  101:         expected = df.loc[:, ["A", "C"]]
  102:         tm.assert_frame_equal(result, expected)
