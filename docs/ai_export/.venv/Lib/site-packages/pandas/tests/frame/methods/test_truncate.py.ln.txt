    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     DatetimeIndex,
    8:     Index,
    9:     Series,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestDataFrameTruncate:
   16:     def test_truncate(self, datetime_frame, frame_or_series):
   17:         ts = datetime_frame[::3]
   18:         ts = tm.get_obj(ts, frame_or_series)
   19: 
   20:         start, end = datetime_frame.index[3], datetime_frame.index[6]
   21: 
   22:         start_missing = datetime_frame.index[2]
   23:         end_missing = datetime_frame.index[7]
   24: 
   25:         # neither specified
   26:         truncated = ts.truncate()
   27:         tm.assert_equal(truncated, ts)
   28: 
   29:         # both specified
   30:         expected = ts[1:3]
   31: 
   32:         truncated = ts.truncate(start, end)
   33:         tm.assert_equal(truncated, expected)
   34: 
   35:         truncated = ts.truncate(start_missing, end_missing)
   36:         tm.assert_equal(truncated, expected)
   37: 
   38:         # start specified
   39:         expected = ts[1:]
   40: 
   41:         truncated = ts.truncate(before=start)
   42:         tm.assert_equal(truncated, expected)
   43: 
   44:         truncated = ts.truncate(before=start_missing)
   45:         tm.assert_equal(truncated, expected)
   46: 
   47:         # end specified
   48:         expected = ts[:3]
   49: 
   50:         truncated = ts.truncate(after=end)
   51:         tm.assert_equal(truncated, expected)
   52: 
   53:         truncated = ts.truncate(after=end_missing)
   54:         tm.assert_equal(truncated, expected)
   55: 
   56:         # corner case, empty series/frame returned
   57:         truncated = ts.truncate(after=ts.index[0] - ts.index.freq)
   58:         assert len(truncated) == 0
   59: 
   60:         truncated = ts.truncate(before=ts.index[-1] + ts.index.freq)
   61:         assert len(truncated) == 0
   62: 
   63:         msg = "Truncate: 2000-01-06 00:00:00 must be after 2000-05-16 00:00:00"
   64:         with pytest.raises(ValueError, match=msg):
   65:             ts.truncate(
   66:                 before=ts.index[-1] - ts.index.freq, after=ts.index[0] + ts.index.freq
   67:             )
   68: 
   69:     def test_truncate_nonsortedindex(self, frame_or_series):
   70:         # GH#17935
   71: 
   72:         obj = DataFrame({"A": ["a", "b", "c", "d", "e"]}, index=[5, 3, 2, 9, 0])
   73:         obj = tm.get_obj(obj, frame_or_series)
   74: 
   75:         msg = "truncate requires a sorted index"
   76:         with pytest.raises(ValueError, match=msg):
   77:             obj.truncate(before=3, after=9)
   78: 
   79:     def test_sort_values_nonsortedindex(self):
   80:         rng = date_range("2011-01-01", "2012-01-01", freq="W")
   81:         ts = DataFrame(
   82:             {
   83:                 "A": np.random.default_rng(2).standard_normal(len(rng)),
   84:                 "B": np.random.default_rng(2).standard_normal(len(rng)),
   85:             },
   86:             index=rng,
   87:         )
   88: 
   89:         decreasing = ts.sort_values("A", ascending=False)
   90: 
   91:         msg = "truncate requires a sorted index"
   92:         with pytest.raises(ValueError, match=msg):
   93:             decreasing.truncate(before="2011-11", after="2011-12")
   94: 
   95:     def test_truncate_nonsortedindex_axis1(self):
   96:         # GH#17935
   97: 
   98:         df = DataFrame(
   99:             {
  100:                 3: np.random.default_rng(2).standard_normal(5),
  101:                 20: np.random.default_rng(2).standard_normal(5),
  102:                 2: np.random.default_rng(2).standard_normal(5),
  103:                 0: np.random.default_rng(2).standard_normal(5),
  104:             },
  105:             columns=[3, 20, 2, 0],
  106:         )
  107:         msg = "truncate requires a sorted index"
  108:         with pytest.raises(ValueError, match=msg):
  109:             df.truncate(before=2, after=20, axis=1)
  110: 
  111:     @pytest.mark.parametrize(
  112:         "before, after, indices",
  113:         [(1, 2, [2, 1]), (None, 2, [2, 1, 0]), (1, None, [3, 2, 1])],
  114:     )
  115:     @pytest.mark.parametrize("dtyp", [*tm.ALL_REAL_NUMPY_DTYPES, "datetime64[ns]"])
  116:     def test_truncate_decreasing_index(
  117:         self, before, after, indices, dtyp, frame_or_series
  118:     ):
  119:         # https://github.com/pandas-dev/pandas/issues/33756
  120:         idx = Index([3, 2, 1, 0], dtype=dtyp)
  121:         if isinstance(idx, DatetimeIndex):
  122:             before = pd.Timestamp(before) if before is not None else None
  123:             after = pd.Timestamp(after) if after is not None else None
  124:             indices = [pd.Timestamp(i) for i in indices]
  125:         values = frame_or_series(range(len(idx)), index=idx)
  126:         result = values.truncate(before=before, after=after)
  127:         expected = values.loc[indices]
  128:         tm.assert_equal(result, expected)
  129: 
  130:     def test_truncate_multiindex(self, frame_or_series):
  131:         # GH 34564
  132:         mi = pd.MultiIndex.from_product([[1, 2, 3, 4], ["A", "B"]], names=["L1", "L2"])
  133:         s1 = DataFrame(range(mi.shape[0]), index=mi, columns=["col"])
  134:         s1 = tm.get_obj(s1, frame_or_series)
  135: 
  136:         result = s1.truncate(before=2, after=3)
  137: 
  138:         df = DataFrame.from_dict(
  139:             {"L1": [2, 2, 3, 3], "L2": ["A", "B", "A", "B"], "col": [2, 3, 4, 5]}
  140:         )
  141:         expected = df.set_index(["L1", "L2"])
  142:         expected = tm.get_obj(expected, frame_or_series)
  143: 
  144:         tm.assert_equal(result, expected)
  145: 
  146:     def test_truncate_index_only_one_unique_value(self, frame_or_series):
  147:         # GH 42365
  148:         obj = Series(0, index=date_range("2021-06-30", "2021-06-30")).repeat(5)
  149:         if frame_or_series is DataFrame:
  150:             obj = obj.to_frame(name="a")
  151: 
  152:         truncated = obj.truncate("2021-06-28", "2021-07-01")
  153: 
  154:         tm.assert_equal(truncated, obj)
