    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_data_frame_value_counts_unsorted():
    9:     df = pd.DataFrame(
   10:         {"num_legs": [2, 4, 4, 6], "num_wings": [2, 0, 0, 0]},
   11:         index=["falcon", "dog", "cat", "ant"],
   12:     )
   13: 
   14:     result = df.value_counts(sort=False)
   15:     expected = pd.Series(
   16:         data=[1, 2, 1],
   17:         index=pd.MultiIndex.from_arrays(
   18:             [(2, 4, 6), (2, 0, 0)], names=["num_legs", "num_wings"]
   19:         ),
   20:         name="count",
   21:     )
   22: 
   23:     tm.assert_series_equal(result, expected)
   24: 
   25: 
   26: def test_data_frame_value_counts_ascending():
   27:     df = pd.DataFrame(
   28:         {"num_legs": [2, 4, 4, 6], "num_wings": [2, 0, 0, 0]},
   29:         index=["falcon", "dog", "cat", "ant"],
   30:     )
   31: 
   32:     result = df.value_counts(ascending=True)
   33:     expected = pd.Series(
   34:         data=[1, 1, 2],
   35:         index=pd.MultiIndex.from_arrays(
   36:             [(2, 6, 4), (2, 0, 0)], names=["num_legs", "num_wings"]
   37:         ),
   38:         name="count",
   39:     )
   40: 
   41:     tm.assert_series_equal(result, expected)
   42: 
   43: 
   44: def test_data_frame_value_counts_default():
   45:     df = pd.DataFrame(
   46:         {"num_legs": [2, 4, 4, 6], "num_wings": [2, 0, 0, 0]},
   47:         index=["falcon", "dog", "cat", "ant"],
   48:     )
   49: 
   50:     result = df.value_counts()
   51:     expected = pd.Series(
   52:         data=[2, 1, 1],
   53:         index=pd.MultiIndex.from_arrays(
   54:             [(4, 2, 6), (0, 2, 0)], names=["num_legs", "num_wings"]
   55:         ),
   56:         name="count",
   57:     )
   58: 
   59:     tm.assert_series_equal(result, expected)
   60: 
   61: 
   62: def test_data_frame_value_counts_normalize():
   63:     df = pd.DataFrame(
   64:         {"num_legs": [2, 4, 4, 6], "num_wings": [2, 0, 0, 0]},
   65:         index=["falcon", "dog", "cat", "ant"],
   66:     )
   67: 
   68:     result = df.value_counts(normalize=True)
   69:     expected = pd.Series(
   70:         data=[0.5, 0.25, 0.25],
   71:         index=pd.MultiIndex.from_arrays(
   72:             [(4, 2, 6), (0, 2, 0)], names=["num_legs", "num_wings"]
   73:         ),
   74:         name="proportion",
   75:     )
   76: 
   77:     tm.assert_series_equal(result, expected)
   78: 
   79: 
   80: def test_data_frame_value_counts_single_col_default():
   81:     df = pd.DataFrame({"num_legs": [2, 4, 4, 6]})
   82: 
   83:     result = df.value_counts()
   84:     expected = pd.Series(
   85:         data=[2, 1, 1],
   86:         index=pd.MultiIndex.from_arrays([[4, 2, 6]], names=["num_legs"]),
   87:         name="count",
   88:     )
   89: 
   90:     tm.assert_series_equal(result, expected)
   91: 
   92: 
   93: def test_data_frame_value_counts_empty():
   94:     df_no_cols = pd.DataFrame()
   95: 
   96:     result = df_no_cols.value_counts()
   97:     expected = pd.Series(
   98:         [], dtype=np.int64, name="count", index=np.array([], dtype=np.intp)
   99:     )
  100: 
  101:     tm.assert_series_equal(result, expected)
  102: 
  103: 
  104: def test_data_frame_value_counts_empty_normalize():
  105:     df_no_cols = pd.DataFrame()
  106: 
  107:     result = df_no_cols.value_counts(normalize=True)
  108:     expected = pd.Series(
  109:         [], dtype=np.float64, name="proportion", index=np.array([], dtype=np.intp)
  110:     )
  111: 
  112:     tm.assert_series_equal(result, expected)
  113: 
  114: 
  115: def test_data_frame_value_counts_dropna_true(nulls_fixture):
  116:     # GH 41334
  117:     df = pd.DataFrame(
  118:         {
  119:             "first_name": ["John", "Anne", "John", "Beth"],
  120:             "middle_name": ["Smith", nulls_fixture, nulls_fixture, "Louise"],
  121:         },
  122:     )
  123:     result = df.value_counts()
  124:     expected = pd.Series(
  125:         data=[1, 1],
  126:         index=pd.MultiIndex.from_arrays(
  127:             [("Beth", "John"), ("Louise", "Smith")], names=["first_name", "middle_name"]
  128:         ),
  129:         name="count",
  130:     )
  131: 
  132:     tm.assert_series_equal(result, expected)
  133: 
  134: 
  135: def test_data_frame_value_counts_dropna_false(nulls_fixture):
  136:     # GH 41334
  137:     df = pd.DataFrame(
  138:         {
  139:             "first_name": ["John", "Anne", "John", "Beth"],
  140:             "middle_name": ["Smith", nulls_fixture, nulls_fixture, "Louise"],
  141:         },
  142:     )
  143: 
  144:     result = df.value_counts(dropna=False)
  145:     expected = pd.Series(
  146:         data=[1, 1, 1, 1],
  147:         index=pd.MultiIndex(
  148:             levels=[
  149:                 pd.Index(["Anne", "Beth", "John"]),
  150:                 pd.Index(["Louise", "Smith", np.nan]),
  151:             ],
  152:             codes=[[0, 1, 2, 2], [2, 0, 1, 2]],
  153:             names=["first_name", "middle_name"],
  154:         ),
  155:         name="count",
  156:     )
  157: 
  158:     tm.assert_series_equal(result, expected)
  159: 
  160: 
  161: @pytest.mark.parametrize("columns", (["first_name", "middle_name"], [0, 1]))
  162: def test_data_frame_value_counts_subset(nulls_fixture, columns):
  163:     # GH 50829
  164:     df = pd.DataFrame(
  165:         {
  166:             columns[0]: ["John", "Anne", "John", "Beth"],
  167:             columns[1]: ["Smith", nulls_fixture, nulls_fixture, "Louise"],
  168:         },
  169:     )
  170:     result = df.value_counts(columns[0])
  171:     expected = pd.Series(
  172:         data=[2, 1, 1],
  173:         index=pd.Index(["John", "Anne", "Beth"], name=columns[0]),
  174:         name="count",
  175:     )
  176: 
  177:     tm.assert_series_equal(result, expected)
  178: 
  179: 
  180: def test_value_counts_categorical_future_warning():
  181:     # GH#54775
  182:     df = pd.DataFrame({"a": [1, 2, 3]}, dtype="category")
  183:     result = df.value_counts()
  184:     expected = pd.Series(
  185:         1,
  186:         index=pd.MultiIndex.from_arrays(
  187:             [pd.Index([1, 2, 3], name="a", dtype="category")]
  188:         ),
  189:         name="count",
  190:     )
  191:     tm.assert_series_equal(result, expected)
  192: 
  193: 
  194: def test_value_counts_with_missing_category():
  195:     # GH-54836
  196:     df = pd.DataFrame({"a": pd.Categorical([1, 2, 4], categories=[1, 2, 3, 4])})
  197:     result = df.value_counts()
  198:     expected = pd.Series(
  199:         [1, 1, 1, 0],
  200:         index=pd.MultiIndex.from_arrays(
  201:             [pd.CategoricalIndex([1, 2, 4, 3], categories=[1, 2, 3, 4], name="a")]
  202:         ),
  203:         name="count",
  204:     )
  205:     tm.assert_series_equal(result, expected)
