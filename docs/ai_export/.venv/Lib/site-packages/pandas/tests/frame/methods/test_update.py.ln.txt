    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     DataFrame,
    9:     Series,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestDataFrameUpdate:
   16:     def test_update_nan(self):
   17:         # #15593 #15617
   18:         # test 1
   19:         df1 = DataFrame({"A": [1.0, 2, 3], "B": date_range("2000", periods=3)})
   20:         df2 = DataFrame({"A": [None, 2, 3]})
   21:         expected = df1.copy()
   22:         df1.update(df2, overwrite=False)
   23: 
   24:         tm.assert_frame_equal(df1, expected)
   25: 
   26:         # test 2
   27:         df1 = DataFrame({"A": [1.0, None, 3], "B": date_range("2000", periods=3)})
   28:         df2 = DataFrame({"A": [None, 2, 3]})
   29:         expected = DataFrame({"A": [1.0, 2, 3], "B": date_range("2000", periods=3)})
   30:         df1.update(df2, overwrite=False)
   31: 
   32:         tm.assert_frame_equal(df1, expected)
   33: 
   34:     def test_update(self):
   35:         df = DataFrame(
   36:             [[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3], [1.5, np.nan, 3]]
   37:         )
   38: 
   39:         other = DataFrame([[3.6, 2.0, np.nan], [np.nan, np.nan, 7]], index=[1, 3])
   40: 
   41:         df.update(other)
   42: 
   43:         expected = DataFrame(
   44:             [[1.5, np.nan, 3], [3.6, 2, 3], [1.5, np.nan, 3], [1.5, np.nan, 7.0]]
   45:         )
   46:         tm.assert_frame_equal(df, expected)
   47: 
   48:     def test_update_dtypes(self):
   49:         # gh 3016
   50:         df = DataFrame(
   51:             [[1.0, 2.0, 1, False, True], [4.0, 5.0, 2, True, False]],
   52:             columns=["A", "B", "int", "bool1", "bool2"],
   53:         )
   54: 
   55:         other = DataFrame(
   56:             [[45, 45, 3, True]], index=[0], columns=["A", "B", "int", "bool1"]
   57:         )
   58:         df.update(other)
   59: 
   60:         expected = DataFrame(
   61:             [[45.0, 45.0, 3, True, True], [4.0, 5.0, 2, True, False]],
   62:             columns=["A", "B", "int", "bool1", "bool2"],
   63:         )
   64:         tm.assert_frame_equal(df, expected)
   65: 
   66:     def test_update_nooverwrite(self):
   67:         df = DataFrame(
   68:             [[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3], [1.5, np.nan, 3]]
   69:         )
   70: 
   71:         other = DataFrame([[3.6, 2.0, np.nan], [np.nan, np.nan, 7]], index=[1, 3])
   72: 
   73:         df.update(other, overwrite=False)
   74: 
   75:         expected = DataFrame(
   76:             [[1.5, np.nan, 3], [1.5, 2, 3], [1.5, np.nan, 3], [1.5, np.nan, 3.0]]
   77:         )
   78:         tm.assert_frame_equal(df, expected)
   79: 
   80:     def test_update_filtered(self):
   81:         df = DataFrame(
   82:             [[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3], [1.5, np.nan, 3]]
   83:         )
   84: 
   85:         other = DataFrame([[3.6, 2.0, np.nan], [np.nan, np.nan, 7]], index=[1, 3])
   86: 
   87:         df.update(other, filter_func=lambda x: x > 2)
   88: 
   89:         expected = DataFrame(
   90:             [[1.5, np.nan, 3], [1.5, np.nan, 3], [1.5, np.nan, 3], [1.5, np.nan, 7.0]]
   91:         )
   92:         tm.assert_frame_equal(df, expected)
   93: 
   94:     @pytest.mark.parametrize(
   95:         "bad_kwarg, exception, msg",
   96:         [
   97:             # errors must be 'ignore' or 'raise'
   98:             ({"errors": "something"}, ValueError, "The parameter errors must.*"),
   99:             ({"join": "inner"}, NotImplementedError, "Only left join is supported"),
  100:         ],
  101:     )
  102:     def test_update_raise_bad_parameter(self, bad_kwarg, exception, msg):
  103:         df = DataFrame([[1.5, 1, 3.0]])
  104:         with pytest.raises(exception, match=msg):
  105:             df.update(df, **bad_kwarg)
  106: 
  107:     def test_update_raise_on_overlap(self):
  108:         df = DataFrame(
  109:             [[1.5, 1, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3], [1.5, np.nan, 3]]
  110:         )
  111: 
  112:         other = DataFrame([[2.0, np.nan], [np.nan, 7]], index=[1, 3], columns=[1, 2])
  113:         with pytest.raises(ValueError, match="Data overlaps"):
  114:             df.update(other, errors="raise")
  115: 
  116:     def test_update_from_non_df(self):
  117:         d = {"a": Series([1, 2, 3, 4]), "b": Series([5, 6, 7, 8])}
  118:         df = DataFrame(d)
  119: 
  120:         d["a"] = Series([5, 6, 7, 8])
  121:         df.update(d)
  122: 
  123:         expected = DataFrame(d)
  124: 
  125:         tm.assert_frame_equal(df, expected)
  126: 
  127:         d = {"a": [1, 2, 3, 4], "b": [5, 6, 7, 8]}
  128:         df = DataFrame(d)
  129: 
  130:         d["a"] = [5, 6, 7, 8]
  131:         df.update(d)
  132: 
  133:         expected = DataFrame(d)
  134: 
  135:         tm.assert_frame_equal(df, expected)
  136: 
  137:     def test_update_datetime_tz(self):
  138:         # GH 25807
  139:         result = DataFrame([pd.Timestamp("2019", tz="UTC")])
  140:         with tm.assert_produces_warning(None):
  141:             result.update(result)
  142:         expected = DataFrame([pd.Timestamp("2019", tz="UTC")])
  143:         tm.assert_frame_equal(result, expected)
  144: 
  145:     def test_update_datetime_tz_in_place(self, using_copy_on_write, warn_copy_on_write):
  146:         # https://github.com/pandas-dev/pandas/issues/56227
  147:         result = DataFrame([pd.Timestamp("2019", tz="UTC")])
  148:         orig = result.copy()
  149:         view = result[:]
  150:         with tm.assert_produces_warning(
  151:             FutureWarning if warn_copy_on_write else None, match="Setting a value"
  152:         ):
  153:             result.update(result + pd.Timedelta(days=1))
  154:         expected = DataFrame([pd.Timestamp("2019-01-02", tz="UTC")])
  155:         tm.assert_frame_equal(result, expected)
  156:         if not using_copy_on_write:
  157:             tm.assert_frame_equal(view, expected)
  158:         else:
  159:             tm.assert_frame_equal(view, orig)
  160: 
  161:     def test_update_with_different_dtype(self, using_copy_on_write):
  162:         # GH#3217
  163:         df = DataFrame({"a": [1, 3], "b": [np.nan, 2]})
  164:         df["c"] = np.nan
  165:         with tm.assert_produces_warning(FutureWarning, match="incompatible dtype"):
  166:             df.update({"c": Series(["foo"], index=[0])})
  167: 
  168:         expected = DataFrame(
  169:             {
  170:                 "a": [1, 3],
  171:                 "b": [np.nan, 2],
  172:                 "c": Series(["foo", np.nan], dtype="object"),
  173:             }
  174:         )
  175:         tm.assert_frame_equal(df, expected)
  176: 
  177:     @td.skip_array_manager_invalid_test
  178:     def test_update_modify_view(
  179:         self, using_copy_on_write, warn_copy_on_write, using_infer_string
  180:     ):
  181:         # GH#47188
  182:         df = DataFrame({"A": ["1", np.nan], "B": ["100", np.nan]})
  183:         df2 = DataFrame({"A": ["a", "x"], "B": ["100", "200"]})
  184:         df2_orig = df2.copy()
  185:         result_view = df2[:]
  186:         # TODO(CoW-warn) better warning message
  187:         with tm.assert_cow_warning(warn_copy_on_write):
  188:             df2.update(df)
  189:         expected = DataFrame({"A": ["1", "x"], "B": ["100", "200"]})
  190:         tm.assert_frame_equal(df2, expected)
  191:         if using_copy_on_write or using_infer_string:
  192:             tm.assert_frame_equal(result_view, df2_orig)
  193:         else:
  194:             tm.assert_frame_equal(result_view, expected)
  195: 
  196:     def test_update_dt_column_with_NaT_create_column(self):
  197:         # GH#16713
  198:         df = DataFrame({"A": [1, None], "B": [pd.NaT, pd.to_datetime("2016-01-01")]})
  199:         df2 = DataFrame({"A": [2, 3]})
  200:         df.update(df2, overwrite=False)
  201:         expected = DataFrame(
  202:             {"A": [1.0, 3.0], "B": [pd.NaT, pd.to_datetime("2016-01-01")]}
  203:         )
  204:         tm.assert_frame_equal(df, expected)
