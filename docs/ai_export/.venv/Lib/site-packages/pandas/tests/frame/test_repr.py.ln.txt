    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4: )
    5: from io import StringIO
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas._config import using_pyarrow_string_dtype
   11: 
   12: from pandas import (
   13:     NA,
   14:     Categorical,
   15:     CategoricalIndex,
   16:     DataFrame,
   17:     IntervalIndex,
   18:     MultiIndex,
   19:     NaT,
   20:     PeriodIndex,
   21:     Series,
   22:     Timestamp,
   23:     date_range,
   24:     option_context,
   25:     period_range,
   26: )
   27: import pandas._testing as tm
   28: 
   29: 
   30: class TestDataFrameRepr:
   31:     def test_repr_should_return_str(self):
   32:         # https://docs.python.org/3/reference/datamodel.html#object.__repr__
   33:         # "...The return value must be a string object."
   34: 
   35:         # (str on py2.x, str (unicode) on py3)
   36: 
   37:         data = [8, 5, 3, 5]
   38:         index1 = ["\u03c3", "\u03c4", "\u03c5", "\u03c6"]
   39:         cols = ["\u03c8"]
   40:         df = DataFrame(data, columns=cols, index=index1)
   41:         assert type(df.__repr__()) is str  # noqa: E721
   42: 
   43:         ser = df[cols[0]]
   44:         assert type(ser.__repr__()) is str  # noqa: E721
   45: 
   46:     def test_repr_bytes_61_lines(self):
   47:         # GH#12857
   48:         lets = list("ACDEFGHIJKLMNOP")
   49:         words = np.random.default_rng(2).choice(lets, (1000, 50))
   50:         df = DataFrame(words).astype("U1")
   51:         assert (df.dtypes == object).all()
   52: 
   53:         # smoke tests; at one point this raised with 61 but not 60
   54:         repr(df)
   55:         repr(df.iloc[:60, :])
   56:         repr(df.iloc[:61, :])
   57: 
   58:     def test_repr_unicode_level_names(self, frame_or_series):
   59:         index = MultiIndex.from_tuples([(0, 0), (1, 1)], names=["\u0394", "i1"])
   60: 
   61:         obj = DataFrame(np.random.default_rng(2).standard_normal((2, 4)), index=index)
   62:         obj = tm.get_obj(obj, frame_or_series)
   63:         repr(obj)
   64: 
   65:     def test_assign_index_sequences(self):
   66:         # GH#2200
   67:         df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6], "c": [7, 8, 9]}).set_index(
   68:             ["a", "b"]
   69:         )
   70:         index = list(df.index)
   71:         index[0] = ("faz", "boo")
   72:         df.index = index
   73:         repr(df)
   74: 
   75:         # this travels an improper code path
   76:         index[0] = ["faz", "boo"]
   77:         df.index = index
   78:         repr(df)
   79: 
   80:     def test_repr_with_mi_nat(self):
   81:         df = DataFrame({"X": [1, 2]}, index=[[NaT, Timestamp("20130101")], ["a", "b"]])
   82:         result = repr(df)
   83:         expected = "              X\nNaT        a  1\n2013-01-01 b  2"
   84:         assert result == expected
   85: 
   86:     def test_repr_with_different_nulls(self):
   87:         # GH45263
   88:         df = DataFrame([1, 2, 3, 4], [True, None, np.nan, NaT])
   89:         result = repr(df)
   90:         expected = """      0
   91: True  1
   92: None  2
   93: NaN   3
   94: NaT   4"""
   95:         assert result == expected
   96: 
   97:     def test_repr_with_different_nulls_cols(self):
   98:         # GH45263
   99:         d = {np.nan: [1, 2], None: [3, 4], NaT: [6, 7], True: [8, 9]}
  100:         df = DataFrame(data=d)
  101:         result = repr(df)
  102:         expected = """   NaN  None  NaT  True
  103: 0    1     3    6     8
  104: 1    2     4    7     9"""
  105:         assert result == expected
  106: 
  107:     def test_multiindex_na_repr(self):
  108:         # only an issue with long columns
  109:         df3 = DataFrame(
  110:             {
  111:                 "A" * 30: {("A", "A0006000", "nuit"): "A0006000"},
  112:                 "B" * 30: {("A", "A0006000", "nuit"): np.nan},
  113:                 "C" * 30: {("A", "A0006000", "nuit"): np.nan},
  114:                 "D" * 30: {("A", "A0006000", "nuit"): np.nan},
  115:                 "E" * 30: {("A", "A0006000", "nuit"): "A"},
  116:                 "F" * 30: {("A", "A0006000", "nuit"): np.nan},
  117:             }
  118:         )
  119: 
  120:         idf = df3.set_index(["A" * 30, "C" * 30])
  121:         repr(idf)
  122: 
  123:     def test_repr_name_coincide(self):
  124:         index = MultiIndex.from_tuples(
  125:             [("a", 0, "foo"), ("b", 1, "bar")], names=["a", "b", "c"]
  126:         )
  127: 
  128:         df = DataFrame({"value": [0, 1]}, index=index)
  129: 
  130:         lines = repr(df).split("\n")
  131:         assert lines[2].startswith("a 0 foo")
  132: 
  133:     def test_repr_to_string(
  134:         self,
  135:         multiindex_year_month_day_dataframe_random_data,
  136:         multiindex_dataframe_random_data,
  137:     ):
  138:         ymd = multiindex_year_month_day_dataframe_random_data
  139:         frame = multiindex_dataframe_random_data
  140: 
  141:         repr(frame)
  142:         repr(ymd)
  143:         repr(frame.T)
  144:         repr(ymd.T)
  145: 
  146:         buf = StringIO()
  147:         frame.to_string(buf=buf)
  148:         ymd.to_string(buf=buf)
  149:         frame.T.to_string(buf=buf)
  150:         ymd.T.to_string(buf=buf)
  151: 
  152:     def test_repr_empty(self):
  153:         # empty
  154:         repr(DataFrame())
  155: 
  156:         # empty with index
  157:         frame = DataFrame(index=np.arange(1000))
  158:         repr(frame)
  159: 
  160:     def test_repr_mixed(self, float_string_frame):
  161:         # mixed
  162:         repr(float_string_frame)
  163: 
  164:     @pytest.mark.slow
  165:     def test_repr_mixed_big(self):
  166:         # big mixed
  167:         biggie = DataFrame(
  168:             {
  169:                 "A": np.random.default_rng(2).standard_normal(200),
  170:                 "B": [str(i) for i in range(200)],
  171:             },
  172:             index=range(200),
  173:         )
  174:         biggie.loc[:20, "A"] = np.nan
  175:         biggie.loc[:20, "B"] = np.nan
  176: 
  177:         repr(biggie)
  178: 
  179:     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="/r in")
  180:     def test_repr(self):
  181:         # columns but no index
  182:         no_index = DataFrame(columns=[0, 1, 3])
  183:         repr(no_index)
  184: 
  185:         df = DataFrame(["a\n\r\tb"], columns=["a\n\r\td"], index=["a\n\r\tf"])
  186:         assert "\t" not in repr(df)
  187:         assert "\r" not in repr(df)
  188:         assert "a\n" not in repr(df)
  189: 
  190:     def test_repr_dimensions(self):
  191:         df = DataFrame([[1, 2], [3, 4]])
  192:         with option_context("display.show_dimensions", True):
  193:             assert "2 rows x 2 columns" in repr(df)
  194: 
  195:         with option_context("display.show_dimensions", False):
  196:             assert "2 rows x 2 columns" not in repr(df)
  197: 
  198:         with option_context("display.show_dimensions", "truncate"):
  199:             assert "2 rows x 2 columns" not in repr(df)
  200: 
  201:     @pytest.mark.slow
  202:     def test_repr_big(self):
  203:         # big one
  204:         biggie = DataFrame(np.zeros((200, 4)), columns=range(4), index=range(200))
  205:         repr(biggie)
  206: 
  207:     def test_repr_unsortable(self):
  208:         # columns are not sortable
  209: 
  210:         unsortable = DataFrame(
  211:             {
  212:                 "foo": [1] * 50,
  213:                 datetime.today(): [1] * 50,
  214:                 "bar": ["bar"] * 50,
  215:                 datetime.today() + timedelta(1): ["bar"] * 50,
  216:             },
  217:             index=np.arange(50),
  218:         )
  219:         repr(unsortable)
  220: 
  221:     def test_repr_float_frame_options(self, float_frame):
  222:         repr(float_frame)
  223: 
  224:         with option_context("display.precision", 3):
  225:             repr(float_frame)
  226: 
  227:         with option_context("display.max_rows", 10, "display.max_columns", 2):
  228:             repr(float_frame)
  229: 
  230:         with option_context("display.max_rows", 1000, "display.max_columns", 1000):
  231:             repr(float_frame)
  232: 
  233:     def test_repr_unicode(self):
  234:         uval = "\u03c3\u03c3\u03c3\u03c3"
  235: 
  236:         df = DataFrame({"A": [uval, uval]})
  237: 
  238:         result = repr(df)
  239:         ex_top = "      A"
  240:         assert result.split("\n")[0].rstrip() == ex_top
  241: 
  242:         df = DataFrame({"A": [uval, uval]})
  243:         result = repr(df)
  244:         assert result.split("\n")[0].rstrip() == ex_top
  245: 
  246:     def test_unicode_string_with_unicode(self):
  247:         df = DataFrame({"A": ["\u05d0"]})
  248:         str(df)
  249: 
  250:     def test_repr_unicode_columns(self):
  251:         df = DataFrame({"\u05d0": [1, 2, 3], "\u05d1": [4, 5, 6], "c": [7, 8, 9]})
  252:         repr(df.columns)  # should not raise UnicodeDecodeError
  253: 
  254:     def test_str_to_bytes_raises(self):
  255:         # GH 26447
  256:         df = DataFrame({"A": ["abc"]})
  257:         msg = "^'str' object cannot be interpreted as an integer$"
  258:         with pytest.raises(TypeError, match=msg):
  259:             bytes(df)
  260: 
  261:     def test_very_wide_repr(self):
  262:         df = DataFrame(
  263:             np.random.default_rng(2).standard_normal((10, 20)),
  264:             columns=np.array(["a" * 10] * 20, dtype=object),
  265:         )
  266:         repr(df)
  267: 
  268:     def test_repr_column_name_unicode_truncation_bug(self):
  269:         # #1906
  270:         df = DataFrame(
  271:             {
  272:                 "Id": [7117434],
  273:                 "StringCol": (
  274:                     "Is it possible to modify drop plot code"
  275:                     "so that the output graph is displayed "
  276:                     "in iphone simulator, Is it possible to "
  277:                     "modify drop plot code so that the "
  278:                     "output graph is \xe2\x80\xa8displayed "
  279:                     "in iphone simulator.Now we are adding "
  280:                     "the CSV file externally. I want to Call "
  281:                     "the File through the code.."
  282:                 ),
  283:             }
  284:         )
  285: 
  286:         with option_context("display.max_columns", 20):
  287:             assert "StringCol" in repr(df)
  288: 
  289:     def test_latex_repr(self):
  290:         pytest.importorskip("jinja2")
  291:         expected = r"""\begin{tabular}{llll}
  292: \toprule
  293:  & 0 & 1 & 2 \\
  294: \midrule
  295: 0 & $\alpha$ & b & c \\
  296: 1 & 1 & 2 & 3 \\
  297: \bottomrule
  298: \end{tabular}
  299: """
  300:         with option_context(
  301:             "styler.format.escape", None, "styler.render.repr", "latex"
  302:         ):
  303:             df = DataFrame([[r"$\alpha$", "b", "c"], [1, 2, 3]])
  304:             result = df._repr_latex_()
  305:             assert result == expected
  306: 
  307:         # GH 12182
  308:         assert df._repr_latex_() is None
  309: 
  310:     def test_repr_with_datetimeindex(self):
  311:         df = DataFrame({"A": [1, 2, 3]}, index=date_range("2000", periods=3))
  312:         result = repr(df)
  313:         expected = "            A\n2000-01-01  1\n2000-01-02  2\n2000-01-03  3"
  314:         assert result == expected
  315: 
  316:     def test_repr_with_intervalindex(self):
  317:         # https://github.com/pandas-dev/pandas/pull/24134/files
  318:         df = DataFrame(
  319:             {"A": [1, 2, 3, 4]}, index=IntervalIndex.from_breaks([0, 1, 2, 3, 4])
  320:         )
  321:         result = repr(df)
  322:         expected = "        A\n(0, 1]  1\n(1, 2]  2\n(2, 3]  3\n(3, 4]  4"
  323:         assert result == expected
  324: 
  325:     def test_repr_with_categorical_index(self):
  326:         df = DataFrame({"A": [1, 2, 3]}, index=CategoricalIndex(["a", "b", "c"]))
  327:         result = repr(df)
  328:         expected = "   A\na  1\nb  2\nc  3"
  329:         assert result == expected
  330: 
  331:     def test_repr_categorical_dates_periods(self):
  332:         # normal DataFrame
  333:         dt = date_range("2011-01-01 09:00", freq="h", periods=5, tz="US/Eastern")
  334:         p = period_range("2011-01", freq="M", periods=5)
  335:         df = DataFrame({"dt": dt, "p": p})
  336:         exp = """                         dt        p
  337: 0 2011-01-01 09:00:00-05:00  2011-01
  338: 1 2011-01-01 10:00:00-05:00  2011-02
  339: 2 2011-01-01 11:00:00-05:00  2011-03
  340: 3 2011-01-01 12:00:00-05:00  2011-04
  341: 4 2011-01-01 13:00:00-05:00  2011-05"""
  342: 
  343:         assert repr(df) == exp
  344: 
  345:         df2 = DataFrame({"dt": Categorical(dt), "p": Categorical(p)})
  346:         assert repr(df2) == exp
  347: 
  348:     @pytest.mark.parametrize("arg", [np.datetime64, np.timedelta64])
  349:     @pytest.mark.parametrize(
  350:         "box, expected",
  351:         [[Series, "0    NaT\ndtype: object"], [DataFrame, "     0\n0  NaT"]],
  352:     )
  353:     def test_repr_np_nat_with_object(self, arg, box, expected):
  354:         # GH 25445
  355:         result = repr(box([arg("NaT")], dtype=object))
  356:         assert result == expected
  357: 
  358:     def test_frame_datetime64_pre1900_repr(self):
  359:         df = DataFrame({"year": date_range("1/1/1700", periods=50, freq="YE-DEC")})
  360:         # it works!
  361:         repr(df)
  362: 
  363:     def test_frame_to_string_with_periodindex(self):
  364:         index = PeriodIndex(["2011-1", "2011-2", "2011-3"], freq="M")
  365:         frame = DataFrame(np.random.default_rng(2).standard_normal((3, 4)), index=index)
  366: 
  367:         # it works!
  368:         frame.to_string()
  369: 
  370:     def test_to_string_ea_na_in_multiindex(self):
  371:         # GH#47986
  372:         df = DataFrame(
  373:             {"a": [1, 2]},
  374:             index=MultiIndex.from_arrays([Series([NA, 1], dtype="Int64")]),
  375:         )
  376: 
  377:         result = df.to_string()
  378:         expected = """      a
  379: <NA>  1
  380: 1     2"""
  381:         assert result == expected
  382: 
  383:     def test_datetime64tz_slice_non_truncate(self):
  384:         # GH 30263
  385:         df = DataFrame({"x": date_range("2019", periods=10, tz="UTC")})
  386:         expected = repr(df)
  387:         df = df.iloc[:, :5]
  388:         result = repr(df)
  389:         assert result == expected
  390: 
  391:     def test_to_records_no_typeerror_in_repr(self):
  392:         # GH 48526
  393:         df = DataFrame([["a", "b"], ["c", "d"], ["e", "f"]], columns=["left", "right"])
  394:         df["record"] = df[["left", "right"]].to_records()
  395:         expected = """  left right     record
  396: 0    a     b  [0, a, b]
  397: 1    c     d  [1, c, d]
  398: 2    e     f  [2, e, f]"""
  399:         result = repr(df)
  400:         assert result == expected
  401: 
  402:     def test_to_records_with_na_record_value(self):
  403:         # GH 48526
  404:         df = DataFrame(
  405:             [["a", np.nan], ["c", "d"], ["e", "f"]], columns=["left", "right"]
  406:         )
  407:         df["record"] = df[["left", "right"]].to_records()
  408:         expected = """  left right       record
  409: 0    a   NaN  [0, a, nan]
  410: 1    c     d    [1, c, d]
  411: 2    e     f    [2, e, f]"""
  412:         result = repr(df)
  413:         assert result == expected
  414: 
  415:     def test_to_records_with_na_record(self):
  416:         # GH 48526
  417:         df = DataFrame(
  418:             [["a", "b"], [np.nan, np.nan], ["e", "f"]], columns=[np.nan, "right"]
  419:         )
  420:         df["record"] = df[[np.nan, "right"]].to_records()
  421:         expected = """   NaN right         record
  422: 0    a     b      [0, a, b]
  423: 1  NaN   NaN  [1, nan, nan]
  424: 2    e     f      [2, e, f]"""
  425:         result = repr(df)
  426:         assert result == expected
  427: 
  428:     def test_to_records_with_inf_as_na_record(self):
  429:         # GH 48526
  430:         expected = """   NaN  inf         record
  431: 0  inf    b    [0, inf, b]
  432: 1  NaN  NaN  [1, nan, nan]
  433: 2    e    f      [2, e, f]"""
  434:         msg = "use_inf_as_na option is deprecated"
  435:         with tm.assert_produces_warning(FutureWarning, match=msg):
  436:             with option_context("use_inf_as_na", True):
  437:                 df = DataFrame(
  438:                     [[np.inf, "b"], [np.nan, np.nan], ["e", "f"]],
  439:                     columns=[np.nan, np.inf],
  440:                 )
  441:                 df["record"] = df[[np.nan, np.inf]].to_records()
  442:                 result = repr(df)
  443:         assert result == expected
  444: 
  445:     def test_to_records_with_inf_record(self):
  446:         # GH 48526
  447:         expected = """   NaN  inf         record
  448: 0  inf    b    [0, inf, b]
  449: 1  NaN  NaN  [1, nan, nan]
  450: 2    e    f      [2, e, f]"""
  451:         msg = "use_inf_as_na option is deprecated"
  452:         with tm.assert_produces_warning(FutureWarning, match=msg):
  453:             with option_context("use_inf_as_na", False):
  454:                 df = DataFrame(
  455:                     [[np.inf, "b"], [np.nan, np.nan], ["e", "f"]],
  456:                     columns=[np.nan, np.inf],
  457:                 )
  458:                 df["record"] = df[[np.nan, np.inf]].to_records()
  459:                 result = repr(df)
  460:         assert result == expected
  461: 
  462:     def test_masked_ea_with_formatter(self):
  463:         # GH#39336
  464:         df = DataFrame(
  465:             {
  466:                 "a": Series([0.123456789, 1.123456789], dtype="Float64"),
  467:                 "b": Series([1, 2], dtype="Int64"),
  468:             }
  469:         )
  470:         result = df.to_string(formatters=["{:.2f}".format, "{:.2f}".format])
  471:         expected = """      a     b
  472: 0  0.12  1.00
  473: 1  1.12  2.00"""
  474:         assert result == expected
  475: 
  476:     def test_repr_ea_columns(self, any_string_dtype):
  477:         # GH#54797
  478:         pytest.importorskip("pyarrow")
  479:         df = DataFrame({"long_column_name": [1, 2, 3], "col2": [4, 5, 6]})
  480:         df.columns = df.columns.astype(any_string_dtype)
  481:         expected = """   long_column_name  col2
  482: 0                 1     4
  483: 1                 2     5
  484: 2                 3     6"""
  485:         assert repr(df) == expected
  486: 
  487: 
  488: @pytest.mark.parametrize(
  489:     "data,output",
  490:     [
  491:         ([2, complex("nan"), 1], [" 2.0+0.0j", " NaN+0.0j", " 1.0+0.0j"]),
  492:         ([2, complex("nan"), -1], [" 2.0+0.0j", " NaN+0.0j", "-1.0+0.0j"]),
  493:         ([-2, complex("nan"), -1], ["-2.0+0.0j", " NaN+0.0j", "-1.0+0.0j"]),
  494:         ([-1.23j, complex("nan"), -1], ["-0.00-1.23j", "  NaN+0.00j", "-1.00+0.00j"]),
  495:         ([1.23j, complex("nan"), 1.23], [" 0.00+1.23j", "  NaN+0.00j", " 1.23+0.00j"]),
  496:         (
  497:             [-1.23j, complex(np.nan, np.nan), 1],
  498:             ["-0.00-1.23j", "  NaN+ NaNj", " 1.00+0.00j"],
  499:         ),
  500:         (
  501:             [-1.23j, complex(1.2, np.nan), 1],
  502:             ["-0.00-1.23j", " 1.20+ NaNj", " 1.00+0.00j"],
  503:         ),
  504:         (
  505:             [-1.23j, complex(np.nan, -1.2), 1],
  506:             ["-0.00-1.23j", "  NaN-1.20j", " 1.00+0.00j"],
  507:         ),
  508:     ],
  509: )
  510: @pytest.mark.parametrize("as_frame", [True, False])
  511: def test_repr_with_complex_nans(data, output, as_frame):
  512:     # GH#53762, GH#53841
  513:     obj = Series(np.array(data))
  514:     if as_frame:
  515:         obj = obj.to_frame(name="val")
  516:         reprs = [f"{i} {val}" for i, val in enumerate(output)]
  517:         expected = f"{'val': >{len(reprs[0])}}\n" + "\n".join(reprs)
  518:     else:
  519:         reprs = [f"{i}   {val}" for i, val in enumerate(output)]
  520:         expected = "\n".join(reprs) + "\ndtype: complex128"
  521:     assert str(obj) == expected, f"\n{str(obj)}\n\n{expected}"
