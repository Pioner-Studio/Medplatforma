    1: import pytest
    2: 
    3: import pandas._testing as tm
    4: 
    5: 
    6: class TestDataFrameTake:
    7:     def test_take_slices_deprecated(self, float_frame):
    8:         # GH#51539
    9:         df = float_frame
   10: 
   11:         slc = slice(0, 4, 1)
   12:         with tm.assert_produces_warning(FutureWarning):
   13:             df.take(slc, axis=0)
   14:         with tm.assert_produces_warning(FutureWarning):
   15:             df.take(slc, axis=1)
   16: 
   17:     def test_take(self, float_frame):
   18:         # homogeneous
   19:         order = [3, 1, 2, 0]
   20:         for df in [float_frame]:
   21:             result = df.take(order, axis=0)
   22:             expected = df.reindex(df.index.take(order))
   23:             tm.assert_frame_equal(result, expected)
   24: 
   25:             # axis = 1
   26:             result = df.take(order, axis=1)
   27:             expected = df.loc[:, ["D", "B", "C", "A"]]
   28:             tm.assert_frame_equal(result, expected, check_names=False)
   29: 
   30:         # negative indices
   31:         order = [2, 1, -1]
   32:         for df in [float_frame]:
   33:             result = df.take(order, axis=0)
   34:             expected = df.reindex(df.index.take(order))
   35:             tm.assert_frame_equal(result, expected)
   36: 
   37:             result = df.take(order, axis=0)
   38:             tm.assert_frame_equal(result, expected)
   39: 
   40:             # axis = 1
   41:             result = df.take(order, axis=1)
   42:             expected = df.loc[:, ["C", "B", "D"]]
   43:             tm.assert_frame_equal(result, expected, check_names=False)
   44: 
   45:         # illegal indices
   46:         msg = "indices are out-of-bounds"
   47:         with pytest.raises(IndexError, match=msg):
   48:             df.take([3, 1, 2, 30], axis=0)
   49:         with pytest.raises(IndexError, match=msg):
   50:             df.take([3, 1, 2, -31], axis=0)
   51:         with pytest.raises(IndexError, match=msg):
   52:             df.take([3, 1, 2, 5], axis=1)
   53:         with pytest.raises(IndexError, match=msg):
   54:             df.take([3, 1, 2, -5], axis=1)
   55: 
   56:     def test_take_mixed_type(self, float_string_frame):
   57:         # mixed-dtype
   58:         order = [4, 1, 2, 0, 3]
   59:         for df in [float_string_frame]:
   60:             result = df.take(order, axis=0)
   61:             expected = df.reindex(df.index.take(order))
   62:             tm.assert_frame_equal(result, expected)
   63: 
   64:             # axis = 1
   65:             result = df.take(order, axis=1)
   66:             expected = df.loc[:, ["foo", "B", "C", "A", "D"]]
   67:             tm.assert_frame_equal(result, expected)
   68: 
   69:         # negative indices
   70:         order = [4, 1, -2]
   71:         for df in [float_string_frame]:
   72:             result = df.take(order, axis=0)
   73:             expected = df.reindex(df.index.take(order))
   74:             tm.assert_frame_equal(result, expected)
   75: 
   76:             # axis = 1
   77:             result = df.take(order, axis=1)
   78:             expected = df.loc[:, ["foo", "B", "D"]]
   79:             tm.assert_frame_equal(result, expected)
   80: 
   81:     def test_take_mixed_numeric(self, mixed_float_frame, mixed_int_frame):
   82:         # by dtype
   83:         order = [1, 2, 0, 3]
   84:         for df in [mixed_float_frame, mixed_int_frame]:
   85:             result = df.take(order, axis=0)
   86:             expected = df.reindex(df.index.take(order))
   87:             tm.assert_frame_equal(result, expected)
   88: 
   89:             # axis = 1
   90:             result = df.take(order, axis=1)
   91:             expected = df.loc[:, ["B", "C", "A", "D"]]
   92:             tm.assert_frame_equal(result, expected)
