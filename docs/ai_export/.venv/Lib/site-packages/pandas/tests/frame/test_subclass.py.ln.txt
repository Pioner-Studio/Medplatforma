    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Index,
    8:     MultiIndex,
    9:     Series,
   10: )
   11: import pandas._testing as tm
   12: 
   13: pytestmark = pytest.mark.filterwarnings(
   14:     "ignore:Passing a BlockManager|Passing a SingleBlockManager:DeprecationWarning"
   15: )
   16: 
   17: 
   18: @pytest.fixture()
   19: def gpd_style_subclass_df():
   20:     class SubclassedDataFrame(DataFrame):
   21:         @property
   22:         def _constructor(self):
   23:             return SubclassedDataFrame
   24: 
   25:     return SubclassedDataFrame({"a": [1, 2, 3]})
   26: 
   27: 
   28: class TestDataFrameSubclassing:
   29:     def test_no_warning_on_mgr(self):
   30:         # GH#57032
   31:         df = tm.SubclassedDataFrame(
   32:             {"X": [1, 2, 3], "Y": [1, 2, 3]}, index=["a", "b", "c"]
   33:         )
   34:         with tm.assert_produces_warning(None):
   35:             # df.isna() goes through _constructor_from_mgr, which we want to
   36:             #  *not* pass a Manager do __init__
   37:             df.isna()
   38:             df["X"].isna()
   39: 
   40:     def test_frame_subclassing_and_slicing(self):
   41:         # Subclass frame and ensure it returns the right class on slicing it
   42:         # In reference to PR 9632
   43: 
   44:         class CustomSeries(Series):
   45:             @property
   46:             def _constructor(self):
   47:                 return CustomSeries
   48: 
   49:             def custom_series_function(self):
   50:                 return "OK"
   51: 
   52:         class CustomDataFrame(DataFrame):
   53:             """
   54:             Subclasses pandas DF, fills DF with simulation results, adds some
   55:             custom plotting functions.
   56:             """
   57: 
   58:             def __init__(self, *args, **kw) -> None:
   59:                 super().__init__(*args, **kw)
   60: 
   61:             @property
   62:             def _constructor(self):
   63:                 return CustomDataFrame
   64: 
   65:             _constructor_sliced = CustomSeries
   66: 
   67:             def custom_frame_function(self):
   68:                 return "OK"
   69: 
   70:         data = {"col1": range(10), "col2": range(10)}
   71:         cdf = CustomDataFrame(data)
   72: 
   73:         # Did we get back our own DF class?
   74:         assert isinstance(cdf, CustomDataFrame)
   75: 
   76:         # Do we get back our own Series class after selecting a column?
   77:         cdf_series = cdf.col1
   78:         assert isinstance(cdf_series, CustomSeries)
   79:         assert cdf_series.custom_series_function() == "OK"
   80: 
   81:         # Do we get back our own DF class after slicing row-wise?
   82:         cdf_rows = cdf[1:5]
   83:         assert isinstance(cdf_rows, CustomDataFrame)
   84:         assert cdf_rows.custom_frame_function() == "OK"
   85: 
   86:         # Make sure sliced part of multi-index frame is custom class
   87:         mcol = MultiIndex.from_tuples([("A", "A"), ("A", "B")])
   88:         cdf_multi = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
   89:         assert isinstance(cdf_multi["A"], CustomDataFrame)
   90: 
   91:         mcol = MultiIndex.from_tuples([("A", ""), ("B", "")])
   92:         cdf_multi2 = CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
   93:         assert isinstance(cdf_multi2["A"], CustomSeries)
   94: 
   95:     def test_dataframe_metadata(self):
   96:         df = tm.SubclassedDataFrame(
   97:             {"X": [1, 2, 3], "Y": [1, 2, 3]}, index=["a", "b", "c"]
   98:         )
   99:         df.testattr = "XXX"
  100: 
  101:         assert df.testattr == "XXX"
  102:         assert df[["X"]].testattr == "XXX"
  103:         assert df.loc[["a", "b"], :].testattr == "XXX"
  104:         assert df.iloc[[0, 1], :].testattr == "XXX"
  105: 
  106:         # see gh-9776
  107:         assert df.iloc[0:1, :].testattr == "XXX"
  108: 
  109:         # see gh-10553
  110:         unpickled = tm.round_trip_pickle(df)
  111:         tm.assert_frame_equal(df, unpickled)
  112:         assert df._metadata == unpickled._metadata
  113:         assert df.testattr == unpickled.testattr
  114: 
  115:     def test_indexing_sliced(self):
  116:         # GH 11559
  117:         df = tm.SubclassedDataFrame(
  118:             {"X": [1, 2, 3], "Y": [4, 5, 6], "Z": [7, 8, 9]}, index=["a", "b", "c"]
  119:         )
  120:         res = df.loc[:, "X"]
  121:         exp = tm.SubclassedSeries([1, 2, 3], index=list("abc"), name="X")
  122:         tm.assert_series_equal(res, exp)
  123:         assert isinstance(res, tm.SubclassedSeries)
  124: 
  125:         res = df.iloc[:, 1]
  126:         exp = tm.SubclassedSeries([4, 5, 6], index=list("abc"), name="Y")
  127:         tm.assert_series_equal(res, exp)
  128:         assert isinstance(res, tm.SubclassedSeries)
  129: 
  130:         res = df.loc[:, "Z"]
  131:         exp = tm.SubclassedSeries([7, 8, 9], index=list("abc"), name="Z")
  132:         tm.assert_series_equal(res, exp)
  133:         assert isinstance(res, tm.SubclassedSeries)
  134: 
  135:         res = df.loc["a", :]
  136:         exp = tm.SubclassedSeries([1, 4, 7], index=list("XYZ"), name="a")
  137:         tm.assert_series_equal(res, exp)
  138:         assert isinstance(res, tm.SubclassedSeries)
  139: 
  140:         res = df.iloc[1, :]
  141:         exp = tm.SubclassedSeries([2, 5, 8], index=list("XYZ"), name="b")
  142:         tm.assert_series_equal(res, exp)
  143:         assert isinstance(res, tm.SubclassedSeries)
  144: 
  145:         res = df.loc["c", :]
  146:         exp = tm.SubclassedSeries([3, 6, 9], index=list("XYZ"), name="c")
  147:         tm.assert_series_equal(res, exp)
  148:         assert isinstance(res, tm.SubclassedSeries)
  149: 
  150:     def test_subclass_attr_err_propagation(self):
  151:         # GH 11808
  152:         class A(DataFrame):
  153:             @property
  154:             def nonexistence(self):
  155:                 return self.i_dont_exist
  156: 
  157:         with pytest.raises(AttributeError, match=".*i_dont_exist.*"):
  158:             A().nonexistence
  159: 
  160:     def test_subclass_align(self):
  161:         # GH 12983
  162:         df1 = tm.SubclassedDataFrame(
  163:             {"a": [1, 3, 5], "b": [1, 3, 5]}, index=list("ACE")
  164:         )
  165:         df2 = tm.SubclassedDataFrame(
  166:             {"c": [1, 2, 4], "d": [1, 2, 4]}, index=list("ABD")
  167:         )
  168: 
  169:         res1, res2 = df1.align(df2, axis=0)
  170:         exp1 = tm.SubclassedDataFrame(
  171:             {"a": [1, np.nan, 3, np.nan, 5], "b": [1, np.nan, 3, np.nan, 5]},
  172:             index=list("ABCDE"),
  173:         )
  174:         exp2 = tm.SubclassedDataFrame(
  175:             {"c": [1, 2, np.nan, 4, np.nan], "d": [1, 2, np.nan, 4, np.nan]},
  176:             index=list("ABCDE"),
  177:         )
  178:         assert isinstance(res1, tm.SubclassedDataFrame)
  179:         tm.assert_frame_equal(res1, exp1)
  180:         assert isinstance(res2, tm.SubclassedDataFrame)
  181:         tm.assert_frame_equal(res2, exp2)
  182: 
  183:         res1, res2 = df1.a.align(df2.c)
  184:         assert isinstance(res1, tm.SubclassedSeries)
  185:         tm.assert_series_equal(res1, exp1.a)
  186:         assert isinstance(res2, tm.SubclassedSeries)
  187:         tm.assert_series_equal(res2, exp2.c)
  188: 
  189:     def test_subclass_align_combinations(self):
  190:         # GH 12983
  191:         df = tm.SubclassedDataFrame({"a": [1, 3, 5], "b": [1, 3, 5]}, index=list("ACE"))
  192:         s = tm.SubclassedSeries([1, 2, 4], index=list("ABD"), name="x")
  193: 
  194:         # frame + series
  195:         res1, res2 = df.align(s, axis=0)
  196:         exp1 = tm.SubclassedDataFrame(
  197:             {"a": [1, np.nan, 3, np.nan, 5], "b": [1, np.nan, 3, np.nan, 5]},
  198:             index=list("ABCDE"),
  199:         )
  200:         # name is lost when
  201:         exp2 = tm.SubclassedSeries(
  202:             [1, 2, np.nan, 4, np.nan], index=list("ABCDE"), name="x"
  203:         )
  204: 
  205:         assert isinstance(res1, tm.SubclassedDataFrame)
  206:         tm.assert_frame_equal(res1, exp1)
  207:         assert isinstance(res2, tm.SubclassedSeries)
  208:         tm.assert_series_equal(res2, exp2)
  209: 
  210:         # series + frame
  211:         res1, res2 = s.align(df)
  212:         assert isinstance(res1, tm.SubclassedSeries)
  213:         tm.assert_series_equal(res1, exp2)
  214:         assert isinstance(res2, tm.SubclassedDataFrame)
  215:         tm.assert_frame_equal(res2, exp1)
  216: 
  217:     def test_subclass_iterrows(self):
  218:         # GH 13977
  219:         df = tm.SubclassedDataFrame({"a": [1]})
  220:         for i, row in df.iterrows():
  221:             assert isinstance(row, tm.SubclassedSeries)
  222:             tm.assert_series_equal(row, df.loc[i])
  223: 
  224:     def test_subclass_stack(self):
  225:         # GH 15564
  226:         df = tm.SubclassedDataFrame(
  227:             [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
  228:             index=["a", "b", "c"],
  229:             columns=["X", "Y", "Z"],
  230:         )
  231: 
  232:         res = df.stack(future_stack=True)
  233:         exp = tm.SubclassedSeries(
  234:             [1, 2, 3, 4, 5, 6, 7, 8, 9], index=[list("aaabbbccc"), list("XYZXYZXYZ")]
  235:         )
  236: 
  237:         tm.assert_series_equal(res, exp)
  238: 
  239:     def test_subclass_stack_multi(self):
  240:         # GH 15564
  241:         df = tm.SubclassedDataFrame(
  242:             [[10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]],
  243:             index=MultiIndex.from_tuples(
  244:                 list(zip(list("AABB"), list("cdcd"))), names=["aaa", "ccc"]
  245:             ),
  246:             columns=MultiIndex.from_tuples(
  247:                 list(zip(list("WWXX"), list("yzyz"))), names=["www", "yyy"]
  248:             ),
  249:         )
  250: 
  251:         exp = tm.SubclassedDataFrame(
  252:             [
  253:                 [10, 12],
  254:                 [11, 13],
  255:                 [20, 22],
  256:                 [21, 23],
  257:                 [30, 32],
  258:                 [31, 33],
  259:                 [40, 42],
  260:                 [41, 43],
  261:             ],
  262:             index=MultiIndex.from_tuples(
  263:                 list(zip(list("AAAABBBB"), list("ccddccdd"), list("yzyzyzyz"))),
  264:                 names=["aaa", "ccc", "yyy"],
  265:             ),
  266:             columns=Index(["W", "X"], name="www"),
  267:         )
  268: 
  269:         res = df.stack(future_stack=True)
  270:         tm.assert_frame_equal(res, exp)
  271: 
  272:         res = df.stack("yyy", future_stack=True)
  273:         tm.assert_frame_equal(res, exp)
  274: 
  275:         exp = tm.SubclassedDataFrame(
  276:             [
  277:                 [10, 11],
  278:                 [12, 13],
  279:                 [20, 21],
  280:                 [22, 23],
  281:                 [30, 31],
  282:                 [32, 33],
  283:                 [40, 41],
  284:                 [42, 43],
  285:             ],
  286:             index=MultiIndex.from_tuples(
  287:                 list(zip(list("AAAABBBB"), list("ccddccdd"), list("WXWXWXWX"))),
  288:                 names=["aaa", "ccc", "www"],
  289:             ),
  290:             columns=Index(["y", "z"], name="yyy"),
  291:         )
  292: 
  293:         res = df.stack("www", future_stack=True)
  294:         tm.assert_frame_equal(res, exp)
  295: 
  296:     def test_subclass_stack_multi_mixed(self):
  297:         # GH 15564
  298:         df = tm.SubclassedDataFrame(
  299:             [
  300:                 [10, 11, 12.0, 13.0],
  301:                 [20, 21, 22.0, 23.0],
  302:                 [30, 31, 32.0, 33.0],
  303:                 [40, 41, 42.0, 43.0],
  304:             ],
  305:             index=MultiIndex.from_tuples(
  306:                 list(zip(list("AABB"), list("cdcd"))), names=["aaa", "ccc"]
  307:             ),
  308:             columns=MultiIndex.from_tuples(
  309:                 list(zip(list("WWXX"), list("yzyz"))), names=["www", "yyy"]
  310:             ),
  311:         )
  312: 
  313:         exp = tm.SubclassedDataFrame(
  314:             [
  315:                 [10, 12.0],
  316:                 [11, 13.0],
  317:                 [20, 22.0],
  318:                 [21, 23.0],
  319:                 [30, 32.0],
  320:                 [31, 33.0],
  321:                 [40, 42.0],
  322:                 [41, 43.0],
  323:             ],
  324:             index=MultiIndex.from_tuples(
  325:                 list(zip(list("AAAABBBB"), list("ccddccdd"), list("yzyzyzyz"))),
  326:                 names=["aaa", "ccc", "yyy"],
  327:             ),
  328:             columns=Index(["W", "X"], name="www"),
  329:         )
  330: 
  331:         res = df.stack(future_stack=True)
  332:         tm.assert_frame_equal(res, exp)
  333: 
  334:         res = df.stack("yyy", future_stack=True)
  335:         tm.assert_frame_equal(res, exp)
  336: 
  337:         exp = tm.SubclassedDataFrame(
  338:             [
  339:                 [10.0, 11.0],
  340:                 [12.0, 13.0],
  341:                 [20.0, 21.0],
  342:                 [22.0, 23.0],
  343:                 [30.0, 31.0],
  344:                 [32.0, 33.0],
  345:                 [40.0, 41.0],
  346:                 [42.0, 43.0],
  347:             ],
  348:             index=MultiIndex.from_tuples(
  349:                 list(zip(list("AAAABBBB"), list("ccddccdd"), list("WXWXWXWX"))),
  350:                 names=["aaa", "ccc", "www"],
  351:             ),
  352:             columns=Index(["y", "z"], name="yyy"),
  353:         )
  354: 
  355:         res = df.stack("www", future_stack=True)
  356:         tm.assert_frame_equal(res, exp)
  357: 
  358:     def test_subclass_unstack(self):
  359:         # GH 15564
  360:         df = tm.SubclassedDataFrame(
  361:             [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
  362:             index=["a", "b", "c"],
  363:             columns=["X", "Y", "Z"],
  364:         )
  365: 
  366:         res = df.unstack()
  367:         exp = tm.SubclassedSeries(
  368:             [1, 4, 7, 2, 5, 8, 3, 6, 9], index=[list("XXXYYYZZZ"), list("abcabcabc")]
  369:         )
  370: 
  371:         tm.assert_series_equal(res, exp)
  372: 
  373:     def test_subclass_unstack_multi(self):
  374:         # GH 15564
  375:         df = tm.SubclassedDataFrame(
  376:             [[10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]],
  377:             index=MultiIndex.from_tuples(
  378:                 list(zip(list("AABB"), list("cdcd"))), names=["aaa", "ccc"]
  379:             ),
  380:             columns=MultiIndex.from_tuples(
  381:                 list(zip(list("WWXX"), list("yzyz"))), names=["www", "yyy"]
  382:             ),
  383:         )
  384: 
  385:         exp = tm.SubclassedDataFrame(
  386:             [[10, 20, 11, 21, 12, 22, 13, 23], [30, 40, 31, 41, 32, 42, 33, 43]],
  387:             index=Index(["A", "B"], name="aaa"),
  388:             columns=MultiIndex.from_tuples(
  389:                 list(zip(list("WWWWXXXX"), list("yyzzyyzz"), list("cdcdcdcd"))),
  390:                 names=["www", "yyy", "ccc"],
  391:             ),
  392:         )
  393: 
  394:         res = df.unstack()
  395:         tm.assert_frame_equal(res, exp)
  396: 
  397:         res = df.unstack("ccc")
  398:         tm.assert_frame_equal(res, exp)
  399: 
  400:         exp = tm.SubclassedDataFrame(
  401:             [[10, 30, 11, 31, 12, 32, 13, 33], [20, 40, 21, 41, 22, 42, 23, 43]],
  402:             index=Index(["c", "d"], name="ccc"),
  403:             columns=MultiIndex.from_tuples(
  404:                 list(zip(list("WWWWXXXX"), list("yyzzyyzz"), list("ABABABAB"))),
  405:                 names=["www", "yyy", "aaa"],
  406:             ),
  407:         )
  408: 
  409:         res = df.unstack("aaa")
  410:         tm.assert_frame_equal(res, exp)
  411: 
  412:     def test_subclass_unstack_multi_mixed(self):
  413:         # GH 15564
  414:         df = tm.SubclassedDataFrame(
  415:             [
  416:                 [10, 11, 12.0, 13.0],
  417:                 [20, 21, 22.0, 23.0],
  418:                 [30, 31, 32.0, 33.0],
  419:                 [40, 41, 42.0, 43.0],
  420:             ],
  421:             index=MultiIndex.from_tuples(
  422:                 list(zip(list("AABB"), list("cdcd"))), names=["aaa", "ccc"]
  423:             ),
  424:             columns=MultiIndex.from_tuples(
  425:                 list(zip(list("WWXX"), list("yzyz"))), names=["www", "yyy"]
  426:             ),
  427:         )
  428: 
  429:         exp = tm.SubclassedDataFrame(
  430:             [
  431:                 [10, 20, 11, 21, 12.0, 22.0, 13.0, 23.0],
  432:                 [30, 40, 31, 41, 32.0, 42.0, 33.0, 43.0],
  433:             ],
  434:             index=Index(["A", "B"], name="aaa"),
  435:             columns=MultiIndex.from_tuples(
  436:                 list(zip(list("WWWWXXXX"), list("yyzzyyzz"), list("cdcdcdcd"))),
  437:                 names=["www", "yyy", "ccc"],
  438:             ),
  439:         )
  440: 
  441:         res = df.unstack()
  442:         tm.assert_frame_equal(res, exp)
  443: 
  444:         res = df.unstack("ccc")
  445:         tm.assert_frame_equal(res, exp)
  446: 
  447:         exp = tm.SubclassedDataFrame(
  448:             [
  449:                 [10, 30, 11, 31, 12.0, 32.0, 13.0, 33.0],
  450:                 [20, 40, 21, 41, 22.0, 42.0, 23.0, 43.0],
  451:             ],
  452:             index=Index(["c", "d"], name="ccc"),
  453:             columns=MultiIndex.from_tuples(
  454:                 list(zip(list("WWWWXXXX"), list("yyzzyyzz"), list("ABABABAB"))),
  455:                 names=["www", "yyy", "aaa"],
  456:             ),
  457:         )
  458: 
  459:         res = df.unstack("aaa")
  460:         tm.assert_frame_equal(res, exp)
  461: 
  462:     def test_subclass_pivot(self):
  463:         # GH 15564
  464:         df = tm.SubclassedDataFrame(
  465:             {
  466:                 "index": ["A", "B", "C", "C", "B", "A"],
  467:                 "columns": ["One", "One", "One", "Two", "Two", "Two"],
  468:                 "values": [1.0, 2.0, 3.0, 3.0, 2.0, 1.0],
  469:             }
  470:         )
  471: 
  472:         pivoted = df.pivot(index="index", columns="columns", values="values")
  473: 
  474:         expected = tm.SubclassedDataFrame(
  475:             {
  476:                 "One": {"A": 1.0, "B": 2.0, "C": 3.0},
  477:                 "Two": {"A": 1.0, "B": 2.0, "C": 3.0},
  478:             }
  479:         )
  480: 
  481:         expected.index.name, expected.columns.name = "index", "columns"
  482: 
  483:         tm.assert_frame_equal(pivoted, expected)
  484: 
  485:     def test_subclassed_melt(self):
  486:         # GH 15564
  487:         cheese = tm.SubclassedDataFrame(
  488:             {
  489:                 "first": ["John", "Mary"],
  490:                 "last": ["Doe", "Bo"],
  491:                 "height": [5.5, 6.0],
  492:                 "weight": [130, 150],
  493:             }
  494:         )
  495: 
  496:         melted = pd.melt(cheese, id_vars=["first", "last"])
  497: 
  498:         expected = tm.SubclassedDataFrame(
  499:             [
  500:                 ["John", "Doe", "height", 5.5],
  501:                 ["Mary", "Bo", "height", 6.0],
  502:                 ["John", "Doe", "weight", 130],
  503:                 ["Mary", "Bo", "weight", 150],
  504:             ],
  505:             columns=["first", "last", "variable", "value"],
  506:         )
  507: 
  508:         tm.assert_frame_equal(melted, expected)
  509: 
  510:     def test_subclassed_wide_to_long(self):
  511:         # GH 9762
  512: 
  513:         x = np.random.default_rng(2).standard_normal(3)
  514:         df = tm.SubclassedDataFrame(
  515:             {
  516:                 "A1970": {0: "a", 1: "b", 2: "c"},
  517:                 "A1980": {0: "d", 1: "e", 2: "f"},
  518:                 "B1970": {0: 2.5, 1: 1.2, 2: 0.7},
  519:                 "B1980": {0: 3.2, 1: 1.3, 2: 0.1},
  520:                 "X": dict(zip(range(3), x)),
  521:             }
  522:         )
  523: 
  524:         df["id"] = df.index
  525:         exp_data = {
  526:             "X": x.tolist() + x.tolist(),
  527:             "A": ["a", "b", "c", "d", "e", "f"],
  528:             "B": [2.5, 1.2, 0.7, 3.2, 1.3, 0.1],
  529:             "year": [1970, 1970, 1970, 1980, 1980, 1980],
  530:             "id": [0, 1, 2, 0, 1, 2],
  531:         }
  532:         expected = tm.SubclassedDataFrame(exp_data)
  533:         expected = expected.set_index(["id", "year"])[["X", "A", "B"]]
  534:         long_frame = pd.wide_to_long(df, ["A", "B"], i="id", j="year")
  535: 
  536:         tm.assert_frame_equal(long_frame, expected)
  537: 
  538:     def test_subclassed_apply(self):
  539:         # GH 19822
  540: 
  541:         def check_row_subclass(row):
  542:             assert isinstance(row, tm.SubclassedSeries)
  543: 
  544:         def stretch(row):
  545:             if row["variable"] == "height":
  546:                 row["value"] += 0.5
  547:             return row
  548: 
  549:         df = tm.SubclassedDataFrame(
  550:             [
  551:                 ["John", "Doe", "height", 5.5],
  552:                 ["Mary", "Bo", "height", 6.0],
  553:                 ["John", "Doe", "weight", 130],
  554:                 ["Mary", "Bo", "weight", 150],
  555:             ],
  556:             columns=["first", "last", "variable", "value"],
  557:         )
  558: 
  559:         df.apply(lambda x: check_row_subclass(x))
  560:         df.apply(lambda x: check_row_subclass(x), axis=1)
  561: 
  562:         expected = tm.SubclassedDataFrame(
  563:             [
  564:                 ["John", "Doe", "height", 6.0],
  565:                 ["Mary", "Bo", "height", 6.5],
  566:                 ["John", "Doe", "weight", 130],
  567:                 ["Mary", "Bo", "weight", 150],
  568:             ],
  569:             columns=["first", "last", "variable", "value"],
  570:         )
  571: 
  572:         result = df.apply(lambda x: stretch(x), axis=1)
  573:         assert isinstance(result, tm.SubclassedDataFrame)
  574:         tm.assert_frame_equal(result, expected)
  575: 
  576:         expected = tm.SubclassedDataFrame([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])
  577: 
  578:         result = df.apply(lambda x: tm.SubclassedSeries([1, 2, 3]), axis=1)
  579:         assert isinstance(result, tm.SubclassedDataFrame)
  580:         tm.assert_frame_equal(result, expected)
  581: 
  582:         result = df.apply(lambda x: [1, 2, 3], axis=1, result_type="expand")
  583:         assert isinstance(result, tm.SubclassedDataFrame)
  584:         tm.assert_frame_equal(result, expected)
  585: 
  586:         expected = tm.SubclassedSeries([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]])
  587: 
  588:         result = df.apply(lambda x: [1, 2, 3], axis=1)
  589:         assert not isinstance(result, tm.SubclassedDataFrame)
  590:         tm.assert_series_equal(result, expected)
  591: 
  592:     def test_subclassed_reductions(self, all_reductions):
  593:         # GH 25596
  594: 
  595:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  596:         result = getattr(df, all_reductions)()
  597:         assert isinstance(result, tm.SubclassedSeries)
  598: 
  599:     def test_subclassed_count(self):
  600:         df = tm.SubclassedDataFrame(
  601:             {
  602:                 "Person": ["John", "Myla", "Lewis", "John", "Myla"],
  603:                 "Age": [24.0, np.nan, 21.0, 33, 26],
  604:                 "Single": [False, True, True, True, False],
  605:             }
  606:         )
  607:         result = df.count()
  608:         assert isinstance(result, tm.SubclassedSeries)
  609: 
  610:         df = tm.SubclassedDataFrame({"A": [1, 0, 3], "B": [0, 5, 6], "C": [7, 8, 0]})
  611:         result = df.count()
  612:         assert isinstance(result, tm.SubclassedSeries)
  613: 
  614:         df = tm.SubclassedDataFrame(
  615:             [[10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]],
  616:             index=MultiIndex.from_tuples(
  617:                 list(zip(list("AABB"), list("cdcd"))), names=["aaa", "ccc"]
  618:             ),
  619:             columns=MultiIndex.from_tuples(
  620:                 list(zip(list("WWXX"), list("yzyz"))), names=["www", "yyy"]
  621:             ),
  622:         )
  623:         result = df.count()
  624:         assert isinstance(result, tm.SubclassedSeries)
  625: 
  626:         df = tm.SubclassedDataFrame()
  627:         result = df.count()
  628:         assert isinstance(result, tm.SubclassedSeries)
  629: 
  630:     def test_isin(self):
  631:         df = tm.SubclassedDataFrame(
  632:             {"num_legs": [2, 4], "num_wings": [2, 0]}, index=["falcon", "dog"]
  633:         )
  634:         result = df.isin([0, 2])
  635:         assert isinstance(result, tm.SubclassedDataFrame)
  636: 
  637:     def test_duplicated(self):
  638:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  639:         result = df.duplicated()
  640:         assert isinstance(result, tm.SubclassedSeries)
  641: 
  642:         df = tm.SubclassedDataFrame()
  643:         result = df.duplicated()
  644:         assert isinstance(result, tm.SubclassedSeries)
  645: 
  646:     @pytest.mark.parametrize("idx_method", ["idxmax", "idxmin"])
  647:     def test_idx(self, idx_method):
  648:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  649:         result = getattr(df, idx_method)()
  650:         assert isinstance(result, tm.SubclassedSeries)
  651: 
  652:     def test_dot(self):
  653:         df = tm.SubclassedDataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])
  654:         s = tm.SubclassedSeries([1, 1, 2, 1])
  655:         result = df.dot(s)
  656:         assert isinstance(result, tm.SubclassedSeries)
  657: 
  658:         df = tm.SubclassedDataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])
  659:         s = tm.SubclassedDataFrame([1, 1, 2, 1])
  660:         result = df.dot(s)
  661:         assert isinstance(result, tm.SubclassedDataFrame)
  662: 
  663:     def test_memory_usage(self):
  664:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  665:         result = df.memory_usage()
  666:         assert isinstance(result, tm.SubclassedSeries)
  667: 
  668:         result = df.memory_usage(index=False)
  669:         assert isinstance(result, tm.SubclassedSeries)
  670: 
  671:     def test_corrwith(self):
  672:         pytest.importorskip("scipy")
  673:         index = ["a", "b", "c", "d", "e"]
  674:         columns = ["one", "two", "three", "four"]
  675:         df1 = tm.SubclassedDataFrame(
  676:             np.random.default_rng(2).standard_normal((5, 4)),
  677:             index=index,
  678:             columns=columns,
  679:         )
  680:         df2 = tm.SubclassedDataFrame(
  681:             np.random.default_rng(2).standard_normal((4, 4)),
  682:             index=index[:4],
  683:             columns=columns,
  684:         )
  685:         correls = df1.corrwith(df2, axis=1, drop=True, method="kendall")
  686: 
  687:         assert isinstance(correls, (tm.SubclassedSeries))
  688: 
  689:     def test_asof(self):
  690:         N = 3
  691:         rng = pd.date_range("1/1/1990", periods=N, freq="53s")
  692:         df = tm.SubclassedDataFrame(
  693:             {
  694:                 "A": [np.nan, np.nan, np.nan],
  695:                 "B": [np.nan, np.nan, np.nan],
  696:                 "C": [np.nan, np.nan, np.nan],
  697:             },
  698:             index=rng,
  699:         )
  700: 
  701:         result = df.asof(rng[-2:])
  702:         assert isinstance(result, tm.SubclassedDataFrame)
  703: 
  704:         result = df.asof(rng[-2])
  705:         assert isinstance(result, tm.SubclassedSeries)
  706: 
  707:         result = df.asof("1989-12-31")
  708:         assert isinstance(result, tm.SubclassedSeries)
  709: 
  710:     def test_idxmin_preserves_subclass(self):
  711:         # GH 28330
  712: 
  713:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  714:         result = df.idxmin()
  715:         assert isinstance(result, tm.SubclassedSeries)
  716: 
  717:     def test_idxmax_preserves_subclass(self):
  718:         # GH 28330
  719: 
  720:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  721:         result = df.idxmax()
  722:         assert isinstance(result, tm.SubclassedSeries)
  723: 
  724:     def test_convert_dtypes_preserves_subclass(self, gpd_style_subclass_df):
  725:         # GH 43668
  726:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  727:         result = df.convert_dtypes()
  728:         assert isinstance(result, tm.SubclassedDataFrame)
  729: 
  730:         result = gpd_style_subclass_df.convert_dtypes()
  731:         assert isinstance(result, type(gpd_style_subclass_df))
  732: 
  733:     def test_astype_preserves_subclass(self):
  734:         # GH#40810
  735:         df = tm.SubclassedDataFrame({"A": [1, 2, 3], "B": [4, 5, 6], "C": [7, 8, 9]})
  736: 
  737:         result = df.astype({"A": np.int64, "B": np.int32, "C": np.float64})
  738:         assert isinstance(result, tm.SubclassedDataFrame)
  739: 
  740:     def test_equals_subclass(self):
  741:         # https://github.com/pandas-dev/pandas/pull/34402
  742:         # allow subclass in both directions
  743:         df1 = DataFrame({"a": [1, 2, 3]})
  744:         df2 = tm.SubclassedDataFrame({"a": [1, 2, 3]})
  745:         assert df1.equals(df2)
  746:         assert df2.equals(df1)
  747: 
  748:     def test_replace_list_method(self):
  749:         # https://github.com/pandas-dev/pandas/pull/46018
  750:         df = tm.SubclassedDataFrame({"A": [0, 1, 2]})
  751:         msg = "The 'method' keyword in SubclassedDataFrame.replace is deprecated"
  752:         with tm.assert_produces_warning(
  753:             FutureWarning, match=msg, raise_on_extra_warnings=False
  754:         ):
  755:             result = df.replace([1, 2], method="ffill")
  756:         expected = tm.SubclassedDataFrame({"A": [0, 0, 0]})
  757:         assert isinstance(result, tm.SubclassedDataFrame)
  758:         tm.assert_frame_equal(result, expected)
  759: 
  760: 
  761: class MySubclassWithMetadata(DataFrame):
  762:     _metadata = ["my_metadata"]
  763: 
  764:     def __init__(self, *args, **kwargs) -> None:
  765:         super().__init__(*args, **kwargs)
  766: 
  767:         my_metadata = kwargs.pop("my_metadata", None)
  768:         if args and isinstance(args[0], MySubclassWithMetadata):
  769:             my_metadata = args[0].my_metadata  # type: ignore[has-type]
  770:         self.my_metadata = my_metadata
  771: 
  772:     @property
  773:     def _constructor(self):
  774:         return MySubclassWithMetadata
  775: 
  776: 
  777: def test_constructor_with_metadata():
  778:     # https://github.com/pandas-dev/pandas/pull/54922
  779:     # https://github.com/pandas-dev/pandas/issues/55120
  780:     df = MySubclassWithMetadata(
  781:         np.random.default_rng(2).random((5, 3)), columns=["A", "B", "C"]
  782:     )
  783:     subset = df[["A", "B"]]
  784:     assert isinstance(subset, MySubclassWithMetadata)
  785: 
  786: 
  787: class SimpleDataFrameSubClass(DataFrame):
  788:     """A subclass of DataFrame that does not define a constructor."""
  789: 
  790: 
  791: class SimpleSeriesSubClass(Series):
  792:     """A subclass of Series that does not define a constructor."""
  793: 
  794: 
  795: class TestSubclassWithoutConstructor:
  796:     def test_copy_df(self):
  797:         expected = DataFrame({"a": [1, 2, 3]})
  798:         result = SimpleDataFrameSubClass(expected).copy()
  799: 
  800:         assert (
  801:             type(result) is DataFrame
  802:         )  # assert_frame_equal only checks isinstance(lhs, type(rhs))
  803:         tm.assert_frame_equal(result, expected)
  804: 
  805:     def test_copy_series(self):
  806:         expected = Series([1, 2, 3])
  807:         result = SimpleSeriesSubClass(expected).copy()
  808: 
  809:         tm.assert_series_equal(result, expected)
  810: 
  811:     def test_series_to_frame(self):
  812:         orig = Series([1, 2, 3])
  813:         expected = orig.to_frame()
  814:         result = SimpleSeriesSubClass(orig).to_frame()
  815: 
  816:         assert (
  817:             type(result) is DataFrame
  818:         )  # assert_frame_equal only checks isinstance(lhs, type(rhs))
  819:         tm.assert_frame_equal(result, expected)
  820: 
  821:     def test_groupby(self):
  822:         df = SimpleDataFrameSubClass(DataFrame({"a": [1, 2, 3]}))
  823: 
  824:         for _, v in df.groupby("a"):
  825:             assert type(v) is DataFrame
