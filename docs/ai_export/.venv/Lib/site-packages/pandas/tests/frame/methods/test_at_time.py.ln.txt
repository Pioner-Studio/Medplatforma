    1: from datetime import time
    2: 
    3: import numpy as np
    4: import pytest
    5: import pytz
    6: 
    7: from pandas._libs.tslibs import timezones
    8: 
    9: from pandas import (
   10:     DataFrame,
   11:     date_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestAtTime:
   17:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
   18:     def test_localized_at_time(self, tzstr, frame_or_series):
   19:         tz = timezones.maybe_get_tz(tzstr)
   20: 
   21:         rng = date_range("4/16/2012", "5/1/2012", freq="h")
   22:         ts = frame_or_series(
   23:             np.random.default_rng(2).standard_normal(len(rng)), index=rng
   24:         )
   25: 
   26:         ts_local = ts.tz_localize(tzstr)
   27: 
   28:         result = ts_local.at_time(time(10, 0))
   29:         expected = ts.at_time(time(10, 0)).tz_localize(tzstr)
   30:         tm.assert_equal(result, expected)
   31:         assert timezones.tz_compare(result.index.tz, tz)
   32: 
   33:     def test_at_time(self, frame_or_series):
   34:         rng = date_range("1/1/2000", "1/5/2000", freq="5min")
   35:         ts = DataFrame(
   36:             np.random.default_rng(2).standard_normal((len(rng), 2)), index=rng
   37:         )
   38:         ts = tm.get_obj(ts, frame_or_series)
   39:         rs = ts.at_time(rng[1])
   40:         assert (rs.index.hour == rng[1].hour).all()
   41:         assert (rs.index.minute == rng[1].minute).all()
   42:         assert (rs.index.second == rng[1].second).all()
   43: 
   44:         result = ts.at_time("9:30")
   45:         expected = ts.at_time(time(9, 30))
   46:         tm.assert_equal(result, expected)
   47: 
   48:     def test_at_time_midnight(self, frame_or_series):
   49:         # midnight, everything
   50:         rng = date_range("1/1/2000", "1/31/2000")
   51:         ts = DataFrame(
   52:             np.random.default_rng(2).standard_normal((len(rng), 3)), index=rng
   53:         )
   54:         ts = tm.get_obj(ts, frame_or_series)
   55: 
   56:         result = ts.at_time(time(0, 0))
   57:         tm.assert_equal(result, ts)
   58: 
   59:     def test_at_time_nonexistent(self, frame_or_series):
   60:         # time doesn't exist
   61:         rng = date_range("1/1/2012", freq="23Min", periods=384)
   62:         ts = DataFrame(np.random.default_rng(2).standard_normal(len(rng)), rng)
   63:         ts = tm.get_obj(ts, frame_or_series)
   64:         rs = ts.at_time("16:00")
   65:         assert len(rs) == 0
   66: 
   67:     @pytest.mark.parametrize(
   68:         "hour", ["1:00", "1:00AM", time(1), time(1, tzinfo=pytz.UTC)]
   69:     )
   70:     def test_at_time_errors(self, hour):
   71:         # GH#24043
   72:         dti = date_range("2018", periods=3, freq="h")
   73:         df = DataFrame(list(range(len(dti))), index=dti)
   74:         if getattr(hour, "tzinfo", None) is None:
   75:             result = df.at_time(hour)
   76:             expected = df.iloc[1:2]
   77:             tm.assert_frame_equal(result, expected)
   78:         else:
   79:             with pytest.raises(ValueError, match="Index must be timezone"):
   80:                 df.at_time(hour)
   81: 
   82:     def test_at_time_tz(self):
   83:         # GH#24043
   84:         dti = date_range("2018", periods=3, freq="h", tz="US/Pacific")
   85:         df = DataFrame(list(range(len(dti))), index=dti)
   86:         result = df.at_time(time(4, tzinfo=pytz.timezone("US/Eastern")))
   87:         expected = df.iloc[1:2]
   88:         tm.assert_frame_equal(result, expected)
   89: 
   90:     def test_at_time_raises(self, frame_or_series):
   91:         # GH#20725
   92:         obj = DataFrame([[1, 2, 3], [4, 5, 6]])
   93:         obj = tm.get_obj(obj, frame_or_series)
   94:         msg = "Index must be DatetimeIndex"
   95:         with pytest.raises(TypeError, match=msg):  # index is not a DatetimeIndex
   96:             obj.at_time("00:00")
   97: 
   98:     @pytest.mark.parametrize("axis", ["index", "columns", 0, 1])
   99:     def test_at_time_axis(self, axis):
  100:         # issue 8839
  101:         rng = date_range("1/1/2000", "1/5/2000", freq="5min")
  102:         ts = DataFrame(np.random.default_rng(2).standard_normal((len(rng), len(rng))))
  103:         ts.index, ts.columns = rng, rng
  104: 
  105:         indices = rng[(rng.hour == 9) & (rng.minute == 30) & (rng.second == 0)]
  106: 
  107:         if axis in ["index", 0]:
  108:             expected = ts.loc[indices, :]
  109:         elif axis in ["columns", 1]:
  110:             expected = ts.loc[:, indices]
  111: 
  112:         result = ts.at_time("9:30", axis=axis)
  113: 
  114:         # Without clearing freq, result has freq 1440T and expected 5T
  115:         result.index = result.index._with_freq(None)
  116:         expected.index = expected.index._with_freq(None)
  117:         tm.assert_frame_equal(result, expected)
  118: 
  119:     def test_at_time_datetimeindex(self):
  120:         index = date_range("2012-01-01", "2012-01-05", freq="30min")
  121:         df = DataFrame(
  122:             np.random.default_rng(2).standard_normal((len(index), 5)), index=index
  123:         )
  124:         akey = time(12, 0, 0)
  125:         ainds = [24, 72, 120, 168]
  126: 
  127:         result = df.at_time(akey)
  128:         expected = df.loc[akey]
  129:         expected2 = df.iloc[ainds]
  130:         tm.assert_frame_equal(result, expected)
  131:         tm.assert_frame_equal(result, expected2)
  132:         assert len(result) == 4
