    1: import re
    2: import sys
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Series,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: @pytest.mark.parametrize("subset", ["a", ["a"], ["a", "B"]])
   16: def test_duplicated_with_misspelled_column_name(subset):
   17:     # GH 19730
   18:     df = DataFrame({"A": [0, 0, 1], "B": [0, 0, 1], "C": [0, 0, 1]})
   19:     msg = re.escape("Index(['a'], dtype=")
   20: 
   21:     with pytest.raises(KeyError, match=msg):
   22:         df.duplicated(subset)
   23: 
   24: 
   25: def test_duplicated_implemented_no_recursion():
   26:     # gh-21524
   27:     # Ensure duplicated isn't implemented using recursion that
   28:     # can fail on wide frames
   29:     df = DataFrame(np.random.default_rng(2).integers(0, 1000, (10, 1000)))
   30:     rec_limit = sys.getrecursionlimit()
   31:     try:
   32:         sys.setrecursionlimit(100)
   33:         result = df.duplicated()
   34:     finally:
   35:         sys.setrecursionlimit(rec_limit)
   36: 
   37:     # Then duplicates produce the bool Series as a result and don't fail during
   38:     # calculation. Actual values doesn't matter here, though usually it's all
   39:     # False in this case
   40:     assert isinstance(result, Series)
   41:     assert result.dtype == np.bool_
   42: 
   43: 
   44: @pytest.mark.parametrize(
   45:     "keep, expected",
   46:     [
   47:         ("first", Series([False, False, True, False, True])),
   48:         ("last", Series([True, True, False, False, False])),
   49:         (False, Series([True, True, True, False, True])),
   50:     ],
   51: )
   52: def test_duplicated_keep(keep, expected):
   53:     df = DataFrame({"A": [0, 1, 1, 2, 0], "B": ["a", "b", "b", "c", "a"]})
   54: 
   55:     result = df.duplicated(keep=keep)
   56:     tm.assert_series_equal(result, expected)
   57: 
   58: 
   59: @pytest.mark.xfail(reason="GH#21720; nan/None falsely considered equal")
   60: @pytest.mark.parametrize(
   61:     "keep, expected",
   62:     [
   63:         ("first", Series([False, False, True, False, True])),
   64:         ("last", Series([True, True, False, False, False])),
   65:         (False, Series([True, True, True, False, True])),
   66:     ],
   67: )
   68: def test_duplicated_nan_none(keep, expected):
   69:     df = DataFrame({"C": [np.nan, 3, 3, None, np.nan], "x": 1}, dtype=object)
   70: 
   71:     result = df.duplicated(keep=keep)
   72:     tm.assert_series_equal(result, expected)
   73: 
   74: 
   75: @pytest.mark.parametrize("subset", [None, ["A", "B"], "A"])
   76: def test_duplicated_subset(subset, keep):
   77:     df = DataFrame(
   78:         {
   79:             "A": [0, 1, 1, 2, 0],
   80:             "B": ["a", "b", "b", "c", "a"],
   81:             "C": [np.nan, 3, 3, None, np.nan],
   82:         }
   83:     )
   84: 
   85:     if subset is None:
   86:         subset = list(df.columns)
   87:     elif isinstance(subset, str):
   88:         # need to have a DataFrame, not a Series
   89:         # -> select columns with singleton list, not string
   90:         subset = [subset]
   91: 
   92:     expected = df[subset].duplicated(keep=keep)
   93:     result = df.duplicated(keep=keep, subset=subset)
   94:     tm.assert_series_equal(result, expected)
   95: 
   96: 
   97: def test_duplicated_on_empty_frame():
   98:     # GH 25184
   99: 
  100:     df = DataFrame(columns=["a", "b"])
  101:     dupes = df.duplicated("a")
  102: 
  103:     result = df[dupes]
  104:     expected = df.copy()
  105:     tm.assert_frame_equal(result, expected)
  106: 
  107: 
  108: def test_frame_datetime64_duplicated():
  109:     dates = date_range("2010-07-01", end="2010-08-05")
  110: 
  111:     tst = DataFrame({"symbol": "AAA", "date": dates})
  112:     result = tst.duplicated(["date", "symbol"])
  113:     assert (-result).all()
  114: 
  115:     tst = DataFrame({"date": dates})
  116:     result = tst.date.duplicated()
  117:     assert (-result).all()
