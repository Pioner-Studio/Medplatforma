    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     MultiIndex,
    8:     Series,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestDataFrameIsIn:
   14:     def test_isin(self):
   15:         # GH#4211
   16:         df = DataFrame(
   17:             {
   18:                 "vals": [1, 2, 3, 4],
   19:                 "ids": ["a", "b", "f", "n"],
   20:                 "ids2": ["a", "n", "c", "n"],
   21:             },
   22:             index=["foo", "bar", "baz", "qux"],
   23:         )
   24:         other = ["a", "b", "c"]
   25: 
   26:         result = df.isin(other)
   27:         expected = DataFrame([df.loc[s].isin(other) for s in df.index])
   28:         tm.assert_frame_equal(result, expected)
   29: 
   30:     @pytest.mark.parametrize("empty", [[], Series(dtype=object), np.array([])])
   31:     def test_isin_empty(self, empty):
   32:         # GH#16991
   33:         df = DataFrame({"A": ["a", "b", "c"], "B": ["a", "e", "f"]})
   34:         expected = DataFrame(False, df.index, df.columns)
   35: 
   36:         result = df.isin(empty)
   37:         tm.assert_frame_equal(result, expected)
   38: 
   39:     def test_isin_dict(self):
   40:         df = DataFrame({"A": ["a", "b", "c"], "B": ["a", "e", "f"]})
   41:         d = {"A": ["a"]}
   42: 
   43:         expected = DataFrame(False, df.index, df.columns)
   44:         expected.loc[0, "A"] = True
   45: 
   46:         result = df.isin(d)
   47:         tm.assert_frame_equal(result, expected)
   48: 
   49:         # non unique columns
   50:         df = DataFrame({"A": ["a", "b", "c"], "B": ["a", "e", "f"]})
   51:         df.columns = ["A", "A"]
   52:         expected = DataFrame(False, df.index, df.columns)
   53:         expected.loc[0, "A"] = True
   54:         result = df.isin(d)
   55:         tm.assert_frame_equal(result, expected)
   56: 
   57:     def test_isin_with_string_scalar(self):
   58:         # GH#4763
   59:         df = DataFrame(
   60:             {
   61:                 "vals": [1, 2, 3, 4],
   62:                 "ids": ["a", "b", "f", "n"],
   63:                 "ids2": ["a", "n", "c", "n"],
   64:             },
   65:             index=["foo", "bar", "baz", "qux"],
   66:         )
   67:         msg = (
   68:             r"only list-like or dict-like objects are allowed "
   69:             r"to be passed to DataFrame.isin\(\), you passed a 'str'"
   70:         )
   71:         with pytest.raises(TypeError, match=msg):
   72:             df.isin("a")
   73: 
   74:         with pytest.raises(TypeError, match=msg):
   75:             df.isin("aaa")
   76: 
   77:     def test_isin_df(self):
   78:         df1 = DataFrame({"A": [1, 2, 3, 4], "B": [2, np.nan, 4, 4]})
   79:         df2 = DataFrame({"A": [0, 2, 12, 4], "B": [2, np.nan, 4, 5]})
   80:         expected = DataFrame(False, df1.index, df1.columns)
   81:         result = df1.isin(df2)
   82:         expected.loc[[1, 3], "A"] = True
   83:         expected.loc[[0, 2], "B"] = True
   84:         tm.assert_frame_equal(result, expected)
   85: 
   86:         # partial overlapping columns
   87:         df2.columns = ["A", "C"]
   88:         result = df1.isin(df2)
   89:         expected["B"] = False
   90:         tm.assert_frame_equal(result, expected)
   91: 
   92:     def test_isin_tuples(self):
   93:         # GH#16394
   94:         df = DataFrame({"A": [1, 2, 3], "B": ["a", "b", "f"]})
   95:         df["C"] = list(zip(df["A"], df["B"]))
   96:         result = df["C"].isin([(1, "a")])
   97:         tm.assert_series_equal(result, Series([True, False, False], name="C"))
   98: 
   99:     def test_isin_df_dupe_values(self):
  100:         df1 = DataFrame({"A": [1, 2, 3, 4], "B": [2, np.nan, 4, 4]})
  101:         # just cols duped
  102:         df2 = DataFrame([[0, 2], [12, 4], [2, np.nan], [4, 5]], columns=["B", "B"])
  103:         msg = r"cannot compute isin with a duplicate axis\."
  104:         with pytest.raises(ValueError, match=msg):
  105:             df1.isin(df2)
  106: 
  107:         # just index duped
  108:         df2 = DataFrame(
  109:             [[0, 2], [12, 4], [2, np.nan], [4, 5]],
  110:             columns=["A", "B"],
  111:             index=[0, 0, 1, 1],
  112:         )
  113:         with pytest.raises(ValueError, match=msg):
  114:             df1.isin(df2)
  115: 
  116:         # cols and index:
  117:         df2.columns = ["B", "B"]
  118:         with pytest.raises(ValueError, match=msg):
  119:             df1.isin(df2)
  120: 
  121:     def test_isin_dupe_self(self):
  122:         other = DataFrame({"A": [1, 0, 1, 0], "B": [1, 1, 0, 0]})
  123:         df = DataFrame([[1, 1], [1, 0], [0, 0]], columns=["A", "A"])
  124:         result = df.isin(other)
  125:         expected = DataFrame(False, index=df.index, columns=df.columns)
  126:         expected.loc[0] = True
  127:         expected.iloc[1, 1] = True
  128:         tm.assert_frame_equal(result, expected)
  129: 
  130:     def test_isin_against_series(self):
  131:         df = DataFrame(
  132:             {"A": [1, 2, 3, 4], "B": [2, np.nan, 4, 4]}, index=["a", "b", "c", "d"]
  133:         )
  134:         s = Series([1, 3, 11, 4], index=["a", "b", "c", "d"])
  135:         expected = DataFrame(False, index=df.index, columns=df.columns)
  136:         expected.loc["a", "A"] = True
  137:         expected.loc["d"] = True
  138:         result = df.isin(s)
  139:         tm.assert_frame_equal(result, expected)
  140: 
  141:     def test_isin_multiIndex(self):
  142:         idx = MultiIndex.from_tuples(
  143:             [
  144:                 (0, "a", "foo"),
  145:                 (0, "a", "bar"),
  146:                 (0, "b", "bar"),
  147:                 (0, "b", "baz"),
  148:                 (2, "a", "foo"),
  149:                 (2, "a", "bar"),
  150:                 (2, "c", "bar"),
  151:                 (2, "c", "baz"),
  152:                 (1, "b", "foo"),
  153:                 (1, "b", "bar"),
  154:                 (1, "c", "bar"),
  155:                 (1, "c", "baz"),
  156:             ]
  157:         )
  158:         df1 = DataFrame({"A": np.ones(12), "B": np.zeros(12)}, index=idx)
  159:         df2 = DataFrame(
  160:             {
  161:                 "A": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1],
  162:                 "B": [1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1],
  163:             }
  164:         )
  165:         # against regular index
  166:         expected = DataFrame(False, index=df1.index, columns=df1.columns)
  167:         result = df1.isin(df2)
  168:         tm.assert_frame_equal(result, expected)
  169: 
  170:         df2.index = idx
  171:         expected = df2.values.astype(bool)
  172:         expected[:, 1] = ~expected[:, 1]
  173:         expected = DataFrame(expected, columns=["A", "B"], index=idx)
  174: 
  175:         result = df1.isin(df2)
  176:         tm.assert_frame_equal(result, expected)
  177: 
  178:     def test_isin_empty_datetimelike(self):
  179:         # GH#15473
  180:         df1_ts = DataFrame({"date": pd.to_datetime(["2014-01-01", "2014-01-02"])})
  181:         df1_td = DataFrame({"date": [pd.Timedelta(1, "s"), pd.Timedelta(2, "s")]})
  182:         df2 = DataFrame({"date": []})
  183:         df3 = DataFrame()
  184: 
  185:         expected = DataFrame({"date": [False, False]})
  186: 
  187:         result = df1_ts.isin(df2)
  188:         tm.assert_frame_equal(result, expected)
  189:         result = df1_ts.isin(df3)
  190:         tm.assert_frame_equal(result, expected)
  191: 
  192:         result = df1_td.isin(df2)
  193:         tm.assert_frame_equal(result, expected)
  194:         result = df1_td.isin(df3)
  195:         tm.assert_frame_equal(result, expected)
  196: 
  197:     @pytest.mark.parametrize(
  198:         "values",
  199:         [
  200:             DataFrame({"a": [1, 2, 3]}, dtype="category"),
  201:             Series([1, 2, 3], dtype="category"),
  202:         ],
  203:     )
  204:     def test_isin_category_frame(self, values):
  205:         # GH#34256
  206:         df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
  207:         expected = DataFrame({"a": [True, True, True], "b": [False, False, False]})
  208: 
  209:         result = df.isin(values)
  210:         tm.assert_frame_equal(result, expected)
  211: 
  212:     def test_isin_read_only(self):
  213:         # https://github.com/pandas-dev/pandas/issues/37174
  214:         arr = np.array([1, 2, 3])
  215:         arr.setflags(write=False)
  216:         df = DataFrame([1, 2, 3])
  217:         result = df.isin(arr)
  218:         expected = DataFrame([True, True, True])
  219:         tm.assert_frame_equal(result, expected)
  220: 
  221:     def test_isin_not_lossy(self):
  222:         # GH 53514
  223:         val = 1666880195890293744
  224:         df = DataFrame({"a": [val], "b": [1.0]})
  225:         result = df.isin([val])
  226:         expected = DataFrame({"a": [True], "b": [False]})
  227:         tm.assert_frame_equal(result, expected)
