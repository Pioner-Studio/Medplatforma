    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     MultiIndex,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestDataFrameRenameAxis:
   13:     def test_rename_axis_inplace(self, float_frame):
   14:         # GH#15704
   15:         expected = float_frame.rename_axis("foo")
   16:         result = float_frame.copy()
   17:         return_value = no_return = result.rename_axis("foo", inplace=True)
   18:         assert return_value is None
   19: 
   20:         assert no_return is None
   21:         tm.assert_frame_equal(result, expected)
   22: 
   23:         expected = float_frame.rename_axis("bar", axis=1)
   24:         result = float_frame.copy()
   25:         return_value = no_return = result.rename_axis("bar", axis=1, inplace=True)
   26:         assert return_value is None
   27: 
   28:         assert no_return is None
   29:         tm.assert_frame_equal(result, expected)
   30: 
   31:     def test_rename_axis_raises(self):
   32:         # GH#17833
   33:         df = DataFrame({"A": [1, 2], "B": [1, 2]})
   34:         with pytest.raises(ValueError, match="Use `.rename`"):
   35:             df.rename_axis(id, axis=0)
   36: 
   37:         with pytest.raises(ValueError, match="Use `.rename`"):
   38:             df.rename_axis({0: 10, 1: 20}, axis=0)
   39: 
   40:         with pytest.raises(ValueError, match="Use `.rename`"):
   41:             df.rename_axis(id, axis=1)
   42: 
   43:         with pytest.raises(ValueError, match="Use `.rename`"):
   44:             df["A"].rename_axis(id)
   45: 
   46:     def test_rename_axis_mapper(self):
   47:         # GH#19978
   48:         mi = MultiIndex.from_product([["a", "b", "c"], [1, 2]], names=["ll", "nn"])
   49:         df = DataFrame(
   50:             {"x": list(range(len(mi))), "y": [i * 10 for i in range(len(mi))]}, index=mi
   51:         )
   52: 
   53:         # Test for rename of the Index object of columns
   54:         result = df.rename_axis("cols", axis=1)
   55:         tm.assert_index_equal(result.columns, Index(["x", "y"], name="cols"))
   56: 
   57:         # Test for rename of the Index object of columns using dict
   58:         result = result.rename_axis(columns={"cols": "new"}, axis=1)
   59:         tm.assert_index_equal(result.columns, Index(["x", "y"], name="new"))
   60: 
   61:         # Test for renaming index using dict
   62:         result = df.rename_axis(index={"ll": "foo"})
   63:         assert result.index.names == ["foo", "nn"]
   64: 
   65:         # Test for renaming index using a function
   66:         result = df.rename_axis(index=str.upper, axis=0)
   67:         assert result.index.names == ["LL", "NN"]
   68: 
   69:         # Test for renaming index providing complete list
   70:         result = df.rename_axis(index=["foo", "goo"])
   71:         assert result.index.names == ["foo", "goo"]
   72: 
   73:         # Test for changing index and columns at same time
   74:         sdf = df.reset_index().set_index("nn").drop(columns=["ll", "y"])
   75:         result = sdf.rename_axis(index="foo", columns="meh")
   76:         assert result.index.name == "foo"
   77:         assert result.columns.name == "meh"
   78: 
   79:         # Test different error cases
   80:         with pytest.raises(TypeError, match="Must pass"):
   81:             df.rename_axis(index="wrong")
   82: 
   83:         with pytest.raises(ValueError, match="Length of names"):
   84:             df.rename_axis(index=["wrong"])
   85: 
   86:         with pytest.raises(TypeError, match="bogus"):
   87:             df.rename_axis(bogus=None)
   88: 
   89:     @pytest.mark.parametrize(
   90:         "kwargs, rename_index, rename_columns",
   91:         [
   92:             ({"mapper": None, "axis": 0}, True, False),
   93:             ({"mapper": None, "axis": 1}, False, True),
   94:             ({"index": None}, True, False),
   95:             ({"columns": None}, False, True),
   96:             ({"index": None, "columns": None}, True, True),
   97:             ({}, False, False),
   98:         ],
   99:     )
  100:     def test_rename_axis_none(self, kwargs, rename_index, rename_columns):
  101:         # GH 25034
  102:         index = Index(list("abc"), name="foo")
  103:         columns = Index(["col1", "col2"], name="bar")
  104:         data = np.arange(6).reshape(3, 2)
  105:         df = DataFrame(data, index, columns)
  106: 
  107:         result = df.rename_axis(**kwargs)
  108:         expected_index = index.rename(None) if rename_index else index
  109:         expected_columns = columns.rename(None) if rename_columns else columns
  110:         expected = DataFrame(data, expected_index, expected_columns)
  111:         tm.assert_frame_equal(result, expected)
