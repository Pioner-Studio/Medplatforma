    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: 
    9: 
   10: def test_error():
   11:     df = pd.DataFrame(
   12:         {"A": pd.Series([[0, 1, 2], np.nan, [], (3, 4)], index=list("abcd")), "B": 1}
   13:     )
   14:     with pytest.raises(
   15:         ValueError, match="column must be a scalar, tuple, or list thereof"
   16:     ):
   17:         df.explode([list("AA")])
   18: 
   19:     with pytest.raises(ValueError, match="column must be unique"):
   20:         df.explode(list("AA"))
   21: 
   22:     df.columns = list("AA")
   23:     with pytest.raises(
   24:         ValueError,
   25:         match=re.escape("DataFrame columns must be unique. Duplicate columns: ['A']"),
   26:     ):
   27:         df.explode("A")
   28: 
   29: 
   30: @pytest.mark.parametrize(
   31:     "input_subset, error_message",
   32:     [
   33:         (
   34:             list("AC"),
   35:             "columns must have matching element counts",
   36:         ),
   37:         (
   38:             [],
   39:             "column must be nonempty",
   40:         ),
   41:         (
   42:             list("AC"),
   43:             "columns must have matching element counts",
   44:         ),
   45:     ],
   46: )
   47: def test_error_multi_columns(input_subset, error_message):
   48:     # GH 39240
   49:     df = pd.DataFrame(
   50:         {
   51:             "A": [[0, 1, 2], np.nan, [], (3, 4)],
   52:             "B": 1,
   53:             "C": [["a", "b", "c"], "foo", [], ["d", "e", "f"]],
   54:         },
   55:         index=list("abcd"),
   56:     )
   57:     with pytest.raises(ValueError, match=error_message):
   58:         df.explode(input_subset)
   59: 
   60: 
   61: @pytest.mark.parametrize(
   62:     "scalar",
   63:     ["a", 0, 1.5, pd.Timedelta("1 days"), pd.Timestamp("2019-12-31")],
   64: )
   65: def test_basic(scalar):
   66:     df = pd.DataFrame(
   67:         {scalar: pd.Series([[0, 1, 2], np.nan, [], (3, 4)], index=list("abcd")), "B": 1}
   68:     )
   69:     result = df.explode(scalar)
   70:     expected = pd.DataFrame(
   71:         {
   72:             scalar: pd.Series(
   73:                 [0, 1, 2, np.nan, np.nan, 3, 4], index=list("aaabcdd"), dtype=object
   74:             ),
   75:             "B": 1,
   76:         }
   77:     )
   78:     tm.assert_frame_equal(result, expected)
   79: 
   80: 
   81: def test_multi_index_rows():
   82:     df = pd.DataFrame(
   83:         {"A": np.array([[0, 1, 2], np.nan, [], (3, 4)], dtype=object), "B": 1},
   84:         index=pd.MultiIndex.from_tuples([("a", 1), ("a", 2), ("b", 1), ("b", 2)]),
   85:     )
   86: 
   87:     result = df.explode("A")
   88:     expected = pd.DataFrame(
   89:         {
   90:             "A": pd.Series(
   91:                 [0, 1, 2, np.nan, np.nan, 3, 4],
   92:                 index=pd.MultiIndex.from_tuples(
   93:                     [
   94:                         ("a", 1),
   95:                         ("a", 1),
   96:                         ("a", 1),
   97:                         ("a", 2),
   98:                         ("b", 1),
   99:                         ("b", 2),
  100:                         ("b", 2),
  101:                     ]
  102:                 ),
  103:                 dtype=object,
  104:             ),
  105:             "B": 1,
  106:         }
  107:     )
  108:     tm.assert_frame_equal(result, expected)
  109: 
  110: 
  111: def test_multi_index_columns():
  112:     df = pd.DataFrame(
  113:         {("A", 1): np.array([[0, 1, 2], np.nan, [], (3, 4)], dtype=object), ("A", 2): 1}
  114:     )
  115: 
  116:     result = df.explode(("A", 1))
  117:     expected = pd.DataFrame(
  118:         {
  119:             ("A", 1): pd.Series(
  120:                 [0, 1, 2, np.nan, np.nan, 3, 4],
  121:                 index=pd.Index([0, 0, 0, 1, 2, 3, 3]),
  122:                 dtype=object,
  123:             ),
  124:             ("A", 2): 1,
  125:         }
  126:     )
  127:     tm.assert_frame_equal(result, expected)
  128: 
  129: 
  130: def test_usecase():
  131:     # explode a single column
  132:     # gh-10511
  133:     df = pd.DataFrame(
  134:         [[11, range(5), 10], [22, range(3), 20]], columns=list("ABC")
  135:     ).set_index("C")
  136:     result = df.explode("B")
  137: 
  138:     expected = pd.DataFrame(
  139:         {
  140:             "A": [11, 11, 11, 11, 11, 22, 22, 22],
  141:             "B": np.array([0, 1, 2, 3, 4, 0, 1, 2], dtype=object),
  142:             "C": [10, 10, 10, 10, 10, 20, 20, 20],
  143:         },
  144:         columns=list("ABC"),
  145:     ).set_index("C")
  146: 
  147:     tm.assert_frame_equal(result, expected)
  148: 
  149:     # gh-8517
  150:     df = pd.DataFrame(
  151:         [["2014-01-01", "Alice", "A B"], ["2014-01-02", "Bob", "C D"]],
  152:         columns=["dt", "name", "text"],
  153:     )
  154:     result = df.assign(text=df.text.str.split(" ")).explode("text")
  155:     expected = pd.DataFrame(
  156:         [
  157:             ["2014-01-01", "Alice", "A"],
  158:             ["2014-01-01", "Alice", "B"],
  159:             ["2014-01-02", "Bob", "C"],
  160:             ["2014-01-02", "Bob", "D"],
  161:         ],
  162:         columns=["dt", "name", "text"],
  163:         index=[0, 0, 1, 1],
  164:     )
  165:     tm.assert_frame_equal(result, expected)
  166: 
  167: 
  168: @pytest.mark.parametrize(
  169:     "input_dict, input_index, expected_dict, expected_index",
  170:     [
  171:         (
  172:             {"col1": [[1, 2], [3, 4]], "col2": ["foo", "bar"]},
  173:             [0, 0],
  174:             {"col1": [1, 2, 3, 4], "col2": ["foo", "foo", "bar", "bar"]},
  175:             [0, 0, 0, 0],
  176:         ),
  177:         (
  178:             {"col1": [[1, 2], [3, 4]], "col2": ["foo", "bar"]},
  179:             pd.Index([0, 0], name="my_index"),
  180:             {"col1": [1, 2, 3, 4], "col2": ["foo", "foo", "bar", "bar"]},
  181:             pd.Index([0, 0, 0, 0], name="my_index"),
  182:         ),
  183:         (
  184:             {"col1": [[1, 2], [3, 4]], "col2": ["foo", "bar"]},
  185:             pd.MultiIndex.from_arrays(
  186:                 [[0, 0], [1, 1]], names=["my_first_index", "my_second_index"]
  187:             ),
  188:             {"col1": [1, 2, 3, 4], "col2": ["foo", "foo", "bar", "bar"]},
  189:             pd.MultiIndex.from_arrays(
  190:                 [[0, 0, 0, 0], [1, 1, 1, 1]],
  191:                 names=["my_first_index", "my_second_index"],
  192:             ),
  193:         ),
  194:         (
  195:             {"col1": [[1, 2], [3, 4]], "col2": ["foo", "bar"]},
  196:             pd.MultiIndex.from_arrays([[0, 0], [1, 1]], names=["my_index", None]),
  197:             {"col1": [1, 2, 3, 4], "col2": ["foo", "foo", "bar", "bar"]},
  198:             pd.MultiIndex.from_arrays(
  199:                 [[0, 0, 0, 0], [1, 1, 1, 1]], names=["my_index", None]
  200:             ),
  201:         ),
  202:     ],
  203: )
  204: def test_duplicate_index(input_dict, input_index, expected_dict, expected_index):
  205:     # GH 28005
  206:     df = pd.DataFrame(input_dict, index=input_index, dtype=object)
  207:     result = df.explode("col1")
  208:     expected = pd.DataFrame(expected_dict, index=expected_index, dtype=object)
  209:     tm.assert_frame_equal(result, expected)
  210: 
  211: 
  212: def test_ignore_index():
  213:     # GH 34932
  214:     df = pd.DataFrame({"id": range(0, 20, 10), "values": [list("ab"), list("cd")]})
  215:     result = df.explode("values", ignore_index=True)
  216:     expected = pd.DataFrame(
  217:         {"id": [0, 0, 10, 10], "values": list("abcd")}, index=[0, 1, 2, 3]
  218:     )
  219:     tm.assert_frame_equal(result, expected)
  220: 
  221: 
  222: def test_explode_sets():
  223:     # https://github.com/pandas-dev/pandas/issues/35614
  224:     df = pd.DataFrame({"a": [{"x", "y"}], "b": [1]}, index=[1])
  225:     result = df.explode(column="a").sort_values(by="a")
  226:     expected = pd.DataFrame({"a": ["x", "y"], "b": [1, 1]}, index=[1, 1])
  227:     tm.assert_frame_equal(result, expected)
  228: 
  229: 
  230: @pytest.mark.parametrize(
  231:     "input_subset, expected_dict, expected_index",
  232:     [
  233:         (
  234:             list("AC"),
  235:             {
  236:                 "A": pd.Series(
  237:                     [0, 1, 2, np.nan, np.nan, 3, 4, np.nan],
  238:                     index=list("aaabcdde"),
  239:                     dtype=object,
  240:                 ),
  241:                 "B": 1,
  242:                 "C": ["a", "b", "c", "foo", np.nan, "d", "e", np.nan],
  243:             },
  244:             list("aaabcdde"),
  245:         ),
  246:         (
  247:             list("A"),
  248:             {
  249:                 "A": pd.Series(
  250:                     [0, 1, 2, np.nan, np.nan, 3, 4, np.nan],
  251:                     index=list("aaabcdde"),
  252:                     dtype=object,
  253:                 ),
  254:                 "B": 1,
  255:                 "C": [
  256:                     ["a", "b", "c"],
  257:                     ["a", "b", "c"],
  258:                     ["a", "b", "c"],
  259:                     "foo",
  260:                     [],
  261:                     ["d", "e"],
  262:                     ["d", "e"],
  263:                     np.nan,
  264:                 ],
  265:             },
  266:             list("aaabcdde"),
  267:         ),
  268:     ],
  269: )
  270: def test_multi_columns(input_subset, expected_dict, expected_index):
  271:     # GH 39240
  272:     df = pd.DataFrame(
  273:         {
  274:             "A": [[0, 1, 2], np.nan, [], (3, 4), np.nan],
  275:             "B": 1,
  276:             "C": [["a", "b", "c"], "foo", [], ["d", "e"], np.nan],
  277:         },
  278:         index=list("abcde"),
  279:     )
  280:     result = df.explode(input_subset)
  281:     expected = pd.DataFrame(expected_dict, expected_index)
  282:     tm.assert_frame_equal(result, expected)
  283: 
  284: 
  285: def test_multi_columns_nan_empty():
  286:     # GH 46084
  287:     df = pd.DataFrame(
  288:         {
  289:             "A": [[0, 1], [5], [], [2, 3]],
  290:             "B": [9, 8, 7, 6],
  291:             "C": [[1, 2], np.nan, [], [3, 4]],
  292:         }
  293:     )
  294:     result = df.explode(["A", "C"])
  295:     expected = pd.DataFrame(
  296:         {
  297:             "A": np.array([0, 1, 5, np.nan, 2, 3], dtype=object),
  298:             "B": [9, 9, 8, 7, 6, 6],
  299:             "C": np.array([1, 2, np.nan, np.nan, 3, 4], dtype=object),
  300:         },
  301:         index=[0, 0, 1, 2, 3, 3],
  302:     )
  303:     tm.assert_frame_equal(result, expected)
