    1: from collections import ChainMap
    2: import inspect
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Index,
   10:     MultiIndex,
   11:     merge,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestRename:
   17:     def test_rename_signature(self):
   18:         sig = inspect.signature(DataFrame.rename)
   19:         parameters = set(sig.parameters)
   20:         assert parameters == {
   21:             "self",
   22:             "mapper",
   23:             "index",
   24:             "columns",
   25:             "axis",
   26:             "inplace",
   27:             "copy",
   28:             "level",
   29:             "errors",
   30:         }
   31: 
   32:     def test_rename_mi(self, frame_or_series):
   33:         obj = frame_or_series(
   34:             [11, 21, 31],
   35:             index=MultiIndex.from_tuples([("A", x) for x in ["a", "B", "c"]]),
   36:         )
   37:         obj.rename(str.lower)
   38: 
   39:     def test_rename(self, float_frame):
   40:         mapping = {"A": "a", "B": "b", "C": "c", "D": "d"}
   41: 
   42:         renamed = float_frame.rename(columns=mapping)
   43:         renamed2 = float_frame.rename(columns=str.lower)
   44: 
   45:         tm.assert_frame_equal(renamed, renamed2)
   46:         tm.assert_frame_equal(
   47:             renamed2.rename(columns=str.upper), float_frame, check_names=False
   48:         )
   49: 
   50:         # index
   51:         data = {"A": {"foo": 0, "bar": 1}}
   52: 
   53:         df = DataFrame(data)
   54:         renamed = df.rename(index={"foo": "bar", "bar": "foo"})
   55:         tm.assert_index_equal(renamed.index, Index(["bar", "foo"]))
   56: 
   57:         renamed = df.rename(index=str.upper)
   58:         tm.assert_index_equal(renamed.index, Index(["FOO", "BAR"]))
   59: 
   60:         # have to pass something
   61:         with pytest.raises(TypeError, match="must pass an index to rename"):
   62:             float_frame.rename()
   63: 
   64:         # partial columns
   65:         renamed = float_frame.rename(columns={"C": "foo", "D": "bar"})
   66:         tm.assert_index_equal(renamed.columns, Index(["A", "B", "foo", "bar"]))
   67: 
   68:         # other axis
   69:         renamed = float_frame.T.rename(index={"C": "foo", "D": "bar"})
   70:         tm.assert_index_equal(renamed.index, Index(["A", "B", "foo", "bar"]))
   71: 
   72:         # index with name
   73:         index = Index(["foo", "bar"], name="name")
   74:         renamer = DataFrame(data, index=index)
   75:         renamed = renamer.rename(index={"foo": "bar", "bar": "foo"})
   76:         tm.assert_index_equal(renamed.index, Index(["bar", "foo"], name="name"))
   77:         assert renamed.index.name == renamer.index.name
   78: 
   79:     @pytest.mark.parametrize(
   80:         "args,kwargs",
   81:         [
   82:             ((ChainMap({"A": "a"}, {"B": "b"}),), {"axis": "columns"}),
   83:             ((), {"columns": ChainMap({"A": "a"}, {"B": "b"})}),
   84:         ],
   85:     )
   86:     def test_rename_chainmap(self, args, kwargs):
   87:         # see gh-23859
   88:         colAData = range(1, 11)
   89:         colBdata = np.random.default_rng(2).standard_normal(10)
   90: 
   91:         df = DataFrame({"A": colAData, "B": colBdata})
   92:         result = df.rename(*args, **kwargs)
   93: 
   94:         expected = DataFrame({"a": colAData, "b": colBdata})
   95:         tm.assert_frame_equal(result, expected)
   96: 
   97:     def test_rename_multiindex(self):
   98:         tuples_index = [("foo1", "bar1"), ("foo2", "bar2")]
   99:         tuples_columns = [("fizz1", "buzz1"), ("fizz2", "buzz2")]
  100:         index = MultiIndex.from_tuples(tuples_index, names=["foo", "bar"])
  101:         columns = MultiIndex.from_tuples(tuples_columns, names=["fizz", "buzz"])
  102:         df = DataFrame([(0, 0), (1, 1)], index=index, columns=columns)
  103: 
  104:         #
  105:         # without specifying level -> across all levels
  106: 
  107:         renamed = df.rename(
  108:             index={"foo1": "foo3", "bar2": "bar3"},
  109:             columns={"fizz1": "fizz3", "buzz2": "buzz3"},
  110:         )
  111:         new_index = MultiIndex.from_tuples(
  112:             [("foo3", "bar1"), ("foo2", "bar3")], names=["foo", "bar"]
  113:         )
  114:         new_columns = MultiIndex.from_tuples(
  115:             [("fizz3", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
  116:         )
  117:         tm.assert_index_equal(renamed.index, new_index)
  118:         tm.assert_index_equal(renamed.columns, new_columns)
  119:         assert renamed.index.names == df.index.names
  120:         assert renamed.columns.names == df.columns.names
  121: 
  122:         #
  123:         # with specifying a level (GH13766)
  124: 
  125:         # dict
  126:         new_columns = MultiIndex.from_tuples(
  127:             [("fizz3", "buzz1"), ("fizz2", "buzz2")], names=["fizz", "buzz"]
  128:         )
  129:         renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=0)
  130:         tm.assert_index_equal(renamed.columns, new_columns)
  131:         renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="fizz")
  132:         tm.assert_index_equal(renamed.columns, new_columns)
  133: 
  134:         new_columns = MultiIndex.from_tuples(
  135:             [("fizz1", "buzz1"), ("fizz2", "buzz3")], names=["fizz", "buzz"]
  136:         )
  137:         renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level=1)
  138:         tm.assert_index_equal(renamed.columns, new_columns)
  139:         renamed = df.rename(columns={"fizz1": "fizz3", "buzz2": "buzz3"}, level="buzz")
  140:         tm.assert_index_equal(renamed.columns, new_columns)
  141: 
  142:         # function
  143:         func = str.upper
  144:         new_columns = MultiIndex.from_tuples(
  145:             [("FIZZ1", "buzz1"), ("FIZZ2", "buzz2")], names=["fizz", "buzz"]
  146:         )
  147:         renamed = df.rename(columns=func, level=0)
  148:         tm.assert_index_equal(renamed.columns, new_columns)
  149:         renamed = df.rename(columns=func, level="fizz")
  150:         tm.assert_index_equal(renamed.columns, new_columns)
  151: 
  152:         new_columns = MultiIndex.from_tuples(
  153:             [("fizz1", "BUZZ1"), ("fizz2", "BUZZ2")], names=["fizz", "buzz"]
  154:         )
  155:         renamed = df.rename(columns=func, level=1)
  156:         tm.assert_index_equal(renamed.columns, new_columns)
  157:         renamed = df.rename(columns=func, level="buzz")
  158:         tm.assert_index_equal(renamed.columns, new_columns)
  159: 
  160:         # index
  161:         new_index = MultiIndex.from_tuples(
  162:             [("foo3", "bar1"), ("foo2", "bar2")], names=["foo", "bar"]
  163:         )
  164:         renamed = df.rename(index={"foo1": "foo3", "bar2": "bar3"}, level=0)
  165:         tm.assert_index_equal(renamed.index, new_index)
  166: 
  167:     def test_rename_nocopy(self, float_frame, using_copy_on_write, warn_copy_on_write):
  168:         renamed = float_frame.rename(columns={"C": "foo"}, copy=False)
  169: 
  170:         assert np.shares_memory(renamed["foo"]._values, float_frame["C"]._values)
  171: 
  172:         with tm.assert_cow_warning(warn_copy_on_write):
  173:             renamed.loc[:, "foo"] = 1.0
  174:         if using_copy_on_write:
  175:             assert not (float_frame["C"] == 1.0).all()
  176:         else:
  177:             assert (float_frame["C"] == 1.0).all()
  178: 
  179:     def test_rename_inplace(self, float_frame):
  180:         float_frame.rename(columns={"C": "foo"})
  181:         assert "C" in float_frame
  182:         assert "foo" not in float_frame
  183: 
  184:         c_values = float_frame["C"]
  185:         float_frame = float_frame.copy()
  186:         return_value = float_frame.rename(columns={"C": "foo"}, inplace=True)
  187:         assert return_value is None
  188: 
  189:         assert "C" not in float_frame
  190:         assert "foo" in float_frame
  191:         # GH 44153
  192:         # Used to be id(float_frame["foo"]) != c_id, but flaky in the CI
  193:         assert float_frame["foo"] is not c_values
  194: 
  195:     def test_rename_bug(self):
  196:         # GH 5344
  197:         # rename set ref_locs, and set_index was not resetting
  198:         df = DataFrame({0: ["foo", "bar"], 1: ["bah", "bas"], 2: [1, 2]})
  199:         df = df.rename(columns={0: "a"})
  200:         df = df.rename(columns={1: "b"})
  201:         df = df.set_index(["a", "b"])
  202:         df.columns = ["2001-01-01"]
  203:         expected = DataFrame(
  204:             [[1], [2]],
  205:             index=MultiIndex.from_tuples(
  206:                 [("foo", "bah"), ("bar", "bas")], names=["a", "b"]
  207:             ),
  208:             columns=["2001-01-01"],
  209:         )
  210:         tm.assert_frame_equal(df, expected)
  211: 
  212:     def test_rename_bug2(self):
  213:         # GH 19497
  214:         # rename was changing Index to MultiIndex if Index contained tuples
  215: 
  216:         df = DataFrame(data=np.arange(3), index=[(0, 0), (1, 1), (2, 2)], columns=["a"])
  217:         df = df.rename({(1, 1): (5, 4)}, axis="index")
  218:         expected = DataFrame(
  219:             data=np.arange(3), index=[(0, 0), (5, 4), (2, 2)], columns=["a"]
  220:         )
  221:         tm.assert_frame_equal(df, expected)
  222: 
  223:     def test_rename_errors_raises(self):
  224:         df = DataFrame(columns=["A", "B", "C", "D"])
  225:         with pytest.raises(KeyError, match="'E'] not found in axis"):
  226:             df.rename(columns={"A": "a", "E": "e"}, errors="raise")
  227: 
  228:     @pytest.mark.parametrize(
  229:         "mapper, errors, expected_columns",
  230:         [
  231:             ({"A": "a", "E": "e"}, "ignore", ["a", "B", "C", "D"]),
  232:             ({"A": "a"}, "raise", ["a", "B", "C", "D"]),
  233:             (str.lower, "raise", ["a", "b", "c", "d"]),
  234:         ],
  235:     )
  236:     def test_rename_errors(self, mapper, errors, expected_columns):
  237:         # GH 13473
  238:         # rename now works with errors parameter
  239:         df = DataFrame(columns=["A", "B", "C", "D"])
  240:         result = df.rename(columns=mapper, errors=errors)
  241:         expected = DataFrame(columns=expected_columns)
  242:         tm.assert_frame_equal(result, expected)
  243: 
  244:     def test_rename_objects(self, float_string_frame):
  245:         renamed = float_string_frame.rename(columns=str.upper)
  246: 
  247:         assert "FOO" in renamed
  248:         assert "foo" not in renamed
  249: 
  250:     def test_rename_axis_style(self):
  251:         # https://github.com/pandas-dev/pandas/issues/12392
  252:         df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["X", "Y"])
  253:         expected = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
  254: 
  255:         result = df.rename(str.lower, axis=1)
  256:         tm.assert_frame_equal(result, expected)
  257: 
  258:         result = df.rename(str.lower, axis="columns")
  259:         tm.assert_frame_equal(result, expected)
  260: 
  261:         result = df.rename({"A": "a", "B": "b"}, axis=1)
  262:         tm.assert_frame_equal(result, expected)
  263: 
  264:         result = df.rename({"A": "a", "B": "b"}, axis="columns")
  265:         tm.assert_frame_equal(result, expected)
  266: 
  267:         # Index
  268:         expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
  269:         result = df.rename(str.lower, axis=0)
  270:         tm.assert_frame_equal(result, expected)
  271: 
  272:         result = df.rename(str.lower, axis="index")
  273:         tm.assert_frame_equal(result, expected)
  274: 
  275:         result = df.rename({"X": "x", "Y": "y"}, axis=0)
  276:         tm.assert_frame_equal(result, expected)
  277: 
  278:         result = df.rename({"X": "x", "Y": "y"}, axis="index")
  279:         tm.assert_frame_equal(result, expected)
  280: 
  281:         result = df.rename(mapper=str.lower, axis="index")
  282:         tm.assert_frame_equal(result, expected)
  283: 
  284:     def test_rename_mapper_multi(self):
  285:         df = DataFrame({"A": ["a", "b"], "B": ["c", "d"], "C": [1, 2]}).set_index(
  286:             ["A", "B"]
  287:         )
  288:         result = df.rename(str.upper)
  289:         expected = df.rename(index=str.upper)
  290:         tm.assert_frame_equal(result, expected)
  291: 
  292:     def test_rename_positional_named(self):
  293:         # https://github.com/pandas-dev/pandas/issues/12392
  294:         df = DataFrame({"a": [1, 2], "b": [1, 2]}, index=["X", "Y"])
  295:         result = df.rename(index=str.lower, columns=str.upper)
  296:         expected = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["x", "y"])
  297:         tm.assert_frame_equal(result, expected)
  298: 
  299:     def test_rename_axis_style_raises(self):
  300:         # see gh-12392
  301:         df = DataFrame({"A": [1, 2], "B": [1, 2]}, index=["0", "1"])
  302: 
  303:         # Named target and axis
  304:         over_spec_msg = "Cannot specify both 'axis' and any of 'index' or 'columns'"
  305:         with pytest.raises(TypeError, match=over_spec_msg):
  306:             df.rename(index=str.lower, axis=1)
  307: 
  308:         with pytest.raises(TypeError, match=over_spec_msg):
  309:             df.rename(index=str.lower, axis="columns")
  310: 
  311:         with pytest.raises(TypeError, match=over_spec_msg):
  312:             df.rename(columns=str.lower, axis="columns")
  313: 
  314:         with pytest.raises(TypeError, match=over_spec_msg):
  315:             df.rename(index=str.lower, axis=0)
  316: 
  317:         # Multiple targets and axis
  318:         with pytest.raises(TypeError, match=over_spec_msg):
  319:             df.rename(str.lower, index=str.lower, axis="columns")
  320: 
  321:         # Too many targets
  322:         over_spec_msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
  323:         with pytest.raises(TypeError, match=over_spec_msg):
  324:             df.rename(str.lower, index=str.lower, columns=str.lower)
  325: 
  326:         # Duplicates
  327:         with pytest.raises(TypeError, match="multiple values"):
  328:             df.rename(id, mapper=id)
  329: 
  330:     def test_rename_positional_raises(self):
  331:         # GH 29136
  332:         df = DataFrame(columns=["A", "B"])
  333:         msg = r"rename\(\) takes from 1 to 2 positional arguments"
  334: 
  335:         with pytest.raises(TypeError, match=msg):
  336:             df.rename(None, str.lower)
  337: 
  338:     def test_rename_no_mappings_raises(self):
  339:         # GH 29136
  340:         df = DataFrame([[1]])
  341:         msg = "must pass an index to rename"
  342:         with pytest.raises(TypeError, match=msg):
  343:             df.rename()
  344: 
  345:         with pytest.raises(TypeError, match=msg):
  346:             df.rename(None, index=None)
  347: 
  348:         with pytest.raises(TypeError, match=msg):
  349:             df.rename(None, columns=None)
  350: 
  351:         with pytest.raises(TypeError, match=msg):
  352:             df.rename(None, columns=None, index=None)
  353: 
  354:     def test_rename_mapper_and_positional_arguments_raises(self):
  355:         # GH 29136
  356:         df = DataFrame([[1]])
  357:         msg = "Cannot specify both 'mapper' and any of 'index' or 'columns'"
  358:         with pytest.raises(TypeError, match=msg):
  359:             df.rename({}, index={})
  360: 
  361:         with pytest.raises(TypeError, match=msg):
  362:             df.rename({}, columns={})
  363: 
  364:         with pytest.raises(TypeError, match=msg):
  365:             df.rename({}, columns={}, index={})
  366: 
  367:     def test_rename_with_duplicate_columns(self):
  368:         # GH#4403
  369:         df4 = DataFrame(
  370:             {"RT": [0.0454], "TClose": [22.02], "TExg": [0.0422]},
  371:             index=MultiIndex.from_tuples(
  372:                 [(600809, 20130331)], names=["STK_ID", "RPT_Date"]
  373:             ),
  374:         )
  375: 
  376:         df5 = DataFrame(
  377:             {
  378:                 "RPT_Date": [20120930, 20121231, 20130331],
  379:                 "STK_ID": [600809] * 3,
  380:                 "STK_Name": ["йҐЎй©¦", "йҐЎй©¦", "йҐЎй©¦"],
  381:                 "TClose": [38.05, 41.66, 30.01],
  382:             },
  383:             index=MultiIndex.from_tuples(
  384:                 [(600809, 20120930), (600809, 20121231), (600809, 20130331)],
  385:                 names=["STK_ID", "RPT_Date"],
  386:             ),
  387:         )
  388:         # TODO: can we construct this without merge?
  389:         k = merge(df4, df5, how="inner", left_index=True, right_index=True)
  390:         result = k.rename(columns={"TClose_x": "TClose", "TClose_y": "QT_Close"})
  391: 
  392:         expected = DataFrame(
  393:             [[0.0454, 22.02, 0.0422, 20130331, 600809, "йҐЎй©¦", 30.01]],
  394:             columns=[
  395:                 "RT",
  396:                 "TClose",
  397:                 "TExg",
  398:                 "RPT_Date",
  399:                 "STK_ID",
  400:                 "STK_Name",
  401:                 "QT_Close",
  402:             ],
  403:         ).set_index(["STK_ID", "RPT_Date"], drop=False)
  404:         tm.assert_frame_equal(result, expected)
  405: 
  406:     def test_rename_boolean_index(self):
  407:         df = DataFrame(np.arange(15).reshape(3, 5), columns=[False, True, 2, 3, 4])
  408:         mapper = {0: "foo", 1: "bar", 2: "bah"}
  409:         res = df.rename(index=mapper)
  410:         exp = DataFrame(
  411:             np.arange(15).reshape(3, 5),
  412:             columns=[False, True, 2, 3, 4],
  413:             index=["foo", "bar", "bah"],
  414:         )
  415:         tm.assert_frame_equal(res, exp)
