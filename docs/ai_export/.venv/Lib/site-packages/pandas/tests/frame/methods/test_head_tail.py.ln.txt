    1: import numpy as np
    2: 
    3: from pandas import DataFrame
    4: import pandas._testing as tm
    5: 
    6: 
    7: def test_head_tail_generic(index, frame_or_series):
    8:     # GH#5370
    9: 
   10:     ndim = 2 if frame_or_series is DataFrame else 1
   11:     shape = (len(index),) * ndim
   12:     vals = np.random.default_rng(2).standard_normal(shape)
   13:     obj = frame_or_series(vals, index=index)
   14: 
   15:     tm.assert_equal(obj.head(), obj.iloc[:5])
   16:     tm.assert_equal(obj.tail(), obj.iloc[-5:])
   17: 
   18:     # 0-len
   19:     tm.assert_equal(obj.head(0), obj.iloc[0:0])
   20:     tm.assert_equal(obj.tail(0), obj.iloc[0:0])
   21: 
   22:     # bounded
   23:     tm.assert_equal(obj.head(len(obj) + 1), obj)
   24:     tm.assert_equal(obj.tail(len(obj) + 1), obj)
   25: 
   26:     # neg index
   27:     tm.assert_equal(obj.head(-3), obj.head(len(index) - 3))
   28:     tm.assert_equal(obj.tail(-3), obj.tail(len(index) - 3))
   29: 
   30: 
   31: def test_head_tail(float_frame):
   32:     tm.assert_frame_equal(float_frame.head(), float_frame[:5])
   33:     tm.assert_frame_equal(float_frame.tail(), float_frame[-5:])
   34: 
   35:     tm.assert_frame_equal(float_frame.head(0), float_frame[0:0])
   36:     tm.assert_frame_equal(float_frame.tail(0), float_frame[0:0])
   37: 
   38:     tm.assert_frame_equal(float_frame.head(-1), float_frame[:-1])
   39:     tm.assert_frame_equal(float_frame.tail(-1), float_frame[1:])
   40:     tm.assert_frame_equal(float_frame.head(1), float_frame[:1])
   41:     tm.assert_frame_equal(float_frame.tail(1), float_frame[-1:])
   42:     # with a float index
   43:     df = float_frame.copy()
   44:     df.index = np.arange(len(float_frame)) + 0.1
   45:     tm.assert_frame_equal(df.head(), df.iloc[:5])
   46:     tm.assert_frame_equal(df.tail(), df.iloc[-5:])
   47:     tm.assert_frame_equal(df.head(0), df[0:0])
   48:     tm.assert_frame_equal(df.tail(0), df[0:0])
   49:     tm.assert_frame_equal(df.head(-1), df.iloc[:-1])
   50:     tm.assert_frame_equal(df.tail(-1), df.iloc[1:])
   51: 
   52: 
   53: def test_head_tail_empty():
   54:     # test empty dataframe
   55:     empty_df = DataFrame()
   56:     tm.assert_frame_equal(empty_df.tail(), empty_df)
   57:     tm.assert_frame_equal(empty_df.head(), empty_df)
