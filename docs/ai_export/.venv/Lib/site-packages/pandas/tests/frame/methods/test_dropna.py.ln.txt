    1: import datetime
    2: 
    3: import dateutil
    4: import numpy as np
    5: import pytest
    6: 
    7: import pandas as pd
    8: from pandas import (
    9:     DataFrame,
   10:     Series,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: class TestDataFrameMissingData:
   16:     def test_dropEmptyRows(self, float_frame):
   17:         N = len(float_frame.index)
   18:         mat = np.random.default_rng(2).standard_normal(N)
   19:         mat[:5] = np.nan
   20: 
   21:         frame = DataFrame({"foo": mat}, index=float_frame.index)
   22:         original = Series(mat, index=float_frame.index, name="foo")
   23:         expected = original.dropna()
   24:         inplace_frame1, inplace_frame2 = frame.copy(), frame.copy()
   25: 
   26:         smaller_frame = frame.dropna(how="all")
   27:         # check that original was preserved
   28:         tm.assert_series_equal(frame["foo"], original)
   29:         return_value = inplace_frame1.dropna(how="all", inplace=True)
   30:         tm.assert_series_equal(smaller_frame["foo"], expected)
   31:         tm.assert_series_equal(inplace_frame1["foo"], expected)
   32:         assert return_value is None
   33: 
   34:         smaller_frame = frame.dropna(how="all", subset=["foo"])
   35:         return_value = inplace_frame2.dropna(how="all", subset=["foo"], inplace=True)
   36:         tm.assert_series_equal(smaller_frame["foo"], expected)
   37:         tm.assert_series_equal(inplace_frame2["foo"], expected)
   38:         assert return_value is None
   39: 
   40:     def test_dropIncompleteRows(self, float_frame):
   41:         N = len(float_frame.index)
   42:         mat = np.random.default_rng(2).standard_normal(N)
   43:         mat[:5] = np.nan
   44: 
   45:         frame = DataFrame({"foo": mat}, index=float_frame.index)
   46:         frame["bar"] = 5
   47:         original = Series(mat, index=float_frame.index, name="foo")
   48:         inp_frame1, inp_frame2 = frame.copy(), frame.copy()
   49: 
   50:         smaller_frame = frame.dropna()
   51:         tm.assert_series_equal(frame["foo"], original)
   52:         return_value = inp_frame1.dropna(inplace=True)
   53: 
   54:         exp = Series(mat[5:], index=float_frame.index[5:], name="foo")
   55:         tm.assert_series_equal(smaller_frame["foo"], exp)
   56:         tm.assert_series_equal(inp_frame1["foo"], exp)
   57:         assert return_value is None
   58: 
   59:         samesize_frame = frame.dropna(subset=["bar"])
   60:         tm.assert_series_equal(frame["foo"], original)
   61:         assert (frame["bar"] == 5).all()
   62:         return_value = inp_frame2.dropna(subset=["bar"], inplace=True)
   63:         tm.assert_index_equal(samesize_frame.index, float_frame.index)
   64:         tm.assert_index_equal(inp_frame2.index, float_frame.index)
   65:         assert return_value is None
   66: 
   67:     def test_dropna(self):
   68:         df = DataFrame(np.random.default_rng(2).standard_normal((6, 4)))
   69:         df.iloc[:2, 2] = np.nan
   70: 
   71:         dropped = df.dropna(axis=1)
   72:         expected = df.loc[:, [0, 1, 3]]
   73:         inp = df.copy()
   74:         return_value = inp.dropna(axis=1, inplace=True)
   75:         tm.assert_frame_equal(dropped, expected)
   76:         tm.assert_frame_equal(inp, expected)
   77:         assert return_value is None
   78: 
   79:         dropped = df.dropna(axis=0)
   80:         expected = df.loc[list(range(2, 6))]
   81:         inp = df.copy()
   82:         return_value = inp.dropna(axis=0, inplace=True)
   83:         tm.assert_frame_equal(dropped, expected)
   84:         tm.assert_frame_equal(inp, expected)
   85:         assert return_value is None
   86: 
   87:         # threshold
   88:         dropped = df.dropna(axis=1, thresh=5)
   89:         expected = df.loc[:, [0, 1, 3]]
   90:         inp = df.copy()
   91:         return_value = inp.dropna(axis=1, thresh=5, inplace=True)
   92:         tm.assert_frame_equal(dropped, expected)
   93:         tm.assert_frame_equal(inp, expected)
   94:         assert return_value is None
   95: 
   96:         dropped = df.dropna(axis=0, thresh=4)
   97:         expected = df.loc[range(2, 6)]
   98:         inp = df.copy()
   99:         return_value = inp.dropna(axis=0, thresh=4, inplace=True)
  100:         tm.assert_frame_equal(dropped, expected)
  101:         tm.assert_frame_equal(inp, expected)
  102:         assert return_value is None
  103: 
  104:         dropped = df.dropna(axis=1, thresh=4)
  105:         tm.assert_frame_equal(dropped, df)
  106: 
  107:         dropped = df.dropna(axis=1, thresh=3)
  108:         tm.assert_frame_equal(dropped, df)
  109: 
  110:         # subset
  111:         dropped = df.dropna(axis=0, subset=[0, 1, 3])
  112:         inp = df.copy()
  113:         return_value = inp.dropna(axis=0, subset=[0, 1, 3], inplace=True)
  114:         tm.assert_frame_equal(dropped, df)
  115:         tm.assert_frame_equal(inp, df)
  116:         assert return_value is None
  117: 
  118:         # all
  119:         dropped = df.dropna(axis=1, how="all")
  120:         tm.assert_frame_equal(dropped, df)
  121: 
  122:         df[2] = np.nan
  123:         dropped = df.dropna(axis=1, how="all")
  124:         expected = df.loc[:, [0, 1, 3]]
  125:         tm.assert_frame_equal(dropped, expected)
  126: 
  127:         # bad input
  128:         msg = "No axis named 3 for object type DataFrame"
  129:         with pytest.raises(ValueError, match=msg):
  130:             df.dropna(axis=3)
  131: 
  132:     def test_drop_and_dropna_caching(self):
  133:         # tst that cacher updates
  134:         original = Series([1, 2, np.nan], name="A")
  135:         expected = Series([1, 2], dtype=original.dtype, name="A")
  136:         df = DataFrame({"A": original.values.copy()})
  137:         df2 = df.copy()
  138:         df["A"].dropna()
  139:         tm.assert_series_equal(df["A"], original)
  140: 
  141:         ser = df["A"]
  142:         return_value = ser.dropna(inplace=True)
  143:         tm.assert_series_equal(ser, expected)
  144:         tm.assert_series_equal(df["A"], original)
  145:         assert return_value is None
  146: 
  147:         df2["A"].drop([1])
  148:         tm.assert_series_equal(df2["A"], original)
  149: 
  150:         ser = df2["A"]
  151:         return_value = ser.drop([1], inplace=True)
  152:         tm.assert_series_equal(ser, original.drop([1]))
  153:         tm.assert_series_equal(df2["A"], original)
  154:         assert return_value is None
  155: 
  156:     def test_dropna_corner(self, float_frame):
  157:         # bad input
  158:         msg = "invalid how option: foo"
  159:         with pytest.raises(ValueError, match=msg):
  160:             float_frame.dropna(how="foo")
  161:         # non-existent column - 8303
  162:         with pytest.raises(KeyError, match=r"^\['X'\]$"):
  163:             float_frame.dropna(subset=["A", "X"])
  164: 
  165:     def test_dropna_multiple_axes(self):
  166:         df = DataFrame(
  167:             [
  168:                 [1, np.nan, 2, 3],
  169:                 [4, np.nan, 5, 6],
  170:                 [np.nan, np.nan, np.nan, np.nan],
  171:                 [7, np.nan, 8, 9],
  172:             ]
  173:         )
  174: 
  175:         # GH20987
  176:         with pytest.raises(TypeError, match="supplying multiple axes"):
  177:             df.dropna(how="all", axis=[0, 1])
  178:         with pytest.raises(TypeError, match="supplying multiple axes"):
  179:             df.dropna(how="all", axis=(0, 1))
  180: 
  181:         inp = df.copy()
  182:         with pytest.raises(TypeError, match="supplying multiple axes"):
  183:             inp.dropna(how="all", axis=(0, 1), inplace=True)
  184: 
  185:     def test_dropna_tz_aware_datetime(self):
  186:         # GH13407
  187:         df = DataFrame()
  188:         dt1 = datetime.datetime(2015, 1, 1, tzinfo=dateutil.tz.tzutc())
  189:         dt2 = datetime.datetime(2015, 2, 2, tzinfo=dateutil.tz.tzutc())
  190:         df["Time"] = [dt1]
  191:         result = df.dropna(axis=0)
  192:         expected = DataFrame({"Time": [dt1]})
  193:         tm.assert_frame_equal(result, expected)
  194: 
  195:         # Ex2
  196:         df = DataFrame({"Time": [dt1, None, np.nan, dt2]})
  197:         result = df.dropna(axis=0)
  198:         expected = DataFrame([dt1, dt2], columns=["Time"], index=[0, 3])
  199:         tm.assert_frame_equal(result, expected)
  200: 
  201:     def test_dropna_categorical_interval_index(self):
  202:         # GH 25087
  203:         ii = pd.IntervalIndex.from_breaks([0, 2.78, 3.14, 6.28])
  204:         ci = pd.CategoricalIndex(ii)
  205:         df = DataFrame({"A": list("abc")}, index=ci)
  206: 
  207:         expected = df
  208:         result = df.dropna()
  209:         tm.assert_frame_equal(result, expected)
  210: 
  211:     def test_dropna_with_duplicate_columns(self):
  212:         df = DataFrame(
  213:             {
  214:                 "A": np.random.default_rng(2).standard_normal(5),
  215:                 "B": np.random.default_rng(2).standard_normal(5),
  216:                 "C": np.random.default_rng(2).standard_normal(5),
  217:                 "D": ["a", "b", "c", "d", "e"],
  218:             }
  219:         )
  220:         df.iloc[2, [0, 1, 2]] = np.nan
  221:         df.iloc[0, 0] = np.nan
  222:         df.iloc[1, 1] = np.nan
  223:         df.iloc[:, 3] = np.nan
  224:         expected = df.dropna(subset=["A", "B", "C"], how="all")
  225:         expected.columns = ["A", "A", "B", "C"]
  226: 
  227:         df.columns = ["A", "A", "B", "C"]
  228: 
  229:         result = df.dropna(subset=["A", "C"], how="all")
  230:         tm.assert_frame_equal(result, expected)
  231: 
  232:     def test_set_single_column_subset(self):
  233:         # GH 41021
  234:         df = DataFrame({"A": [1, 2, 3], "B": list("abc"), "C": [4, np.nan, 5]})
  235:         expected = DataFrame(
  236:             {"A": [1, 3], "B": list("ac"), "C": [4.0, 5.0]}, index=[0, 2]
  237:         )
  238:         result = df.dropna(subset="C")
  239:         tm.assert_frame_equal(result, expected)
  240: 
  241:     def test_single_column_not_present_in_axis(self):
  242:         # GH 41021
  243:         df = DataFrame({"A": [1, 2, 3]})
  244: 
  245:         # Column not present
  246:         with pytest.raises(KeyError, match="['D']"):
  247:             df.dropna(subset="D", axis=0)
  248: 
  249:     def test_subset_is_nparray(self):
  250:         # GH 41021
  251:         df = DataFrame({"A": [1, 2, np.nan], "B": list("abc"), "C": [4, np.nan, 5]})
  252:         expected = DataFrame({"A": [1.0], "B": ["a"], "C": [4.0]})
  253:         result = df.dropna(subset=np.array(["A", "C"]))
  254:         tm.assert_frame_equal(result, expected)
  255: 
  256:     def test_no_nans_in_frame(self, axis):
  257:         # GH#41965
  258:         df = DataFrame([[1, 2], [3, 4]], columns=pd.RangeIndex(0, 2))
  259:         expected = df.copy()
  260:         result = df.dropna(axis=axis)
  261:         tm.assert_frame_equal(result, expected, check_index_type=True)
  262: 
  263:     def test_how_thresh_param_incompatible(self):
  264:         # GH46575
  265:         df = DataFrame([1, 2, pd.NA])
  266:         msg = "You cannot set both the how and thresh arguments at the same time"
  267:         with pytest.raises(TypeError, match=msg):
  268:             df.dropna(how="all", thresh=2)
  269: 
  270:         with pytest.raises(TypeError, match=msg):
  271:             df.dropna(how="any", thresh=2)
  272: 
  273:         with pytest.raises(TypeError, match=msg):
  274:             df.dropna(how=None, thresh=None)
  275: 
  276:     @pytest.mark.parametrize("val", [1, 1.5])
  277:     def test_dropna_ignore_index(self, val):
  278:         # GH#31725
  279:         df = DataFrame({"a": [1, 2, val]}, index=[3, 2, 1])
  280:         result = df.dropna(ignore_index=True)
  281:         expected = DataFrame({"a": [1, 2, val]})
  282:         tm.assert_frame_equal(result, expected)
  283: 
  284:         df.dropna(ignore_index=True, inplace=True)
  285:         tm.assert_frame_equal(df, expected)
