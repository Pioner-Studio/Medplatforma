    1: from __future__ import annotations
    2: 
    3: from typing import TYPE_CHECKING
    4: 
    5: from pandas import (
    6:     DataFrame,
    7:     concat,
    8: )
    9: 
   10: if TYPE_CHECKING:
   11:     from pandas._typing import AxisInt
   12: 
   13: 
   14: def _check_mixed_float(df, dtype=None):
   15:     # float16 are most likely to be upcasted to float32
   16:     dtypes = {"A": "float32", "B": "float32", "C": "float16", "D": "float64"}
   17:     if isinstance(dtype, str):
   18:         dtypes = {k: dtype for k, v in dtypes.items()}
   19:     elif isinstance(dtype, dict):
   20:         dtypes.update(dtype)
   21:     if dtypes.get("A"):
   22:         assert df.dtypes["A"] == dtypes["A"]
   23:     if dtypes.get("B"):
   24:         assert df.dtypes["B"] == dtypes["B"]
   25:     if dtypes.get("C"):
   26:         assert df.dtypes["C"] == dtypes["C"]
   27:     if dtypes.get("D"):
   28:         assert df.dtypes["D"] == dtypes["D"]
   29: 
   30: 
   31: def _check_mixed_int(df, dtype=None):
   32:     dtypes = {"A": "int32", "B": "uint64", "C": "uint8", "D": "int64"}
   33:     if isinstance(dtype, str):
   34:         dtypes = {k: dtype for k, v in dtypes.items()}
   35:     elif isinstance(dtype, dict):
   36:         dtypes.update(dtype)
   37:     if dtypes.get("A"):
   38:         assert df.dtypes["A"] == dtypes["A"]
   39:     if dtypes.get("B"):
   40:         assert df.dtypes["B"] == dtypes["B"]
   41:     if dtypes.get("C"):
   42:         assert df.dtypes["C"] == dtypes["C"]
   43:     if dtypes.get("D"):
   44:         assert df.dtypes["D"] == dtypes["D"]
   45: 
   46: 
   47: def zip_frames(frames: list[DataFrame], axis: AxisInt = 1) -> DataFrame:
   48:     """
   49:     take a list of frames, zip them together under the
   50:     assumption that these all have the first frames' index/columns.
   51: 
   52:     Returns
   53:     -------
   54:     new_frame : DataFrame
   55:     """
   56:     if axis == 1:
   57:         columns = frames[0].columns
   58:         zipped = [f.loc[:, c] for c in columns for f in frames]
   59:         return concat(zipped, axis=1)
   60:     else:
   61:         index = frames[0].index
   62:         zipped = [f.loc[i, :] for i in index for f in frames]
   63:         return DataFrame(zipped)
