    1: from datetime import datetime
    2: import re
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     NaT,
   10:     concat,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: @pytest.mark.parametrize("subset", ["a", ["a"], ["a", "B"]])
   16: def test_drop_duplicates_with_misspelled_column_name(subset):
   17:     # GH 19730
   18:     df = DataFrame({"A": [0, 0, 1], "B": [0, 0, 1], "C": [0, 0, 1]})
   19:     msg = re.escape("Index(['a'], dtype=")
   20: 
   21:     with pytest.raises(KeyError, match=msg):
   22:         df.drop_duplicates(subset)
   23: 
   24: 
   25: def test_drop_duplicates():
   26:     df = DataFrame(
   27:         {
   28:             "AAA": ["foo", "bar", "foo", "bar", "foo", "bar", "bar", "foo"],
   29:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
   30:             "C": [1, 1, 2, 2, 2, 2, 1, 2],
   31:             "D": range(8),
   32:         }
   33:     )
   34:     # single column
   35:     result = df.drop_duplicates("AAA")
   36:     expected = df[:2]
   37:     tm.assert_frame_equal(result, expected)
   38: 
   39:     result = df.drop_duplicates("AAA", keep="last")
   40:     expected = df.loc[[6, 7]]
   41:     tm.assert_frame_equal(result, expected)
   42: 
   43:     result = df.drop_duplicates("AAA", keep=False)
   44:     expected = df.loc[[]]
   45:     tm.assert_frame_equal(result, expected)
   46:     assert len(result) == 0
   47: 
   48:     # multi column
   49:     expected = df.loc[[0, 1, 2, 3]]
   50:     result = df.drop_duplicates(np.array(["AAA", "B"]))
   51:     tm.assert_frame_equal(result, expected)
   52:     result = df.drop_duplicates(["AAA", "B"])
   53:     tm.assert_frame_equal(result, expected)
   54: 
   55:     result = df.drop_duplicates(("AAA", "B"), keep="last")
   56:     expected = df.loc[[0, 5, 6, 7]]
   57:     tm.assert_frame_equal(result, expected)
   58: 
   59:     result = df.drop_duplicates(("AAA", "B"), keep=False)
   60:     expected = df.loc[[0]]
   61:     tm.assert_frame_equal(result, expected)
   62: 
   63:     # consider everything
   64:     df2 = df.loc[:, ["AAA", "B", "C"]]
   65: 
   66:     result = df2.drop_duplicates()
   67:     # in this case only
   68:     expected = df2.drop_duplicates(["AAA", "B"])
   69:     tm.assert_frame_equal(result, expected)
   70: 
   71:     result = df2.drop_duplicates(keep="last")
   72:     expected = df2.drop_duplicates(["AAA", "B"], keep="last")
   73:     tm.assert_frame_equal(result, expected)
   74: 
   75:     result = df2.drop_duplicates(keep=False)
   76:     expected = df2.drop_duplicates(["AAA", "B"], keep=False)
   77:     tm.assert_frame_equal(result, expected)
   78: 
   79:     # integers
   80:     result = df.drop_duplicates("C")
   81:     expected = df.iloc[[0, 2]]
   82:     tm.assert_frame_equal(result, expected)
   83:     result = df.drop_duplicates("C", keep="last")
   84:     expected = df.iloc[[-2, -1]]
   85:     tm.assert_frame_equal(result, expected)
   86: 
   87:     df["E"] = df["C"].astype("int8")
   88:     result = df.drop_duplicates("E")
   89:     expected = df.iloc[[0, 2]]
   90:     tm.assert_frame_equal(result, expected)
   91:     result = df.drop_duplicates("E", keep="last")
   92:     expected = df.iloc[[-2, -1]]
   93:     tm.assert_frame_equal(result, expected)
   94: 
   95:     # GH 11376
   96:     df = DataFrame({"x": [7, 6, 3, 3, 4, 8, 0], "y": [0, 6, 5, 5, 9, 1, 2]})
   97:     expected = df.loc[df.index != 3]
   98:     tm.assert_frame_equal(df.drop_duplicates(), expected)
   99: 
  100:     df = DataFrame([[1, 0], [0, 2]])
  101:     tm.assert_frame_equal(df.drop_duplicates(), df)
  102: 
  103:     df = DataFrame([[-2, 0], [0, -4]])
  104:     tm.assert_frame_equal(df.drop_duplicates(), df)
  105: 
  106:     x = np.iinfo(np.int64).max / 3 * 2
  107:     df = DataFrame([[-x, x], [0, x + 4]])
  108:     tm.assert_frame_equal(df.drop_duplicates(), df)
  109: 
  110:     df = DataFrame([[-x, x], [x, x + 4]])
  111:     tm.assert_frame_equal(df.drop_duplicates(), df)
  112: 
  113:     # GH 11864
  114:     df = DataFrame([i] * 9 for i in range(16))
  115:     df = concat([df, DataFrame([[1] + [0] * 8])], ignore_index=True)
  116: 
  117:     for keep in ["first", "last", False]:
  118:         assert df.duplicated(keep=keep).sum() == 0
  119: 
  120: 
  121: def test_drop_duplicates_with_duplicate_column_names():
  122:     # GH17836
  123:     df = DataFrame([[1, 2, 5], [3, 4, 6], [3, 4, 7]], columns=["a", "a", "b"])
  124: 
  125:     result0 = df.drop_duplicates()
  126:     tm.assert_frame_equal(result0, df)
  127: 
  128:     result1 = df.drop_duplicates("a")
  129:     expected1 = df[:2]
  130:     tm.assert_frame_equal(result1, expected1)
  131: 
  132: 
  133: def test_drop_duplicates_for_take_all():
  134:     df = DataFrame(
  135:         {
  136:             "AAA": ["foo", "bar", "baz", "bar", "foo", "bar", "qux", "foo"],
  137:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
  138:             "C": [1, 1, 2, 2, 2, 2, 1, 2],
  139:             "D": range(8),
  140:         }
  141:     )
  142:     # single column
  143:     result = df.drop_duplicates("AAA")
  144:     expected = df.iloc[[0, 1, 2, 6]]
  145:     tm.assert_frame_equal(result, expected)
  146: 
  147:     result = df.drop_duplicates("AAA", keep="last")
  148:     expected = df.iloc[[2, 5, 6, 7]]
  149:     tm.assert_frame_equal(result, expected)
  150: 
  151:     result = df.drop_duplicates("AAA", keep=False)
  152:     expected = df.iloc[[2, 6]]
  153:     tm.assert_frame_equal(result, expected)
  154: 
  155:     # multiple columns
  156:     result = df.drop_duplicates(["AAA", "B"])
  157:     expected = df.iloc[[0, 1, 2, 3, 4, 6]]
  158:     tm.assert_frame_equal(result, expected)
  159: 
  160:     result = df.drop_duplicates(["AAA", "B"], keep="last")
  161:     expected = df.iloc[[0, 1, 2, 5, 6, 7]]
  162:     tm.assert_frame_equal(result, expected)
  163: 
  164:     result = df.drop_duplicates(["AAA", "B"], keep=False)
  165:     expected = df.iloc[[0, 1, 2, 6]]
  166:     tm.assert_frame_equal(result, expected)
  167: 
  168: 
  169: def test_drop_duplicates_tuple():
  170:     df = DataFrame(
  171:         {
  172:             ("AA", "AB"): ["foo", "bar", "foo", "bar", "foo", "bar", "bar", "foo"],
  173:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
  174:             "C": [1, 1, 2, 2, 2, 2, 1, 2],
  175:             "D": range(8),
  176:         }
  177:     )
  178:     # single column
  179:     result = df.drop_duplicates(("AA", "AB"))
  180:     expected = df[:2]
  181:     tm.assert_frame_equal(result, expected)
  182: 
  183:     result = df.drop_duplicates(("AA", "AB"), keep="last")
  184:     expected = df.loc[[6, 7]]
  185:     tm.assert_frame_equal(result, expected)
  186: 
  187:     result = df.drop_duplicates(("AA", "AB"), keep=False)
  188:     expected = df.loc[[]]  # empty df
  189:     assert len(result) == 0
  190:     tm.assert_frame_equal(result, expected)
  191: 
  192:     # multi column
  193:     expected = df.loc[[0, 1, 2, 3]]
  194:     result = df.drop_duplicates((("AA", "AB"), "B"))
  195:     tm.assert_frame_equal(result, expected)
  196: 
  197: 
  198: @pytest.mark.parametrize(
  199:     "df",
  200:     [
  201:         DataFrame(),
  202:         DataFrame(columns=[]),
  203:         DataFrame(columns=["A", "B", "C"]),
  204:         DataFrame(index=[]),
  205:         DataFrame(index=["A", "B", "C"]),
  206:     ],
  207: )
  208: def test_drop_duplicates_empty(df):
  209:     # GH 20516
  210:     result = df.drop_duplicates()
  211:     tm.assert_frame_equal(result, df)
  212: 
  213:     result = df.copy()
  214:     result.drop_duplicates(inplace=True)
  215:     tm.assert_frame_equal(result, df)
  216: 
  217: 
  218: def test_drop_duplicates_NA():
  219:     # none
  220:     df = DataFrame(
  221:         {
  222:             "A": [None, None, "foo", "bar", "foo", "bar", "bar", "foo"],
  223:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
  224:             "C": [1.0, np.nan, np.nan, np.nan, 1.0, 1.0, 1, 1.0],
  225:             "D": range(8),
  226:         }
  227:     )
  228:     # single column
  229:     result = df.drop_duplicates("A")
  230:     expected = df.loc[[0, 2, 3]]
  231:     tm.assert_frame_equal(result, expected)
  232: 
  233:     result = df.drop_duplicates("A", keep="last")
  234:     expected = df.loc[[1, 6, 7]]
  235:     tm.assert_frame_equal(result, expected)
  236: 
  237:     result = df.drop_duplicates("A", keep=False)
  238:     expected = df.loc[[]]  # empty df
  239:     tm.assert_frame_equal(result, expected)
  240:     assert len(result) == 0
  241: 
  242:     # multi column
  243:     result = df.drop_duplicates(["A", "B"])
  244:     expected = df.loc[[0, 2, 3, 6]]
  245:     tm.assert_frame_equal(result, expected)
  246: 
  247:     result = df.drop_duplicates(["A", "B"], keep="last")
  248:     expected = df.loc[[1, 5, 6, 7]]
  249:     tm.assert_frame_equal(result, expected)
  250: 
  251:     result = df.drop_duplicates(["A", "B"], keep=False)
  252:     expected = df.loc[[6]]
  253:     tm.assert_frame_equal(result, expected)
  254: 
  255:     # nan
  256:     df = DataFrame(
  257:         {
  258:             "A": ["foo", "bar", "foo", "bar", "foo", "bar", "bar", "foo"],
  259:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
  260:             "C": [1.0, np.nan, np.nan, np.nan, 1.0, 1.0, 1, 1.0],
  261:             "D": range(8),
  262:         }
  263:     )
  264:     # single column
  265:     result = df.drop_duplicates("C")
  266:     expected = df[:2]
  267:     tm.assert_frame_equal(result, expected)
  268: 
  269:     result = df.drop_duplicates("C", keep="last")
  270:     expected = df.loc[[3, 7]]
  271:     tm.assert_frame_equal(result, expected)
  272: 
  273:     result = df.drop_duplicates("C", keep=False)
  274:     expected = df.loc[[]]  # empty df
  275:     tm.assert_frame_equal(result, expected)
  276:     assert len(result) == 0
  277: 
  278:     # multi column
  279:     result = df.drop_duplicates(["C", "B"])
  280:     expected = df.loc[[0, 1, 2, 4]]
  281:     tm.assert_frame_equal(result, expected)
  282: 
  283:     result = df.drop_duplicates(["C", "B"], keep="last")
  284:     expected = df.loc[[1, 3, 6, 7]]
  285:     tm.assert_frame_equal(result, expected)
  286: 
  287:     result = df.drop_duplicates(["C", "B"], keep=False)
  288:     expected = df.loc[[1]]
  289:     tm.assert_frame_equal(result, expected)
  290: 
  291: 
  292: def test_drop_duplicates_NA_for_take_all():
  293:     # none
  294:     df = DataFrame(
  295:         {
  296:             "A": [None, None, "foo", "bar", "foo", "baz", "bar", "qux"],
  297:             "C": [1.0, np.nan, np.nan, np.nan, 1.0, 2.0, 3, 1.0],
  298:         }
  299:     )
  300: 
  301:     # single column
  302:     result = df.drop_duplicates("A")
  303:     expected = df.iloc[[0, 2, 3, 5, 7]]
  304:     tm.assert_frame_equal(result, expected)
  305: 
  306:     result = df.drop_duplicates("A", keep="last")
  307:     expected = df.iloc[[1, 4, 5, 6, 7]]
  308:     tm.assert_frame_equal(result, expected)
  309: 
  310:     result = df.drop_duplicates("A", keep=False)
  311:     expected = df.iloc[[5, 7]]
  312:     tm.assert_frame_equal(result, expected)
  313: 
  314:     # nan
  315: 
  316:     # single column
  317:     result = df.drop_duplicates("C")
  318:     expected = df.iloc[[0, 1, 5, 6]]
  319:     tm.assert_frame_equal(result, expected)
  320: 
  321:     result = df.drop_duplicates("C", keep="last")
  322:     expected = df.iloc[[3, 5, 6, 7]]
  323:     tm.assert_frame_equal(result, expected)
  324: 
  325:     result = df.drop_duplicates("C", keep=False)
  326:     expected = df.iloc[[5, 6]]
  327:     tm.assert_frame_equal(result, expected)
  328: 
  329: 
  330: def test_drop_duplicates_inplace():
  331:     orig = DataFrame(
  332:         {
  333:             "A": ["foo", "bar", "foo", "bar", "foo", "bar", "bar", "foo"],
  334:             "B": ["one", "one", "two", "two", "two", "two", "one", "two"],
  335:             "C": [1, 1, 2, 2, 2, 2, 1, 2],
  336:             "D": range(8),
  337:         }
  338:     )
  339:     # single column
  340:     df = orig.copy()
  341:     return_value = df.drop_duplicates("A", inplace=True)
  342:     expected = orig[:2]
  343:     result = df
  344:     tm.assert_frame_equal(result, expected)
  345:     assert return_value is None
  346: 
  347:     df = orig.copy()
  348:     return_value = df.drop_duplicates("A", keep="last", inplace=True)
  349:     expected = orig.loc[[6, 7]]
  350:     result = df
  351:     tm.assert_frame_equal(result, expected)
  352:     assert return_value is None
  353: 
  354:     df = orig.copy()
  355:     return_value = df.drop_duplicates("A", keep=False, inplace=True)
  356:     expected = orig.loc[[]]
  357:     result = df
  358:     tm.assert_frame_equal(result, expected)
  359:     assert len(df) == 0
  360:     assert return_value is None
  361: 
  362:     # multi column
  363:     df = orig.copy()
  364:     return_value = df.drop_duplicates(["A", "B"], inplace=True)
  365:     expected = orig.loc[[0, 1, 2, 3]]
  366:     result = df
  367:     tm.assert_frame_equal(result, expected)
  368:     assert return_value is None
  369: 
  370:     df = orig.copy()
  371:     return_value = df.drop_duplicates(["A", "B"], keep="last", inplace=True)
  372:     expected = orig.loc[[0, 5, 6, 7]]
  373:     result = df
  374:     tm.assert_frame_equal(result, expected)
  375:     assert return_value is None
  376: 
  377:     df = orig.copy()
  378:     return_value = df.drop_duplicates(["A", "B"], keep=False, inplace=True)
  379:     expected = orig.loc[[0]]
  380:     result = df
  381:     tm.assert_frame_equal(result, expected)
  382:     assert return_value is None
  383: 
  384:     # consider everything
  385:     orig2 = orig.loc[:, ["A", "B", "C"]].copy()
  386: 
  387:     df2 = orig2.copy()
  388:     return_value = df2.drop_duplicates(inplace=True)
  389:     # in this case only
  390:     expected = orig2.drop_duplicates(["A", "B"])
  391:     result = df2
  392:     tm.assert_frame_equal(result, expected)
  393:     assert return_value is None
  394: 
  395:     df2 = orig2.copy()
  396:     return_value = df2.drop_duplicates(keep="last", inplace=True)
  397:     expected = orig2.drop_duplicates(["A", "B"], keep="last")
  398:     result = df2
  399:     tm.assert_frame_equal(result, expected)
  400:     assert return_value is None
  401: 
  402:     df2 = orig2.copy()
  403:     return_value = df2.drop_duplicates(keep=False, inplace=True)
  404:     expected = orig2.drop_duplicates(["A", "B"], keep=False)
  405:     result = df2
  406:     tm.assert_frame_equal(result, expected)
  407:     assert return_value is None
  408: 
  409: 
  410: @pytest.mark.parametrize("inplace", [True, False])
  411: @pytest.mark.parametrize(
  412:     "origin_dict, output_dict, ignore_index, output_index",
  413:     [
  414:         ({"A": [2, 2, 3]}, {"A": [2, 3]}, True, [0, 1]),
  415:         ({"A": [2, 2, 3]}, {"A": [2, 3]}, False, [0, 2]),
  416:         ({"A": [2, 2, 3], "B": [2, 2, 4]}, {"A": [2, 3], "B": [2, 4]}, True, [0, 1]),
  417:         ({"A": [2, 2, 3], "B": [2, 2, 4]}, {"A": [2, 3], "B": [2, 4]}, False, [0, 2]),
  418:     ],
  419: )
  420: def test_drop_duplicates_ignore_index(
  421:     inplace, origin_dict, output_dict, ignore_index, output_index
  422: ):
  423:     # GH 30114
  424:     df = DataFrame(origin_dict)
  425:     expected = DataFrame(output_dict, index=output_index)
  426: 
  427:     if inplace:
  428:         result_df = df.copy()
  429:         result_df.drop_duplicates(ignore_index=ignore_index, inplace=inplace)
  430:     else:
  431:         result_df = df.drop_duplicates(ignore_index=ignore_index, inplace=inplace)
  432: 
  433:     tm.assert_frame_equal(result_df, expected)
  434:     tm.assert_frame_equal(df, DataFrame(origin_dict))
  435: 
  436: 
  437: def test_drop_duplicates_null_in_object_column(nulls_fixture):
  438:     # https://github.com/pandas-dev/pandas/issues/32992
  439:     df = DataFrame([[1, nulls_fixture], [2, "a"]], dtype=object)
  440:     result = df.drop_duplicates()
  441:     tm.assert_frame_equal(result, df)
  442: 
  443: 
  444: def test_drop_duplicates_series_vs_dataframe(keep):
  445:     # GH#14192
  446:     df = DataFrame(
  447:         {
  448:             "a": [1, 1, 1, "one", "one"],
  449:             "b": [2, 2, np.nan, np.nan, np.nan],
  450:             "c": [3, 3, np.nan, np.nan, "three"],
  451:             "d": [1, 2, 3, 4, 4],
  452:             "e": [
  453:                 datetime(2015, 1, 1),
  454:                 datetime(2015, 1, 1),
  455:                 datetime(2015, 2, 1),
  456:                 NaT,
  457:                 NaT,
  458:             ],
  459:         }
  460:     )
  461:     for column in df.columns:
  462:         dropped_frame = df[[column]].drop_duplicates(keep=keep)
  463:         dropped_series = df[column].drop_duplicates(keep=keep)
  464:         tm.assert_frame_equal(dropped_frame, dropped_series.to_frame())
  465: 
  466: 
  467: @pytest.mark.parametrize("arg", [[1], 1, "True", [], 0])
  468: def test_drop_duplicates_non_boolean_ignore_index(arg):
  469:     # GH#38274
  470:     df = DataFrame({"a": [1, 2, 1, 3]})
  471:     msg = '^For argument "ignore_index" expected type bool, received type .*.$'
  472:     with pytest.raises(ValueError, match=msg):
  473:         df.drop_duplicates(ignore_index=arg)
