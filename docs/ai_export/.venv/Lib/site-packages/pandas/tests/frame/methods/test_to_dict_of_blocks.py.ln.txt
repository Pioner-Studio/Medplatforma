    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     MultiIndex,
    9: )
   10: import pandas._testing as tm
   11: from pandas.core.arrays import NumpyExtensionArray
   12: 
   13: pytestmark = td.skip_array_manager_invalid_test
   14: 
   15: 
   16: class TestToDictOfBlocks:
   17:     @pytest.mark.filterwarnings("ignore:Setting a value on a view:FutureWarning")
   18:     def test_no_copy_blocks(self, float_frame, using_copy_on_write):
   19:         # GH#9607
   20:         df = DataFrame(float_frame, copy=True)
   21:         column = df.columns[0]
   22: 
   23:         _last_df = None
   24:         # use the copy=False, change a column
   25:         blocks = df._to_dict_of_blocks()
   26:         for _df in blocks.values():
   27:             _last_df = _df
   28:             if column in _df:
   29:                 _df.loc[:, column] = _df[column] + 1
   30: 
   31:         if not using_copy_on_write:
   32:             # make sure we did change the original DataFrame
   33:             assert _last_df is not None and _last_df[column].equals(df[column])
   34:         else:
   35:             assert _last_df is not None and not _last_df[column].equals(df[column])
   36: 
   37: 
   38: def test_to_dict_of_blocks_item_cache(using_copy_on_write, warn_copy_on_write):
   39:     # Calling to_dict_of_blocks should not poison item_cache
   40:     df = DataFrame({"a": [1, 2, 3, 4], "b": ["a", "b", "c", "d"]})
   41:     df["c"] = NumpyExtensionArray(np.array([1, 2, None, 3], dtype=object))
   42:     mgr = df._mgr
   43:     assert len(mgr.blocks) == 3  # i.e. not consolidated
   44: 
   45:     ser = df["b"]  # populations item_cache["b"]
   46: 
   47:     df._to_dict_of_blocks()
   48: 
   49:     if using_copy_on_write:
   50:         with pytest.raises(ValueError, match="read-only"):
   51:             ser.values[0] = "foo"
   52:     elif warn_copy_on_write:
   53:         ser.values[0] = "foo"
   54:         assert df.loc[0, "b"] == "foo"
   55:         # with warning mode, the item cache is disabled
   56:         assert df["b"] is not ser
   57:     else:
   58:         # Check that the to_dict_of_blocks didn't break link between ser and df
   59:         ser.values[0] = "foo"
   60:         assert df.loc[0, "b"] == "foo"
   61: 
   62:         assert df["b"] is ser
   63: 
   64: 
   65: def test_set_change_dtype_slice():
   66:     # GH#8850
   67:     cols = MultiIndex.from_tuples([("1st", "a"), ("2nd", "b"), ("3rd", "c")])
   68:     df = DataFrame([[1.0, 2, 3], [4.0, 5, 6]], columns=cols)
   69:     df["2nd"] = df["2nd"] * 2.0
   70: 
   71:     blocks = df._to_dict_of_blocks()
   72:     assert sorted(blocks.keys()) == ["float64", "int64"]
   73:     tm.assert_frame_equal(
   74:         blocks["float64"], DataFrame([[1.0, 4.0], [4.0, 10.0]], columns=cols[:2])
   75:     )
   76:     tm.assert_frame_equal(blocks["int64"], DataFrame([[3], [6]], columns=cols[2:]))
