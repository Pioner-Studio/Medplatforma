    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     MultiIndex,
    8:     Series,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestTZConvert:
   15:     def test_tz_convert(self, frame_or_series):
   16:         rng = date_range("1/1/2011", periods=200, freq="D", tz="US/Eastern")
   17: 
   18:         obj = DataFrame({"a": 1}, index=rng)
   19:         obj = tm.get_obj(obj, frame_or_series)
   20: 
   21:         result = obj.tz_convert("Europe/Berlin")
   22:         expected = DataFrame({"a": 1}, rng.tz_convert("Europe/Berlin"))
   23:         expected = tm.get_obj(expected, frame_or_series)
   24: 
   25:         assert result.index.tz.zone == "Europe/Berlin"
   26:         tm.assert_equal(result, expected)
   27: 
   28:     def test_tz_convert_axis1(self):
   29:         rng = date_range("1/1/2011", periods=200, freq="D", tz="US/Eastern")
   30: 
   31:         obj = DataFrame({"a": 1}, index=rng)
   32: 
   33:         obj = obj.T
   34:         result = obj.tz_convert("Europe/Berlin", axis=1)
   35:         assert result.columns.tz.zone == "Europe/Berlin"
   36: 
   37:         expected = DataFrame({"a": 1}, rng.tz_convert("Europe/Berlin"))
   38: 
   39:         tm.assert_equal(result, expected.T)
   40: 
   41:     def test_tz_convert_naive(self, frame_or_series):
   42:         # can't convert tz-naive
   43:         rng = date_range("1/1/2011", periods=200, freq="D")
   44:         ts = Series(1, index=rng)
   45:         ts = frame_or_series(ts)
   46: 
   47:         with pytest.raises(TypeError, match="Cannot convert tz-naive"):
   48:             ts.tz_convert("US/Eastern")
   49: 
   50:     @pytest.mark.parametrize("fn", ["tz_localize", "tz_convert"])
   51:     def test_tz_convert_and_localize(self, fn):
   52:         l0 = date_range("20140701", periods=5, freq="D")
   53:         l1 = date_range("20140701", periods=5, freq="D")
   54: 
   55:         int_idx = Index(range(5))
   56: 
   57:         if fn == "tz_convert":
   58:             l0 = l0.tz_localize("UTC")
   59:             l1 = l1.tz_localize("UTC")
   60: 
   61:         for idx in [l0, l1]:
   62:             l0_expected = getattr(idx, fn)("US/Pacific")
   63:             l1_expected = getattr(idx, fn)("US/Pacific")
   64: 
   65:             df1 = DataFrame(np.ones(5), index=l0)
   66:             df1 = getattr(df1, fn)("US/Pacific")
   67:             tm.assert_index_equal(df1.index, l0_expected)
   68: 
   69:             # MultiIndex
   70:             # GH7846
   71:             df2 = DataFrame(np.ones(5), MultiIndex.from_arrays([l0, l1]))
   72: 
   73:             # freq is not preserved in MultiIndex construction
   74:             l1_expected = l1_expected._with_freq(None)
   75:             l0_expected = l0_expected._with_freq(None)
   76:             l1 = l1._with_freq(None)
   77:             l0 = l0._with_freq(None)
   78: 
   79:             df3 = getattr(df2, fn)("US/Pacific", level=0)
   80:             assert not df3.index.levels[0].equals(l0)
   81:             tm.assert_index_equal(df3.index.levels[0], l0_expected)
   82:             tm.assert_index_equal(df3.index.levels[1], l1)
   83:             assert not df3.index.levels[1].equals(l1_expected)
   84: 
   85:             df3 = getattr(df2, fn)("US/Pacific", level=1)
   86:             tm.assert_index_equal(df3.index.levels[0], l0)
   87:             assert not df3.index.levels[0].equals(l0_expected)
   88:             tm.assert_index_equal(df3.index.levels[1], l1_expected)
   89:             assert not df3.index.levels[1].equals(l1)
   90: 
   91:             df4 = DataFrame(np.ones(5), MultiIndex.from_arrays([int_idx, l0]))
   92: 
   93:             # TODO: untested
   94:             getattr(df4, fn)("US/Pacific", level=1)
   95: 
   96:             tm.assert_index_equal(df3.index.levels[0], l0)
   97:             assert not df3.index.levels[0].equals(l0_expected)
   98:             tm.assert_index_equal(df3.index.levels[1], l1_expected)
   99:             assert not df3.index.levels[1].equals(l1)
  100: 
  101:         # Bad Inputs
  102: 
  103:         # Not DatetimeIndex / PeriodIndex
  104:         with pytest.raises(TypeError, match="DatetimeIndex"):
  105:             df = DataFrame(index=int_idx)
  106:             getattr(df, fn)("US/Pacific")
  107: 
  108:         # Not DatetimeIndex / PeriodIndex
  109:         with pytest.raises(TypeError, match="DatetimeIndex"):
  110:             df = DataFrame(np.ones(5), MultiIndex.from_arrays([int_idx, l0]))
  111:             getattr(df, fn)("US/Pacific", level=0)
  112: 
  113:         # Invalid level
  114:         with pytest.raises(ValueError, match="not valid"):
  115:             df = DataFrame(index=l0)
  116:             getattr(df, fn)("US/Pacific", level=1)
  117: 
  118:     @pytest.mark.parametrize("copy", [True, False])
  119:     def test_tz_convert_copy_inplace_mutate(self, copy, frame_or_series):
  120:         # GH#6326
  121:         obj = frame_or_series(
  122:             np.arange(0, 5),
  123:             index=date_range("20131027", periods=5, freq="h", tz="Europe/Berlin"),
  124:         )
  125:         orig = obj.copy()
  126:         result = obj.tz_convert("UTC", copy=copy)
  127:         expected = frame_or_series(np.arange(0, 5), index=obj.index.tz_convert("UTC"))
  128:         tm.assert_equal(result, expected)
  129:         tm.assert_equal(obj, orig)
  130:         assert result.index is not obj.index
  131:         assert result is not obj
