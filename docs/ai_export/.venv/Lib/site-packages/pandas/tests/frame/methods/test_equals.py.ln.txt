    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     date_range,
    6: )
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestEquals:
   11:     def test_dataframe_not_equal(self):
   12:         # see GH#28839
   13:         df1 = DataFrame({"a": [1, 2], "b": ["s", "d"]})
   14:         df2 = DataFrame({"a": ["s", "d"], "b": [1, 2]})
   15:         assert df1.equals(df2) is False
   16: 
   17:     def test_equals_different_blocks(self, using_array_manager, using_infer_string):
   18:         # GH#9330
   19:         df0 = DataFrame({"A": ["x", "y"], "B": [1, 2], "C": ["w", "z"]})
   20:         df1 = df0.reset_index()[["A", "B", "C"]]
   21:         if not using_array_manager and not using_infer_string:
   22:             # this assert verifies that the above operations have
   23:             # induced a block rearrangement
   24:             assert df0._mgr.blocks[0].dtype != df1._mgr.blocks[0].dtype
   25: 
   26:         # do the real tests
   27:         tm.assert_frame_equal(df0, df1)
   28:         assert df0.equals(df1)
   29:         assert df1.equals(df0)
   30: 
   31:     def test_equals(self):
   32:         # Add object dtype column with nans
   33:         index = np.random.default_rng(2).random(10)
   34:         df1 = DataFrame(
   35:             np.random.default_rng(2).random(10), index=index, columns=["floats"]
   36:         )
   37:         df1["text"] = "the sky is so blue. we could use more chocolate.".split()
   38:         df1["start"] = date_range("2000-1-1", periods=10, freq="min")
   39:         df1["end"] = date_range("2000-1-1", periods=10, freq="D")
   40:         df1["diff"] = df1["end"] - df1["start"]
   41:         # Explicitly cast to object, to avoid implicit cast when setting np.nan
   42:         df1["bool"] = (np.arange(10) % 3 == 0).astype(object)
   43:         df1.loc[::2] = np.nan
   44:         df2 = df1.copy()
   45:         assert df1["text"].equals(df2["text"])
   46:         assert df1["start"].equals(df2["start"])
   47:         assert df1["end"].equals(df2["end"])
   48:         assert df1["diff"].equals(df2["diff"])
   49:         assert df1["bool"].equals(df2["bool"])
   50:         assert df1.equals(df2)
   51:         assert not df1.equals(object)
   52: 
   53:         # different dtype
   54:         different = df1.copy()
   55:         different["floats"] = different["floats"].astype("float32")
   56:         assert not df1.equals(different)
   57: 
   58:         # different index
   59:         different_index = -index
   60:         different = df2.set_index(different_index)
   61:         assert not df1.equals(different)
   62: 
   63:         # different columns
   64:         different = df2.copy()
   65:         different.columns = df2.columns[::-1]
   66:         assert not df1.equals(different)
   67: 
   68:         # DatetimeIndex
   69:         index = date_range("2000-1-1", periods=10, freq="min")
   70:         df1 = df1.set_index(index)
   71:         df2 = df1.copy()
   72:         assert df1.equals(df2)
   73: 
   74:         # MultiIndex
   75:         df3 = df1.set_index(["text"], append=True)
   76:         df2 = df1.set_index(["text"], append=True)
   77:         assert df3.equals(df2)
   78: 
   79:         df2 = df1.set_index(["floats"], append=True)
   80:         assert not df3.equals(df2)
   81: 
   82:         # NaN in index
   83:         df3 = df1.set_index(["floats"], append=True)
   84:         df2 = df1.set_index(["floats"], append=True)
   85:         assert df3.equals(df2)
