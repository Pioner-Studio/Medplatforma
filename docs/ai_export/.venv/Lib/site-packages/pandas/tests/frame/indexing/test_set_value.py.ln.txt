    1: import numpy as np
    2: 
    3: from pandas.core.dtypes.common import is_float_dtype
    4: 
    5: from pandas import (
    6:     DataFrame,
    7:     isna,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestSetValue:
   13:     def test_set_value(self, float_frame):
   14:         for idx in float_frame.index:
   15:             for col in float_frame.columns:
   16:                 float_frame._set_value(idx, col, 1)
   17:                 assert float_frame[col][idx] == 1
   18: 
   19:     def test_set_value_resize(self, float_frame, using_infer_string):
   20:         res = float_frame._set_value("foobar", "B", 0)
   21:         assert res is None
   22:         assert float_frame.index[-1] == "foobar"
   23:         assert float_frame._get_value("foobar", "B") == 0
   24: 
   25:         float_frame.loc["foobar", "qux"] = 0
   26:         assert float_frame._get_value("foobar", "qux") == 0
   27: 
   28:         res = float_frame.copy()
   29:         res._set_value("foobar", "baz", "sam")
   30:         if using_infer_string:
   31:             assert res["baz"].dtype == "string"
   32:         else:
   33:             assert res["baz"].dtype == np.object_
   34:         res = float_frame.copy()
   35:         res._set_value("foobar", "baz", True)
   36:         assert res["baz"].dtype == np.object_
   37: 
   38:         res = float_frame.copy()
   39:         res._set_value("foobar", "baz", 5)
   40:         assert is_float_dtype(res["baz"])
   41:         assert isna(res["baz"].drop(["foobar"])).all()
   42: 
   43:         with tm.assert_produces_warning(
   44:             FutureWarning, match="Setting an item of incompatible dtype"
   45:         ):
   46:             res._set_value("foobar", "baz", "sam")
   47:         assert res.loc["foobar", "baz"] == "sam"
   48: 
   49:     def test_set_value_with_index_dtype_change(self):
   50:         df_orig = DataFrame(
   51:             np.random.default_rng(2).standard_normal((3, 3)),
   52:             index=range(3),
   53:             columns=list("ABC"),
   54:         )
   55: 
   56:         # this is actually ambiguous as the 2 is interpreted as a positional
   57:         # so column is not created
   58:         df = df_orig.copy()
   59:         df._set_value("C", 2, 1.0)
   60:         assert list(df.index) == list(df_orig.index) + ["C"]
   61:         # assert list(df.columns) == list(df_orig.columns) + [2]
   62: 
   63:         df = df_orig.copy()
   64:         df.loc["C", 2] = 1.0
   65:         assert list(df.index) == list(df_orig.index) + ["C"]
   66:         # assert list(df.columns) == list(df_orig.columns) + [2]
   67: 
   68:         # create both new
   69:         df = df_orig.copy()
   70:         df._set_value("C", "D", 1.0)
   71:         assert list(df.index) == list(df_orig.index) + ["C"]
   72:         assert list(df.columns) == list(df_orig.columns) + ["D"]
   73: 
   74:         df = df_orig.copy()
   75:         df.loc["C", "D"] = 1.0
   76:         assert list(df.index) == list(df_orig.index) + ["C"]
   77:         assert list(df.columns) == list(df_orig.columns) + ["D"]
