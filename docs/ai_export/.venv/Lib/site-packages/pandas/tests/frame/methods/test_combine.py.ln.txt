    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: class TestCombine:
    9:     @pytest.mark.parametrize(
   10:         "data",
   11:         [
   12:             pd.date_range("2000", periods=4),
   13:             pd.date_range("2000", periods=4, tz="US/Central"),
   14:             pd.period_range("2000", periods=4),
   15:             pd.timedelta_range(0, periods=4),
   16:         ],
   17:     )
   18:     def test_combine_datetlike_udf(self, data):
   19:         # GH#23079
   20:         df = pd.DataFrame({"A": data})
   21:         other = df.copy()
   22:         df.iloc[1, 0] = None
   23: 
   24:         def combiner(a, b):
   25:             return b
   26: 
   27:         result = df.combine(other, combiner)
   28:         tm.assert_frame_equal(result, other)
   29: 
   30:     def test_combine_generic(self, float_frame):
   31:         df1 = float_frame
   32:         df2 = float_frame.loc[float_frame.index[:-5], ["A", "B", "C"]]
   33: 
   34:         combined = df1.combine(df2, np.add)
   35:         combined2 = df2.combine(df1, np.add)
   36:         assert combined["D"].isna().all()
   37:         assert combined2["D"].isna().all()
   38: 
   39:         chunk = combined.loc[combined.index[:-5], ["A", "B", "C"]]
   40:         chunk2 = combined2.loc[combined2.index[:-5], ["A", "B", "C"]]
   41: 
   42:         exp = (
   43:             float_frame.loc[float_frame.index[:-5], ["A", "B", "C"]].reindex_like(chunk)
   44:             * 2
   45:         )
   46:         tm.assert_frame_equal(chunk, exp)
   47:         tm.assert_frame_equal(chunk2, exp)
