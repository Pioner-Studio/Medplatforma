    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class DotSharedTests:
   12:     @pytest.fixture
   13:     def obj(self):
   14:         raise NotImplementedError
   15: 
   16:     @pytest.fixture
   17:     def other(self) -> DataFrame:
   18:         """
   19:         other is a DataFrame that is indexed so that obj.dot(other) is valid
   20:         """
   21:         raise NotImplementedError
   22: 
   23:     @pytest.fixture
   24:     def expected(self, obj, other) -> DataFrame:
   25:         """
   26:         The expected result of obj.dot(other)
   27:         """
   28:         raise NotImplementedError
   29: 
   30:     @classmethod
   31:     def reduced_dim_assert(cls, result, expected):
   32:         """
   33:         Assertion about results with 1 fewer dimension that self.obj
   34:         """
   35:         raise NotImplementedError
   36: 
   37:     def test_dot_equiv_values_dot(self, obj, other, expected):
   38:         # `expected` is constructed from obj.values.dot(other.values)
   39:         result = obj.dot(other)
   40:         tm.assert_equal(result, expected)
   41: 
   42:     def test_dot_2d_ndarray(self, obj, other, expected):
   43:         # Check ndarray argument; in this case we get matching values,
   44:         #  but index/columns may not match
   45:         result = obj.dot(other.values)
   46:         assert np.all(result == expected.values)
   47: 
   48:     def test_dot_1d_ndarray(self, obj, expected):
   49:         # can pass correct-length array
   50:         row = obj.iloc[0] if obj.ndim == 2 else obj
   51: 
   52:         result = obj.dot(row.values)
   53:         expected = obj.dot(row)
   54:         self.reduced_dim_assert(result, expected)
   55: 
   56:     def test_dot_series(self, obj, other, expected):
   57:         # Check series argument
   58:         result = obj.dot(other["1"])
   59:         self.reduced_dim_assert(result, expected["1"])
   60: 
   61:     def test_dot_series_alignment(self, obj, other, expected):
   62:         result = obj.dot(other.iloc[::-1]["1"])
   63:         self.reduced_dim_assert(result, expected["1"])
   64: 
   65:     def test_dot_aligns(self, obj, other, expected):
   66:         # Check index alignment
   67:         other2 = other.iloc[::-1]
   68:         result = obj.dot(other2)
   69:         tm.assert_equal(result, expected)
   70: 
   71:     def test_dot_shape_mismatch(self, obj):
   72:         msg = "Dot product shape mismatch"
   73:         # exception raised is of type Exception
   74:         with pytest.raises(Exception, match=msg):
   75:             obj.dot(obj.values[:3])
   76: 
   77:     def test_dot_misaligned(self, obj, other):
   78:         msg = "matrices are not aligned"
   79:         with pytest.raises(ValueError, match=msg):
   80:             obj.dot(other.T)
   81: 
   82: 
   83: class TestSeriesDot(DotSharedTests):
   84:     @pytest.fixture
   85:     def obj(self):
   86:         return Series(
   87:             np.random.default_rng(2).standard_normal(4), index=["p", "q", "r", "s"]
   88:         )
   89: 
   90:     @pytest.fixture
   91:     def other(self):
   92:         return DataFrame(
   93:             np.random.default_rng(2).standard_normal((3, 4)),
   94:             index=["1", "2", "3"],
   95:             columns=["p", "q", "r", "s"],
   96:         ).T
   97: 
   98:     @pytest.fixture
   99:     def expected(self, obj, other):
  100:         return Series(np.dot(obj.values, other.values), index=other.columns)
  101: 
  102:     @classmethod
  103:     def reduced_dim_assert(cls, result, expected):
  104:         """
  105:         Assertion about results with 1 fewer dimension that self.obj
  106:         """
  107:         tm.assert_almost_equal(result, expected)
  108: 
  109: 
  110: class TestDataFrameDot(DotSharedTests):
  111:     @pytest.fixture
  112:     def obj(self):
  113:         return DataFrame(
  114:             np.random.default_rng(2).standard_normal((3, 4)),
  115:             index=["a", "b", "c"],
  116:             columns=["p", "q", "r", "s"],
  117:         )
  118: 
  119:     @pytest.fixture
  120:     def other(self):
  121:         return DataFrame(
  122:             np.random.default_rng(2).standard_normal((4, 2)),
  123:             index=["p", "q", "r", "s"],
  124:             columns=["1", "2"],
  125:         )
  126: 
  127:     @pytest.fixture
  128:     def expected(self, obj, other):
  129:         return DataFrame(
  130:             np.dot(obj.values, other.values), index=obj.index, columns=other.columns
  131:         )
  132: 
  133:     @classmethod
  134:     def reduced_dim_assert(cls, result, expected):
  135:         """
  136:         Assertion about results with 1 fewer dimension that self.obj
  137:         """
  138:         tm.assert_series_equal(result, expected, check_names=False)
  139:         assert result.name is None
  140: 
  141: 
  142: @pytest.mark.parametrize(
  143:     "dtype,exp_dtype",
  144:     [("Float32", "Float64"), ("Int16", "Int32"), ("float[pyarrow]", "double[pyarrow]")],
  145: )
  146: def test_arrow_dtype(dtype, exp_dtype):
  147:     pytest.importorskip("pyarrow")
  148: 
  149:     cols = ["a", "b"]
  150:     df_a = DataFrame([[1, 2], [3, 4], [5, 6]], columns=cols, dtype="int32")
  151:     df_b = DataFrame([[1, 0], [0, 1]], index=cols, dtype=dtype)
  152:     result = df_a.dot(df_b)
  153:     expected = DataFrame([[1, 2], [3, 4], [5, 6]], dtype=exp_dtype)
  154: 
  155:     tm.assert_frame_equal(result, expected)
