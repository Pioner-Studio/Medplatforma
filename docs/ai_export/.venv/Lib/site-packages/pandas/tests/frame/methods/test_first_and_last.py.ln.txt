    1: """
    2: Note: includes tests for `last`
    3: """
    4: import numpy as np
    5: import pytest
    6: 
    7: import pandas as pd
    8: from pandas import (
    9:     DataFrame,
   10:     Index,
   11:     bdate_range,
   12:     date_range,
   13: )
   14: import pandas._testing as tm
   15: 
   16: deprecated_msg = "first is deprecated"
   17: last_deprecated_msg = "last is deprecated"
   18: 
   19: 
   20: class TestFirst:
   21:     def test_first_subset(self, frame_or_series):
   22:         ts = DataFrame(
   23:             np.random.default_rng(2).standard_normal((100, 4)),
   24:             columns=Index(list("ABCD"), dtype=object),
   25:             index=date_range("2000-01-01", periods=100, freq="12h"),
   26:         )
   27:         ts = tm.get_obj(ts, frame_or_series)
   28:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
   29:             result = ts.first("10d")
   30:             assert len(result) == 20
   31: 
   32:         ts = DataFrame(
   33:             np.random.default_rng(2).standard_normal((100, 4)),
   34:             columns=Index(list("ABCD"), dtype=object),
   35:             index=date_range("2000-01-01", periods=100, freq="D"),
   36:         )
   37:         ts = tm.get_obj(ts, frame_or_series)
   38:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
   39:             result = ts.first("10d")
   40:             assert len(result) == 10
   41: 
   42:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
   43:             result = ts.first("3ME")
   44:             expected = ts[:"3/31/2000"]
   45:             tm.assert_equal(result, expected)
   46: 
   47:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
   48:             result = ts.first("21D")
   49:             expected = ts[:21]
   50:             tm.assert_equal(result, expected)
   51: 
   52:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
   53:             result = ts[:0].first("3ME")
   54:             tm.assert_equal(result, ts[:0])
   55: 
   56:     def test_first_last_raises(self, frame_or_series):
   57:         # GH#20725
   58:         obj = DataFrame([[1, 2, 3], [4, 5, 6]])
   59:         obj = tm.get_obj(obj, frame_or_series)
   60: 
   61:         msg = "'first' only supports a DatetimeIndex index"
   62:         with tm.assert_produces_warning(
   63:             FutureWarning, match=deprecated_msg
   64:         ), pytest.raises(
   65:             TypeError, match=msg
   66:         ):  # index is not a DatetimeIndex
   67:             obj.first("1D")
   68: 
   69:         msg = "'last' only supports a DatetimeIndex index"
   70:         with tm.assert_produces_warning(
   71:             FutureWarning, match=last_deprecated_msg
   72:         ), pytest.raises(
   73:             TypeError, match=msg
   74:         ):  # index is not a DatetimeIndex
   75:             obj.last("1D")
   76: 
   77:     def test_last_subset(self, frame_or_series):
   78:         ts = DataFrame(
   79:             np.random.default_rng(2).standard_normal((100, 4)),
   80:             columns=Index(list("ABCD"), dtype=object),
   81:             index=date_range("2000-01-01", periods=100, freq="12h"),
   82:         )
   83:         ts = tm.get_obj(ts, frame_or_series)
   84:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
   85:             result = ts.last("10d")
   86:         assert len(result) == 20
   87: 
   88:         ts = DataFrame(
   89:             np.random.default_rng(2).standard_normal((30, 4)),
   90:             columns=Index(list("ABCD"), dtype=object),
   91:             index=date_range("2000-01-01", periods=30, freq="D"),
   92:         )
   93:         ts = tm.get_obj(ts, frame_or_series)
   94:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
   95:             result = ts.last("10d")
   96:         assert len(result) == 10
   97: 
   98:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
   99:             result = ts.last("21D")
  100:         expected = ts["2000-01-10":]
  101:         tm.assert_equal(result, expected)
  102: 
  103:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
  104:             result = ts.last("21D")
  105:         expected = ts[-21:]
  106:         tm.assert_equal(result, expected)
  107: 
  108:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
  109:             result = ts[:0].last("3ME")
  110:         tm.assert_equal(result, ts[:0])
  111: 
  112:     @pytest.mark.parametrize("start, periods", [("2010-03-31", 1), ("2010-03-30", 2)])
  113:     def test_first_with_first_day_last_of_month(self, frame_or_series, start, periods):
  114:         # GH#29623
  115:         x = frame_or_series([1] * 100, index=bdate_range(start, periods=100))
  116:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
  117:             result = x.first("1ME")
  118:         expected = frame_or_series(
  119:             [1] * periods, index=bdate_range(start, periods=periods)
  120:         )
  121:         tm.assert_equal(result, expected)
  122: 
  123:     def test_first_with_first_day_end_of_frq_n_greater_one(self, frame_or_series):
  124:         # GH#29623
  125:         x = frame_or_series([1] * 100, index=bdate_range("2010-03-31", periods=100))
  126:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
  127:             result = x.first("2ME")
  128:         expected = frame_or_series(
  129:             [1] * 23, index=bdate_range("2010-03-31", "2010-04-30")
  130:         )
  131:         tm.assert_equal(result, expected)
  132: 
  133:     def test_empty_not_input(self):
  134:         # GH#51032
  135:         df = DataFrame(index=pd.DatetimeIndex([]))
  136:         with tm.assert_produces_warning(FutureWarning, match=last_deprecated_msg):
  137:             result = df.last(offset=1)
  138: 
  139:         with tm.assert_produces_warning(FutureWarning, match=deprecated_msg):
  140:             result = df.first(offset=1)
  141: 
  142:         tm.assert_frame_equal(df, result)
  143:         assert df is not result
