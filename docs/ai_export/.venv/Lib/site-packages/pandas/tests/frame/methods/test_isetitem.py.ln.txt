    1: import pytest
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Series,
    6: )
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestDataFrameSetItem:
   11:     def test_isetitem_ea_df(self):
   12:         # GH#49922
   13:         df = DataFrame([[1, 2, 3], [4, 5, 6]])
   14:         rhs = DataFrame([[11, 12], [13, 14]], dtype="Int64")
   15: 
   16:         df.isetitem([0, 1], rhs)
   17:         expected = DataFrame(
   18:             {
   19:                 0: Series([11, 13], dtype="Int64"),
   20:                 1: Series([12, 14], dtype="Int64"),
   21:                 2: [3, 6],
   22:             }
   23:         )
   24:         tm.assert_frame_equal(df, expected)
   25: 
   26:     def test_isetitem_ea_df_scalar_indexer(self):
   27:         # GH#49922
   28:         df = DataFrame([[1, 2, 3], [4, 5, 6]])
   29:         rhs = DataFrame([[11], [13]], dtype="Int64")
   30: 
   31:         df.isetitem(2, rhs)
   32:         expected = DataFrame(
   33:             {
   34:                 0: [1, 4],
   35:                 1: [2, 5],
   36:                 2: Series([11, 13], dtype="Int64"),
   37:             }
   38:         )
   39:         tm.assert_frame_equal(df, expected)
   40: 
   41:     def test_isetitem_dimension_mismatch(self):
   42:         # GH#51701
   43:         df = DataFrame({"a": [1, 2], "b": [3, 4], "c": [5, 6]})
   44:         value = df.copy()
   45:         with pytest.raises(ValueError, match="Got 2 positions but value has 3 columns"):
   46:             df.isetitem([1, 2], value)
   47: 
   48:         value = df.copy()
   49:         with pytest.raises(ValueError, match="Got 2 positions but value has 1 columns"):
   50:             df.isetitem([1, 2], value[["a"]])
