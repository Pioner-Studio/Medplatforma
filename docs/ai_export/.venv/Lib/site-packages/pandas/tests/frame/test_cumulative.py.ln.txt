    1: """
    2: Tests for DataFrame cumulative operations
    3: 
    4: See also
    5: --------
    6: tests.series.test_cumulative
    7: """
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: from pandas import (
   13:     DataFrame,
   14:     Series,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: class TestDataFrameCumulativeOps:
   20:     # ---------------------------------------------------------------------
   21:     # Cumulative Operations - cumsum, cummax, ...
   22: 
   23:     def test_cumulative_ops_smoke(self):
   24:         # it works
   25:         df = DataFrame({"A": np.arange(20)}, index=np.arange(20))
   26:         df.cummax()
   27:         df.cummin()
   28:         df.cumsum()
   29: 
   30:         dm = DataFrame(np.arange(20).reshape(4, 5), index=range(4), columns=range(5))
   31:         # TODO(wesm): do something with this?
   32:         dm.cumsum()
   33: 
   34:     def test_cumprod_smoke(self, datetime_frame):
   35:         datetime_frame.iloc[5:10, 0] = np.nan
   36:         datetime_frame.iloc[10:15, 1] = np.nan
   37:         datetime_frame.iloc[15:, 2] = np.nan
   38: 
   39:         # ints
   40:         df = datetime_frame.fillna(0).astype(int)
   41:         df.cumprod(0)
   42:         df.cumprod(1)
   43: 
   44:         # ints32
   45:         df = datetime_frame.fillna(0).astype(np.int32)
   46:         df.cumprod(0)
   47:         df.cumprod(1)
   48: 
   49:     @pytest.mark.parametrize("method", ["cumsum", "cumprod", "cummin", "cummax"])
   50:     def test_cumulative_ops_match_series_apply(self, datetime_frame, method):
   51:         datetime_frame.iloc[5:10, 0] = np.nan
   52:         datetime_frame.iloc[10:15, 1] = np.nan
   53:         datetime_frame.iloc[15:, 2] = np.nan
   54: 
   55:         # axis = 0
   56:         result = getattr(datetime_frame, method)()
   57:         expected = datetime_frame.apply(getattr(Series, method))
   58:         tm.assert_frame_equal(result, expected)
   59: 
   60:         # axis = 1
   61:         result = getattr(datetime_frame, method)(axis=1)
   62:         expected = datetime_frame.apply(getattr(Series, method), axis=1)
   63:         tm.assert_frame_equal(result, expected)
   64: 
   65:         # fix issue TODO: GH ref?
   66:         assert np.shape(result) == np.shape(datetime_frame)
   67: 
   68:     def test_cumsum_preserve_dtypes(self):
   69:         # GH#19296 dont incorrectly upcast to object
   70:         df = DataFrame({"A": [1, 2, 3], "B": [1, 2, 3.0], "C": [True, False, False]})
   71: 
   72:         result = df.cumsum()
   73: 
   74:         expected = DataFrame(
   75:             {
   76:                 "A": Series([1, 3, 6], dtype=np.int64),
   77:                 "B": Series([1, 3, 6], dtype=np.float64),
   78:                 "C": df["C"].cumsum(),
   79:             }
   80:         )
   81:         tm.assert_frame_equal(result, expected)
