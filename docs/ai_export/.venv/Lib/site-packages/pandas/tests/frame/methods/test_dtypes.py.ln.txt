    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas.core.dtypes.dtypes import DatetimeTZDtype
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DataFrame,
   11:     Series,
   12:     date_range,
   13:     option_context,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestDataFrameDataTypes:
   19:     def test_empty_frame_dtypes(self):
   20:         empty_df = DataFrame()
   21:         tm.assert_series_equal(empty_df.dtypes, Series(dtype=object))
   22: 
   23:         nocols_df = DataFrame(index=[1, 2, 3])
   24:         tm.assert_series_equal(nocols_df.dtypes, Series(dtype=object))
   25: 
   26:         norows_df = DataFrame(columns=list("abc"))
   27:         tm.assert_series_equal(norows_df.dtypes, Series(object, index=list("abc")))
   28: 
   29:         norows_int_df = DataFrame(columns=list("abc")).astype(np.int32)
   30:         tm.assert_series_equal(
   31:             norows_int_df.dtypes, Series(np.dtype("int32"), index=list("abc"))
   32:         )
   33: 
   34:         df = DataFrame({"a": 1, "b": True, "c": 1.0}, index=[1, 2, 3])
   35:         ex_dtypes = Series({"a": np.int64, "b": np.bool_, "c": np.float64})
   36:         tm.assert_series_equal(df.dtypes, ex_dtypes)
   37: 
   38:         # same but for empty slice of df
   39:         tm.assert_series_equal(df[:0].dtypes, ex_dtypes)
   40: 
   41:     def test_datetime_with_tz_dtypes(self):
   42:         tzframe = DataFrame(
   43:             {
   44:                 "A": date_range("20130101", periods=3),
   45:                 "B": date_range("20130101", periods=3, tz="US/Eastern"),
   46:                 "C": date_range("20130101", periods=3, tz="CET"),
   47:             }
   48:         )
   49:         tzframe.iloc[1, 1] = pd.NaT
   50:         tzframe.iloc[1, 2] = pd.NaT
   51:         result = tzframe.dtypes.sort_index()
   52:         expected = Series(
   53:             [
   54:                 np.dtype("datetime64[ns]"),
   55:                 DatetimeTZDtype("ns", "US/Eastern"),
   56:                 DatetimeTZDtype("ns", "CET"),
   57:             ],
   58:             ["A", "B", "C"],
   59:         )
   60: 
   61:         tm.assert_series_equal(result, expected)
   62: 
   63:     def test_dtypes_are_correct_after_column_slice(self):
   64:         # GH6525
   65:         df = DataFrame(index=range(5), columns=list("abc"), dtype=np.float64)
   66:         tm.assert_series_equal(
   67:             df.dtypes,
   68:             Series({"a": np.float64, "b": np.float64, "c": np.float64}),
   69:         )
   70:         tm.assert_series_equal(df.iloc[:, 2:].dtypes, Series({"c": np.float64}))
   71:         tm.assert_series_equal(
   72:             df.dtypes,
   73:             Series({"a": np.float64, "b": np.float64, "c": np.float64}),
   74:         )
   75: 
   76:     @pytest.mark.parametrize(
   77:         "data",
   78:         [pd.NA, True],
   79:     )
   80:     def test_dtypes_are_correct_after_groupby_last(self, data):
   81:         # GH46409
   82:         df = DataFrame(
   83:             {"id": [1, 2, 3, 4], "test": [True, pd.NA, data, False]}
   84:         ).convert_dtypes()
   85:         result = df.groupby("id").last().test
   86:         expected = df.set_index("id").test
   87:         assert result.dtype == pd.BooleanDtype()
   88:         tm.assert_series_equal(expected, result)
   89: 
   90:     def test_dtypes_gh8722(self, float_string_frame):
   91:         float_string_frame["bool"] = float_string_frame["A"] > 0
   92:         result = float_string_frame.dtypes
   93:         expected = Series(
   94:             {k: v.dtype for k, v in float_string_frame.items()}, index=result.index
   95:         )
   96:         tm.assert_series_equal(result, expected)
   97: 
   98:         # compat, GH 8722
   99:         msg = "use_inf_as_na option is deprecated"
  100:         with tm.assert_produces_warning(FutureWarning, match=msg):
  101:             with option_context("use_inf_as_na", True):
  102:                 df = DataFrame([[1]])
  103:                 result = df.dtypes
  104:                 tm.assert_series_equal(result, Series({0: np.dtype("int64")}))
  105: 
  106:     def test_dtypes_timedeltas(self):
  107:         df = DataFrame(
  108:             {
  109:                 "A": Series(date_range("2012-1-1", periods=3, freq="D")),
  110:                 "B": Series([timedelta(days=i) for i in range(3)]),
  111:             }
  112:         )
  113:         result = df.dtypes
  114:         expected = Series(
  115:             [np.dtype("datetime64[ns]"), np.dtype("timedelta64[ns]")], index=list("AB")
  116:         )
  117:         tm.assert_series_equal(result, expected)
  118: 
  119:         df["C"] = df["A"] + df["B"]
  120:         result = df.dtypes
  121:         expected = Series(
  122:             [
  123:                 np.dtype("datetime64[ns]"),
  124:                 np.dtype("timedelta64[ns]"),
  125:                 np.dtype("datetime64[ns]"),
  126:             ],
  127:             index=list("ABC"),
  128:         )
  129:         tm.assert_series_equal(result, expected)
  130: 
  131:         # mixed int types
  132:         df["D"] = 1
  133:         result = df.dtypes
  134:         expected = Series(
  135:             [
  136:                 np.dtype("datetime64[ns]"),
  137:                 np.dtype("timedelta64[ns]"),
  138:                 np.dtype("datetime64[ns]"),
  139:                 np.dtype("int64"),
  140:             ],
  141:             index=list("ABCD"),
  142:         )
  143:         tm.assert_series_equal(result, expected)
  144: 
  145:     def test_frame_apply_np_array_return_type(self, using_infer_string):
  146:         # GH 35517
  147:         df = DataFrame([["foo"]])
  148:         result = df.apply(lambda col: np.array("bar"))
  149:         if using_infer_string:
  150:             expected = Series([np.array(["bar"])])
  151:         else:
  152:             expected = Series(["bar"])
  153:         tm.assert_series_equal(result, expected)
