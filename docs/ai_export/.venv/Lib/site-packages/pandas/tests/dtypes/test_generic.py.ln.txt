    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas.core.dtypes import generic as gt
    7: 
    8: import pandas as pd
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestABCClasses:
   13:     tuples = [[1, 2, 2], ["red", "blue", "red"]]
   14:     multi_index = pd.MultiIndex.from_arrays(tuples, names=("number", "color"))
   15:     datetime_index = pd.to_datetime(["2000/1/1", "2010/1/1"])
   16:     timedelta_index = pd.to_timedelta(np.arange(5), unit="s")
   17:     period_index = pd.period_range("2000/1/1", "2010/1/1/", freq="M")
   18:     categorical = pd.Categorical([1, 2, 3], categories=[2, 3, 1])
   19:     categorical_df = pd.DataFrame({"values": [1, 2, 3]}, index=categorical)
   20:     df = pd.DataFrame({"names": ["a", "b", "c"]}, index=multi_index)
   21:     sparse_array = pd.arrays.SparseArray(np.random.default_rng(2).standard_normal(10))
   22: 
   23:     datetime_array = pd.core.arrays.DatetimeArray._from_sequence(datetime_index)
   24:     timedelta_array = pd.core.arrays.TimedeltaArray._from_sequence(timedelta_index)
   25: 
   26:     abc_pairs = [
   27:         ("ABCMultiIndex", multi_index),
   28:         ("ABCDatetimeIndex", datetime_index),
   29:         ("ABCRangeIndex", pd.RangeIndex(3)),
   30:         ("ABCTimedeltaIndex", timedelta_index),
   31:         ("ABCIntervalIndex", pd.interval_range(start=0, end=3)),
   32:         (
   33:             "ABCPeriodArray",
   34:             pd.arrays.PeriodArray([2000, 2001, 2002], dtype="period[D]"),
   35:         ),
   36:         ("ABCNumpyExtensionArray", pd.arrays.NumpyExtensionArray(np.array([0, 1, 2]))),
   37:         ("ABCPeriodIndex", period_index),
   38:         ("ABCCategoricalIndex", categorical_df.index),
   39:         ("ABCSeries", pd.Series([1, 2, 3])),
   40:         ("ABCDataFrame", df),
   41:         ("ABCCategorical", categorical),
   42:         ("ABCDatetimeArray", datetime_array),
   43:         ("ABCTimedeltaArray", timedelta_array),
   44:     ]
   45: 
   46:     @pytest.mark.parametrize("abctype1, inst", abc_pairs)
   47:     @pytest.mark.parametrize("abctype2, _", abc_pairs)
   48:     def test_abc_pairs_instance_check(self, abctype1, abctype2, inst, _):
   49:         # GH 38588, 46719
   50:         if abctype1 == abctype2:
   51:             assert isinstance(inst, getattr(gt, abctype2))
   52:             assert not isinstance(type(inst), getattr(gt, abctype2))
   53:         else:
   54:             assert not isinstance(inst, getattr(gt, abctype2))
   55: 
   56:     @pytest.mark.parametrize("abctype1, inst", abc_pairs)
   57:     @pytest.mark.parametrize("abctype2, _", abc_pairs)
   58:     def test_abc_pairs_subclass_check(self, abctype1, abctype2, inst, _):
   59:         # GH 38588, 46719
   60:         if abctype1 == abctype2:
   61:             assert issubclass(type(inst), getattr(gt, abctype2))
   62: 
   63:             with pytest.raises(
   64:                 TypeError, match=re.escape("issubclass() arg 1 must be a class")
   65:             ):
   66:                 issubclass(inst, getattr(gt, abctype2))
   67:         else:
   68:             assert not issubclass(type(inst), getattr(gt, abctype2))
   69: 
   70:     abc_subclasses = {
   71:         "ABCIndex": [
   72:             abctype
   73:             for abctype, _ in abc_pairs
   74:             if "Index" in abctype and abctype != "ABCIndex"
   75:         ],
   76:         "ABCNDFrame": ["ABCSeries", "ABCDataFrame"],
   77:         "ABCExtensionArray": [
   78:             "ABCCategorical",
   79:             "ABCDatetimeArray",
   80:             "ABCPeriodArray",
   81:             "ABCTimedeltaArray",
   82:         ],
   83:     }
   84: 
   85:     @pytest.mark.parametrize("parent, subs", abc_subclasses.items())
   86:     @pytest.mark.parametrize("abctype, inst", abc_pairs)
   87:     def test_abc_hierarchy(self, parent, subs, abctype, inst):
   88:         # GH 38588
   89:         if abctype in subs:
   90:             assert isinstance(inst, getattr(gt, parent))
   91:         else:
   92:             assert not isinstance(inst, getattr(gt, parent))
   93: 
   94:     @pytest.mark.parametrize("abctype", [e for e in gt.__dict__ if e.startswith("ABC")])
   95:     def test_abc_coverage(self, abctype):
   96:         # GH 38588
   97:         assert (
   98:             abctype in (e for e, _ in self.abc_pairs) or abctype in self.abc_subclasses
   99:         )
  100: 
  101: 
  102: def test_setattr_warnings():
  103:     # GH7175 - GOTCHA: You can't use dot notation to add a column...
  104:     d = {
  105:         "one": pd.Series([1.0, 2.0, 3.0], index=["a", "b", "c"]),
  106:         "two": pd.Series([1.0, 2.0, 3.0, 4.0], index=["a", "b", "c", "d"]),
  107:     }
  108:     df = pd.DataFrame(d)
  109: 
  110:     with tm.assert_produces_warning(None):
  111:         #  successfully add new column
  112:         #  this should not raise a warning
  113:         df["three"] = df.two + 1
  114:         assert df.three.sum() > df.two.sum()
  115: 
  116:     with tm.assert_produces_warning(None):
  117:         #  successfully modify column in place
  118:         #  this should not raise a warning
  119:         df.one += 1
  120:         assert df.one.iloc[0] == 2
  121: 
  122:     with tm.assert_produces_warning(None):
  123:         #  successfully add an attribute to a series
  124:         #  this should not raise a warning
  125:         df.two.not_an_index = [1, 2]
  126: 
  127:     with tm.assert_produces_warning(UserWarning):
  128:         #  warn when setting column to nonexistent name
  129:         df.four = df.two + 2
  130:         assert df.four.sum() > df.two.sum()
