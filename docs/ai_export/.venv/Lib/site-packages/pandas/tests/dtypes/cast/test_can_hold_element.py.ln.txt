    1: import numpy as np
    2: 
    3: from pandas.core.dtypes.cast import can_hold_element
    4: 
    5: 
    6: def test_can_hold_element_range(any_int_numpy_dtype):
    7:     # GH#44261
    8:     dtype = np.dtype(any_int_numpy_dtype)
    9:     arr = np.array([], dtype=dtype)
   10: 
   11:     rng = range(2, 127)
   12:     assert can_hold_element(arr, rng)
   13: 
   14:     # negatives -> can't be held by uint dtypes
   15:     rng = range(-2, 127)
   16:     if dtype.kind == "i":
   17:         assert can_hold_element(arr, rng)
   18:     else:
   19:         assert not can_hold_element(arr, rng)
   20: 
   21:     rng = range(2, 255)
   22:     if dtype == "int8":
   23:         assert not can_hold_element(arr, rng)
   24:     else:
   25:         assert can_hold_element(arr, rng)
   26: 
   27:     rng = range(-255, 65537)
   28:     if dtype.kind == "u":
   29:         assert not can_hold_element(arr, rng)
   30:     elif dtype.itemsize < 4:
   31:         assert not can_hold_element(arr, rng)
   32:     else:
   33:         assert can_hold_element(arr, rng)
   34: 
   35:     # empty
   36:     rng = range(-(10**10), -(10**10))
   37:     assert len(rng) == 0
   38:     # assert can_hold_element(arr, rng)
   39: 
   40:     rng = range(10**10, 10**10)
   41:     assert len(rng) == 0
   42:     assert can_hold_element(arr, rng)
   43: 
   44: 
   45: def test_can_hold_element_int_values_float_ndarray():
   46:     arr = np.array([], dtype=np.int64)
   47: 
   48:     element = np.array([1.0, 2.0])
   49:     assert can_hold_element(arr, element)
   50: 
   51:     assert not can_hold_element(arr, element + 0.5)
   52: 
   53:     # integer but not losslessly castable to int64
   54:     element = np.array([3, 2**65], dtype=np.float64)
   55:     assert not can_hold_element(arr, element)
   56: 
   57: 
   58: def test_can_hold_element_int8_int():
   59:     arr = np.array([], dtype=np.int8)
   60: 
   61:     element = 2
   62:     assert can_hold_element(arr, element)
   63:     assert can_hold_element(arr, np.int8(element))
   64:     assert can_hold_element(arr, np.uint8(element))
   65:     assert can_hold_element(arr, np.int16(element))
   66:     assert can_hold_element(arr, np.uint16(element))
   67:     assert can_hold_element(arr, np.int32(element))
   68:     assert can_hold_element(arr, np.uint32(element))
   69:     assert can_hold_element(arr, np.int64(element))
   70:     assert can_hold_element(arr, np.uint64(element))
   71: 
   72:     element = 2**9
   73:     assert not can_hold_element(arr, element)
   74:     assert not can_hold_element(arr, np.int16(element))
   75:     assert not can_hold_element(arr, np.uint16(element))
   76:     assert not can_hold_element(arr, np.int32(element))
   77:     assert not can_hold_element(arr, np.uint32(element))
   78:     assert not can_hold_element(arr, np.int64(element))
   79:     assert not can_hold_element(arr, np.uint64(element))
