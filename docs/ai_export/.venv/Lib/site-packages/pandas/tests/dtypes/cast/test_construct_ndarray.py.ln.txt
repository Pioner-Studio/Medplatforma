    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.core.construction import sanitize_array
    7: 
    8: 
    9: @pytest.mark.parametrize(
   10:     "values, dtype, expected",
   11:     [
   12:         ([1, 2, 3], None, np.array([1, 2, 3], dtype=np.int64)),
   13:         (np.array([1, 2, 3]), None, np.array([1, 2, 3])),
   14:         (["1", "2", None], None, np.array(["1", "2", None])),
   15:         (["1", "2", None], np.dtype("str"), np.array(["1", "2", None])),
   16:         ([1, 2, None], np.dtype("str"), np.array(["1", "2", None])),
   17:     ],
   18: )
   19: def test_construct_1d_ndarray_preserving_na(
   20:     values, dtype, expected, using_infer_string
   21: ):
   22:     result = sanitize_array(values, index=None, dtype=dtype)
   23:     if using_infer_string and expected.dtype == object and dtype is None:
   24:         tm.assert_extension_array_equal(result, pd.array(expected))
   25:     else:
   26:         tm.assert_numpy_array_equal(result, expected)
   27: 
   28: 
   29: @pytest.mark.parametrize("dtype", ["m8[ns]", "M8[ns]"])
   30: def test_construct_1d_ndarray_preserving_na_datetimelike(dtype):
   31:     arr = np.arange(5, dtype=np.int64).view(dtype)
   32:     expected = np.array(list(arr), dtype=object)
   33:     assert all(isinstance(x, type(arr[0])) for x in expected)
   34: 
   35:     result = sanitize_array(arr, index=None, dtype=np.dtype(object))
   36:     tm.assert_numpy_array_equal(result, expected)
