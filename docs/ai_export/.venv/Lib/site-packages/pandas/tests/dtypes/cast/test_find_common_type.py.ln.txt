    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.cast import find_common_type
    5: from pandas.core.dtypes.common import pandas_dtype
    6: from pandas.core.dtypes.dtypes import (
    7:     CategoricalDtype,
    8:     DatetimeTZDtype,
    9:     IntervalDtype,
   10:     PeriodDtype,
   11: )
   12: 
   13: from pandas import (
   14:     Categorical,
   15:     Index,
   16: )
   17: 
   18: 
   19: @pytest.mark.parametrize(
   20:     "source_dtypes,expected_common_dtype",
   21:     [
   22:         ((np.int64,), np.int64),
   23:         ((np.uint64,), np.uint64),
   24:         ((np.float32,), np.float32),
   25:         ((object,), object),
   26:         # Into ints.
   27:         ((np.int16, np.int64), np.int64),
   28:         ((np.int32, np.uint32), np.int64),
   29:         ((np.uint16, np.uint64), np.uint64),
   30:         # Into floats.
   31:         ((np.float16, np.float32), np.float32),
   32:         ((np.float16, np.int16), np.float32),
   33:         ((np.float32, np.int16), np.float32),
   34:         ((np.uint64, np.int64), np.float64),
   35:         ((np.int16, np.float64), np.float64),
   36:         ((np.float16, np.int64), np.float64),
   37:         # Into others.
   38:         ((np.complex128, np.int32), np.complex128),
   39:         ((object, np.float32), object),
   40:         ((object, np.int16), object),
   41:         # Bool with int.
   42:         ((np.dtype("bool"), np.int64), object),
   43:         ((np.dtype("bool"), np.int32), object),
   44:         ((np.dtype("bool"), np.int16), object),
   45:         ((np.dtype("bool"), np.int8), object),
   46:         ((np.dtype("bool"), np.uint64), object),
   47:         ((np.dtype("bool"), np.uint32), object),
   48:         ((np.dtype("bool"), np.uint16), object),
   49:         ((np.dtype("bool"), np.uint8), object),
   50:         # Bool with float.
   51:         ((np.dtype("bool"), np.float64), object),
   52:         ((np.dtype("bool"), np.float32), object),
   53:         (
   54:             (np.dtype("datetime64[ns]"), np.dtype("datetime64[ns]")),
   55:             np.dtype("datetime64[ns]"),
   56:         ),
   57:         (
   58:             (np.dtype("timedelta64[ns]"), np.dtype("timedelta64[ns]")),
   59:             np.dtype("timedelta64[ns]"),
   60:         ),
   61:         (
   62:             (np.dtype("datetime64[ns]"), np.dtype("datetime64[ms]")),
   63:             np.dtype("datetime64[ns]"),
   64:         ),
   65:         (
   66:             (np.dtype("timedelta64[ms]"), np.dtype("timedelta64[ns]")),
   67:             np.dtype("timedelta64[ns]"),
   68:         ),
   69:         ((np.dtype("datetime64[ns]"), np.dtype("timedelta64[ns]")), object),
   70:         ((np.dtype("datetime64[ns]"), np.int64), object),
   71:     ],
   72: )
   73: def test_numpy_dtypes(source_dtypes, expected_common_dtype):
   74:     source_dtypes = [pandas_dtype(x) for x in source_dtypes]
   75:     assert find_common_type(source_dtypes) == expected_common_dtype
   76: 
   77: 
   78: def test_raises_empty_input():
   79:     with pytest.raises(ValueError, match="no types given"):
   80:         find_common_type([])
   81: 
   82: 
   83: @pytest.mark.parametrize(
   84:     "dtypes,exp_type",
   85:     [
   86:         ([CategoricalDtype()], "category"),
   87:         ([object, CategoricalDtype()], object),
   88:         ([CategoricalDtype(), CategoricalDtype()], "category"),
   89:     ],
   90: )
   91: def test_categorical_dtype(dtypes, exp_type):
   92:     assert find_common_type(dtypes) == exp_type
   93: 
   94: 
   95: def test_datetimetz_dtype_match():
   96:     dtype = DatetimeTZDtype(unit="ns", tz="US/Eastern")
   97:     assert find_common_type([dtype, dtype]) == "datetime64[ns, US/Eastern]"
   98: 
   99: 
  100: @pytest.mark.parametrize(
  101:     "dtype2",
  102:     [
  103:         DatetimeTZDtype(unit="ns", tz="Asia/Tokyo"),
  104:         np.dtype("datetime64[ns]"),
  105:         object,
  106:         np.int64,
  107:     ],
  108: )
  109: def test_datetimetz_dtype_mismatch(dtype2):
  110:     dtype = DatetimeTZDtype(unit="ns", tz="US/Eastern")
  111:     assert find_common_type([dtype, dtype2]) == object
  112:     assert find_common_type([dtype2, dtype]) == object
  113: 
  114: 
  115: def test_period_dtype_match():
  116:     dtype = PeriodDtype(freq="D")
  117:     assert find_common_type([dtype, dtype]) == "period[D]"
  118: 
  119: 
  120: @pytest.mark.parametrize(
  121:     "dtype2",
  122:     [
  123:         DatetimeTZDtype(unit="ns", tz="Asia/Tokyo"),
  124:         PeriodDtype(freq="2D"),
  125:         PeriodDtype(freq="h"),
  126:         np.dtype("datetime64[ns]"),
  127:         object,
  128:         np.int64,
  129:     ],
  130: )
  131: def test_period_dtype_mismatch(dtype2):
  132:     dtype = PeriodDtype(freq="D")
  133:     assert find_common_type([dtype, dtype2]) == object
  134:     assert find_common_type([dtype2, dtype]) == object
  135: 
  136: 
  137: interval_dtypes = [
  138:     IntervalDtype(np.int64, "right"),
  139:     IntervalDtype(np.float64, "right"),
  140:     IntervalDtype(np.uint64, "right"),
  141:     IntervalDtype(DatetimeTZDtype(unit="ns", tz="US/Eastern"), "right"),
  142:     IntervalDtype("M8[ns]", "right"),
  143:     IntervalDtype("m8[ns]", "right"),
  144: ]
  145: 
  146: 
  147: @pytest.mark.parametrize("left", interval_dtypes)
  148: @pytest.mark.parametrize("right", interval_dtypes)
  149: def test_interval_dtype(left, right):
  150:     result = find_common_type([left, right])
  151: 
  152:     if left is right:
  153:         assert result is left
  154: 
  155:     elif left.subtype.kind in ["i", "u", "f"]:
  156:         # i.e. numeric
  157:         if right.subtype.kind in ["i", "u", "f"]:
  158:             # both numeric -> common numeric subtype
  159:             expected = IntervalDtype(np.float64, "right")
  160:             assert result == expected
  161:         else:
  162:             assert result == object
  163: 
  164:     else:
  165:         assert result == object
  166: 
  167: 
  168: @pytest.mark.parametrize("dtype", interval_dtypes)
  169: def test_interval_dtype_with_categorical(dtype):
  170:     obj = Index([], dtype=dtype)
  171: 
  172:     cat = Categorical([], categories=obj)
  173: 
  174:     result = find_common_type([dtype, cat.dtype])
  175:     assert result == dtype
