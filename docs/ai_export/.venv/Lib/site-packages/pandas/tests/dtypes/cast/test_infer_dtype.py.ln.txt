    1: from datetime import (
    2:     date,
    3:     datetime,
    4:     timedelta,
    5: )
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas.core.dtypes.cast import (
   11:     infer_dtype_from,
   12:     infer_dtype_from_array,
   13:     infer_dtype_from_scalar,
   14: )
   15: from pandas.core.dtypes.common import is_dtype_equal
   16: 
   17: from pandas import (
   18:     Categorical,
   19:     Interval,
   20:     Period,
   21:     Series,
   22:     Timedelta,
   23:     Timestamp,
   24:     date_range,
   25: )
   26: 
   27: 
   28: def test_infer_dtype_from_int_scalar(any_int_numpy_dtype):
   29:     # Test that infer_dtype_from_scalar is
   30:     # returning correct dtype for int and float.
   31:     data = np.dtype(any_int_numpy_dtype).type(12)
   32:     dtype, val = infer_dtype_from_scalar(data)
   33:     assert dtype == type(data)
   34: 
   35: 
   36: def test_infer_dtype_from_float_scalar(float_numpy_dtype):
   37:     float_numpy_dtype = np.dtype(float_numpy_dtype).type
   38:     data = float_numpy_dtype(12)
   39: 
   40:     dtype, val = infer_dtype_from_scalar(data)
   41:     assert dtype == float_numpy_dtype
   42: 
   43: 
   44: @pytest.mark.parametrize(
   45:     "data,exp_dtype", [(12, np.int64), (np.float64(12), np.float64)]
   46: )
   47: def test_infer_dtype_from_python_scalar(data, exp_dtype):
   48:     dtype, val = infer_dtype_from_scalar(data)
   49:     assert dtype == exp_dtype
   50: 
   51: 
   52: @pytest.mark.parametrize("bool_val", [True, False])
   53: def test_infer_dtype_from_boolean(bool_val):
   54:     dtype, val = infer_dtype_from_scalar(bool_val)
   55:     assert dtype == np.bool_
   56: 
   57: 
   58: def test_infer_dtype_from_complex(complex_dtype):
   59:     data = np.dtype(complex_dtype).type(1)
   60:     dtype, val = infer_dtype_from_scalar(data)
   61:     assert dtype == np.complex128
   62: 
   63: 
   64: def test_infer_dtype_from_datetime():
   65:     dt64 = np.datetime64(1, "ns")
   66:     dtype, val = infer_dtype_from_scalar(dt64)
   67:     assert dtype == "M8[ns]"
   68: 
   69:     ts = Timestamp(1)
   70:     dtype, val = infer_dtype_from_scalar(ts)
   71:     assert dtype == "M8[ns]"
   72: 
   73:     dt = datetime(2000, 1, 1, 0, 0)
   74:     dtype, val = infer_dtype_from_scalar(dt)
   75:     assert dtype == "M8[us]"
   76: 
   77: 
   78: def test_infer_dtype_from_timedelta():
   79:     td64 = np.timedelta64(1, "ns")
   80:     dtype, val = infer_dtype_from_scalar(td64)
   81:     assert dtype == "m8[ns]"
   82: 
   83:     pytd = timedelta(1)
   84:     dtype, val = infer_dtype_from_scalar(pytd)
   85:     assert dtype == "m8[us]"
   86: 
   87:     td = Timedelta(1)
   88:     dtype, val = infer_dtype_from_scalar(td)
   89:     assert dtype == "m8[ns]"
   90: 
   91: 
   92: @pytest.mark.parametrize("freq", ["M", "D"])
   93: def test_infer_dtype_from_period(freq):
   94:     p = Period("2011-01-01", freq=freq)
   95:     dtype, val = infer_dtype_from_scalar(p)
   96: 
   97:     exp_dtype = f"period[{freq}]"
   98: 
   99:     assert dtype == exp_dtype
  100:     assert val == p
  101: 
  102: 
  103: def test_infer_dtype_misc():
  104:     dt = date(2000, 1, 1)
  105:     dtype, val = infer_dtype_from_scalar(dt)
  106:     assert dtype == np.object_
  107: 
  108:     ts = Timestamp(1, tz="US/Eastern")
  109:     dtype, val = infer_dtype_from_scalar(ts)
  110:     assert dtype == "datetime64[ns, US/Eastern]"
  111: 
  112: 
  113: @pytest.mark.parametrize("tz", ["UTC", "US/Eastern", "Asia/Tokyo"])
  114: def test_infer_from_scalar_tz(tz):
  115:     dt = Timestamp(1, tz=tz)
  116:     dtype, val = infer_dtype_from_scalar(dt)
  117: 
  118:     exp_dtype = f"datetime64[ns, {tz}]"
  119: 
  120:     assert dtype == exp_dtype
  121:     assert val == dt
  122: 
  123: 
  124: @pytest.mark.parametrize(
  125:     "left, right, subtype",
  126:     [
  127:         (0, 1, "int64"),
  128:         (0.0, 1.0, "float64"),
  129:         (Timestamp(0), Timestamp(1), "datetime64[ns]"),
  130:         (Timestamp(0, tz="UTC"), Timestamp(1, tz="UTC"), "datetime64[ns, UTC]"),
  131:         (Timedelta(0), Timedelta(1), "timedelta64[ns]"),
  132:     ],
  133: )
  134: def test_infer_from_interval(left, right, subtype, closed):
  135:     # GH 30337
  136:     interval = Interval(left, right, closed)
  137:     result_dtype, result_value = infer_dtype_from_scalar(interval)
  138:     expected_dtype = f"interval[{subtype}, {closed}]"
  139:     assert result_dtype == expected_dtype
  140:     assert result_value == interval
  141: 
  142: 
  143: def test_infer_dtype_from_scalar_errors():
  144:     msg = "invalid ndarray passed to infer_dtype_from_scalar"
  145: 
  146:     with pytest.raises(ValueError, match=msg):
  147:         infer_dtype_from_scalar(np.array([1]))
  148: 
  149: 
  150: @pytest.mark.parametrize(
  151:     "value, expected",
  152:     [
  153:         ("foo", np.object_),
  154:         (b"foo", np.object_),
  155:         (1, np.int64),
  156:         (1.5, np.float64),
  157:         (np.datetime64("2016-01-01"), np.dtype("M8[s]")),
  158:         (Timestamp("20160101"), np.dtype("M8[s]")),
  159:         (Timestamp("20160101", tz="UTC"), "datetime64[s, UTC]"),
  160:     ],
  161: )
  162: def test_infer_dtype_from_scalar(value, expected, using_infer_string):
  163:     dtype, _ = infer_dtype_from_scalar(value)
  164:     if using_infer_string and value == "foo":
  165:         expected = "string"
  166:     assert is_dtype_equal(dtype, expected)
  167: 
  168:     with pytest.raises(TypeError, match="must be list-like"):
  169:         infer_dtype_from_array(value)
  170: 
  171: 
  172: @pytest.mark.parametrize(
  173:     "arr, expected",
  174:     [
  175:         ([1], np.dtype(int)),
  176:         (np.array([1], dtype=np.int64), np.int64),
  177:         ([np.nan, 1, ""], np.object_),
  178:         (np.array([[1.0, 2.0]]), np.float64),
  179:         (Categorical(list("aabc")), "category"),
  180:         (Categorical([1, 2, 3]), "category"),
  181:         (date_range("20160101", periods=3), np.dtype("=M8[ns]")),
  182:         (
  183:             date_range("20160101", periods=3, tz="US/Eastern"),
  184:             "datetime64[ns, US/Eastern]",
  185:         ),
  186:         (Series([1.0, 2, 3]), np.float64),
  187:         (Series(list("abc")), np.object_),
  188:         (
  189:             Series(date_range("20160101", periods=3, tz="US/Eastern")),
  190:             "datetime64[ns, US/Eastern]",
  191:         ),
  192:     ],
  193: )
  194: def test_infer_dtype_from_array(arr, expected, using_infer_string):
  195:     dtype, _ = infer_dtype_from_array(arr)
  196:     if (
  197:         using_infer_string
  198:         and isinstance(arr, Series)
  199:         and arr.tolist() == ["a", "b", "c"]
  200:     ):
  201:         expected = "string"
  202:     assert is_dtype_equal(dtype, expected)
  203: 
  204: 
  205: @pytest.mark.parametrize("cls", [np.datetime64, np.timedelta64])
  206: def test_infer_dtype_from_scalar_zerodim_datetimelike(cls):
  207:     # ndarray.item() can incorrectly return int instead of td64/dt64
  208:     val = cls(1234, "ns")
  209:     arr = np.array(val)
  210: 
  211:     dtype, res = infer_dtype_from_scalar(arr)
  212:     assert dtype.type is cls
  213:     assert isinstance(res, cls)
  214: 
  215:     dtype, res = infer_dtype_from(arr)
  216:     assert dtype.type is cls
