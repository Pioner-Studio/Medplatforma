    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs import lib
    5: 
    6: from pandas import (
    7:     NA,
    8:     DataFrame,
    9:     Series,
   10:     _testing as tm,
   11:     option_context,
   12: )
   13: 
   14: 
   15: @pytest.mark.filterwarnings("ignore:Falling back")
   16: def test_string_array(nullable_string_dtype, any_string_method):
   17:     method_name, args, kwargs = any_string_method
   18: 
   19:     data = ["a", "bb", np.nan, "ccc"]
   20:     a = Series(data, dtype=object)
   21:     b = Series(data, dtype=nullable_string_dtype)
   22: 
   23:     if method_name == "decode":
   24:         with pytest.raises(TypeError, match="a bytes-like object is required"):
   25:             getattr(b.str, method_name)(*args, **kwargs)
   26:         return
   27: 
   28:     expected = getattr(a.str, method_name)(*args, **kwargs)
   29:     result = getattr(b.str, method_name)(*args, **kwargs)
   30: 
   31:     if isinstance(expected, Series):
   32:         if expected.dtype == "object" and lib.is_string_array(
   33:             expected.dropna().values,
   34:         ):
   35:             assert result.dtype == nullable_string_dtype
   36:             result = result.astype(object)
   37: 
   38:         elif expected.dtype == "object" and lib.is_bool_array(
   39:             expected.values, skipna=True
   40:         ):
   41:             assert result.dtype == "boolean"
   42:             result = result.astype(object)
   43: 
   44:         elif expected.dtype == "bool":
   45:             assert result.dtype == "boolean"
   46:             result = result.astype("bool")
   47: 
   48:         elif expected.dtype == "float" and expected.isna().any():
   49:             assert result.dtype == "Int64"
   50:             result = result.astype("float")
   51: 
   52:         if expected.dtype == object:
   53:             # GH#18463
   54:             expected[expected.isna()] = NA
   55: 
   56:     elif isinstance(expected, DataFrame):
   57:         columns = expected.select_dtypes(include="object").columns
   58:         assert all(result[columns].dtypes == nullable_string_dtype)
   59:         result[columns] = result[columns].astype(object)
   60:         with option_context("future.no_silent_downcasting", True):
   61:             expected[columns] = expected[columns].fillna(NA)  # GH#18463
   62: 
   63:     tm.assert_equal(result, expected)
   64: 
   65: 
   66: @pytest.mark.parametrize(
   67:     "method,expected",
   68:     [
   69:         ("count", [2, None]),
   70:         ("find", [0, None]),
   71:         ("index", [0, None]),
   72:         ("rindex", [2, None]),
   73:     ],
   74: )
   75: def test_string_array_numeric_integer_array(nullable_string_dtype, method, expected):
   76:     s = Series(["aba", None], dtype=nullable_string_dtype)
   77:     result = getattr(s.str, method)("a")
   78:     expected = Series(expected, dtype="Int64")
   79:     tm.assert_series_equal(result, expected)
   80: 
   81: 
   82: @pytest.mark.parametrize(
   83:     "method,expected",
   84:     [
   85:         ("isdigit", [False, None, True]),
   86:         ("isalpha", [True, None, False]),
   87:         ("isalnum", [True, None, True]),
   88:         ("isnumeric", [False, None, True]),
   89:     ],
   90: )
   91: def test_string_array_boolean_array(nullable_string_dtype, method, expected):
   92:     s = Series(["a", None, "1"], dtype=nullable_string_dtype)
   93:     result = getattr(s.str, method)()
   94:     expected = Series(expected, dtype="boolean")
   95:     tm.assert_series_equal(result, expected)
   96: 
   97: 
   98: def test_string_array_extract(nullable_string_dtype):
   99:     # https://github.com/pandas-dev/pandas/issues/30969
  100:     # Only expand=False & multiple groups was failing
  101: 
  102:     a = Series(["a1", "b2", "cc"], dtype=nullable_string_dtype)
  103:     b = Series(["a1", "b2", "cc"], dtype="object")
  104:     pat = r"(\w)(\d)"
  105: 
  106:     result = a.str.extract(pat, expand=False)
  107:     expected = b.str.extract(pat, expand=False)
  108:     expected = expected.fillna(NA)  # GH#18463
  109:     assert all(result.dtypes == nullable_string_dtype)
  110: 
  111:     result = result.astype(object)
  112:     tm.assert_equal(result, expected)
