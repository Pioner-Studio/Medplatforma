    1: import pytest
    2: 
    3: from pandas import Series
    4: from pandas.core.strings.accessor import StringMethods
    5: 
    6: _any_string_method = [
    7:     ("cat", (), {"sep": ","}),
    8:     ("cat", (Series(list("zyx")),), {"sep": ",", "join": "left"}),
    9:     ("center", (10,), {}),
   10:     ("contains", ("a",), {}),
   11:     ("count", ("a",), {}),
   12:     ("decode", ("UTF-8",), {}),
   13:     ("encode", ("UTF-8",), {}),
   14:     ("endswith", ("a",), {}),
   15:     ("endswith", ((),), {}),
   16:     ("endswith", (("a",),), {}),
   17:     ("endswith", (("a", "b"),), {}),
   18:     ("endswith", (("a", "MISSING"),), {}),
   19:     ("endswith", ("a",), {"na": True}),
   20:     ("endswith", ("a",), {"na": False}),
   21:     ("extract", ("([a-z]*)",), {"expand": False}),
   22:     ("extract", ("([a-z]*)",), {"expand": True}),
   23:     ("extractall", ("([a-z]*)",), {}),
   24:     ("find", ("a",), {}),
   25:     ("findall", ("a",), {}),
   26:     ("get", (0,), {}),
   27:     # because "index" (and "rindex") fail intentionally
   28:     # if the string is not found, search only for empty string
   29:     ("index", ("",), {}),
   30:     ("join", (",",), {}),
   31:     ("ljust", (10,), {}),
   32:     ("match", ("a",), {}),
   33:     ("fullmatch", ("a",), {}),
   34:     ("normalize", ("NFC",), {}),
   35:     ("pad", (10,), {}),
   36:     ("partition", (" ",), {"expand": False}),
   37:     ("partition", (" ",), {"expand": True}),
   38:     ("repeat", (3,), {}),
   39:     ("replace", ("a", "z"), {}),
   40:     ("rfind", ("a",), {}),
   41:     ("rindex", ("",), {}),
   42:     ("rjust", (10,), {}),
   43:     ("rpartition", (" ",), {"expand": False}),
   44:     ("rpartition", (" ",), {"expand": True}),
   45:     ("slice", (0, 1), {}),
   46:     ("slice_replace", (0, 1, "z"), {}),
   47:     ("split", (" ",), {"expand": False}),
   48:     ("split", (" ",), {"expand": True}),
   49:     ("startswith", ("a",), {}),
   50:     ("startswith", (("a",),), {}),
   51:     ("startswith", (("a", "b"),), {}),
   52:     ("startswith", (("a", "MISSING"),), {}),
   53:     ("startswith", ((),), {}),
   54:     ("startswith", ("a",), {"na": True}),
   55:     ("startswith", ("a",), {"na": False}),
   56:     ("removeprefix", ("a",), {}),
   57:     ("removesuffix", ("a",), {}),
   58:     # translating unicode points of "a" to "d"
   59:     ("translate", ({97: 100},), {}),
   60:     ("wrap", (2,), {}),
   61:     ("zfill", (10,), {}),
   62: ] + list(
   63:     zip(
   64:         [
   65:             # methods without positional arguments: zip with empty tuple and empty dict
   66:             "capitalize",
   67:             "cat",
   68:             "get_dummies",
   69:             "isalnum",
   70:             "isalpha",
   71:             "isdecimal",
   72:             "isdigit",
   73:             "islower",
   74:             "isnumeric",
   75:             "isspace",
   76:             "istitle",
   77:             "isupper",
   78:             "len",
   79:             "lower",
   80:             "lstrip",
   81:             "partition",
   82:             "rpartition",
   83:             "rsplit",
   84:             "rstrip",
   85:             "slice",
   86:             "slice_replace",
   87:             "split",
   88:             "strip",
   89:             "swapcase",
   90:             "title",
   91:             "upper",
   92:             "casefold",
   93:         ],
   94:         [()] * 100,
   95:         [{}] * 100,
   96:     )
   97: )
   98: ids, _, _ = zip(*_any_string_method)  # use method name as fixture-id
   99: missing_methods = {f for f in dir(StringMethods) if not f.startswith("_")} - set(ids)
  100: 
  101: # test that the above list captures all methods of StringMethods
  102: assert not missing_methods
  103: 
  104: 
  105: @pytest.fixture(params=_any_string_method, ids=ids)
  106: def any_string_method(request):
  107:     """
  108:     Fixture for all public methods of `StringMethods`
  109: 
  110:     This fixture returns a tuple of the method name and sample arguments
  111:     necessary to call the method.
  112: 
  113:     Returns
  114:     -------
  115:     method_name : str
  116:         The name of the method in `StringMethods`
  117:     args : tuple
  118:         Sample values for the positional arguments
  119:     kwargs : dict
  120:         Sample values for the keyword arguments
  121: 
  122:     Examples
  123:     --------
  124:     >>> def test_something(any_string_method):
  125:     ...     s = Series(['a', 'b', np.nan, 'd'])
  126:     ...
  127:     ...     method_name, args, kwargs = any_string_method
  128:     ...     method = getattr(s.str, method_name)
  129:     ...     # will not raise
  130:     ...     method(*args, **kwargs)
  131:     """
  132:     return request.param
