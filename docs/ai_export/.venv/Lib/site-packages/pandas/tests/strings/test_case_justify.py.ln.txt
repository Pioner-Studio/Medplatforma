    1: from datetime import datetime
    2: import operator
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     Series,
    9:     _testing as tm,
   10: )
   11: 
   12: 
   13: def test_title(any_string_dtype):
   14:     s = Series(["FOO", "BAR", np.nan, "Blah", "blurg"], dtype=any_string_dtype)
   15:     result = s.str.title()
   16:     expected = Series(["Foo", "Bar", np.nan, "Blah", "Blurg"], dtype=any_string_dtype)
   17:     tm.assert_series_equal(result, expected)
   18: 
   19: 
   20: def test_title_mixed_object():
   21:     s = Series(["FOO", np.nan, "bar", True, datetime.today(), "blah", None, 1, 2.0])
   22:     result = s.str.title()
   23:     expected = Series(
   24:         ["Foo", np.nan, "Bar", np.nan, np.nan, "Blah", None, np.nan, np.nan],
   25:         dtype=object,
   26:     )
   27:     tm.assert_almost_equal(result, expected)
   28: 
   29: 
   30: def test_lower_upper(any_string_dtype):
   31:     s = Series(["om", np.nan, "nom", "nom"], dtype=any_string_dtype)
   32: 
   33:     result = s.str.upper()
   34:     expected = Series(["OM", np.nan, "NOM", "NOM"], dtype=any_string_dtype)
   35:     tm.assert_series_equal(result, expected)
   36: 
   37:     result = result.str.lower()
   38:     tm.assert_series_equal(result, s)
   39: 
   40: 
   41: def test_lower_upper_mixed_object():
   42:     s = Series(["a", np.nan, "b", True, datetime.today(), "foo", None, 1, 2.0])
   43: 
   44:     result = s.str.upper()
   45:     expected = Series(
   46:         ["A", np.nan, "B", np.nan, np.nan, "FOO", None, np.nan, np.nan], dtype=object
   47:     )
   48:     tm.assert_series_equal(result, expected)
   49: 
   50:     result = s.str.lower()
   51:     expected = Series(
   52:         ["a", np.nan, "b", np.nan, np.nan, "foo", None, np.nan, np.nan], dtype=object
   53:     )
   54:     tm.assert_series_equal(result, expected)
   55: 
   56: 
   57: @pytest.mark.parametrize(
   58:     "data, expected",
   59:     [
   60:         (
   61:             ["FOO", "BAR", np.nan, "Blah", "blurg"],
   62:             ["Foo", "Bar", np.nan, "Blah", "Blurg"],
   63:         ),
   64:         (["a", "b", "c"], ["A", "B", "C"]),
   65:         (["a b", "a bc. de"], ["A b", "A bc. de"]),
   66:     ],
   67: )
   68: def test_capitalize(data, expected, any_string_dtype):
   69:     s = Series(data, dtype=any_string_dtype)
   70:     result = s.str.capitalize()
   71:     expected = Series(expected, dtype=any_string_dtype)
   72:     tm.assert_series_equal(result, expected)
   73: 
   74: 
   75: def test_capitalize_mixed_object():
   76:     s = Series(["FOO", np.nan, "bar", True, datetime.today(), "blah", None, 1, 2.0])
   77:     result = s.str.capitalize()
   78:     expected = Series(
   79:         ["Foo", np.nan, "Bar", np.nan, np.nan, "Blah", None, np.nan, np.nan],
   80:         dtype=object,
   81:     )
   82:     tm.assert_series_equal(result, expected)
   83: 
   84: 
   85: def test_swapcase(any_string_dtype):
   86:     s = Series(["FOO", "BAR", np.nan, "Blah", "blurg"], dtype=any_string_dtype)
   87:     result = s.str.swapcase()
   88:     expected = Series(["foo", "bar", np.nan, "bLAH", "BLURG"], dtype=any_string_dtype)
   89:     tm.assert_series_equal(result, expected)
   90: 
   91: 
   92: def test_swapcase_mixed_object():
   93:     s = Series(["FOO", np.nan, "bar", True, datetime.today(), "Blah", None, 1, 2.0])
   94:     result = s.str.swapcase()
   95:     expected = Series(
   96:         ["foo", np.nan, "BAR", np.nan, np.nan, "bLAH", None, np.nan, np.nan],
   97:         dtype=object,
   98:     )
   99:     tm.assert_series_equal(result, expected)
  100: 
  101: 
  102: def test_casefold():
  103:     # GH25405
  104:     expected = Series(["ss", np.nan, "case", "ssd"])
  105:     s = Series(["Гџ", np.nan, "case", "Гџd"])
  106:     result = s.str.casefold()
  107: 
  108:     tm.assert_series_equal(result, expected)
  109: 
  110: 
  111: def test_casemethods(any_string_dtype):
  112:     values = ["aaa", "bbb", "CCC", "Dddd", "eEEE"]
  113:     s = Series(values, dtype=any_string_dtype)
  114:     assert s.str.lower().tolist() == [v.lower() for v in values]
  115:     assert s.str.upper().tolist() == [v.upper() for v in values]
  116:     assert s.str.title().tolist() == [v.title() for v in values]
  117:     assert s.str.capitalize().tolist() == [v.capitalize() for v in values]
  118:     assert s.str.swapcase().tolist() == [v.swapcase() for v in values]
  119: 
  120: 
  121: def test_pad(any_string_dtype):
  122:     s = Series(["a", "b", np.nan, "c", np.nan, "eeeeee"], dtype=any_string_dtype)
  123: 
  124:     result = s.str.pad(5, side="left")
  125:     expected = Series(
  126:         ["    a", "    b", np.nan, "    c", np.nan, "eeeeee"], dtype=any_string_dtype
  127:     )
  128:     tm.assert_series_equal(result, expected)
  129: 
  130:     result = s.str.pad(5, side="right")
  131:     expected = Series(
  132:         ["a    ", "b    ", np.nan, "c    ", np.nan, "eeeeee"], dtype=any_string_dtype
  133:     )
  134:     tm.assert_series_equal(result, expected)
  135: 
  136:     result = s.str.pad(5, side="both")
  137:     expected = Series(
  138:         ["  a  ", "  b  ", np.nan, "  c  ", np.nan, "eeeeee"], dtype=any_string_dtype
  139:     )
  140:     tm.assert_series_equal(result, expected)
  141: 
  142: 
  143: def test_pad_mixed_object():
  144:     s = Series(["a", np.nan, "b", True, datetime.today(), "ee", None, 1, 2.0])
  145: 
  146:     result = s.str.pad(5, side="left")
  147:     expected = Series(
  148:         ["    a", np.nan, "    b", np.nan, np.nan, "   ee", None, np.nan, np.nan],
  149:         dtype=object,
  150:     )
  151:     tm.assert_series_equal(result, expected)
  152: 
  153:     result = s.str.pad(5, side="right")
  154:     expected = Series(
  155:         ["a    ", np.nan, "b    ", np.nan, np.nan, "ee   ", None, np.nan, np.nan],
  156:         dtype=object,
  157:     )
  158:     tm.assert_series_equal(result, expected)
  159: 
  160:     result = s.str.pad(5, side="both")
  161:     expected = Series(
  162:         ["  a  ", np.nan, "  b  ", np.nan, np.nan, "  ee ", None, np.nan, np.nan],
  163:         dtype=object,
  164:     )
  165:     tm.assert_series_equal(result, expected)
  166: 
  167: 
  168: def test_pad_fillchar(any_string_dtype):
  169:     s = Series(["a", "b", np.nan, "c", np.nan, "eeeeee"], dtype=any_string_dtype)
  170: 
  171:     result = s.str.pad(5, side="left", fillchar="X")
  172:     expected = Series(
  173:         ["XXXXa", "XXXXb", np.nan, "XXXXc", np.nan, "eeeeee"], dtype=any_string_dtype
  174:     )
  175:     tm.assert_series_equal(result, expected)
  176: 
  177:     result = s.str.pad(5, side="right", fillchar="X")
  178:     expected = Series(
  179:         ["aXXXX", "bXXXX", np.nan, "cXXXX", np.nan, "eeeeee"], dtype=any_string_dtype
  180:     )
  181:     tm.assert_series_equal(result, expected)
  182: 
  183:     result = s.str.pad(5, side="both", fillchar="X")
  184:     expected = Series(
  185:         ["XXaXX", "XXbXX", np.nan, "XXcXX", np.nan, "eeeeee"], dtype=any_string_dtype
  186:     )
  187:     tm.assert_series_equal(result, expected)
  188: 
  189: 
  190: def test_pad_fillchar_bad_arg_raises(any_string_dtype):
  191:     s = Series(["a", "b", np.nan, "c", np.nan, "eeeeee"], dtype=any_string_dtype)
  192: 
  193:     msg = "fillchar must be a character, not str"
  194:     with pytest.raises(TypeError, match=msg):
  195:         s.str.pad(5, fillchar="XY")
  196: 
  197:     msg = "fillchar must be a character, not int"
  198:     with pytest.raises(TypeError, match=msg):
  199:         s.str.pad(5, fillchar=5)
  200: 
  201: 
  202: @pytest.mark.parametrize("method_name", ["center", "ljust", "rjust", "zfill", "pad"])
  203: def test_pad_width_bad_arg_raises(method_name, any_string_dtype):
  204:     # see gh-13598
  205:     s = Series(["1", "22", "a", "bb"], dtype=any_string_dtype)
  206:     op = operator.methodcaller(method_name, "f")
  207: 
  208:     msg = "width must be of integer type, not str"
  209:     with pytest.raises(TypeError, match=msg):
  210:         op(s.str)
  211: 
  212: 
  213: def test_center_ljust_rjust(any_string_dtype):
  214:     s = Series(["a", "b", np.nan, "c", np.nan, "eeeeee"], dtype=any_string_dtype)
  215: 
  216:     result = s.str.center(5)
  217:     expected = Series(
  218:         ["  a  ", "  b  ", np.nan, "  c  ", np.nan, "eeeeee"], dtype=any_string_dtype
  219:     )
  220:     tm.assert_series_equal(result, expected)
  221: 
  222:     result = s.str.ljust(5)
  223:     expected = Series(
  224:         ["a    ", "b    ", np.nan, "c    ", np.nan, "eeeeee"], dtype=any_string_dtype
  225:     )
  226:     tm.assert_series_equal(result, expected)
  227: 
  228:     result = s.str.rjust(5)
  229:     expected = Series(
  230:         ["    a", "    b", np.nan, "    c", np.nan, "eeeeee"], dtype=any_string_dtype
  231:     )
  232:     tm.assert_series_equal(result, expected)
  233: 
  234: 
  235: def test_center_ljust_rjust_mixed_object():
  236:     s = Series(["a", np.nan, "b", True, datetime.today(), "c", "eee", None, 1, 2.0])
  237: 
  238:     result = s.str.center(5)
  239:     expected = Series(
  240:         [
  241:             "  a  ",
  242:             np.nan,
  243:             "  b  ",
  244:             np.nan,
  245:             np.nan,
  246:             "  c  ",
  247:             " eee ",
  248:             None,
  249:             np.nan,
  250:             np.nan,
  251:         ],
  252:         dtype=object,
  253:     )
  254:     tm.assert_series_equal(result, expected)
  255: 
  256:     result = s.str.ljust(5)
  257:     expected = Series(
  258:         [
  259:             "a    ",
  260:             np.nan,
  261:             "b    ",
  262:             np.nan,
  263:             np.nan,
  264:             "c    ",
  265:             "eee  ",
  266:             None,
  267:             np.nan,
  268:             np.nan,
  269:         ],
  270:         dtype=object,
  271:     )
  272:     tm.assert_series_equal(result, expected)
  273: 
  274:     result = s.str.rjust(5)
  275:     expected = Series(
  276:         [
  277:             "    a",
  278:             np.nan,
  279:             "    b",
  280:             np.nan,
  281:             np.nan,
  282:             "    c",
  283:             "  eee",
  284:             None,
  285:             np.nan,
  286:             np.nan,
  287:         ],
  288:         dtype=object,
  289:     )
  290:     tm.assert_series_equal(result, expected)
  291: 
  292: 
  293: def test_center_ljust_rjust_fillchar(any_string_dtype):
  294:     if any_string_dtype == "string[pyarrow_numpy]":
  295:         pytest.skip(
  296:             "Arrow logic is different, "
  297:             "see https://github.com/pandas-dev/pandas/pull/54533/files#r1299808126",
  298:         )
  299:     s = Series(["a", "bb", "cccc", "ddddd", "eeeeee"], dtype=any_string_dtype)
  300: 
  301:     result = s.str.center(5, fillchar="X")
  302:     expected = Series(
  303:         ["XXaXX", "XXbbX", "Xcccc", "ddddd", "eeeeee"], dtype=any_string_dtype
  304:     )
  305:     tm.assert_series_equal(result, expected)
  306:     expected = np.array([v.center(5, "X") for v in np.array(s)], dtype=np.object_)
  307:     tm.assert_numpy_array_equal(np.array(result, dtype=np.object_), expected)
  308: 
  309:     result = s.str.ljust(5, fillchar="X")
  310:     expected = Series(
  311:         ["aXXXX", "bbXXX", "ccccX", "ddddd", "eeeeee"], dtype=any_string_dtype
  312:     )
  313:     tm.assert_series_equal(result, expected)
  314:     expected = np.array([v.ljust(5, "X") for v in np.array(s)], dtype=np.object_)
  315:     tm.assert_numpy_array_equal(np.array(result, dtype=np.object_), expected)
  316: 
  317:     result = s.str.rjust(5, fillchar="X")
  318:     expected = Series(
  319:         ["XXXXa", "XXXbb", "Xcccc", "ddddd", "eeeeee"], dtype=any_string_dtype
  320:     )
  321:     tm.assert_series_equal(result, expected)
  322:     expected = np.array([v.rjust(5, "X") for v in np.array(s)], dtype=np.object_)
  323:     tm.assert_numpy_array_equal(np.array(result, dtype=np.object_), expected)
  324: 
  325: 
  326: def test_center_ljust_rjust_fillchar_bad_arg_raises(any_string_dtype):
  327:     s = Series(["a", "bb", "cccc", "ddddd", "eeeeee"], dtype=any_string_dtype)
  328: 
  329:     # If fillchar is not a character, normal str raises TypeError
  330:     # 'aaa'.ljust(5, 'XY')
  331:     # TypeError: must be char, not str
  332:     template = "fillchar must be a character, not {dtype}"
  333: 
  334:     with pytest.raises(TypeError, match=template.format(dtype="str")):
  335:         s.str.center(5, fillchar="XY")
  336: 
  337:     with pytest.raises(TypeError, match=template.format(dtype="str")):
  338:         s.str.ljust(5, fillchar="XY")
  339: 
  340:     with pytest.raises(TypeError, match=template.format(dtype="str")):
  341:         s.str.rjust(5, fillchar="XY")
  342: 
  343:     with pytest.raises(TypeError, match=template.format(dtype="int")):
  344:         s.str.center(5, fillchar=1)
  345: 
  346:     with pytest.raises(TypeError, match=template.format(dtype="int")):
  347:         s.str.ljust(5, fillchar=1)
  348: 
  349:     with pytest.raises(TypeError, match=template.format(dtype="int")):
  350:         s.str.rjust(5, fillchar=1)
  351: 
  352: 
  353: def test_zfill(any_string_dtype):
  354:     s = Series(["1", "22", "aaa", "333", "45678"], dtype=any_string_dtype)
  355: 
  356:     result = s.str.zfill(5)
  357:     expected = Series(
  358:         ["00001", "00022", "00aaa", "00333", "45678"], dtype=any_string_dtype
  359:     )
  360:     tm.assert_series_equal(result, expected)
  361:     expected = np.array([v.zfill(5) for v in np.array(s)], dtype=np.object_)
  362:     tm.assert_numpy_array_equal(np.array(result, dtype=np.object_), expected)
  363: 
  364:     result = s.str.zfill(3)
  365:     expected = Series(["001", "022", "aaa", "333", "45678"], dtype=any_string_dtype)
  366:     tm.assert_series_equal(result, expected)
  367:     expected = np.array([v.zfill(3) for v in np.array(s)], dtype=np.object_)
  368:     tm.assert_numpy_array_equal(np.array(result, dtype=np.object_), expected)
  369: 
  370:     s = Series(["1", np.nan, "aaa", np.nan, "45678"], dtype=any_string_dtype)
  371:     result = s.str.zfill(5)
  372:     expected = Series(
  373:         ["00001", np.nan, "00aaa", np.nan, "45678"], dtype=any_string_dtype
  374:     )
  375:     tm.assert_series_equal(result, expected)
  376: 
  377: 
  378: def test_wrap(any_string_dtype):
  379:     # test values are: two words less than width, two words equal to width,
  380:     # two words greater than width, one word less than width, one word
  381:     # equal to width, one word greater than width, multiple tokens with
  382:     # trailing whitespace equal to width
  383:     s = Series(
  384:         [
  385:             "hello world",
  386:             "hello world!",
  387:             "hello world!!",
  388:             "abcdefabcde",
  389:             "abcdefabcdef",
  390:             "abcdefabcdefa",
  391:             "ab ab ab ab ",
  392:             "ab ab ab ab a",
  393:             "\t",
  394:         ],
  395:         dtype=any_string_dtype,
  396:     )
  397: 
  398:     # expected values
  399:     expected = Series(
  400:         [
  401:             "hello world",
  402:             "hello world!",
  403:             "hello\nworld!!",
  404:             "abcdefabcde",
  405:             "abcdefabcdef",
  406:             "abcdefabcdef\na",
  407:             "ab ab ab ab",
  408:             "ab ab ab ab\na",
  409:             "",
  410:         ],
  411:         dtype=any_string_dtype,
  412:     )
  413: 
  414:     result = s.str.wrap(12, break_long_words=True)
  415:     tm.assert_series_equal(result, expected)
  416: 
  417: 
  418: def test_wrap_unicode(any_string_dtype):
  419:     # test with pre and post whitespace (non-unicode), NaN, and non-ascii Unicode
  420:     s = Series(
  421:         ["  pre  ", np.nan, "\xac\u20ac\U00008000 abadcafe"], dtype=any_string_dtype
  422:     )
  423:     expected = Series(
  424:         ["  pre", np.nan, "\xac\u20ac\U00008000 ab\nadcafe"], dtype=any_string_dtype
  425:     )
  426:     result = s.str.wrap(6)
  427:     tm.assert_series_equal(result, expected)
