    1: from collections.abc import Generator
    2: import contextlib
    3: 
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core import accessor
    9: 
   10: 
   11: def test_dirname_mixin() -> None:
   12:     # GH37173
   13: 
   14:     class X(accessor.DirNamesMixin):
   15:         x = 1
   16:         y: int
   17: 
   18:         def __init__(self) -> None:
   19:             self.z = 3
   20: 
   21:     result = [attr_name for attr_name in dir(X()) if not attr_name.startswith("_")]
   22: 
   23:     assert result == ["x", "z"]
   24: 
   25: 
   26: @contextlib.contextmanager
   27: def ensure_removed(obj, attr) -> Generator[None, None, None]:
   28:     """Ensure that an attribute added to 'obj' during the test is
   29:     removed when we're done
   30:     """
   31:     try:
   32:         yield
   33:     finally:
   34:         try:
   35:             delattr(obj, attr)
   36:         except AttributeError:
   37:             pass
   38:         obj._accessors.discard(attr)
   39: 
   40: 
   41: class MyAccessor:
   42:     def __init__(self, obj) -> None:
   43:         self.obj = obj
   44:         self.item = "item"
   45: 
   46:     @property
   47:     def prop(self):
   48:         return self.item
   49: 
   50:     def method(self):
   51:         return self.item
   52: 
   53: 
   54: @pytest.mark.parametrize(
   55:     "obj, registrar",
   56:     [
   57:         (pd.Series, pd.api.extensions.register_series_accessor),
   58:         (pd.DataFrame, pd.api.extensions.register_dataframe_accessor),
   59:         (pd.Index, pd.api.extensions.register_index_accessor),
   60:     ],
   61: )
   62: def test_register(obj, registrar):
   63:     with ensure_removed(obj, "mine"):
   64:         before = set(dir(obj))
   65:         registrar("mine")(MyAccessor)
   66:         o = obj([]) if obj is not pd.Series else obj([], dtype=object)
   67:         assert o.mine.prop == "item"
   68:         after = set(dir(obj))
   69:         assert (before ^ after) == {"mine"}
   70:         assert "mine" in obj._accessors
   71: 
   72: 
   73: def test_accessor_works():
   74:     with ensure_removed(pd.Series, "mine"):
   75:         pd.api.extensions.register_series_accessor("mine")(MyAccessor)
   76: 
   77:         s = pd.Series([1, 2])
   78:         assert s.mine.obj is s
   79: 
   80:         assert s.mine.prop == "item"
   81:         assert s.mine.method() == "item"
   82: 
   83: 
   84: def test_overwrite_warns():
   85:     match = r".*MyAccessor.*fake.*Series.*"
   86:     with tm.assert_produces_warning(UserWarning, match=match):
   87:         with ensure_removed(pd.Series, "fake"):
   88:             setattr(pd.Series, "fake", 123)
   89:             pd.api.extensions.register_series_accessor("fake")(MyAccessor)
   90:             s = pd.Series([1, 2])
   91:             assert s.fake.prop == "item"
   92: 
   93: 
   94: def test_raises_attribute_error():
   95:     with ensure_removed(pd.Series, "bad"):
   96: 
   97:         @pd.api.extensions.register_series_accessor("bad")
   98:         class Bad:
   99:             def __init__(self, data) -> None:
  100:                 raise AttributeError("whoops")
  101: 
  102:         with pytest.raises(AttributeError, match="whoops"):
  103:             pd.Series([], dtype=object).bad
