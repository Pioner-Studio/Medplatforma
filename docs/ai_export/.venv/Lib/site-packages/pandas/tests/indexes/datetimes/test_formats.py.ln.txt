    1: from datetime import datetime
    2: 
    3: import dateutil.tz
    4: import numpy as np
    5: import pytest
    6: import pytz
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DatetimeIndex,
   11:     NaT,
   12:     Series,
   13: )
   14: import pandas._testing as tm
   15: 
   16: 
   17: @pytest.fixture(params=["s", "ms", "us", "ns"])
   18: def unit(request):
   19:     return request.param
   20: 
   21: 
   22: def test_get_values_for_csv():
   23:     index = pd.date_range(freq="1D", periods=3, start="2017-01-01")
   24: 
   25:     # First, with no arguments.
   26:     expected = np.array(["2017-01-01", "2017-01-02", "2017-01-03"], dtype=object)
   27: 
   28:     result = index._get_values_for_csv()
   29:     tm.assert_numpy_array_equal(result, expected)
   30: 
   31:     # No NaN values, so na_rep has no effect
   32:     result = index._get_values_for_csv(na_rep="pandas")
   33:     tm.assert_numpy_array_equal(result, expected)
   34: 
   35:     # Make sure date formatting works
   36:     expected = np.array(["01-2017-01", "01-2017-02", "01-2017-03"], dtype=object)
   37: 
   38:     result = index._get_values_for_csv(date_format="%m-%Y-%d")
   39:     tm.assert_numpy_array_equal(result, expected)
   40: 
   41:     # NULL object handling should work
   42:     index = DatetimeIndex(["2017-01-01", NaT, "2017-01-03"])
   43:     expected = np.array(["2017-01-01", "NaT", "2017-01-03"], dtype=object)
   44: 
   45:     result = index._get_values_for_csv(na_rep="NaT")
   46:     tm.assert_numpy_array_equal(result, expected)
   47: 
   48:     expected = np.array(["2017-01-01", "pandas", "2017-01-03"], dtype=object)
   49: 
   50:     result = index._get_values_for_csv(na_rep="pandas")
   51:     tm.assert_numpy_array_equal(result, expected)
   52: 
   53:     result = index._get_values_for_csv(na_rep="NaT", date_format="%Y-%m-%d %H:%M:%S.%f")
   54:     expected = np.array(
   55:         ["2017-01-01 00:00:00.000000", "NaT", "2017-01-03 00:00:00.000000"],
   56:         dtype=object,
   57:     )
   58:     tm.assert_numpy_array_equal(result, expected)
   59: 
   60:     # invalid format
   61:     result = index._get_values_for_csv(na_rep="NaT", date_format="foo")
   62:     expected = np.array(["foo", "NaT", "foo"], dtype=object)
   63:     tm.assert_numpy_array_equal(result, expected)
   64: 
   65: 
   66: class TestDatetimeIndexRendering:
   67:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
   68:     def test_dti_with_timezone_repr(self, tzstr):
   69:         rng = pd.date_range("4/13/2010", "5/6/2010")
   70: 
   71:         rng_eastern = rng.tz_localize(tzstr)
   72: 
   73:         rng_repr = repr(rng_eastern)
   74:         assert "2010-04-13 00:00:00" in rng_repr
   75: 
   76:     def test_dti_repr_dates(self):
   77:         text = str(pd.to_datetime([datetime(2013, 1, 1), datetime(2014, 1, 1)]))
   78:         assert "['2013-01-01'," in text
   79:         assert ", '2014-01-01']" in text
   80: 
   81:     def test_dti_repr_mixed(self):
   82:         text = str(
   83:             pd.to_datetime(
   84:                 [datetime(2013, 1, 1), datetime(2014, 1, 1, 12), datetime(2014, 1, 1)]
   85:             )
   86:         )
   87:         assert "'2013-01-01 00:00:00'," in text
   88:         assert "'2014-01-01 00:00:00']" in text
   89: 
   90:     def test_dti_repr_short(self):
   91:         dr = pd.date_range(start="1/1/2012", periods=1)
   92:         repr(dr)
   93: 
   94:         dr = pd.date_range(start="1/1/2012", periods=2)
   95:         repr(dr)
   96: 
   97:         dr = pd.date_range(start="1/1/2012", periods=3)
   98:         repr(dr)
   99: 
  100:     @pytest.mark.parametrize(
  101:         "dates, freq, expected_repr",
  102:         [
  103:             (
  104:                 ["2012-01-01 00:00:00"],
  105:                 "60min",
  106:                 (
  107:                     "DatetimeIndex(['2012-01-01 00:00:00'], "
  108:                     "dtype='datetime64[ns]', freq='60min')"
  109:                 ),
  110:             ),
  111:             (
  112:                 ["2012-01-01 00:00:00", "2012-01-01 01:00:00"],
  113:                 "60min",
  114:                 "DatetimeIndex(['2012-01-01 00:00:00', '2012-01-01 01:00:00'], "
  115:                 "dtype='datetime64[ns]', freq='60min')",
  116:             ),
  117:             (
  118:                 ["2012-01-01"],
  119:                 "24h",
  120:                 "DatetimeIndex(['2012-01-01'], dtype='datetime64[ns]', freq='24h')",
  121:             ),
  122:         ],
  123:     )
  124:     def test_dti_repr_time_midnight(self, dates, freq, expected_repr, unit):
  125:         # GH53634
  126:         dti = DatetimeIndex(dates, freq).as_unit(unit)
  127:         actual_repr = repr(dti)
  128:         assert actual_repr == expected_repr.replace("[ns]", f"[{unit}]")
  129: 
  130:     def test_dti_representation(self, unit):
  131:         idxs = []
  132:         idxs.append(DatetimeIndex([], freq="D"))
  133:         idxs.append(DatetimeIndex(["2011-01-01"], freq="D"))
  134:         idxs.append(DatetimeIndex(["2011-01-01", "2011-01-02"], freq="D"))
  135:         idxs.append(DatetimeIndex(["2011-01-01", "2011-01-02", "2011-01-03"], freq="D"))
  136:         idxs.append(
  137:             DatetimeIndex(
  138:                 ["2011-01-01 09:00", "2011-01-01 10:00", "2011-01-01 11:00"],
  139:                 freq="h",
  140:                 tz="Asia/Tokyo",
  141:             )
  142:         )
  143:         idxs.append(
  144:             DatetimeIndex(
  145:                 ["2011-01-01 09:00", "2011-01-01 10:00", NaT], tz="US/Eastern"
  146:             )
  147:         )
  148:         idxs.append(
  149:             DatetimeIndex(["2011-01-01 09:00", "2011-01-01 10:00", NaT], tz="UTC")
  150:         )
  151: 
  152:         exp = []
  153:         exp.append("DatetimeIndex([], dtype='datetime64[ns]', freq='D')")
  154:         exp.append("DatetimeIndex(['2011-01-01'], dtype='datetime64[ns]', freq='D')")
  155:         exp.append(
  156:             "DatetimeIndex(['2011-01-01', '2011-01-02'], "
  157:             "dtype='datetime64[ns]', freq='D')"
  158:         )
  159:         exp.append(
  160:             "DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], "
  161:             "dtype='datetime64[ns]', freq='D')"
  162:         )
  163:         exp.append(
  164:             "DatetimeIndex(['2011-01-01 09:00:00+09:00', "
  165:             "'2011-01-01 10:00:00+09:00', '2011-01-01 11:00:00+09:00']"
  166:             ", dtype='datetime64[ns, Asia/Tokyo]', freq='h')"
  167:         )
  168:         exp.append(
  169:             "DatetimeIndex(['2011-01-01 09:00:00-05:00', "
  170:             "'2011-01-01 10:00:00-05:00', 'NaT'], "
  171:             "dtype='datetime64[ns, US/Eastern]', freq=None)"
  172:         )
  173:         exp.append(
  174:             "DatetimeIndex(['2011-01-01 09:00:00+00:00', "
  175:             "'2011-01-01 10:00:00+00:00', 'NaT'], "
  176:             "dtype='datetime64[ns, UTC]', freq=None)"
  177:             ""
  178:         )
  179: 
  180:         with pd.option_context("display.width", 300):
  181:             for index, expected in zip(idxs, exp):
  182:                 index = index.as_unit(unit)
  183:                 expected = expected.replace("[ns", f"[{unit}")
  184:                 result = repr(index)
  185:                 assert result == expected
  186:                 result = str(index)
  187:                 assert result == expected
  188: 
  189:     # TODO: this is a Series.__repr__ test
  190:     def test_dti_representation_to_series(self, unit):
  191:         idx1 = DatetimeIndex([], freq="D")
  192:         idx2 = DatetimeIndex(["2011-01-01"], freq="D")
  193:         idx3 = DatetimeIndex(["2011-01-01", "2011-01-02"], freq="D")
  194:         idx4 = DatetimeIndex(["2011-01-01", "2011-01-02", "2011-01-03"], freq="D")
  195:         idx5 = DatetimeIndex(
  196:             ["2011-01-01 09:00", "2011-01-01 10:00", "2011-01-01 11:00"],
  197:             freq="h",
  198:             tz="Asia/Tokyo",
  199:         )
  200:         idx6 = DatetimeIndex(
  201:             ["2011-01-01 09:00", "2011-01-01 10:00", NaT], tz="US/Eastern"
  202:         )
  203:         idx7 = DatetimeIndex(["2011-01-01 09:00", "2011-01-02 10:15"])
  204: 
  205:         exp1 = """Series([], dtype: datetime64[ns])"""
  206: 
  207:         exp2 = "0   2011-01-01\ndtype: datetime64[ns]"
  208: 
  209:         exp3 = "0   2011-01-01\n1   2011-01-02\ndtype: datetime64[ns]"
  210: 
  211:         exp4 = (
  212:             "0   2011-01-01\n"
  213:             "1   2011-01-02\n"
  214:             "2   2011-01-03\n"
  215:             "dtype: datetime64[ns]"
  216:         )
  217: 
  218:         exp5 = (
  219:             "0   2011-01-01 09:00:00+09:00\n"
  220:             "1   2011-01-01 10:00:00+09:00\n"
  221:             "2   2011-01-01 11:00:00+09:00\n"
  222:             "dtype: datetime64[ns, Asia/Tokyo]"
  223:         )
  224: 
  225:         exp6 = (
  226:             "0   2011-01-01 09:00:00-05:00\n"
  227:             "1   2011-01-01 10:00:00-05:00\n"
  228:             "2                         NaT\n"
  229:             "dtype: datetime64[ns, US/Eastern]"
  230:         )
  231: 
  232:         exp7 = (
  233:             "0   2011-01-01 09:00:00\n"
  234:             "1   2011-01-02 10:15:00\n"
  235:             "dtype: datetime64[ns]"
  236:         )
  237: 
  238:         with pd.option_context("display.width", 300):
  239:             for idx, expected in zip(
  240:                 [idx1, idx2, idx3, idx4, idx5, idx6, idx7],
  241:                 [exp1, exp2, exp3, exp4, exp5, exp6, exp7],
  242:             ):
  243:                 ser = Series(idx.as_unit(unit))
  244:                 result = repr(ser)
  245:                 assert result == expected.replace("[ns", f"[{unit}")
  246: 
  247:     def test_dti_summary(self):
  248:         # GH#9116
  249:         idx1 = DatetimeIndex([], freq="D")
  250:         idx2 = DatetimeIndex(["2011-01-01"], freq="D")
  251:         idx3 = DatetimeIndex(["2011-01-01", "2011-01-02"], freq="D")
  252:         idx4 = DatetimeIndex(["2011-01-01", "2011-01-02", "2011-01-03"], freq="D")
  253:         idx5 = DatetimeIndex(
  254:             ["2011-01-01 09:00", "2011-01-01 10:00", "2011-01-01 11:00"],
  255:             freq="h",
  256:             tz="Asia/Tokyo",
  257:         )
  258:         idx6 = DatetimeIndex(
  259:             ["2011-01-01 09:00", "2011-01-01 10:00", NaT], tz="US/Eastern"
  260:         )
  261: 
  262:         exp1 = "DatetimeIndex: 0 entries\nFreq: D"
  263: 
  264:         exp2 = "DatetimeIndex: 1 entries, 2011-01-01 to 2011-01-01\nFreq: D"
  265: 
  266:         exp3 = "DatetimeIndex: 2 entries, 2011-01-01 to 2011-01-02\nFreq: D"
  267: 
  268:         exp4 = "DatetimeIndex: 3 entries, 2011-01-01 to 2011-01-03\nFreq: D"
  269: 
  270:         exp5 = (
  271:             "DatetimeIndex: 3 entries, 2011-01-01 09:00:00+09:00 "
  272:             "to 2011-01-01 11:00:00+09:00\n"
  273:             "Freq: h"
  274:         )
  275: 
  276:         exp6 = """DatetimeIndex: 3 entries, 2011-01-01 09:00:00-05:00 to NaT"""
  277: 
  278:         for idx, expected in zip(
  279:             [idx1, idx2, idx3, idx4, idx5, idx6], [exp1, exp2, exp3, exp4, exp5, exp6]
  280:         ):
  281:             result = idx._summary()
  282:             assert result == expected
  283: 
  284:     @pytest.mark.parametrize("tz", [None, pytz.utc, dateutil.tz.tzutc()])
  285:     @pytest.mark.parametrize("freq", ["B", "C"])
  286:     def test_dti_business_repr_etc_smoke(self, tz, freq):
  287:         # only really care that it works
  288:         dti = pd.bdate_range(
  289:             datetime(2009, 1, 1), datetime(2010, 1, 1), tz=tz, freq=freq
  290:         )
  291:         repr(dti)
  292:         dti._summary()
  293:         dti[2:2]._summary()
  294: 
  295: 
  296: class TestFormat:
  297:     def test_format(self):
  298:         # GH#35439
  299:         idx = pd.date_range("20130101", periods=5)
  300:         expected = [f"{x:%Y-%m-%d}" for x in idx]
  301:         msg = r"DatetimeIndex\.format is deprecated"
  302:         with tm.assert_produces_warning(FutureWarning, match=msg):
  303:             assert idx.format() == expected
  304: 
  305:     def test_format_with_name_time_info(self):
  306:         # bug I fixed 12/20/2011
  307:         dates = pd.date_range("2011-01-01 04:00:00", periods=10, name="something")
  308: 
  309:         msg = "DatetimeIndex.format is deprecated"
  310:         with tm.assert_produces_warning(FutureWarning, match=msg):
  311:             formatted = dates.format(name=True)
  312:         assert formatted[0] == "something"
  313: 
  314:     def test_format_datetime_with_time(self):
  315:         dti = DatetimeIndex([datetime(2012, 2, 7), datetime(2012, 2, 7, 23)])
  316: 
  317:         msg = "DatetimeIndex.format is deprecated"
  318:         with tm.assert_produces_warning(FutureWarning, match=msg):
  319:             result = dti.format()
  320:         expected = ["2012-02-07 00:00:00", "2012-02-07 23:00:00"]
  321:         assert len(result) == 2
  322:         assert result == expected
  323: 
  324:     def test_format_datetime(self):
  325:         msg = "DatetimeIndex.format is deprecated"
  326:         with tm.assert_produces_warning(FutureWarning, match=msg):
  327:             formatted = pd.to_datetime([datetime(2003, 1, 1, 12), NaT]).format()
  328:         assert formatted[0] == "2003-01-01 12:00:00"
  329:         assert formatted[1] == "NaT"
  330: 
  331:     def test_format_date(self):
  332:         msg = "DatetimeIndex.format is deprecated"
  333:         with tm.assert_produces_warning(FutureWarning, match=msg):
  334:             formatted = pd.to_datetime([datetime(2003, 1, 1), NaT]).format()
  335:         assert formatted[0] == "2003-01-01"
  336:         assert formatted[1] == "NaT"
  337: 
  338:     def test_format_date_tz(self):
  339:         dti = pd.to_datetime([datetime(2013, 1, 1)], utc=True)
  340:         msg = "DatetimeIndex.format is deprecated"
  341:         with tm.assert_produces_warning(FutureWarning, match=msg):
  342:             formatted = dti.format()
  343:         assert formatted[0] == "2013-01-01 00:00:00+00:00"
  344: 
  345:         dti = pd.to_datetime([datetime(2013, 1, 1), NaT], utc=True)
  346:         with tm.assert_produces_warning(FutureWarning, match=msg):
  347:             formatted = dti.format()
  348:         assert formatted[0] == "2013-01-01 00:00:00+00:00"
  349: 
  350:     def test_format_date_explicit_date_format(self):
  351:         dti = pd.to_datetime([datetime(2003, 2, 1), NaT])
  352:         msg = "DatetimeIndex.format is deprecated"
  353:         with tm.assert_produces_warning(FutureWarning, match=msg):
  354:             formatted = dti.format(date_format="%m-%d-%Y", na_rep="UT")
  355:         assert formatted[0] == "02-01-2003"
  356:         assert formatted[1] == "UT"
