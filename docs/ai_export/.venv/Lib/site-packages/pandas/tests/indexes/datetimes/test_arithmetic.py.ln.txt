    1: # Arithmetic tests specific to DatetimeIndex are generally about `freq`
    2: #  rentention or inference.  Other arithmetic tests belong in
    3: #  tests/arithmetic/test_datetime64.py
    4: import pytest
    5: 
    6: from pandas import (
    7:     Timedelta,
    8:     TimedeltaIndex,
    9:     Timestamp,
   10:     date_range,
   11:     timedelta_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestDatetimeIndexArithmetic:
   17:     def test_add_timedelta_preserves_freq(self):
   18:         # GH#37295 should hold for any DTI with freq=None or Tick freq
   19:         tz = "Canada/Eastern"
   20:         dti = date_range(
   21:             start=Timestamp("2019-03-26 00:00:00-0400", tz=tz),
   22:             end=Timestamp("2020-10-17 00:00:00-0400", tz=tz),
   23:             freq="D",
   24:         )
   25:         result = dti + Timedelta(days=1)
   26:         assert result.freq == dti.freq
   27: 
   28:     def test_sub_datetime_preserves_freq(self, tz_naive_fixture):
   29:         # GH#48818
   30:         dti = date_range("2016-01-01", periods=12, tz=tz_naive_fixture)
   31: 
   32:         res = dti - dti[0]
   33:         expected = timedelta_range("0 Days", "11 Days")
   34:         tm.assert_index_equal(res, expected)
   35:         assert res.freq == expected.freq
   36: 
   37:     @pytest.mark.xfail(
   38:         reason="The inherited freq is incorrect bc dti.freq is incorrect "
   39:         "https://github.com/pandas-dev/pandas/pull/48818/files#r982793461"
   40:     )
   41:     def test_sub_datetime_preserves_freq_across_dst(self):
   42:         # GH#48818
   43:         ts = Timestamp("2016-03-11", tz="US/Pacific")
   44:         dti = date_range(ts, periods=4)
   45: 
   46:         res = dti - dti[0]
   47:         expected = TimedeltaIndex(
   48:             [
   49:                 Timedelta(days=0),
   50:                 Timedelta(days=1),
   51:                 Timedelta(days=2),
   52:                 Timedelta(days=2, hours=23),
   53:             ]
   54:         )
   55:         tm.assert_index_equal(res, expected)
   56:         assert res.freq == expected.freq
