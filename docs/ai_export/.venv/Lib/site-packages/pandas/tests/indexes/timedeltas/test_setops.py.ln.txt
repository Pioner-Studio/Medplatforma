    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     Index,
    7:     TimedeltaIndex,
    8:     timedelta_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: from pandas.tseries.offsets import Hour
   13: 
   14: 
   15: class TestTimedeltaIndex:
   16:     def test_union(self):
   17:         i1 = timedelta_range("1day", periods=5)
   18:         i2 = timedelta_range("3day", periods=5)
   19:         result = i1.union(i2)
   20:         expected = timedelta_range("1day", periods=7)
   21:         tm.assert_index_equal(result, expected)
   22: 
   23:         i1 = Index(np.arange(0, 20, 2, dtype=np.int64))
   24:         i2 = timedelta_range(start="1 day", periods=10, freq="D")
   25:         i1.union(i2)  # Works
   26:         i2.union(i1)  # Fails with "AttributeError: can't set attribute"
   27: 
   28:     def test_union_sort_false(self):
   29:         tdi = timedelta_range("1day", periods=5)
   30: 
   31:         left = tdi[3:]
   32:         right = tdi[:3]
   33: 
   34:         # Check that we are testing the desired code path
   35:         assert left._can_fast_union(right)
   36: 
   37:         result = left.union(right)
   38:         tm.assert_index_equal(result, tdi)
   39: 
   40:         result = left.union(right, sort=False)
   41:         expected = TimedeltaIndex(["4 Days", "5 Days", "1 Days", "2 Day", "3 Days"])
   42:         tm.assert_index_equal(result, expected)
   43: 
   44:     def test_union_coverage(self):
   45:         idx = TimedeltaIndex(["3d", "1d", "2d"])
   46:         ordered = TimedeltaIndex(idx.sort_values(), freq="infer")
   47:         result = ordered.union(idx)
   48:         tm.assert_index_equal(result, ordered)
   49: 
   50:         result = ordered[:0].union(ordered)
   51:         tm.assert_index_equal(result, ordered)
   52:         assert result.freq == ordered.freq
   53: 
   54:     def test_union_bug_1730(self):
   55:         rng_a = timedelta_range("1 day", periods=4, freq="3h")
   56:         rng_b = timedelta_range("1 day", periods=4, freq="4h")
   57: 
   58:         result = rng_a.union(rng_b)
   59:         exp = TimedeltaIndex(sorted(set(rng_a) | set(rng_b)))
   60:         tm.assert_index_equal(result, exp)
   61: 
   62:     def test_union_bug_1745(self):
   63:         left = TimedeltaIndex(["1 day 15:19:49.695000"])
   64:         right = TimedeltaIndex(
   65:             ["2 day 13:04:21.322000", "1 day 15:27:24.873000", "1 day 15:31:05.350000"]
   66:         )
   67: 
   68:         result = left.union(right)
   69:         exp = TimedeltaIndex(sorted(set(left) | set(right)))
   70:         tm.assert_index_equal(result, exp)
   71: 
   72:     def test_union_bug_4564(self):
   73:         left = timedelta_range("1 day", "30d")
   74:         right = left + pd.offsets.Minute(15)
   75: 
   76:         result = left.union(right)
   77:         exp = TimedeltaIndex(sorted(set(left) | set(right)))
   78:         tm.assert_index_equal(result, exp)
   79: 
   80:     def test_union_freq_infer(self):
   81:         # When taking the union of two TimedeltaIndexes, we infer
   82:         #  a freq even if the arguments don't have freq.  This matches
   83:         #  DatetimeIndex behavior.
   84:         tdi = timedelta_range("1 Day", periods=5)
   85:         left = tdi[[0, 1, 3, 4]]
   86:         right = tdi[[2, 3, 1]]
   87: 
   88:         assert left.freq is None
   89:         assert right.freq is None
   90: 
   91:         result = left.union(right)
   92:         tm.assert_index_equal(result, tdi)
   93:         assert result.freq == "D"
   94: 
   95:     def test_intersection_bug_1708(self):
   96:         index_1 = timedelta_range("1 day", periods=4, freq="h")
   97:         index_2 = index_1 + pd.offsets.Hour(5)
   98: 
   99:         result = index_1.intersection(index_2)
  100:         assert len(result) == 0
  101: 
  102:         index_1 = timedelta_range("1 day", periods=4, freq="h")
  103:         index_2 = index_1 + pd.offsets.Hour(1)
  104: 
  105:         result = index_1.intersection(index_2)
  106:         expected = timedelta_range("1 day 01:00:00", periods=3, freq="h")
  107:         tm.assert_index_equal(result, expected)
  108:         assert result.freq == expected.freq
  109: 
  110:     def test_intersection_equal(self, sort):
  111:         # GH 24471 Test intersection outcome given the sort keyword
  112:         # for equal indices intersection should return the original index
  113:         first = timedelta_range("1 day", periods=4, freq="h")
  114:         second = timedelta_range("1 day", periods=4, freq="h")
  115:         intersect = first.intersection(second, sort=sort)
  116:         if sort is None:
  117:             tm.assert_index_equal(intersect, second.sort_values())
  118:         tm.assert_index_equal(intersect, second)
  119: 
  120:         # Corner cases
  121:         inter = first.intersection(first, sort=sort)
  122:         assert inter is first
  123: 
  124:     @pytest.mark.parametrize("period_1, period_2", [(0, 4), (4, 0)])
  125:     def test_intersection_zero_length(self, period_1, period_2, sort):
  126:         # GH 24471 test for non overlap the intersection should be zero length
  127:         index_1 = timedelta_range("1 day", periods=period_1, freq="h")
  128:         index_2 = timedelta_range("1 day", periods=period_2, freq="h")
  129:         expected = timedelta_range("1 day", periods=0, freq="h")
  130:         result = index_1.intersection(index_2, sort=sort)
  131:         tm.assert_index_equal(result, expected)
  132: 
  133:     def test_zero_length_input_index(self, sort):
  134:         # GH 24966 test for 0-len intersections are copied
  135:         index_1 = timedelta_range("1 day", periods=0, freq="h")
  136:         index_2 = timedelta_range("1 day", periods=3, freq="h")
  137:         result = index_1.intersection(index_2, sort=sort)
  138:         assert index_1 is not result
  139:         assert index_2 is not result
  140:         tm.assert_copy(result, index_1)
  141: 
  142:     @pytest.mark.parametrize(
  143:         "rng, expected",
  144:         # if target has the same name, it is preserved
  145:         [
  146:             (
  147:                 timedelta_range("1 day", periods=5, freq="h", name="idx"),
  148:                 timedelta_range("1 day", periods=4, freq="h", name="idx"),
  149:             ),
  150:             # if target name is different, it will be reset
  151:             (
  152:                 timedelta_range("1 day", periods=5, freq="h", name="other"),
  153:                 timedelta_range("1 day", periods=4, freq="h", name=None),
  154:             ),
  155:             # if no overlap exists return empty index
  156:             (
  157:                 timedelta_range("1 day", periods=10, freq="h", name="idx")[5:],
  158:                 TimedeltaIndex([], freq="h", name="idx"),
  159:             ),
  160:         ],
  161:     )
  162:     def test_intersection(self, rng, expected, sort):
  163:         # GH 4690 (with tz)
  164:         base = timedelta_range("1 day", periods=4, freq="h", name="idx")
  165:         result = base.intersection(rng, sort=sort)
  166:         if sort is None:
  167:             expected = expected.sort_values()
  168:         tm.assert_index_equal(result, expected)
  169:         assert result.name == expected.name
  170:         assert result.freq == expected.freq
  171: 
  172:     @pytest.mark.parametrize(
  173:         "rng, expected",
  174:         # part intersection works
  175:         [
  176:             (
  177:                 TimedeltaIndex(["5 hour", "2 hour", "4 hour", "9 hour"], name="idx"),
  178:                 TimedeltaIndex(["2 hour", "4 hour"], name="idx"),
  179:             ),
  180:             # reordered part intersection
  181:             (
  182:                 TimedeltaIndex(["2 hour", "5 hour", "5 hour", "1 hour"], name="other"),
  183:                 TimedeltaIndex(["1 hour", "2 hour"], name=None),
  184:             ),
  185:             # reversed index
  186:             (
  187:                 TimedeltaIndex(["1 hour", "2 hour", "4 hour", "3 hour"], name="idx")[
  188:                     ::-1
  189:                 ],
  190:                 TimedeltaIndex(["1 hour", "2 hour", "4 hour", "3 hour"], name="idx"),
  191:             ),
  192:         ],
  193:     )
  194:     def test_intersection_non_monotonic(self, rng, expected, sort):
  195:         # 24471 non-monotonic
  196:         base = TimedeltaIndex(["1 hour", "2 hour", "4 hour", "3 hour"], name="idx")
  197:         result = base.intersection(rng, sort=sort)
  198:         if sort is None:
  199:             expected = expected.sort_values()
  200:         tm.assert_index_equal(result, expected)
  201:         assert result.name == expected.name
  202: 
  203:         # if reversed order, frequency is still the same
  204:         if all(base == rng[::-1]) and sort is None:
  205:             assert isinstance(result.freq, Hour)
  206:         else:
  207:             assert result.freq is None
  208: 
  209: 
  210: class TestTimedeltaIndexDifference:
  211:     def test_difference_freq(self, sort):
  212:         # GH14323: Difference of TimedeltaIndex should not preserve frequency
  213: 
  214:         index = timedelta_range("0 days", "5 days", freq="D")
  215: 
  216:         other = timedelta_range("1 days", "4 days", freq="D")
  217:         expected = TimedeltaIndex(["0 days", "5 days"], freq=None)
  218:         idx_diff = index.difference(other, sort)
  219:         tm.assert_index_equal(idx_diff, expected)
  220:         tm.assert_attr_equal("freq", idx_diff, expected)
  221: 
  222:         # preserve frequency when the difference is a contiguous
  223:         # subset of the original range
  224:         other = timedelta_range("2 days", "5 days", freq="D")
  225:         idx_diff = index.difference(other, sort)
  226:         expected = TimedeltaIndex(["0 days", "1 days"], freq="D")
  227:         tm.assert_index_equal(idx_diff, expected)
  228:         tm.assert_attr_equal("freq", idx_diff, expected)
  229: 
  230:     def test_difference_sort(self, sort):
  231:         index = TimedeltaIndex(
  232:             ["5 days", "3 days", "2 days", "4 days", "1 days", "0 days"]
  233:         )
  234: 
  235:         other = timedelta_range("1 days", "4 days", freq="D")
  236:         idx_diff = index.difference(other, sort)
  237: 
  238:         expected = TimedeltaIndex(["5 days", "0 days"], freq=None)
  239: 
  240:         if sort is None:
  241:             expected = expected.sort_values()
  242: 
  243:         tm.assert_index_equal(idx_diff, expected)
  244:         tm.assert_attr_equal("freq", idx_diff, expected)
  245: 
  246:         other = timedelta_range("2 days", "5 days", freq="D")
  247:         idx_diff = index.difference(other, sort)
  248:         expected = TimedeltaIndex(["1 days", "0 days"], freq=None)
  249: 
  250:         if sort is None:
  251:             expected = expected.sort_values()
  252: 
  253:         tm.assert_index_equal(idx_diff, expected)
  254:         tm.assert_attr_equal("freq", idx_diff, expected)
