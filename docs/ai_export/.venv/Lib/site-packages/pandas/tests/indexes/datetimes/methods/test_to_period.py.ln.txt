    1: import dateutil.tz
    2: from dateutil.tz import tzlocal
    3: import pytest
    4: import pytz
    5: 
    6: from pandas._libs.tslibs.ccalendar import MONTHS
    7: from pandas._libs.tslibs.offsets import MonthEnd
    8: from pandas._libs.tslibs.period import INVALID_FREQ_ERR_MSG
    9: 
   10: from pandas import (
   11:     DatetimeIndex,
   12:     Period,
   13:     PeriodIndex,
   14:     Timestamp,
   15:     date_range,
   16:     period_range,
   17: )
   18: import pandas._testing as tm
   19: 
   20: 
   21: class TestToPeriod:
   22:     def test_dti_to_period(self):
   23:         dti = date_range(start="1/1/2005", end="12/1/2005", freq="ME")
   24:         pi1 = dti.to_period()
   25:         pi2 = dti.to_period(freq="D")
   26:         pi3 = dti.to_period(freq="3D")
   27: 
   28:         assert pi1[0] == Period("Jan 2005", freq="M")
   29:         assert pi2[0] == Period("1/31/2005", freq="D")
   30:         assert pi3[0] == Period("1/31/2005", freq="3D")
   31: 
   32:         assert pi1[-1] == Period("Nov 2005", freq="M")
   33:         assert pi2[-1] == Period("11/30/2005", freq="D")
   34:         assert pi3[-1], Period("11/30/2005", freq="3D")
   35: 
   36:         tm.assert_index_equal(pi1, period_range("1/1/2005", "11/1/2005", freq="M"))
   37:         tm.assert_index_equal(
   38:             pi2, period_range("1/1/2005", "11/1/2005", freq="M").asfreq("D")
   39:         )
   40:         tm.assert_index_equal(
   41:             pi3, period_range("1/1/2005", "11/1/2005", freq="M").asfreq("3D")
   42:         )
   43: 
   44:     @pytest.mark.parametrize("month", MONTHS)
   45:     def test_to_period_quarterly(self, month):
   46:         # make sure we can make the round trip
   47:         freq = f"Q-{month}"
   48:         rng = period_range("1989Q3", "1991Q3", freq=freq)
   49:         stamps = rng.to_timestamp()
   50:         result = stamps.to_period(freq)
   51:         tm.assert_index_equal(rng, result)
   52: 
   53:     @pytest.mark.parametrize("off", ["BQE", "QS", "BQS"])
   54:     def test_to_period_quarterlyish(self, off):
   55:         rng = date_range("01-Jan-2012", periods=8, freq=off)
   56:         prng = rng.to_period()
   57:         assert prng.freq == "QE-DEC"
   58: 
   59:     @pytest.mark.parametrize("off", ["BYE", "YS", "BYS"])
   60:     def test_to_period_annualish(self, off):
   61:         rng = date_range("01-Jan-2012", periods=8, freq=off)
   62:         prng = rng.to_period()
   63:         assert prng.freq == "YE-DEC"
   64: 
   65:     def test_to_period_monthish(self):
   66:         offsets = ["MS", "BME"]
   67:         for off in offsets:
   68:             rng = date_range("01-Jan-2012", periods=8, freq=off)
   69:             prng = rng.to_period()
   70:             assert prng.freqstr == "M"
   71: 
   72:         rng = date_range("01-Jan-2012", periods=8, freq="ME")
   73:         prng = rng.to_period()
   74:         assert prng.freqstr == "M"
   75: 
   76:         with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
   77:             date_range("01-Jan-2012", periods=8, freq="EOM")
   78: 
   79:     @pytest.mark.parametrize(
   80:         "freq_offset, freq_period",
   81:         [
   82:             ("2ME", "2M"),
   83:             (MonthEnd(2), MonthEnd(2)),
   84:         ],
   85:     )
   86:     def test_dti_to_period_2monthish(self, freq_offset, freq_period):
   87:         dti = date_range("2020-01-01", periods=3, freq=freq_offset)
   88:         pi = dti.to_period()
   89: 
   90:         tm.assert_index_equal(pi, period_range("2020-01", "2020-05", freq=freq_period))
   91: 
   92:     @pytest.mark.parametrize(
   93:         "freq, freq_depr",
   94:         [
   95:             ("2ME", "2M"),
   96:             ("2QE", "2Q"),
   97:             ("2QE-SEP", "2Q-SEP"),
   98:             ("1YE", "1Y"),
   99:             ("2YE-MAR", "2Y-MAR"),
  100:             ("1YE", "1A"),
  101:             ("2YE-MAR", "2A-MAR"),
  102:         ],
  103:     )
  104:     def test_to_period_frequency_M_Q_Y_A_deprecated(self, freq, freq_depr):
  105:         # GH#9586
  106:         msg = f"'{freq_depr[1:]}' is deprecated and will be removed "
  107:         f"in a future version, please use '{freq[1:]}' instead."
  108: 
  109:         rng = date_range("01-Jan-2012", periods=8, freq=freq)
  110:         prng = rng.to_period()
  111:         with tm.assert_produces_warning(FutureWarning, match=msg):
  112:             assert prng.freq == freq_depr
  113: 
  114:     def test_to_period_infer(self):
  115:         # https://github.com/pandas-dev/pandas/issues/33358
  116:         rng = date_range(
  117:             start="2019-12-22 06:40:00+00:00",
  118:             end="2019-12-22 08:45:00+00:00",
  119:             freq="5min",
  120:         )
  121: 
  122:         with tm.assert_produces_warning(UserWarning):
  123:             pi1 = rng.to_period("5min")
  124: 
  125:         with tm.assert_produces_warning(UserWarning):
  126:             pi2 = rng.to_period()
  127: 
  128:         tm.assert_index_equal(pi1, pi2)
  129: 
  130:     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
  131:     def test_period_dt64_round_trip(self):
  132:         dti = date_range("1/1/2000", "1/7/2002", freq="B")
  133:         pi = dti.to_period()
  134:         tm.assert_index_equal(pi.to_timestamp(), dti)
  135: 
  136:         dti = date_range("1/1/2000", "1/7/2002", freq="B")
  137:         pi = dti.to_period(freq="h")
  138:         tm.assert_index_equal(pi.to_timestamp(), dti)
  139: 
  140:     def test_to_period_millisecond(self):
  141:         index = DatetimeIndex(
  142:             [
  143:                 Timestamp("2007-01-01 10:11:12.123456Z"),
  144:                 Timestamp("2007-01-01 10:11:13.789123Z"),
  145:             ]
  146:         )
  147: 
  148:         with tm.assert_produces_warning(UserWarning):
  149:             # warning that timezone info will be lost
  150:             period = index.to_period(freq="ms")
  151:         assert 2 == len(period)
  152:         assert period[0] == Period("2007-01-01 10:11:12.123Z", "ms")
  153:         assert period[1] == Period("2007-01-01 10:11:13.789Z", "ms")
  154: 
  155:     def test_to_period_microsecond(self):
  156:         index = DatetimeIndex(
  157:             [
  158:                 Timestamp("2007-01-01 10:11:12.123456Z"),
  159:                 Timestamp("2007-01-01 10:11:13.789123Z"),
  160:             ]
  161:         )
  162: 
  163:         with tm.assert_produces_warning(UserWarning):
  164:             # warning that timezone info will be lost
  165:             period = index.to_period(freq="us")
  166:         assert 2 == len(period)
  167:         assert period[0] == Period("2007-01-01 10:11:12.123456Z", "us")
  168:         assert period[1] == Period("2007-01-01 10:11:13.789123Z", "us")
  169: 
  170:     @pytest.mark.parametrize(
  171:         "tz",
  172:         ["US/Eastern", pytz.utc, tzlocal(), "dateutil/US/Eastern", dateutil.tz.tzutc()],
  173:     )
  174:     def test_to_period_tz(self, tz):
  175:         ts = date_range("1/1/2000", "2/1/2000", tz=tz)
  176: 
  177:         with tm.assert_produces_warning(UserWarning):
  178:             # GH#21333 warning that timezone info will be lost
  179:             # filter warning about freq deprecation
  180: 
  181:             result = ts.to_period()[0]
  182:             expected = ts[0].to_period(ts.freq)
  183: 
  184:         assert result == expected
  185: 
  186:         expected = date_range("1/1/2000", "2/1/2000").to_period()
  187: 
  188:         with tm.assert_produces_warning(UserWarning):
  189:             # GH#21333 warning that timezone info will be lost
  190:             result = ts.to_period(ts.freq)
  191: 
  192:         tm.assert_index_equal(result, expected)
  193: 
  194:     @pytest.mark.parametrize("tz", ["Etc/GMT-1", "Etc/GMT+1"])
  195:     def test_to_period_tz_utc_offset_consistency(self, tz):
  196:         # GH#22905
  197:         ts = date_range("1/1/2000", "2/1/2000", tz="Etc/GMT-1")
  198:         with tm.assert_produces_warning(UserWarning):
  199:             result = ts.to_period()[0]
  200:             expected = ts[0].to_period(ts.freq)
  201:             assert result == expected
  202: 
  203:     def test_to_period_nofreq(self):
  204:         idx = DatetimeIndex(["2000-01-01", "2000-01-02", "2000-01-04"])
  205:         msg = "You must pass a freq argument as current index has none."
  206:         with pytest.raises(ValueError, match=msg):
  207:             idx.to_period()
  208: 
  209:         idx = DatetimeIndex(["2000-01-01", "2000-01-02", "2000-01-03"], freq="infer")
  210:         assert idx.freqstr == "D"
  211:         expected = PeriodIndex(["2000-01-01", "2000-01-02", "2000-01-03"], freq="D")
  212:         tm.assert_index_equal(idx.to_period(), expected)
  213: 
  214:         # GH#7606
  215:         idx = DatetimeIndex(["2000-01-01", "2000-01-02", "2000-01-03"])
  216:         assert idx.freqstr is None
  217:         tm.assert_index_equal(idx.to_period(), expected)
  218: 
  219:     @pytest.mark.parametrize("freq", ["2BMS", "1SME-15"])
  220:     def test_to_period_offsets_not_supported(self, freq):
  221:         # GH#56243
  222:         msg = f"{freq[1:]} is not supported as period frequency"
  223:         ts = date_range("1/1/2012", periods=4, freq=freq)
  224:         with pytest.raises(ValueError, match=msg):
  225:             ts.to_period()
