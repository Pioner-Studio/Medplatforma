    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: import pytz
    6: 
    7: from pandas import (
    8:     NA,
    9:     DatetimeIndex,
   10:     Index,
   11:     NaT,
   12:     Timestamp,
   13:     date_range,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestInsert:
   19:     @pytest.mark.parametrize("null", [None, np.nan, np.datetime64("NaT"), NaT, NA])
   20:     @pytest.mark.parametrize("tz", [None, "UTC", "US/Eastern"])
   21:     def test_insert_nat(self, tz, null):
   22:         # GH#16537, GH#18295 (test missing)
   23: 
   24:         idx = DatetimeIndex(["2017-01-01"], tz=tz)
   25:         expected = DatetimeIndex(["NaT", "2017-01-01"], tz=tz)
   26:         if tz is not None and isinstance(null, np.datetime64):
   27:             expected = Index([null, idx[0]], dtype=object)
   28: 
   29:         res = idx.insert(0, null)
   30:         tm.assert_index_equal(res, expected)
   31: 
   32:     @pytest.mark.parametrize("tz", [None, "UTC", "US/Eastern"])
   33:     def test_insert_invalid_na(self, tz):
   34:         idx = DatetimeIndex(["2017-01-01"], tz=tz)
   35: 
   36:         item = np.timedelta64("NaT")
   37:         result = idx.insert(0, item)
   38:         expected = Index([item] + list(idx), dtype=object)
   39:         tm.assert_index_equal(result, expected)
   40: 
   41:     def test_insert_empty_preserves_freq(self, tz_naive_fixture):
   42:         # GH#33573
   43:         tz = tz_naive_fixture
   44:         dti = DatetimeIndex([], tz=tz, freq="D")
   45:         item = Timestamp("2017-04-05").tz_localize(tz)
   46: 
   47:         result = dti.insert(0, item)
   48:         assert result.freq == dti.freq
   49: 
   50:         # But not when we insert an item that doesn't conform to freq
   51:         dti = DatetimeIndex([], tz=tz, freq="W-THU")
   52:         result = dti.insert(0, item)
   53:         assert result.freq is None
   54: 
   55:     def test_insert(self, unit):
   56:         idx = DatetimeIndex(
   57:             ["2000-01-04", "2000-01-01", "2000-01-02"], name="idx"
   58:         ).as_unit(unit)
   59: 
   60:         result = idx.insert(2, datetime(2000, 1, 5))
   61:         exp = DatetimeIndex(
   62:             ["2000-01-04", "2000-01-01", "2000-01-05", "2000-01-02"], name="idx"
   63:         ).as_unit(unit)
   64:         tm.assert_index_equal(result, exp)
   65: 
   66:         # insertion of non-datetime should coerce to object index
   67:         result = idx.insert(1, "inserted")
   68:         expected = Index(
   69:             [
   70:                 datetime(2000, 1, 4),
   71:                 "inserted",
   72:                 datetime(2000, 1, 1),
   73:                 datetime(2000, 1, 2),
   74:             ],
   75:             name="idx",
   76:         )
   77:         assert not isinstance(result, DatetimeIndex)
   78:         tm.assert_index_equal(result, expected)
   79:         assert result.name == expected.name
   80: 
   81:     def test_insert2(self, unit):
   82:         idx = date_range("1/1/2000", periods=3, freq="ME", name="idx", unit=unit)
   83: 
   84:         # preserve freq
   85:         expected_0 = DatetimeIndex(
   86:             ["1999-12-31", "2000-01-31", "2000-02-29", "2000-03-31"],
   87:             name="idx",
   88:             freq="ME",
   89:         ).as_unit(unit)
   90:         expected_3 = DatetimeIndex(
   91:             ["2000-01-31", "2000-02-29", "2000-03-31", "2000-04-30"],
   92:             name="idx",
   93:             freq="ME",
   94:         ).as_unit(unit)
   95: 
   96:         # reset freq to None
   97:         expected_1_nofreq = DatetimeIndex(
   98:             ["2000-01-31", "2000-01-31", "2000-02-29", "2000-03-31"],
   99:             name="idx",
  100:             freq=None,
  101:         ).as_unit(unit)
  102:         expected_3_nofreq = DatetimeIndex(
  103:             ["2000-01-31", "2000-02-29", "2000-03-31", "2000-01-02"],
  104:             name="idx",
  105:             freq=None,
  106:         ).as_unit(unit)
  107: 
  108:         cases = [
  109:             (0, datetime(1999, 12, 31), expected_0),
  110:             (-3, datetime(1999, 12, 31), expected_0),
  111:             (3, datetime(2000, 4, 30), expected_3),
  112:             (1, datetime(2000, 1, 31), expected_1_nofreq),
  113:             (3, datetime(2000, 1, 2), expected_3_nofreq),
  114:         ]
  115: 
  116:         for n, d, expected in cases:
  117:             result = idx.insert(n, d)
  118:             tm.assert_index_equal(result, expected)
  119:             assert result.name == expected.name
  120:             assert result.freq == expected.freq
  121: 
  122:     def test_insert3(self, unit):
  123:         idx = date_range("1/1/2000", periods=3, freq="ME", name="idx", unit=unit)
  124: 
  125:         # reset freq to None
  126:         result = idx.insert(3, datetime(2000, 1, 2))
  127:         expected = DatetimeIndex(
  128:             ["2000-01-31", "2000-02-29", "2000-03-31", "2000-01-02"],
  129:             name="idx",
  130:             freq=None,
  131:         ).as_unit(unit)
  132:         tm.assert_index_equal(result, expected)
  133:         assert result.name == expected.name
  134:         assert result.freq is None
  135: 
  136:     def test_insert4(self, unit):
  137:         for tz in ["US/Pacific", "Asia/Singapore"]:
  138:             idx = date_range(
  139:                 "1/1/2000 09:00", periods=6, freq="h", tz=tz, name="idx", unit=unit
  140:             )
  141:             # preserve freq
  142:             expected = date_range(
  143:                 "1/1/2000 09:00", periods=7, freq="h", tz=tz, name="idx", unit=unit
  144:             )
  145:             for d in [
  146:                 Timestamp("2000-01-01 15:00", tz=tz),
  147:                 pytz.timezone(tz).localize(datetime(2000, 1, 1, 15)),
  148:             ]:
  149:                 result = idx.insert(6, d)
  150:                 tm.assert_index_equal(result, expected)
  151:                 assert result.name == expected.name
  152:                 assert result.freq == expected.freq
  153:                 assert result.tz == expected.tz
  154: 
  155:             expected = DatetimeIndex(
  156:                 [
  157:                     "2000-01-01 09:00",
  158:                     "2000-01-01 10:00",
  159:                     "2000-01-01 11:00",
  160:                     "2000-01-01 12:00",
  161:                     "2000-01-01 13:00",
  162:                     "2000-01-01 14:00",
  163:                     "2000-01-01 10:00",
  164:                 ],
  165:                 name="idx",
  166:                 tz=tz,
  167:                 freq=None,
  168:             ).as_unit(unit)
  169:             # reset freq to None
  170:             for d in [
  171:                 Timestamp("2000-01-01 10:00", tz=tz),
  172:                 pytz.timezone(tz).localize(datetime(2000, 1, 1, 10)),
  173:             ]:
  174:                 result = idx.insert(6, d)
  175:                 tm.assert_index_equal(result, expected)
  176:                 assert result.name == expected.name
  177:                 assert result.tz == expected.tz
  178:                 assert result.freq is None
  179: 
  180:     # TODO: also changes DataFrame.__setitem__ with expansion
  181:     def test_insert_mismatched_tzawareness(self):
  182:         # see GH#7299
  183:         idx = date_range("1/1/2000", periods=3, freq="D", tz="Asia/Tokyo", name="idx")
  184: 
  185:         # mismatched tz-awareness
  186:         item = Timestamp("2000-01-04")
  187:         result = idx.insert(3, item)
  188:         expected = Index(
  189:             list(idx[:3]) + [item] + list(idx[3:]), dtype=object, name="idx"
  190:         )
  191:         tm.assert_index_equal(result, expected)
  192: 
  193:         # mismatched tz-awareness
  194:         item = datetime(2000, 1, 4)
  195:         result = idx.insert(3, item)
  196:         expected = Index(
  197:             list(idx[:3]) + [item] + list(idx[3:]), dtype=object, name="idx"
  198:         )
  199:         tm.assert_index_equal(result, expected)
  200: 
  201:     # TODO: also changes DataFrame.__setitem__ with expansion
  202:     def test_insert_mismatched_tz(self):
  203:         # see GH#7299
  204:         # pre-2.0 with mismatched tzs we would cast to object
  205:         idx = date_range("1/1/2000", periods=3, freq="D", tz="Asia/Tokyo", name="idx")
  206: 
  207:         # mismatched tz -> cast to object (could reasonably cast to same tz or UTC)
  208:         item = Timestamp("2000-01-04", tz="US/Eastern")
  209:         result = idx.insert(3, item)
  210:         expected = Index(
  211:             list(idx[:3]) + [item.tz_convert(idx.tz)] + list(idx[3:]),
  212:             name="idx",
  213:         )
  214:         assert expected.dtype == idx.dtype
  215:         tm.assert_index_equal(result, expected)
  216: 
  217:         item = datetime(2000, 1, 4, tzinfo=pytz.timezone("US/Eastern"))
  218:         result = idx.insert(3, item)
  219:         expected = Index(
  220:             list(idx[:3]) + [item.astimezone(idx.tzinfo)] + list(idx[3:]),
  221:             name="idx",
  222:         )
  223:         assert expected.dtype == idx.dtype
  224:         tm.assert_index_equal(result, expected)
  225: 
  226:     @pytest.mark.parametrize(
  227:         "item", [0, np.int64(0), np.float64(0), np.array(0), np.timedelta64(456)]
  228:     )
  229:     def test_insert_mismatched_types_raises(self, tz_aware_fixture, item):
  230:         # GH#33703 dont cast these to dt64
  231:         tz = tz_aware_fixture
  232:         dti = date_range("2019-11-04", periods=9, freq="-1D", name=9, tz=tz)
  233: 
  234:         result = dti.insert(1, item)
  235: 
  236:         if isinstance(item, np.ndarray):
  237:             assert item.item() == 0
  238:             expected = Index([dti[0], 0] + list(dti[1:]), dtype=object, name=9)
  239:         else:
  240:             expected = Index([dti[0], item] + list(dti[1:]), dtype=object, name=9)
  241: 
  242:         tm.assert_index_equal(result, expected)
  243: 
  244:     def test_insert_castable_str(self, tz_aware_fixture):
  245:         # GH#33703
  246:         tz = tz_aware_fixture
  247:         dti = date_range("2019-11-04", periods=3, freq="-1D", name=9, tz=tz)
  248: 
  249:         value = "2019-11-05"
  250:         result = dti.insert(0, value)
  251: 
  252:         ts = Timestamp(value).tz_localize(tz)
  253:         expected = DatetimeIndex([ts] + list(dti), dtype=dti.dtype, name=9)
  254:         tm.assert_index_equal(result, expected)
  255: 
  256:     def test_insert_non_castable_str(self, tz_aware_fixture):
  257:         # GH#33703
  258:         tz = tz_aware_fixture
  259:         dti = date_range("2019-11-04", periods=3, freq="-1D", name=9, tz=tz)
  260: 
  261:         value = "foo"
  262:         result = dti.insert(0, value)
  263: 
  264:         expected = Index(["foo"] + list(dti), dtype=object, name=9)
  265:         tm.assert_index_equal(result, expected)
