    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     NaT,
    6:     Period,
    7:     PeriodIndex,
    8:     date_range,
    9:     period_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestPeriodRangeKeywords:
   15:     def test_required_arguments(self):
   16:         msg = (
   17:             "Of the three parameters: start, end, and periods, exactly two "
   18:             "must be specified"
   19:         )
   20:         with pytest.raises(ValueError, match=msg):
   21:             period_range("2011-1-1", "2012-1-1", "B")
   22: 
   23:     def test_required_arguments2(self):
   24:         start = Period("02-Apr-2005", "D")
   25:         msg = (
   26:             "Of the three parameters: start, end, and periods, exactly two "
   27:             "must be specified"
   28:         )
   29:         with pytest.raises(ValueError, match=msg):
   30:             period_range(start=start)
   31: 
   32:     def test_required_arguments3(self):
   33:         # not enough params
   34:         msg = (
   35:             "Of the three parameters: start, end, and periods, "
   36:             "exactly two must be specified"
   37:         )
   38:         with pytest.raises(ValueError, match=msg):
   39:             period_range(start="2017Q1")
   40: 
   41:         with pytest.raises(ValueError, match=msg):
   42:             period_range(end="2017Q1")
   43: 
   44:         with pytest.raises(ValueError, match=msg):
   45:             period_range(periods=5)
   46: 
   47:         with pytest.raises(ValueError, match=msg):
   48:             period_range()
   49: 
   50:     def test_required_arguments_too_many(self):
   51:         msg = (
   52:             "Of the three parameters: start, end, and periods, "
   53:             "exactly two must be specified"
   54:         )
   55:         with pytest.raises(ValueError, match=msg):
   56:             period_range(start="2017Q1", end="2018Q1", periods=8, freq="Q")
   57: 
   58:     def test_start_end_non_nat(self):
   59:         # start/end NaT
   60:         msg = "start and end must not be NaT"
   61:         with pytest.raises(ValueError, match=msg):
   62:             period_range(start=NaT, end="2018Q1")
   63:         with pytest.raises(ValueError, match=msg):
   64:             period_range(start=NaT, end="2018Q1", freq="Q")
   65: 
   66:         with pytest.raises(ValueError, match=msg):
   67:             period_range(start="2017Q1", end=NaT)
   68:         with pytest.raises(ValueError, match=msg):
   69:             period_range(start="2017Q1", end=NaT, freq="Q")
   70: 
   71:     def test_periods_requires_integer(self):
   72:         # invalid periods param
   73:         msg = "periods must be a number, got foo"
   74:         with pytest.raises(TypeError, match=msg):
   75:             period_range(start="2017Q1", periods="foo")
   76: 
   77: 
   78: class TestPeriodRange:
   79:     @pytest.mark.parametrize(
   80:         "freq_offset, freq_period",
   81:         [
   82:             ("D", "D"),
   83:             ("W", "W"),
   84:             ("QE", "Q"),
   85:             ("YE", "Y"),
   86:         ],
   87:     )
   88:     def test_construction_from_string(self, freq_offset, freq_period):
   89:         # non-empty
   90:         expected = date_range(
   91:             start="2017-01-01", periods=5, freq=freq_offset, name="foo"
   92:         ).to_period()
   93:         start, end = str(expected[0]), str(expected[-1])
   94: 
   95:         result = period_range(start=start, end=end, freq=freq_period, name="foo")
   96:         tm.assert_index_equal(result, expected)
   97: 
   98:         result = period_range(start=start, periods=5, freq=freq_period, name="foo")
   99:         tm.assert_index_equal(result, expected)
  100: 
  101:         result = period_range(end=end, periods=5, freq=freq_period, name="foo")
  102:         tm.assert_index_equal(result, expected)
  103: 
  104:         # empty
  105:         expected = PeriodIndex([], freq=freq_period, name="foo")
  106: 
  107:         result = period_range(start=start, periods=0, freq=freq_period, name="foo")
  108:         tm.assert_index_equal(result, expected)
  109: 
  110:         result = period_range(end=end, periods=0, freq=freq_period, name="foo")
  111:         tm.assert_index_equal(result, expected)
  112: 
  113:         result = period_range(start=end, end=start, freq=freq_period, name="foo")
  114:         tm.assert_index_equal(result, expected)
  115: 
  116:     def test_construction_from_string_monthly(self):
  117:         # non-empty
  118:         expected = date_range(
  119:             start="2017-01-01", periods=5, freq="ME", name="foo"
  120:         ).to_period()
  121:         start, end = str(expected[0]), str(expected[-1])
  122: 
  123:         result = period_range(start=start, end=end, freq="M", name="foo")
  124:         tm.assert_index_equal(result, expected)
  125: 
  126:         result = period_range(start=start, periods=5, freq="M", name="foo")
  127:         tm.assert_index_equal(result, expected)
  128: 
  129:         result = period_range(end=end, periods=5, freq="M", name="foo")
  130:         tm.assert_index_equal(result, expected)
  131: 
  132:         # empty
  133:         expected = PeriodIndex([], freq="M", name="foo")
  134: 
  135:         result = period_range(start=start, periods=0, freq="M", name="foo")
  136:         tm.assert_index_equal(result, expected)
  137: 
  138:         result = period_range(end=end, periods=0, freq="M", name="foo")
  139:         tm.assert_index_equal(result, expected)
  140: 
  141:         result = period_range(start=end, end=start, freq="M", name="foo")
  142:         tm.assert_index_equal(result, expected)
  143: 
  144:     def test_construction_from_period(self):
  145:         # upsampling
  146:         start, end = Period("2017Q1", freq="Q"), Period("2018Q1", freq="Q")
  147:         expected = date_range(
  148:             start="2017-03-31", end="2018-03-31", freq="ME", name="foo"
  149:         ).to_period()
  150:         result = period_range(start=start, end=end, freq="M", name="foo")
  151:         tm.assert_index_equal(result, expected)
  152: 
  153:         # downsampling
  154:         start = Period("2017-1", freq="M")
  155:         end = Period("2019-12", freq="M")
  156:         expected = date_range(
  157:             start="2017-01-31", end="2019-12-31", freq="QE", name="foo"
  158:         ).to_period()
  159:         result = period_range(start=start, end=end, freq="Q", name="foo")
  160:         tm.assert_index_equal(result, expected)
  161: 
  162:         # test for issue # 21793
  163:         start = Period("2017Q1", freq="Q")
  164:         end = Period("2018Q1", freq="Q")
  165:         idx = period_range(start=start, end=end, freq="Q", name="foo")
  166:         result = idx == idx.values
  167:         expected = np.array([True, True, True, True, True])
  168:         tm.assert_numpy_array_equal(result, expected)
  169: 
  170:         # empty
  171:         expected = PeriodIndex([], freq="W", name="foo")
  172: 
  173:         result = period_range(start=start, periods=0, freq="W", name="foo")
  174:         tm.assert_index_equal(result, expected)
  175: 
  176:         result = period_range(end=end, periods=0, freq="W", name="foo")
  177:         tm.assert_index_equal(result, expected)
  178: 
  179:         result = period_range(start=end, end=start, freq="W", name="foo")
  180:         tm.assert_index_equal(result, expected)
  181: 
  182:     def test_mismatched_start_end_freq_raises(self):
  183:         depr_msg = "Period with BDay freq is deprecated"
  184:         msg = "'w' is deprecated and will be removed in a future version."
  185:         with tm.assert_produces_warning(FutureWarning, match=msg):
  186:             end_w = Period("2006-12-31", "1w")
  187: 
  188:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
  189:             start_b = Period("02-Apr-2005", "B")
  190:             end_b = Period("2005-05-01", "B")
  191: 
  192:         msg = "start and end must have same freq"
  193:         with pytest.raises(ValueError, match=msg):
  194:             with tm.assert_produces_warning(FutureWarning, match=depr_msg):
  195:                 period_range(start=start_b, end=end_w)
  196: 
  197:         # without mismatch we are OK
  198:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
  199:             period_range(start=start_b, end=end_b)
  200: 
  201: 
  202: class TestPeriodRangeDisallowedFreqs:
  203:     def test_constructor_U(self):
  204:         # U was used as undefined period
  205:         with pytest.raises(ValueError, match="Invalid frequency: X"):
  206:             period_range("2007-1-1", periods=500, freq="X")
  207: 
  208:     @pytest.mark.parametrize(
  209:         "freq,freq_depr",
  210:         [
  211:             ("2Y", "2A"),
  212:             ("2Y", "2a"),
  213:             ("2Y-AUG", "2A-AUG"),
  214:             ("2Y-AUG", "2A-aug"),
  215:         ],
  216:     )
  217:     def test_a_deprecated_from_time_series(self, freq, freq_depr):
  218:         # GH#52536
  219:         msg = f"'{freq_depr[1:]}' is deprecated and will be removed in a "
  220:         f"future version. Please use '{freq[1:]}' instead."
  221: 
  222:         with tm.assert_produces_warning(FutureWarning, match=msg):
  223:             period_range(freq=freq_depr, start="1/1/2001", end="12/1/2009")
  224: 
  225:     @pytest.mark.parametrize("freq_depr", ["2H", "2MIN", "2S", "2US", "2NS"])
  226:     def test_uppercase_freq_deprecated_from_time_series(self, freq_depr):
  227:         # GH#52536, GH#54939
  228:         msg = f"'{freq_depr[1:]}' is deprecated and will be removed in a "
  229:         f"future version. Please use '{freq_depr.lower()[1:]}' instead."
  230: 
  231:         with tm.assert_produces_warning(FutureWarning, match=msg):
  232:             period_range("2020-01-01 00:00:00 00:00", periods=2, freq=freq_depr)
  233: 
  234:     @pytest.mark.parametrize("freq_depr", ["2m", "2q-sep", "2y", "2w"])
  235:     def test_lowercase_freq_deprecated_from_time_series(self, freq_depr):
  236:         # GH#52536, GH#54939
  237:         msg = f"'{freq_depr[1:]}' is deprecated and will be removed in a "
  238:         f"future version. Please use '{freq_depr.upper()[1:]}' instead."
  239: 
  240:         with tm.assert_produces_warning(FutureWarning, match=msg):
  241:             period_range(freq=freq_depr, start="1/1/2001", end="12/1/2009")
