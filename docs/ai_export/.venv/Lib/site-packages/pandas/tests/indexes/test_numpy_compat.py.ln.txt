    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     CategoricalIndex,
    6:     DatetimeIndex,
    7:     Index,
    8:     PeriodIndex,
    9:     TimedeltaIndex,
   10:     isna,
   11: )
   12: import pandas._testing as tm
   13: from pandas.api.types import (
   14:     is_complex_dtype,
   15:     is_numeric_dtype,
   16: )
   17: from pandas.core.arrays import BooleanArray
   18: from pandas.core.indexes.datetimelike import DatetimeIndexOpsMixin
   19: 
   20: 
   21: def test_numpy_ufuncs_out(index):
   22:     result = index == index
   23: 
   24:     out = np.empty(index.shape, dtype=bool)
   25:     np.equal(index, index, out=out)
   26:     tm.assert_numpy_array_equal(out, result)
   27: 
   28:     if not index._is_multi:
   29:         # same thing on the ExtensionArray
   30:         out = np.empty(index.shape, dtype=bool)
   31:         np.equal(index.array, index.array, out=out)
   32:         tm.assert_numpy_array_equal(out, result)
   33: 
   34: 
   35: @pytest.mark.parametrize(
   36:     "func",
   37:     [
   38:         np.exp,
   39:         np.exp2,
   40:         np.expm1,
   41:         np.log,
   42:         np.log2,
   43:         np.log10,
   44:         np.log1p,
   45:         np.sqrt,
   46:         np.sin,
   47:         np.cos,
   48:         np.tan,
   49:         np.arcsin,
   50:         np.arccos,
   51:         np.arctan,
   52:         np.sinh,
   53:         np.cosh,
   54:         np.tanh,
   55:         np.arcsinh,
   56:         np.arccosh,
   57:         np.arctanh,
   58:         np.deg2rad,
   59:         np.rad2deg,
   60:     ],
   61:     ids=lambda x: x.__name__,
   62: )
   63: def test_numpy_ufuncs_basic(index, func):
   64:     # test ufuncs of numpy, see:
   65:     # https://numpy.org/doc/stable/reference/ufuncs.html
   66: 
   67:     if isinstance(index, DatetimeIndexOpsMixin):
   68:         with tm.external_error_raised((TypeError, AttributeError)):
   69:             with np.errstate(all="ignore"):
   70:                 func(index)
   71:     elif is_numeric_dtype(index) and not (
   72:         is_complex_dtype(index) and func in [np.deg2rad, np.rad2deg]
   73:     ):
   74:         # coerces to float (e.g. np.sin)
   75:         with np.errstate(all="ignore"):
   76:             result = func(index)
   77:             arr_result = func(index.values)
   78:             if arr_result.dtype == np.float16:
   79:                 arr_result = arr_result.astype(np.float32)
   80:             exp = Index(arr_result, name=index.name)
   81: 
   82:         tm.assert_index_equal(result, exp)
   83:         if isinstance(index.dtype, np.dtype) and is_numeric_dtype(index):
   84:             if is_complex_dtype(index):
   85:                 assert result.dtype == index.dtype
   86:             elif index.dtype in ["bool", "int8", "uint8"]:
   87:                 assert result.dtype in ["float16", "float32"]
   88:             elif index.dtype in ["int16", "uint16", "float32"]:
   89:                 assert result.dtype == "float32"
   90:             else:
   91:                 assert result.dtype == "float64"
   92:         else:
   93:             # e.g. np.exp with Int64 -> Float64
   94:             assert type(result) is Index
   95:     # raise AttributeError or TypeError
   96:     elif len(index) == 0:
   97:         pass
   98:     else:
   99:         with tm.external_error_raised((TypeError, AttributeError)):
  100:             with np.errstate(all="ignore"):
  101:                 func(index)
  102: 
  103: 
  104: @pytest.mark.parametrize(
  105:     "func", [np.isfinite, np.isinf, np.isnan, np.signbit], ids=lambda x: x.__name__
  106: )
  107: def test_numpy_ufuncs_other(index, func):
  108:     # test ufuncs of numpy, see:
  109:     # https://numpy.org/doc/stable/reference/ufuncs.html
  110:     if isinstance(index, (DatetimeIndex, TimedeltaIndex)):
  111:         if func in (np.isfinite, np.isinf, np.isnan):
  112:             # numpy 1.18 changed isinf and isnan to not raise on dt64/td64
  113:             result = func(index)
  114:             assert isinstance(result, np.ndarray)
  115: 
  116:             out = np.empty(index.shape, dtype=bool)
  117:             func(index, out=out)
  118:             tm.assert_numpy_array_equal(out, result)
  119:         else:
  120:             with tm.external_error_raised(TypeError):
  121:                 func(index)
  122: 
  123:     elif isinstance(index, PeriodIndex):
  124:         with tm.external_error_raised(TypeError):
  125:             func(index)
  126: 
  127:     elif is_numeric_dtype(index) and not (
  128:         is_complex_dtype(index) and func is np.signbit
  129:     ):
  130:         # Results in bool array
  131:         result = func(index)
  132:         if not isinstance(index.dtype, np.dtype):
  133:             # e.g. Int64 we expect to get BooleanArray back
  134:             assert isinstance(result, BooleanArray)
  135:         else:
  136:             assert isinstance(result, np.ndarray)
  137: 
  138:         out = np.empty(index.shape, dtype=bool)
  139:         func(index, out=out)
  140: 
  141:         if not isinstance(index.dtype, np.dtype):
  142:             tm.assert_numpy_array_equal(out, result._data)
  143:         else:
  144:             tm.assert_numpy_array_equal(out, result)
  145: 
  146:     elif len(index) == 0:
  147:         pass
  148:     else:
  149:         with tm.external_error_raised(TypeError):
  150:             func(index)
  151: 
  152: 
  153: @pytest.mark.parametrize("func", [np.maximum, np.minimum])
  154: def test_numpy_ufuncs_reductions(index, func, request):
  155:     # TODO: overlap with tests.series.test_ufunc.test_reductions
  156:     if len(index) == 0:
  157:         pytest.skip("Test doesn't make sense for empty index.")
  158: 
  159:     if isinstance(index, CategoricalIndex) and index.dtype.ordered is False:
  160:         with pytest.raises(TypeError, match="is not ordered for"):
  161:             func.reduce(index)
  162:         return
  163:     else:
  164:         result = func.reduce(index)
  165: 
  166:     if func is np.maximum:
  167:         expected = index.max(skipna=False)
  168:     else:
  169:         expected = index.min(skipna=False)
  170:         # TODO: do we have cases both with and without NAs?
  171: 
  172:     assert type(result) is type(expected)
  173:     if isna(result):
  174:         assert isna(expected)
  175:     else:
  176:         assert result == expected
  177: 
  178: 
  179: @pytest.mark.parametrize("func", [np.bitwise_and, np.bitwise_or, np.bitwise_xor])
  180: def test_numpy_ufuncs_bitwise(func):
  181:     # https://github.com/pandas-dev/pandas/issues/46769
  182:     idx1 = Index([1, 2, 3, 4], dtype="int64")
  183:     idx2 = Index([3, 4, 5, 6], dtype="int64")
  184: 
  185:     with tm.assert_produces_warning(None):
  186:         result = func(idx1, idx2)
  187: 
  188:     expected = Index(func(idx1.values, idx2.values))
  189:     tm.assert_index_equal(result, expected)
