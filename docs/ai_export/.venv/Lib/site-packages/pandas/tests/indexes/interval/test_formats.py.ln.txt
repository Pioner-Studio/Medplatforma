    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._config import using_pyarrow_string_dtype
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     DatetimeIndex,
    9:     Index,
   10:     Interval,
   11:     IntervalIndex,
   12:     Series,
   13:     Timedelta,
   14:     Timestamp,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: class TestIntervalIndexRendering:
   20:     # TODO: this is a test for DataFrame/Series, not IntervalIndex
   21:     @pytest.mark.parametrize(
   22:         "constructor,expected",
   23:         [
   24:             (
   25:                 Series,
   26:                 (
   27:                     "(0.0, 1.0]    a\n"
   28:                     "NaN           b\n"
   29:                     "(2.0, 3.0]    c\n"
   30:                     "dtype: object"
   31:                 ),
   32:             ),
   33:             (DataFrame, ("            0\n(0.0, 1.0]  a\nNaN         b\n(2.0, 3.0]  c")),
   34:         ],
   35:     )
   36:     def test_repr_missing(self, constructor, expected, using_infer_string, request):
   37:         # GH 25984
   38:         if using_infer_string and constructor is Series:
   39:             request.applymarker(pytest.mark.xfail(reason="repr different"))
   40:         index = IntervalIndex.from_tuples([(0, 1), np.nan, (2, 3)])
   41:         obj = constructor(list("abc"), index=index)
   42:         result = repr(obj)
   43:         assert result == expected
   44: 
   45:     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
   46:     def test_repr_floats(self):
   47:         # GH 32553
   48: 
   49:         markers = Series(
   50:             ["foo", "bar"],
   51:             index=IntervalIndex(
   52:                 [
   53:                     Interval(left, right)
   54:                     for left, right in zip(
   55:                         Index([329.973, 345.137], dtype="float64"),
   56:                         Index([345.137, 360.191], dtype="float64"),
   57:                     )
   58:                 ]
   59:             ),
   60:         )
   61:         result = str(markers)
   62:         expected = "(329.973, 345.137]    foo\n(345.137, 360.191]    bar\ndtype: object"
   63:         assert result == expected
   64: 
   65:     @pytest.mark.parametrize(
   66:         "tuples, closed, expected_data",
   67:         [
   68:             ([(0, 1), (1, 2), (2, 3)], "left", ["[0, 1)", "[1, 2)", "[2, 3)"]),
   69:             (
   70:                 [(0.5, 1.0), np.nan, (2.0, 3.0)],
   71:                 "right",
   72:                 ["(0.5, 1.0]", "NaN", "(2.0, 3.0]"],
   73:             ),
   74:             (
   75:                 [
   76:                     (Timestamp("20180101"), Timestamp("20180102")),
   77:                     np.nan,
   78:                     ((Timestamp("20180102"), Timestamp("20180103"))),
   79:                 ],
   80:                 "both",
   81:                 [
   82:                     "[2018-01-01 00:00:00, 2018-01-02 00:00:00]",
   83:                     "NaN",
   84:                     "[2018-01-02 00:00:00, 2018-01-03 00:00:00]",
   85:                 ],
   86:             ),
   87:             (
   88:                 [
   89:                     (Timedelta("0 days"), Timedelta("1 days")),
   90:                     (Timedelta("1 days"), Timedelta("2 days")),
   91:                     np.nan,
   92:                 ],
   93:                 "neither",
   94:                 [
   95:                     "(0 days 00:00:00, 1 days 00:00:00)",
   96:                     "(1 days 00:00:00, 2 days 00:00:00)",
   97:                     "NaN",
   98:                 ],
   99:             ),
  100:         ],
  101:     )
  102:     def test_get_values_for_csv(self, tuples, closed, expected_data):
  103:         # GH 28210
  104:         index = IntervalIndex.from_tuples(tuples, closed=closed)
  105:         result = index._get_values_for_csv(na_rep="NaN")
  106:         expected = np.array(expected_data)
  107:         tm.assert_numpy_array_equal(result, expected)
  108: 
  109:     def test_timestamp_with_timezone(self, unit):
  110:         # GH 55035
  111:         left = DatetimeIndex(["2020-01-01"], dtype=f"M8[{unit}, UTC]")
  112:         right = DatetimeIndex(["2020-01-02"], dtype=f"M8[{unit}, UTC]")
  113:         index = IntervalIndex.from_arrays(left, right)
  114:         result = repr(index)
  115:         expected = (
  116:             "IntervalIndex([(2020-01-01 00:00:00+00:00, 2020-01-02 00:00:00+00:00]], "
  117:             f"dtype='interval[datetime64[{unit}, UTC], right]')"
  118:         )
  119:         assert result == expected
