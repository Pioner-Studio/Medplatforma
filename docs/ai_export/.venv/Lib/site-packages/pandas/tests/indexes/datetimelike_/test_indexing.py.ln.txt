    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DatetimeIndex,
    7:     Index,
    8: )
    9: import pandas._testing as tm
   10: 
   11: dtlike_dtypes = [
   12:     np.dtype("timedelta64[ns]"),
   13:     np.dtype("datetime64[ns]"),
   14:     pd.DatetimeTZDtype("ns", "Asia/Tokyo"),
   15:     pd.PeriodDtype("ns"),
   16: ]
   17: 
   18: 
   19: @pytest.mark.parametrize("ldtype", dtlike_dtypes)
   20: @pytest.mark.parametrize("rdtype", dtlike_dtypes)
   21: def test_get_indexer_non_unique_wrong_dtype(ldtype, rdtype):
   22:     vals = np.tile(3600 * 10**9 * np.arange(3), 2)
   23: 
   24:     def construct(dtype):
   25:         if dtype is dtlike_dtypes[-1]:
   26:             # PeriodArray will try to cast ints to strings
   27:             return DatetimeIndex(vals).astype(dtype)
   28:         return Index(vals, dtype=dtype)
   29: 
   30:     left = construct(ldtype)
   31:     right = construct(rdtype)
   32: 
   33:     result = left.get_indexer_non_unique(right)
   34: 
   35:     if ldtype is rdtype:
   36:         ex1 = np.array([0, 3, 1, 4, 2, 5] * 2, dtype=np.intp)
   37:         ex2 = np.array([], dtype=np.intp)
   38:         tm.assert_numpy_array_equal(result[0], ex1)
   39:         tm.assert_numpy_array_equal(result[1], ex2)
   40: 
   41:     else:
   42:         no_matches = np.array([-1] * 6, dtype=np.intp)
   43:         missing = np.arange(6, dtype=np.intp)
   44:         tm.assert_numpy_array_equal(result[0], no_matches)
   45:         tm.assert_numpy_array_equal(result[1], missing)
