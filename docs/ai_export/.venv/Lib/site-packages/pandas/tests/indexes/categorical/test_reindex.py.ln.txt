    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     CategoricalIndex,
    7:     Index,
    8:     Interval,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestReindex:
   14:     def test_reindex_list_non_unique(self):
   15:         # GH#11586
   16:         msg = "cannot reindex on an axis with duplicate labels"
   17:         ci = CategoricalIndex(["a", "b", "c", "a"])
   18:         with pytest.raises(ValueError, match=msg):
   19:             ci.reindex(["a", "c"])
   20: 
   21:     def test_reindex_categorical_non_unique(self):
   22:         msg = "cannot reindex on an axis with duplicate labels"
   23:         ci = CategoricalIndex(["a", "b", "c", "a"])
   24:         with pytest.raises(ValueError, match=msg):
   25:             ci.reindex(Categorical(["a", "c"]))
   26: 
   27:     def test_reindex_list_non_unique_unused_category(self):
   28:         msg = "cannot reindex on an axis with duplicate labels"
   29:         ci = CategoricalIndex(["a", "b", "c", "a"], categories=["a", "b", "c", "d"])
   30:         with pytest.raises(ValueError, match=msg):
   31:             ci.reindex(["a", "c"])
   32: 
   33:     def test_reindex_categorical_non_unique_unused_category(self):
   34:         msg = "cannot reindex on an axis with duplicate labels"
   35:         ci = CategoricalIndex(["a", "b", "c", "a"], categories=["a", "b", "c", "d"])
   36:         with pytest.raises(ValueError, match=msg):
   37:             ci.reindex(Categorical(["a", "c"]))
   38: 
   39:     def test_reindex_duplicate_target(self):
   40:         # See GH25459
   41:         cat = CategoricalIndex(["a", "b", "c"], categories=["a", "b", "c", "d"])
   42:         res, indexer = cat.reindex(["a", "c", "c"])
   43:         exp = Index(["a", "c", "c"])
   44:         tm.assert_index_equal(res, exp, exact=True)
   45:         tm.assert_numpy_array_equal(indexer, np.array([0, 2, 2], dtype=np.intp))
   46: 
   47:         res, indexer = cat.reindex(
   48:             CategoricalIndex(["a", "c", "c"], categories=["a", "b", "c", "d"])
   49:         )
   50:         exp = CategoricalIndex(["a", "c", "c"], categories=["a", "b", "c", "d"])
   51:         tm.assert_index_equal(res, exp, exact=True)
   52:         tm.assert_numpy_array_equal(indexer, np.array([0, 2, 2], dtype=np.intp))
   53: 
   54:     def test_reindex_empty_index(self):
   55:         # See GH16770
   56:         c = CategoricalIndex([])
   57:         res, indexer = c.reindex(["a", "b"])
   58:         tm.assert_index_equal(res, Index(["a", "b"]), exact=True)
   59:         tm.assert_numpy_array_equal(indexer, np.array([-1, -1], dtype=np.intp))
   60: 
   61:     def test_reindex_categorical_added_category(self):
   62:         # GH 42424
   63:         ci = CategoricalIndex(
   64:             [Interval(0, 1, closed="right"), Interval(1, 2, closed="right")],
   65:             ordered=True,
   66:         )
   67:         ci_add = CategoricalIndex(
   68:             [
   69:                 Interval(0, 1, closed="right"),
   70:                 Interval(1, 2, closed="right"),
   71:                 Interval(2, 3, closed="right"),
   72:                 Interval(3, 4, closed="right"),
   73:             ],
   74:             ordered=True,
   75:         )
   76:         result, _ = ci.reindex(ci_add)
   77:         expected = ci_add
   78:         tm.assert_index_equal(expected, result)
