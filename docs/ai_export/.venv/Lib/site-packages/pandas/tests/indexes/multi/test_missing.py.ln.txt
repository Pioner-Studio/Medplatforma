    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import MultiIndex
    6: import pandas._testing as tm
    7: 
    8: 
    9: def test_fillna(idx):
   10:     # GH 11343
   11:     msg = "isna is not defined for MultiIndex"
   12:     with pytest.raises(NotImplementedError, match=msg):
   13:         idx.fillna(idx[0])
   14: 
   15: 
   16: def test_dropna():
   17:     # GH 6194
   18:     idx = MultiIndex.from_arrays(
   19:         [
   20:             [1, np.nan, 3, np.nan, 5],
   21:             [1, 2, np.nan, np.nan, 5],
   22:             ["a", "b", "c", np.nan, "e"],
   23:         ]
   24:     )
   25: 
   26:     exp = MultiIndex.from_arrays([[1, 5], [1, 5], ["a", "e"]])
   27:     tm.assert_index_equal(idx.dropna(), exp)
   28:     tm.assert_index_equal(idx.dropna(how="any"), exp)
   29: 
   30:     exp = MultiIndex.from_arrays(
   31:         [[1, np.nan, 3, 5], [1, 2, np.nan, 5], ["a", "b", "c", "e"]]
   32:     )
   33:     tm.assert_index_equal(idx.dropna(how="all"), exp)
   34: 
   35:     msg = "invalid how option: xxx"
   36:     with pytest.raises(ValueError, match=msg):
   37:         idx.dropna(how="xxx")
   38: 
   39:     # GH26408
   40:     # test if missing values are dropped for multiindex constructed
   41:     # from codes and values
   42:     idx = MultiIndex(
   43:         levels=[[np.nan, None, pd.NaT, "128", 2], [np.nan, None, pd.NaT, "128", 2]],
   44:         codes=[[0, -1, 1, 2, 3, 4], [0, -1, 3, 3, 3, 4]],
   45:     )
   46:     expected = MultiIndex.from_arrays([["128", 2], ["128", 2]])
   47:     tm.assert_index_equal(idx.dropna(), expected)
   48:     tm.assert_index_equal(idx.dropna(how="any"), expected)
   49: 
   50:     expected = MultiIndex.from_arrays(
   51:         [[np.nan, np.nan, "128", 2], ["128", "128", "128", 2]]
   52:     )
   53:     tm.assert_index_equal(idx.dropna(how="all"), expected)
   54: 
   55: 
   56: def test_nulls(idx):
   57:     # this is really a smoke test for the methods
   58:     # as these are adequately tested for function elsewhere
   59: 
   60:     msg = "isna is not defined for MultiIndex"
   61:     with pytest.raises(NotImplementedError, match=msg):
   62:         idx.isna()
   63: 
   64: 
   65: @pytest.mark.xfail(reason="isna is not defined for MultiIndex")
   66: def test_hasnans_isnans(idx):
   67:     # GH 11343, added tests for hasnans / isnans
   68:     index = idx.copy()
   69: 
   70:     # cases in indices doesn't include NaN
   71:     expected = np.array([False] * len(index), dtype=bool)
   72:     tm.assert_numpy_array_equal(index._isnan, expected)
   73:     assert index.hasnans is False
   74: 
   75:     index = idx.copy()
   76:     values = index.values
   77:     values[1] = np.nan
   78: 
   79:     index = type(idx)(values)
   80: 
   81:     expected = np.array([False] * len(index), dtype=bool)
   82:     expected[1] = True
   83:     tm.assert_numpy_array_equal(index._isnan, expected)
   84:     assert index.hasnans is True
   85: 
   86: 
   87: def test_nan_stays_float():
   88:     # GH 7031
   89:     idx0 = MultiIndex(levels=[["A", "B"], []], codes=[[1, 0], [-1, -1]], names=[0, 1])
   90:     idx1 = MultiIndex(levels=[["C"], ["D"]], codes=[[0], [0]], names=[0, 1])
   91:     idxm = idx0.join(idx1, how="outer")
   92:     assert pd.isna(idx0.get_level_values(1)).all()
   93:     # the following failed in 0.14.1
   94:     assert pd.isna(idxm.get_level_values(1)[:-1]).all()
   95: 
   96:     df0 = pd.DataFrame([[1, 2]], index=idx0)
   97:     df1 = pd.DataFrame([[3, 4]], index=idx1)
   98:     dfm = df0 - df1
   99:     assert pd.isna(df0.index.get_level_values(1)).all()
  100:     # the following failed in 0.14.1
  101:     assert pd.isna(dfm.index.get_level_values(1)[:-1]).all()
  102: 
  103: 
  104: def test_tuples_have_na():
  105:     index = MultiIndex(
  106:         levels=[[1, 0], [0, 1, 2, 3]],
  107:         codes=[[1, 1, 1, 1, -1, 0, 0, 0], [0, 1, 2, 3, 0, 1, 2, 3]],
  108:     )
  109: 
  110:     assert pd.isna(index[4][0])
  111:     assert pd.isna(index.values[4][0])
