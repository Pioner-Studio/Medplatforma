    1: from datetime import datetime
    2: 
    3: import pytest
    4: import pytz
    5: 
    6: from pandas.errors import NullFrequencyError
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DatetimeIndex,
   11:     Series,
   12:     date_range,
   13: )
   14: import pandas._testing as tm
   15: 
   16: START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
   17: 
   18: 
   19: class TestDatetimeIndexShift:
   20:     # -------------------------------------------------------------
   21:     # DatetimeIndex.shift is used in integer addition
   22: 
   23:     def test_dti_shift_tzaware(self, tz_naive_fixture, unit):
   24:         # GH#9903
   25:         tz = tz_naive_fixture
   26:         idx = DatetimeIndex([], name="xxx", tz=tz).as_unit(unit)
   27:         tm.assert_index_equal(idx.shift(0, freq="h"), idx)
   28:         tm.assert_index_equal(idx.shift(3, freq="h"), idx)
   29: 
   30:         idx = DatetimeIndex(
   31:             ["2011-01-01 10:00", "2011-01-01 11:00", "2011-01-01 12:00"],
   32:             name="xxx",
   33:             tz=tz,
   34:             freq="h",
   35:         ).as_unit(unit)
   36:         tm.assert_index_equal(idx.shift(0, freq="h"), idx)
   37:         exp = DatetimeIndex(
   38:             ["2011-01-01 13:00", "2011-01-01 14:00", "2011-01-01 15:00"],
   39:             name="xxx",
   40:             tz=tz,
   41:             freq="h",
   42:         ).as_unit(unit)
   43:         tm.assert_index_equal(idx.shift(3, freq="h"), exp)
   44:         exp = DatetimeIndex(
   45:             ["2011-01-01 07:00", "2011-01-01 08:00", "2011-01-01 09:00"],
   46:             name="xxx",
   47:             tz=tz,
   48:             freq="h",
   49:         ).as_unit(unit)
   50:         tm.assert_index_equal(idx.shift(-3, freq="h"), exp)
   51: 
   52:     def test_dti_shift_freqs(self, unit):
   53:         # test shift for DatetimeIndex and non DatetimeIndex
   54:         # GH#8083
   55:         drange = date_range("20130101", periods=5, unit=unit)
   56:         result = drange.shift(1)
   57:         expected = DatetimeIndex(
   58:             ["2013-01-02", "2013-01-03", "2013-01-04", "2013-01-05", "2013-01-06"],
   59:             dtype=f"M8[{unit}]",
   60:             freq="D",
   61:         )
   62:         tm.assert_index_equal(result, expected)
   63: 
   64:         result = drange.shift(-1)
   65:         expected = DatetimeIndex(
   66:             ["2012-12-31", "2013-01-01", "2013-01-02", "2013-01-03", "2013-01-04"],
   67:             dtype=f"M8[{unit}]",
   68:             freq="D",
   69:         )
   70:         tm.assert_index_equal(result, expected)
   71: 
   72:         result = drange.shift(3, freq="2D")
   73:         expected = DatetimeIndex(
   74:             ["2013-01-07", "2013-01-08", "2013-01-09", "2013-01-10", "2013-01-11"],
   75:             dtype=f"M8[{unit}]",
   76:             freq="D",
   77:         )
   78:         tm.assert_index_equal(result, expected)
   79: 
   80:     def test_dti_shift_int(self, unit):
   81:         rng = date_range("1/1/2000", periods=20, unit=unit)
   82: 
   83:         result = rng + 5 * rng.freq
   84:         expected = rng.shift(5)
   85:         tm.assert_index_equal(result, expected)
   86: 
   87:         result = rng - 5 * rng.freq
   88:         expected = rng.shift(-5)
   89:         tm.assert_index_equal(result, expected)
   90: 
   91:     def test_dti_shift_no_freq(self, unit):
   92:         # GH#19147
   93:         dti = DatetimeIndex(["2011-01-01 10:00", "2011-01-01"], freq=None).as_unit(unit)
   94:         with pytest.raises(NullFrequencyError, match="Cannot shift with no freq"):
   95:             dti.shift(2)
   96: 
   97:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
   98:     def test_dti_shift_localized(self, tzstr, unit):
   99:         dr = date_range("2011/1/1", "2012/1/1", freq="W-FRI", unit=unit)
  100:         dr_tz = dr.tz_localize(tzstr)
  101: 
  102:         result = dr_tz.shift(1, "10min")
  103:         assert result.tz == dr_tz.tz
  104: 
  105:     def test_dti_shift_across_dst(self, unit):
  106:         # GH 8616
  107:         idx = date_range(
  108:             "2013-11-03", tz="America/Chicago", periods=7, freq="h", unit=unit
  109:         )
  110:         ser = Series(index=idx[:-1], dtype=object)
  111:         result = ser.shift(freq="h")
  112:         expected = Series(index=idx[1:], dtype=object)
  113:         tm.assert_series_equal(result, expected)
  114: 
  115:     @pytest.mark.parametrize(
  116:         "shift, result_time",
  117:         [
  118:             [0, "2014-11-14 00:00:00"],
  119:             [-1, "2014-11-13 23:00:00"],
  120:             [1, "2014-11-14 01:00:00"],
  121:         ],
  122:     )
  123:     def test_dti_shift_near_midnight(self, shift, result_time, unit):
  124:         # GH 8616
  125:         dt = datetime(2014, 11, 14, 0)
  126:         dt_est = pytz.timezone("EST").localize(dt)
  127:         idx = DatetimeIndex([dt_est]).as_unit(unit)
  128:         ser = Series(data=[1], index=idx)
  129:         result = ser.shift(shift, freq="h")
  130:         exp_index = DatetimeIndex([result_time], tz="EST").as_unit(unit)
  131:         expected = Series(1, index=exp_index)
  132:         tm.assert_series_equal(result, expected)
  133: 
  134:     def test_shift_periods(self, unit):
  135:         # GH#22458 : argument 'n' was deprecated in favor of 'periods'
  136:         idx = date_range(start=START, end=END, periods=3, unit=unit)
  137:         tm.assert_index_equal(idx.shift(periods=0), idx)
  138:         tm.assert_index_equal(idx.shift(0), idx)
  139: 
  140:     @pytest.mark.parametrize("freq", ["B", "C"])
  141:     def test_shift_bday(self, freq, unit):
  142:         rng = date_range(START, END, freq=freq, unit=unit)
  143:         shifted = rng.shift(5)
  144:         assert shifted[0] == rng[5]
  145:         assert shifted.freq == rng.freq
  146: 
  147:         shifted = rng.shift(-5)
  148:         assert shifted[5] == rng[0]
  149:         assert shifted.freq == rng.freq
  150: 
  151:         shifted = rng.shift(0)
  152:         assert shifted[0] == rng[0]
  153:         assert shifted.freq == rng.freq
  154: 
  155:     def test_shift_bmonth(self, unit):
  156:         rng = date_range(START, END, freq=pd.offsets.BMonthEnd(), unit=unit)
  157:         shifted = rng.shift(1, freq=pd.offsets.BDay())
  158:         assert shifted[0] == rng[0] + pd.offsets.BDay()
  159: 
  160:         rng = date_range(START, END, freq=pd.offsets.BMonthEnd(), unit=unit)
  161:         with tm.assert_produces_warning(pd.errors.PerformanceWarning):
  162:             shifted = rng.shift(1, freq=pd.offsets.CDay())
  163:             assert shifted[0] == rng[0] + pd.offsets.CDay()
  164: 
  165:     def test_shift_empty(self, unit):
  166:         # GH#14811
  167:         dti = date_range(start="2016-10-21", end="2016-10-21", freq="BME", unit=unit)
  168:         result = dti.shift(1)
  169:         tm.assert_index_equal(result, dti)
