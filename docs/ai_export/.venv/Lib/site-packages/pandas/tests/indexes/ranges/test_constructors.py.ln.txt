    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     Index,
    8:     RangeIndex,
    9:     Series,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestRangeIndexConstructors:
   15:     @pytest.mark.parametrize("name", [None, "foo"])
   16:     @pytest.mark.parametrize(
   17:         "args, kwargs, start, stop, step",
   18:         [
   19:             ((5,), {}, 0, 5, 1),
   20:             ((1, 5), {}, 1, 5, 1),
   21:             ((1, 5, 2), {}, 1, 5, 2),
   22:             ((0,), {}, 0, 0, 1),
   23:             ((0, 0), {}, 0, 0, 1),
   24:             ((), {"start": 0}, 0, 0, 1),
   25:             ((), {"stop": 0}, 0, 0, 1),
   26:         ],
   27:     )
   28:     def test_constructor(self, args, kwargs, start, stop, step, name):
   29:         result = RangeIndex(*args, name=name, **kwargs)
   30:         expected = Index(np.arange(start, stop, step, dtype=np.int64), name=name)
   31:         assert isinstance(result, RangeIndex)
   32:         assert result.name is name
   33:         assert result._range == range(start, stop, step)
   34:         tm.assert_index_equal(result, expected, exact="equiv")
   35: 
   36:     def test_constructor_invalid_args(self):
   37:         msg = "RangeIndex\\(\\.\\.\\.\\) must be called with integers"
   38:         with pytest.raises(TypeError, match=msg):
   39:             RangeIndex()
   40: 
   41:         with pytest.raises(TypeError, match=msg):
   42:             RangeIndex(name="Foo")
   43: 
   44:         # we don't allow on a bare Index
   45:         msg = (
   46:             r"Index\(\.\.\.\) must be called with a collection of some "
   47:             r"kind, 0 was passed"
   48:         )
   49:         with pytest.raises(TypeError, match=msg):
   50:             Index(0)
   51: 
   52:     @pytest.mark.parametrize(
   53:         "args",
   54:         [
   55:             Index(["a", "b"]),
   56:             Series(["a", "b"]),
   57:             np.array(["a", "b"]),
   58:             [],
   59:             np.arange(0, 10),
   60:             np.array([1]),
   61:             [1],
   62:         ],
   63:     )
   64:     def test_constructor_additional_invalid_args(self, args):
   65:         msg = f"Value needs to be a scalar value, was type {type(args).__name__}"
   66:         with pytest.raises(TypeError, match=msg):
   67:             RangeIndex(args)
   68: 
   69:     @pytest.mark.parametrize("args", ["foo", datetime(2000, 1, 1, 0, 0)])
   70:     def test_constructor_invalid_args_wrong_type(self, args):
   71:         msg = f"Wrong type {type(args)} for value {args}"
   72:         with pytest.raises(TypeError, match=msg):
   73:             RangeIndex(args)
   74: 
   75:     def test_constructor_same(self):
   76:         # pass thru w and w/o copy
   77:         index = RangeIndex(1, 5, 2)
   78:         result = RangeIndex(index, copy=False)
   79:         assert result.identical(index)
   80: 
   81:         result = RangeIndex(index, copy=True)
   82:         tm.assert_index_equal(result, index, exact=True)
   83: 
   84:         result = RangeIndex(index)
   85:         tm.assert_index_equal(result, index, exact=True)
   86: 
   87:         with pytest.raises(
   88:             ValueError,
   89:             match="Incorrect `dtype` passed: expected signed integer, received float64",
   90:         ):
   91:             RangeIndex(index, dtype="float64")
   92: 
   93:     def test_constructor_range_object(self):
   94:         result = RangeIndex(range(1, 5, 2))
   95:         expected = RangeIndex(1, 5, 2)
   96:         tm.assert_index_equal(result, expected, exact=True)
   97: 
   98:     def test_constructor_range(self):
   99:         result = RangeIndex.from_range(range(1, 5, 2))
  100:         expected = RangeIndex(1, 5, 2)
  101:         tm.assert_index_equal(result, expected, exact=True)
  102: 
  103:         result = RangeIndex.from_range(range(5, 6))
  104:         expected = RangeIndex(5, 6, 1)
  105:         tm.assert_index_equal(result, expected, exact=True)
  106: 
  107:         # an invalid range
  108:         result = RangeIndex.from_range(range(5, 1))
  109:         expected = RangeIndex(0, 0, 1)
  110:         tm.assert_index_equal(result, expected, exact=True)
  111: 
  112:         result = RangeIndex.from_range(range(5))
  113:         expected = RangeIndex(0, 5, 1)
  114:         tm.assert_index_equal(result, expected, exact=True)
  115: 
  116:         result = Index(range(1, 5, 2))
  117:         expected = RangeIndex(1, 5, 2)
  118:         tm.assert_index_equal(result, expected, exact=True)
  119: 
  120:         msg = (
  121:             r"(RangeIndex.)?from_range\(\) got an unexpected keyword argument( 'copy')?"
  122:         )
  123:         with pytest.raises(TypeError, match=msg):
  124:             RangeIndex.from_range(range(10), copy=True)
  125: 
  126:     def test_constructor_name(self):
  127:         # GH#12288
  128:         orig = RangeIndex(10)
  129:         orig.name = "original"
  130: 
  131:         copy = RangeIndex(orig)
  132:         copy.name = "copy"
  133: 
  134:         assert orig.name == "original"
  135:         assert copy.name == "copy"
  136: 
  137:         new = Index(copy)
  138:         assert new.name == "copy"
  139: 
  140:         new.name = "new"
  141:         assert orig.name == "original"
  142:         assert copy.name == "copy"
  143:         assert new.name == "new"
  144: 
  145:     def test_constructor_corner(self):
  146:         arr = np.array([1, 2, 3, 4], dtype=object)
  147:         index = RangeIndex(1, 5)
  148:         assert index.values.dtype == np.int64
  149:         expected = Index(arr).astype("int64")
  150: 
  151:         tm.assert_index_equal(index, expected, exact="equiv")
  152: 
  153:         # non-int raise Exception
  154:         with pytest.raises(TypeError, match=r"Wrong type \<class 'str'\>"):
  155:             RangeIndex("1", "10", "1")
  156:         with pytest.raises(TypeError, match=r"Wrong type \<class 'float'\>"):
  157:             RangeIndex(1.1, 10.2, 1.3)
  158: 
  159:         # invalid passed type
  160:         with pytest.raises(
  161:             ValueError,
  162:             match="Incorrect `dtype` passed: expected signed integer, received float64",
  163:         ):
  164:             RangeIndex(1, 5, dtype="float64")
