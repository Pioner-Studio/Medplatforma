    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     PeriodIndex,
    6:     Series,
    7:     date_range,
    8:     period_range,
    9:     timedelta_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class DropDuplicates:
   15:     def test_drop_duplicates_metadata(self, idx):
   16:         # GH#10115
   17:         result = idx.drop_duplicates()
   18:         tm.assert_index_equal(idx, result)
   19:         assert idx.freq == result.freq
   20: 
   21:         idx_dup = idx.append(idx)
   22:         result = idx_dup.drop_duplicates()
   23: 
   24:         expected = idx
   25:         if not isinstance(idx, PeriodIndex):
   26:             # freq is reset except for PeriodIndex
   27:             assert idx_dup.freq is None
   28:             assert result.freq is None
   29:             expected = idx._with_freq(None)
   30:         else:
   31:             assert result.freq == expected.freq
   32: 
   33:         tm.assert_index_equal(result, expected)
   34: 
   35:     @pytest.mark.parametrize(
   36:         "keep, expected, index",
   37:         [
   38:             (
   39:                 "first",
   40:                 np.concatenate(([False] * 10, [True] * 5)),
   41:                 np.arange(0, 10, dtype=np.int64),
   42:             ),
   43:             (
   44:                 "last",
   45:                 np.concatenate(([True] * 5, [False] * 10)),
   46:                 np.arange(5, 15, dtype=np.int64),
   47:             ),
   48:             (
   49:                 False,
   50:                 np.concatenate(([True] * 5, [False] * 5, [True] * 5)),
   51:                 np.arange(5, 10, dtype=np.int64),
   52:             ),
   53:         ],
   54:     )
   55:     def test_drop_duplicates(self, keep, expected, index, idx):
   56:         # to check Index/Series compat
   57:         idx = idx.append(idx[:5])
   58: 
   59:         tm.assert_numpy_array_equal(idx.duplicated(keep=keep), expected)
   60:         expected = idx[~expected]
   61: 
   62:         result = idx.drop_duplicates(keep=keep)
   63:         tm.assert_index_equal(result, expected)
   64: 
   65:         result = Series(idx).drop_duplicates(keep=keep)
   66:         expected = Series(expected, index=index)
   67:         tm.assert_series_equal(result, expected)
   68: 
   69: 
   70: class TestDropDuplicatesPeriodIndex(DropDuplicates):
   71:     @pytest.fixture(params=["D", "3D", "h", "2h", "min", "2min", "s", "3s"])
   72:     def freq(self, request):
   73:         return request.param
   74: 
   75:     @pytest.fixture
   76:     def idx(self, freq):
   77:         return period_range("2011-01-01", periods=10, freq=freq, name="idx")
   78: 
   79: 
   80: class TestDropDuplicatesDatetimeIndex(DropDuplicates):
   81:     @pytest.fixture
   82:     def idx(self, freq_sample):
   83:         return date_range("2011-01-01", freq=freq_sample, periods=10, name="idx")
   84: 
   85: 
   86: class TestDropDuplicatesTimedeltaIndex(DropDuplicates):
   87:     @pytest.fixture
   88:     def idx(self, freq_sample):
   89:         return timedelta_range("1 day", periods=10, freq=freq_sample, name="idx")
