    1: import numpy as np
    2: 
    3: from pandas import (
    4:     Index,
    5:     RangeIndex,
    6: )
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestJoin:
   11:     def test_join_outer(self):
   12:         # join with Index[int64]
   13:         index = RangeIndex(start=0, stop=20, step=2)
   14:         other = Index(np.arange(25, 14, -1, dtype=np.int64))
   15: 
   16:         res, lidx, ridx = index.join(other, how="outer", return_indexers=True)
   17:         noidx_res = index.join(other, how="outer")
   18:         tm.assert_index_equal(res, noidx_res)
   19: 
   20:         eres = Index(
   21:             [0, 2, 4, 6, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]
   22:         )
   23:         elidx = np.array(
   24:             [0, 1, 2, 3, 4, 5, 6, 7, -1, 8, -1, 9, -1, -1, -1, -1, -1, -1, -1],
   25:             dtype=np.intp,
   26:         )
   27:         eridx = np.array(
   28:             [-1, -1, -1, -1, -1, -1, -1, -1, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
   29:             dtype=np.intp,
   30:         )
   31: 
   32:         assert isinstance(res, Index) and res.dtype == np.dtype(np.int64)
   33:         assert not isinstance(res, RangeIndex)
   34:         tm.assert_index_equal(res, eres, exact=True)
   35:         tm.assert_numpy_array_equal(lidx, elidx)
   36:         tm.assert_numpy_array_equal(ridx, eridx)
   37: 
   38:         # join with RangeIndex
   39:         other = RangeIndex(25, 14, -1)
   40: 
   41:         res, lidx, ridx = index.join(other, how="outer", return_indexers=True)
   42:         noidx_res = index.join(other, how="outer")
   43:         tm.assert_index_equal(res, noidx_res)
   44: 
   45:         assert isinstance(res, Index) and res.dtype == np.int64
   46:         assert not isinstance(res, RangeIndex)
   47:         tm.assert_index_equal(res, eres)
   48:         tm.assert_numpy_array_equal(lidx, elidx)
   49:         tm.assert_numpy_array_equal(ridx, eridx)
   50: 
   51:     def test_join_inner(self):
   52:         # Join with non-RangeIndex
   53:         index = RangeIndex(start=0, stop=20, step=2)
   54:         other = Index(np.arange(25, 14, -1, dtype=np.int64))
   55: 
   56:         res, lidx, ridx = index.join(other, how="inner", return_indexers=True)
   57: 
   58:         # no guarantee of sortedness, so sort for comparison purposes
   59:         ind = res.argsort()
   60:         res = res.take(ind)
   61:         lidx = lidx.take(ind)
   62:         ridx = ridx.take(ind)
   63: 
   64:         eres = Index([16, 18])
   65:         elidx = np.array([8, 9], dtype=np.intp)
   66:         eridx = np.array([9, 7], dtype=np.intp)
   67: 
   68:         assert isinstance(res, Index) and res.dtype == np.int64
   69:         tm.assert_index_equal(res, eres)
   70:         tm.assert_numpy_array_equal(lidx, elidx)
   71:         tm.assert_numpy_array_equal(ridx, eridx)
   72: 
   73:         # Join two RangeIndex
   74:         other = RangeIndex(25, 14, -1)
   75: 
   76:         res, lidx, ridx = index.join(other, how="inner", return_indexers=True)
   77: 
   78:         assert isinstance(res, RangeIndex)
   79:         tm.assert_index_equal(res, eres, exact="equiv")
   80:         tm.assert_numpy_array_equal(lidx, elidx)
   81:         tm.assert_numpy_array_equal(ridx, eridx)
   82: 
   83:     def test_join_left(self):
   84:         # Join with Index[int64]
   85:         index = RangeIndex(start=0, stop=20, step=2)
   86:         other = Index(np.arange(25, 14, -1, dtype=np.int64))
   87: 
   88:         res, lidx, ridx = index.join(other, how="left", return_indexers=True)
   89:         eres = index
   90:         eridx = np.array([-1, -1, -1, -1, -1, -1, -1, -1, 9, 7], dtype=np.intp)
   91: 
   92:         assert isinstance(res, RangeIndex)
   93:         tm.assert_index_equal(res, eres)
   94:         assert lidx is None
   95:         tm.assert_numpy_array_equal(ridx, eridx)
   96: 
   97:         # Join withRangeIndex
   98:         other = Index(np.arange(25, 14, -1, dtype=np.int64))
   99: 
  100:         res, lidx, ridx = index.join(other, how="left", return_indexers=True)
  101: 
  102:         assert isinstance(res, RangeIndex)
  103:         tm.assert_index_equal(res, eres)
  104:         assert lidx is None
  105:         tm.assert_numpy_array_equal(ridx, eridx)
  106: 
  107:     def test_join_right(self):
  108:         # Join with Index[int64]
  109:         index = RangeIndex(start=0, stop=20, step=2)
  110:         other = Index(np.arange(25, 14, -1, dtype=np.int64))
  111: 
  112:         res, lidx, ridx = index.join(other, how="right", return_indexers=True)
  113:         eres = other
  114:         elidx = np.array([-1, -1, -1, -1, -1, -1, -1, 9, -1, 8, -1], dtype=np.intp)
  115: 
  116:         assert isinstance(other, Index) and other.dtype == np.int64
  117:         tm.assert_index_equal(res, eres)
  118:         tm.assert_numpy_array_equal(lidx, elidx)
  119:         assert ridx is None
  120: 
  121:         # Join withRangeIndex
  122:         other = RangeIndex(25, 14, -1)
  123: 
  124:         res, lidx, ridx = index.join(other, how="right", return_indexers=True)
  125:         eres = other
  126: 
  127:         assert isinstance(other, RangeIndex)
  128:         tm.assert_index_equal(res, eres)
  129:         tm.assert_numpy_array_equal(lidx, elidx)
  130:         assert ridx is None
  131: 
  132:     def test_join_non_int_index(self):
  133:         index = RangeIndex(start=0, stop=20, step=2)
  134:         other = Index([3, 6, 7, 8, 10], dtype=object)
  135: 
  136:         outer = index.join(other, how="outer")
  137:         outer2 = other.join(index, how="outer")
  138:         expected = Index([0, 2, 3, 4, 6, 7, 8, 10, 12, 14, 16, 18])
  139:         tm.assert_index_equal(outer, outer2)
  140:         tm.assert_index_equal(outer, expected)
  141: 
  142:         inner = index.join(other, how="inner")
  143:         inner2 = other.join(index, how="inner")
  144:         expected = Index([6, 8, 10])
  145:         tm.assert_index_equal(inner, inner2)
  146:         tm.assert_index_equal(inner, expected)
  147: 
  148:         left = index.join(other, how="left")
  149:         tm.assert_index_equal(left, index.astype(object))
  150: 
  151:         left2 = other.join(index, how="left")
  152:         tm.assert_index_equal(left2, other)
  153: 
  154:         right = index.join(other, how="right")
  155:         tm.assert_index_equal(right, other)
  156: 
  157:         right2 = other.join(index, how="right")
  158:         tm.assert_index_equal(right2, index.astype(object))
  159: 
  160:     def test_join_non_unique(self):
  161:         index = RangeIndex(start=0, stop=20, step=2)
  162:         other = Index([4, 4, 3, 3])
  163: 
  164:         res, lidx, ridx = index.join(other, return_indexers=True)
  165: 
  166:         eres = Index([0, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18])
  167:         elidx = np.array([0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.intp)
  168:         eridx = np.array([-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1], dtype=np.intp)
  169: 
  170:         tm.assert_index_equal(res, eres)
  171:         tm.assert_numpy_array_equal(lidx, elidx)
  172:         tm.assert_numpy_array_equal(ridx, eridx)
  173: 
  174:     def test_join_self(self, join_type):
  175:         index = RangeIndex(start=0, stop=20, step=2)
  176:         joined = index.join(index, how=join_type)
  177:         assert index is joined
