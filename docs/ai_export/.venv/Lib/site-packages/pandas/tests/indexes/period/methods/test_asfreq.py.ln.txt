    1: import re
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     PeriodIndex,
    7:     Series,
    8:     period_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: from pandas.tseries import offsets
   13: 
   14: 
   15: class TestPeriodIndex:
   16:     def test_asfreq(self):
   17:         pi1 = period_range(freq="Y", start="1/1/2001", end="1/1/2001")
   18:         pi2 = period_range(freq="Q", start="1/1/2001", end="1/1/2001")
   19:         pi3 = period_range(freq="M", start="1/1/2001", end="1/1/2001")
   20:         pi4 = period_range(freq="D", start="1/1/2001", end="1/1/2001")
   21:         pi5 = period_range(freq="h", start="1/1/2001", end="1/1/2001 00:00")
   22:         pi6 = period_range(freq="Min", start="1/1/2001", end="1/1/2001 00:00")
   23:         pi7 = period_range(freq="s", start="1/1/2001", end="1/1/2001 00:00:00")
   24: 
   25:         assert pi1.asfreq("Q", "s") == pi2
   26:         assert pi1.asfreq("Q", "s") == pi2
   27:         assert pi1.asfreq("M", "start") == pi3
   28:         assert pi1.asfreq("D", "StarT") == pi4
   29:         assert pi1.asfreq("h", "beGIN") == pi5
   30:         assert pi1.asfreq("Min", "s") == pi6
   31:         assert pi1.asfreq("s", "s") == pi7
   32: 
   33:         assert pi2.asfreq("Y", "s") == pi1
   34:         assert pi2.asfreq("M", "s") == pi3
   35:         assert pi2.asfreq("D", "s") == pi4
   36:         assert pi2.asfreq("h", "s") == pi5
   37:         assert pi2.asfreq("Min", "s") == pi6
   38:         assert pi2.asfreq("s", "s") == pi7
   39: 
   40:         assert pi3.asfreq("Y", "s") == pi1
   41:         assert pi3.asfreq("Q", "s") == pi2
   42:         assert pi3.asfreq("D", "s") == pi4
   43:         assert pi3.asfreq("h", "s") == pi5
   44:         assert pi3.asfreq("Min", "s") == pi6
   45:         assert pi3.asfreq("s", "s") == pi7
   46: 
   47:         assert pi4.asfreq("Y", "s") == pi1
   48:         assert pi4.asfreq("Q", "s") == pi2
   49:         assert pi4.asfreq("M", "s") == pi3
   50:         assert pi4.asfreq("h", "s") == pi5
   51:         assert pi4.asfreq("Min", "s") == pi6
   52:         assert pi4.asfreq("s", "s") == pi7
   53: 
   54:         assert pi5.asfreq("Y", "s") == pi1
   55:         assert pi5.asfreq("Q", "s") == pi2
   56:         assert pi5.asfreq("M", "s") == pi3
   57:         assert pi5.asfreq("D", "s") == pi4
   58:         assert pi5.asfreq("Min", "s") == pi6
   59:         assert pi5.asfreq("s", "s") == pi7
   60: 
   61:         assert pi6.asfreq("Y", "s") == pi1
   62:         assert pi6.asfreq("Q", "s") == pi2
   63:         assert pi6.asfreq("M", "s") == pi3
   64:         assert pi6.asfreq("D", "s") == pi4
   65:         assert pi6.asfreq("h", "s") == pi5
   66:         assert pi6.asfreq("s", "s") == pi7
   67: 
   68:         assert pi7.asfreq("Y", "s") == pi1
   69:         assert pi7.asfreq("Q", "s") == pi2
   70:         assert pi7.asfreq("M", "s") == pi3
   71:         assert pi7.asfreq("D", "s") == pi4
   72:         assert pi7.asfreq("h", "s") == pi5
   73:         assert pi7.asfreq("Min", "s") == pi6
   74: 
   75:         msg = "How must be one of S or E"
   76:         with pytest.raises(ValueError, match=msg):
   77:             pi7.asfreq("T", "foo")
   78:         result1 = pi1.asfreq("3M")
   79:         result2 = pi1.asfreq("M")
   80:         expected = period_range(freq="M", start="2001-12", end="2001-12")
   81:         tm.assert_numpy_array_equal(result1.asi8, expected.asi8)
   82:         assert result1.freqstr == "3M"
   83:         tm.assert_numpy_array_equal(result2.asi8, expected.asi8)
   84:         assert result2.freqstr == "M"
   85: 
   86:     def test_asfreq_nat(self):
   87:         idx = PeriodIndex(["2011-01", "2011-02", "NaT", "2011-04"], freq="M")
   88:         result = idx.asfreq(freq="Q")
   89:         expected = PeriodIndex(["2011Q1", "2011Q1", "NaT", "2011Q2"], freq="Q")
   90:         tm.assert_index_equal(result, expected)
   91: 
   92:     @pytest.mark.parametrize("freq", ["D", "3D"])
   93:     def test_asfreq_mult_pi(self, freq):
   94:         pi = PeriodIndex(["2001-01", "2001-02", "NaT", "2001-03"], freq="2M")
   95: 
   96:         result = pi.asfreq(freq)
   97:         exp = PeriodIndex(["2001-02-28", "2001-03-31", "NaT", "2001-04-30"], freq=freq)
   98:         tm.assert_index_equal(result, exp)
   99:         assert result.freq == exp.freq
  100: 
  101:         result = pi.asfreq(freq, how="S")
  102:         exp = PeriodIndex(["2001-01-01", "2001-02-01", "NaT", "2001-03-01"], freq=freq)
  103:         tm.assert_index_equal(result, exp)
  104:         assert result.freq == exp.freq
  105: 
  106:     def test_asfreq_combined_pi(self):
  107:         pi = PeriodIndex(["2001-01-01 00:00", "2001-01-02 02:00", "NaT"], freq="h")
  108:         exp = PeriodIndex(["2001-01-01 00:00", "2001-01-02 02:00", "NaT"], freq="25h")
  109:         for freq, how in zip(["1D1h", "1h1D"], ["S", "E"]):
  110:             result = pi.asfreq(freq, how=how)
  111:             tm.assert_index_equal(result, exp)
  112:             assert result.freq == exp.freq
  113: 
  114:         for freq in ["1D1h", "1h1D"]:
  115:             pi = PeriodIndex(["2001-01-01 00:00", "2001-01-02 02:00", "NaT"], freq=freq)
  116:             result = pi.asfreq("h")
  117:             exp = PeriodIndex(["2001-01-02 00:00", "2001-01-03 02:00", "NaT"], freq="h")
  118:             tm.assert_index_equal(result, exp)
  119:             assert result.freq == exp.freq
  120: 
  121:             pi = PeriodIndex(["2001-01-01 00:00", "2001-01-02 02:00", "NaT"], freq=freq)
  122:             result = pi.asfreq("h", how="S")
  123:             exp = PeriodIndex(["2001-01-01 00:00", "2001-01-02 02:00", "NaT"], freq="h")
  124:             tm.assert_index_equal(result, exp)
  125:             assert result.freq == exp.freq
  126: 
  127:     def test_astype_asfreq(self):
  128:         pi1 = PeriodIndex(["2011-01-01", "2011-02-01", "2011-03-01"], freq="D")
  129:         exp = PeriodIndex(["2011-01", "2011-02", "2011-03"], freq="M")
  130:         tm.assert_index_equal(pi1.asfreq("M"), exp)
  131:         tm.assert_index_equal(pi1.astype("period[M]"), exp)
  132: 
  133:         exp = PeriodIndex(["2011-01", "2011-02", "2011-03"], freq="3M")
  134:         tm.assert_index_equal(pi1.asfreq("3M"), exp)
  135:         tm.assert_index_equal(pi1.astype("period[3M]"), exp)
  136: 
  137:     def test_asfreq_with_different_n(self):
  138:         ser = Series([1, 2], index=PeriodIndex(["2020-01", "2020-03"], freq="2M"))
  139:         result = ser.asfreq("M")
  140: 
  141:         excepted = Series([1, 2], index=PeriodIndex(["2020-02", "2020-04"], freq="M"))
  142:         tm.assert_series_equal(result, excepted)
  143: 
  144:     @pytest.mark.parametrize(
  145:         "freq",
  146:         [
  147:             "2BMS",
  148:             "2YS-MAR",
  149:             "2bh",
  150:         ],
  151:     )
  152:     def test_pi_asfreq_not_supported_frequency(self, freq):
  153:         # GH#55785
  154:         msg = f"{freq[1:]} is not supported as period frequency"
  155: 
  156:         pi = PeriodIndex(["2020-01-01", "2021-01-01"], freq="M")
  157:         with pytest.raises(ValueError, match=msg):
  158:             pi.asfreq(freq=freq)
  159: 
  160:     @pytest.mark.parametrize(
  161:         "freq",
  162:         [
  163:             "2BME",
  164:             "2YE-MAR",
  165:             "2QE",
  166:         ],
  167:     )
  168:     def test_pi_asfreq_invalid_frequency(self, freq):
  169:         # GH#55785
  170:         msg = f"Invalid frequency: {freq}"
  171: 
  172:         pi = PeriodIndex(["2020-01-01", "2021-01-01"], freq="M")
  173:         with pytest.raises(ValueError, match=msg):
  174:             pi.asfreq(freq=freq)
  175: 
  176:     @pytest.mark.parametrize(
  177:         "freq",
  178:         [
  179:             offsets.MonthBegin(2),
  180:             offsets.BusinessMonthEnd(2),
  181:         ],
  182:     )
  183:     def test_pi_asfreq_invalid_baseoffset(self, freq):
  184:         # GH#56945
  185:         msg = re.escape(f"{freq} is not supported as period frequency")
  186: 
  187:         pi = PeriodIndex(["2020-01-01", "2021-01-01"], freq="M")
  188:         with pytest.raises(ValueError, match=msg):
  189:             pi.asfreq(freq=freq)
