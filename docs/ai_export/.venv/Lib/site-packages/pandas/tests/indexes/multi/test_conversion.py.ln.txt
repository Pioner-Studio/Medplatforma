    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     MultiIndex,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def test_to_numpy(idx):
   13:     result = idx.to_numpy()
   14:     exp = idx.values
   15:     tm.assert_numpy_array_equal(result, exp)
   16: 
   17: 
   18: def test_to_frame():
   19:     tuples = [(1, "one"), (1, "two"), (2, "one"), (2, "two")]
   20: 
   21:     index = MultiIndex.from_tuples(tuples)
   22:     result = index.to_frame(index=False)
   23:     expected = DataFrame(tuples)
   24:     tm.assert_frame_equal(result, expected)
   25: 
   26:     result = index.to_frame()
   27:     expected.index = index
   28:     tm.assert_frame_equal(result, expected)
   29: 
   30:     tuples = [(1, "one"), (1, "two"), (2, "one"), (2, "two")]
   31:     index = MultiIndex.from_tuples(tuples, names=["first", "second"])
   32:     result = index.to_frame(index=False)
   33:     expected = DataFrame(tuples)
   34:     expected.columns = ["first", "second"]
   35:     tm.assert_frame_equal(result, expected)
   36: 
   37:     result = index.to_frame()
   38:     expected.index = index
   39:     tm.assert_frame_equal(result, expected)
   40: 
   41:     # See GH-22580
   42:     index = MultiIndex.from_tuples(tuples)
   43:     result = index.to_frame(index=False, name=["first", "second"])
   44:     expected = DataFrame(tuples)
   45:     expected.columns = ["first", "second"]
   46:     tm.assert_frame_equal(result, expected)
   47: 
   48:     result = index.to_frame(name=["first", "second"])
   49:     expected.index = index
   50:     expected.columns = ["first", "second"]
   51:     tm.assert_frame_equal(result, expected)
   52: 
   53:     msg = "'name' must be a list / sequence of column names."
   54:     with pytest.raises(TypeError, match=msg):
   55:         index.to_frame(name="first")
   56: 
   57:     msg = "'name' should have same length as number of levels on index."
   58:     with pytest.raises(ValueError, match=msg):
   59:         index.to_frame(name=["first"])
   60: 
   61:     # Tests for datetime index
   62:     index = MultiIndex.from_product([range(5), pd.date_range("20130101", periods=3)])
   63:     result = index.to_frame(index=False)
   64:     expected = DataFrame(
   65:         {
   66:             0: np.repeat(np.arange(5, dtype="int64"), 3),
   67:             1: np.tile(pd.date_range("20130101", periods=3), 5),
   68:         }
   69:     )
   70:     tm.assert_frame_equal(result, expected)
   71: 
   72:     result = index.to_frame()
   73:     expected.index = index
   74:     tm.assert_frame_equal(result, expected)
   75: 
   76:     # See GH-22580
   77:     result = index.to_frame(index=False, name=["first", "second"])
   78:     expected = DataFrame(
   79:         {
   80:             "first": np.repeat(np.arange(5, dtype="int64"), 3),
   81:             "second": np.tile(pd.date_range("20130101", periods=3), 5),
   82:         }
   83:     )
   84:     tm.assert_frame_equal(result, expected)
   85: 
   86:     result = index.to_frame(name=["first", "second"])
   87:     expected.index = index
   88:     tm.assert_frame_equal(result, expected)
   89: 
   90: 
   91: def test_to_frame_dtype_fidelity():
   92:     # GH 22420
   93:     mi = MultiIndex.from_arrays(
   94:         [
   95:             pd.date_range("19910905", periods=6, tz="US/Eastern"),
   96:             [1, 1, 1, 2, 2, 2],
   97:             pd.Categorical(["a", "a", "b", "b", "c", "c"], ordered=True),
   98:             ["x", "x", "y", "z", "x", "y"],
   99:         ],
  100:         names=["dates", "a", "b", "c"],
  101:     )
  102:     original_dtypes = {name: mi.levels[i].dtype for i, name in enumerate(mi.names)}
  103: 
  104:     expected_df = DataFrame(
  105:         {
  106:             "dates": pd.date_range("19910905", periods=6, tz="US/Eastern"),
  107:             "a": [1, 1, 1, 2, 2, 2],
  108:             "b": pd.Categorical(["a", "a", "b", "b", "c", "c"], ordered=True),
  109:             "c": ["x", "x", "y", "z", "x", "y"],
  110:         }
  111:     )
  112:     df = mi.to_frame(index=False)
  113:     df_dtypes = df.dtypes.to_dict()
  114: 
  115:     tm.assert_frame_equal(df, expected_df)
  116:     assert original_dtypes == df_dtypes
  117: 
  118: 
  119: def test_to_frame_resulting_column_order():
  120:     # GH 22420
  121:     expected = ["z", 0, "a"]
  122:     mi = MultiIndex.from_arrays(
  123:         [["a", "b", "c"], ["x", "y", "z"], ["q", "w", "e"]], names=expected
  124:     )
  125:     result = mi.to_frame().columns.tolist()
  126:     assert result == expected
  127: 
  128: 
  129: def test_to_frame_duplicate_labels():
  130:     # GH 45245
  131:     data = [(1, 2), (3, 4)]
  132:     names = ["a", "a"]
  133:     index = MultiIndex.from_tuples(data, names=names)
  134:     with pytest.raises(ValueError, match="Cannot create duplicate column labels"):
  135:         index.to_frame()
  136: 
  137:     result = index.to_frame(allow_duplicates=True)
  138:     expected = DataFrame(data, index=index, columns=names)
  139:     tm.assert_frame_equal(result, expected)
  140: 
  141:     names = [None, 0]
  142:     index = MultiIndex.from_tuples(data, names=names)
  143:     with pytest.raises(ValueError, match="Cannot create duplicate column labels"):
  144:         index.to_frame()
  145: 
  146:     result = index.to_frame(allow_duplicates=True)
  147:     expected = DataFrame(data, index=index, columns=[0, 0])
  148:     tm.assert_frame_equal(result, expected)
  149: 
  150: 
  151: def test_to_flat_index(idx):
  152:     expected = pd.Index(
  153:         (
  154:             ("foo", "one"),
  155:             ("foo", "two"),
  156:             ("bar", "one"),
  157:             ("baz", "two"),
  158:             ("qux", "one"),
  159:             ("qux", "two"),
  160:         ),
  161:         tupleize_cols=False,
  162:     )
  163:     result = idx.to_flat_index()
  164:     tm.assert_index_equal(result, expected)
