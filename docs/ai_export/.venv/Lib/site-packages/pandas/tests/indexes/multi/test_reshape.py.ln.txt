    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: import pytz
    6: 
    7: import pandas as pd
    8: from pandas import (
    9:     Index,
   10:     MultiIndex,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: def test_insert(idx):
   16:     # key contained in all levels
   17:     new_index = idx.insert(0, ("bar", "two"))
   18:     assert new_index.equal_levels(idx)
   19:     assert new_index[0] == ("bar", "two")
   20: 
   21:     # key not contained in all levels
   22:     new_index = idx.insert(0, ("abc", "three"))
   23: 
   24:     exp0 = Index(list(idx.levels[0]) + ["abc"], name="first")
   25:     tm.assert_index_equal(new_index.levels[0], exp0)
   26:     assert new_index.names == ["first", "second"]
   27: 
   28:     exp1 = Index(list(idx.levels[1]) + ["three"], name="second")
   29:     tm.assert_index_equal(new_index.levels[1], exp1)
   30:     assert new_index[0] == ("abc", "three")
   31: 
   32:     # key wrong length
   33:     msg = "Item must have length equal to number of levels"
   34:     with pytest.raises(ValueError, match=msg):
   35:         idx.insert(0, ("foo2",))
   36: 
   37:     left = pd.DataFrame([["a", "b", 0], ["b", "d", 1]], columns=["1st", "2nd", "3rd"])
   38:     left.set_index(["1st", "2nd"], inplace=True)
   39:     ts = left["3rd"].copy(deep=True)
   40: 
   41:     left.loc[("b", "x"), "3rd"] = 2
   42:     left.loc[("b", "a"), "3rd"] = -1
   43:     left.loc[("b", "b"), "3rd"] = 3
   44:     left.loc[("a", "x"), "3rd"] = 4
   45:     left.loc[("a", "w"), "3rd"] = 5
   46:     left.loc[("a", "a"), "3rd"] = 6
   47: 
   48:     ts.loc[("b", "x")] = 2
   49:     ts.loc["b", "a"] = -1
   50:     ts.loc[("b", "b")] = 3
   51:     ts.loc["a", "x"] = 4
   52:     ts.loc[("a", "w")] = 5
   53:     ts.loc["a", "a"] = 6
   54: 
   55:     right = pd.DataFrame(
   56:         [
   57:             ["a", "b", 0],
   58:             ["b", "d", 1],
   59:             ["b", "x", 2],
   60:             ["b", "a", -1],
   61:             ["b", "b", 3],
   62:             ["a", "x", 4],
   63:             ["a", "w", 5],
   64:             ["a", "a", 6],
   65:         ],
   66:         columns=["1st", "2nd", "3rd"],
   67:     )
   68:     right.set_index(["1st", "2nd"], inplace=True)
   69:     # FIXME data types changes to float because
   70:     # of intermediate nan insertion;
   71:     tm.assert_frame_equal(left, right, check_dtype=False)
   72:     tm.assert_series_equal(ts, right["3rd"])
   73: 
   74: 
   75: def test_insert2():
   76:     # GH9250
   77:     idx = (
   78:         [("test1", i) for i in range(5)]
   79:         + [("test2", i) for i in range(6)]
   80:         + [("test", 17), ("test", 18)]
   81:     )
   82: 
   83:     left = pd.Series(np.linspace(0, 10, 11), MultiIndex.from_tuples(idx[:-2]))
   84: 
   85:     left.loc[("test", 17)] = 11
   86:     left.loc[("test", 18)] = 12
   87: 
   88:     right = pd.Series(np.linspace(0, 12, 13), MultiIndex.from_tuples(idx))
   89: 
   90:     tm.assert_series_equal(left, right)
   91: 
   92: 
   93: def test_append(idx):
   94:     result = idx[:3].append(idx[3:])
   95:     assert result.equals(idx)
   96: 
   97:     foos = [idx[:1], idx[1:3], idx[3:]]
   98:     result = foos[0].append(foos[1:])
   99:     assert result.equals(idx)
  100: 
  101:     # empty
  102:     result = idx.append([])
  103:     assert result.equals(idx)
  104: 
  105: 
  106: def test_append_index():
  107:     idx1 = Index([1.1, 1.2, 1.3])
  108:     idx2 = pd.date_range("2011-01-01", freq="D", periods=3, tz="Asia/Tokyo")
  109:     idx3 = Index(["A", "B", "C"])
  110: 
  111:     midx_lv2 = MultiIndex.from_arrays([idx1, idx2])
  112:     midx_lv3 = MultiIndex.from_arrays([idx1, idx2, idx3])
  113: 
  114:     result = idx1.append(midx_lv2)
  115: 
  116:     # see gh-7112
  117:     tz = pytz.timezone("Asia/Tokyo")
  118:     expected_tuples = [
  119:         (1.1, tz.localize(datetime(2011, 1, 1))),
  120:         (1.2, tz.localize(datetime(2011, 1, 2))),
  121:         (1.3, tz.localize(datetime(2011, 1, 3))),
  122:     ]
  123:     expected = Index([1.1, 1.2, 1.3] + expected_tuples)
  124:     tm.assert_index_equal(result, expected)
  125: 
  126:     result = midx_lv2.append(idx1)
  127:     expected = Index(expected_tuples + [1.1, 1.2, 1.3])
  128:     tm.assert_index_equal(result, expected)
  129: 
  130:     result = midx_lv2.append(midx_lv2)
  131:     expected = MultiIndex.from_arrays([idx1.append(idx1), idx2.append(idx2)])
  132:     tm.assert_index_equal(result, expected)
  133: 
  134:     result = midx_lv2.append(midx_lv3)
  135:     tm.assert_index_equal(result, expected)
  136: 
  137:     result = midx_lv3.append(midx_lv2)
  138:     expected = Index._simple_new(
  139:         np.array(
  140:             [
  141:                 (1.1, tz.localize(datetime(2011, 1, 1)), "A"),
  142:                 (1.2, tz.localize(datetime(2011, 1, 2)), "B"),
  143:                 (1.3, tz.localize(datetime(2011, 1, 3)), "C"),
  144:             ]
  145:             + expected_tuples,
  146:             dtype=object,
  147:         ),
  148:         None,
  149:     )
  150:     tm.assert_index_equal(result, expected)
  151: 
  152: 
  153: @pytest.mark.parametrize("name, exp", [("b", "b"), ("c", None)])
  154: def test_append_names_match(name, exp):
  155:     # GH#48288
  156:     midx = MultiIndex.from_arrays([[1, 2], [3, 4]], names=["a", "b"])
  157:     midx2 = MultiIndex.from_arrays([[3], [5]], names=["a", name])
  158:     result = midx.append(midx2)
  159:     expected = MultiIndex.from_arrays([[1, 2, 3], [3, 4, 5]], names=["a", exp])
  160:     tm.assert_index_equal(result, expected)
  161: 
  162: 
  163: def test_append_names_dont_match():
  164:     # GH#48288
  165:     midx = MultiIndex.from_arrays([[1, 2], [3, 4]], names=["a", "b"])
  166:     midx2 = MultiIndex.from_arrays([[3], [5]], names=["x", "y"])
  167:     result = midx.append(midx2)
  168:     expected = MultiIndex.from_arrays([[1, 2, 3], [3, 4, 5]], names=None)
  169:     tm.assert_index_equal(result, expected)
  170: 
  171: 
  172: def test_append_overlapping_interval_levels():
  173:     # GH 54934
  174:     ivl1 = pd.IntervalIndex.from_breaks([0.0, 1.0, 2.0])
  175:     ivl2 = pd.IntervalIndex.from_breaks([0.5, 1.5, 2.5])
  176:     mi1 = MultiIndex.from_product([ivl1, ivl1])
  177:     mi2 = MultiIndex.from_product([ivl2, ivl2])
  178:     result = mi1.append(mi2)
  179:     expected = MultiIndex.from_tuples(
  180:         [
  181:             (pd.Interval(0.0, 1.0), pd.Interval(0.0, 1.0)),
  182:             (pd.Interval(0.0, 1.0), pd.Interval(1.0, 2.0)),
  183:             (pd.Interval(1.0, 2.0), pd.Interval(0.0, 1.0)),
  184:             (pd.Interval(1.0, 2.0), pd.Interval(1.0, 2.0)),
  185:             (pd.Interval(0.5, 1.5), pd.Interval(0.5, 1.5)),
  186:             (pd.Interval(0.5, 1.5), pd.Interval(1.5, 2.5)),
  187:             (pd.Interval(1.5, 2.5), pd.Interval(0.5, 1.5)),
  188:             (pd.Interval(1.5, 2.5), pd.Interval(1.5, 2.5)),
  189:         ]
  190:     )
  191:     tm.assert_index_equal(result, expected)
  192: 
  193: 
  194: def test_repeat():
  195:     reps = 2
  196:     numbers = [1, 2, 3]
  197:     names = np.array(["foo", "bar"])
  198: 
  199:     m = MultiIndex.from_product([numbers, names], names=names)
  200:     expected = MultiIndex.from_product([numbers, names.repeat(reps)], names=names)
  201:     tm.assert_index_equal(m.repeat(reps), expected)
  202: 
  203: 
  204: def test_insert_base(idx):
  205:     result = idx[1:4]
  206: 
  207:     # test 0th element
  208:     assert idx[0:4].equals(result.insert(0, idx[0]))
  209: 
  210: 
  211: def test_delete_base(idx):
  212:     expected = idx[1:]
  213:     result = idx.delete(0)
  214:     assert result.equals(expected)
  215:     assert result.name == expected.name
  216: 
  217:     expected = idx[:-1]
  218:     result = idx.delete(-1)
  219:     assert result.equals(expected)
  220:     assert result.name == expected.name
  221: 
  222:     msg = "index 6 is out of bounds for axis 0 with size 6"
  223:     with pytest.raises(IndexError, match=msg):
  224:         idx.delete(len(idx))
