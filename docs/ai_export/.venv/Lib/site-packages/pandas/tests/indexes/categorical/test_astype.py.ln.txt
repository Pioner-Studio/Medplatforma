    1: from datetime import date
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     Categorical,
    8:     CategoricalDtype,
    9:     CategoricalIndex,
   10:     Index,
   11:     IntervalIndex,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestAstype:
   17:     def test_astype(self):
   18:         ci = CategoricalIndex(list("aabbca"), categories=list("cab"), ordered=False)
   19: 
   20:         result = ci.astype(object)
   21:         tm.assert_index_equal(result, Index(np.array(ci), dtype=object))
   22: 
   23:         # this IS equal, but not the same class
   24:         assert result.equals(ci)
   25:         assert isinstance(result, Index)
   26:         assert not isinstance(result, CategoricalIndex)
   27: 
   28:         # interval
   29:         ii = IntervalIndex.from_arrays(left=[-0.001, 2.0], right=[2, 4], closed="right")
   30: 
   31:         ci = CategoricalIndex(
   32:             Categorical.from_codes([0, 1, -1], categories=ii, ordered=True)
   33:         )
   34: 
   35:         result = ci.astype("interval")
   36:         expected = ii.take([0, 1, -1], allow_fill=True, fill_value=np.nan)
   37:         tm.assert_index_equal(result, expected)
   38: 
   39:         result = IntervalIndex(result.values)
   40:         tm.assert_index_equal(result, expected)
   41: 
   42:     @pytest.mark.parametrize("name", [None, "foo"])
   43:     @pytest.mark.parametrize("dtype_ordered", [True, False])
   44:     @pytest.mark.parametrize("index_ordered", [True, False])
   45:     def test_astype_category(self, name, dtype_ordered, index_ordered):
   46:         # GH#18630
   47:         index = CategoricalIndex(
   48:             list("aabbca"), categories=list("cab"), ordered=index_ordered
   49:         )
   50:         if name:
   51:             index = index.rename(name)
   52: 
   53:         # standard categories
   54:         dtype = CategoricalDtype(ordered=dtype_ordered)
   55:         result = index.astype(dtype)
   56:         expected = CategoricalIndex(
   57:             index.tolist(),
   58:             name=name,
   59:             categories=index.categories,
   60:             ordered=dtype_ordered,
   61:         )
   62:         tm.assert_index_equal(result, expected)
   63: 
   64:         # non-standard categories
   65:         dtype = CategoricalDtype(index.unique().tolist()[:-1], dtype_ordered)
   66:         result = index.astype(dtype)
   67:         expected = CategoricalIndex(index.tolist(), name=name, dtype=dtype)
   68:         tm.assert_index_equal(result, expected)
   69: 
   70:         if dtype_ordered is False:
   71:             # dtype='category' can't specify ordered, so only test once
   72:             result = index.astype("category")
   73:             expected = index
   74:             tm.assert_index_equal(result, expected)
   75: 
   76:     @pytest.mark.parametrize("box", [True, False])
   77:     def test_categorical_date_roundtrip(self, box):
   78:         # astype to categorical and back should preserve date objects
   79:         v = date.today()
   80: 
   81:         obj = Index([v, v])
   82:         assert obj.dtype == object
   83:         if box:
   84:             obj = obj.array
   85: 
   86:         cat = obj.astype("category")
   87: 
   88:         rtrip = cat.astype(object)
   89:         assert rtrip.dtype == object
   90:         assert type(rtrip[0]) is date
