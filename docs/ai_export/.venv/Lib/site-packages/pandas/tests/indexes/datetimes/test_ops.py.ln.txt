    1: from datetime import datetime
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     DatetimeIndex,
    7:     Index,
    8:     bdate_range,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestDatetimeIndexOps:
   15:     def test_infer_freq(self, freq_sample):
   16:         # GH 11018
   17:         idx = date_range("2011-01-01 09:00:00", freq=freq_sample, periods=10)
   18:         result = DatetimeIndex(idx.asi8, freq="infer")
   19:         tm.assert_index_equal(idx, result)
   20:         assert result.freq == freq_sample
   21: 
   22: 
   23: @pytest.mark.parametrize("freq", ["B", "C"])
   24: class TestBusinessDatetimeIndex:
   25:     @pytest.fixture
   26:     def rng(self, freq):
   27:         START, END = datetime(2009, 1, 1), datetime(2010, 1, 1)
   28:         return bdate_range(START, END, freq=freq)
   29: 
   30:     def test_comparison(self, rng):
   31:         d = rng[10]
   32: 
   33:         comp = rng > d
   34:         assert comp[11]
   35:         assert not comp[9]
   36: 
   37:     def test_copy(self, rng):
   38:         cp = rng.copy()
   39:         tm.assert_index_equal(cp, rng)
   40: 
   41:     def test_identical(self, rng):
   42:         t1 = rng.copy()
   43:         t2 = rng.copy()
   44:         assert t1.identical(t2)
   45: 
   46:         # name
   47:         t1 = t1.rename("foo")
   48:         assert t1.equals(t2)
   49:         assert not t1.identical(t2)
   50:         t2 = t2.rename("foo")
   51:         assert t1.identical(t2)
   52: 
   53:         # freq
   54:         t2v = Index(t2.values)
   55:         assert t1.equals(t2v)
   56:         assert not t1.identical(t2v)
