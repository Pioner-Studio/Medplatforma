    1: """
    2: Tests that can be parametrized over _any_ Index object.
    3: """
    4: import re
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: from pandas.errors import InvalidIndexError
   10: 
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_boolean_context_compat(index):
   15:     # GH#7897
   16:     with pytest.raises(ValueError, match="The truth value of a"):
   17:         if index:
   18:             pass
   19: 
   20:     with pytest.raises(ValueError, match="The truth value of a"):
   21:         bool(index)
   22: 
   23: 
   24: def test_sort(index):
   25:     msg = "cannot sort an Index object in-place, use sort_values instead"
   26:     with pytest.raises(TypeError, match=msg):
   27:         index.sort()
   28: 
   29: 
   30: def test_hash_error(index):
   31:     with pytest.raises(TypeError, match=f"unhashable type: '{type(index).__name__}'"):
   32:         hash(index)
   33: 
   34: 
   35: def test_mutability(index):
   36:     if not len(index):
   37:         pytest.skip("Test doesn't make sense for empty index")
   38:     msg = "Index does not support mutable operations"
   39:     with pytest.raises(TypeError, match=msg):
   40:         index[0] = index[0]
   41: 
   42: 
   43: @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
   44: def test_map_identity_mapping(index, request):
   45:     # GH#12766
   46: 
   47:     result = index.map(lambda x: x)
   48:     if index.dtype == object and result.dtype == bool:
   49:         assert (index == result).all()
   50:         # TODO: could work that into the 'exact="equiv"'?
   51:         return  # FIXME: doesn't belong in this file anymore!
   52:     tm.assert_index_equal(result, index, exact="equiv")
   53: 
   54: 
   55: def test_wrong_number_names(index):
   56:     names = index.nlevels * ["apple", "banana", "carrot"]
   57:     with pytest.raises(ValueError, match="^Length"):
   58:         index.names = names
   59: 
   60: 
   61: def test_view_preserves_name(index):
   62:     assert index.view().name == index.name
   63: 
   64: 
   65: def test_ravel(index):
   66:     # GH#19956 ravel returning ndarray is deprecated, in 2.0 returns a view on self
   67:     res = index.ravel()
   68:     tm.assert_index_equal(res, index)
   69: 
   70: 
   71: class TestConversion:
   72:     def test_to_series(self, index):
   73:         # assert that we are creating a copy of the index
   74: 
   75:         ser = index.to_series()
   76:         assert ser.values is not index.values
   77:         assert ser.index is not index
   78:         assert ser.name == index.name
   79: 
   80:     def test_to_series_with_arguments(self, index):
   81:         # GH#18699
   82: 
   83:         # index kwarg
   84:         ser = index.to_series(index=index)
   85: 
   86:         assert ser.values is not index.values
   87:         assert ser.index is index
   88:         assert ser.name == index.name
   89: 
   90:         # name kwarg
   91:         ser = index.to_series(name="__test")
   92: 
   93:         assert ser.values is not index.values
   94:         assert ser.index is not index
   95:         assert ser.name != index.name
   96: 
   97:     def test_tolist_matches_list(self, index):
   98:         assert index.tolist() == list(index)
   99: 
  100: 
  101: class TestRoundTrips:
  102:     def test_pickle_roundtrip(self, index):
  103:         result = tm.round_trip_pickle(index)
  104:         tm.assert_index_equal(result, index, exact=True)
  105:         if result.nlevels > 1:
  106:             # GH#8367 round-trip with timezone
  107:             assert index.equal_levels(result)
  108: 
  109:     def test_pickle_preserves_name(self, index):
  110:         original_name, index.name = index.name, "foo"
  111:         unpickled = tm.round_trip_pickle(index)
  112:         assert index.equals(unpickled)
  113:         index.name = original_name
  114: 
  115: 
  116: class TestIndexing:
  117:     def test_get_loc_listlike_raises_invalid_index_error(self, index):
  118:         # and never TypeError
  119:         key = np.array([0, 1], dtype=np.intp)
  120: 
  121:         with pytest.raises(InvalidIndexError, match=r"\[0 1\]"):
  122:             index.get_loc(key)
  123: 
  124:         with pytest.raises(InvalidIndexError, match=r"\[False  True\]"):
  125:             index.get_loc(key.astype(bool))
  126: 
  127:     def test_getitem_ellipsis(self, index):
  128:         # GH#21282
  129:         result = index[...]
  130:         assert result.equals(index)
  131:         assert result is not index
  132: 
  133:     def test_slice_keeps_name(self, index):
  134:         assert index.name == index[1:].name
  135: 
  136:     @pytest.mark.parametrize("item", [101, "no_int", 2.5])
  137:     def test_getitem_error(self, index, item):
  138:         msg = "|".join(
  139:             [
  140:                 r"index 101 is out of bounds for axis 0 with size [\d]+",
  141:                 re.escape(
  142:                     "only integers, slices (`:`), ellipsis (`...`), "
  143:                     "numpy.newaxis (`None`) and integer or boolean arrays "
  144:                     "are valid indices"
  145:                 ),
  146:                 "index out of bounds",  # string[pyarrow]
  147:             ]
  148:         )
  149:         with pytest.raises(IndexError, match=msg):
  150:             index[item]
  151: 
  152: 
  153: class TestRendering:
  154:     def test_str(self, index):
  155:         # test the string repr
  156:         index.name = "foo"
  157:         assert "'foo'" in str(index)
  158:         assert type(index).__name__ in str(index)
  159: 
  160: 
  161: class TestReductions:
  162:     def test_argmax_axis_invalid(self, index):
  163:         # GH#23081
  164:         msg = r"`axis` must be fewer than the number of dimensions \(1\)"
  165:         with pytest.raises(ValueError, match=msg):
  166:             index.argmax(axis=1)
  167:         with pytest.raises(ValueError, match=msg):
  168:             index.argmin(axis=2)
  169:         with pytest.raises(ValueError, match=msg):
  170:             index.min(axis=-2)
  171:         with pytest.raises(ValueError, match=msg):
  172:             index.max(axis=-3)
