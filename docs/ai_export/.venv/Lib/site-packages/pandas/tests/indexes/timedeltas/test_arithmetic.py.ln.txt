    1: # Arithmetic tests for TimedeltaIndex are generally about the result's `freq` attribute.
    2: # Other cases can be shared in tests.arithmetic.test_timedelta64
    3: import numpy as np
    4: 
    5: from pandas import (
    6:     NaT,
    7:     Timedelta,
    8:     timedelta_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestTimedeltaIndexArithmetic:
   14:     def test_arithmetic_zero_freq(self):
   15:         # GH#51575 don't get a .freq with freq.n = 0
   16:         tdi = timedelta_range(0, periods=100, freq="ns")
   17:         result = tdi / 2
   18:         assert result.freq is None
   19:         expected = tdi[:50].repeat(2)
   20:         tm.assert_index_equal(result, expected)
   21: 
   22:         result2 = tdi // 2
   23:         assert result2.freq is None
   24:         expected2 = expected
   25:         tm.assert_index_equal(result2, expected2)
   26: 
   27:         result3 = tdi * 0
   28:         assert result3.freq is None
   29:         expected3 = tdi[:1].repeat(100)
   30:         tm.assert_index_equal(result3, expected3)
   31: 
   32:     def test_tdi_division(self, index_or_series):
   33:         # doc example
   34: 
   35:         scalar = Timedelta(days=31)
   36:         td = index_or_series(
   37:             [scalar, scalar, scalar + Timedelta(minutes=5, seconds=3), NaT],
   38:             dtype="m8[ns]",
   39:         )
   40: 
   41:         result = td / np.timedelta64(1, "D")
   42:         expected = index_or_series(
   43:             [31, 31, (31 * 86400 + 5 * 60 + 3) / 86400.0, np.nan]
   44:         )
   45:         tm.assert_equal(result, expected)
   46: 
   47:         result = td / np.timedelta64(1, "s")
   48:         expected = index_or_series(
   49:             [31 * 86400, 31 * 86400, 31 * 86400 + 5 * 60 + 3, np.nan]
   50:         )
   51:         tm.assert_equal(result, expected)
