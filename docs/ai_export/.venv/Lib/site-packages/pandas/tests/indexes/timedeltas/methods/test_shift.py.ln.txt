    1: import pytest
    2: 
    3: from pandas.errors import NullFrequencyError
    4: 
    5: import pandas as pd
    6: from pandas import TimedeltaIndex
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestTimedeltaIndexShift:
   11:     # -------------------------------------------------------------
   12:     # TimedeltaIndex.shift is used by __add__/__sub__
   13: 
   14:     def test_tdi_shift_empty(self):
   15:         # GH#9903
   16:         idx = TimedeltaIndex([], name="xxx")
   17:         tm.assert_index_equal(idx.shift(0, freq="h"), idx)
   18:         tm.assert_index_equal(idx.shift(3, freq="h"), idx)
   19: 
   20:     def test_tdi_shift_hours(self):
   21:         # GH#9903
   22:         idx = TimedeltaIndex(["5 hours", "6 hours", "9 hours"], name="xxx")
   23:         tm.assert_index_equal(idx.shift(0, freq="h"), idx)
   24:         exp = TimedeltaIndex(["8 hours", "9 hours", "12 hours"], name="xxx")
   25:         tm.assert_index_equal(idx.shift(3, freq="h"), exp)
   26:         exp = TimedeltaIndex(["2 hours", "3 hours", "6 hours"], name="xxx")
   27:         tm.assert_index_equal(idx.shift(-3, freq="h"), exp)
   28: 
   29:     def test_tdi_shift_minutes(self):
   30:         # GH#9903
   31:         idx = TimedeltaIndex(["5 hours", "6 hours", "9 hours"], name="xxx")
   32:         tm.assert_index_equal(idx.shift(0, freq="min"), idx)
   33:         exp = TimedeltaIndex(["05:03:00", "06:03:00", "9:03:00"], name="xxx")
   34:         tm.assert_index_equal(idx.shift(3, freq="min"), exp)
   35:         exp = TimedeltaIndex(["04:57:00", "05:57:00", "8:57:00"], name="xxx")
   36:         tm.assert_index_equal(idx.shift(-3, freq="min"), exp)
   37: 
   38:     def test_tdi_shift_int(self):
   39:         # GH#8083
   40:         tdi = pd.to_timedelta(range(5), unit="d")
   41:         trange = tdi._with_freq("infer") + pd.offsets.Hour(1)
   42:         result = trange.shift(1)
   43:         expected = TimedeltaIndex(
   44:             [
   45:                 "1 days 01:00:00",
   46:                 "2 days 01:00:00",
   47:                 "3 days 01:00:00",
   48:                 "4 days 01:00:00",
   49:                 "5 days 01:00:00",
   50:             ],
   51:             freq="D",
   52:         )
   53:         tm.assert_index_equal(result, expected)
   54: 
   55:     def test_tdi_shift_nonstandard_freq(self):
   56:         # GH#8083
   57:         tdi = pd.to_timedelta(range(5), unit="d")
   58:         trange = tdi._with_freq("infer") + pd.offsets.Hour(1)
   59:         result = trange.shift(3, freq="2D 1s")
   60:         expected = TimedeltaIndex(
   61:             [
   62:                 "6 days 01:00:03",
   63:                 "7 days 01:00:03",
   64:                 "8 days 01:00:03",
   65:                 "9 days 01:00:03",
   66:                 "10 days 01:00:03",
   67:             ],
   68:             freq="D",
   69:         )
   70:         tm.assert_index_equal(result, expected)
   71: 
   72:     def test_shift_no_freq(self):
   73:         # GH#19147
   74:         tdi = TimedeltaIndex(["1 days 01:00:00", "2 days 01:00:00"], freq=None)
   75:         with pytest.raises(NullFrequencyError, match="Cannot shift with no freq"):
   76:             tdi.shift(2)
