    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4: )
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: import pandas._testing as tm
   10: from pandas.core.indexes.api import (
   11:     Index,
   12:     RangeIndex,
   13: )
   14: 
   15: 
   16: @pytest.fixture
   17: def index_large():
   18:     # large values used in TestUInt64Index where no compat needed with int64/float64
   19:     large = [2**63, 2**63 + 10, 2**63 + 15, 2**63 + 20, 2**63 + 25]
   20:     return Index(large, dtype=np.uint64)
   21: 
   22: 
   23: class TestSetOps:
   24:     @pytest.mark.parametrize("dtype", ["f8", "u8", "i8"])
   25:     def test_union_non_numeric(self, dtype):
   26:         # corner case, non-numeric
   27:         index = Index(np.arange(5, dtype=dtype), dtype=dtype)
   28:         assert index.dtype == dtype
   29: 
   30:         other = Index([datetime.now() + timedelta(i) for i in range(4)], dtype=object)
   31:         result = index.union(other)
   32:         expected = Index(np.concatenate((index, other)))
   33:         tm.assert_index_equal(result, expected)
   34: 
   35:         result = other.union(index)
   36:         expected = Index(np.concatenate((other, index)))
   37:         tm.assert_index_equal(result, expected)
   38: 
   39:     def test_intersection(self):
   40:         index = Index(range(5), dtype=np.int64)
   41: 
   42:         other = Index([1, 2, 3, 4, 5])
   43:         result = index.intersection(other)
   44:         expected = Index(np.sort(np.intersect1d(index.values, other.values)))
   45:         tm.assert_index_equal(result, expected)
   46: 
   47:         result = other.intersection(index)
   48:         expected = Index(
   49:             np.sort(np.asarray(np.intersect1d(index.values, other.values)))
   50:         )
   51:         tm.assert_index_equal(result, expected)
   52: 
   53:     @pytest.mark.parametrize("dtype", ["int64", "uint64"])
   54:     def test_int_float_union_dtype(self, dtype):
   55:         # https://github.com/pandas-dev/pandas/issues/26778
   56:         # [u]int | float -> float
   57:         index = Index([0, 2, 3], dtype=dtype)
   58:         other = Index([0.5, 1.5], dtype=np.float64)
   59:         expected = Index([0.0, 0.5, 1.5, 2.0, 3.0], dtype=np.float64)
   60:         result = index.union(other)
   61:         tm.assert_index_equal(result, expected)
   62: 
   63:         result = other.union(index)
   64:         tm.assert_index_equal(result, expected)
   65: 
   66:     def test_range_float_union_dtype(self):
   67:         # https://github.com/pandas-dev/pandas/issues/26778
   68:         index = RangeIndex(start=0, stop=3)
   69:         other = Index([0.5, 1.5], dtype=np.float64)
   70:         result = index.union(other)
   71:         expected = Index([0.0, 0.5, 1, 1.5, 2.0], dtype=np.float64)
   72:         tm.assert_index_equal(result, expected)
   73: 
   74:         result = other.union(index)
   75:         tm.assert_index_equal(result, expected)
   76: 
   77:     def test_range_uint64_union_dtype(self):
   78:         # https://github.com/pandas-dev/pandas/issues/26778
   79:         index = RangeIndex(start=0, stop=3)
   80:         other = Index([0, 10], dtype=np.uint64)
   81:         result = index.union(other)
   82:         expected = Index([0, 1, 2, 10], dtype=object)
   83:         tm.assert_index_equal(result, expected)
   84: 
   85:         result = other.union(index)
   86:         tm.assert_index_equal(result, expected)
   87: 
   88:     def test_float64_index_difference(self):
   89:         # https://github.com/pandas-dev/pandas/issues/35217
   90:         float_index = Index([1.0, 2, 3])
   91:         string_index = Index(["1", "2", "3"])
   92: 
   93:         result = float_index.difference(string_index)
   94:         tm.assert_index_equal(result, float_index)
   95: 
   96:         result = string_index.difference(float_index)
   97:         tm.assert_index_equal(result, string_index)
   98: 
   99:     def test_intersection_uint64_outside_int64_range(self, index_large):
  100:         other = Index([2**63, 2**63 + 5, 2**63 + 10, 2**63 + 15, 2**63 + 20])
  101:         result = index_large.intersection(other)
  102:         expected = Index(np.sort(np.intersect1d(index_large.values, other.values)))
  103:         tm.assert_index_equal(result, expected)
  104: 
  105:         result = other.intersection(index_large)
  106:         expected = Index(
  107:             np.sort(np.asarray(np.intersect1d(index_large.values, other.values)))
  108:         )
  109:         tm.assert_index_equal(result, expected)
  110: 
  111:     @pytest.mark.parametrize(
  112:         "index2,keeps_name",
  113:         [
  114:             (Index([4, 7, 6, 5, 3], name="index"), True),
  115:             (Index([4, 7, 6, 5, 3], name="other"), False),
  116:         ],
  117:     )
  118:     def test_intersection_monotonic(self, index2, keeps_name, sort):
  119:         index1 = Index([5, 3, 2, 4, 1], name="index")
  120:         expected = Index([5, 3, 4])
  121: 
  122:         if keeps_name:
  123:             expected.name = "index"
  124: 
  125:         result = index1.intersection(index2, sort=sort)
  126:         if sort is None:
  127:             expected = expected.sort_values()
  128:         tm.assert_index_equal(result, expected)
  129: 
  130:     def test_symmetric_difference(self, sort):
  131:         # smoke
  132:         index1 = Index([5, 2, 3, 4], name="index1")
  133:         index2 = Index([2, 3, 4, 1])
  134:         result = index1.symmetric_difference(index2, sort=sort)
  135:         expected = Index([5, 1])
  136:         if sort is not None:
  137:             tm.assert_index_equal(result, expected)
  138:         else:
  139:             tm.assert_index_equal(result, expected.sort_values())
  140:         assert result.name is None
  141:         if sort is None:
  142:             expected = expected.sort_values()
  143:         tm.assert_index_equal(result, expected)
  144: 
  145: 
  146: class TestSetOpsSort:
  147:     @pytest.mark.parametrize("slice_", [slice(None), slice(0)])
  148:     def test_union_sort_other_special(self, slice_):
  149:         # https://github.com/pandas-dev/pandas/issues/24959
  150: 
  151:         idx = Index([1, 0, 2])
  152:         # default, sort=None
  153:         other = idx[slice_]
  154:         tm.assert_index_equal(idx.union(other), idx)
  155:         tm.assert_index_equal(other.union(idx), idx)
  156: 
  157:         # sort=False
  158:         tm.assert_index_equal(idx.union(other, sort=False), idx)
  159: 
  160:     @pytest.mark.parametrize("slice_", [slice(None), slice(0)])
  161:     def test_union_sort_special_true(self, slice_):
  162:         idx = Index([1, 0, 2])
  163:         # default, sort=None
  164:         other = idx[slice_]
  165: 
  166:         result = idx.union(other, sort=True)
  167:         expected = Index([0, 1, 2])
  168:         tm.assert_index_equal(result, expected)
