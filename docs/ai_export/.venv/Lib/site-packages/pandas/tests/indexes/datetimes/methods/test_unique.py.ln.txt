    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4: )
    5: 
    6: from pandas import (
    7:     DatetimeIndex,
    8:     NaT,
    9:     Timestamp,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_unique(tz_naive_fixture):
   15:     idx = DatetimeIndex(["2017"] * 2, tz=tz_naive_fixture)
   16:     expected = idx[:1]
   17: 
   18:     result = idx.unique()
   19:     tm.assert_index_equal(result, expected)
   20:     # GH#21737
   21:     # Ensure the underlying data is consistent
   22:     assert result[0] == expected[0]
   23: 
   24: 
   25: def test_index_unique(rand_series_with_duplicate_datetimeindex):
   26:     dups = rand_series_with_duplicate_datetimeindex
   27:     index = dups.index
   28: 
   29:     uniques = index.unique()
   30:     expected = DatetimeIndex(
   31:         [
   32:             datetime(2000, 1, 2),
   33:             datetime(2000, 1, 3),
   34:             datetime(2000, 1, 4),
   35:             datetime(2000, 1, 5),
   36:         ],
   37:         dtype=index.dtype,
   38:     )
   39:     assert uniques.dtype == index.dtype  # sanity
   40:     tm.assert_index_equal(uniques, expected)
   41:     assert index.nunique() == 4
   42: 
   43:     # GH#2563
   44:     assert isinstance(uniques, DatetimeIndex)
   45: 
   46:     dups_local = index.tz_localize("US/Eastern")
   47:     dups_local.name = "foo"
   48:     result = dups_local.unique()
   49:     expected = DatetimeIndex(expected, name="foo")
   50:     expected = expected.tz_localize("US/Eastern")
   51:     assert result.tz is not None
   52:     assert result.name == "foo"
   53:     tm.assert_index_equal(result, expected)
   54: 
   55: 
   56: def test_index_unique2():
   57:     # NaT, note this is excluded
   58:     arr = [1370745748 + t for t in range(20)] + [NaT._value]
   59:     idx = DatetimeIndex(arr * 3)
   60:     tm.assert_index_equal(idx.unique(), DatetimeIndex(arr))
   61:     assert idx.nunique() == 20
   62:     assert idx.nunique(dropna=False) == 21
   63: 
   64: 
   65: def test_index_unique3():
   66:     arr = [
   67:         Timestamp("2013-06-09 02:42:28") + timedelta(seconds=t) for t in range(20)
   68:     ] + [NaT]
   69:     idx = DatetimeIndex(arr * 3)
   70:     tm.assert_index_equal(idx.unique(), DatetimeIndex(arr))
   71:     assert idx.nunique() == 20
   72:     assert idx.nunique(dropna=False) == 21
   73: 
   74: 
   75: def test_is_unique_monotonic(rand_series_with_duplicate_datetimeindex):
   76:     index = rand_series_with_duplicate_datetimeindex.index
   77:     assert not index.is_unique
