    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     to_datetime,
    7:     to_timedelta,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestAstype:
   13:     def test_astype_float64_to_uint64(self):
   14:         # GH#45309 used to incorrectly return Index with int64 dtype
   15:         idx = Index([0.0, 5.0, 10.0, 15.0, 20.0], dtype=np.float64)
   16:         result = idx.astype("u8")
   17:         expected = Index([0, 5, 10, 15, 20], dtype=np.uint64)
   18:         tm.assert_index_equal(result, expected, exact=True)
   19: 
   20:         idx_with_negatives = idx - 10
   21:         with pytest.raises(ValueError, match="losslessly"):
   22:             idx_with_negatives.astype(np.uint64)
   23: 
   24:     def test_astype_float64_to_object(self):
   25:         float_index = Index([0.0, 2.5, 5.0, 7.5, 10.0], dtype=np.float64)
   26:         result = float_index.astype(object)
   27:         assert result.equals(float_index)
   28:         assert float_index.equals(result)
   29:         assert isinstance(result, Index) and result.dtype == object
   30: 
   31:     def test_astype_float64_mixed_to_object(self):
   32:         # mixed int-float
   33:         idx = Index([1.5, 2, 3, 4, 5], dtype=np.float64)
   34:         idx.name = "foo"
   35:         result = idx.astype(object)
   36:         assert result.equals(idx)
   37:         assert idx.equals(result)
   38:         assert isinstance(result, Index) and result.dtype == object
   39: 
   40:     @pytest.mark.parametrize("dtype", ["int16", "int32", "int64"])
   41:     def test_astype_float64_to_int_dtype(self, dtype):
   42:         # GH#12881
   43:         # a float astype int
   44:         idx = Index([0, 1, 2], dtype=np.float64)
   45:         result = idx.astype(dtype)
   46:         expected = Index([0, 1, 2], dtype=dtype)
   47:         tm.assert_index_equal(result, expected, exact=True)
   48: 
   49:         idx = Index([0, 1.1, 2], dtype=np.float64)
   50:         result = idx.astype(dtype)
   51:         expected = Index([0, 1, 2], dtype=dtype)
   52:         tm.assert_index_equal(result, expected, exact=True)
   53: 
   54:     @pytest.mark.parametrize("dtype", ["float32", "float64"])
   55:     def test_astype_float64_to_float_dtype(self, dtype):
   56:         # GH#12881
   57:         # a float astype int
   58:         idx = Index([0, 1, 2], dtype=np.float64)
   59:         result = idx.astype(dtype)
   60:         assert isinstance(result, Index) and result.dtype == dtype
   61: 
   62:     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
   63:     def test_astype_float_to_datetimelike(self, dtype):
   64:         # GH#49660 pre-2.0 Index.astype from floating to M8/m8/Period raised,
   65:         #  inconsistent with Series.astype
   66:         idx = Index([0, 1.1, 2], dtype=np.float64)
   67: 
   68:         result = idx.astype(dtype)
   69:         if dtype[0] == "M":
   70:             expected = to_datetime(idx.values)
   71:         else:
   72:             expected = to_timedelta(idx.values)
   73:         tm.assert_index_equal(result, expected)
   74: 
   75:         # check that we match Series behavior
   76:         result = idx.to_series().set_axis(range(3)).astype(dtype)
   77:         expected = expected.to_series().set_axis(range(3))
   78:         tm.assert_series_equal(result, expected)
   79: 
   80:     @pytest.mark.parametrize("dtype", [int, "int16", "int32", "int64"])
   81:     @pytest.mark.parametrize("non_finite", [np.inf, np.nan])
   82:     def test_cannot_cast_inf_to_int(self, non_finite, dtype):
   83:         # GH#13149
   84:         idx = Index([1, 2, non_finite], dtype=np.float64)
   85: 
   86:         msg = r"Cannot convert non-finite values \(NA or inf\) to integer"
   87:         with pytest.raises(ValueError, match=msg):
   88:             idx.astype(dtype)
   89: 
   90:     def test_astype_from_object(self):
   91:         index = Index([1.0, np.nan, 0.2], dtype="object")
   92:         result = index.astype(float)
   93:         expected = Index([1.0, np.nan, 0.2], dtype=np.float64)
   94:         assert result.dtype == expected.dtype
   95:         tm.assert_index_equal(result, expected)
