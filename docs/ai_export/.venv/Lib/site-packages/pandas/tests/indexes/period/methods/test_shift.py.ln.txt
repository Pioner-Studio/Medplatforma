    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     PeriodIndex,
    6:     period_range,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestPeriodIndexShift:
   12:     # ---------------------------------------------------------------
   13:     # PeriodIndex.shift is used by __add__ and __sub__
   14: 
   15:     def test_pi_shift_ndarray(self):
   16:         idx = PeriodIndex(
   17:             ["2011-01", "2011-02", "NaT", "2011-04"], freq="M", name="idx"
   18:         )
   19:         result = idx.shift(np.array([1, 2, 3, 4]))
   20:         expected = PeriodIndex(
   21:             ["2011-02", "2011-04", "NaT", "2011-08"], freq="M", name="idx"
   22:         )
   23:         tm.assert_index_equal(result, expected)
   24: 
   25:         result = idx.shift(np.array([1, -2, 3, -4]))
   26:         expected = PeriodIndex(
   27:             ["2011-02", "2010-12", "NaT", "2010-12"], freq="M", name="idx"
   28:         )
   29:         tm.assert_index_equal(result, expected)
   30: 
   31:     def test_shift(self):
   32:         pi1 = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
   33:         pi2 = period_range(freq="Y", start="1/1/2002", end="12/1/2010")
   34: 
   35:         tm.assert_index_equal(pi1.shift(0), pi1)
   36: 
   37:         assert len(pi1) == len(pi2)
   38:         tm.assert_index_equal(pi1.shift(1), pi2)
   39: 
   40:         pi1 = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
   41:         pi2 = period_range(freq="Y", start="1/1/2000", end="12/1/2008")
   42:         assert len(pi1) == len(pi2)
   43:         tm.assert_index_equal(pi1.shift(-1), pi2)
   44: 
   45:         pi1 = period_range(freq="M", start="1/1/2001", end="12/1/2009")
   46:         pi2 = period_range(freq="M", start="2/1/2001", end="1/1/2010")
   47:         assert len(pi1) == len(pi2)
   48:         tm.assert_index_equal(pi1.shift(1), pi2)
   49: 
   50:         pi1 = period_range(freq="M", start="1/1/2001", end="12/1/2009")
   51:         pi2 = period_range(freq="M", start="12/1/2000", end="11/1/2009")
   52:         assert len(pi1) == len(pi2)
   53:         tm.assert_index_equal(pi1.shift(-1), pi2)
   54: 
   55:         pi1 = period_range(freq="D", start="1/1/2001", end="12/1/2009")
   56:         pi2 = period_range(freq="D", start="1/2/2001", end="12/2/2009")
   57:         assert len(pi1) == len(pi2)
   58:         tm.assert_index_equal(pi1.shift(1), pi2)
   59: 
   60:         pi1 = period_range(freq="D", start="1/1/2001", end="12/1/2009")
   61:         pi2 = period_range(freq="D", start="12/31/2000", end="11/30/2009")
   62:         assert len(pi1) == len(pi2)
   63:         tm.assert_index_equal(pi1.shift(-1), pi2)
   64: 
   65:     def test_shift_corner_cases(self):
   66:         # GH#9903
   67:         idx = PeriodIndex([], name="xxx", freq="h")
   68: 
   69:         msg = "`freq` argument is not supported for PeriodIndex.shift"
   70:         with pytest.raises(TypeError, match=msg):
   71:             # period shift doesn't accept freq
   72:             idx.shift(1, freq="h")
   73: 
   74:         tm.assert_index_equal(idx.shift(0), idx)
   75:         tm.assert_index_equal(idx.shift(3), idx)
   76: 
   77:         idx = PeriodIndex(
   78:             ["2011-01-01 10:00", "2011-01-01 11:00", "2011-01-01 12:00"],
   79:             name="xxx",
   80:             freq="h",
   81:         )
   82:         tm.assert_index_equal(idx.shift(0), idx)
   83:         exp = PeriodIndex(
   84:             ["2011-01-01 13:00", "2011-01-01 14:00", "2011-01-01 15:00"],
   85:             name="xxx",
   86:             freq="h",
   87:         )
   88:         tm.assert_index_equal(idx.shift(3), exp)
   89:         exp = PeriodIndex(
   90:             ["2011-01-01 07:00", "2011-01-01 08:00", "2011-01-01 09:00"],
   91:             name="xxx",
   92:             freq="h",
   93:         )
   94:         tm.assert_index_equal(idx.shift(-3), exp)
   95: 
   96:     def test_shift_nat(self):
   97:         idx = PeriodIndex(
   98:             ["2011-01", "2011-02", "NaT", "2011-04"], freq="M", name="idx"
   99:         )
  100:         result = idx.shift(1)
  101:         expected = PeriodIndex(
  102:             ["2011-02", "2011-03", "NaT", "2011-05"], freq="M", name="idx"
  103:         )
  104:         tm.assert_index_equal(result, expected)
  105:         assert result.name == expected.name
  106: 
  107:     def test_shift_gh8083(self):
  108:         # test shift for PeriodIndex
  109:         # GH#8083
  110:         drange = period_range("20130101", periods=5, freq="D")
  111:         result = drange.shift(1)
  112:         expected = PeriodIndex(
  113:             ["2013-01-02", "2013-01-03", "2013-01-04", "2013-01-05", "2013-01-06"],
  114:             freq="D",
  115:         )
  116:         tm.assert_index_equal(result, expected)
  117: 
  118:     def test_shift_periods(self):
  119:         # GH #22458 : argument 'n' was deprecated in favor of 'periods'
  120:         idx = period_range(freq="Y", start="1/1/2001", end="12/1/2009")
  121:         tm.assert_index_equal(idx.shift(periods=0), idx)
  122:         tm.assert_index_equal(idx.shift(0), idx)
