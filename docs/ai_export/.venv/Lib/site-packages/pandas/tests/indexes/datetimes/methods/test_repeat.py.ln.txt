    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DatetimeIndex,
    6:     Timestamp,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: class TestRepeat:
   13:     def test_repeat_range(self, tz_naive_fixture):
   14:         rng = date_range("1/1/2000", "1/1/2001")
   15: 
   16:         result = rng.repeat(5)
   17:         assert result.freq is None
   18:         assert len(result) == 5 * len(rng)
   19: 
   20:     def test_repeat_range2(self, tz_naive_fixture, unit):
   21:         tz = tz_naive_fixture
   22:         index = date_range("2001-01-01", periods=2, freq="D", tz=tz, unit=unit)
   23:         exp = DatetimeIndex(
   24:             ["2001-01-01", "2001-01-01", "2001-01-02", "2001-01-02"], tz=tz
   25:         ).as_unit(unit)
   26:         for res in [index.repeat(2), np.repeat(index, 2)]:
   27:             tm.assert_index_equal(res, exp)
   28:             assert res.freq is None
   29: 
   30:     def test_repeat_range3(self, tz_naive_fixture, unit):
   31:         tz = tz_naive_fixture
   32:         index = date_range("2001-01-01", periods=2, freq="2D", tz=tz, unit=unit)
   33:         exp = DatetimeIndex(
   34:             ["2001-01-01", "2001-01-01", "2001-01-03", "2001-01-03"], tz=tz
   35:         ).as_unit(unit)
   36:         for res in [index.repeat(2), np.repeat(index, 2)]:
   37:             tm.assert_index_equal(res, exp)
   38:             assert res.freq is None
   39: 
   40:     def test_repeat_range4(self, tz_naive_fixture, unit):
   41:         tz = tz_naive_fixture
   42:         index = DatetimeIndex(["2001-01-01", "NaT", "2003-01-01"], tz=tz).as_unit(unit)
   43:         exp = DatetimeIndex(
   44:             [
   45:                 "2001-01-01",
   46:                 "2001-01-01",
   47:                 "2001-01-01",
   48:                 "NaT",
   49:                 "NaT",
   50:                 "NaT",
   51:                 "2003-01-01",
   52:                 "2003-01-01",
   53:                 "2003-01-01",
   54:             ],
   55:             tz=tz,
   56:         ).as_unit(unit)
   57:         for res in [index.repeat(3), np.repeat(index, 3)]:
   58:             tm.assert_index_equal(res, exp)
   59:             assert res.freq is None
   60: 
   61:     def test_repeat(self, tz_naive_fixture, unit):
   62:         tz = tz_naive_fixture
   63:         reps = 2
   64:         msg = "the 'axis' parameter is not supported"
   65: 
   66:         rng = date_range(start="2016-01-01", periods=2, freq="30Min", tz=tz, unit=unit)
   67: 
   68:         expected_rng = DatetimeIndex(
   69:             [
   70:                 Timestamp("2016-01-01 00:00:00", tz=tz),
   71:                 Timestamp("2016-01-01 00:00:00", tz=tz),
   72:                 Timestamp("2016-01-01 00:30:00", tz=tz),
   73:                 Timestamp("2016-01-01 00:30:00", tz=tz),
   74:             ]
   75:         ).as_unit(unit)
   76: 
   77:         res = rng.repeat(reps)
   78:         tm.assert_index_equal(res, expected_rng)
   79:         assert res.freq is None
   80: 
   81:         tm.assert_index_equal(np.repeat(rng, reps), expected_rng)
   82:         with pytest.raises(ValueError, match=msg):
   83:             np.repeat(rng, reps, axis=1)
