    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     RangeIndex,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestGetIndexer:
   12:     def test_get_indexer(self):
   13:         index = RangeIndex(start=0, stop=20, step=2)
   14:         target = RangeIndex(10)
   15:         indexer = index.get_indexer(target)
   16:         expected = np.array([0, -1, 1, -1, 2, -1, 3, -1, 4, -1], dtype=np.intp)
   17:         tm.assert_numpy_array_equal(indexer, expected)
   18: 
   19:     def test_get_indexer_pad(self):
   20:         index = RangeIndex(start=0, stop=20, step=2)
   21:         target = RangeIndex(10)
   22:         indexer = index.get_indexer(target, method="pad")
   23:         expected = np.array([0, 0, 1, 1, 2, 2, 3, 3, 4, 4], dtype=np.intp)
   24:         tm.assert_numpy_array_equal(indexer, expected)
   25: 
   26:     def test_get_indexer_backfill(self):
   27:         index = RangeIndex(start=0, stop=20, step=2)
   28:         target = RangeIndex(10)
   29:         indexer = index.get_indexer(target, method="backfill")
   30:         expected = np.array([0, 1, 1, 2, 2, 3, 3, 4, 4, 5], dtype=np.intp)
   31:         tm.assert_numpy_array_equal(indexer, expected)
   32: 
   33:     def test_get_indexer_limit(self):
   34:         # GH#28631
   35:         idx = RangeIndex(4)
   36:         target = RangeIndex(6)
   37:         result = idx.get_indexer(target, method="pad", limit=1)
   38:         expected = np.array([0, 1, 2, 3, 3, -1], dtype=np.intp)
   39:         tm.assert_numpy_array_equal(result, expected)
   40: 
   41:     @pytest.mark.parametrize("stop", [0, -1, -2])
   42:     def test_get_indexer_decreasing(self, stop):
   43:         # GH#28678
   44:         index = RangeIndex(7, stop, -3)
   45:         result = index.get_indexer(range(9))
   46:         expected = np.array([-1, 2, -1, -1, 1, -1, -1, 0, -1], dtype=np.intp)
   47:         tm.assert_numpy_array_equal(result, expected)
   48: 
   49: 
   50: class TestTake:
   51:     def test_take_preserve_name(self):
   52:         index = RangeIndex(1, 5, name="foo")
   53:         taken = index.take([3, 0, 1])
   54:         assert index.name == taken.name
   55: 
   56:     def test_take_fill_value(self):
   57:         # GH#12631
   58:         idx = RangeIndex(1, 4, name="xxx")
   59:         result = idx.take(np.array([1, 0, -1]))
   60:         expected = Index([2, 1, 3], dtype=np.int64, name="xxx")
   61:         tm.assert_index_equal(result, expected)
   62: 
   63:         # fill_value
   64:         msg = "Unable to fill values because RangeIndex cannot contain NA"
   65:         with pytest.raises(ValueError, match=msg):
   66:             idx.take(np.array([1, 0, -1]), fill_value=True)
   67: 
   68:         # allow_fill=False
   69:         result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
   70:         expected = Index([2, 1, 3], dtype=np.int64, name="xxx")
   71:         tm.assert_index_equal(result, expected)
   72: 
   73:         msg = "Unable to fill values because RangeIndex cannot contain NA"
   74:         with pytest.raises(ValueError, match=msg):
   75:             idx.take(np.array([1, 0, -2]), fill_value=True)
   76:         with pytest.raises(ValueError, match=msg):
   77:             idx.take(np.array([1, 0, -5]), fill_value=True)
   78: 
   79:     def test_take_raises_index_error(self):
   80:         idx = RangeIndex(1, 4, name="xxx")
   81: 
   82:         msg = "index -5 is out of bounds for (axis 0 with )?size 3"
   83:         with pytest.raises(IndexError, match=msg):
   84:             idx.take(np.array([1, -5]))
   85: 
   86:         msg = "index -4 is out of bounds for (axis 0 with )?size 3"
   87:         with pytest.raises(IndexError, match=msg):
   88:             idx.take(np.array([1, -4]))
   89: 
   90:         # no errors
   91:         result = idx.take(np.array([1, -3]))
   92:         expected = Index([2, 1], dtype=np.int64, name="xxx")
   93:         tm.assert_index_equal(result, expected)
   94: 
   95:     def test_take_accepts_empty_array(self):
   96:         idx = RangeIndex(1, 4, name="foo")
   97:         result = idx.take(np.array([]))
   98:         expected = Index([], dtype=np.int64, name="foo")
   99:         tm.assert_index_equal(result, expected)
  100: 
  101:         # empty index
  102:         idx = RangeIndex(0, name="foo")
  103:         result = idx.take(np.array([]))
  104:         expected = Index([], dtype=np.int64, name="foo")
  105:         tm.assert_index_equal(result, expected)
  106: 
  107:     def test_take_accepts_non_int64_array(self):
  108:         idx = RangeIndex(1, 4, name="foo")
  109:         result = idx.take(np.array([2, 1], dtype=np.uint32))
  110:         expected = Index([3, 2], dtype=np.int64, name="foo")
  111:         tm.assert_index_equal(result, expected)
  112: 
  113:     def test_take_when_index_has_step(self):
  114:         idx = RangeIndex(1, 11, 3, name="foo")  # [1, 4, 7, 10]
  115:         result = idx.take(np.array([1, 0, -1, -4]))
  116:         expected = Index([4, 1, 10, 1], dtype=np.int64, name="foo")
  117:         tm.assert_index_equal(result, expected)
  118: 
  119:     def test_take_when_index_has_negative_step(self):
  120:         idx = RangeIndex(11, -4, -2, name="foo")  # [11, 9, 7, 5, 3, 1, -1, -3]
  121:         result = idx.take(np.array([1, 0, -1, -8]))
  122:         expected = Index([9, 11, -3, 11], dtype=np.int64, name="foo")
  123:         tm.assert_index_equal(result, expected)
  124: 
  125: 
  126: class TestWhere:
  127:     def test_where_putmask_range_cast(self):
  128:         # GH#43240
  129:         idx = RangeIndex(0, 5, name="test")
  130: 
  131:         mask = np.array([True, True, False, False, False])
  132:         result = idx.putmask(mask, 10)
  133:         expected = Index([10, 10, 2, 3, 4], dtype=np.int64, name="test")
  134:         tm.assert_index_equal(result, expected)
  135: 
  136:         result = idx.where(~mask, 10)
  137:         tm.assert_index_equal(result, expected)
