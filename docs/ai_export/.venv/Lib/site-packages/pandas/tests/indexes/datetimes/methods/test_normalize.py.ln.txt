    1: from dateutil.tz import tzlocal
    2: import numpy as np
    3: import pytest
    4: 
    5: import pandas.util._test_decorators as td
    6: 
    7: from pandas import (
    8:     DatetimeIndex,
    9:     NaT,
   10:     Timestamp,
   11:     date_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestNormalize:
   17:     def test_normalize(self):
   18:         rng = date_range("1/1/2000 9:30", periods=10, freq="D")
   19: 
   20:         result = rng.normalize()
   21:         expected = date_range("1/1/2000", periods=10, freq="D")
   22:         tm.assert_index_equal(result, expected)
   23: 
   24:         arr_ns = np.array([1380585623454345752, 1380585612343234312]).astype(
   25:             "datetime64[ns]"
   26:         )
   27:         rng_ns = DatetimeIndex(arr_ns)
   28:         rng_ns_normalized = rng_ns.normalize()
   29: 
   30:         arr_ns = np.array([1380585600000000000, 1380585600000000000]).astype(
   31:             "datetime64[ns]"
   32:         )
   33:         expected = DatetimeIndex(arr_ns)
   34:         tm.assert_index_equal(rng_ns_normalized, expected)
   35: 
   36:         assert result.is_normalized
   37:         assert not rng.is_normalized
   38: 
   39:     def test_normalize_nat(self):
   40:         dti = DatetimeIndex([NaT, Timestamp("2018-01-01 01:00:00")])
   41:         result = dti.normalize()
   42:         expected = DatetimeIndex([NaT, Timestamp("2018-01-01")])
   43:         tm.assert_index_equal(result, expected)
   44: 
   45:     def test_normalize_tz(self):
   46:         rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz="US/Eastern")
   47: 
   48:         result = rng.normalize()  # does not preserve freq
   49:         expected = date_range("1/1/2000", periods=10, freq="D", tz="US/Eastern")
   50:         tm.assert_index_equal(result, expected._with_freq(None))
   51: 
   52:         assert result.is_normalized
   53:         assert not rng.is_normalized
   54: 
   55:         rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz="UTC")
   56: 
   57:         result = rng.normalize()
   58:         expected = date_range("1/1/2000", periods=10, freq="D", tz="UTC")
   59:         tm.assert_index_equal(result, expected)
   60: 
   61:         assert result.is_normalized
   62:         assert not rng.is_normalized
   63: 
   64:         rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz=tzlocal())
   65:         result = rng.normalize()  # does not preserve freq
   66:         expected = date_range("1/1/2000", periods=10, freq="D", tz=tzlocal())
   67:         tm.assert_index_equal(result, expected._with_freq(None))
   68: 
   69:         assert result.is_normalized
   70:         assert not rng.is_normalized
   71: 
   72:     @td.skip_if_windows
   73:     @pytest.mark.parametrize(
   74:         "timezone",
   75:         [
   76:             "US/Pacific",
   77:             "US/Eastern",
   78:             "UTC",
   79:             "Asia/Kolkata",
   80:             "Asia/Shanghai",
   81:             "Australia/Canberra",
   82:         ],
   83:     )
   84:     def test_normalize_tz_local(self, timezone):
   85:         # GH#13459
   86:         with tm.set_timezone(timezone):
   87:             rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz=tzlocal())
   88: 
   89:             result = rng.normalize()
   90:             expected = date_range("1/1/2000", periods=10, freq="D", tz=tzlocal())
   91:             expected = expected._with_freq(None)
   92:             tm.assert_index_equal(result, expected)
   93: 
   94:             assert result.is_normalized
   95:             assert not rng.is_normalized
