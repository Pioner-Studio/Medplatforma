    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DatetimeIndex,
    8:     NaT,
    9:     PeriodIndex,
   10:     Timedelta,
   11:     Timestamp,
   12:     date_range,
   13:     period_range,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestToTimestamp:
   19:     def test_to_timestamp_non_contiguous(self):
   20:         # GH#44100
   21:         dti = date_range("2021-10-18", periods=9, freq="D")
   22:         pi = dti.to_period()
   23: 
   24:         result = pi[::2].to_timestamp()
   25:         expected = dti[::2]
   26:         tm.assert_index_equal(result, expected)
   27: 
   28:         result = pi._data[::2].to_timestamp()
   29:         expected = dti._data[::2]
   30:         # TODO: can we get the freq to round-trip?
   31:         tm.assert_datetime_array_equal(result, expected, check_freq=False)
   32: 
   33:         result = pi[::-1].to_timestamp()
   34:         expected = dti[::-1]
   35:         tm.assert_index_equal(result, expected)
   36: 
   37:         result = pi._data[::-1].to_timestamp()
   38:         expected = dti._data[::-1]
   39:         tm.assert_datetime_array_equal(result, expected, check_freq=False)
   40: 
   41:         result = pi[::2][::-1].to_timestamp()
   42:         expected = dti[::2][::-1]
   43:         tm.assert_index_equal(result, expected)
   44: 
   45:         result = pi._data[::2][::-1].to_timestamp()
   46:         expected = dti._data[::2][::-1]
   47:         tm.assert_datetime_array_equal(result, expected, check_freq=False)
   48: 
   49:     def test_to_timestamp_freq(self):
   50:         idx = period_range("2017", periods=12, freq="Y-DEC")
   51:         result = idx.to_timestamp()
   52:         expected = date_range("2017", periods=12, freq="YS-JAN")
   53:         tm.assert_index_equal(result, expected)
   54: 
   55:     def test_to_timestamp_pi_nat(self):
   56:         # GH#7228
   57:         index = PeriodIndex(["NaT", "2011-01", "2011-02"], freq="M", name="idx")
   58: 
   59:         result = index.to_timestamp("D")
   60:         expected = DatetimeIndex(
   61:             [NaT, datetime(2011, 1, 1), datetime(2011, 2, 1)],
   62:             dtype="M8[ns]",
   63:             name="idx",
   64:         )
   65:         tm.assert_index_equal(result, expected)
   66:         assert result.name == "idx"
   67: 
   68:         result2 = result.to_period(freq="M")
   69:         tm.assert_index_equal(result2, index)
   70:         assert result2.name == "idx"
   71: 
   72:         result3 = result.to_period(freq="3M")
   73:         exp = PeriodIndex(["NaT", "2011-01", "2011-02"], freq="3M", name="idx")
   74:         tm.assert_index_equal(result3, exp)
   75:         assert result3.freqstr == "3M"
   76: 
   77:         msg = "Frequency must be positive, because it represents span: -2Y"
   78:         with pytest.raises(ValueError, match=msg):
   79:             result.to_period(freq="-2Y")
   80: 
   81:     def test_to_timestamp_preserve_name(self):
   82:         index = period_range(freq="Y", start="1/1/2001", end="12/1/2009", name="foo")
   83:         assert index.name == "foo"
   84: 
   85:         conv = index.to_timestamp("D")
   86:         assert conv.name == "foo"
   87: 
   88:     def test_to_timestamp_quarterly_bug(self):
   89:         years = np.arange(1960, 2000).repeat(4)
   90:         quarters = np.tile(list(range(1, 5)), 40)
   91: 
   92:         pindex = PeriodIndex.from_fields(year=years, quarter=quarters)
   93: 
   94:         stamps = pindex.to_timestamp("D", "end")
   95:         expected = DatetimeIndex([x.to_timestamp("D", "end") for x in pindex])
   96:         tm.assert_index_equal(stamps, expected)
   97:         assert stamps.freq == expected.freq
   98: 
   99:     def test_to_timestamp_pi_mult(self):
  100:         idx = PeriodIndex(["2011-01", "NaT", "2011-02"], freq="2M", name="idx")
  101: 
  102:         result = idx.to_timestamp()
  103:         expected = DatetimeIndex(
  104:             ["2011-01-01", "NaT", "2011-02-01"], dtype="M8[ns]", name="idx"
  105:         )
  106:         tm.assert_index_equal(result, expected)
  107: 
  108:         result = idx.to_timestamp(how="E")
  109:         expected = DatetimeIndex(
  110:             ["2011-02-28", "NaT", "2011-03-31"], dtype="M8[ns]", name="idx"
  111:         )
  112:         expected = expected + Timedelta(1, "D") - Timedelta(1, "ns")
  113:         tm.assert_index_equal(result, expected)
  114: 
  115:     def test_to_timestamp_pi_combined(self):
  116:         idx = period_range(start="2011", periods=2, freq="1D1h", name="idx")
  117: 
  118:         result = idx.to_timestamp()
  119:         expected = DatetimeIndex(
  120:             ["2011-01-01 00:00", "2011-01-02 01:00"], dtype="M8[ns]", name="idx"
  121:         )
  122:         tm.assert_index_equal(result, expected)
  123: 
  124:         result = idx.to_timestamp(how="E")
  125:         expected = DatetimeIndex(
  126:             ["2011-01-02 00:59:59", "2011-01-03 01:59:59"], name="idx", dtype="M8[ns]"
  127:         )
  128:         expected = expected + Timedelta(1, "s") - Timedelta(1, "ns")
  129:         tm.assert_index_equal(result, expected)
  130: 
  131:         result = idx.to_timestamp(how="E", freq="h")
  132:         expected = DatetimeIndex(
  133:             ["2011-01-02 00:00", "2011-01-03 01:00"], dtype="M8[ns]", name="idx"
  134:         )
  135:         expected = expected + Timedelta(1, "h") - Timedelta(1, "ns")
  136:         tm.assert_index_equal(result, expected)
  137: 
  138:     def test_to_timestamp_1703(self):
  139:         index = period_range("1/1/2012", periods=4, freq="D")
  140: 
  141:         result = index.to_timestamp()
  142:         assert result[0] == Timestamp("1/1/2012")
