    1: """
    2: Tests for TimedeltaIndex methods behaving like their Timedelta counterparts
    3: """
    4: 
    5: import numpy as np
    6: import pytest
    7: 
    8: from pandas._libs.tslibs.offsets import INVALID_FREQ_ERR_MSG
    9: 
   10: from pandas import (
   11:     Index,
   12:     Series,
   13:     Timedelta,
   14:     TimedeltaIndex,
   15:     timedelta_range,
   16: )
   17: import pandas._testing as tm
   18: 
   19: 
   20: class TestVectorizedTimedelta:
   21:     def test_tdi_total_seconds(self):
   22:         # GH#10939
   23:         # test index
   24:         rng = timedelta_range("1 days, 10:11:12.100123456", periods=2, freq="s")
   25:         expt = [
   26:             1 * 86400 + 10 * 3600 + 11 * 60 + 12 + 100123456.0 / 1e9,
   27:             1 * 86400 + 10 * 3600 + 11 * 60 + 13 + 100123456.0 / 1e9,
   28:         ]
   29:         tm.assert_almost_equal(rng.total_seconds(), Index(expt))
   30: 
   31:         # test Series
   32:         ser = Series(rng)
   33:         s_expt = Series(expt, index=[0, 1])
   34:         tm.assert_series_equal(ser.dt.total_seconds(), s_expt)
   35: 
   36:         # with nat
   37:         ser[1] = np.nan
   38:         s_expt = Series(
   39:             [1 * 86400 + 10 * 3600 + 11 * 60 + 12 + 100123456.0 / 1e9, np.nan],
   40:             index=[0, 1],
   41:         )
   42:         tm.assert_series_equal(ser.dt.total_seconds(), s_expt)
   43: 
   44:     def test_tdi_total_seconds_all_nat(self):
   45:         # with both nat
   46:         ser = Series([np.nan, np.nan], dtype="timedelta64[ns]")
   47:         result = ser.dt.total_seconds()
   48:         expected = Series([np.nan, np.nan])
   49:         tm.assert_series_equal(result, expected)
   50: 
   51:     def test_tdi_round(self):
   52:         td = timedelta_range(start="16801 days", periods=5, freq="30Min")
   53:         elt = td[1]
   54: 
   55:         expected_rng = TimedeltaIndex(
   56:             [
   57:                 Timedelta("16801 days 00:00:00"),
   58:                 Timedelta("16801 days 00:00:00"),
   59:                 Timedelta("16801 days 01:00:00"),
   60:                 Timedelta("16801 days 02:00:00"),
   61:                 Timedelta("16801 days 02:00:00"),
   62:             ]
   63:         )
   64:         expected_elt = expected_rng[1]
   65: 
   66:         tm.assert_index_equal(td.round(freq="h"), expected_rng)
   67:         assert elt.round(freq="h") == expected_elt
   68: 
   69:         msg = INVALID_FREQ_ERR_MSG
   70:         with pytest.raises(ValueError, match=msg):
   71:             td.round(freq="foo")
   72:         with pytest.raises(ValueError, match=msg):
   73:             elt.round(freq="foo")
   74: 
   75:         msg = "<MonthEnd> is a non-fixed frequency"
   76:         with pytest.raises(ValueError, match=msg):
   77:             td.round(freq="ME")
   78:         with pytest.raises(ValueError, match=msg):
   79:             elt.round(freq="ME")
   80: 
   81:     @pytest.mark.parametrize(
   82:         "freq,msg",
   83:         [
   84:             ("YE", "<YearEnd: month=12> is a non-fixed frequency"),
   85:             ("ME", "<MonthEnd> is a non-fixed frequency"),
   86:             ("foobar", "Invalid frequency: foobar"),
   87:         ],
   88:     )
   89:     def test_tdi_round_invalid(self, freq, msg):
   90:         t1 = timedelta_range("1 days", periods=3, freq="1 min 2 s 3 us")
   91: 
   92:         with pytest.raises(ValueError, match=msg):
   93:             t1.round(freq)
   94:         with pytest.raises(ValueError, match=msg):
   95:             # Same test for TimedeltaArray
   96:             t1._data.round(freq)
   97: 
   98:     # TODO: de-duplicate with test_tdi_round
   99:     def test_round(self):
  100:         t1 = timedelta_range("1 days", periods=3, freq="1 min 2 s 3 us")
  101:         t2 = -1 * t1
  102:         t1a = timedelta_range("1 days", periods=3, freq="1 min 2 s")
  103:         t1c = TimedeltaIndex(np.array([1, 1, 1], "m8[D]")).as_unit("ns")
  104: 
  105:         # note that negative times round DOWN! so don't give whole numbers
  106:         for freq, s1, s2 in [
  107:             ("ns", t1, t2),
  108:             ("us", t1, t2),
  109:             (
  110:                 "ms",
  111:                 t1a,
  112:                 TimedeltaIndex(
  113:                     ["-1 days +00:00:00", "-2 days +23:58:58", "-2 days +23:57:56"]
  114:                 ),
  115:             ),
  116:             (
  117:                 "s",
  118:                 t1a,
  119:                 TimedeltaIndex(
  120:                     ["-1 days +00:00:00", "-2 days +23:58:58", "-2 days +23:57:56"]
  121:                 ),
  122:             ),
  123:             ("12min", t1c, TimedeltaIndex(["-1 days", "-1 days", "-1 days"])),
  124:             ("h", t1c, TimedeltaIndex(["-1 days", "-1 days", "-1 days"])),
  125:             ("d", t1c, -1 * t1c),
  126:         ]:
  127:             r1 = t1.round(freq)
  128:             tm.assert_index_equal(r1, s1)
  129:             r2 = t2.round(freq)
  130:             tm.assert_index_equal(r2, s2)
  131: 
  132:     def test_components(self):
  133:         rng = timedelta_range("1 days, 10:11:12", periods=2, freq="s")
  134:         rng.components
  135: 
  136:         # with nat
  137:         s = Series(rng)
  138:         s[1] = np.nan
  139: 
  140:         result = s.dt.components
  141:         assert not result.iloc[0].isna().all()
  142:         assert result.iloc[1].isna().all()
