    1: import pytest
    2: 
    3: from pandas import (
    4:     CategoricalIndex,
    5:     Index,
    6: )
    7: import pandas._testing as tm
    8: 
    9: 
   10: class TestAppend:
   11:     @pytest.fixture
   12:     def ci(self):
   13:         categories = list("cab")
   14:         return CategoricalIndex(list("aabbca"), categories=categories, ordered=False)
   15: 
   16:     def test_append(self, ci):
   17:         # append cats with the same categories
   18:         result = ci[:3].append(ci[3:])
   19:         tm.assert_index_equal(result, ci, exact=True)
   20: 
   21:         foos = [ci[:1], ci[1:3], ci[3:]]
   22:         result = foos[0].append(foos[1:])
   23:         tm.assert_index_equal(result, ci, exact=True)
   24: 
   25:     def test_append_empty(self, ci):
   26:         # empty
   27:         result = ci.append([])
   28:         tm.assert_index_equal(result, ci, exact=True)
   29: 
   30:     def test_append_mismatched_categories(self, ci):
   31:         # appending with different categories or reordered is not ok
   32:         msg = "all inputs must be Index"
   33:         with pytest.raises(TypeError, match=msg):
   34:             ci.append(ci.values.set_categories(list("abcd")))
   35:         with pytest.raises(TypeError, match=msg):
   36:             ci.append(ci.values.reorder_categories(list("abc")))
   37: 
   38:     def test_append_category_objects(self, ci):
   39:         # with objects
   40:         result = ci.append(Index(["c", "a"]))
   41:         expected = CategoricalIndex(list("aabbcaca"), categories=ci.categories)
   42:         tm.assert_index_equal(result, expected, exact=True)
   43: 
   44:     def test_append_non_categories(self, ci):
   45:         # invalid objects -> cast to object via concat_compat
   46:         result = ci.append(Index(["a", "d"]))
   47:         expected = Index(["a", "a", "b", "b", "c", "a", "a", "d"])
   48:         tm.assert_index_equal(result, expected, exact=True)
   49: 
   50:     def test_append_object(self, ci):
   51:         # GH#14298 - if base object is not categorical -> coerce to object
   52:         result = Index(["c", "a"]).append(ci)
   53:         expected = Index(list("caaabbca"))
   54:         tm.assert_index_equal(result, expected, exact=True)
   55: 
   56:     def test_append_to_another(self):
   57:         # hits Index._concat
   58:         fst = Index(["a", "b"])
   59:         snd = CategoricalIndex(["d", "e"])
   60:         result = fst.append(snd)
   61:         expected = Index(["a", "b", "d", "e"])
   62:         tm.assert_index_equal(result, expected)
