    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas._testing as tm
    5: from pandas.core.indexes.api import Index
    6: 
    7: 
    8: class TestJoinInt64Index:
    9:     def test_join_non_unique(self):
   10:         left = Index([4, 4, 3, 3])
   11: 
   12:         joined, lidx, ridx = left.join(left, return_indexers=True)
   13: 
   14:         exp_joined = Index([4, 4, 4, 4, 3, 3, 3, 3])
   15:         tm.assert_index_equal(joined, exp_joined)
   16: 
   17:         exp_lidx = np.array([0, 0, 1, 1, 2, 2, 3, 3], dtype=np.intp)
   18:         tm.assert_numpy_array_equal(lidx, exp_lidx)
   19: 
   20:         exp_ridx = np.array([0, 1, 0, 1, 2, 3, 2, 3], dtype=np.intp)
   21:         tm.assert_numpy_array_equal(ridx, exp_ridx)
   22: 
   23:     def test_join_inner(self):
   24:         index = Index(range(0, 20, 2), dtype=np.int64)
   25:         other = Index([7, 12, 25, 1, 2, 5], dtype=np.int64)
   26:         other_mono = Index([1, 2, 5, 7, 12, 25], dtype=np.int64)
   27: 
   28:         # not monotonic
   29:         res, lidx, ridx = index.join(other, how="inner", return_indexers=True)
   30: 
   31:         # no guarantee of sortedness, so sort for comparison purposes
   32:         ind = res.argsort()
   33:         res = res.take(ind)
   34:         lidx = lidx.take(ind)
   35:         ridx = ridx.take(ind)
   36: 
   37:         eres = Index([2, 12], dtype=np.int64)
   38:         elidx = np.array([1, 6], dtype=np.intp)
   39:         eridx = np.array([4, 1], dtype=np.intp)
   40: 
   41:         assert isinstance(res, Index) and res.dtype == np.int64
   42:         tm.assert_index_equal(res, eres)
   43:         tm.assert_numpy_array_equal(lidx, elidx)
   44:         tm.assert_numpy_array_equal(ridx, eridx)
   45: 
   46:         # monotonic
   47:         res, lidx, ridx = index.join(other_mono, how="inner", return_indexers=True)
   48: 
   49:         res2 = index.intersection(other_mono)
   50:         tm.assert_index_equal(res, res2)
   51: 
   52:         elidx = np.array([1, 6], dtype=np.intp)
   53:         eridx = np.array([1, 4], dtype=np.intp)
   54:         assert isinstance(res, Index) and res.dtype == np.int64
   55:         tm.assert_index_equal(res, eres)
   56:         tm.assert_numpy_array_equal(lidx, elidx)
   57:         tm.assert_numpy_array_equal(ridx, eridx)
   58: 
   59:     def test_join_left(self):
   60:         index = Index(range(0, 20, 2), dtype=np.int64)
   61:         other = Index([7, 12, 25, 1, 2, 5], dtype=np.int64)
   62:         other_mono = Index([1, 2, 5, 7, 12, 25], dtype=np.int64)
   63: 
   64:         # not monotonic
   65:         res, lidx, ridx = index.join(other, how="left", return_indexers=True)
   66:         eres = index
   67:         eridx = np.array([-1, 4, -1, -1, -1, -1, 1, -1, -1, -1], dtype=np.intp)
   68: 
   69:         assert isinstance(res, Index) and res.dtype == np.int64
   70:         tm.assert_index_equal(res, eres)
   71:         assert lidx is None
   72:         tm.assert_numpy_array_equal(ridx, eridx)
   73: 
   74:         # monotonic
   75:         res, lidx, ridx = index.join(other_mono, how="left", return_indexers=True)
   76:         eridx = np.array([-1, 1, -1, -1, -1, -1, 4, -1, -1, -1], dtype=np.intp)
   77:         assert isinstance(res, Index) and res.dtype == np.int64
   78:         tm.assert_index_equal(res, eres)
   79:         assert lidx is None
   80:         tm.assert_numpy_array_equal(ridx, eridx)
   81: 
   82:         # non-unique
   83:         idx = Index([1, 1, 2, 5])
   84:         idx2 = Index([1, 2, 5, 7, 9])
   85:         res, lidx, ridx = idx2.join(idx, how="left", return_indexers=True)
   86:         eres = Index([1, 1, 2, 5, 7, 9])  # 1 is in idx2, so it should be x2
   87:         eridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
   88:         elidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
   89:         tm.assert_index_equal(res, eres)
   90:         tm.assert_numpy_array_equal(lidx, elidx)
   91:         tm.assert_numpy_array_equal(ridx, eridx)
   92: 
   93:     def test_join_right(self):
   94:         index = Index(range(0, 20, 2), dtype=np.int64)
   95:         other = Index([7, 12, 25, 1, 2, 5], dtype=np.int64)
   96:         other_mono = Index([1, 2, 5, 7, 12, 25], dtype=np.int64)
   97: 
   98:         # not monotonic
   99:         res, lidx, ridx = index.join(other, how="right", return_indexers=True)
  100:         eres = other
  101:         elidx = np.array([-1, 6, -1, -1, 1, -1], dtype=np.intp)
  102: 
  103:         assert isinstance(other, Index) and other.dtype == np.int64
  104:         tm.assert_index_equal(res, eres)
  105:         tm.assert_numpy_array_equal(lidx, elidx)
  106:         assert ridx is None
  107: 
  108:         # monotonic
  109:         res, lidx, ridx = index.join(other_mono, how="right", return_indexers=True)
  110:         eres = other_mono
  111:         elidx = np.array([-1, 1, -1, -1, 6, -1], dtype=np.intp)
  112:         assert isinstance(other, Index) and other.dtype == np.int64
  113:         tm.assert_index_equal(res, eres)
  114:         tm.assert_numpy_array_equal(lidx, elidx)
  115:         assert ridx is None
  116: 
  117:         # non-unique
  118:         idx = Index([1, 1, 2, 5])
  119:         idx2 = Index([1, 2, 5, 7, 9])
  120:         res, lidx, ridx = idx.join(idx2, how="right", return_indexers=True)
  121:         eres = Index([1, 1, 2, 5, 7, 9])  # 1 is in idx2, so it should be x2
  122:         elidx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
  123:         eridx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
  124:         tm.assert_index_equal(res, eres)
  125:         tm.assert_numpy_array_equal(lidx, elidx)
  126:         tm.assert_numpy_array_equal(ridx, eridx)
  127: 
  128:     def test_join_non_int_index(self):
  129:         index = Index(range(0, 20, 2), dtype=np.int64)
  130:         other = Index([3, 6, 7, 8, 10], dtype=object)
  131: 
  132:         outer = index.join(other, how="outer")
  133:         outer2 = other.join(index, how="outer")
  134:         expected = Index([0, 2, 3, 4, 6, 7, 8, 10, 12, 14, 16, 18])
  135:         tm.assert_index_equal(outer, outer2)
  136:         tm.assert_index_equal(outer, expected)
  137: 
  138:         inner = index.join(other, how="inner")
  139:         inner2 = other.join(index, how="inner")
  140:         expected = Index([6, 8, 10])
  141:         tm.assert_index_equal(inner, inner2)
  142:         tm.assert_index_equal(inner, expected)
  143: 
  144:         left = index.join(other, how="left")
  145:         tm.assert_index_equal(left, index.astype(object))
  146: 
  147:         left2 = other.join(index, how="left")
  148:         tm.assert_index_equal(left2, other)
  149: 
  150:         right = index.join(other, how="right")
  151:         tm.assert_index_equal(right, other)
  152: 
  153:         right2 = other.join(index, how="right")
  154:         tm.assert_index_equal(right2, index.astype(object))
  155: 
  156:     def test_join_outer(self):
  157:         index = Index(range(0, 20, 2), dtype=np.int64)
  158:         other = Index([7, 12, 25, 1, 2, 5], dtype=np.int64)
  159:         other_mono = Index([1, 2, 5, 7, 12, 25], dtype=np.int64)
  160: 
  161:         # not monotonic
  162:         # guarantee of sortedness
  163:         res, lidx, ridx = index.join(other, how="outer", return_indexers=True)
  164:         noidx_res = index.join(other, how="outer")
  165:         tm.assert_index_equal(res, noidx_res)
  166: 
  167:         eres = Index([0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 14, 16, 18, 25], dtype=np.int64)
  168:         elidx = np.array([0, -1, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, 9, -1], dtype=np.intp)
  169:         eridx = np.array(
  170:             [-1, 3, 4, -1, 5, -1, 0, -1, -1, 1, -1, -1, -1, 2], dtype=np.intp
  171:         )
  172: 
  173:         assert isinstance(res, Index) and res.dtype == np.int64
  174:         tm.assert_index_equal(res, eres)
  175:         tm.assert_numpy_array_equal(lidx, elidx)
  176:         tm.assert_numpy_array_equal(ridx, eridx)
  177: 
  178:         # monotonic
  179:         res, lidx, ridx = index.join(other_mono, how="outer", return_indexers=True)
  180:         noidx_res = index.join(other_mono, how="outer")
  181:         tm.assert_index_equal(res, noidx_res)
  182: 
  183:         elidx = np.array([0, -1, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, 9, -1], dtype=np.intp)
  184:         eridx = np.array(
  185:             [-1, 0, 1, -1, 2, -1, 3, -1, -1, 4, -1, -1, -1, 5], dtype=np.intp
  186:         )
  187:         assert isinstance(res, Index) and res.dtype == np.int64
  188:         tm.assert_index_equal(res, eres)
  189:         tm.assert_numpy_array_equal(lidx, elidx)
  190:         tm.assert_numpy_array_equal(ridx, eridx)
  191: 
  192: 
  193: class TestJoinUInt64Index:
  194:     @pytest.fixture
  195:     def index_large(self):
  196:         # large values used in TestUInt64Index where no compat needed with int64/float64
  197:         large = [2**63, 2**63 + 10, 2**63 + 15, 2**63 + 20, 2**63 + 25]
  198:         return Index(large, dtype=np.uint64)
  199: 
  200:     def test_join_inner(self, index_large):
  201:         other = Index(2**63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
  202:         other_mono = Index(2**63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64"))
  203: 
  204:         # not monotonic
  205:         res, lidx, ridx = index_large.join(other, how="inner", return_indexers=True)
  206: 
  207:         # no guarantee of sortedness, so sort for comparison purposes
  208:         ind = res.argsort()
  209:         res = res.take(ind)
  210:         lidx = lidx.take(ind)
  211:         ridx = ridx.take(ind)
  212: 
  213:         eres = Index(2**63 + np.array([10, 25], dtype="uint64"))
  214:         elidx = np.array([1, 4], dtype=np.intp)
  215:         eridx = np.array([5, 2], dtype=np.intp)
  216: 
  217:         assert isinstance(res, Index) and res.dtype == np.uint64
  218:         tm.assert_index_equal(res, eres)
  219:         tm.assert_numpy_array_equal(lidx, elidx)
  220:         tm.assert_numpy_array_equal(ridx, eridx)
  221: 
  222:         # monotonic
  223:         res, lidx, ridx = index_large.join(
  224:             other_mono, how="inner", return_indexers=True
  225:         )
  226: 
  227:         res2 = index_large.intersection(other_mono)
  228:         tm.assert_index_equal(res, res2)
  229: 
  230:         elidx = np.array([1, 4], dtype=np.intp)
  231:         eridx = np.array([3, 5], dtype=np.intp)
  232: 
  233:         assert isinstance(res, Index) and res.dtype == np.uint64
  234:         tm.assert_index_equal(res, eres)
  235:         tm.assert_numpy_array_equal(lidx, elidx)
  236:         tm.assert_numpy_array_equal(ridx, eridx)
  237: 
  238:     def test_join_left(self, index_large):
  239:         other = Index(2**63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
  240:         other_mono = Index(2**63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64"))
  241: 
  242:         # not monotonic
  243:         res, lidx, ridx = index_large.join(other, how="left", return_indexers=True)
  244:         eres = index_large
  245:         eridx = np.array([-1, 5, -1, -1, 2], dtype=np.intp)
  246: 
  247:         assert isinstance(res, Index) and res.dtype == np.uint64
  248:         tm.assert_index_equal(res, eres)
  249:         assert lidx is None
  250:         tm.assert_numpy_array_equal(ridx, eridx)
  251: 
  252:         # monotonic
  253:         res, lidx, ridx = index_large.join(other_mono, how="left", return_indexers=True)
  254:         eridx = np.array([-1, 3, -1, -1, 5], dtype=np.intp)
  255: 
  256:         assert isinstance(res, Index) and res.dtype == np.uint64
  257:         tm.assert_index_equal(res, eres)
  258:         assert lidx is None
  259:         tm.assert_numpy_array_equal(ridx, eridx)
  260: 
  261:         # non-unique
  262:         idx = Index(2**63 + np.array([1, 1, 2, 5], dtype="uint64"))
  263:         idx2 = Index(2**63 + np.array([1, 2, 5, 7, 9], dtype="uint64"))
  264:         res, lidx, ridx = idx2.join(idx, how="left", return_indexers=True)
  265: 
  266:         # 1 is in idx2, so it should be x2
  267:         eres = Index(2**63 + np.array([1, 1, 2, 5, 7, 9], dtype="uint64"))
  268:         eridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
  269:         elidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
  270: 
  271:         tm.assert_index_equal(res, eres)
  272:         tm.assert_numpy_array_equal(lidx, elidx)
  273:         tm.assert_numpy_array_equal(ridx, eridx)
  274: 
  275:     def test_join_right(self, index_large):
  276:         other = Index(2**63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
  277:         other_mono = Index(2**63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64"))
  278: 
  279:         # not monotonic
  280:         res, lidx, ridx = index_large.join(other, how="right", return_indexers=True)
  281:         eres = other
  282:         elidx = np.array([-1, -1, 4, -1, -1, 1], dtype=np.intp)
  283: 
  284:         tm.assert_numpy_array_equal(lidx, elidx)
  285:         assert isinstance(other, Index) and other.dtype == np.uint64
  286:         tm.assert_index_equal(res, eres)
  287:         assert ridx is None
  288: 
  289:         # monotonic
  290:         res, lidx, ridx = index_large.join(
  291:             other_mono, how="right", return_indexers=True
  292:         )
  293:         eres = other_mono
  294:         elidx = np.array([-1, -1, -1, 1, -1, 4], dtype=np.intp)
  295: 
  296:         assert isinstance(other, Index) and other.dtype == np.uint64
  297:         tm.assert_numpy_array_equal(lidx, elidx)
  298:         tm.assert_index_equal(res, eres)
  299:         assert ridx is None
  300: 
  301:         # non-unique
  302:         idx = Index(2**63 + np.array([1, 1, 2, 5], dtype="uint64"))
  303:         idx2 = Index(2**63 + np.array([1, 2, 5, 7, 9], dtype="uint64"))
  304:         res, lidx, ridx = idx.join(idx2, how="right", return_indexers=True)
  305: 
  306:         # 1 is in idx2, so it should be x2
  307:         eres = Index(2**63 + np.array([1, 1, 2, 5, 7, 9], dtype="uint64"))
  308:         elidx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
  309:         eridx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
  310: 
  311:         tm.assert_index_equal(res, eres)
  312:         tm.assert_numpy_array_equal(lidx, elidx)
  313:         tm.assert_numpy_array_equal(ridx, eridx)
  314: 
  315:     def test_join_non_int_index(self, index_large):
  316:         other = Index(
  317:             2**63 + np.array([1, 5, 7, 10, 20], dtype="uint64"), dtype=object
  318:         )
  319: 
  320:         outer = index_large.join(other, how="outer")
  321:         outer2 = other.join(index_large, how="outer")
  322:         expected = Index(
  323:             2**63 + np.array([0, 1, 5, 7, 10, 15, 20, 25], dtype="uint64")
  324:         )
  325:         tm.assert_index_equal(outer, outer2)
  326:         tm.assert_index_equal(outer, expected)
  327: 
  328:         inner = index_large.join(other, how="inner")
  329:         inner2 = other.join(index_large, how="inner")
  330:         expected = Index(2**63 + np.array([10, 20], dtype="uint64"))
  331:         tm.assert_index_equal(inner, inner2)
  332:         tm.assert_index_equal(inner, expected)
  333: 
  334:         left = index_large.join(other, how="left")
  335:         tm.assert_index_equal(left, index_large.astype(object))
  336: 
  337:         left2 = other.join(index_large, how="left")
  338:         tm.assert_index_equal(left2, other)
  339: 
  340:         right = index_large.join(other, how="right")
  341:         tm.assert_index_equal(right, other)
  342: 
  343:         right2 = other.join(index_large, how="right")
  344:         tm.assert_index_equal(right2, index_large.astype(object))
  345: 
  346:     def test_join_outer(self, index_large):
  347:         other = Index(2**63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
  348:         other_mono = Index(2**63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64"))
  349: 
  350:         # not monotonic
  351:         # guarantee of sortedness
  352:         res, lidx, ridx = index_large.join(other, how="outer", return_indexers=True)
  353:         noidx_res = index_large.join(other, how="outer")
  354:         tm.assert_index_equal(res, noidx_res)
  355: 
  356:         eres = Index(
  357:             2**63 + np.array([0, 1, 2, 7, 10, 12, 15, 20, 25], dtype="uint64")
  358:         )
  359:         elidx = np.array([0, -1, -1, -1, 1, -1, 2, 3, 4], dtype=np.intp)
  360:         eridx = np.array([-1, 3, 4, 0, 5, 1, -1, -1, 2], dtype=np.intp)
  361: 
  362:         assert isinstance(res, Index) and res.dtype == np.uint64
  363:         tm.assert_index_equal(res, eres)
  364:         tm.assert_numpy_array_equal(lidx, elidx)
  365:         tm.assert_numpy_array_equal(ridx, eridx)
  366: 
  367:         # monotonic
  368:         res, lidx, ridx = index_large.join(
  369:             other_mono, how="outer", return_indexers=True
  370:         )
  371:         noidx_res = index_large.join(other_mono, how="outer")
  372:         tm.assert_index_equal(res, noidx_res)
  373: 
  374:         elidx = np.array([0, -1, -1, -1, 1, -1, 2, 3, 4], dtype=np.intp)
  375:         eridx = np.array([-1, 0, 1, 2, 3, 4, -1, -1, 5], dtype=np.intp)
  376: 
  377:         assert isinstance(res, Index) and res.dtype == np.uint64
  378:         tm.assert_index_equal(res, eres)
  379:         tm.assert_numpy_array_equal(lidx, elidx)
  380:         tm.assert_numpy_array_equal(ridx, eridx)
