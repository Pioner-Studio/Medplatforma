    1: from datetime import datetime
    2: 
    3: import dateutil
    4: import numpy as np
    5: import pytest
    6: import pytz
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DatetimeIndex,
   11:     Index,
   12:     NaT,
   13:     PeriodIndex,
   14:     Timestamp,
   15:     date_range,
   16: )
   17: import pandas._testing as tm
   18: 
   19: 
   20: class TestDatetimeIndex:
   21:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
   22:     def test_dti_astype_asobject_around_dst_transition(self, tzstr):
   23:         # GH#1345
   24: 
   25:         # dates around a dst transition
   26:         rng = date_range("2/13/2010", "5/6/2010", tz=tzstr)
   27: 
   28:         objs = rng.astype(object)
   29:         for i, x in enumerate(objs):
   30:             exval = rng[i]
   31:             assert x == exval
   32:             assert x.tzinfo == exval.tzinfo
   33: 
   34:         objs = rng.astype(object)
   35:         for i, x in enumerate(objs):
   36:             exval = rng[i]
   37:             assert x == exval
   38:             assert x.tzinfo == exval.tzinfo
   39: 
   40:     def test_astype(self):
   41:         # GH 13149, GH 13209
   42:         idx = DatetimeIndex(
   43:             ["2016-05-16", "NaT", NaT, np.nan], dtype="M8[ns]", name="idx"
   44:         )
   45: 
   46:         result = idx.astype(object)
   47:         expected = Index(
   48:             [Timestamp("2016-05-16")] + [NaT] * 3, dtype=object, name="idx"
   49:         )
   50:         tm.assert_index_equal(result, expected)
   51: 
   52:         result = idx.astype(np.int64)
   53:         expected = Index(
   54:             [1463356800000000000] + [-9223372036854775808] * 3,
   55:             dtype=np.int64,
   56:             name="idx",
   57:         )
   58:         tm.assert_index_equal(result, expected)
   59: 
   60:     def test_astype2(self):
   61:         rng = date_range("1/1/2000", periods=10, name="idx")
   62:         result = rng.astype("i8")
   63:         tm.assert_index_equal(result, Index(rng.asi8, name="idx"))
   64:         tm.assert_numpy_array_equal(result.values, rng.asi8)
   65: 
   66:     def test_astype_uint(self):
   67:         arr = date_range("2000", periods=2, name="idx")
   68: 
   69:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   70:             arr.astype("uint64")
   71:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   72:             arr.astype("uint32")
   73: 
   74:     def test_astype_with_tz(self):
   75:         # with tz
   76:         rng = date_range("1/1/2000", periods=10, tz="US/Eastern")
   77:         msg = "Cannot use .astype to convert from timezone-aware"
   78:         with pytest.raises(TypeError, match=msg):
   79:             # deprecated
   80:             rng.astype("datetime64[ns]")
   81:         with pytest.raises(TypeError, match=msg):
   82:             # check DatetimeArray while we're here deprecated
   83:             rng._data.astype("datetime64[ns]")
   84: 
   85:     def test_astype_tzaware_to_tzaware(self):
   86:         # GH 18951: tz-aware to tz-aware
   87:         idx = date_range("20170101", periods=4, tz="US/Pacific")
   88:         result = idx.astype("datetime64[ns, US/Eastern]")
   89:         expected = date_range("20170101 03:00:00", periods=4, tz="US/Eastern")
   90:         tm.assert_index_equal(result, expected)
   91:         assert result.freq == expected.freq
   92: 
   93:     def test_astype_tznaive_to_tzaware(self):
   94:         # GH 18951: tz-naive to tz-aware
   95:         idx = date_range("20170101", periods=4)
   96:         idx = idx._with_freq(None)  # tz_localize does not preserve freq
   97:         msg = "Cannot use .astype to convert from timezone-naive"
   98:         with pytest.raises(TypeError, match=msg):
   99:             # dt64->dt64tz deprecated
  100:             idx.astype("datetime64[ns, US/Eastern]")
  101:         with pytest.raises(TypeError, match=msg):
  102:             # dt64->dt64tz deprecated
  103:             idx._data.astype("datetime64[ns, US/Eastern]")
  104: 
  105:     def test_astype_str_nat(self):
  106:         # GH 13149, GH 13209
  107:         # verify that we are returning NaT as a string (and not unicode)
  108: 
  109:         idx = DatetimeIndex(["2016-05-16", "NaT", NaT, np.nan])
  110:         result = idx.astype(str)
  111:         expected = Index(["2016-05-16", "NaT", "NaT", "NaT"], dtype=object)
  112:         tm.assert_index_equal(result, expected)
  113: 
  114:     def test_astype_str(self):
  115:         # test astype string - #10442
  116:         dti = date_range("2012-01-01", periods=4, name="test_name")
  117:         result = dti.astype(str)
  118:         expected = Index(
  119:             ["2012-01-01", "2012-01-02", "2012-01-03", "2012-01-04"],
  120:             name="test_name",
  121:             dtype=object,
  122:         )
  123:         tm.assert_index_equal(result, expected)
  124: 
  125:     def test_astype_str_tz_and_name(self):
  126:         # test astype string with tz and name
  127:         dti = date_range("2012-01-01", periods=3, name="test_name", tz="US/Eastern")
  128:         result = dti.astype(str)
  129:         expected = Index(
  130:             [
  131:                 "2012-01-01 00:00:00-05:00",
  132:                 "2012-01-02 00:00:00-05:00",
  133:                 "2012-01-03 00:00:00-05:00",
  134:             ],
  135:             name="test_name",
  136:             dtype=object,
  137:         )
  138:         tm.assert_index_equal(result, expected)
  139: 
  140:     def test_astype_str_freq_and_name(self):
  141:         # test astype string with freqH and name
  142:         dti = date_range("1/1/2011", periods=3, freq="h", name="test_name")
  143:         result = dti.astype(str)
  144:         expected = Index(
  145:             ["2011-01-01 00:00:00", "2011-01-01 01:00:00", "2011-01-01 02:00:00"],
  146:             name="test_name",
  147:             dtype=object,
  148:         )
  149:         tm.assert_index_equal(result, expected)
  150: 
  151:     def test_astype_str_freq_and_tz(self):
  152:         # test astype string with freqH and timezone
  153:         dti = date_range(
  154:             "3/6/2012 00:00", periods=2, freq="h", tz="Europe/London", name="test_name"
  155:         )
  156:         result = dti.astype(str)
  157:         expected = Index(
  158:             ["2012-03-06 00:00:00+00:00", "2012-03-06 01:00:00+00:00"],
  159:             dtype=object,
  160:             name="test_name",
  161:         )
  162:         tm.assert_index_equal(result, expected)
  163: 
  164:     def test_astype_datetime64(self):
  165:         # GH 13149, GH 13209
  166:         idx = DatetimeIndex(
  167:             ["2016-05-16", "NaT", NaT, np.nan], dtype="M8[ns]", name="idx"
  168:         )
  169: 
  170:         result = idx.astype("datetime64[ns]")
  171:         tm.assert_index_equal(result, idx)
  172:         assert result is not idx
  173: 
  174:         result = idx.astype("datetime64[ns]", copy=False)
  175:         tm.assert_index_equal(result, idx)
  176:         assert result is idx
  177: 
  178:         idx_tz = DatetimeIndex(["2016-05-16", "NaT", NaT, np.nan], tz="EST", name="idx")
  179:         msg = "Cannot use .astype to convert from timezone-aware"
  180:         with pytest.raises(TypeError, match=msg):
  181:             # dt64tz->dt64 deprecated
  182:             result = idx_tz.astype("datetime64[ns]")
  183: 
  184:     def test_astype_object(self):
  185:         rng = date_range("1/1/2000", periods=20)
  186: 
  187:         casted = rng.astype("O")
  188:         exp_values = list(rng)
  189: 
  190:         tm.assert_index_equal(casted, Index(exp_values, dtype=np.object_))
  191:         assert casted.tolist() == exp_values
  192: 
  193:     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo"])
  194:     def test_astype_object_tz(self, tz):
  195:         idx = date_range(start="2013-01-01", periods=4, freq="ME", name="idx", tz=tz)
  196:         expected_list = [
  197:             Timestamp("2013-01-31", tz=tz),
  198:             Timestamp("2013-02-28", tz=tz),
  199:             Timestamp("2013-03-31", tz=tz),
  200:             Timestamp("2013-04-30", tz=tz),
  201:         ]
  202:         expected = Index(expected_list, dtype=object, name="idx")
  203:         result = idx.astype(object)
  204:         tm.assert_index_equal(result, expected)
  205:         assert idx.tolist() == expected_list
  206: 
  207:     def test_astype_object_with_nat(self):
  208:         idx = DatetimeIndex(
  209:             [datetime(2013, 1, 1), datetime(2013, 1, 2), NaT, datetime(2013, 1, 4)],
  210:             name="idx",
  211:         )
  212:         expected_list = [
  213:             Timestamp("2013-01-01"),
  214:             Timestamp("2013-01-02"),
  215:             NaT,
  216:             Timestamp("2013-01-04"),
  217:         ]
  218:         expected = Index(expected_list, dtype=object, name="idx")
  219:         result = idx.astype(object)
  220:         tm.assert_index_equal(result, expected)
  221:         assert idx.tolist() == expected_list
  222: 
  223:     @pytest.mark.parametrize(
  224:         "dtype",
  225:         [float, "timedelta64", "timedelta64[ns]", "datetime64", "datetime64[D]"],
  226:     )
  227:     def test_astype_raises(self, dtype):
  228:         # GH 13149, GH 13209
  229:         idx = DatetimeIndex(["2016-05-16", "NaT", NaT, np.nan])
  230:         msg = "Cannot cast DatetimeIndex to dtype"
  231:         if dtype == "datetime64":
  232:             msg = "Casting to unit-less dtype 'datetime64' is not supported"
  233:         with pytest.raises(TypeError, match=msg):
  234:             idx.astype(dtype)
  235: 
  236:     def test_index_convert_to_datetime_array(self):
  237:         def _check_rng(rng):
  238:             converted = rng.to_pydatetime()
  239:             assert isinstance(converted, np.ndarray)
  240:             for x, stamp in zip(converted, rng):
  241:                 assert isinstance(x, datetime)
  242:                 assert x == stamp.to_pydatetime()
  243:                 assert x.tzinfo == stamp.tzinfo
  244: 
  245:         rng = date_range("20090415", "20090519")
  246:         rng_eastern = date_range("20090415", "20090519", tz="US/Eastern")
  247:         rng_utc = date_range("20090415", "20090519", tz="utc")
  248: 
  249:         _check_rng(rng)
  250:         _check_rng(rng_eastern)
  251:         _check_rng(rng_utc)
  252: 
  253:     def test_index_convert_to_datetime_array_explicit_pytz(self):
  254:         def _check_rng(rng):
  255:             converted = rng.to_pydatetime()
  256:             assert isinstance(converted, np.ndarray)
  257:             for x, stamp in zip(converted, rng):
  258:                 assert isinstance(x, datetime)
  259:                 assert x == stamp.to_pydatetime()
  260:                 assert x.tzinfo == stamp.tzinfo
  261: 
  262:         rng = date_range("20090415", "20090519")
  263:         rng_eastern = date_range("20090415", "20090519", tz=pytz.timezone("US/Eastern"))
  264:         rng_utc = date_range("20090415", "20090519", tz=pytz.utc)
  265: 
  266:         _check_rng(rng)
  267:         _check_rng(rng_eastern)
  268:         _check_rng(rng_utc)
  269: 
  270:     def test_index_convert_to_datetime_array_dateutil(self):
  271:         def _check_rng(rng):
  272:             converted = rng.to_pydatetime()
  273:             assert isinstance(converted, np.ndarray)
  274:             for x, stamp in zip(converted, rng):
  275:                 assert isinstance(x, datetime)
  276:                 assert x == stamp.to_pydatetime()
  277:                 assert x.tzinfo == stamp.tzinfo
  278: 
  279:         rng = date_range("20090415", "20090519")
  280:         rng_eastern = date_range("20090415", "20090519", tz="dateutil/US/Eastern")
  281:         rng_utc = date_range("20090415", "20090519", tz=dateutil.tz.tzutc())
  282: 
  283:         _check_rng(rng)
  284:         _check_rng(rng_eastern)
  285:         _check_rng(rng_utc)
  286: 
  287:     @pytest.mark.parametrize(
  288:         "tz, dtype",
  289:         [["US/Pacific", "datetime64[ns, US/Pacific]"], [None, "datetime64[ns]"]],
  290:     )
  291:     def test_integer_index_astype_datetime(self, tz, dtype):
  292:         # GH 20997, 20964, 24559
  293:         val = [Timestamp("2018-01-01", tz=tz).as_unit("ns")._value]
  294:         result = Index(val, name="idx").astype(dtype)
  295:         expected = DatetimeIndex(["2018-01-01"], tz=tz, name="idx").as_unit("ns")
  296:         tm.assert_index_equal(result, expected)
  297: 
  298:     def test_dti_astype_period(self):
  299:         idx = DatetimeIndex([NaT, "2011-01-01", "2011-02-01"], name="idx")
  300: 
  301:         res = idx.astype("period[M]")
  302:         exp = PeriodIndex(["NaT", "2011-01", "2011-02"], freq="M", name="idx")
  303:         tm.assert_index_equal(res, exp)
  304: 
  305:         res = idx.astype("period[3M]")
  306:         exp = PeriodIndex(["NaT", "2011-01", "2011-02"], freq="3M", name="idx")
  307:         tm.assert_index_equal(res, exp)
  308: 
  309: 
  310: class TestAstype:
  311:     @pytest.mark.parametrize("tz", [None, "US/Central"])
  312:     def test_astype_category(self, tz):
  313:         obj = date_range("2000", periods=2, tz=tz, name="idx")
  314:         result = obj.astype("category")
  315:         dti = DatetimeIndex(["2000-01-01", "2000-01-02"], tz=tz).as_unit("ns")
  316:         expected = pd.CategoricalIndex(
  317:             dti,
  318:             name="idx",
  319:         )
  320:         tm.assert_index_equal(result, expected)
  321: 
  322:         result = obj._data.astype("category")
  323:         expected = expected.values
  324:         tm.assert_categorical_equal(result, expected)
  325: 
  326:     @pytest.mark.parametrize("tz", [None, "US/Central"])
  327:     def test_astype_array_fallback(self, tz):
  328:         obj = date_range("2000", periods=2, tz=tz, name="idx")
  329:         result = obj.astype(bool)
  330:         expected = Index(np.array([True, True]), name="idx")
  331:         tm.assert_index_equal(result, expected)
  332: 
  333:         result = obj._data.astype(bool)
  334:         expected = np.array([True, True])
  335:         tm.assert_numpy_array_equal(result, expected)
