    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import MultiIndex
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_isin_nan():
    9:     idx = MultiIndex.from_arrays([["foo", "bar"], [1.0, np.nan]])
   10:     tm.assert_numpy_array_equal(idx.isin([("bar", np.nan)]), np.array([False, True]))
   11:     tm.assert_numpy_array_equal(
   12:         idx.isin([("bar", float("nan"))]), np.array([False, True])
   13:     )
   14: 
   15: 
   16: def test_isin_missing(nulls_fixture):
   17:     # GH48905
   18:     mi1 = MultiIndex.from_tuples([(1, nulls_fixture)])
   19:     mi2 = MultiIndex.from_tuples([(1, 1), (1, 2)])
   20:     result = mi2.isin(mi1)
   21:     expected = np.array([False, False])
   22:     tm.assert_numpy_array_equal(result, expected)
   23: 
   24: 
   25: def test_isin():
   26:     values = [("foo", 2), ("bar", 3), ("quux", 4)]
   27: 
   28:     idx = MultiIndex.from_arrays([["qux", "baz", "foo", "bar"], np.arange(4)])
   29:     result = idx.isin(values)
   30:     expected = np.array([False, False, True, True])
   31:     tm.assert_numpy_array_equal(result, expected)
   32: 
   33:     # empty, return dtype bool
   34:     idx = MultiIndex.from_arrays([[], []])
   35:     result = idx.isin(values)
   36:     assert len(result) == 0
   37:     assert result.dtype == np.bool_
   38: 
   39: 
   40: def test_isin_level_kwarg():
   41:     idx = MultiIndex.from_arrays([["qux", "baz", "foo", "bar"], np.arange(4)])
   42: 
   43:     vals_0 = ["foo", "bar", "quux"]
   44:     vals_1 = [2, 3, 10]
   45: 
   46:     expected = np.array([False, False, True, True])
   47:     tm.assert_numpy_array_equal(expected, idx.isin(vals_0, level=0))
   48:     tm.assert_numpy_array_equal(expected, idx.isin(vals_0, level=-2))
   49: 
   50:     tm.assert_numpy_array_equal(expected, idx.isin(vals_1, level=1))
   51:     tm.assert_numpy_array_equal(expected, idx.isin(vals_1, level=-1))
   52: 
   53:     msg = "Too many levels: Index has only 2 levels, not 6"
   54:     with pytest.raises(IndexError, match=msg):
   55:         idx.isin(vals_0, level=5)
   56:     msg = "Too many levels: Index has only 2 levels, -5 is not a valid level number"
   57:     with pytest.raises(IndexError, match=msg):
   58:         idx.isin(vals_0, level=-5)
   59: 
   60:     with pytest.raises(KeyError, match=r"'Level 1\.0 not found'"):
   61:         idx.isin(vals_0, level=1.0)
   62:     with pytest.raises(KeyError, match=r"'Level -1\.0 not found'"):
   63:         idx.isin(vals_1, level=-1.0)
   64:     with pytest.raises(KeyError, match="'Level A not found'"):
   65:         idx.isin(vals_1, level="A")
   66: 
   67:     idx.names = ["A", "B"]
   68:     tm.assert_numpy_array_equal(expected, idx.isin(vals_0, level="A"))
   69:     tm.assert_numpy_array_equal(expected, idx.isin(vals_1, level="B"))
   70: 
   71:     with pytest.raises(KeyError, match="'Level C not found'"):
   72:         idx.isin(vals_1, level="C")
   73: 
   74: 
   75: @pytest.mark.parametrize(
   76:     "labels,expected,level",
   77:     [
   78:         ([("b", np.nan)], np.array([False, False, True]), None),
   79:         ([np.nan, "a"], np.array([True, True, False]), 0),
   80:         (["d", np.nan], np.array([False, True, True]), 1),
   81:     ],
   82: )
   83: def test_isin_multi_index_with_missing_value(labels, expected, level):
   84:     # GH 19132
   85:     midx = MultiIndex.from_arrays([[np.nan, "a", "b"], ["c", "d", np.nan]])
   86:     result = midx.isin(labels, level=level)
   87:     tm.assert_numpy_array_equal(result, expected)
   88: 
   89: 
   90: def test_isin_empty():
   91:     # GH#51599
   92:     midx = MultiIndex.from_arrays([[1, 2], [3, 4]])
   93:     result = midx.isin([])
   94:     expected = np.array([False, False])
   95:     tm.assert_numpy_array_equal(result, expected)
   96: 
   97: 
   98: def test_isin_generator():
   99:     # GH#52568
  100:     midx = MultiIndex.from_tuples([(1, 2)])
  101:     result = midx.isin(x for x in [(1, 2)])
  102:     expected = np.array([True])
  103:     tm.assert_numpy_array_equal(result, expected)
