    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     MultiIndex,
    7: )
    8: 
    9: 
   10: def test_is_monotonic_increasing_lexsorted(lexsorted_two_level_string_multiindex):
   11:     # string ordering
   12:     mi = lexsorted_two_level_string_multiindex
   13:     assert mi.is_monotonic_increasing is False
   14:     assert Index(mi.values).is_monotonic_increasing is False
   15:     assert mi._is_strictly_monotonic_increasing is False
   16:     assert Index(mi.values)._is_strictly_monotonic_increasing is False
   17: 
   18: 
   19: def test_is_monotonic_increasing():
   20:     i = MultiIndex.from_product([np.arange(10), np.arange(10)], names=["one", "two"])
   21:     assert i.is_monotonic_increasing is True
   22:     assert i._is_strictly_monotonic_increasing is True
   23:     assert Index(i.values).is_monotonic_increasing is True
   24:     assert i._is_strictly_monotonic_increasing is True
   25: 
   26:     i = MultiIndex.from_product(
   27:         [np.arange(10, 0, -1), np.arange(10)], names=["one", "two"]
   28:     )
   29:     assert i.is_monotonic_increasing is False
   30:     assert i._is_strictly_monotonic_increasing is False
   31:     assert Index(i.values).is_monotonic_increasing is False
   32:     assert Index(i.values)._is_strictly_monotonic_increasing is False
   33: 
   34:     i = MultiIndex.from_product(
   35:         [np.arange(10), np.arange(10, 0, -1)], names=["one", "two"]
   36:     )
   37:     assert i.is_monotonic_increasing is False
   38:     assert i._is_strictly_monotonic_increasing is False
   39:     assert Index(i.values).is_monotonic_increasing is False
   40:     assert Index(i.values)._is_strictly_monotonic_increasing is False
   41: 
   42:     i = MultiIndex.from_product([[1.0, np.nan, 2.0], ["a", "b", "c"]])
   43:     assert i.is_monotonic_increasing is False
   44:     assert i._is_strictly_monotonic_increasing is False
   45:     assert Index(i.values).is_monotonic_increasing is False
   46:     assert Index(i.values)._is_strictly_monotonic_increasing is False
   47: 
   48:     i = MultiIndex(
   49:         levels=[["bar", "baz", "foo", "qux"], ["mom", "next", "zenith"]],
   50:         codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
   51:         names=["first", "second"],
   52:     )
   53:     assert i.is_monotonic_increasing is True
   54:     assert Index(i.values).is_monotonic_increasing is True
   55:     assert i._is_strictly_monotonic_increasing is True
   56:     assert Index(i.values)._is_strictly_monotonic_increasing is True
   57: 
   58:     # mixed levels, hits the TypeError
   59:     i = MultiIndex(
   60:         levels=[
   61:             [1, 2, 3, 4],
   62:             [
   63:                 "gb00b03mlx29",
   64:                 "lu0197800237",
   65:                 "nl0000289783",
   66:                 "nl0000289965",
   67:                 "nl0000301109",
   68:             ],
   69:         ],
   70:         codes=[[0, 1, 1, 2, 2, 2, 3], [4, 2, 0, 0, 1, 3, -1]],
   71:         names=["household_id", "asset_id"],
   72:     )
   73: 
   74:     assert i.is_monotonic_increasing is False
   75:     assert i._is_strictly_monotonic_increasing is False
   76: 
   77:     # empty
   78:     i = MultiIndex.from_arrays([[], []])
   79:     assert i.is_monotonic_increasing is True
   80:     assert Index(i.values).is_monotonic_increasing is True
   81:     assert i._is_strictly_monotonic_increasing is True
   82:     assert Index(i.values)._is_strictly_monotonic_increasing is True
   83: 
   84: 
   85: def test_is_monotonic_decreasing():
   86:     i = MultiIndex.from_product(
   87:         [np.arange(9, -1, -1), np.arange(9, -1, -1)], names=["one", "two"]
   88:     )
   89:     assert i.is_monotonic_decreasing is True
   90:     assert i._is_strictly_monotonic_decreasing is True
   91:     assert Index(i.values).is_monotonic_decreasing is True
   92:     assert i._is_strictly_monotonic_decreasing is True
   93: 
   94:     i = MultiIndex.from_product(
   95:         [np.arange(10), np.arange(10, 0, -1)], names=["one", "two"]
   96:     )
   97:     assert i.is_monotonic_decreasing is False
   98:     assert i._is_strictly_monotonic_decreasing is False
   99:     assert Index(i.values).is_monotonic_decreasing is False
  100:     assert Index(i.values)._is_strictly_monotonic_decreasing is False
  101: 
  102:     i = MultiIndex.from_product(
  103:         [np.arange(10, 0, -1), np.arange(10)], names=["one", "two"]
  104:     )
  105:     assert i.is_monotonic_decreasing is False
  106:     assert i._is_strictly_monotonic_decreasing is False
  107:     assert Index(i.values).is_monotonic_decreasing is False
  108:     assert Index(i.values)._is_strictly_monotonic_decreasing is False
  109: 
  110:     i = MultiIndex.from_product([[2.0, np.nan, 1.0], ["c", "b", "a"]])
  111:     assert i.is_monotonic_decreasing is False
  112:     assert i._is_strictly_monotonic_decreasing is False
  113:     assert Index(i.values).is_monotonic_decreasing is False
  114:     assert Index(i.values)._is_strictly_monotonic_decreasing is False
  115: 
  116:     # string ordering
  117:     i = MultiIndex(
  118:         levels=[["qux", "foo", "baz", "bar"], ["three", "two", "one"]],
  119:         codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
  120:         names=["first", "second"],
  121:     )
  122:     assert i.is_monotonic_decreasing is False
  123:     assert Index(i.values).is_monotonic_decreasing is False
  124:     assert i._is_strictly_monotonic_decreasing is False
  125:     assert Index(i.values)._is_strictly_monotonic_decreasing is False
  126: 
  127:     i = MultiIndex(
  128:         levels=[["qux", "foo", "baz", "bar"], ["zenith", "next", "mom"]],
  129:         codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
  130:         names=["first", "second"],
  131:     )
  132:     assert i.is_monotonic_decreasing is True
  133:     assert Index(i.values).is_monotonic_decreasing is True
  134:     assert i._is_strictly_monotonic_decreasing is True
  135:     assert Index(i.values)._is_strictly_monotonic_decreasing is True
  136: 
  137:     # mixed levels, hits the TypeError
  138:     i = MultiIndex(
  139:         levels=[
  140:             [4, 3, 2, 1],
  141:             [
  142:                 "nl0000301109",
  143:                 "nl0000289965",
  144:                 "nl0000289783",
  145:                 "lu0197800237",
  146:                 "gb00b03mlx29",
  147:             ],
  148:         ],
  149:         codes=[[0, 1, 1, 2, 2, 2, 3], [4, 2, 0, 0, 1, 3, -1]],
  150:         names=["household_id", "asset_id"],
  151:     )
  152: 
  153:     assert i.is_monotonic_decreasing is False
  154:     assert i._is_strictly_monotonic_decreasing is False
  155: 
  156:     # empty
  157:     i = MultiIndex.from_arrays([[], []])
  158:     assert i.is_monotonic_decreasing is True
  159:     assert Index(i.values).is_monotonic_decreasing is True
  160:     assert i._is_strictly_monotonic_decreasing is True
  161:     assert Index(i.values)._is_strictly_monotonic_decreasing is True
  162: 
  163: 
  164: def test_is_strictly_monotonic_increasing():
  165:     idx = MultiIndex(
  166:         levels=[["bar", "baz"], ["mom", "next"]], codes=[[0, 0, 1, 1], [0, 0, 0, 1]]
  167:     )
  168:     assert idx.is_monotonic_increasing is True
  169:     assert idx._is_strictly_monotonic_increasing is False
  170: 
  171: 
  172: def test_is_strictly_monotonic_decreasing():
  173:     idx = MultiIndex(
  174:         levels=[["baz", "bar"], ["next", "mom"]], codes=[[0, 0, 1, 1], [0, 0, 0, 1]]
  175:     )
  176:     assert idx.is_monotonic_decreasing is True
  177:     assert idx._is_strictly_monotonic_decreasing is False
  178: 
  179: 
  180: @pytest.mark.parametrize("attr", ["is_monotonic_increasing", "is_monotonic_decreasing"])
  181: @pytest.mark.parametrize(
  182:     "values",
  183:     [[(np.nan,), (1,), (2,)], [(1,), (np.nan,), (2,)], [(1,), (2,), (np.nan,)]],
  184: )
  185: def test_is_monotonic_with_nans(values, attr):
  186:     # GH: 37220
  187:     idx = MultiIndex.from_tuples(values, names=["test"])
  188:     assert getattr(idx, attr) is False
