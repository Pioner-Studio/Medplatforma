    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.errors import PerformanceWarning
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     Index,
    9:     MultiIndex,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_drop(idx):
   15:     dropped = idx.drop([("foo", "two"), ("qux", "one")])
   16: 
   17:     index = MultiIndex.from_tuples([("foo", "two"), ("qux", "one")])
   18:     dropped2 = idx.drop(index)
   19: 
   20:     expected = idx[[0, 2, 3, 5]]
   21:     tm.assert_index_equal(dropped, expected)
   22:     tm.assert_index_equal(dropped2, expected)
   23: 
   24:     dropped = idx.drop(["bar"])
   25:     expected = idx[[0, 1, 3, 4, 5]]
   26:     tm.assert_index_equal(dropped, expected)
   27: 
   28:     dropped = idx.drop("foo")
   29:     expected = idx[[2, 3, 4, 5]]
   30:     tm.assert_index_equal(dropped, expected)
   31: 
   32:     index = MultiIndex.from_tuples([("bar", "two")])
   33:     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
   34:         idx.drop([("bar", "two")])
   35:     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
   36:         idx.drop(index)
   37:     with pytest.raises(KeyError, match=r"^'two'$"):
   38:         idx.drop(["foo", "two"])
   39: 
   40:     # partially correct argument
   41:     mixed_index = MultiIndex.from_tuples([("qux", "one"), ("bar", "two")])
   42:     with pytest.raises(KeyError, match=r"^\('bar', 'two'\)$"):
   43:         idx.drop(mixed_index)
   44: 
   45:     # error='ignore'
   46:     dropped = idx.drop(index, errors="ignore")
   47:     expected = idx[[0, 1, 2, 3, 4, 5]]
   48:     tm.assert_index_equal(dropped, expected)
   49: 
   50:     dropped = idx.drop(mixed_index, errors="ignore")
   51:     expected = idx[[0, 1, 2, 3, 5]]
   52:     tm.assert_index_equal(dropped, expected)
   53: 
   54:     dropped = idx.drop(["foo", "two"], errors="ignore")
   55:     expected = idx[[2, 3, 4, 5]]
   56:     tm.assert_index_equal(dropped, expected)
   57: 
   58:     # mixed partial / full drop
   59:     dropped = idx.drop(["foo", ("qux", "one")])
   60:     expected = idx[[2, 3, 5]]
   61:     tm.assert_index_equal(dropped, expected)
   62: 
   63:     # mixed partial / full drop / error='ignore'
   64:     mixed_index = ["foo", ("qux", "one"), "two"]
   65:     with pytest.raises(KeyError, match=r"^'two'$"):
   66:         idx.drop(mixed_index)
   67:     dropped = idx.drop(mixed_index, errors="ignore")
   68:     expected = idx[[2, 3, 5]]
   69:     tm.assert_index_equal(dropped, expected)
   70: 
   71: 
   72: def test_droplevel_with_names(idx):
   73:     index = idx[idx.get_loc("foo")]
   74:     dropped = index.droplevel(0)
   75:     assert dropped.name == "second"
   76: 
   77:     index = MultiIndex(
   78:         levels=[Index(range(4)), Index(range(4)), Index(range(4))],
   79:         codes=[
   80:             np.array([0, 0, 1, 2, 2, 2, 3, 3]),
   81:             np.array([0, 1, 0, 0, 0, 1, 0, 1]),
   82:             np.array([1, 0, 1, 1, 0, 0, 1, 0]),
   83:         ],
   84:         names=["one", "two", "three"],
   85:     )
   86:     dropped = index.droplevel(0)
   87:     assert dropped.names == ("two", "three")
   88: 
   89:     dropped = index.droplevel("two")
   90:     expected = index.droplevel(1)
   91:     assert dropped.equals(expected)
   92: 
   93: 
   94: def test_droplevel_list():
   95:     index = MultiIndex(
   96:         levels=[Index(range(4)), Index(range(4)), Index(range(4))],
   97:         codes=[
   98:             np.array([0, 0, 1, 2, 2, 2, 3, 3]),
   99:             np.array([0, 1, 0, 0, 0, 1, 0, 1]),
  100:             np.array([1, 0, 1, 1, 0, 0, 1, 0]),
  101:         ],
  102:         names=["one", "two", "three"],
  103:     )
  104: 
  105:     dropped = index[:2].droplevel(["three", "one"])
  106:     expected = index[:2].droplevel(2).droplevel(0)
  107:     assert dropped.equals(expected)
  108: 
  109:     dropped = index[:2].droplevel([])
  110:     expected = index[:2]
  111:     assert dropped.equals(expected)
  112: 
  113:     msg = (
  114:         "Cannot remove 3 levels from an index with 3 levels: "
  115:         "at least one level must be left"
  116:     )
  117:     with pytest.raises(ValueError, match=msg):
  118:         index[:2].droplevel(["one", "two", "three"])
  119: 
  120:     with pytest.raises(KeyError, match="'Level four not found'"):
  121:         index[:2].droplevel(["one", "four"])
  122: 
  123: 
  124: def test_drop_not_lexsorted():
  125:     # GH 12078
  126: 
  127:     # define the lexsorted version of the multi-index
  128:     tuples = [("a", ""), ("b1", "c1"), ("b2", "c2")]
  129:     lexsorted_mi = MultiIndex.from_tuples(tuples, names=["b", "c"])
  130:     assert lexsorted_mi._is_lexsorted()
  131: 
  132:     # and the not-lexsorted version
  133:     df = pd.DataFrame(
  134:         columns=["a", "b", "c", "d"], data=[[1, "b1", "c1", 3], [1, "b2", "c2", 4]]
  135:     )
  136:     df = df.pivot_table(index="a", columns=["b", "c"], values="d")
  137:     df = df.reset_index()
  138:     not_lexsorted_mi = df.columns
  139:     assert not not_lexsorted_mi._is_lexsorted()
  140: 
  141:     # compare the results
  142:     tm.assert_index_equal(lexsorted_mi, not_lexsorted_mi)
  143:     with tm.assert_produces_warning(PerformanceWarning):
  144:         tm.assert_index_equal(lexsorted_mi.drop("a"), not_lexsorted_mi.drop("a"))
  145: 
  146: 
  147: def test_drop_with_nan_in_index(nulls_fixture):
  148:     # GH#18853
  149:     mi = MultiIndex.from_tuples([("blah", nulls_fixture)], names=["name", "date"])
  150:     msg = r"labels \[Timestamp\('2001-01-01 00:00:00'\)\] not found in level"
  151:     with pytest.raises(KeyError, match=msg):
  152:         mi.drop(pd.Timestamp("2001"), level="date")
  153: 
  154: 
  155: @pytest.mark.filterwarnings("ignore::pandas.errors.PerformanceWarning")
  156: def test_drop_with_non_monotonic_duplicates():
  157:     # GH#33494
  158:     mi = MultiIndex.from_tuples([(1, 2), (2, 3), (1, 2)])
  159:     result = mi.drop((1, 2))
  160:     expected = MultiIndex.from_tuples([(2, 3)])
  161:     tm.assert_index_equal(result, expected)
  162: 
  163: 
  164: def test_single_level_drop_partially_missing_elements():
  165:     # GH 37820
  166: 
  167:     mi = MultiIndex.from_tuples([(1, 2), (2, 2), (3, 2)])
  168:     msg = r"labels \[4\] not found in level"
  169:     with pytest.raises(KeyError, match=msg):
  170:         mi.drop(4, level=0)
  171:     with pytest.raises(KeyError, match=msg):
  172:         mi.drop([1, 4], level=0)
  173:     msg = r"labels \[nan\] not found in level"
  174:     with pytest.raises(KeyError, match=msg):
  175:         mi.drop([np.nan], level=0)
  176:     with pytest.raises(KeyError, match=msg):
  177:         mi.drop([np.nan, 1, 2, 3], level=0)
  178: 
  179:     mi = MultiIndex.from_tuples([(np.nan, 1), (1, 2)])
  180:     msg = r"labels \['a'\] not found in level"
  181:     with pytest.raises(KeyError, match=msg):
  182:         mi.drop([np.nan, 1, "a"], level=0)
  183: 
  184: 
  185: def test_droplevel_multiindex_one_level():
  186:     # GH#37208
  187:     index = MultiIndex.from_tuples([(2,)], names=("b",))
  188:     result = index.droplevel([])
  189:     expected = Index([2], name="b")
  190:     tm.assert_index_equal(result, expected)
