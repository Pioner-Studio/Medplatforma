    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DatetimeIndex,
    6:     Index,
    7:     date_range,
    8:     factorize,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestDatetimeIndexFactorize:
   14:     def test_factorize(self):
   15:         idx1 = DatetimeIndex(
   16:             ["2014-01", "2014-01", "2014-02", "2014-02", "2014-03", "2014-03"]
   17:         )
   18: 
   19:         exp_arr = np.array([0, 0, 1, 1, 2, 2], dtype=np.intp)
   20:         exp_idx = DatetimeIndex(["2014-01", "2014-02", "2014-03"])
   21: 
   22:         arr, idx = idx1.factorize()
   23:         tm.assert_numpy_array_equal(arr, exp_arr)
   24:         tm.assert_index_equal(idx, exp_idx)
   25:         assert idx.freq == exp_idx.freq
   26: 
   27:         arr, idx = idx1.factorize(sort=True)
   28:         tm.assert_numpy_array_equal(arr, exp_arr)
   29:         tm.assert_index_equal(idx, exp_idx)
   30:         assert idx.freq == exp_idx.freq
   31: 
   32:         # tz must be preserved
   33:         idx1 = idx1.tz_localize("Asia/Tokyo")
   34:         exp_idx = exp_idx.tz_localize("Asia/Tokyo")
   35: 
   36:         arr, idx = idx1.factorize()
   37:         tm.assert_numpy_array_equal(arr, exp_arr)
   38:         tm.assert_index_equal(idx, exp_idx)
   39:         assert idx.freq == exp_idx.freq
   40: 
   41:         idx2 = DatetimeIndex(
   42:             ["2014-03", "2014-03", "2014-02", "2014-01", "2014-03", "2014-01"]
   43:         )
   44: 
   45:         exp_arr = np.array([2, 2, 1, 0, 2, 0], dtype=np.intp)
   46:         exp_idx = DatetimeIndex(["2014-01", "2014-02", "2014-03"])
   47:         arr, idx = idx2.factorize(sort=True)
   48:         tm.assert_numpy_array_equal(arr, exp_arr)
   49:         tm.assert_index_equal(idx, exp_idx)
   50:         assert idx.freq == exp_idx.freq
   51: 
   52:         exp_arr = np.array([0, 0, 1, 2, 0, 2], dtype=np.intp)
   53:         exp_idx = DatetimeIndex(["2014-03", "2014-02", "2014-01"])
   54:         arr, idx = idx2.factorize()
   55:         tm.assert_numpy_array_equal(arr, exp_arr)
   56:         tm.assert_index_equal(idx, exp_idx)
   57:         assert idx.freq == exp_idx.freq
   58: 
   59:     def test_factorize_preserves_freq(self):
   60:         # GH#38120 freq should be preserved
   61:         idx3 = date_range("2000-01", periods=4, freq="ME", tz="Asia/Tokyo")
   62:         exp_arr = np.array([0, 1, 2, 3], dtype=np.intp)
   63: 
   64:         arr, idx = idx3.factorize()
   65:         tm.assert_numpy_array_equal(arr, exp_arr)
   66:         tm.assert_index_equal(idx, idx3)
   67:         assert idx.freq == idx3.freq
   68: 
   69:         arr, idx = factorize(idx3)
   70:         tm.assert_numpy_array_equal(arr, exp_arr)
   71:         tm.assert_index_equal(idx, idx3)
   72:         assert idx.freq == idx3.freq
   73: 
   74:     def test_factorize_tz(self, tz_naive_fixture, index_or_series):
   75:         tz = tz_naive_fixture
   76:         # GH#13750
   77:         base = date_range("2016-11-05", freq="h", periods=100, tz=tz)
   78:         idx = base.repeat(5)
   79: 
   80:         exp_arr = np.arange(100, dtype=np.intp).repeat(5)
   81: 
   82:         obj = index_or_series(idx)
   83: 
   84:         arr, res = obj.factorize()
   85:         tm.assert_numpy_array_equal(arr, exp_arr)
   86:         expected = base._with_freq(None)
   87:         tm.assert_index_equal(res, expected)
   88:         assert res.freq == expected.freq
   89: 
   90:     def test_factorize_dst(self, index_or_series):
   91:         # GH#13750
   92:         idx = date_range("2016-11-06", freq="h", periods=12, tz="US/Eastern")
   93:         obj = index_or_series(idx)
   94: 
   95:         arr, res = obj.factorize()
   96:         tm.assert_numpy_array_equal(arr, np.arange(12, dtype=np.intp))
   97:         tm.assert_index_equal(res, idx)
   98:         if index_or_series is Index:
   99:             assert res.freq == idx.freq
  100: 
  101:         idx = date_range("2016-06-13", freq="h", periods=12, tz="US/Eastern")
  102:         obj = index_or_series(idx)
  103: 
  104:         arr, res = obj.factorize()
  105:         tm.assert_numpy_array_equal(arr, np.arange(12, dtype=np.intp))
  106:         tm.assert_index_equal(res, idx)
  107:         if index_or_series is Index:
  108:             assert res.freq == idx.freq
  109: 
  110:     @pytest.mark.parametrize("sort", [True, False])
  111:     def test_factorize_no_freq_non_nano(self, tz_naive_fixture, sort):
  112:         # GH#51978 case that does not go through the fastpath based on
  113:         #  non-None freq
  114:         tz = tz_naive_fixture
  115:         idx = date_range("2016-11-06", freq="h", periods=5, tz=tz)[[0, 4, 1, 3, 2]]
  116:         exp_codes, exp_uniques = idx.factorize(sort=sort)
  117: 
  118:         res_codes, res_uniques = idx.as_unit("s").factorize(sort=sort)
  119: 
  120:         tm.assert_numpy_array_equal(res_codes, exp_codes)
  121:         tm.assert_index_equal(res_uniques, exp_uniques.as_unit("s"))
  122: 
  123:         res_codes, res_uniques = idx.as_unit("s").to_series().factorize(sort=sort)
  124:         tm.assert_numpy_array_equal(res_codes, exp_codes)
  125:         tm.assert_index_equal(res_uniques, exp_uniques.as_unit("s"))
