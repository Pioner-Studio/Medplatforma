    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Timedelta,
    6:     TimedeltaIndex,
    7:     timedelta_range,
    8:     to_timedelta,
    9: )
   10: import pandas._testing as tm
   11: 
   12: from pandas.tseries.offsets import (
   13:     Day,
   14:     Second,
   15: )
   16: 
   17: 
   18: class TestTimedeltas:
   19:     def test_timedelta_range_unit(self):
   20:         # GH#49824
   21:         tdi = timedelta_range("0 Days", periods=10, freq="100000D", unit="s")
   22:         exp_arr = (np.arange(10, dtype="i8") * 100_000).view("m8[D]").astype("m8[s]")
   23:         tm.assert_numpy_array_equal(tdi.to_numpy(), exp_arr)
   24: 
   25:     def test_timedelta_range(self):
   26:         expected = to_timedelta(np.arange(5), unit="D")
   27:         result = timedelta_range("0 days", periods=5, freq="D")
   28:         tm.assert_index_equal(result, expected)
   29: 
   30:         expected = to_timedelta(np.arange(11), unit="D")
   31:         result = timedelta_range("0 days", "10 days", freq="D")
   32:         tm.assert_index_equal(result, expected)
   33: 
   34:         expected = to_timedelta(np.arange(5), unit="D") + Second(2) + Day()
   35:         result = timedelta_range("1 days, 00:00:02", "5 days, 00:00:02", freq="D")
   36:         tm.assert_index_equal(result, expected)
   37: 
   38:         expected = to_timedelta([1, 3, 5, 7, 9], unit="D") + Second(2)
   39:         result = timedelta_range("1 days, 00:00:02", periods=5, freq="2D")
   40:         tm.assert_index_equal(result, expected)
   41: 
   42:         expected = to_timedelta(np.arange(50), unit="min") * 30
   43:         result = timedelta_range("0 days", freq="30min", periods=50)
   44:         tm.assert_index_equal(result, expected)
   45: 
   46:     @pytest.mark.parametrize(
   47:         "depr_unit, unit",
   48:         [
   49:             ("H", "hour"),
   50:             ("T", "minute"),
   51:             ("t", "minute"),
   52:             ("S", "second"),
   53:             ("L", "millisecond"),
   54:             ("l", "millisecond"),
   55:             ("U", "microsecond"),
   56:             ("u", "microsecond"),
   57:             ("N", "nanosecond"),
   58:             ("n", "nanosecond"),
   59:         ],
   60:     )
   61:     def test_timedelta_units_H_T_S_L_U_N_deprecated(self, depr_unit, unit):
   62:         # GH#52536
   63:         depr_msg = (
   64:             f"'{depr_unit}' is deprecated and will be removed in a future version."
   65:         )
   66: 
   67:         expected = to_timedelta(np.arange(5), unit=unit)
   68:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   69:             result = to_timedelta(np.arange(5), unit=depr_unit)
   70:             tm.assert_index_equal(result, expected)
   71: 
   72:     @pytest.mark.parametrize(
   73:         "periods, freq", [(3, "2D"), (5, "D"), (6, "19h12min"), (7, "16h"), (9, "12h")]
   74:     )
   75:     def test_linspace_behavior(self, periods, freq):
   76:         # GH 20976
   77:         result = timedelta_range(start="0 days", end="4 days", periods=periods)
   78:         expected = timedelta_range(start="0 days", end="4 days", freq=freq)
   79:         tm.assert_index_equal(result, expected)
   80: 
   81:     @pytest.mark.parametrize("msg_freq, freq", [("H", "19H12min"), ("T", "19h12T")])
   82:     def test_timedelta_range_H_T_deprecated(self, freq, msg_freq):
   83:         # GH#52536
   84:         msg = f"'{msg_freq}' is deprecated and will be removed in a future version."
   85: 
   86:         result = timedelta_range(start="0 days", end="4 days", periods=6)
   87:         with tm.assert_produces_warning(FutureWarning, match=msg):
   88:             expected = timedelta_range(start="0 days", end="4 days", freq=freq)
   89:         tm.assert_index_equal(result, expected)
   90: 
   91:     def test_errors(self):
   92:         # not enough params
   93:         msg = (
   94:             "Of the four parameters: start, end, periods, and freq, "
   95:             "exactly three must be specified"
   96:         )
   97:         with pytest.raises(ValueError, match=msg):
   98:             timedelta_range(start="0 days")
   99: 
  100:         with pytest.raises(ValueError, match=msg):
  101:             timedelta_range(end="5 days")
  102: 
  103:         with pytest.raises(ValueError, match=msg):
  104:             timedelta_range(periods=2)
  105: 
  106:         with pytest.raises(ValueError, match=msg):
  107:             timedelta_range()
  108: 
  109:         # too many params
  110:         with pytest.raises(ValueError, match=msg):
  111:             timedelta_range(start="0 days", end="5 days", periods=10, freq="h")
  112: 
  113:     @pytest.mark.parametrize(
  114:         "start, end, freq, expected_periods",
  115:         [
  116:             ("1D", "10D", "2D", (10 - 1) // 2 + 1),
  117:             ("2D", "30D", "3D", (30 - 2) // 3 + 1),
  118:             ("2s", "50s", "5s", (50 - 2) // 5 + 1),
  119:             # tests that worked before GH 33498:
  120:             ("4D", "16D", "3D", (16 - 4) // 3 + 1),
  121:             ("8D", "16D", "40s", (16 * 3600 * 24 - 8 * 3600 * 24) // 40 + 1),
  122:         ],
  123:     )
  124:     def test_timedelta_range_freq_divide_end(self, start, end, freq, expected_periods):
  125:         # GH 33498 only the cases where `(end % freq) == 0` used to fail
  126:         res = timedelta_range(start=start, end=end, freq=freq)
  127:         assert Timedelta(start) == res[0]
  128:         assert Timedelta(end) >= res[-1]
  129:         assert len(res) == expected_periods
  130: 
  131:     def test_timedelta_range_infer_freq(self):
  132:         # https://github.com/pandas-dev/pandas/issues/35897
  133:         result = timedelta_range("0s", "1s", periods=31)
  134:         assert result.freq is None
  135: 
  136:     @pytest.mark.parametrize(
  137:         "freq_depr, start, end, expected_values, expected_freq",
  138:         [
  139:             (
  140:                 "3.5S",
  141:                 "05:03:01",
  142:                 "05:03:10",
  143:                 ["0 days 05:03:01", "0 days 05:03:04.500000", "0 days 05:03:08"],
  144:                 "3500ms",
  145:             ),
  146:             (
  147:                 "2.5T",
  148:                 "5 hours",
  149:                 "5 hours 8 minutes",
  150:                 [
  151:                     "0 days 05:00:00",
  152:                     "0 days 05:02:30",
  153:                     "0 days 05:05:00",
  154:                     "0 days 05:07:30",
  155:                 ],
  156:                 "150s",
  157:             ),
  158:         ],
  159:     )
  160:     def test_timedelta_range_deprecated_freq(
  161:         self, freq_depr, start, end, expected_values, expected_freq
  162:     ):
  163:         # GH#52536
  164:         msg = (
  165:             f"'{freq_depr[-1]}' is deprecated and will be removed in a future version."
  166:         )
  167: 
  168:         with tm.assert_produces_warning(FutureWarning, match=msg):
  169:             result = timedelta_range(start=start, end=end, freq=freq_depr)
  170:         expected = TimedeltaIndex(
  171:             expected_values, dtype="timedelta64[ns]", freq=expected_freq
  172:         )
  173:         tm.assert_index_equal(result, expected)
