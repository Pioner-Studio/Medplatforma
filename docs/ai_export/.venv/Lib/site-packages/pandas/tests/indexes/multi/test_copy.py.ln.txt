    1: from copy import (
    2:     copy,
    3:     deepcopy,
    4: )
    5: 
    6: import pytest
    7: 
    8: from pandas import MultiIndex
    9: import pandas._testing as tm
   10: 
   11: 
   12: def assert_multiindex_copied(copy, original):
   13:     # Levels should be (at least, shallow copied)
   14:     tm.assert_copy(copy.levels, original.levels)
   15:     tm.assert_almost_equal(copy.codes, original.codes)
   16: 
   17:     # Labels doesn't matter which way copied
   18:     tm.assert_almost_equal(copy.codes, original.codes)
   19:     assert copy.codes is not original.codes
   20: 
   21:     # Names doesn't matter which way copied
   22:     assert copy.names == original.names
   23:     assert copy.names is not original.names
   24: 
   25:     # Sort order should be copied
   26:     assert copy.sortorder == original.sortorder
   27: 
   28: 
   29: def test_copy(idx):
   30:     i_copy = idx.copy()
   31: 
   32:     assert_multiindex_copied(i_copy, idx)
   33: 
   34: 
   35: def test_shallow_copy(idx):
   36:     i_copy = idx._view()
   37: 
   38:     assert_multiindex_copied(i_copy, idx)
   39: 
   40: 
   41: def test_view(idx):
   42:     i_view = idx.view()
   43:     assert_multiindex_copied(i_view, idx)
   44: 
   45: 
   46: @pytest.mark.parametrize("func", [copy, deepcopy])
   47: def test_copy_and_deepcopy(func):
   48:     idx = MultiIndex(
   49:         levels=[["foo", "bar"], ["fizz", "buzz"]],
   50:         codes=[[0, 0, 0, 1], [0, 0, 1, 1]],
   51:         names=["first", "second"],
   52:     )
   53:     idx_copy = func(idx)
   54:     assert idx_copy is not idx
   55:     assert idx_copy.equals(idx)
   56: 
   57: 
   58: @pytest.mark.parametrize("deep", [True, False])
   59: def test_copy_method(deep):
   60:     idx = MultiIndex(
   61:         levels=[["foo", "bar"], ["fizz", "buzz"]],
   62:         codes=[[0, 0, 0, 1], [0, 0, 1, 1]],
   63:         names=["first", "second"],
   64:     )
   65:     idx_copy = idx.copy(deep=deep)
   66:     assert idx_copy.equals(idx)
   67: 
   68: 
   69: @pytest.mark.parametrize("deep", [True, False])
   70: @pytest.mark.parametrize(
   71:     "kwarg, value",
   72:     [
   73:         ("names", ["third", "fourth"]),
   74:     ],
   75: )
   76: def test_copy_method_kwargs(deep, kwarg, value):
   77:     # gh-12309: Check that the "name" argument as well other kwargs are honored
   78:     idx = MultiIndex(
   79:         levels=[["foo", "bar"], ["fizz", "buzz"]],
   80:         codes=[[0, 0, 0, 1], [0, 0, 1, 1]],
   81:         names=["first", "second"],
   82:     )
   83:     idx_copy = idx.copy(**{kwarg: value, "deep": deep})
   84:     assert getattr(idx_copy, kwarg) == value
   85: 
   86: 
   87: def test_copy_deep_false_retains_id():
   88:     # GH#47878
   89:     idx = MultiIndex(
   90:         levels=[["foo", "bar"], ["fizz", "buzz"]],
   91:         codes=[[0, 0, 0, 1], [0, 0, 1, 1]],
   92:         names=["first", "second"],
   93:     )
   94: 
   95:     res = idx.copy(deep=False)
   96:     assert res._id is idx._id
