    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     Index,
    9:     NaT,
   10:     Timedelta,
   11:     TimedeltaIndex,
   12:     timedelta_range,
   13: )
   14: import pandas._testing as tm
   15: from pandas.core.arrays import TimedeltaArray
   16: 
   17: 
   18: class TestTimedeltaIndex:
   19:     def test_astype_object(self):
   20:         idx = timedelta_range(start="1 days", periods=4, freq="D", name="idx")
   21:         expected_list = [
   22:             Timedelta("1 days"),
   23:             Timedelta("2 days"),
   24:             Timedelta("3 days"),
   25:             Timedelta("4 days"),
   26:         ]
   27:         result = idx.astype(object)
   28:         expected = Index(expected_list, dtype=object, name="idx")
   29:         tm.assert_index_equal(result, expected)
   30:         assert idx.tolist() == expected_list
   31: 
   32:     def test_astype_object_with_nat(self):
   33:         idx = TimedeltaIndex(
   34:             [timedelta(days=1), timedelta(days=2), NaT, timedelta(days=4)], name="idx"
   35:         )
   36:         expected_list = [
   37:             Timedelta("1 days"),
   38:             Timedelta("2 days"),
   39:             NaT,
   40:             Timedelta("4 days"),
   41:         ]
   42:         result = idx.astype(object)
   43:         expected = Index(expected_list, dtype=object, name="idx")
   44:         tm.assert_index_equal(result, expected)
   45:         assert idx.tolist() == expected_list
   46: 
   47:     def test_astype(self):
   48:         # GH 13149, GH 13209
   49:         idx = TimedeltaIndex([1e14, "NaT", NaT, np.nan], name="idx")
   50: 
   51:         result = idx.astype(object)
   52:         expected = Index(
   53:             [Timedelta("1 days 03:46:40")] + [NaT] * 3, dtype=object, name="idx"
   54:         )
   55:         tm.assert_index_equal(result, expected)
   56: 
   57:         result = idx.astype(np.int64)
   58:         expected = Index(
   59:             [100000000000000] + [-9223372036854775808] * 3, dtype=np.int64, name="idx"
   60:         )
   61:         tm.assert_index_equal(result, expected)
   62: 
   63:         result = idx.astype(str)
   64:         expected = Index([str(x) for x in idx], name="idx", dtype=object)
   65:         tm.assert_index_equal(result, expected)
   66: 
   67:         rng = timedelta_range("1 days", periods=10)
   68:         result = rng.astype("i8")
   69:         tm.assert_index_equal(result, Index(rng.asi8))
   70:         tm.assert_numpy_array_equal(rng.asi8, result.values)
   71: 
   72:     def test_astype_uint(self):
   73:         arr = timedelta_range("1h", periods=2)
   74: 
   75:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   76:             arr.astype("uint64")
   77:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   78:             arr.astype("uint32")
   79: 
   80:     def test_astype_timedelta64(self):
   81:         # GH 13149, GH 13209
   82:         idx = TimedeltaIndex([1e14, "NaT", NaT, np.nan])
   83: 
   84:         msg = (
   85:             r"Cannot convert from timedelta64\[ns\] to timedelta64. "
   86:             "Supported resolutions are 's', 'ms', 'us', 'ns'"
   87:         )
   88:         with pytest.raises(ValueError, match=msg):
   89:             idx.astype("timedelta64")
   90: 
   91:         result = idx.astype("timedelta64[ns]")
   92:         tm.assert_index_equal(result, idx)
   93:         assert result is not idx
   94: 
   95:         result = idx.astype("timedelta64[ns]", copy=False)
   96:         tm.assert_index_equal(result, idx)
   97:         assert result is idx
   98: 
   99:     def test_astype_to_td64d_raises(self, index_or_series):
  100:         # We don't support "D" reso
  101:         scalar = Timedelta(days=31)
  102:         td = index_or_series(
  103:             [scalar, scalar, scalar + timedelta(minutes=5, seconds=3), NaT],
  104:             dtype="m8[ns]",
  105:         )
  106:         msg = (
  107:             r"Cannot convert from timedelta64\[ns\] to timedelta64\[D\]. "
  108:             "Supported resolutions are 's', 'ms', 'us', 'ns'"
  109:         )
  110:         with pytest.raises(ValueError, match=msg):
  111:             td.astype("timedelta64[D]")
  112: 
  113:     def test_astype_ms_to_s(self, index_or_series):
  114:         scalar = Timedelta(days=31)
  115:         td = index_or_series(
  116:             [scalar, scalar, scalar + timedelta(minutes=5, seconds=3), NaT],
  117:             dtype="m8[ns]",
  118:         )
  119: 
  120:         exp_values = np.asarray(td).astype("m8[s]")
  121:         exp_tda = TimedeltaArray._simple_new(exp_values, dtype=exp_values.dtype)
  122:         expected = index_or_series(exp_tda)
  123:         assert expected.dtype == "m8[s]"
  124:         result = td.astype("timedelta64[s]")
  125:         tm.assert_equal(result, expected)
  126: 
  127:     def test_astype_freq_conversion(self):
  128:         # pre-2.0 td64 astype converted to float64. now for supported units
  129:         #  (s, ms, us, ns) this converts to the requested dtype.
  130:         # This matches TDA and Series
  131:         tdi = timedelta_range("1 Day", periods=30)
  132: 
  133:         res = tdi.astype("m8[s]")
  134:         exp_values = np.asarray(tdi).astype("m8[s]")
  135:         exp_tda = TimedeltaArray._simple_new(
  136:             exp_values, dtype=exp_values.dtype, freq=tdi.freq
  137:         )
  138:         expected = Index(exp_tda)
  139:         assert expected.dtype == "m8[s]"
  140:         tm.assert_index_equal(res, expected)
  141: 
  142:         # check this matches Series and TimedeltaArray
  143:         res = tdi._data.astype("m8[s]")
  144:         tm.assert_equal(res, expected._values)
  145: 
  146:         res = tdi.to_series().astype("m8[s]")
  147:         tm.assert_equal(res._values, expected._values._with_freq(None))
  148: 
  149:     @pytest.mark.parametrize("dtype", [float, "datetime64", "datetime64[ns]"])
  150:     def test_astype_raises(self, dtype):
  151:         # GH 13149, GH 13209
  152:         idx = TimedeltaIndex([1e14, "NaT", NaT, np.nan])
  153:         msg = "Cannot cast TimedeltaIndex to dtype"
  154:         with pytest.raises(TypeError, match=msg):
  155:             idx.astype(dtype)
  156: 
  157:     def test_astype_category(self):
  158:         obj = timedelta_range("1h", periods=2, freq="h")
  159: 
  160:         result = obj.astype("category")
  161:         expected = pd.CategoricalIndex([Timedelta("1h"), Timedelta("2h")])
  162:         tm.assert_index_equal(result, expected)
  163: 
  164:         result = obj._data.astype("category")
  165:         expected = expected.values
  166:         tm.assert_categorical_equal(result, expected)
  167: 
  168:     def test_astype_array_fallback(self):
  169:         obj = timedelta_range("1h", periods=2)
  170:         result = obj.astype(bool)
  171:         expected = Index(np.array([True, True]))
  172:         tm.assert_index_equal(result, expected)
  173: 
  174:         result = obj._data.astype(bool)
  175:         expected = np.array([True, True])
  176:         tm.assert_numpy_array_equal(result, expected)
