    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     Series,
    7:     Timedelta,
    8:     timedelta_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestTimedeltaIndex:
   14:     def test_misc_coverage(self):
   15:         rng = timedelta_range("1 day", periods=5)
   16:         result = rng.groupby(rng.days)
   17:         assert isinstance(next(iter(result.values()))[0], Timedelta)
   18: 
   19:     def test_map(self):
   20:         # test_map_dictlike generally tests
   21: 
   22:         rng = timedelta_range("1 day", periods=10)
   23: 
   24:         f = lambda x: x.days
   25:         result = rng.map(f)
   26:         exp = Index([f(x) for x in rng], dtype=np.int64)
   27:         tm.assert_index_equal(result, exp)
   28: 
   29:     def test_fields(self):
   30:         rng = timedelta_range("1 days, 10:11:12.100123456", periods=2, freq="s")
   31:         tm.assert_index_equal(rng.days, Index([1, 1], dtype=np.int64))
   32:         tm.assert_index_equal(
   33:             rng.seconds,
   34:             Index([10 * 3600 + 11 * 60 + 12, 10 * 3600 + 11 * 60 + 13], dtype=np.int32),
   35:         )
   36:         tm.assert_index_equal(
   37:             rng.microseconds,
   38:             Index([100 * 1000 + 123, 100 * 1000 + 123], dtype=np.int32),
   39:         )
   40:         tm.assert_index_equal(rng.nanoseconds, Index([456, 456], dtype=np.int32))
   41: 
   42:         msg = "'TimedeltaIndex' object has no attribute '{}'"
   43:         with pytest.raises(AttributeError, match=msg.format("hours")):
   44:             rng.hours
   45:         with pytest.raises(AttributeError, match=msg.format("minutes")):
   46:             rng.minutes
   47:         with pytest.raises(AttributeError, match=msg.format("milliseconds")):
   48:             rng.milliseconds
   49: 
   50:         # with nat
   51:         s = Series(rng)
   52:         s[1] = np.nan
   53: 
   54:         tm.assert_series_equal(s.dt.days, Series([1, np.nan], index=[0, 1]))
   55:         tm.assert_series_equal(
   56:             s.dt.seconds, Series([10 * 3600 + 11 * 60 + 12, np.nan], index=[0, 1])
   57:         )
   58: 
   59:         # preserve name (GH15589)
   60:         rng.name = "name"
   61:         assert rng.days.name == "name"
