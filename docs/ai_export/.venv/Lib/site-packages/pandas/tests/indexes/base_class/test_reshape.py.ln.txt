    1: """
    2: Tests for ndarray-like method on the base Index class
    3: """
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import Index
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestReshape:
   12:     def test_repeat(self):
   13:         repeats = 2
   14:         index = Index([1, 2, 3])
   15:         expected = Index([1, 1, 2, 2, 3, 3])
   16: 
   17:         result = index.repeat(repeats)
   18:         tm.assert_index_equal(result, expected)
   19: 
   20:     def test_insert(self):
   21:         # GH 7256
   22:         # validate neg/pos inserts
   23:         result = Index(["b", "c", "d"])
   24: 
   25:         # test 0th element
   26:         tm.assert_index_equal(Index(["a", "b", "c", "d"]), result.insert(0, "a"))
   27: 
   28:         # test Nth element that follows Python list behavior
   29:         tm.assert_index_equal(Index(["b", "c", "e", "d"]), result.insert(-1, "e"))
   30: 
   31:         # test loc +/- neq (0, -1)
   32:         tm.assert_index_equal(result.insert(1, "z"), result.insert(-2, "z"))
   33: 
   34:         # test empty
   35:         null_index = Index([])
   36:         tm.assert_index_equal(Index(["a"], dtype=object), null_index.insert(0, "a"))
   37: 
   38:     def test_insert_missing(self, nulls_fixture, using_infer_string):
   39:         # GH#22295
   40:         # test there is no mangling of NA values
   41:         expected = Index(["a", nulls_fixture, "b", "c"], dtype=object)
   42:         result = Index(list("abc"), dtype=object).insert(
   43:             1, Index([nulls_fixture], dtype=object)
   44:         )
   45:         tm.assert_index_equal(result, expected)
   46: 
   47:     @pytest.mark.parametrize(
   48:         "val", [(1, 2), np.datetime64("2019-12-31"), np.timedelta64(1, "D")]
   49:     )
   50:     @pytest.mark.parametrize("loc", [-1, 2])
   51:     def test_insert_datetime_into_object(self, loc, val):
   52:         # GH#44509
   53:         idx = Index(["1", "2", "3"])
   54:         result = idx.insert(loc, val)
   55:         expected = Index(["1", "2", val, "3"])
   56:         tm.assert_index_equal(result, expected)
   57:         assert type(expected[2]) is type(val)
   58: 
   59:     def test_insert_none_into_string_numpy(self):
   60:         # GH#55365
   61:         pytest.importorskip("pyarrow")
   62:         index = Index(["a", "b", "c"], dtype="string[pyarrow_numpy]")
   63:         result = index.insert(-1, None)
   64:         expected = Index(["a", "b", None, "c"], dtype="string[pyarrow_numpy]")
   65:         tm.assert_index_equal(result, expected)
   66: 
   67:     @pytest.mark.parametrize(
   68:         "pos,expected",
   69:         [
   70:             (0, Index(["b", "c", "d"], name="index")),
   71:             (-1, Index(["a", "b", "c"], name="index")),
   72:         ],
   73:     )
   74:     def test_delete(self, pos, expected):
   75:         index = Index(["a", "b", "c", "d"], name="index")
   76:         result = index.delete(pos)
   77:         tm.assert_index_equal(result, expected)
   78:         assert result.name == expected.name
   79: 
   80:     def test_delete_raises(self):
   81:         index = Index(["a", "b", "c", "d"], name="index")
   82:         msg = "index 5 is out of bounds for axis 0 with size 4"
   83:         with pytest.raises(IndexError, match=msg):
   84:             index.delete(5)
   85: 
   86:     def test_append_multiple(self):
   87:         index = Index(["a", "b", "c", "d", "e", "f"])
   88: 
   89:         foos = [index[:2], index[2:4], index[4:]]
   90:         result = foos[0].append(foos[1:])
   91:         tm.assert_index_equal(result, index)
   92: 
   93:         # empty
   94:         result = index.append([])
   95:         tm.assert_index_equal(result, index)
