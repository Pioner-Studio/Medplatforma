    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     CategoricalIndex,
    6:     DatetimeIndex,
    7:     Index,
    8:     NaT,
    9:     Period,
   10:     PeriodIndex,
   11:     period_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestPeriodIndexAsType:
   17:     @pytest.mark.parametrize("dtype", [float, "timedelta64", "timedelta64[ns]"])
   18:     def test_astype_raises(self, dtype):
   19:         # GH#13149, GH#13209
   20:         idx = PeriodIndex(["2016-05-16", "NaT", NaT, np.nan], freq="D")
   21:         msg = "Cannot cast PeriodIndex to dtype"
   22:         with pytest.raises(TypeError, match=msg):
   23:             idx.astype(dtype)
   24: 
   25:     def test_astype_conversion(self):
   26:         # GH#13149, GH#13209
   27:         idx = PeriodIndex(["2016-05-16", "NaT", NaT, np.nan], freq="D", name="idx")
   28: 
   29:         result = idx.astype(object)
   30:         expected = Index(
   31:             [Period("2016-05-16", freq="D")] + [Period(NaT, freq="D")] * 3,
   32:             dtype="object",
   33:             name="idx",
   34:         )
   35:         tm.assert_index_equal(result, expected)
   36: 
   37:         result = idx.astype(np.int64)
   38:         expected = Index(
   39:             [16937] + [-9223372036854775808] * 3, dtype=np.int64, name="idx"
   40:         )
   41:         tm.assert_index_equal(result, expected)
   42: 
   43:         result = idx.astype(str)
   44:         expected = Index([str(x) for x in idx], name="idx", dtype=object)
   45:         tm.assert_index_equal(result, expected)
   46: 
   47:         idx = period_range("1990", "2009", freq="Y", name="idx")
   48:         result = idx.astype("i8")
   49:         tm.assert_index_equal(result, Index(idx.asi8, name="idx"))
   50:         tm.assert_numpy_array_equal(result.values, idx.asi8)
   51: 
   52:     def test_astype_uint(self):
   53:         arr = period_range("2000", periods=2, name="idx")
   54: 
   55:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   56:             arr.astype("uint64")
   57:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   58:             arr.astype("uint32")
   59: 
   60:     def test_astype_object(self):
   61:         idx = PeriodIndex([], freq="M")
   62: 
   63:         exp = np.array([], dtype=object)
   64:         tm.assert_numpy_array_equal(idx.astype(object).values, exp)
   65:         tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
   66: 
   67:         idx = PeriodIndex(["2011-01", NaT], freq="M")
   68: 
   69:         exp = np.array([Period("2011-01", freq="M"), NaT], dtype=object)
   70:         tm.assert_numpy_array_equal(idx.astype(object).values, exp)
   71:         tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
   72: 
   73:         exp = np.array([Period("2011-01-01", freq="D"), NaT], dtype=object)
   74:         idx = PeriodIndex(["2011-01-01", NaT], freq="D")
   75:         tm.assert_numpy_array_equal(idx.astype(object).values, exp)
   76:         tm.assert_numpy_array_equal(idx._mpl_repr(), exp)
   77: 
   78:     # TODO: de-duplicate this version (from test_ops) with the one above
   79:     # (from test_period)
   80:     def test_astype_object2(self):
   81:         idx = period_range(start="2013-01-01", periods=4, freq="M", name="idx")
   82:         expected_list = [
   83:             Period("2013-01-31", freq="M"),
   84:             Period("2013-02-28", freq="M"),
   85:             Period("2013-03-31", freq="M"),
   86:             Period("2013-04-30", freq="M"),
   87:         ]
   88:         expected = Index(expected_list, dtype=object, name="idx")
   89:         result = idx.astype(object)
   90:         assert isinstance(result, Index)
   91:         assert result.dtype == object
   92:         tm.assert_index_equal(result, expected)
   93:         assert result.name == expected.name
   94:         assert idx.tolist() == expected_list
   95: 
   96:         idx = PeriodIndex(
   97:             ["2013-01-01", "2013-01-02", "NaT", "2013-01-04"], freq="D", name="idx"
   98:         )
   99:         expected_list = [
  100:             Period("2013-01-01", freq="D"),
  101:             Period("2013-01-02", freq="D"),
  102:             Period("NaT", freq="D"),
  103:             Period("2013-01-04", freq="D"),
  104:         ]
  105:         expected = Index(expected_list, dtype=object, name="idx")
  106:         result = idx.astype(object)
  107:         assert isinstance(result, Index)
  108:         assert result.dtype == object
  109:         tm.assert_index_equal(result, expected)
  110:         for i in [0, 1, 3]:
  111:             assert result[i] == expected[i]
  112:         assert result[2] is NaT
  113:         assert result.name == expected.name
  114: 
  115:         result_list = idx.tolist()
  116:         for i in [0, 1, 3]:
  117:             assert result_list[i] == expected_list[i]
  118:         assert result_list[2] is NaT
  119: 
  120:     def test_astype_category(self):
  121:         obj = period_range("2000", periods=2, name="idx")
  122:         result = obj.astype("category")
  123:         expected = CategoricalIndex(
  124:             [Period("2000-01-01", freq="D"), Period("2000-01-02", freq="D")], name="idx"
  125:         )
  126:         tm.assert_index_equal(result, expected)
  127: 
  128:         result = obj._data.astype("category")
  129:         expected = expected.values
  130:         tm.assert_categorical_equal(result, expected)
  131: 
  132:     def test_astype_array_fallback(self):
  133:         obj = period_range("2000", periods=2, name="idx")
  134:         result = obj.astype(bool)
  135:         expected = Index(np.array([True, True]), name="idx")
  136:         tm.assert_index_equal(result, expected)
  137: 
  138:         result = obj._data.astype(bool)
  139:         expected = np.array([True, True])
  140:         tm.assert_numpy_array_equal(result, expected)
  141: 
  142:     def test_period_astype_to_timestamp(self, unit):
  143:         # GH#55958
  144:         pi = PeriodIndex(["2011-01", "2011-02", "2011-03"], freq="M")
  145: 
  146:         exp = DatetimeIndex(
  147:             ["2011-01-01", "2011-02-01", "2011-03-01"], tz="US/Eastern"
  148:         ).as_unit(unit)
  149:         res = pi.astype(f"datetime64[{unit}, US/Eastern]")
  150:         tm.assert_index_equal(res, exp)
  151:         assert res.freq == exp.freq
