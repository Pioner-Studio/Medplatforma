    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._config import using_pyarrow_string_dtype
    5: import pandas._config.config as cf
    6: 
    7: from pandas import Index
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestIndexRendering:
   12:     def test_repr_is_valid_construction_code(self):
   13:         # for the case of Index, where the repr is traditional rather than
   14:         # stylized
   15:         idx = Index(["a", "b"])
   16:         res = eval(repr(idx))
   17:         tm.assert_index_equal(res, idx)
   18: 
   19:     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
   20:     @pytest.mark.parametrize(
   21:         "index,expected",
   22:         [
   23:             # ASCII
   24:             # short
   25:             (
   26:                 Index(["a", "bb", "ccc"]),
   27:                 """Index(['a', 'bb', 'ccc'], dtype='object')""",
   28:             ),
   29:             # multiple lines
   30:             (
   31:                 Index(["a", "bb", "ccc"] * 10),
   32:                 "Index(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', "
   33:                 "'bb', 'ccc', 'a', 'bb', 'ccc',\n"
   34:                 "       'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', "
   35:                 "'bb', 'ccc', 'a', 'bb', 'ccc',\n"
   36:                 "       'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],\n"
   37:                 "      dtype='object')",
   38:             ),
   39:             # truncated
   40:             (
   41:                 Index(["a", "bb", "ccc"] * 100),
   42:                 "Index(['a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a',\n"
   43:                 "       ...\n"
   44:                 "       'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc', 'a', 'bb', 'ccc'],\n"
   45:                 "      dtype='object', length=300)",
   46:             ),
   47:             # Non-ASCII
   48:             # short
   49:             (
   50:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"]),
   51:                 """Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†'], dtype='object')""",
   52:             ),
   53:             # multiple lines
   54:             (
   55:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"] * 10),
   56:                 (
   57:                     "Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', "
   58:                     "'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
   59:                     "       'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', "
   60:                     "'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
   61:                     "       'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
   62:                     "'гЃ†гЃ†гЃ†'],\n"
   63:                     "      dtype='object')"
   64:                 ),
   65:             ),
   66:             # truncated
   67:             (
   68:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"] * 100),
   69:                 (
   70:                     "Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', "
   71:                     "'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚',\n"
   72:                     "       ...\n"
   73:                     "       'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
   74:                     "'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†'],\n"
   75:                     "      dtype='object', length=300)"
   76:                 ),
   77:             ),
   78:         ],
   79:     )
   80:     def test_string_index_repr(self, index, expected):
   81:         result = repr(index)
   82:         assert result == expected
   83: 
   84:     @pytest.mark.xfail(using_pyarrow_string_dtype(), reason="repr different")
   85:     @pytest.mark.parametrize(
   86:         "index,expected",
   87:         [
   88:             # short
   89:             (
   90:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"]),
   91:                 ("Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†'], dtype='object')"),
   92:             ),
   93:             # multiple lines
   94:             (
   95:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"] * 10),
   96:                 (
   97:                     "Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
   98:                     "'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
   99:                     "       'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
  100:                     "'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
  101:                     "       'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
  102:                     "'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
  103:                     "       'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†'],\n"
  104:                     "      dtype='object')"
  105:                     ""
  106:                 ),
  107:             ),
  108:             # truncated
  109:             (
  110:                 Index(["гЃ‚", "гЃ„гЃ„", "гЃ†гЃ†гЃ†"] * 100),
  111:                 (
  112:                     "Index(['гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', "
  113:                     "'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†',\n"
  114:                     "       'гЃ‚',\n"
  115:                     "       ...\n"
  116:                     "       'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', "
  117:                     "'гЃ„гЃ„', 'гЃ†гЃ†гЃ†', 'гЃ‚', 'гЃ„гЃ„',\n"
  118:                     "       'гЃ†гЃ†гЃ†'],\n"
  119:                     "      dtype='object', length=300)"
  120:                 ),
  121:             ),
  122:         ],
  123:     )
  124:     def test_string_index_repr_with_unicode_option(self, index, expected):
  125:         # Enable Unicode option -----------------------------------------
  126:         with cf.option_context("display.unicode.east_asian_width", True):
  127:             result = repr(index)
  128:             assert result == expected
  129: 
  130:     def test_repr_summary(self):
  131:         with cf.option_context("display.max_seq_items", 10):
  132:             result = repr(Index(np.arange(1000)))
  133:             assert len(result) < 200
  134:             assert "..." in result
  135: 
  136:     def test_summary_bug(self):
  137:         # GH#3869
  138:         ind = Index(["{other}%s", "~:{range}:0"], name="A")
  139:         result = ind._summary()
  140:         # shouldn't be formatted accidentally.
  141:         assert "~:{range}:0" in result
  142:         assert "{other}%s" in result
  143: 
  144:     def test_index_repr_bool_nan(self):
  145:         # GH32146
  146:         arr = Index([True, False, np.nan], dtype=object)
  147:         msg = "Index.format is deprecated"
  148:         with tm.assert_produces_warning(FutureWarning, match=msg):
  149:             exp1 = arr.format()
  150:         out1 = ["True", "False", "NaN"]
  151:         assert out1 == exp1
  152: 
  153:         exp2 = repr(arr)
  154:         out2 = "Index([True, False, nan], dtype='object')"
  155:         assert out2 == exp2
  156: 
  157:     def test_format_different_scalar_lengths(self):
  158:         # GH#35439
  159:         idx = Index(["aaaaaaaaa", "b"])
  160:         expected = ["aaaaaaaaa", "b"]
  161:         msg = r"Index\.format is deprecated"
  162:         with tm.assert_produces_warning(FutureWarning, match=msg):
  163:             assert idx.format() == expected
