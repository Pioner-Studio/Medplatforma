    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     CategoricalDtype,
    7:     CategoricalIndex,
    8:     Index,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestCategoricalIndexConstructors:
   14:     def test_construction_disallows_scalar(self):
   15:         msg = "must be called with a collection of some kind"
   16:         with pytest.raises(TypeError, match=msg):
   17:             CategoricalIndex(data=1, categories=list("abcd"), ordered=False)
   18:         with pytest.raises(TypeError, match=msg):
   19:             CategoricalIndex(categories=list("abcd"), ordered=False)
   20: 
   21:     def test_construction(self):
   22:         ci = CategoricalIndex(list("aabbca"), categories=list("abcd"), ordered=False)
   23:         categories = ci.categories
   24: 
   25:         result = Index(ci)
   26:         tm.assert_index_equal(result, ci, exact=True)
   27:         assert not result.ordered
   28: 
   29:         result = Index(ci.values)
   30:         tm.assert_index_equal(result, ci, exact=True)
   31:         assert not result.ordered
   32: 
   33:         # empty
   34:         result = CategoricalIndex([], categories=categories)
   35:         tm.assert_index_equal(result.categories, Index(categories))
   36:         tm.assert_numpy_array_equal(result.codes, np.array([], dtype="int8"))
   37:         assert not result.ordered
   38: 
   39:         # passing categories
   40:         result = CategoricalIndex(list("aabbca"), categories=categories)
   41:         tm.assert_index_equal(result.categories, Index(categories))
   42:         tm.assert_numpy_array_equal(
   43:             result.codes, np.array([0, 0, 1, 1, 2, 0], dtype="int8")
   44:         )
   45: 
   46:         c = Categorical(list("aabbca"))
   47:         result = CategoricalIndex(c)
   48:         tm.assert_index_equal(result.categories, Index(list("abc")))
   49:         tm.assert_numpy_array_equal(
   50:             result.codes, np.array([0, 0, 1, 1, 2, 0], dtype="int8")
   51:         )
   52:         assert not result.ordered
   53: 
   54:         result = CategoricalIndex(c, categories=categories)
   55:         tm.assert_index_equal(result.categories, Index(categories))
   56:         tm.assert_numpy_array_equal(
   57:             result.codes, np.array([0, 0, 1, 1, 2, 0], dtype="int8")
   58:         )
   59:         assert not result.ordered
   60: 
   61:         ci = CategoricalIndex(c, categories=list("abcd"))
   62:         result = CategoricalIndex(ci)
   63:         tm.assert_index_equal(result.categories, Index(categories))
   64:         tm.assert_numpy_array_equal(
   65:             result.codes, np.array([0, 0, 1, 1, 2, 0], dtype="int8")
   66:         )
   67:         assert not result.ordered
   68: 
   69:         result = CategoricalIndex(ci, categories=list("ab"))
   70:         tm.assert_index_equal(result.categories, Index(list("ab")))
   71:         tm.assert_numpy_array_equal(
   72:             result.codes, np.array([0, 0, 1, 1, -1, 0], dtype="int8")
   73:         )
   74:         assert not result.ordered
   75: 
   76:         result = CategoricalIndex(ci, categories=list("ab"), ordered=True)
   77:         tm.assert_index_equal(result.categories, Index(list("ab")))
   78:         tm.assert_numpy_array_equal(
   79:             result.codes, np.array([0, 0, 1, 1, -1, 0], dtype="int8")
   80:         )
   81:         assert result.ordered
   82: 
   83:         result = CategoricalIndex(ci, categories=list("ab"), ordered=True)
   84:         expected = CategoricalIndex(
   85:             ci, categories=list("ab"), ordered=True, dtype="category"
   86:         )
   87:         tm.assert_index_equal(result, expected, exact=True)
   88: 
   89:         # turn me to an Index
   90:         result = Index(np.array(ci))
   91:         assert isinstance(result, Index)
   92:         assert not isinstance(result, CategoricalIndex)
   93: 
   94:     def test_construction_with_dtype(self):
   95:         # specify dtype
   96:         ci = CategoricalIndex(list("aabbca"), categories=list("abc"), ordered=False)
   97: 
   98:         result = Index(np.array(ci), dtype="category")
   99:         tm.assert_index_equal(result, ci, exact=True)
  100: 
  101:         result = Index(np.array(ci).tolist(), dtype="category")
  102:         tm.assert_index_equal(result, ci, exact=True)
  103: 
  104:         # these are generally only equal when the categories are reordered
  105:         ci = CategoricalIndex(list("aabbca"), categories=list("cab"), ordered=False)
  106: 
  107:         result = Index(np.array(ci), dtype="category").reorder_categories(ci.categories)
  108:         tm.assert_index_equal(result, ci, exact=True)
  109: 
  110:         # make sure indexes are handled
  111:         idx = Index(range(3))
  112:         expected = CategoricalIndex([0, 1, 2], categories=idx, ordered=True)
  113:         result = CategoricalIndex(idx, categories=idx, ordered=True)
  114:         tm.assert_index_equal(result, expected, exact=True)
  115: 
  116:     def test_construction_empty_with_bool_categories(self):
  117:         # see GH#22702
  118:         cat = CategoricalIndex([], categories=[True, False])
  119:         categories = sorted(cat.categories.tolist())
  120:         assert categories == [False, True]
  121: 
  122:     def test_construction_with_categorical_dtype(self):
  123:         # construction with CategoricalDtype
  124:         # GH#18109
  125:         data, cats, ordered = "a a b b".split(), "c b a".split(), True
  126:         dtype = CategoricalDtype(categories=cats, ordered=ordered)
  127: 
  128:         result = CategoricalIndex(data, dtype=dtype)
  129:         expected = CategoricalIndex(data, categories=cats, ordered=ordered)
  130:         tm.assert_index_equal(result, expected, exact=True)
  131: 
  132:         # GH#19032
  133:         result = Index(data, dtype=dtype)
  134:         tm.assert_index_equal(result, expected, exact=True)
  135: 
  136:         # error when combining categories/ordered and dtype kwargs
  137:         msg = "Cannot specify `categories` or `ordered` together with `dtype`."
  138:         with pytest.raises(ValueError, match=msg):
  139:             CategoricalIndex(data, categories=cats, dtype=dtype)
  140: 
  141:         with pytest.raises(ValueError, match=msg):
  142:             CategoricalIndex(data, ordered=ordered, dtype=dtype)
