    1: import pytest
    2: 
    3: from pandas import TimedeltaIndex
    4: 
    5: from pandas.tseries.offsets import (
    6:     DateOffset,
    7:     Day,
    8:     Hour,
    9:     MonthEnd,
   10: )
   11: 
   12: 
   13: class TestFreq:
   14:     @pytest.mark.parametrize("values", [["0 days", "2 days", "4 days"], []])
   15:     @pytest.mark.parametrize("freq", ["2D", Day(2), "48h", Hour(48)])
   16:     def test_freq_setter(self, values, freq):
   17:         # GH#20678
   18:         idx = TimedeltaIndex(values)
   19: 
   20:         # can set to an offset, converting from string if necessary
   21:         idx._data.freq = freq
   22:         assert idx.freq == freq
   23:         assert isinstance(idx.freq, DateOffset)
   24: 
   25:         # can reset to None
   26:         idx._data.freq = None
   27:         assert idx.freq is None
   28: 
   29:     def test_with_freq_empty_requires_tick(self):
   30:         idx = TimedeltaIndex([])
   31: 
   32:         off = MonthEnd(1)
   33:         msg = "TimedeltaArray/Index freq must be a Tick"
   34:         with pytest.raises(TypeError, match=msg):
   35:             idx._with_freq(off)
   36:         with pytest.raises(TypeError, match=msg):
   37:             idx._data._with_freq(off)
   38: 
   39:     def test_freq_setter_errors(self):
   40:         # GH#20678
   41:         idx = TimedeltaIndex(["0 days", "2 days", "4 days"])
   42: 
   43:         # setting with an incompatible freq
   44:         msg = (
   45:             "Inferred frequency 2D from passed values does not conform to "
   46:             "passed frequency 5D"
   47:         )
   48:         with pytest.raises(ValueError, match=msg):
   49:             idx._data.freq = "5D"
   50: 
   51:         # setting with a non-fixed frequency
   52:         msg = r"<2 \* BusinessDays> is a non-fixed frequency"
   53:         with pytest.raises(ValueError, match=msg):
   54:             idx._data.freq = "2B"
   55: 
   56:         # setting with non-freq string
   57:         with pytest.raises(ValueError, match="Invalid frequency"):
   58:             idx._data.freq = "foo"
   59: 
   60:     def test_freq_view_safe(self):
   61:         # Setting the freq for one TimedeltaIndex shouldn't alter the freq
   62:         #  for another that views the same data
   63: 
   64:         tdi = TimedeltaIndex(["0 days", "2 days", "4 days"], freq="2D")
   65:         tda = tdi._data
   66: 
   67:         tdi2 = TimedeltaIndex(tda)._with_freq(None)
   68:         assert tdi2.freq is None
   69: 
   70:         # Original was not altered
   71:         assert tdi.freq == "2D"
   72:         assert tda.freq == "2D"
