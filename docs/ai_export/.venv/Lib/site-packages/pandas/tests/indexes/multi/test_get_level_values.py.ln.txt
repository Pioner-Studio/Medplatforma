    1: import numpy as np
    2: 
    3: import pandas as pd
    4: from pandas import (
    5:     CategoricalIndex,
    6:     Index,
    7:     MultiIndex,
    8:     Timestamp,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestGetLevelValues:
   15:     def test_get_level_values_box_datetime64(self):
   16:         dates = date_range("1/1/2000", periods=4)
   17:         levels = [dates, [0, 1]]
   18:         codes = [[0, 0, 1, 1, 2, 2, 3, 3], [0, 1, 0, 1, 0, 1, 0, 1]]
   19: 
   20:         index = MultiIndex(levels=levels, codes=codes)
   21: 
   22:         assert isinstance(index.get_level_values(0)[0], Timestamp)
   23: 
   24: 
   25: def test_get_level_values(idx):
   26:     result = idx.get_level_values(0)
   27:     expected = Index(["foo", "foo", "bar", "baz", "qux", "qux"], name="first")
   28:     tm.assert_index_equal(result, expected)
   29:     assert result.name == "first"
   30: 
   31:     result = idx.get_level_values("first")
   32:     expected = idx.get_level_values(0)
   33:     tm.assert_index_equal(result, expected)
   34: 
   35:     # GH 10460
   36:     index = MultiIndex(
   37:         levels=[CategoricalIndex(["A", "B"]), CategoricalIndex([1, 2, 3])],
   38:         codes=[np.array([0, 0, 0, 1, 1, 1]), np.array([0, 1, 2, 0, 1, 2])],
   39:     )
   40: 
   41:     exp = CategoricalIndex(["A", "A", "A", "B", "B", "B"])
   42:     tm.assert_index_equal(index.get_level_values(0), exp)
   43:     exp = CategoricalIndex([1, 2, 3, 1, 2, 3])
   44:     tm.assert_index_equal(index.get_level_values(1), exp)
   45: 
   46: 
   47: def test_get_level_values_all_na():
   48:     # GH#17924 when level entirely consists of nan
   49:     arrays = [[np.nan, np.nan, np.nan], ["a", np.nan, 1]]
   50:     index = MultiIndex.from_arrays(arrays)
   51:     result = index.get_level_values(0)
   52:     expected = Index([np.nan, np.nan, np.nan], dtype=np.float64)
   53:     tm.assert_index_equal(result, expected)
   54: 
   55:     result = index.get_level_values(1)
   56:     expected = Index(["a", np.nan, 1], dtype=object)
   57:     tm.assert_index_equal(result, expected)
   58: 
   59: 
   60: def test_get_level_values_int_with_na():
   61:     # GH#17924
   62:     arrays = [["a", "b", "b"], [1, np.nan, 2]]
   63:     index = MultiIndex.from_arrays(arrays)
   64:     result = index.get_level_values(1)
   65:     expected = Index([1, np.nan, 2])
   66:     tm.assert_index_equal(result, expected)
   67: 
   68:     arrays = [["a", "b", "b"], [np.nan, np.nan, 2]]
   69:     index = MultiIndex.from_arrays(arrays)
   70:     result = index.get_level_values(1)
   71:     expected = Index([np.nan, np.nan, 2])
   72:     tm.assert_index_equal(result, expected)
   73: 
   74: 
   75: def test_get_level_values_na():
   76:     arrays = [[np.nan, np.nan, np.nan], ["a", np.nan, 1]]
   77:     index = MultiIndex.from_arrays(arrays)
   78:     result = index.get_level_values(0)
   79:     expected = Index([np.nan, np.nan, np.nan])
   80:     tm.assert_index_equal(result, expected)
   81: 
   82:     result = index.get_level_values(1)
   83:     expected = Index(["a", np.nan, 1])
   84:     tm.assert_index_equal(result, expected)
   85: 
   86:     arrays = [["a", "b", "b"], pd.DatetimeIndex([0, 1, pd.NaT])]
   87:     index = MultiIndex.from_arrays(arrays)
   88:     result = index.get_level_values(1)
   89:     expected = pd.DatetimeIndex([0, 1, pd.NaT])
   90:     tm.assert_index_equal(result, expected)
   91: 
   92:     arrays = [[], []]
   93:     index = MultiIndex.from_arrays(arrays)
   94:     result = index.get_level_values(0)
   95:     expected = Index([], dtype=object)
   96:     tm.assert_index_equal(result, expected)
   97: 
   98: 
   99: def test_get_level_values_when_periods():
  100:     # GH33131. See also discussion in GH32669.
  101:     # This test can probably be removed when PeriodIndex._engine is removed.
  102:     from pandas import (
  103:         Period,
  104:         PeriodIndex,
  105:     )
  106: 
  107:     idx = MultiIndex.from_arrays(
  108:         [PeriodIndex([Period("2019Q1"), Period("2019Q2")], name="b")]
  109:     )
  110:     idx2 = MultiIndex.from_arrays(
  111:         [idx._get_level_values(level) for level in range(idx.nlevels)]
  112:     )
  113:     assert all(x.is_monotonic_increasing for x in idx2.levels)
  114: 
  115: 
  116: def test_values_loses_freq_of_underlying_index():
  117:     # GH#49054
  118:     idx = pd.DatetimeIndex(date_range("20200101", periods=3, freq="BME"))
  119:     expected = idx.copy(deep=True)
  120:     idx2 = Index([1, 2, 3])
  121:     midx = MultiIndex(levels=[idx, idx2], codes=[[0, 1, 2], [0, 1, 2]])
  122:     midx.values
  123:     assert idx.freq is not None
  124:     tm.assert_index_equal(idx, expected)
