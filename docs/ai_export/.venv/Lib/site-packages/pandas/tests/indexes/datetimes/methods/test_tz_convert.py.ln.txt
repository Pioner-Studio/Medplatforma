    1: from datetime import datetime
    2: 
    3: import dateutil.tz
    4: from dateutil.tz import gettz
    5: import numpy as np
    6: import pytest
    7: import pytz
    8: 
    9: from pandas._libs.tslibs import timezones
   10: 
   11: from pandas import (
   12:     DatetimeIndex,
   13:     Index,
   14:     NaT,
   15:     Timestamp,
   16:     date_range,
   17:     offsets,
   18: )
   19: import pandas._testing as tm
   20: 
   21: 
   22: class TestTZConvert:
   23:     def test_tz_convert_nat(self):
   24:         # GH#5546
   25:         dates = [NaT]
   26:         idx = DatetimeIndex(dates)
   27:         idx = idx.tz_localize("US/Pacific")
   28:         tm.assert_index_equal(idx, DatetimeIndex(dates, tz="US/Pacific"))
   29:         idx = idx.tz_convert("US/Eastern")
   30:         tm.assert_index_equal(idx, DatetimeIndex(dates, tz="US/Eastern"))
   31:         idx = idx.tz_convert("UTC")
   32:         tm.assert_index_equal(idx, DatetimeIndex(dates, tz="UTC"))
   33: 
   34:         dates = ["2010-12-01 00:00", "2010-12-02 00:00", NaT]
   35:         idx = DatetimeIndex(dates)
   36:         idx = idx.tz_localize("US/Pacific")
   37:         tm.assert_index_equal(idx, DatetimeIndex(dates, tz="US/Pacific"))
   38:         idx = idx.tz_convert("US/Eastern")
   39:         expected = ["2010-12-01 03:00", "2010-12-02 03:00", NaT]
   40:         tm.assert_index_equal(idx, DatetimeIndex(expected, tz="US/Eastern"))
   41: 
   42:         idx = idx + offsets.Hour(5)
   43:         expected = ["2010-12-01 08:00", "2010-12-02 08:00", NaT]
   44:         tm.assert_index_equal(idx, DatetimeIndex(expected, tz="US/Eastern"))
   45:         idx = idx.tz_convert("US/Pacific")
   46:         expected = ["2010-12-01 05:00", "2010-12-02 05:00", NaT]
   47:         tm.assert_index_equal(idx, DatetimeIndex(expected, tz="US/Pacific"))
   48: 
   49:         idx = idx + np.timedelta64(3, "h")
   50:         expected = ["2010-12-01 08:00", "2010-12-02 08:00", NaT]
   51:         tm.assert_index_equal(idx, DatetimeIndex(expected, tz="US/Pacific"))
   52: 
   53:         idx = idx.tz_convert("US/Eastern")
   54:         expected = ["2010-12-01 11:00", "2010-12-02 11:00", NaT]
   55:         tm.assert_index_equal(idx, DatetimeIndex(expected, tz="US/Eastern"))
   56: 
   57:     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
   58:     def test_dti_tz_convert_compat_timestamp(self, prefix):
   59:         strdates = ["1/1/2012", "3/1/2012", "4/1/2012"]
   60:         idx = DatetimeIndex(strdates, tz=prefix + "US/Eastern")
   61: 
   62:         conv = idx[0].tz_convert(prefix + "US/Pacific")
   63:         expected = idx.tz_convert(prefix + "US/Pacific")[0]
   64: 
   65:         assert conv == expected
   66: 
   67:     def test_dti_tz_convert_hour_overflow_dst(self):
   68:         # Regression test for GH#13306
   69: 
   70:         # sorted case US/Eastern -> UTC
   71:         ts = ["2008-05-12 09:50:00", "2008-12-12 09:50:35", "2009-05-12 09:50:32"]
   72:         tt = DatetimeIndex(ts).tz_localize("US/Eastern")
   73:         ut = tt.tz_convert("UTC")
   74:         expected = Index([13, 14, 13], dtype=np.int32)
   75:         tm.assert_index_equal(ut.hour, expected)
   76: 
   77:         # sorted case UTC -> US/Eastern
   78:         ts = ["2008-05-12 13:50:00", "2008-12-12 14:50:35", "2009-05-12 13:50:32"]
   79:         tt = DatetimeIndex(ts).tz_localize("UTC")
   80:         ut = tt.tz_convert("US/Eastern")
   81:         expected = Index([9, 9, 9], dtype=np.int32)
   82:         tm.assert_index_equal(ut.hour, expected)
   83: 
   84:         # unsorted case US/Eastern -> UTC
   85:         ts = ["2008-05-12 09:50:00", "2008-12-12 09:50:35", "2008-05-12 09:50:32"]
   86:         tt = DatetimeIndex(ts).tz_localize("US/Eastern")
   87:         ut = tt.tz_convert("UTC")
   88:         expected = Index([13, 14, 13], dtype=np.int32)
   89:         tm.assert_index_equal(ut.hour, expected)
   90: 
   91:         # unsorted case UTC -> US/Eastern
   92:         ts = ["2008-05-12 13:50:00", "2008-12-12 14:50:35", "2008-05-12 13:50:32"]
   93:         tt = DatetimeIndex(ts).tz_localize("UTC")
   94:         ut = tt.tz_convert("US/Eastern")
   95:         expected = Index([9, 9, 9], dtype=np.int32)
   96:         tm.assert_index_equal(ut.hour, expected)
   97: 
   98:     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
   99:     def test_dti_tz_convert_hour_overflow_dst_timestamps(self, tz):
  100:         # Regression test for GH#13306
  101: 
  102:         # sorted case US/Eastern -> UTC
  103:         ts = [
  104:             Timestamp("2008-05-12 09:50:00", tz=tz),
  105:             Timestamp("2008-12-12 09:50:35", tz=tz),
  106:             Timestamp("2009-05-12 09:50:32", tz=tz),
  107:         ]
  108:         tt = DatetimeIndex(ts)
  109:         ut = tt.tz_convert("UTC")
  110:         expected = Index([13, 14, 13], dtype=np.int32)
  111:         tm.assert_index_equal(ut.hour, expected)
  112: 
  113:         # sorted case UTC -> US/Eastern
  114:         ts = [
  115:             Timestamp("2008-05-12 13:50:00", tz="UTC"),
  116:             Timestamp("2008-12-12 14:50:35", tz="UTC"),
  117:             Timestamp("2009-05-12 13:50:32", tz="UTC"),
  118:         ]
  119:         tt = DatetimeIndex(ts)
  120:         ut = tt.tz_convert("US/Eastern")
  121:         expected = Index([9, 9, 9], dtype=np.int32)
  122:         tm.assert_index_equal(ut.hour, expected)
  123: 
  124:         # unsorted case US/Eastern -> UTC
  125:         ts = [
  126:             Timestamp("2008-05-12 09:50:00", tz=tz),
  127:             Timestamp("2008-12-12 09:50:35", tz=tz),
  128:             Timestamp("2008-05-12 09:50:32", tz=tz),
  129:         ]
  130:         tt = DatetimeIndex(ts)
  131:         ut = tt.tz_convert("UTC")
  132:         expected = Index([13, 14, 13], dtype=np.int32)
  133:         tm.assert_index_equal(ut.hour, expected)
  134: 
  135:         # unsorted case UTC -> US/Eastern
  136:         ts = [
  137:             Timestamp("2008-05-12 13:50:00", tz="UTC"),
  138:             Timestamp("2008-12-12 14:50:35", tz="UTC"),
  139:             Timestamp("2008-05-12 13:50:32", tz="UTC"),
  140:         ]
  141:         tt = DatetimeIndex(ts)
  142:         ut = tt.tz_convert("US/Eastern")
  143:         expected = Index([9, 9, 9], dtype=np.int32)
  144:         tm.assert_index_equal(ut.hour, expected)
  145: 
  146:     @pytest.mark.parametrize("freq, n", [("h", 1), ("min", 60), ("s", 3600)])
  147:     def test_dti_tz_convert_trans_pos_plus_1__bug(self, freq, n):
  148:         # Regression test for tslib.tz_convert(vals, tz1, tz2).
  149:         # See GH#4496 for details.
  150:         idx = date_range(datetime(2011, 3, 26, 23), datetime(2011, 3, 27, 1), freq=freq)
  151:         idx = idx.tz_localize("UTC")
  152:         idx = idx.tz_convert("Europe/Moscow")
  153: 
  154:         expected = np.repeat(np.array([3, 4, 5]), np.array([n, n, 1]))
  155:         tm.assert_index_equal(idx.hour, Index(expected, dtype=np.int32))
  156: 
  157:     def test_dti_tz_convert_dst(self):
  158:         for freq, n in [("h", 1), ("min", 60), ("s", 3600)]:
  159:             # Start DST
  160:             idx = date_range(
  161:                 "2014-03-08 23:00", "2014-03-09 09:00", freq=freq, tz="UTC"
  162:             )
  163:             idx = idx.tz_convert("US/Eastern")
  164:             expected = np.repeat(
  165:                 np.array([18, 19, 20, 21, 22, 23, 0, 1, 3, 4, 5]),
  166:                 np.array([n, n, n, n, n, n, n, n, n, n, 1]),
  167:             )
  168:             tm.assert_index_equal(idx.hour, Index(expected, dtype=np.int32))
  169: 
  170:             idx = date_range(
  171:                 "2014-03-08 18:00", "2014-03-09 05:00", freq=freq, tz="US/Eastern"
  172:             )
  173:             idx = idx.tz_convert("UTC")
  174:             expected = np.repeat(
  175:                 np.array([23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
  176:                 np.array([n, n, n, n, n, n, n, n, n, n, 1]),
  177:             )
  178:             tm.assert_index_equal(idx.hour, Index(expected, dtype=np.int32))
  179: 
  180:             # End DST
  181:             idx = date_range(
  182:                 "2014-11-01 23:00", "2014-11-02 09:00", freq=freq, tz="UTC"
  183:             )
  184:             idx = idx.tz_convert("US/Eastern")
  185:             expected = np.repeat(
  186:                 np.array([19, 20, 21, 22, 23, 0, 1, 1, 2, 3, 4]),
  187:                 np.array([n, n, n, n, n, n, n, n, n, n, 1]),
  188:             )
  189:             tm.assert_index_equal(idx.hour, Index(expected, dtype=np.int32))
  190: 
  191:             idx = date_range(
  192:                 "2014-11-01 18:00", "2014-11-02 05:00", freq=freq, tz="US/Eastern"
  193:             )
  194:             idx = idx.tz_convert("UTC")
  195:             expected = np.repeat(
  196:                 np.array([22, 23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),
  197:                 np.array([n, n, n, n, n, n, n, n, n, n, n, n, 1]),
  198:             )
  199:             tm.assert_index_equal(idx.hour, Index(expected, dtype=np.int32))
  200: 
  201:         # daily
  202:         # Start DST
  203:         idx = date_range("2014-03-08 00:00", "2014-03-09 00:00", freq="D", tz="UTC")
  204:         idx = idx.tz_convert("US/Eastern")
  205:         tm.assert_index_equal(idx.hour, Index([19, 19], dtype=np.int32))
  206: 
  207:         idx = date_range(
  208:             "2014-03-08 00:00", "2014-03-09 00:00", freq="D", tz="US/Eastern"
  209:         )
  210:         idx = idx.tz_convert("UTC")
  211:         tm.assert_index_equal(idx.hour, Index([5, 5], dtype=np.int32))
  212: 
  213:         # End DST
  214:         idx = date_range("2014-11-01 00:00", "2014-11-02 00:00", freq="D", tz="UTC")
  215:         idx = idx.tz_convert("US/Eastern")
  216:         tm.assert_index_equal(idx.hour, Index([20, 20], dtype=np.int32))
  217: 
  218:         idx = date_range(
  219:             "2014-11-01 00:00", "2014-11-02 000:00", freq="D", tz="US/Eastern"
  220:         )
  221:         idx = idx.tz_convert("UTC")
  222:         tm.assert_index_equal(idx.hour, Index([4, 4], dtype=np.int32))
  223: 
  224:     def test_tz_convert_roundtrip(self, tz_aware_fixture):
  225:         tz = tz_aware_fixture
  226:         idx1 = date_range(start="2014-01-01", end="2014-12-31", freq="ME", tz="UTC")
  227:         exp1 = date_range(start="2014-01-01", end="2014-12-31", freq="ME")
  228: 
  229:         idx2 = date_range(start="2014-01-01", end="2014-12-31", freq="D", tz="UTC")
  230:         exp2 = date_range(start="2014-01-01", end="2014-12-31", freq="D")
  231: 
  232:         idx3 = date_range(start="2014-01-01", end="2014-03-01", freq="h", tz="UTC")
  233:         exp3 = date_range(start="2014-01-01", end="2014-03-01", freq="h")
  234: 
  235:         idx4 = date_range(start="2014-08-01", end="2014-10-31", freq="min", tz="UTC")
  236:         exp4 = date_range(start="2014-08-01", end="2014-10-31", freq="min")
  237: 
  238:         for idx, expected in [(idx1, exp1), (idx2, exp2), (idx3, exp3), (idx4, exp4)]:
  239:             converted = idx.tz_convert(tz)
  240:             reset = converted.tz_convert(None)
  241:             tm.assert_index_equal(reset, expected)
  242:             assert reset.tzinfo is None
  243:             expected = converted.tz_convert("UTC").tz_localize(None)
  244:             expected = expected._with_freq("infer")
  245:             tm.assert_index_equal(reset, expected)
  246: 
  247:     def test_dti_tz_convert_tzlocal(self):
  248:         # GH#13583
  249:         # tz_convert doesn't affect to internal
  250:         dti = date_range(start="2001-01-01", end="2001-03-01", tz="UTC")
  251:         dti2 = dti.tz_convert(dateutil.tz.tzlocal())
  252:         tm.assert_numpy_array_equal(dti2.asi8, dti.asi8)
  253: 
  254:         dti = date_range(start="2001-01-01", end="2001-03-01", tz=dateutil.tz.tzlocal())
  255:         dti2 = dti.tz_convert(None)
  256:         tm.assert_numpy_array_equal(dti2.asi8, dti.asi8)
  257: 
  258:     @pytest.mark.parametrize(
  259:         "tz",
  260:         [
  261:             "US/Eastern",
  262:             "dateutil/US/Eastern",
  263:             pytz.timezone("US/Eastern"),
  264:             gettz("US/Eastern"),
  265:         ],
  266:     )
  267:     def test_dti_tz_convert_utc_to_local_no_modify(self, tz):
  268:         rng = date_range("3/11/2012", "3/12/2012", freq="h", tz="utc")
  269:         rng_eastern = rng.tz_convert(tz)
  270: 
  271:         # Values are unmodified
  272:         tm.assert_numpy_array_equal(rng.asi8, rng_eastern.asi8)
  273: 
  274:         assert timezones.tz_compare(rng_eastern.tz, timezones.maybe_get_tz(tz))
  275: 
  276:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
  277:     def test_tz_convert_unsorted(self, tzstr):
  278:         dr = date_range("2012-03-09", freq="h", periods=100, tz="utc")
  279:         dr = dr.tz_convert(tzstr)
  280: 
  281:         result = dr[::-1].hour
  282:         exp = dr.hour[::-1]
  283:         tm.assert_almost_equal(result, exp)
