    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     CategoricalIndex,
    7:     Index,
    8:     MultiIndex,
    9: )
   10: 
   11: 
   12: class TestEquals:
   13:     def test_equals_categorical(self):
   14:         ci1 = CategoricalIndex(["a", "b"], categories=["a", "b"], ordered=True)
   15:         ci2 = CategoricalIndex(["a", "b"], categories=["a", "b", "c"], ordered=True)
   16: 
   17:         assert ci1.equals(ci1)
   18:         assert not ci1.equals(ci2)
   19:         assert ci1.equals(ci1.astype(object))
   20:         assert ci1.astype(object).equals(ci1)
   21: 
   22:         assert (ci1 == ci1).all()
   23:         assert not (ci1 != ci1).all()
   24:         assert not (ci1 > ci1).all()
   25:         assert not (ci1 < ci1).all()
   26:         assert (ci1 <= ci1).all()
   27:         assert (ci1 >= ci1).all()
   28: 
   29:         assert not (ci1 == 1).all()
   30:         assert (ci1 == Index(["a", "b"])).all()
   31:         assert (ci1 == ci1.values).all()
   32: 
   33:         # invalid comparisons
   34:         with pytest.raises(ValueError, match="Lengths must match"):
   35:             ci1 == Index(["a", "b", "c"])
   36: 
   37:         msg = "Categoricals can only be compared if 'categories' are the same"
   38:         with pytest.raises(TypeError, match=msg):
   39:             ci1 == ci2
   40:         with pytest.raises(TypeError, match=msg):
   41:             ci1 == Categorical(ci1.values, ordered=False)
   42:         with pytest.raises(TypeError, match=msg):
   43:             ci1 == Categorical(ci1.values, categories=list("abc"))
   44: 
   45:         # tests
   46:         # make sure that we are testing for category inclusion properly
   47:         ci = CategoricalIndex(list("aabca"), categories=["c", "a", "b"])
   48:         assert not ci.equals(list("aabca"))
   49:         # Same categories, but different order
   50:         # Unordered
   51:         assert ci.equals(CategoricalIndex(list("aabca")))
   52:         # Ordered
   53:         assert not ci.equals(CategoricalIndex(list("aabca"), ordered=True))
   54:         assert ci.equals(ci.copy())
   55: 
   56:         ci = CategoricalIndex(list("aabca") + [np.nan], categories=["c", "a", "b"])
   57:         assert not ci.equals(list("aabca"))
   58:         assert not ci.equals(CategoricalIndex(list("aabca")))
   59:         assert ci.equals(ci.copy())
   60: 
   61:         ci = CategoricalIndex(list("aabca") + [np.nan], categories=["c", "a", "b"])
   62:         assert not ci.equals(list("aabca") + [np.nan])
   63:         assert ci.equals(CategoricalIndex(list("aabca") + [np.nan]))
   64:         assert not ci.equals(CategoricalIndex(list("aabca") + [np.nan], ordered=True))
   65:         assert ci.equals(ci.copy())
   66: 
   67:     def test_equals_categorical_unordered(self):
   68:         # https://github.com/pandas-dev/pandas/issues/16603
   69:         a = CategoricalIndex(["A"], categories=["A", "B"])
   70:         b = CategoricalIndex(["A"], categories=["B", "A"])
   71:         c = CategoricalIndex(["C"], categories=["B", "A"])
   72:         assert a.equals(b)
   73:         assert not a.equals(c)
   74:         assert not b.equals(c)
   75: 
   76:     def test_equals_non_category(self):
   77:         # GH#37667 Case where other contains a value not among ci's
   78:         #  categories ("D") and also contains np.nan
   79:         ci = CategoricalIndex(["A", "B", np.nan, np.nan])
   80:         other = Index(["A", "B", "D", np.nan])
   81: 
   82:         assert not ci.equals(other)
   83: 
   84:     def test_equals_multiindex(self):
   85:         # dont raise NotImplementedError when calling is_dtype_compat
   86: 
   87:         mi = MultiIndex.from_arrays([["A", "B", "C", "D"], range(4)])
   88:         ci = mi.to_flat_index().astype("category")
   89: 
   90:         assert not ci.equals(mi)
   91: 
   92:     def test_equals_string_dtype(self, any_string_dtype):
   93:         # GH#55364
   94:         idx = CategoricalIndex(list("abc"), name="B")
   95:         other = Index(["a", "b", "c"], name="B", dtype=any_string_dtype)
   96:         assert idx.equals(other)
