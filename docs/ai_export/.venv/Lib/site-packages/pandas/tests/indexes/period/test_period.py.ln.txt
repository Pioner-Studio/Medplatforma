    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Index,
    6:     NaT,
    7:     Period,
    8:     PeriodIndex,
    9:     Series,
   10:     date_range,
   11:     offsets,
   12:     period_range,
   13: )
   14: import pandas._testing as tm
   15: 
   16: 
   17: class TestPeriodIndex:
   18:     def test_view_asi8(self):
   19:         idx = PeriodIndex([], freq="M")
   20: 
   21:         exp = np.array([], dtype=np.int64)
   22:         tm.assert_numpy_array_equal(idx.view("i8"), exp)
   23:         tm.assert_numpy_array_equal(idx.asi8, exp)
   24: 
   25:         idx = PeriodIndex(["2011-01", NaT], freq="M")
   26: 
   27:         exp = np.array([492, -9223372036854775808], dtype=np.int64)
   28:         tm.assert_numpy_array_equal(idx.view("i8"), exp)
   29:         tm.assert_numpy_array_equal(idx.asi8, exp)
   30: 
   31:         exp = np.array([14975, -9223372036854775808], dtype=np.int64)
   32:         idx = PeriodIndex(["2011-01-01", NaT], freq="D")
   33:         tm.assert_numpy_array_equal(idx.view("i8"), exp)
   34:         tm.assert_numpy_array_equal(idx.asi8, exp)
   35: 
   36:     def test_values(self):
   37:         idx = PeriodIndex([], freq="M")
   38: 
   39:         exp = np.array([], dtype=object)
   40:         tm.assert_numpy_array_equal(idx.values, exp)
   41:         tm.assert_numpy_array_equal(idx.to_numpy(), exp)
   42: 
   43:         exp = np.array([], dtype=np.int64)
   44:         tm.assert_numpy_array_equal(idx.asi8, exp)
   45: 
   46:         idx = PeriodIndex(["2011-01", NaT], freq="M")
   47: 
   48:         exp = np.array([Period("2011-01", freq="M"), NaT], dtype=object)
   49:         tm.assert_numpy_array_equal(idx.values, exp)
   50:         tm.assert_numpy_array_equal(idx.to_numpy(), exp)
   51:         exp = np.array([492, -9223372036854775808], dtype=np.int64)
   52:         tm.assert_numpy_array_equal(idx.asi8, exp)
   53: 
   54:         idx = PeriodIndex(["2011-01-01", NaT], freq="D")
   55: 
   56:         exp = np.array([Period("2011-01-01", freq="D"), NaT], dtype=object)
   57:         tm.assert_numpy_array_equal(idx.values, exp)
   58:         tm.assert_numpy_array_equal(idx.to_numpy(), exp)
   59:         exp = np.array([14975, -9223372036854775808], dtype=np.int64)
   60:         tm.assert_numpy_array_equal(idx.asi8, exp)
   61: 
   62:     @pytest.mark.parametrize(
   63:         "field",
   64:         [
   65:             "year",
   66:             "month",
   67:             "day",
   68:             "hour",
   69:             "minute",
   70:             "second",
   71:             "weekofyear",
   72:             "week",
   73:             "dayofweek",
   74:             "day_of_week",
   75:             "dayofyear",
   76:             "day_of_year",
   77:             "quarter",
   78:             "qyear",
   79:             "days_in_month",
   80:         ],
   81:     )
   82:     @pytest.mark.parametrize(
   83:         "periodindex",
   84:         [
   85:             period_range(freq="Y", start="1/1/2001", end="12/1/2005"),
   86:             period_range(freq="Q", start="1/1/2001", end="12/1/2002"),
   87:             period_range(freq="M", start="1/1/2001", end="1/1/2002"),
   88:             period_range(freq="D", start="12/1/2001", end="6/1/2001"),
   89:             period_range(freq="h", start="12/31/2001", end="1/1/2002 23:00"),
   90:             period_range(freq="Min", start="12/31/2001", end="1/1/2002 00:20"),
   91:             period_range(
   92:                 freq="s", start="12/31/2001 00:00:00", end="12/31/2001 00:05:00"
   93:             ),
   94:             period_range(end=Period("2006-12-31", "W"), periods=10),
   95:         ],
   96:     )
   97:     def test_fields(self, periodindex, field):
   98:         periods = list(periodindex)
   99:         ser = Series(periodindex)
  100: 
  101:         field_idx = getattr(periodindex, field)
  102:         assert len(periodindex) == len(field_idx)
  103:         for x, val in zip(periods, field_idx):
  104:             assert getattr(x, field) == val
  105: 
  106:         if len(ser) == 0:
  107:             return
  108: 
  109:         field_s = getattr(ser.dt, field)
  110:         assert len(periodindex) == len(field_s)
  111:         for x, val in zip(periods, field_s):
  112:             assert getattr(x, field) == val
  113: 
  114:     def test_is_(self):
  115:         create_index = lambda: period_range(freq="Y", start="1/1/2001", end="12/1/2009")
  116:         index = create_index()
  117:         assert index.is_(index)
  118:         assert not index.is_(create_index())
  119:         assert index.is_(index.view())
  120:         assert index.is_(index.view().view().view().view().view())
  121:         assert index.view().is_(index)
  122:         ind2 = index.view()
  123:         index.name = "Apple"
  124:         assert ind2.is_(index)
  125:         assert not index.is_(index[:])
  126:         assert not index.is_(index.asfreq("M"))
  127:         assert not index.is_(index.asfreq("Y"))
  128: 
  129:         assert not index.is_(index - 2)
  130:         assert not index.is_(index - 0)
  131: 
  132:     def test_index_unique(self):
  133:         idx = PeriodIndex([2000, 2007, 2007, 2009, 2009], freq="Y-JUN")
  134:         expected = PeriodIndex([2000, 2007, 2009], freq="Y-JUN")
  135:         tm.assert_index_equal(idx.unique(), expected)
  136:         assert idx.nunique() == 3
  137: 
  138:     def test_pindex_fieldaccessor_nat(self):
  139:         idx = PeriodIndex(
  140:             ["2011-01", "2011-02", "NaT", "2012-03", "2012-04"], freq="D", name="name"
  141:         )
  142: 
  143:         exp = Index([2011, 2011, -1, 2012, 2012], dtype=np.int64, name="name")
  144:         tm.assert_index_equal(idx.year, exp)
  145:         exp = Index([1, 2, -1, 3, 4], dtype=np.int64, name="name")
  146:         tm.assert_index_equal(idx.month, exp)
  147: 
  148:     def test_pindex_multiples(self):
  149:         expected = PeriodIndex(
  150:             ["2011-01", "2011-03", "2011-05", "2011-07", "2011-09", "2011-11"],
  151:             freq="2M",
  152:         )
  153: 
  154:         pi = period_range(start="1/1/11", end="12/31/11", freq="2M")
  155:         tm.assert_index_equal(pi, expected)
  156:         assert pi.freq == offsets.MonthEnd(2)
  157:         assert pi.freqstr == "2M"
  158: 
  159:         pi = period_range(start="1/1/11", periods=6, freq="2M")
  160:         tm.assert_index_equal(pi, expected)
  161:         assert pi.freq == offsets.MonthEnd(2)
  162:         assert pi.freqstr == "2M"
  163: 
  164:     @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
  165:     @pytest.mark.filterwarnings("ignore:Period with BDay freq:FutureWarning")
  166:     def test_iteration(self):
  167:         index = period_range(start="1/1/10", periods=4, freq="B")
  168: 
  169:         result = list(index)
  170:         assert isinstance(result[0], Period)
  171:         assert result[0].freq == index.freq
  172: 
  173:     def test_with_multi_index(self):
  174:         # #1705
  175:         index = date_range("1/1/2012", periods=4, freq="12h")
  176:         index_as_arrays = [index.to_period(freq="D"), index.hour]
  177: 
  178:         s = Series([0, 1, 2, 3], index_as_arrays)
  179: 
  180:         assert isinstance(s.index.levels[0], PeriodIndex)
  181: 
  182:         assert isinstance(s.index.values[0][0], Period)
  183: 
  184:     def test_map(self):
  185:         # test_map_dictlike generally tests
  186: 
  187:         index = PeriodIndex([2005, 2007, 2009], freq="Y")
  188:         result = index.map(lambda x: x.ordinal)
  189:         exp = Index([x.ordinal for x in index])
  190:         tm.assert_index_equal(result, exp)
  191: 
  192: 
  193: def test_maybe_convert_timedelta():
  194:     pi = PeriodIndex(["2000", "2001"], freq="D")
  195:     offset = offsets.Day(2)
  196:     assert pi._maybe_convert_timedelta(offset) == 2
  197:     assert pi._maybe_convert_timedelta(2) == 2
  198: 
  199:     offset = offsets.BusinessDay()
  200:     msg = r"Input has different freq=B from PeriodIndex\(freq=D\)"
  201:     with pytest.raises(ValueError, match=msg):
  202:         pi._maybe_convert_timedelta(offset)
  203: 
  204: 
  205: @pytest.mark.parametrize("array", [True, False])
  206: def test_dunder_array(array):
  207:     obj = PeriodIndex(["2000-01-01", "2001-01-01"], freq="D")
  208:     if array:
  209:         obj = obj._data
  210: 
  211:     expected = np.array([obj[0], obj[1]], dtype=object)
  212:     result = np.array(obj)
  213:     tm.assert_numpy_array_equal(result, expected)
  214: 
  215:     result = np.asarray(obj)
  216:     tm.assert_numpy_array_equal(result, expected)
  217: 
  218:     expected = obj.asi8
  219:     for dtype in ["i8", "int64", np.int64]:
  220:         result = np.array(obj, dtype=dtype)
  221:         tm.assert_numpy_array_equal(result, expected)
  222: 
  223:         result = np.asarray(obj, dtype=dtype)
  224:         tm.assert_numpy_array_equal(result, expected)
  225: 
  226:     for dtype in ["float64", "int32", "uint64"]:
  227:         msg = "argument must be"
  228:         with pytest.raises(TypeError, match=msg):
  229:             np.array(obj, dtype=dtype)
  230:         with pytest.raises(TypeError, match=msg):
  231:             np.array(obj, dtype=getattr(np, dtype))
