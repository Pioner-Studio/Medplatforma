    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs import index as libindex
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     Index,
    9:     NaT,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestGetSliceBounds:
   15:     @pytest.mark.parametrize("side, expected", [("left", 4), ("right", 5)])
   16:     def test_get_slice_bounds_within(self, side, expected):
   17:         index = Index(list("abcdef"))
   18:         result = index.get_slice_bound("e", side=side)
   19:         assert result == expected
   20: 
   21:     @pytest.mark.parametrize("side", ["left", "right"])
   22:     @pytest.mark.parametrize(
   23:         "data, bound, expected", [(list("abcdef"), "x", 6), (list("bcdefg"), "a", 0)]
   24:     )
   25:     def test_get_slice_bounds_outside(self, side, expected, data, bound):
   26:         index = Index(data)
   27:         result = index.get_slice_bound(bound, side=side)
   28:         assert result == expected
   29: 
   30:     def test_get_slice_bounds_invalid_side(self):
   31:         with pytest.raises(ValueError, match="Invalid value for side kwarg"):
   32:             Index([]).get_slice_bound("a", side="middle")
   33: 
   34: 
   35: class TestGetIndexerNonUnique:
   36:     def test_get_indexer_non_unique_dtype_mismatch(self):
   37:         # GH#25459
   38:         indexes, missing = Index(["A", "B"]).get_indexer_non_unique(Index([0]))
   39:         tm.assert_numpy_array_equal(np.array([-1], dtype=np.intp), indexes)
   40:         tm.assert_numpy_array_equal(np.array([0], dtype=np.intp), missing)
   41: 
   42:     @pytest.mark.parametrize(
   43:         "idx_values,idx_non_unique",
   44:         [
   45:             ([np.nan, 100, 200, 100], [np.nan, 100]),
   46:             ([np.nan, 100.0, 200.0, 100.0], [np.nan, 100.0]),
   47:         ],
   48:     )
   49:     def test_get_indexer_non_unique_int_index(self, idx_values, idx_non_unique):
   50:         indexes, missing = Index(idx_values).get_indexer_non_unique(Index([np.nan]))
   51:         tm.assert_numpy_array_equal(np.array([0], dtype=np.intp), indexes)
   52:         tm.assert_numpy_array_equal(np.array([], dtype=np.intp), missing)
   53: 
   54:         indexes, missing = Index(idx_values).get_indexer_non_unique(
   55:             Index(idx_non_unique)
   56:         )
   57:         tm.assert_numpy_array_equal(np.array([0, 1, 3], dtype=np.intp), indexes)
   58:         tm.assert_numpy_array_equal(np.array([], dtype=np.intp), missing)
   59: 
   60: 
   61: class TestGetLoc:
   62:     @pytest.mark.slow  # to_flat_index takes a while
   63:     def test_get_loc_tuple_monotonic_above_size_cutoff(self, monkeypatch):
   64:         # Go through the libindex path for which using
   65:         # _bin_search vs ndarray.searchsorted makes a difference
   66: 
   67:         with monkeypatch.context():
   68:             monkeypatch.setattr(libindex, "_SIZE_CUTOFF", 100)
   69:             lev = list("ABCD")
   70:             dti = pd.date_range("2016-01-01", periods=10)
   71: 
   72:             mi = pd.MultiIndex.from_product([lev, range(5), dti])
   73:             oidx = mi.to_flat_index()
   74: 
   75:             loc = len(oidx) // 2
   76:             tup = oidx[loc]
   77: 
   78:             res = oidx.get_loc(tup)
   79:         assert res == loc
   80: 
   81:     def test_get_loc_nan_object_dtype_nonmonotonic_nonunique(self):
   82:         # case that goes through _maybe_get_bool_indexer
   83:         idx = Index(["foo", np.nan, None, "foo", 1.0, None], dtype=object)
   84: 
   85:         # we dont raise KeyError on nan
   86:         res = idx.get_loc(np.nan)
   87:         assert res == 1
   88: 
   89:         # we only match on None, not on np.nan
   90:         res = idx.get_loc(None)
   91:         expected = np.array([False, False, True, False, False, True])
   92:         tm.assert_numpy_array_equal(res, expected)
   93: 
   94:         # we don't match at all on mismatched NA
   95:         with pytest.raises(KeyError, match="NaT"):
   96:             idx.get_loc(NaT)
   97: 
   98: 
   99: def test_getitem_boolean_ea_indexer():
  100:     # GH#45806
  101:     ser = pd.Series([True, False, pd.NA], dtype="boolean")
  102:     result = ser.index[ser]
  103:     expected = Index([0])
  104:     tm.assert_index_equal(result, expected)
