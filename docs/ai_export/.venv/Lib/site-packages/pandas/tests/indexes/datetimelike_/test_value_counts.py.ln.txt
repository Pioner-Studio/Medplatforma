    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DatetimeIndex,
    5:     NaT,
    6:     PeriodIndex,
    7:     Series,
    8:     TimedeltaIndex,
    9:     date_range,
   10:     period_range,
   11:     timedelta_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestValueCounts:
   17:     # GH#7735
   18: 
   19:     def test_value_counts_unique_datetimeindex(self, tz_naive_fixture):
   20:         tz = tz_naive_fixture
   21:         orig = date_range("2011-01-01 09:00", freq="h", periods=10, tz=tz)
   22:         self._check_value_counts_with_repeats(orig)
   23: 
   24:     def test_value_counts_unique_timedeltaindex(self):
   25:         orig = timedelta_range("1 days 09:00:00", freq="h", periods=10)
   26:         self._check_value_counts_with_repeats(orig)
   27: 
   28:     def test_value_counts_unique_periodindex(self):
   29:         orig = period_range("2011-01-01 09:00", freq="h", periods=10)
   30:         self._check_value_counts_with_repeats(orig)
   31: 
   32:     def _check_value_counts_with_repeats(self, orig):
   33:         # create repeated values, 'n'th element is repeated by n+1 times
   34:         idx = type(orig)(
   35:             np.repeat(orig._values, range(1, len(orig) + 1)), dtype=orig.dtype
   36:         )
   37: 
   38:         exp_idx = orig[::-1]
   39:         if not isinstance(exp_idx, PeriodIndex):
   40:             exp_idx = exp_idx._with_freq(None)
   41:         expected = Series(range(10, 0, -1), index=exp_idx, dtype="int64", name="count")
   42: 
   43:         for obj in [idx, Series(idx)]:
   44:             tm.assert_series_equal(obj.value_counts(), expected)
   45: 
   46:         tm.assert_index_equal(idx.unique(), orig)
   47: 
   48:     def test_value_counts_unique_datetimeindex2(self, tz_naive_fixture):
   49:         tz = tz_naive_fixture
   50:         idx = DatetimeIndex(
   51:             [
   52:                 "2013-01-01 09:00",
   53:                 "2013-01-01 09:00",
   54:                 "2013-01-01 09:00",
   55:                 "2013-01-01 08:00",
   56:                 "2013-01-01 08:00",
   57:                 NaT,
   58:             ],
   59:             tz=tz,
   60:         )
   61:         self._check_value_counts_dropna(idx)
   62: 
   63:     def test_value_counts_unique_timedeltaindex2(self):
   64:         idx = TimedeltaIndex(
   65:             [
   66:                 "1 days 09:00:00",
   67:                 "1 days 09:00:00",
   68:                 "1 days 09:00:00",
   69:                 "1 days 08:00:00",
   70:                 "1 days 08:00:00",
   71:                 NaT,
   72:             ]
   73:         )
   74:         self._check_value_counts_dropna(idx)
   75: 
   76:     def test_value_counts_unique_periodindex2(self):
   77:         idx = PeriodIndex(
   78:             [
   79:                 "2013-01-01 09:00",
   80:                 "2013-01-01 09:00",
   81:                 "2013-01-01 09:00",
   82:                 "2013-01-01 08:00",
   83:                 "2013-01-01 08:00",
   84:                 NaT,
   85:             ],
   86:             freq="h",
   87:         )
   88:         self._check_value_counts_dropna(idx)
   89: 
   90:     def _check_value_counts_dropna(self, idx):
   91:         exp_idx = idx[[2, 3]]
   92:         expected = Series([3, 2], index=exp_idx, name="count")
   93: 
   94:         for obj in [idx, Series(idx)]:
   95:             tm.assert_series_equal(obj.value_counts(), expected)
   96: 
   97:         exp_idx = idx[[2, 3, -1]]
   98:         expected = Series([3, 2, 1], index=exp_idx, name="count")
   99: 
  100:         for obj in [idx, Series(idx)]:
  101:             tm.assert_series_equal(obj.value_counts(dropna=False), expected)
  102: 
  103:         tm.assert_index_equal(idx.unique(), exp_idx)
