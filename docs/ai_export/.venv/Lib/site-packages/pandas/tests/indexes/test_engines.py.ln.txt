    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs import index as libindex
    7: 
    8: import pandas as pd
    9: 
   10: 
   11: @pytest.fixture(
   12:     params=[
   13:         (libindex.Int64Engine, np.int64),
   14:         (libindex.Int32Engine, np.int32),
   15:         (libindex.Int16Engine, np.int16),
   16:         (libindex.Int8Engine, np.int8),
   17:         (libindex.UInt64Engine, np.uint64),
   18:         (libindex.UInt32Engine, np.uint32),
   19:         (libindex.UInt16Engine, np.uint16),
   20:         (libindex.UInt8Engine, np.uint8),
   21:         (libindex.Float64Engine, np.float64),
   22:         (libindex.Float32Engine, np.float32),
   23:     ],
   24:     ids=lambda x: x[0].__name__,
   25: )
   26: def numeric_indexing_engine_type_and_dtype(request):
   27:     return request.param
   28: 
   29: 
   30: class TestDatetimeEngine:
   31:     @pytest.mark.parametrize(
   32:         "scalar",
   33:         [
   34:             pd.Timedelta(pd.Timestamp("2016-01-01").asm8.view("m8[ns]")),
   35:             pd.Timestamp("2016-01-01")._value,
   36:             pd.Timestamp("2016-01-01").to_pydatetime(),
   37:             pd.Timestamp("2016-01-01").to_datetime64(),
   38:         ],
   39:     )
   40:     def test_not_contains_requires_timestamp(self, scalar):
   41:         dti1 = pd.date_range("2016-01-01", periods=3)
   42:         dti2 = dti1.insert(1, pd.NaT)  # non-monotonic
   43:         dti3 = dti1.insert(3, dti1[0])  # non-unique
   44:         dti4 = pd.date_range("2016-01-01", freq="ns", periods=2_000_000)
   45:         dti5 = dti4.insert(0, dti4[0])  # over size threshold, not unique
   46: 
   47:         msg = "|".join([re.escape(str(scalar)), re.escape(repr(scalar))])
   48:         for dti in [dti1, dti2, dti3, dti4, dti5]:
   49:             with pytest.raises(TypeError, match=msg):
   50:                 scalar in dti._engine
   51: 
   52:             with pytest.raises(KeyError, match=msg):
   53:                 dti._engine.get_loc(scalar)
   54: 
   55: 
   56: class TestTimedeltaEngine:
   57:     @pytest.mark.parametrize(
   58:         "scalar",
   59:         [
   60:             pd.Timestamp(pd.Timedelta(days=42).asm8.view("datetime64[ns]")),
   61:             pd.Timedelta(days=42)._value,
   62:             pd.Timedelta(days=42).to_pytimedelta(),
   63:             pd.Timedelta(days=42).to_timedelta64(),
   64:         ],
   65:     )
   66:     def test_not_contains_requires_timedelta(self, scalar):
   67:         tdi1 = pd.timedelta_range("42 days", freq="9h", periods=1234)
   68:         tdi2 = tdi1.insert(1, pd.NaT)  # non-monotonic
   69:         tdi3 = tdi1.insert(3, tdi1[0])  # non-unique
   70:         tdi4 = pd.timedelta_range("42 days", freq="ns", periods=2_000_000)
   71:         tdi5 = tdi4.insert(0, tdi4[0])  # over size threshold, not unique
   72: 
   73:         msg = "|".join([re.escape(str(scalar)), re.escape(repr(scalar))])
   74:         for tdi in [tdi1, tdi2, tdi3, tdi4, tdi5]:
   75:             with pytest.raises(TypeError, match=msg):
   76:                 scalar in tdi._engine
   77: 
   78:             with pytest.raises(KeyError, match=msg):
   79:                 tdi._engine.get_loc(scalar)
   80: 
   81: 
   82: class TestNumericEngine:
   83:     def test_is_monotonic(self, numeric_indexing_engine_type_and_dtype):
   84:         engine_type, dtype = numeric_indexing_engine_type_and_dtype
   85:         num = 1000
   86:         arr = np.array([1] * num + [2] * num + [3] * num, dtype=dtype)
   87: 
   88:         # monotonic increasing
   89:         engine = engine_type(arr)
   90:         assert engine.is_monotonic_increasing is True
   91:         assert engine.is_monotonic_decreasing is False
   92: 
   93:         # monotonic decreasing
   94:         engine = engine_type(arr[::-1])
   95:         assert engine.is_monotonic_increasing is False
   96:         assert engine.is_monotonic_decreasing is True
   97: 
   98:         # neither monotonic increasing or decreasing
   99:         arr = np.array([1] * num + [2] * num + [1] * num, dtype=dtype)
  100:         engine = engine_type(arr[::-1])
  101:         assert engine.is_monotonic_increasing is False
  102:         assert engine.is_monotonic_decreasing is False
  103: 
  104:     def test_is_unique(self, numeric_indexing_engine_type_and_dtype):
  105:         engine_type, dtype = numeric_indexing_engine_type_and_dtype
  106: 
  107:         # unique
  108:         arr = np.array([1, 3, 2], dtype=dtype)
  109:         engine = engine_type(arr)
  110:         assert engine.is_unique is True
  111: 
  112:         # not unique
  113:         arr = np.array([1, 2, 1], dtype=dtype)
  114:         engine = engine_type(arr)
  115:         assert engine.is_unique is False
  116: 
  117:     def test_get_loc(self, numeric_indexing_engine_type_and_dtype):
  118:         engine_type, dtype = numeric_indexing_engine_type_and_dtype
  119: 
  120:         # unique
  121:         arr = np.array([1, 2, 3], dtype=dtype)
  122:         engine = engine_type(arr)
  123:         assert engine.get_loc(2) == 1
  124: 
  125:         # monotonic
  126:         num = 1000
  127:         arr = np.array([1] * num + [2] * num + [3] * num, dtype=dtype)
  128:         engine = engine_type(arr)
  129:         assert engine.get_loc(2) == slice(1000, 2000)
  130: 
  131:         # not monotonic
  132:         arr = np.array([1, 2, 3] * num, dtype=dtype)
  133:         engine = engine_type(arr)
  134:         expected = np.array([False, True, False] * num, dtype=bool)
  135:         result = engine.get_loc(2)
  136:         assert (result == expected).all()
  137: 
  138: 
  139: class TestObjectEngine:
  140:     engine_type = libindex.ObjectEngine
  141:     dtype = np.object_
  142:     values = list("abc")
  143: 
  144:     def test_is_monotonic(self):
  145:         num = 1000
  146:         arr = np.array(["a"] * num + ["a"] * num + ["c"] * num, dtype=self.dtype)
  147: 
  148:         # monotonic increasing
  149:         engine = self.engine_type(arr)
  150:         assert engine.is_monotonic_increasing is True
  151:         assert engine.is_monotonic_decreasing is False
  152: 
  153:         # monotonic decreasing
  154:         engine = self.engine_type(arr[::-1])
  155:         assert engine.is_monotonic_increasing is False
  156:         assert engine.is_monotonic_decreasing is True
  157: 
  158:         # neither monotonic increasing or decreasing
  159:         arr = np.array(["a"] * num + ["b"] * num + ["a"] * num, dtype=self.dtype)
  160:         engine = self.engine_type(arr[::-1])
  161:         assert engine.is_monotonic_increasing is False
  162:         assert engine.is_monotonic_decreasing is False
  163: 
  164:     def test_is_unique(self):
  165:         # unique
  166:         arr = np.array(self.values, dtype=self.dtype)
  167:         engine = self.engine_type(arr)
  168:         assert engine.is_unique is True
  169: 
  170:         # not unique
  171:         arr = np.array(["a", "b", "a"], dtype=self.dtype)
  172:         engine = self.engine_type(arr)
  173:         assert engine.is_unique is False
  174: 
  175:     def test_get_loc(self):
  176:         # unique
  177:         arr = np.array(self.values, dtype=self.dtype)
  178:         engine = self.engine_type(arr)
  179:         assert engine.get_loc("b") == 1
  180: 
  181:         # monotonic
  182:         num = 1000
  183:         arr = np.array(["a"] * num + ["b"] * num + ["c"] * num, dtype=self.dtype)
  184:         engine = self.engine_type(arr)
  185:         assert engine.get_loc("b") == slice(1000, 2000)
  186: 
  187:         # not monotonic
  188:         arr = np.array(self.values * num, dtype=self.dtype)
  189:         engine = self.engine_type(arr)
  190:         expected = np.array([False, True, False] * num, dtype=bool)
  191:         result = engine.get_loc("b")
  192:         assert (result == expected).all()
