    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     Index,
    7:     MultiIndex,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def test_format(idx):
   13:     msg = "MultiIndex.format is deprecated"
   14:     with tm.assert_produces_warning(FutureWarning, match=msg):
   15:         idx.format()
   16:         idx[:0].format()
   17: 
   18: 
   19: def test_format_integer_names():
   20:     index = MultiIndex(
   21:         levels=[[0, 1], [0, 1]], codes=[[0, 0, 1, 1], [0, 1, 0, 1]], names=[0, 1]
   22:     )
   23:     msg = "MultiIndex.format is deprecated"
   24:     with tm.assert_produces_warning(FutureWarning, match=msg):
   25:         index.format(names=True)
   26: 
   27: 
   28: def test_format_sparse_config(idx):
   29:     # GH1538
   30:     msg = "MultiIndex.format is deprecated"
   31:     with pd.option_context("display.multi_sparse", False):
   32:         with tm.assert_produces_warning(FutureWarning, match=msg):
   33:             result = idx.format()
   34:     assert result[1] == "foo  two"
   35: 
   36: 
   37: def test_format_sparse_display():
   38:     index = MultiIndex(
   39:         levels=[[0, 1], [0, 1], [0, 1], [0]],
   40:         codes=[
   41:             [0, 0, 0, 1, 1, 1],
   42:             [0, 0, 1, 0, 0, 1],
   43:             [0, 1, 0, 0, 1, 0],
   44:             [0, 0, 0, 0, 0, 0],
   45:         ],
   46:     )
   47:     msg = "MultiIndex.format is deprecated"
   48:     with tm.assert_produces_warning(FutureWarning, match=msg):
   49:         result = index.format()
   50:     assert result[3] == "1  0  0  0"
   51: 
   52: 
   53: def test_repr_with_unicode_data():
   54:     with pd.option_context("display.encoding", "UTF-8"):
   55:         d = {"a": ["\u05d0", 2, 3], "b": [4, 5, 6], "c": [7, 8, 9]}
   56:         index = pd.DataFrame(d).set_index(["a", "b"]).index
   57:         assert "\\" not in repr(index)  # we don't want unicode-escaped
   58: 
   59: 
   60: def test_repr_roundtrip_raises():
   61:     mi = MultiIndex.from_product([list("ab"), range(3)], names=["first", "second"])
   62:     msg = "Must pass both levels and codes"
   63:     with pytest.raises(TypeError, match=msg):
   64:         eval(repr(mi))
   65: 
   66: 
   67: def test_unicode_string_with_unicode():
   68:     d = {"a": ["\u05d0", 2, 3], "b": [4, 5, 6], "c": [7, 8, 9]}
   69:     idx = pd.DataFrame(d).set_index(["a", "b"]).index
   70:     str(idx)
   71: 
   72: 
   73: def test_repr_max_seq_item_setting(idx):
   74:     # GH10182
   75:     idx = idx.repeat(50)
   76:     with pd.option_context("display.max_seq_items", None):
   77:         repr(idx)
   78:         assert "..." not in str(idx)
   79: 
   80: 
   81: class TestRepr:
   82:     def test_unicode_repr_issues(self):
   83:         levels = [Index(["a/\u03c3", "b/\u03c3", "c/\u03c3"]), Index([0, 1])]
   84:         codes = [np.arange(3).repeat(2), np.tile(np.arange(2), 3)]
   85:         index = MultiIndex(levels=levels, codes=codes)
   86: 
   87:         repr(index.levels)
   88:         repr(index.get_level_values(1))
   89: 
   90:     def test_repr_max_seq_items_equal_to_n(self, idx):
   91:         # display.max_seq_items == n
   92:         with pd.option_context("display.max_seq_items", 6):
   93:             result = idx.__repr__()
   94:             expected = """\
   95: MultiIndex([('foo', 'one'),
   96:             ('foo', 'two'),
   97:             ('bar', 'one'),
   98:             ('baz', 'two'),
   99:             ('qux', 'one'),
  100:             ('qux', 'two')],
  101:            names=['first', 'second'])"""
  102:             assert result == expected
  103: 
  104:     def test_repr(self, idx):
  105:         result = idx[:1].__repr__()
  106:         expected = """\
  107: MultiIndex([('foo', 'one')],
  108:            names=['first', 'second'])"""
  109:         assert result == expected
  110: 
  111:         result = idx.__repr__()
  112:         expected = """\
  113: MultiIndex([('foo', 'one'),
  114:             ('foo', 'two'),
  115:             ('bar', 'one'),
  116:             ('baz', 'two'),
  117:             ('qux', 'one'),
  118:             ('qux', 'two')],
  119:            names=['first', 'second'])"""
  120:         assert result == expected
  121: 
  122:         with pd.option_context("display.max_seq_items", 5):
  123:             result = idx.__repr__()
  124:             expected = """\
  125: MultiIndex([('foo', 'one'),
  126:             ('foo', 'two'),
  127:             ...
  128:             ('qux', 'one'),
  129:             ('qux', 'two')],
  130:            names=['first', 'second'], length=6)"""
  131:             assert result == expected
  132: 
  133:         # display.max_seq_items == 1
  134:         with pd.option_context("display.max_seq_items", 1):
  135:             result = idx.__repr__()
  136:             expected = """\
  137: MultiIndex([...
  138:             ('qux', 'two')],
  139:            names=['first', ...], length=6)"""
  140:             assert result == expected
  141: 
  142:     def test_rjust(self):
  143:         n = 1000
  144:         ci = pd.CategoricalIndex(list("a" * n) + (["abc"] * n))
  145:         dti = pd.date_range("2000-01-01", freq="s", periods=n * 2)
  146:         mi = MultiIndex.from_arrays([ci, ci.codes + 9, dti], names=["a", "b", "dti"])
  147:         result = mi[:1].__repr__()
  148:         expected = """\
  149: MultiIndex([('a', 9, '2000-01-01 00:00:00')],
  150:            names=['a', 'b', 'dti'])"""
  151:         assert result == expected
  152: 
  153:         result = mi[::500].__repr__()
  154:         expected = """\
  155: MultiIndex([(  'a',  9, '2000-01-01 00:00:00'),
  156:             (  'a',  9, '2000-01-01 00:08:20'),
  157:             ('abc', 10, '2000-01-01 00:16:40'),
  158:             ('abc', 10, '2000-01-01 00:25:00')],
  159:            names=['a', 'b', 'dti'])"""
  160:         assert result == expected
  161: 
  162:         result = mi.__repr__()
  163:         expected = """\
  164: MultiIndex([(  'a',  9, '2000-01-01 00:00:00'),
  165:             (  'a',  9, '2000-01-01 00:00:01'),
  166:             (  'a',  9, '2000-01-01 00:00:02'),
  167:             (  'a',  9, '2000-01-01 00:00:03'),
  168:             (  'a',  9, '2000-01-01 00:00:04'),
  169:             (  'a',  9, '2000-01-01 00:00:05'),
  170:             (  'a',  9, '2000-01-01 00:00:06'),
  171:             (  'a',  9, '2000-01-01 00:00:07'),
  172:             (  'a',  9, '2000-01-01 00:00:08'),
  173:             (  'a',  9, '2000-01-01 00:00:09'),
  174:             ...
  175:             ('abc', 10, '2000-01-01 00:33:10'),
  176:             ('abc', 10, '2000-01-01 00:33:11'),
  177:             ('abc', 10, '2000-01-01 00:33:12'),
  178:             ('abc', 10, '2000-01-01 00:33:13'),
  179:             ('abc', 10, '2000-01-01 00:33:14'),
  180:             ('abc', 10, '2000-01-01 00:33:15'),
  181:             ('abc', 10, '2000-01-01 00:33:16'),
  182:             ('abc', 10, '2000-01-01 00:33:17'),
  183:             ('abc', 10, '2000-01-01 00:33:18'),
  184:             ('abc', 10, '2000-01-01 00:33:19')],
  185:            names=['a', 'b', 'dti'], length=2000)"""
  186:         assert result == expected
  187: 
  188:     def test_tuple_width(self):
  189:         n = 1000
  190:         ci = pd.CategoricalIndex(list("a" * n) + (["abc"] * n))
  191:         dti = pd.date_range("2000-01-01", freq="s", periods=n * 2)
  192:         levels = [ci, ci.codes + 9, dti, dti, dti]
  193:         names = ["a", "b", "dti_1", "dti_2", "dti_3"]
  194:         mi = MultiIndex.from_arrays(levels, names=names)
  195:         result = mi[:1].__repr__()
  196:         expected = """MultiIndex([('a', 9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...)],
  197:            names=['a', 'b', 'dti_1', 'dti_2', 'dti_3'])"""  # noqa: E501
  198:         assert result == expected
  199: 
  200:         result = mi[:10].__repr__()
  201:         expected = """\
  202: MultiIndex([('a', 9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),
  203:             ('a', 9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),
  204:             ('a', 9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),
  205:             ('a', 9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),
  206:             ('a', 9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),
  207:             ('a', 9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),
  208:             ('a', 9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),
  209:             ('a', 9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),
  210:             ('a', 9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),
  211:             ('a', 9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...)],
  212:            names=['a', 'b', 'dti_1', 'dti_2', 'dti_3'])"""
  213:         assert result == expected
  214: 
  215:         result = mi.__repr__()
  216:         expected = """\
  217: MultiIndex([(  'a',  9, '2000-01-01 00:00:00', '2000-01-01 00:00:00', ...),
  218:             (  'a',  9, '2000-01-01 00:00:01', '2000-01-01 00:00:01', ...),
  219:             (  'a',  9, '2000-01-01 00:00:02', '2000-01-01 00:00:02', ...),
  220:             (  'a',  9, '2000-01-01 00:00:03', '2000-01-01 00:00:03', ...),
  221:             (  'a',  9, '2000-01-01 00:00:04', '2000-01-01 00:00:04', ...),
  222:             (  'a',  9, '2000-01-01 00:00:05', '2000-01-01 00:00:05', ...),
  223:             (  'a',  9, '2000-01-01 00:00:06', '2000-01-01 00:00:06', ...),
  224:             (  'a',  9, '2000-01-01 00:00:07', '2000-01-01 00:00:07', ...),
  225:             (  'a',  9, '2000-01-01 00:00:08', '2000-01-01 00:00:08', ...),
  226:             (  'a',  9, '2000-01-01 00:00:09', '2000-01-01 00:00:09', ...),
  227:             ...
  228:             ('abc', 10, '2000-01-01 00:33:10', '2000-01-01 00:33:10', ...),
  229:             ('abc', 10, '2000-01-01 00:33:11', '2000-01-01 00:33:11', ...),
  230:             ('abc', 10, '2000-01-01 00:33:12', '2000-01-01 00:33:12', ...),
  231:             ('abc', 10, '2000-01-01 00:33:13', '2000-01-01 00:33:13', ...),
  232:             ('abc', 10, '2000-01-01 00:33:14', '2000-01-01 00:33:14', ...),
  233:             ('abc', 10, '2000-01-01 00:33:15', '2000-01-01 00:33:15', ...),
  234:             ('abc', 10, '2000-01-01 00:33:16', '2000-01-01 00:33:16', ...),
  235:             ('abc', 10, '2000-01-01 00:33:17', '2000-01-01 00:33:17', ...),
  236:             ('abc', 10, '2000-01-01 00:33:18', '2000-01-01 00:33:18', ...),
  237:             ('abc', 10, '2000-01-01 00:33:19', '2000-01-01 00:33:19', ...)],
  238:            names=['a', 'b', 'dti_1', 'dti_2', 'dti_3'], length=2000)"""
  239:         assert result == expected
  240: 
  241:     def test_multiindex_long_element(self):
  242:         # Non-regression test towards GH#52960
  243:         data = MultiIndex.from_tuples([("c" * 62,)])
  244: 
  245:         expected = (
  246:             "MultiIndex([('cccccccccccccccccccccccccccccccccccccccc"
  247:             "cccccccccccccccccccccc',)],\n           )"
  248:         )
  249:         assert str(data) == expected
