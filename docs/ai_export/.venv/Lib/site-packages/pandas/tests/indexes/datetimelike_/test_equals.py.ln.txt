    1: """
    2: Tests shared for DatetimeIndex/TimedeltaIndex/PeriodIndex
    3: """
    4: from datetime import (
    5:     datetime,
    6:     timedelta,
    7: )
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: import pandas as pd
   13: from pandas import (
   14:     CategoricalIndex,
   15:     DatetimeIndex,
   16:     Index,
   17:     PeriodIndex,
   18:     TimedeltaIndex,
   19:     date_range,
   20:     period_range,
   21:     timedelta_range,
   22: )
   23: import pandas._testing as tm
   24: 
   25: 
   26: class EqualsTests:
   27:     def test_not_equals_numeric(self, index):
   28:         assert not index.equals(Index(index.asi8))
   29:         assert not index.equals(Index(index.asi8.astype("u8")))
   30:         assert not index.equals(Index(index.asi8).astype("f8"))
   31: 
   32:     def test_equals(self, index):
   33:         assert index.equals(index)
   34:         assert index.equals(index.astype(object))
   35:         assert index.equals(CategoricalIndex(index))
   36:         assert index.equals(CategoricalIndex(index.astype(object)))
   37: 
   38:     def test_not_equals_non_arraylike(self, index):
   39:         assert not index.equals(list(index))
   40: 
   41:     def test_not_equals_strings(self, index):
   42:         other = Index([str(x) for x in index], dtype=object)
   43:         assert not index.equals(other)
   44:         assert not index.equals(CategoricalIndex(other))
   45: 
   46:     def test_not_equals_misc_strs(self, index):
   47:         other = Index(list("abc"))
   48:         assert not index.equals(other)
   49: 
   50: 
   51: class TestPeriodIndexEquals(EqualsTests):
   52:     @pytest.fixture
   53:     def index(self):
   54:         return period_range("2013-01-01", periods=5, freq="D")
   55: 
   56:     # TODO: de-duplicate with other test_equals2 methods
   57:     @pytest.mark.parametrize("freq", ["D", "M"])
   58:     def test_equals2(self, freq):
   59:         # GH#13107
   60:         idx = PeriodIndex(["2011-01-01", "2011-01-02", "NaT"], freq=freq)
   61:         assert idx.equals(idx)
   62:         assert idx.equals(idx.copy())
   63:         assert idx.equals(idx.astype(object))
   64:         assert idx.astype(object).equals(idx)
   65:         assert idx.astype(object).equals(idx.astype(object))
   66:         assert not idx.equals(list(idx))
   67:         assert not idx.equals(pd.Series(idx))
   68: 
   69:         idx2 = PeriodIndex(["2011-01-01", "2011-01-02", "NaT"], freq="h")
   70:         assert not idx.equals(idx2)
   71:         assert not idx.equals(idx2.copy())
   72:         assert not idx.equals(idx2.astype(object))
   73:         assert not idx.astype(object).equals(idx2)
   74:         assert not idx.equals(list(idx2))
   75:         assert not idx.equals(pd.Series(idx2))
   76: 
   77:         # same internal, different tz
   78:         idx3 = PeriodIndex._simple_new(
   79:             idx._values._simple_new(idx._values.asi8, dtype=pd.PeriodDtype("h"))
   80:         )
   81:         tm.assert_numpy_array_equal(idx.asi8, idx3.asi8)
   82:         assert not idx.equals(idx3)
   83:         assert not idx.equals(idx3.copy())
   84:         assert not idx.equals(idx3.astype(object))
   85:         assert not idx.astype(object).equals(idx3)
   86:         assert not idx.equals(list(idx3))
   87:         assert not idx.equals(pd.Series(idx3))
   88: 
   89: 
   90: class TestDatetimeIndexEquals(EqualsTests):
   91:     @pytest.fixture
   92:     def index(self):
   93:         return date_range("2013-01-01", periods=5)
   94: 
   95:     def test_equals2(self):
   96:         # GH#13107
   97:         idx = DatetimeIndex(["2011-01-01", "2011-01-02", "NaT"])
   98:         assert idx.equals(idx)
   99:         assert idx.equals(idx.copy())
  100:         assert idx.equals(idx.astype(object))
  101:         assert idx.astype(object).equals(idx)
  102:         assert idx.astype(object).equals(idx.astype(object))
  103:         assert not idx.equals(list(idx))
  104:         assert not idx.equals(pd.Series(idx))
  105: 
  106:         idx2 = DatetimeIndex(["2011-01-01", "2011-01-02", "NaT"], tz="US/Pacific")
  107:         assert not idx.equals(idx2)
  108:         assert not idx.equals(idx2.copy())
  109:         assert not idx.equals(idx2.astype(object))
  110:         assert not idx.astype(object).equals(idx2)
  111:         assert not idx.equals(list(idx2))
  112:         assert not idx.equals(pd.Series(idx2))
  113: 
  114:         # same internal, different tz
  115:         idx3 = DatetimeIndex(idx.asi8, tz="US/Pacific")
  116:         tm.assert_numpy_array_equal(idx.asi8, idx3.asi8)
  117:         assert not idx.equals(idx3)
  118:         assert not idx.equals(idx3.copy())
  119:         assert not idx.equals(idx3.astype(object))
  120:         assert not idx.astype(object).equals(idx3)
  121:         assert not idx.equals(list(idx3))
  122:         assert not idx.equals(pd.Series(idx3))
  123: 
  124:         # check that we do not raise when comparing with OutOfBounds objects
  125:         oob = Index([datetime(2500, 1, 1)] * 3, dtype=object)
  126:         assert not idx.equals(oob)
  127:         assert not idx2.equals(oob)
  128:         assert not idx3.equals(oob)
  129: 
  130:         # check that we do not raise when comparing with OutOfBounds dt64
  131:         oob2 = oob.map(np.datetime64)
  132:         assert not idx.equals(oob2)
  133:         assert not idx2.equals(oob2)
  134:         assert not idx3.equals(oob2)
  135: 
  136:     @pytest.mark.parametrize("freq", ["B", "C"])
  137:     def test_not_equals_bday(self, freq):
  138:         rng = date_range("2009-01-01", "2010-01-01", freq=freq)
  139:         assert not rng.equals(list(rng))
  140: 
  141: 
  142: class TestTimedeltaIndexEquals(EqualsTests):
  143:     @pytest.fixture
  144:     def index(self):
  145:         return timedelta_range("1 day", periods=10)
  146: 
  147:     def test_equals2(self):
  148:         # GH#13107
  149:         idx = TimedeltaIndex(["1 days", "2 days", "NaT"])
  150:         assert idx.equals(idx)
  151:         assert idx.equals(idx.copy())
  152:         assert idx.equals(idx.astype(object))
  153:         assert idx.astype(object).equals(idx)
  154:         assert idx.astype(object).equals(idx.astype(object))
  155:         assert not idx.equals(list(idx))
  156:         assert not idx.equals(pd.Series(idx))
  157: 
  158:         idx2 = TimedeltaIndex(["2 days", "1 days", "NaT"])
  159:         assert not idx.equals(idx2)
  160:         assert not idx.equals(idx2.copy())
  161:         assert not idx.equals(idx2.astype(object))
  162:         assert not idx.astype(object).equals(idx2)
  163:         assert not idx.astype(object).equals(idx2.astype(object))
  164:         assert not idx.equals(list(idx2))
  165:         assert not idx.equals(pd.Series(idx2))
  166: 
  167:         # Check that we dont raise OverflowError on comparisons outside the
  168:         #  implementation range GH#28532
  169:         oob = Index([timedelta(days=10**6)] * 3, dtype=object)
  170:         assert not idx.equals(oob)
  171:         assert not idx2.equals(oob)
  172: 
  173:         oob2 = Index([np.timedelta64(x) for x in oob], dtype=object)
  174:         assert (oob == oob2).all()
  175:         assert not idx.equals(oob2)
  176:         assert not idx2.equals(oob2)
  177: 
  178:         oob3 = oob.map(np.timedelta64)
  179:         assert (oob3 == oob).all()
  180:         assert not idx.equals(oob3)
  181:         assert not idx2.equals(oob3)
