    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import IncompatibleFrequency
    5: 
    6: from pandas import (
    7:     NaT,
    8:     Period,
    9:     PeriodIndex,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestSearchsorted:
   15:     @pytest.mark.parametrize("freq", ["D", "2D"])
   16:     def test_searchsorted(self, freq):
   17:         pidx = PeriodIndex(
   18:             ["2014-01-01", "2014-01-02", "2014-01-03", "2014-01-04", "2014-01-05"],
   19:             freq=freq,
   20:         )
   21: 
   22:         p1 = Period("2014-01-01", freq=freq)
   23:         assert pidx.searchsorted(p1) == 0
   24: 
   25:         p2 = Period("2014-01-04", freq=freq)
   26:         assert pidx.searchsorted(p2) == 3
   27: 
   28:         assert pidx.searchsorted(NaT) == 5
   29: 
   30:         msg = "Input has different freq=h from PeriodArray"
   31:         with pytest.raises(IncompatibleFrequency, match=msg):
   32:             pidx.searchsorted(Period("2014-01-01", freq="h"))
   33: 
   34:         msg = "Input has different freq=5D from PeriodArray"
   35:         with pytest.raises(IncompatibleFrequency, match=msg):
   36:             pidx.searchsorted(Period("2014-01-01", freq="5D"))
   37: 
   38:     def test_searchsorted_different_argument_classes(self, listlike_box):
   39:         pidx = PeriodIndex(
   40:             ["2014-01-01", "2014-01-02", "2014-01-03", "2014-01-04", "2014-01-05"],
   41:             freq="D",
   42:         )
   43:         result = pidx.searchsorted(listlike_box(pidx))
   44:         expected = np.arange(len(pidx), dtype=result.dtype)
   45:         tm.assert_numpy_array_equal(result, expected)
   46: 
   47:         result = pidx._data.searchsorted(listlike_box(pidx))
   48:         tm.assert_numpy_array_equal(result, expected)
   49: 
   50:     def test_searchsorted_invalid(self):
   51:         pidx = PeriodIndex(
   52:             ["2014-01-01", "2014-01-02", "2014-01-03", "2014-01-04", "2014-01-05"],
   53:             freq="D",
   54:         )
   55: 
   56:         other = np.array([0, 1], dtype=np.int64)
   57: 
   58:         msg = "|".join(
   59:             [
   60:                 "searchsorted requires compatible dtype or scalar",
   61:                 "value should be a 'Period', 'NaT', or array of those. Got",
   62:             ]
   63:         )
   64:         with pytest.raises(TypeError, match=msg):
   65:             pidx.searchsorted(other)
   66: 
   67:         with pytest.raises(TypeError, match=msg):
   68:             pidx.searchsorted(other.astype("timedelta64[ns]"))
   69: 
   70:         with pytest.raises(TypeError, match=msg):
   71:             pidx.searchsorted(np.timedelta64(4))
   72: 
   73:         with pytest.raises(TypeError, match=msg):
   74:             pidx.searchsorted(np.timedelta64("NaT", "ms"))
   75: 
   76:         with pytest.raises(TypeError, match=msg):
   77:             pidx.searchsorted(np.datetime64(4, "ns"))
   78: 
   79:         with pytest.raises(TypeError, match=msg):
   80:             pidx.searchsorted(np.datetime64("NaT", "ns"))
