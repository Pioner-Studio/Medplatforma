    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs import lib
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     Index,
   11:     Timedelta,
   12:     TimedeltaIndex,
   13:     timedelta_range,
   14: )
   15: import pandas._testing as tm
   16: 
   17: 
   18: class TestTimedeltaIndexInsert:
   19:     def test_insert(self):
   20:         idx = TimedeltaIndex(["4day", "1day", "2day"], name="idx")
   21: 
   22:         result = idx.insert(2, timedelta(days=5))
   23:         exp = TimedeltaIndex(["4day", "1day", "5day", "2day"], name="idx")
   24:         tm.assert_index_equal(result, exp)
   25: 
   26:         # insertion of non-datetime should coerce to object index
   27:         result = idx.insert(1, "inserted")
   28:         expected = Index(
   29:             [Timedelta("4day"), "inserted", Timedelta("1day"), Timedelta("2day")],
   30:             name="idx",
   31:         )
   32:         assert not isinstance(result, TimedeltaIndex)
   33:         tm.assert_index_equal(result, expected)
   34:         assert result.name == expected.name
   35: 
   36:         idx = timedelta_range("1day 00:00:01", periods=3, freq="s", name="idx")
   37: 
   38:         # preserve freq
   39:         expected_0 = TimedeltaIndex(
   40:             ["1day", "1day 00:00:01", "1day 00:00:02", "1day 00:00:03"],
   41:             name="idx",
   42:             freq="s",
   43:         )
   44:         expected_3 = TimedeltaIndex(
   45:             ["1day 00:00:01", "1day 00:00:02", "1day 00:00:03", "1day 00:00:04"],
   46:             name="idx",
   47:             freq="s",
   48:         )
   49: 
   50:         # reset freq to None
   51:         expected_1_nofreq = TimedeltaIndex(
   52:             ["1day 00:00:01", "1day 00:00:01", "1day 00:00:02", "1day 00:00:03"],
   53:             name="idx",
   54:             freq=None,
   55:         )
   56:         expected_3_nofreq = TimedeltaIndex(
   57:             ["1day 00:00:01", "1day 00:00:02", "1day 00:00:03", "1day 00:00:05"],
   58:             name="idx",
   59:             freq=None,
   60:         )
   61: 
   62:         cases = [
   63:             (0, Timedelta("1day"), expected_0),
   64:             (-3, Timedelta("1day"), expected_0),
   65:             (3, Timedelta("1day 00:00:04"), expected_3),
   66:             (1, Timedelta("1day 00:00:01"), expected_1_nofreq),
   67:             (3, Timedelta("1day 00:00:05"), expected_3_nofreq),
   68:         ]
   69: 
   70:         for n, d, expected in cases:
   71:             result = idx.insert(n, d)
   72:             tm.assert_index_equal(result, expected)
   73:             assert result.name == expected.name
   74:             assert result.freq == expected.freq
   75: 
   76:     @pytest.mark.parametrize(
   77:         "null", [None, np.nan, np.timedelta64("NaT"), pd.NaT, pd.NA]
   78:     )
   79:     def test_insert_nat(self, null):
   80:         # GH 18295 (test missing)
   81:         idx = timedelta_range("1day", "3day")
   82:         result = idx.insert(1, null)
   83:         expected = TimedeltaIndex(["1day", pd.NaT, "2day", "3day"])
   84:         tm.assert_index_equal(result, expected)
   85: 
   86:     def test_insert_invalid_na(self):
   87:         idx = TimedeltaIndex(["4day", "1day", "2day"], name="idx")
   88: 
   89:         item = np.datetime64("NaT")
   90:         result = idx.insert(0, item)
   91: 
   92:         expected = Index([item] + list(idx), dtype=object, name="idx")
   93:         tm.assert_index_equal(result, expected)
   94: 
   95:         # Also works if we pass a different dt64nat object
   96:         item2 = np.datetime64("NaT")
   97:         result = idx.insert(0, item2)
   98:         tm.assert_index_equal(result, expected)
   99: 
  100:     @pytest.mark.parametrize(
  101:         "item", [0, np.int64(0), np.float64(0), np.array(0), np.datetime64(456, "us")]
  102:     )
  103:     def test_insert_mismatched_types_raises(self, item):
  104:         # GH#33703 dont cast these to td64
  105:         tdi = TimedeltaIndex(["4day", "1day", "2day"], name="idx")
  106: 
  107:         result = tdi.insert(1, item)
  108: 
  109:         expected = Index(
  110:             [tdi[0], lib.item_from_zerodim(item)] + list(tdi[1:]),
  111:             dtype=object,
  112:             name="idx",
  113:         )
  114:         tm.assert_index_equal(result, expected)
  115: 
  116:     def test_insert_castable_str(self):
  117:         idx = timedelta_range("1day", "3day")
  118: 
  119:         result = idx.insert(0, "1 Day")
  120: 
  121:         expected = TimedeltaIndex([idx[0]] + list(idx))
  122:         tm.assert_index_equal(result, expected)
  123: 
  124:     def test_insert_non_castable_str(self):
  125:         idx = timedelta_range("1day", "3day")
  126: 
  127:         result = idx.insert(0, "foo")
  128: 
  129:         expected = Index(["foo"] + list(idx), dtype=object)
  130:         tm.assert_index_equal(result, expected)
  131: 
  132:     def test_insert_empty(self):
  133:         # Corner case inserting with length zero doesn't raise IndexError
  134:         # GH#33573 for freq preservation
  135:         idx = timedelta_range("1 Day", periods=3)
  136:         td = idx[0]
  137: 
  138:         result = idx[:0].insert(0, td)
  139:         assert result.freq == "D"
  140: 
  141:         with pytest.raises(IndexError, match="loc must be an integer between"):
  142:             result = idx[:0].insert(1, td)
  143: 
  144:         with pytest.raises(IndexError, match="loc must be an integer between"):
  145:             result = idx[:0].insert(-1, td)
