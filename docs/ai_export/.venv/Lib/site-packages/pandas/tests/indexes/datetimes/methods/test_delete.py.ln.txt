    1: import pytest
    2: 
    3: from pandas import (
    4:     DatetimeIndex,
    5:     Series,
    6:     date_range,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestDelete:
   12:     def test_delete(self, unit):
   13:         idx = date_range(
   14:             start="2000-01-01", periods=5, freq="ME", name="idx", unit=unit
   15:         )
   16: 
   17:         # preserve freq
   18:         expected_0 = date_range(
   19:             start="2000-02-01", periods=4, freq="ME", name="idx", unit=unit
   20:         )
   21:         expected_4 = date_range(
   22:             start="2000-01-01", periods=4, freq="ME", name="idx", unit=unit
   23:         )
   24: 
   25:         # reset freq to None
   26:         expected_1 = DatetimeIndex(
   27:             ["2000-01-31", "2000-03-31", "2000-04-30", "2000-05-31"],
   28:             freq=None,
   29:             name="idx",
   30:         ).as_unit(unit)
   31: 
   32:         cases = {
   33:             0: expected_0,
   34:             -5: expected_0,
   35:             -1: expected_4,
   36:             4: expected_4,
   37:             1: expected_1,
   38:         }
   39:         for n, expected in cases.items():
   40:             result = idx.delete(n)
   41:             tm.assert_index_equal(result, expected)
   42:             assert result.name == expected.name
   43:             assert result.freq == expected.freq
   44: 
   45:         with pytest.raises((IndexError, ValueError), match="out of bounds"):
   46:             # either depending on numpy version
   47:             idx.delete(5)
   48: 
   49:     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Pacific"])
   50:     def test_delete2(self, tz):
   51:         idx = date_range(
   52:             start="2000-01-01 09:00", periods=10, freq="h", name="idx", tz=tz
   53:         )
   54: 
   55:         expected = date_range(
   56:             start="2000-01-01 10:00", periods=9, freq="h", name="idx", tz=tz
   57:         )
   58:         result = idx.delete(0)
   59:         tm.assert_index_equal(result, expected)
   60:         assert result.name == expected.name
   61:         assert result.freqstr == "h"
   62:         assert result.tz == expected.tz
   63: 
   64:         expected = date_range(
   65:             start="2000-01-01 09:00", periods=9, freq="h", name="idx", tz=tz
   66:         )
   67:         result = idx.delete(-1)
   68:         tm.assert_index_equal(result, expected)
   69:         assert result.name == expected.name
   70:         assert result.freqstr == "h"
   71:         assert result.tz == expected.tz
   72: 
   73:     def test_delete_slice(self, unit):
   74:         idx = date_range(
   75:             start="2000-01-01", periods=10, freq="D", name="idx", unit=unit
   76:         )
   77: 
   78:         # preserve freq
   79:         expected_0_2 = date_range(
   80:             start="2000-01-04", periods=7, freq="D", name="idx", unit=unit
   81:         )
   82:         expected_7_9 = date_range(
   83:             start="2000-01-01", periods=7, freq="D", name="idx", unit=unit
   84:         )
   85: 
   86:         # reset freq to None
   87:         expected_3_5 = DatetimeIndex(
   88:             [
   89:                 "2000-01-01",
   90:                 "2000-01-02",
   91:                 "2000-01-03",
   92:                 "2000-01-07",
   93:                 "2000-01-08",
   94:                 "2000-01-09",
   95:                 "2000-01-10",
   96:             ],
   97:             freq=None,
   98:             name="idx",
   99:         ).as_unit(unit)
  100: 
  101:         cases = {
  102:             (0, 1, 2): expected_0_2,
  103:             (7, 8, 9): expected_7_9,
  104:             (3, 4, 5): expected_3_5,
  105:         }
  106:         for n, expected in cases.items():
  107:             result = idx.delete(n)
  108:             tm.assert_index_equal(result, expected)
  109:             assert result.name == expected.name
  110:             assert result.freq == expected.freq
  111: 
  112:             result = idx.delete(slice(n[0], n[-1] + 1))
  113:             tm.assert_index_equal(result, expected)
  114:             assert result.name == expected.name
  115:             assert result.freq == expected.freq
  116: 
  117:     # TODO: belongs in Series.drop tests?
  118:     @pytest.mark.parametrize("tz", [None, "Asia/Tokyo", "US/Pacific"])
  119:     def test_delete_slice2(self, tz, unit):
  120:         dti = date_range(
  121:             "2000-01-01 09:00", periods=10, freq="h", name="idx", tz=tz, unit=unit
  122:         )
  123:         ts = Series(
  124:             1,
  125:             index=dti,
  126:         )
  127:         # preserve freq
  128:         result = ts.drop(ts.index[:5]).index
  129:         expected = dti[5:]
  130:         tm.assert_index_equal(result, expected)
  131:         assert result.name == expected.name
  132:         assert result.freq == expected.freq
  133:         assert result.tz == expected.tz
  134: 
  135:         # reset freq to None
  136:         result = ts.drop(ts.index[[1, 3, 5, 7, 9]]).index
  137:         expected = dti[::2]._with_freq(None)
  138:         tm.assert_index_equal(result, expected)
  139:         assert result.name == expected.name
  140:         assert result.freq == expected.freq
  141:         assert result.tz == expected.tz
