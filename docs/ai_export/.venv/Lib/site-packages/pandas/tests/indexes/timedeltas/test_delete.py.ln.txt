    1: from pandas import (
    2:     TimedeltaIndex,
    3:     timedelta_range,
    4: )
    5: import pandas._testing as tm
    6: 
    7: 
    8: class TestTimedeltaIndexDelete:
    9:     def test_delete(self):
   10:         idx = timedelta_range(start="1 Days", periods=5, freq="D", name="idx")
   11: 
   12:         # preserve freq
   13:         expected_0 = timedelta_range(start="2 Days", periods=4, freq="D", name="idx")
   14:         expected_4 = timedelta_range(start="1 Days", periods=4, freq="D", name="idx")
   15: 
   16:         # reset freq to None
   17:         expected_1 = TimedeltaIndex(
   18:             ["1 day", "3 day", "4 day", "5 day"], freq=None, name="idx"
   19:         )
   20: 
   21:         cases = {
   22:             0: expected_0,
   23:             -5: expected_0,
   24:             -1: expected_4,
   25:             4: expected_4,
   26:             1: expected_1,
   27:         }
   28:         for n, expected in cases.items():
   29:             result = idx.delete(n)
   30:             tm.assert_index_equal(result, expected)
   31:             assert result.name == expected.name
   32:             assert result.freq == expected.freq
   33: 
   34:         with tm.external_error_raised((IndexError, ValueError)):
   35:             # either depending on numpy version
   36:             idx.delete(5)
   37: 
   38:     def test_delete_slice(self):
   39:         idx = timedelta_range(start="1 days", periods=10, freq="D", name="idx")
   40: 
   41:         # preserve freq
   42:         expected_0_2 = timedelta_range(start="4 days", periods=7, freq="D", name="idx")
   43:         expected_7_9 = timedelta_range(start="1 days", periods=7, freq="D", name="idx")
   44: 
   45:         # reset freq to None
   46:         expected_3_5 = TimedeltaIndex(
   47:             ["1 d", "2 d", "3 d", "7 d", "8 d", "9 d", "10d"], freq=None, name="idx"
   48:         )
   49: 
   50:         cases = {
   51:             (0, 1, 2): expected_0_2,
   52:             (7, 8, 9): expected_7_9,
   53:             (3, 4, 5): expected_3_5,
   54:         }
   55:         for n, expected in cases.items():
   56:             result = idx.delete(n)
   57:             tm.assert_index_equal(result, expected)
   58:             assert result.name == expected.name
   59:             assert result.freq == expected.freq
   60: 
   61:             result = idx.delete(slice(n[0], n[-1] + 1))
   62:             tm.assert_index_equal(result, expected)
   63:             assert result.name == expected.name
   64:             assert result.freq == expected.freq
   65: 
   66:     def test_delete_doesnt_infer_freq(self):
   67:         # GH#30655 behavior matches DatetimeIndex
   68: 
   69:         tdi = TimedeltaIndex(["1 Day", "2 Days", None, "3 Days", "4 Days"])
   70:         result = tdi.delete(2)
   71:         assert result.freq is None
