    1: import pytest
    2: 
    3: import pandas as pd
    4: from pandas import (
    5:     Series,
    6:     TimedeltaIndex,
    7: )
    8: 
    9: 
   10: class TestTimedeltaIndexRendering:
   11:     def test_repr_round_days_non_nano(self):
   12:         # GH#55405
   13:         # we should get "1 days", not "1 days 00:00:00" with non-nano
   14:         tdi = TimedeltaIndex(["1 days"], freq="D").as_unit("s")
   15:         result = repr(tdi)
   16:         expected = "TimedeltaIndex(['1 days'], dtype='timedelta64[s]', freq='D')"
   17:         assert result == expected
   18: 
   19:         result2 = repr(Series(tdi))
   20:         expected2 = "0   1 days\ndtype: timedelta64[s]"
   21:         assert result2 == expected2
   22: 
   23:     @pytest.mark.parametrize("method", ["__repr__", "__str__"])
   24:     def test_representation(self, method):
   25:         idx1 = TimedeltaIndex([], freq="D")
   26:         idx2 = TimedeltaIndex(["1 days"], freq="D")
   27:         idx3 = TimedeltaIndex(["1 days", "2 days"], freq="D")
   28:         idx4 = TimedeltaIndex(["1 days", "2 days", "3 days"], freq="D")
   29:         idx5 = TimedeltaIndex(["1 days 00:00:01", "2 days", "3 days"])
   30: 
   31:         exp1 = "TimedeltaIndex([], dtype='timedelta64[ns]', freq='D')"
   32: 
   33:         exp2 = "TimedeltaIndex(['1 days'], dtype='timedelta64[ns]', freq='D')"
   34: 
   35:         exp3 = "TimedeltaIndex(['1 days', '2 days'], dtype='timedelta64[ns]', freq='D')"
   36: 
   37:         exp4 = (
   38:             "TimedeltaIndex(['1 days', '2 days', '3 days'], "
   39:             "dtype='timedelta64[ns]', freq='D')"
   40:         )
   41: 
   42:         exp5 = (
   43:             "TimedeltaIndex(['1 days 00:00:01', '2 days 00:00:00', "
   44:             "'3 days 00:00:00'], dtype='timedelta64[ns]', freq=None)"
   45:         )
   46: 
   47:         with pd.option_context("display.width", 300):
   48:             for idx, expected in zip(
   49:                 [idx1, idx2, idx3, idx4, idx5], [exp1, exp2, exp3, exp4, exp5]
   50:             ):
   51:                 result = getattr(idx, method)()
   52:                 assert result == expected
   53: 
   54:     # TODO: this is a Series.__repr__ test
   55:     def test_representation_to_series(self):
   56:         idx1 = TimedeltaIndex([], freq="D")
   57:         idx2 = TimedeltaIndex(["1 days"], freq="D")
   58:         idx3 = TimedeltaIndex(["1 days", "2 days"], freq="D")
   59:         idx4 = TimedeltaIndex(["1 days", "2 days", "3 days"], freq="D")
   60:         idx5 = TimedeltaIndex(["1 days 00:00:01", "2 days", "3 days"])
   61: 
   62:         exp1 = """Series([], dtype: timedelta64[ns])"""
   63: 
   64:         exp2 = "0   1 days\ndtype: timedelta64[ns]"
   65: 
   66:         exp3 = "0   1 days\n1   2 days\ndtype: timedelta64[ns]"
   67: 
   68:         exp4 = "0   1 days\n1   2 days\n2   3 days\ndtype: timedelta64[ns]"
   69: 
   70:         exp5 = (
   71:             "0   1 days 00:00:01\n"
   72:             "1   2 days 00:00:00\n"
   73:             "2   3 days 00:00:00\n"
   74:             "dtype: timedelta64[ns]"
   75:         )
   76: 
   77:         with pd.option_context("display.width", 300):
   78:             for idx, expected in zip(
   79:                 [idx1, idx2, idx3, idx4, idx5], [exp1, exp2, exp3, exp4, exp5]
   80:             ):
   81:                 result = repr(Series(idx))
   82:                 assert result == expected
   83: 
   84:     def test_summary(self):
   85:         # GH#9116
   86:         idx1 = TimedeltaIndex([], freq="D")
   87:         idx2 = TimedeltaIndex(["1 days"], freq="D")
   88:         idx3 = TimedeltaIndex(["1 days", "2 days"], freq="D")
   89:         idx4 = TimedeltaIndex(["1 days", "2 days", "3 days"], freq="D")
   90:         idx5 = TimedeltaIndex(["1 days 00:00:01", "2 days", "3 days"])
   91: 
   92:         exp1 = "TimedeltaIndex: 0 entries\nFreq: D"
   93: 
   94:         exp2 = "TimedeltaIndex: 1 entries, 1 days to 1 days\nFreq: D"
   95: 
   96:         exp3 = "TimedeltaIndex: 2 entries, 1 days to 2 days\nFreq: D"
   97: 
   98:         exp4 = "TimedeltaIndex: 3 entries, 1 days to 3 days\nFreq: D"
   99: 
  100:         exp5 = "TimedeltaIndex: 3 entries, 1 days 00:00:01 to 3 days 00:00:00"
  101: 
  102:         for idx, expected in zip(
  103:             [idx1, idx2, idx3, idx4, idx5], [exp1, exp2, exp3, exp4, exp5]
  104:         ):
  105:             result = idx._summary()
  106:             assert result == expected
