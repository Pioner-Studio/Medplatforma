    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_take(idx):
    9:     indexer = [4, 3, 0, 2]
   10:     result = idx.take(indexer)
   11:     expected = idx[indexer]
   12:     assert result.equals(expected)
   13: 
   14:     # GH 10791
   15:     msg = "'MultiIndex' object has no attribute 'freq'"
   16:     with pytest.raises(AttributeError, match=msg):
   17:         idx.freq
   18: 
   19: 
   20: def test_take_invalid_kwargs(idx):
   21:     indices = [1, 2]
   22: 
   23:     msg = r"take\(\) got an unexpected keyword argument 'foo'"
   24:     with pytest.raises(TypeError, match=msg):
   25:         idx.take(indices, foo=2)
   26: 
   27:     msg = "the 'out' parameter is not supported"
   28:     with pytest.raises(ValueError, match=msg):
   29:         idx.take(indices, out=indices)
   30: 
   31:     msg = "the 'mode' parameter is not supported"
   32:     with pytest.raises(ValueError, match=msg):
   33:         idx.take(indices, mode="clip")
   34: 
   35: 
   36: def test_take_fill_value():
   37:     # GH 12631
   38:     vals = [["A", "B"], [pd.Timestamp("2011-01-01"), pd.Timestamp("2011-01-02")]]
   39:     idx = pd.MultiIndex.from_product(vals, names=["str", "dt"])
   40: 
   41:     result = idx.take(np.array([1, 0, -1]))
   42:     exp_vals = [
   43:         ("A", pd.Timestamp("2011-01-02")),
   44:         ("A", pd.Timestamp("2011-01-01")),
   45:         ("B", pd.Timestamp("2011-01-02")),
   46:     ]
   47:     expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
   48:     tm.assert_index_equal(result, expected)
   49: 
   50:     # fill_value
   51:     result = idx.take(np.array([1, 0, -1]), fill_value=True)
   52:     exp_vals = [
   53:         ("A", pd.Timestamp("2011-01-02")),
   54:         ("A", pd.Timestamp("2011-01-01")),
   55:         (np.nan, pd.NaT),
   56:     ]
   57:     expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
   58:     tm.assert_index_equal(result, expected)
   59: 
   60:     # allow_fill=False
   61:     result = idx.take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
   62:     exp_vals = [
   63:         ("A", pd.Timestamp("2011-01-02")),
   64:         ("A", pd.Timestamp("2011-01-01")),
   65:         ("B", pd.Timestamp("2011-01-02")),
   66:     ]
   67:     expected = pd.MultiIndex.from_tuples(exp_vals, names=["str", "dt"])
   68:     tm.assert_index_equal(result, expected)
   69: 
   70:     msg = "When allow_fill=True and fill_value is not None, all indices must be >= -1"
   71:     with pytest.raises(ValueError, match=msg):
   72:         idx.take(np.array([1, 0, -2]), fill_value=True)
   73:     with pytest.raises(ValueError, match=msg):
   74:         idx.take(np.array([1, 0, -5]), fill_value=True)
   75: 
   76:     msg = "index -5 is out of bounds for( axis 0 with)? size 4"
   77:     with pytest.raises(IndexError, match=msg):
   78:         idx.take(np.array([1, -5]))
