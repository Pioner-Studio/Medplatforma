    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     MultiIndex,
    7:     Series,
    8:     concat,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: @pytest.mark.parametrize(
   14:     "args, kwargs, increment",
   15:     [((), {}, 0), ((), {"a": 1}, 1), ((2, 3), {}, 32), ((1,), {"c": 2}, 201)],
   16: )
   17: def test_agg_args(args, kwargs, increment):
   18:     # GH 43357
   19:     def f(x, a=0, b=0, c=0):
   20:         return x + a + 10 * b + 100 * c
   21: 
   22:     s = Series([1, 2])
   23:     result = s.transform(f, 0, *args, **kwargs)
   24:     expected = s + increment
   25:     tm.assert_series_equal(result, expected)
   26: 
   27: 
   28: @pytest.mark.parametrize(
   29:     "ops, names",
   30:     [
   31:         ([np.sqrt], ["sqrt"]),
   32:         ([np.abs, np.sqrt], ["absolute", "sqrt"]),
   33:         (np.array([np.sqrt]), ["sqrt"]),
   34:         (np.array([np.abs, np.sqrt]), ["absolute", "sqrt"]),
   35:     ],
   36: )
   37: def test_transform_listlike(string_series, ops, names):
   38:     # GH 35964
   39:     with np.errstate(all="ignore"):
   40:         expected = concat([op(string_series) for op in ops], axis=1)
   41:         expected.columns = names
   42:         result = string_series.transform(ops)
   43:         tm.assert_frame_equal(result, expected)
   44: 
   45: 
   46: def test_transform_listlike_func_with_args():
   47:     # GH 50624
   48: 
   49:     s = Series([1, 2, 3])
   50: 
   51:     def foo1(x, a=1, c=0):
   52:         return x + a + c
   53: 
   54:     def foo2(x, b=2, c=0):
   55:         return x + b + c
   56: 
   57:     msg = r"foo1\(\) got an unexpected keyword argument 'b'"
   58:     with pytest.raises(TypeError, match=msg):
   59:         s.transform([foo1, foo2], 0, 3, b=3, c=4)
   60: 
   61:     result = s.transform([foo1, foo2], 0, 3, c=4)
   62:     expected = DataFrame({"foo1": [8, 9, 10], "foo2": [8, 9, 10]})
   63:     tm.assert_frame_equal(result, expected)
   64: 
   65: 
   66: @pytest.mark.parametrize("box", [dict, Series])
   67: def test_transform_dictlike(string_series, box):
   68:     # GH 35964
   69:     with np.errstate(all="ignore"):
   70:         expected = concat([np.sqrt(string_series), np.abs(string_series)], axis=1)
   71:     expected.columns = ["foo", "bar"]
   72:     result = string_series.transform(box({"foo": np.sqrt, "bar": np.abs}))
   73:     tm.assert_frame_equal(result, expected)
   74: 
   75: 
   76: def test_transform_dictlike_mixed():
   77:     # GH 40018 - mix of lists and non-lists in values of a dictionary
   78:     df = Series([1, 4])
   79:     result = df.transform({"b": ["sqrt", "abs"], "c": "sqrt"})
   80:     expected = DataFrame(
   81:         [[1.0, 1, 1.0], [2.0, 4, 2.0]],
   82:         columns=MultiIndex([("b", "c"), ("sqrt", "abs")], [(0, 0, 1), (0, 1, 0)]),
   83:     )
   84:     tm.assert_frame_equal(result, expected)
