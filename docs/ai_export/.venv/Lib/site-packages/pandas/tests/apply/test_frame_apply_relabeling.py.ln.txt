    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.compat.numpy import np_version_gte1p25
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: 
    9: 
   10: def test_agg_relabel():
   11:     # GH 26513
   12:     df = pd.DataFrame({"A": [1, 2, 1, 2], "B": [1, 2, 3, 4], "C": [3, 4, 5, 6]})
   13: 
   14:     # simplest case with one column, one func
   15:     result = df.agg(foo=("B", "sum"))
   16:     expected = pd.DataFrame({"B": [10]}, index=pd.Index(["foo"]))
   17:     tm.assert_frame_equal(result, expected)
   18: 
   19:     # test on same column with different methods
   20:     result = df.agg(foo=("B", "sum"), bar=("B", "min"))
   21:     expected = pd.DataFrame({"B": [10, 1]}, index=pd.Index(["foo", "bar"]))
   22: 
   23:     tm.assert_frame_equal(result, expected)
   24: 
   25: 
   26: def test_agg_relabel_multi_columns_multi_methods():
   27:     # GH 26513, test on multiple columns with multiple methods
   28:     df = pd.DataFrame({"A": [1, 2, 1, 2], "B": [1, 2, 3, 4], "C": [3, 4, 5, 6]})
   29:     result = df.agg(
   30:         foo=("A", "sum"),
   31:         bar=("B", "mean"),
   32:         cat=("A", "min"),
   33:         dat=("B", "max"),
   34:         f=("A", "max"),
   35:         g=("C", "min"),
   36:     )
   37:     expected = pd.DataFrame(
   38:         {
   39:             "A": [6.0, np.nan, 1.0, np.nan, 2.0, np.nan],
   40:             "B": [np.nan, 2.5, np.nan, 4.0, np.nan, np.nan],
   41:             "C": [np.nan, np.nan, np.nan, np.nan, np.nan, 3.0],
   42:         },
   43:         index=pd.Index(["foo", "bar", "cat", "dat", "f", "g"]),
   44:     )
   45:     tm.assert_frame_equal(result, expected)
   46: 
   47: 
   48: @pytest.mark.xfail(np_version_gte1p25, reason="name of min now equals name of np.min")
   49: def test_agg_relabel_partial_functions():
   50:     # GH 26513, test on partial, functools or more complex cases
   51:     df = pd.DataFrame({"A": [1, 2, 1, 2], "B": [1, 2, 3, 4], "C": [3, 4, 5, 6]})
   52:     msg = "using Series.[mean|min]"
   53:     with tm.assert_produces_warning(FutureWarning, match=msg):
   54:         result = df.agg(foo=("A", np.mean), bar=("A", "mean"), cat=("A", min))
   55:     expected = pd.DataFrame(
   56:         {"A": [1.5, 1.5, 1.0]}, index=pd.Index(["foo", "bar", "cat"])
   57:     )
   58:     tm.assert_frame_equal(result, expected)
   59: 
   60:     msg = "using Series.[mean|min|max|sum]"
   61:     with tm.assert_produces_warning(FutureWarning, match=msg):
   62:         result = df.agg(
   63:             foo=("A", min),
   64:             bar=("A", np.min),
   65:             cat=("B", max),
   66:             dat=("C", "min"),
   67:             f=("B", np.sum),
   68:             kk=("B", lambda x: min(x)),
   69:         )
   70:     expected = pd.DataFrame(
   71:         {
   72:             "A": [1.0, 1.0, np.nan, np.nan, np.nan, np.nan],
   73:             "B": [np.nan, np.nan, 4.0, np.nan, 10.0, 1.0],
   74:             "C": [np.nan, np.nan, np.nan, 3.0, np.nan, np.nan],
   75:         },
   76:         index=pd.Index(["foo", "bar", "cat", "dat", "f", "kk"]),
   77:     )
   78:     tm.assert_frame_equal(result, expected)
   79: 
   80: 
   81: def test_agg_namedtuple():
   82:     # GH 26513
   83:     df = pd.DataFrame({"A": [0, 1], "B": [1, 2]})
   84:     result = df.agg(
   85:         foo=pd.NamedAgg("B", "sum"),
   86:         bar=pd.NamedAgg("B", "min"),
   87:         cat=pd.NamedAgg(column="B", aggfunc="count"),
   88:         fft=pd.NamedAgg("B", aggfunc="max"),
   89:     )
   90: 
   91:     expected = pd.DataFrame(
   92:         {"B": [3, 1, 2, 2]}, index=pd.Index(["foo", "bar", "cat", "fft"])
   93:     )
   94:     tm.assert_frame_equal(result, expected)
   95: 
   96:     result = df.agg(
   97:         foo=pd.NamedAgg("A", "min"),
   98:         bar=pd.NamedAgg(column="B", aggfunc="max"),
   99:         cat=pd.NamedAgg(column="A", aggfunc="max"),
  100:     )
  101:     expected = pd.DataFrame(
  102:         {"A": [0.0, np.nan, 1.0], "B": [np.nan, 2.0, np.nan]},
  103:         index=pd.Index(["foo", "bar", "cat"]),
  104:     )
  105:     tm.assert_frame_equal(result, expected)
  106: 
  107: 
  108: def test_reconstruct_func():
  109:     # GH 28472, test to ensure reconstruct_func isn't moved;
  110:     # This method is used by other libraries (e.g. dask)
  111:     result = pd.core.apply.reconstruct_func("min")
  112:     expected = (False, "min", None, None)
  113:     tm.assert_equal(result, expected)
