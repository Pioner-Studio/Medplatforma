    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     Index,
    9: )
   10: import pandas._testing as tm
   11: 
   12: pytestmark = [td.skip_if_no("numba"), pytest.mark.single_cpu]
   13: 
   14: 
   15: @pytest.fixture(params=[0, 1])
   16: def apply_axis(request):
   17:     return request.param
   18: 
   19: 
   20: def test_numba_vs_python_noop(float_frame, apply_axis):
   21:     func = lambda x: x
   22:     result = float_frame.apply(func, engine="numba", axis=apply_axis)
   23:     expected = float_frame.apply(func, engine="python", axis=apply_axis)
   24:     tm.assert_frame_equal(result, expected)
   25: 
   26: 
   27: def test_numba_vs_python_string_index():
   28:     # GH#56189
   29:     pytest.importorskip("pyarrow")
   30:     df = DataFrame(
   31:         1,
   32:         index=Index(["a", "b"], dtype="string[pyarrow_numpy]"),
   33:         columns=Index(["x", "y"], dtype="string[pyarrow_numpy]"),
   34:     )
   35:     func = lambda x: x
   36:     result = df.apply(func, engine="numba", axis=0)
   37:     expected = df.apply(func, engine="python", axis=0)
   38:     tm.assert_frame_equal(
   39:         result, expected, check_column_type=False, check_index_type=False
   40:     )
   41: 
   42: 
   43: def test_numba_vs_python_indexing():
   44:     frame = DataFrame(
   45:         {"a": [1, 2, 3], "b": [4, 5, 6], "c": [7.0, 8.0, 9.0]},
   46:         index=Index(["A", "B", "C"]),
   47:     )
   48:     row_func = lambda x: x["c"]
   49:     result = frame.apply(row_func, engine="numba", axis=1)
   50:     expected = frame.apply(row_func, engine="python", axis=1)
   51:     tm.assert_series_equal(result, expected)
   52: 
   53:     col_func = lambda x: x["A"]
   54:     result = frame.apply(col_func, engine="numba", axis=0)
   55:     expected = frame.apply(col_func, engine="python", axis=0)
   56:     tm.assert_series_equal(result, expected)
   57: 
   58: 
   59: @pytest.mark.parametrize(
   60:     "reduction",
   61:     [lambda x: x.mean(), lambda x: x.min(), lambda x: x.max(), lambda x: x.sum()],
   62: )
   63: def test_numba_vs_python_reductions(reduction, apply_axis):
   64:     df = DataFrame(np.ones((4, 4), dtype=np.float64))
   65:     result = df.apply(reduction, engine="numba", axis=apply_axis)
   66:     expected = df.apply(reduction, engine="python", axis=apply_axis)
   67:     tm.assert_series_equal(result, expected)
   68: 
   69: 
   70: @pytest.mark.parametrize("colnames", [[1, 2, 3], [1.0, 2.0, 3.0]])
   71: def test_numba_numeric_colnames(colnames):
   72:     # Check that numeric column names lower properly and can be indxed on
   73:     df = DataFrame(
   74:         np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.int64), columns=colnames
   75:     )
   76:     first_col = colnames[0]
   77:     f = lambda x: x[first_col]  # Get the first column
   78:     result = df.apply(f, engine="numba", axis=1)
   79:     expected = df.apply(f, engine="python", axis=1)
   80:     tm.assert_series_equal(result, expected)
   81: 
   82: 
   83: def test_numba_parallel_unsupported(float_frame):
   84:     f = lambda x: x
   85:     with pytest.raises(
   86:         NotImplementedError,
   87:         match="Parallel apply is not supported when raw=False and engine='numba'",
   88:     ):
   89:         float_frame.apply(f, engine="numba", engine_kwargs={"parallel": True})
   90: 
   91: 
   92: def test_numba_nonunique_unsupported(apply_axis):
   93:     f = lambda x: x
   94:     df = DataFrame({"a": [1, 2]}, index=Index(["a", "a"]))
   95:     with pytest.raises(
   96:         NotImplementedError,
   97:         match="The index/columns must be unique when raw=False and engine='numba'",
   98:     ):
   99:         df.apply(f, engine="numba", axis=apply_axis)
  100: 
  101: 
  102: def test_numba_unsupported_dtypes(apply_axis):
  103:     f = lambda x: x
  104:     df = DataFrame({"a": [1, 2], "b": ["a", "b"], "c": [4, 5]})
  105:     df["c"] = df["c"].astype("double[pyarrow]")
  106: 
  107:     with pytest.raises(
  108:         ValueError,
  109:         match="Column b must have a numeric dtype. Found 'object|string' instead",
  110:     ):
  111:         df.apply(f, engine="numba", axis=apply_axis)
  112: 
  113:     with pytest.raises(
  114:         ValueError,
  115:         match="Column c is backed by an extension array, "
  116:         "which is not supported by the numba engine.",
  117:     ):
  118:         df["c"].to_frame().apply(f, engine="numba", axis=apply_axis)
