    1: import pandas as pd
    2: import pandas._testing as tm
    3: 
    4: 
    5: def test_relabel_no_duplicated_method():
    6:     # this is to test there is no duplicated method used in agg
    7:     df = pd.DataFrame({"A": [1, 2, 1, 2], "B": [1, 2, 3, 4]})
    8: 
    9:     result = df["A"].agg(foo="sum")
   10:     expected = df["A"].agg({"foo": "sum"})
   11:     tm.assert_series_equal(result, expected)
   12: 
   13:     result = df["B"].agg(foo="min", bar="max")
   14:     expected = df["B"].agg({"foo": "min", "bar": "max"})
   15:     tm.assert_series_equal(result, expected)
   16: 
   17:     msg = "using Series.[sum|min|max]"
   18:     with tm.assert_produces_warning(FutureWarning, match=msg):
   19:         result = df["B"].agg(foo=sum, bar=min, cat="max")
   20:     msg = "using Series.[sum|min|max]"
   21:     with tm.assert_produces_warning(FutureWarning, match=msg):
   22:         expected = df["B"].agg({"foo": sum, "bar": min, "cat": "max"})
   23:     tm.assert_series_equal(result, expected)
   24: 
   25: 
   26: def test_relabel_duplicated_method():
   27:     # this is to test with nested renaming, duplicated method can be used
   28:     # if they are assigned with different new names
   29:     df = pd.DataFrame({"A": [1, 2, 1, 2], "B": [1, 2, 3, 4]})
   30: 
   31:     result = df["A"].agg(foo="sum", bar="sum")
   32:     expected = pd.Series([6, 6], index=["foo", "bar"], name="A")
   33:     tm.assert_series_equal(result, expected)
   34: 
   35:     msg = "using Series.min"
   36:     with tm.assert_produces_warning(FutureWarning, match=msg):
   37:         result = df["B"].agg(foo=min, bar="min")
   38:     expected = pd.Series([1, 1], index=["foo", "bar"], name="B")
   39:     tm.assert_series_equal(result, expected)
