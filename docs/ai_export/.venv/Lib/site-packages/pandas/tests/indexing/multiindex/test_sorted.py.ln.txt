    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     NA,
    6:     DataFrame,
    7:     MultiIndex,
    8:     Series,
    9:     array,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestMultiIndexSorted:
   15:     def test_getitem_multilevel_index_tuple_not_sorted(self):
   16:         index_columns = list("abc")
   17:         df = DataFrame(
   18:             [[0, 1, 0, "x"], [0, 0, 1, "y"]], columns=index_columns + ["data"]
   19:         )
   20:         df = df.set_index(index_columns)
   21:         query_index = df.index[:1]
   22:         rs = df.loc[query_index, "data"]
   23: 
   24:         xp_idx = MultiIndex.from_tuples([(0, 1, 0)], names=["a", "b", "c"])
   25:         xp = Series(["x"], index=xp_idx, name="data")
   26:         tm.assert_series_equal(rs, xp)
   27: 
   28:     def test_getitem_slice_not_sorted(self, multiindex_dataframe_random_data):
   29:         frame = multiindex_dataframe_random_data
   30:         df = frame.sort_index(level=1).T
   31: 
   32:         # buglet with int typechecking
   33:         result = df.iloc[:, : np.int32(3)]
   34:         expected = df.reindex(columns=df.columns[:3])
   35:         tm.assert_frame_equal(result, expected)
   36: 
   37:     @pytest.mark.parametrize("key", [None, lambda x: x])
   38:     def test_frame_getitem_not_sorted2(self, key):
   39:         # 13431
   40:         df = DataFrame(
   41:             {
   42:                 "col1": ["b", "d", "b", "a"],
   43:                 "col2": [3, 1, 1, 2],
   44:                 "data": ["one", "two", "three", "four"],
   45:             }
   46:         )
   47: 
   48:         df2 = df.set_index(["col1", "col2"])
   49:         df2_original = df2.copy()
   50: 
   51:         df2.index = df2.index.set_levels(["b", "d", "a"], level="col1")
   52:         df2.index = df2.index.set_codes([0, 1, 0, 2], level="col1")
   53:         assert not df2.index.is_monotonic_increasing
   54: 
   55:         assert df2_original.index.equals(df2.index)
   56:         expected = df2.sort_index(key=key)
   57:         assert expected.index.is_monotonic_increasing
   58: 
   59:         result = df2.sort_index(level=0, key=key)
   60:         assert result.index.is_monotonic_increasing
   61:         tm.assert_frame_equal(result, expected)
   62: 
   63:     def test_sort_values_key(self):
   64:         arrays = [
   65:             ["bar", "bar", "baz", "baz", "qux", "qux", "foo", "foo"],
   66:             ["one", "two", "one", "two", "one", "two", "one", "two"],
   67:         ]
   68:         tuples = zip(*arrays)
   69:         index = MultiIndex.from_tuples(tuples)
   70:         index = index.sort_values(  # sort by third letter
   71:             key=lambda x: x.map(lambda entry: entry[2])
   72:         )
   73:         result = DataFrame(range(8), index=index)
   74: 
   75:         arrays = [
   76:             ["foo", "foo", "bar", "bar", "qux", "qux", "baz", "baz"],
   77:             ["one", "two", "one", "two", "one", "two", "one", "two"],
   78:         ]
   79:         tuples = zip(*arrays)
   80:         index = MultiIndex.from_tuples(tuples)
   81:         expected = DataFrame(range(8), index=index)
   82: 
   83:         tm.assert_frame_equal(result, expected)
   84: 
   85:     def test_argsort_with_na(self):
   86:         # GH48495
   87:         arrays = [
   88:             array([2, NA, 1], dtype="Int64"),
   89:             array([1, 2, 3], dtype="Int64"),
   90:         ]
   91:         index = MultiIndex.from_arrays(arrays)
   92:         result = index.argsort()
   93:         expected = np.array([2, 0, 1], dtype=np.intp)
   94:         tm.assert_numpy_array_equal(result, expected)
   95: 
   96:     def test_sort_values_with_na(self):
   97:         # GH48495
   98:         arrays = [
   99:             array([2, NA, 1], dtype="Int64"),
  100:             array([1, 2, 3], dtype="Int64"),
  101:         ]
  102:         index = MultiIndex.from_arrays(arrays)
  103:         index = index.sort_values()
  104:         result = DataFrame(range(3), index=index)
  105: 
  106:         arrays = [
  107:             array([1, 2, NA], dtype="Int64"),
  108:             array([3, 1, 2], dtype="Int64"),
  109:         ]
  110:         index = MultiIndex.from_arrays(arrays)
  111:         expected = DataFrame(range(3), index=index)
  112: 
  113:         tm.assert_frame_equal(result, expected)
  114: 
  115:     def test_frame_getitem_not_sorted(self, multiindex_dataframe_random_data):
  116:         frame = multiindex_dataframe_random_data
  117:         df = frame.T
  118:         df["foo", "four"] = "foo"
  119: 
  120:         arrays = [np.array(x) for x in zip(*df.columns.values)]
  121: 
  122:         result = df["foo"]
  123:         result2 = df.loc[:, "foo"]
  124:         expected = df.reindex(columns=df.columns[arrays[0] == "foo"])
  125:         expected.columns = expected.columns.droplevel(0)
  126:         tm.assert_frame_equal(result, expected)
  127:         tm.assert_frame_equal(result2, expected)
  128: 
  129:         df = df.T
  130:         result = df.xs("foo")
  131:         result2 = df.loc["foo"]
  132:         expected = df.reindex(df.index[arrays[0] == "foo"])
  133:         expected.index = expected.index.droplevel(0)
  134:         tm.assert_frame_equal(result, expected)
  135:         tm.assert_frame_equal(result2, expected)
  136: 
  137:     def test_series_getitem_not_sorted(self):
  138:         arrays = [
  139:             ["bar", "bar", "baz", "baz", "qux", "qux", "foo", "foo"],
  140:             ["one", "two", "one", "two", "one", "two", "one", "two"],
  141:         ]
  142:         tuples = zip(*arrays)
  143:         index = MultiIndex.from_tuples(tuples)
  144:         s = Series(np.random.default_rng(2).standard_normal(8), index=index)
  145: 
  146:         arrays = [np.array(x) for x in zip(*index.values)]
  147: 
  148:         result = s["qux"]
  149:         result2 = s.loc["qux"]
  150:         expected = s[arrays[0] == "qux"]
  151:         expected.index = expected.index.droplevel(0)
  152:         tm.assert_series_equal(result, expected)
  153:         tm.assert_series_equal(result2, expected)
