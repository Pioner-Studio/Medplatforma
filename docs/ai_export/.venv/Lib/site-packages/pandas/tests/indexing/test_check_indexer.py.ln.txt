    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.api.indexers import check_array_indexer
    7: 
    8: 
    9: @pytest.mark.parametrize(
   10:     "indexer, expected",
   11:     [
   12:         # integer
   13:         ([1, 2], np.array([1, 2], dtype=np.intp)),
   14:         (np.array([1, 2], dtype="int64"), np.array([1, 2], dtype=np.intp)),
   15:         (pd.array([1, 2], dtype="Int32"), np.array([1, 2], dtype=np.intp)),
   16:         (pd.Index([1, 2]), np.array([1, 2], dtype=np.intp)),
   17:         # boolean
   18:         ([True, False, True], np.array([True, False, True], dtype=np.bool_)),
   19:         (np.array([True, False, True]), np.array([True, False, True], dtype=np.bool_)),
   20:         (
   21:             pd.array([True, False, True], dtype="boolean"),
   22:             np.array([True, False, True], dtype=np.bool_),
   23:         ),
   24:         # other
   25:         ([], np.array([], dtype=np.intp)),
   26:     ],
   27: )
   28: def test_valid_input(indexer, expected):
   29:     arr = np.array([1, 2, 3])
   30:     result = check_array_indexer(arr, indexer)
   31:     tm.assert_numpy_array_equal(result, expected)
   32: 
   33: 
   34: @pytest.mark.parametrize(
   35:     "indexer", [[True, False, None], pd.array([True, False, None], dtype="boolean")]
   36: )
   37: def test_boolean_na_returns_indexer(indexer):
   38:     # https://github.com/pandas-dev/pandas/issues/31503
   39:     arr = np.array([1, 2, 3])
   40: 
   41:     result = check_array_indexer(arr, indexer)
   42:     expected = np.array([True, False, False], dtype=bool)
   43: 
   44:     tm.assert_numpy_array_equal(result, expected)
   45: 
   46: 
   47: @pytest.mark.parametrize(
   48:     "indexer",
   49:     [
   50:         [True, False],
   51:         pd.array([True, False], dtype="boolean"),
   52:         np.array([True, False], dtype=np.bool_),
   53:     ],
   54: )
   55: def test_bool_raise_length(indexer):
   56:     arr = np.array([1, 2, 3])
   57: 
   58:     msg = "Boolean index has wrong length"
   59:     with pytest.raises(IndexError, match=msg):
   60:         check_array_indexer(arr, indexer)
   61: 
   62: 
   63: @pytest.mark.parametrize(
   64:     "indexer", [[0, 1, None], pd.array([0, 1, pd.NA], dtype="Int64")]
   65: )
   66: def test_int_raise_missing_values(indexer):
   67:     arr = np.array([1, 2, 3])
   68: 
   69:     msg = "Cannot index with an integer indexer containing NA values"
   70:     with pytest.raises(ValueError, match=msg):
   71:         check_array_indexer(arr, indexer)
   72: 
   73: 
   74: @pytest.mark.parametrize(
   75:     "indexer",
   76:     [
   77:         [0.0, 1.0],
   78:         np.array([1.0, 2.0], dtype="float64"),
   79:         np.array([True, False], dtype=object),
   80:         pd.Index([True, False], dtype=object),
   81:     ],
   82: )
   83: def test_raise_invalid_array_dtypes(indexer):
   84:     arr = np.array([1, 2, 3])
   85: 
   86:     msg = "arrays used as indices must be of integer or boolean type"
   87:     with pytest.raises(IndexError, match=msg):
   88:         check_array_indexer(arr, indexer)
   89: 
   90: 
   91: def test_raise_nullable_string_dtype(nullable_string_dtype):
   92:     indexer = pd.array(["a", "b"], dtype=nullable_string_dtype)
   93:     arr = np.array([1, 2, 3])
   94: 
   95:     msg = "arrays used as indices must be of integer or boolean type"
   96:     with pytest.raises(IndexError, match=msg):
   97:         check_array_indexer(arr, indexer)
   98: 
   99: 
  100: @pytest.mark.parametrize("indexer", [None, Ellipsis, slice(0, 3), (None,)])
  101: def test_pass_through_non_array_likes(indexer):
  102:     arr = np.array([1, 2, 3])
  103: 
  104:     result = check_array_indexer(arr, indexer)
  105:     assert result == indexer
