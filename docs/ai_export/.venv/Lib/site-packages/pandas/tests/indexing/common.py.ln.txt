    1: """ common utilities """
    2: from __future__ import annotations
    3: 
    4: from typing import (
    5:     Any,
    6:     Literal,
    7: )
    8: 
    9: 
   10: def _mklbl(prefix: str, n: int):
   11:     return [f"{prefix}{i}" for i in range(n)]
   12: 
   13: 
   14: def check_indexing_smoketest_or_raises(
   15:     obj,
   16:     method: Literal["iloc", "loc"],
   17:     key: Any,
   18:     axes: Literal[0, 1] | None = None,
   19:     fails=None,
   20: ) -> None:
   21:     if axes is None:
   22:         axes_list = [0, 1]
   23:     else:
   24:         assert axes in [0, 1]
   25:         axes_list = [axes]
   26: 
   27:     for ax in axes_list:
   28:         if ax < obj.ndim:
   29:             # create a tuple accessor
   30:             new_axes = [slice(None)] * obj.ndim
   31:             new_axes[ax] = key
   32:             axified = tuple(new_axes)
   33:             try:
   34:                 getattr(obj, method).__getitem__(axified)
   35:             except (IndexError, TypeError, KeyError) as detail:
   36:                 # if we are in fails, the ok, otherwise raise it
   37:                 if fails is not None:
   38:                     if isinstance(detail, fails):
   39:                         return
   40:                 raise
