    1: import re
    2: 
    3: import pytest
    4: 
    5: import pandas as pd
    6: from pandas import (
    7:     DataFrame,
    8:     Index,
    9:     Series,
   10:     Timestamp,
   11:     date_range,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: class TestDatetimeIndex:
   17:     def test_get_loc_naive_dti_aware_str_deprecated(self):
   18:         # GH#46903
   19:         ts = Timestamp("20130101")._value
   20:         dti = pd.DatetimeIndex([ts + 50 + i for i in range(100)])
   21:         ser = Series(range(100), index=dti)
   22: 
   23:         key = "2013-01-01 00:00:00.000000050+0000"
   24:         msg = re.escape(repr(key))
   25:         with pytest.raises(KeyError, match=msg):
   26:             ser[key]
   27: 
   28:         with pytest.raises(KeyError, match=msg):
   29:             dti.get_loc(key)
   30: 
   31:     def test_indexing_with_datetime_tz(self):
   32:         # GH#8260
   33:         # support datetime64 with tz
   34: 
   35:         idx = Index(date_range("20130101", periods=3, tz="US/Eastern"), name="foo")
   36:         dr = date_range("20130110", periods=3)
   37:         df = DataFrame({"A": idx, "B": dr})
   38:         df["C"] = idx
   39:         df.iloc[1, 1] = pd.NaT
   40:         df.iloc[1, 2] = pd.NaT
   41: 
   42:         expected = Series(
   43:             [Timestamp("2013-01-02 00:00:00-0500", tz="US/Eastern"), pd.NaT, pd.NaT],
   44:             index=list("ABC"),
   45:             dtype="object",
   46:             name=1,
   47:         )
   48: 
   49:         # indexing
   50:         result = df.iloc[1]
   51:         tm.assert_series_equal(result, expected)
   52:         result = df.loc[1]
   53:         tm.assert_series_equal(result, expected)
   54: 
   55:     def test_indexing_fast_xs(self):
   56:         # indexing - fast_xs
   57:         df = DataFrame({"a": date_range("2014-01-01", periods=10, tz="UTC")})
   58:         result = df.iloc[5]
   59:         expected = Series(
   60:             [Timestamp("2014-01-06 00:00:00+0000", tz="UTC")],
   61:             index=["a"],
   62:             name=5,
   63:             dtype="M8[ns, UTC]",
   64:         )
   65:         tm.assert_series_equal(result, expected)
   66: 
   67:         result = df.loc[5]
   68:         tm.assert_series_equal(result, expected)
   69: 
   70:         # indexing - boolean
   71:         result = df[df.a > df.a[3]]
   72:         expected = df.iloc[4:]
   73:         tm.assert_frame_equal(result, expected)
   74: 
   75:     def test_consistency_with_tz_aware_scalar(self):
   76:         # xef gh-12938
   77:         # various ways of indexing the same tz-aware scalar
   78:         df = Series([Timestamp("2016-03-30 14:35:25", tz="Europe/Brussels")]).to_frame()
   79: 
   80:         df = pd.concat([df, df]).reset_index(drop=True)
   81:         expected = Timestamp("2016-03-30 14:35:25+0200", tz="Europe/Brussels")
   82: 
   83:         result = df[0][0]
   84:         assert result == expected
   85: 
   86:         result = df.iloc[0, 0]
   87:         assert result == expected
   88: 
   89:         result = df.loc[0, 0]
   90:         assert result == expected
   91: 
   92:         result = df.iat[0, 0]
   93:         assert result == expected
   94: 
   95:         result = df.at[0, 0]
   96:         assert result == expected
   97: 
   98:         result = df[0].loc[0]
   99:         assert result == expected
  100: 
  101:         result = df[0].at[0]
  102:         assert result == expected
  103: 
  104:     def test_indexing_with_datetimeindex_tz(self, indexer_sl):
  105:         # GH 12050
  106:         # indexing on a series with a datetimeindex with tz
  107:         index = date_range("2015-01-01", periods=2, tz="utc")
  108: 
  109:         ser = Series(range(2), index=index, dtype="int64")
  110: 
  111:         # list-like indexing
  112: 
  113:         for sel in (index, list(index)):
  114:             # getitem
  115:             result = indexer_sl(ser)[sel]
  116:             expected = ser.copy()
  117:             if sel is not index:
  118:                 expected.index = expected.index._with_freq(None)
  119:             tm.assert_series_equal(result, expected)
  120: 
  121:             # setitem
  122:             result = ser.copy()
  123:             indexer_sl(result)[sel] = 1
  124:             expected = Series(1, index=index)
  125:             tm.assert_series_equal(result, expected)
  126: 
  127:         # single element indexing
  128: 
  129:         # getitem
  130:         assert indexer_sl(ser)[index[1]] == 1
  131: 
  132:         # setitem
  133:         result = ser.copy()
  134:         indexer_sl(result)[index[1]] = 5
  135:         expected = Series([0, 5], index=index)
  136:         tm.assert_series_equal(result, expected)
  137: 
  138:     def test_nanosecond_getitem_setitem_with_tz(self):
  139:         # GH 11679
  140:         data = ["2016-06-28 08:30:00.123456789"]
  141:         index = pd.DatetimeIndex(data, dtype="datetime64[ns, America/Chicago]")
  142:         df = DataFrame({"a": [10]}, index=index)
  143:         result = df.loc[df.index[0]]
  144:         expected = Series(10, index=["a"], name=df.index[0])
  145:         tm.assert_series_equal(result, expected)
  146: 
  147:         result = df.copy()
  148:         result.loc[df.index[0], "a"] = -1
  149:         expected = DataFrame(-1, index=index, columns=["a"])
  150:         tm.assert_frame_equal(result, expected)
  151: 
  152:     def test_getitem_str_slice_millisecond_resolution(self, frame_or_series):
  153:         # GH#33589
  154: 
  155:         keys = [
  156:             "2017-10-25T16:25:04.151",
  157:             "2017-10-25T16:25:04.252",
  158:             "2017-10-25T16:50:05.237",
  159:             "2017-10-25T16:50:05.238",
  160:         ]
  161:         obj = frame_or_series(
  162:             [1, 2, 3, 4],
  163:             index=[Timestamp(x) for x in keys],
  164:         )
  165:         result = obj[keys[1] : keys[2]]
  166:         expected = frame_or_series(
  167:             [2, 3],
  168:             index=[
  169:                 Timestamp(keys[1]),
  170:                 Timestamp(keys[2]),
  171:             ],
  172:         )
  173:         tm.assert_equal(result, expected)
  174: 
  175:     def test_getitem_pyarrow_index(self, frame_or_series):
  176:         # GH 53644
  177:         pytest.importorskip("pyarrow")
  178:         obj = frame_or_series(
  179:             range(5),
  180:             index=date_range("2020", freq="D", periods=5).astype(
  181:                 "timestamp[us][pyarrow]"
  182:             ),
  183:         )
  184:         result = obj.loc[obj.index[:-3]]
  185:         expected = frame_or_series(
  186:             range(2),
  187:             index=date_range("2020", freq="D", periods=2).astype(
  188:                 "timestamp[us][pyarrow]"
  189:             ),
  190:         )
  191:         tm.assert_equal(result, expected)
