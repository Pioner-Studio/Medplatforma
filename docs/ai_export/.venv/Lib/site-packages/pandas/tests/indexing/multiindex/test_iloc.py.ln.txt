    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     MultiIndex,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: @pytest.fixture
   13: def simple_multiindex_dataframe():
   14:     """
   15:     Factory function to create simple 3 x 3 dataframe with
   16:     both columns and row MultiIndex using supplied data or
   17:     random data by default.
   18:     """
   19: 
   20:     data = np.random.default_rng(2).standard_normal((3, 3))
   21:     return DataFrame(
   22:         data, columns=[[2, 2, 4], [6, 8, 10]], index=[[4, 4, 8], [8, 10, 12]]
   23:     )
   24: 
   25: 
   26: @pytest.mark.parametrize(
   27:     "indexer, expected",
   28:     [
   29:         (
   30:             lambda df: df.iloc[0],
   31:             lambda arr: Series(arr[0], index=[[2, 2, 4], [6, 8, 10]], name=(4, 8)),
   32:         ),
   33:         (
   34:             lambda df: df.iloc[2],
   35:             lambda arr: Series(arr[2], index=[[2, 2, 4], [6, 8, 10]], name=(8, 12)),
   36:         ),
   37:         (
   38:             lambda df: df.iloc[:, 2],
   39:             lambda arr: Series(arr[:, 2], index=[[4, 4, 8], [8, 10, 12]], name=(4, 10)),
   40:         ),
   41:     ],
   42: )
   43: def test_iloc_returns_series(indexer, expected, simple_multiindex_dataframe):
   44:     df = simple_multiindex_dataframe
   45:     arr = df.values
   46:     result = indexer(df)
   47:     expected = expected(arr)
   48:     tm.assert_series_equal(result, expected)
   49: 
   50: 
   51: def test_iloc_returns_dataframe(simple_multiindex_dataframe):
   52:     df = simple_multiindex_dataframe
   53:     result = df.iloc[[0, 1]]
   54:     expected = df.xs(4, drop_level=False)
   55:     tm.assert_frame_equal(result, expected)
   56: 
   57: 
   58: def test_iloc_returns_scalar(simple_multiindex_dataframe):
   59:     df = simple_multiindex_dataframe
   60:     arr = df.values
   61:     result = df.iloc[2, 2]
   62:     expected = arr[2, 2]
   63:     assert result == expected
   64: 
   65: 
   66: def test_iloc_getitem_multiple_items():
   67:     # GH 5528
   68:     tup = zip(*[["a", "a", "b", "b"], ["x", "y", "x", "y"]])
   69:     index = MultiIndex.from_tuples(tup)
   70:     df = DataFrame(np.random.default_rng(2).standard_normal((4, 4)), index=index)
   71:     result = df.iloc[[2, 3]]
   72:     expected = df.xs("b", drop_level=False)
   73:     tm.assert_frame_equal(result, expected)
   74: 
   75: 
   76: def test_iloc_getitem_labels():
   77:     # this is basically regular indexing
   78:     arr = np.random.default_rng(2).standard_normal((4, 3))
   79:     df = DataFrame(
   80:         arr,
   81:         columns=[["i", "i", "j"], ["A", "A", "B"]],
   82:         index=[["i", "i", "j", "k"], ["X", "X", "Y", "Y"]],
   83:     )
   84:     result = df.iloc[2, 2]
   85:     expected = arr[2, 2]
   86:     assert result == expected
   87: 
   88: 
   89: def test_frame_getitem_slice(multiindex_dataframe_random_data):
   90:     df = multiindex_dataframe_random_data
   91:     result = df.iloc[:4]
   92:     expected = df[:4]
   93:     tm.assert_frame_equal(result, expected)
   94: 
   95: 
   96: def test_frame_setitem_slice(multiindex_dataframe_random_data):
   97:     df = multiindex_dataframe_random_data
   98:     df.iloc[:4] = 0
   99: 
  100:     assert (df.values[:4] == 0).all()
  101:     assert (df.values[4:] != 0).all()
  102: 
  103: 
  104: def test_indexing_ambiguity_bug_1678():
  105:     # GH 1678
  106:     columns = MultiIndex.from_tuples(
  107:         [("Ohio", "Green"), ("Ohio", "Red"), ("Colorado", "Green")]
  108:     )
  109:     index = MultiIndex.from_tuples([("a", 1), ("a", 2), ("b", 1), ("b", 2)])
  110: 
  111:     df = DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns)
  112: 
  113:     result = df.iloc[:, 1]
  114:     expected = df.loc[:, ("Ohio", "Red")]
  115:     tm.assert_series_equal(result, expected)
  116: 
  117: 
  118: def test_iloc_integer_locations():
  119:     # GH 13797
  120:     data = [
  121:         ["str00", "str01"],
  122:         ["str10", "str11"],
  123:         ["str20", "srt21"],
  124:         ["str30", "str31"],
  125:         ["str40", "str41"],
  126:     ]
  127: 
  128:     index = MultiIndex.from_tuples(
  129:         [("CC", "A"), ("CC", "B"), ("CC", "B"), ("BB", "a"), ("BB", "b")]
  130:     )
  131: 
  132:     expected = DataFrame(data)
  133:     df = DataFrame(data, index=index)
  134: 
  135:     result = DataFrame([[df.iloc[r, c] for c in range(2)] for r in range(5)])
  136: 
  137:     tm.assert_frame_equal(result, expected)
  138: 
  139: 
  140: @pytest.mark.parametrize(
  141:     "data, indexes, values, expected_k",
  142:     [
  143:         # test without indexer value in first level of MultiIndex
  144:         ([[2, 22, 5], [2, 33, 6]], [0, -1, 1], [2, 3, 1], [7, 10]),
  145:         # test like code sample 1 in the issue
  146:         ([[1, 22, 555], [1, 33, 666]], [0, -1, 1], [200, 300, 100], [755, 1066]),
  147:         # test like code sample 2 in the issue
  148:         ([[1, 3, 7], [2, 4, 8]], [0, -1, 1], [10, 10, 1000], [17, 1018]),
  149:         # test like code sample 3 in the issue
  150:         ([[1, 11, 4], [2, 22, 5], [3, 33, 6]], [0, -1, 1], [4, 7, 10], [8, 15, 13]),
  151:     ],
  152: )
  153: def test_iloc_setitem_int_multiindex_series(data, indexes, values, expected_k):
  154:     # GH17148
  155:     df = DataFrame(data=data, columns=["i", "j", "k"])
  156:     df = df.set_index(["i", "j"])
  157: 
  158:     series = df.k.copy()
  159:     for i, v in zip(indexes, values):
  160:         series.iloc[i] += v
  161: 
  162:     df["k"] = expected_k
  163:     expected = df.k
  164:     tm.assert_series_equal(series, expected)
  165: 
  166: 
  167: def test_getitem_iloc(multiindex_dataframe_random_data):
  168:     df = multiindex_dataframe_random_data
  169:     result = df.iloc[2]
  170:     expected = df.xs(df.index[2])
  171:     tm.assert_series_equal(result, expected)
