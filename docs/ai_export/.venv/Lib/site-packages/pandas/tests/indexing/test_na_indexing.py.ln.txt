    1: import pytest
    2: 
    3: import pandas as pd
    4: import pandas._testing as tm
    5: 
    6: 
    7: @pytest.mark.parametrize(
    8:     "values, dtype",
    9:     [
   10:         ([], "object"),
   11:         ([1, 2, 3], "int64"),
   12:         ([1.0, 2.0, 3.0], "float64"),
   13:         (["a", "b", "c"], "object"),
   14:         (["a", "b", "c"], "string"),
   15:         ([1, 2, 3], "datetime64[ns]"),
   16:         ([1, 2, 3], "datetime64[ns, CET]"),
   17:         ([1, 2, 3], "timedelta64[ns]"),
   18:         (["2000", "2001", "2002"], "Period[D]"),
   19:         ([1, 0, 3], "Sparse"),
   20:         ([pd.Interval(0, 1), pd.Interval(1, 2), pd.Interval(3, 4)], "interval"),
   21:     ],
   22: )
   23: @pytest.mark.parametrize(
   24:     "mask", [[True, False, False], [True, True, True], [False, False, False]]
   25: )
   26: @pytest.mark.parametrize("indexer_class", [list, pd.array, pd.Index, pd.Series])
   27: @pytest.mark.parametrize("frame", [True, False])
   28: def test_series_mask_boolean(values, dtype, mask, indexer_class, frame):
   29:     # In case len(values) < 3
   30:     index = ["a", "b", "c"][: len(values)]
   31:     mask = mask[: len(values)]
   32: 
   33:     obj = pd.Series(values, dtype=dtype, index=index)
   34:     if frame:
   35:         if len(values) == 0:
   36:             # Otherwise obj is an empty DataFrame with shape (0, 1)
   37:             obj = pd.DataFrame(dtype=dtype, index=index)
   38:         else:
   39:             obj = obj.to_frame()
   40: 
   41:     if indexer_class is pd.array:
   42:         mask = pd.array(mask, dtype="boolean")
   43:     elif indexer_class is pd.Series:
   44:         mask = pd.Series(mask, index=obj.index, dtype="boolean")
   45:     else:
   46:         mask = indexer_class(mask)
   47: 
   48:     expected = obj[mask]
   49: 
   50:     result = obj[mask]
   51:     tm.assert_equal(result, expected)
   52: 
   53:     if indexer_class is pd.Series:
   54:         msg = "iLocation based boolean indexing cannot use an indexable as a mask"
   55:         with pytest.raises(ValueError, match=msg):
   56:             result = obj.iloc[mask]
   57:             tm.assert_equal(result, expected)
   58:     else:
   59:         result = obj.iloc[mask]
   60:         tm.assert_equal(result, expected)
   61: 
   62:     result = obj.loc[mask]
   63:     tm.assert_equal(result, expected)
   64: 
   65: 
   66: def test_na_treated_as_false(frame_or_series, indexer_sli):
   67:     # https://github.com/pandas-dev/pandas/issues/31503
   68:     obj = frame_or_series([1, 2, 3])
   69: 
   70:     mask = pd.array([True, False, None], dtype="boolean")
   71: 
   72:     result = indexer_sli(obj)[mask]
   73:     expected = indexer_sli(obj)[mask.fillna(False)]
   74: 
   75:     tm.assert_equal(result, expected)
