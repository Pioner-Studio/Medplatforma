    1: from datetime import (
    2:     datetime,
    3:     timezone,
    4: )
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: from pandas.errors import InvalidIndexError
   10: 
   11: from pandas import (
   12:     CategoricalDtype,
   13:     CategoricalIndex,
   14:     DataFrame,
   15:     DatetimeIndex,
   16:     Index,
   17:     MultiIndex,
   18:     Series,
   19:     Timestamp,
   20: )
   21: import pandas._testing as tm
   22: 
   23: 
   24: def test_at_timezone():
   25:     # https://github.com/pandas-dev/pandas/issues/33544
   26:     result = DataFrame({"foo": [datetime(2000, 1, 1)]})
   27:     with tm.assert_produces_warning(FutureWarning, match="incompatible dtype"):
   28:         result.at[0, "foo"] = datetime(2000, 1, 2, tzinfo=timezone.utc)
   29:     expected = DataFrame(
   30:         {"foo": [datetime(2000, 1, 2, tzinfo=timezone.utc)]}, dtype=object
   31:     )
   32:     tm.assert_frame_equal(result, expected)
   33: 
   34: 
   35: def test_selection_methods_of_assigned_col():
   36:     # GH 29282
   37:     df = DataFrame(data={"a": [1, 2, 3], "b": [4, 5, 6]})
   38:     df2 = DataFrame(data={"c": [7, 8, 9]}, index=[2, 1, 0])
   39:     df["c"] = df2["c"]
   40:     df.at[1, "c"] = 11
   41:     result = df
   42:     expected = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6], "c": [9, 11, 7]})
   43:     tm.assert_frame_equal(result, expected)
   44:     result = df.at[1, "c"]
   45:     assert result == 11
   46: 
   47:     result = df["c"]
   48:     expected = Series([9, 11, 7], name="c")
   49:     tm.assert_series_equal(result, expected)
   50: 
   51:     result = df[["c"]]
   52:     expected = DataFrame({"c": [9, 11, 7]})
   53:     tm.assert_frame_equal(result, expected)
   54: 
   55: 
   56: class TestAtSetItem:
   57:     def test_at_setitem_item_cache_cleared(self):
   58:         # GH#22372 Note the multi-step construction is necessary to trigger
   59:         #  the original bug. pandas/issues/22372#issuecomment-413345309
   60:         df = DataFrame(index=[0])
   61:         df["x"] = 1
   62:         df["cost"] = 2
   63: 
   64:         # accessing df["cost"] adds "cost" to the _item_cache
   65:         df["cost"]
   66: 
   67:         # This loc[[0]] lookup used to call _consolidate_inplace at the
   68:         #  BlockManager level, which failed to clear the _item_cache
   69:         df.loc[[0]]
   70: 
   71:         df.at[0, "x"] = 4
   72:         df.at[0, "cost"] = 789
   73: 
   74:         expected = DataFrame(
   75:             {"x": [4], "cost": 789},
   76:             index=[0],
   77:             columns=Index(["x", "cost"], dtype=object),
   78:         )
   79:         tm.assert_frame_equal(df, expected)
   80: 
   81:         # And in particular, check that the _item_cache has updated correctly.
   82:         tm.assert_series_equal(df["cost"], expected["cost"])
   83: 
   84:     def test_at_setitem_mixed_index_assignment(self):
   85:         # GH#19860
   86:         ser = Series([1, 2, 3, 4, 5], index=["a", "b", "c", 1, 2])
   87:         ser.at["a"] = 11
   88:         assert ser.iat[0] == 11
   89:         ser.at[1] = 22
   90:         assert ser.iat[3] == 22
   91: 
   92:     def test_at_setitem_categorical_missing(self):
   93:         df = DataFrame(
   94:             index=range(3), columns=range(3), dtype=CategoricalDtype(["foo", "bar"])
   95:         )
   96:         df.at[1, 1] = "foo"
   97: 
   98:         expected = DataFrame(
   99:             [
  100:                 [np.nan, np.nan, np.nan],
  101:                 [np.nan, "foo", np.nan],
  102:                 [np.nan, np.nan, np.nan],
  103:             ],
  104:             dtype=CategoricalDtype(["foo", "bar"]),
  105:         )
  106: 
  107:         tm.assert_frame_equal(df, expected)
  108: 
  109:     def test_at_setitem_multiindex(self):
  110:         df = DataFrame(
  111:             np.zeros((3, 2), dtype="int64"),
  112:             columns=MultiIndex.from_tuples([("a", 0), ("a", 1)]),
  113:         )
  114:         df.at[0, "a"] = 10
  115:         expected = DataFrame(
  116:             [[10, 10], [0, 0], [0, 0]],
  117:             columns=MultiIndex.from_tuples([("a", 0), ("a", 1)]),
  118:         )
  119:         tm.assert_frame_equal(df, expected)
  120: 
  121:     @pytest.mark.parametrize("row", (Timestamp("2019-01-01"), "2019-01-01"))
  122:     def test_at_datetime_index(self, row):
  123:         # Set float64 dtype to avoid upcast when setting .5
  124:         df = DataFrame(
  125:             data=[[1] * 2], index=DatetimeIndex(data=["2019-01-01", "2019-01-02"])
  126:         ).astype({0: "float64"})
  127:         expected = DataFrame(
  128:             data=[[0.5, 1], [1.0, 1]],
  129:             index=DatetimeIndex(data=["2019-01-01", "2019-01-02"]),
  130:         )
  131: 
  132:         df.at[row, 0] = 0.5
  133:         tm.assert_frame_equal(df, expected)
  134: 
  135: 
  136: class TestAtSetItemWithExpansion:
  137:     def test_at_setitem_expansion_series_dt64tz_value(self, tz_naive_fixture):
  138:         # GH#25506
  139:         ts = Timestamp("2017-08-05 00:00:00+0100", tz=tz_naive_fixture)
  140:         result = Series(ts)
  141:         result.at[1] = ts
  142:         expected = Series([ts, ts])
  143:         tm.assert_series_equal(result, expected)
  144: 
  145: 
  146: class TestAtWithDuplicates:
  147:     def test_at_with_duplicate_axes_requires_scalar_lookup(self):
  148:         # GH#33041 check that falling back to loc doesn't allow non-scalar
  149:         #  args to slip in
  150: 
  151:         arr = np.random.default_rng(2).standard_normal(6).reshape(3, 2)
  152:         df = DataFrame(arr, columns=["A", "A"])
  153: 
  154:         msg = "Invalid call for scalar access"
  155:         with pytest.raises(ValueError, match=msg):
  156:             df.at[[1, 2]]
  157:         with pytest.raises(ValueError, match=msg):
  158:             df.at[1, ["A"]]
  159:         with pytest.raises(ValueError, match=msg):
  160:             df.at[:, "A"]
  161: 
  162:         with pytest.raises(ValueError, match=msg):
  163:             df.at[[1, 2]] = 1
  164:         with pytest.raises(ValueError, match=msg):
  165:             df.at[1, ["A"]] = 1
  166:         with pytest.raises(ValueError, match=msg):
  167:             df.at[:, "A"] = 1
  168: 
  169: 
  170: class TestAtErrors:
  171:     # TODO: De-duplicate/parametrize
  172:     #  test_at_series_raises_key_error2, test_at_frame_raises_key_error2
  173: 
  174:     def test_at_series_raises_key_error(self, indexer_al):
  175:         # GH#31724 .at should match .loc
  176: 
  177:         ser = Series([1, 2, 3], index=[3, 2, 1])
  178:         result = indexer_al(ser)[1]
  179:         assert result == 3
  180: 
  181:         with pytest.raises(KeyError, match="a"):
  182:             indexer_al(ser)["a"]
  183: 
  184:     def test_at_frame_raises_key_error(self, indexer_al):
  185:         # GH#31724 .at should match .loc
  186: 
  187:         df = DataFrame({0: [1, 2, 3]}, index=[3, 2, 1])
  188: 
  189:         result = indexer_al(df)[1, 0]
  190:         assert result == 3
  191: 
  192:         with pytest.raises(KeyError, match="a"):
  193:             indexer_al(df)["a", 0]
  194: 
  195:         with pytest.raises(KeyError, match="a"):
  196:             indexer_al(df)[1, "a"]
  197: 
  198:     def test_at_series_raises_key_error2(self, indexer_al):
  199:         # at should not fallback
  200:         # GH#7814
  201:         # GH#31724 .at should match .loc
  202:         ser = Series([1, 2, 3], index=list("abc"))
  203:         result = indexer_al(ser)["a"]
  204:         assert result == 1
  205: 
  206:         with pytest.raises(KeyError, match="^0$"):
  207:             indexer_al(ser)[0]
  208: 
  209:     def test_at_frame_raises_key_error2(self, indexer_al):
  210:         # GH#31724 .at should match .loc
  211:         df = DataFrame({"A": [1, 2, 3]}, index=list("abc"))
  212:         result = indexer_al(df)["a", "A"]
  213:         assert result == 1
  214: 
  215:         with pytest.raises(KeyError, match="^0$"):
  216:             indexer_al(df)["a", 0]
  217: 
  218:     def test_at_frame_multiple_columns(self):
  219:         # GH#48296 - at shouldn't modify multiple columns
  220:         df = DataFrame({"a": [1, 2], "b": [3, 4]})
  221:         new_row = [6, 7]
  222:         with pytest.raises(
  223:             InvalidIndexError,
  224:             match=f"You can only assign a scalar value not a \\{type(new_row)}",
  225:         ):
  226:             df.at[5] = new_row
  227: 
  228:     def test_at_getitem_mixed_index_no_fallback(self):
  229:         # GH#19860
  230:         ser = Series([1, 2, 3, 4, 5], index=["a", "b", "c", 1, 2])
  231:         with pytest.raises(KeyError, match="^0$"):
  232:             ser.at[0]
  233:         with pytest.raises(KeyError, match="^4$"):
  234:             ser.at[4]
  235: 
  236:     def test_at_categorical_integers(self):
  237:         # CategoricalIndex with integer categories that don't happen to match
  238:         #  the Categorical's codes
  239:         ci = CategoricalIndex([3, 4])
  240: 
  241:         arr = np.arange(4).reshape(2, 2)
  242:         frame = DataFrame(arr, index=ci)
  243: 
  244:         for df in [frame, frame.T]:
  245:             for key in [0, 1]:
  246:                 with pytest.raises(KeyError, match=str(key)):
  247:                     df.at[key, key]
  248: 
  249:     def test_at_applied_for_rows(self):
  250:         # GH#48729 .at should raise InvalidIndexError when assigning rows
  251:         df = DataFrame(index=["a"], columns=["col1", "col2"])
  252:         new_row = [123, 15]
  253:         with pytest.raises(
  254:             InvalidIndexError,
  255:             match=f"You can only assign a scalar value not a \\{type(new_row)}",
  256:         ):
  257:             df.at["a"] = new_row
