    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Series,
    6:     period_range,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: def test_iat(float_frame):
   12:     for i, row in enumerate(float_frame.index):
   13:         for j, col in enumerate(float_frame.columns):
   14:             result = float_frame.iat[i, j]
   15:             expected = float_frame.at[row, col]
   16:             assert result == expected
   17: 
   18: 
   19: def test_iat_duplicate_columns():
   20:     # https://github.com/pandas-dev/pandas/issues/11754
   21:     df = DataFrame([[1, 2]], columns=["x", "x"])
   22:     assert df.iat[0, 0] == 1
   23: 
   24: 
   25: def test_iat_getitem_series_with_period_index():
   26:     # GH#4390, iat incorrectly indexing
   27:     index = period_range("1/1/2001", periods=10)
   28:     ser = Series(np.random.default_rng(2).standard_normal(10), index=index)
   29:     expected = ser[index[0]]
   30:     result = ser.iat[0]
   31:     assert expected == result
   32: 
   33: 
   34: def test_iat_setitem_item_cache_cleared(
   35:     indexer_ial, using_copy_on_write, warn_copy_on_write
   36: ):
   37:     # GH#45684
   38:     data = {"x": np.arange(8, dtype=np.int64), "y": np.int64(0)}
   39:     df = DataFrame(data).copy()
   40:     ser = df["y"]
   41: 
   42:     # previously this iat setting would split the block and fail to clear
   43:     #  the item_cache.
   44:     with tm.assert_cow_warning(warn_copy_on_write):
   45:         indexer_ial(df)[7, 0] = 9999
   46: 
   47:     with tm.assert_cow_warning(warn_copy_on_write):
   48:         indexer_ial(df)[7, 1] = 1234
   49: 
   50:     assert df.iat[7, 1] == 1234
   51:     if not using_copy_on_write:
   52:         assert ser.iloc[-1] == 1234
   53:     assert df.iloc[-1, -1] == 1234
