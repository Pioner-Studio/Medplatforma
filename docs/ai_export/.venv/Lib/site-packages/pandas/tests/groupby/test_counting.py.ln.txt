    1: from itertools import product
    2: from string import ascii_lowercase
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Index,
   10:     MultiIndex,
   11:     Period,
   12:     Series,
   13:     Timedelta,
   14:     Timestamp,
   15:     date_range,
   16: )
   17: import pandas._testing as tm
   18: 
   19: 
   20: class TestCounting:
   21:     def test_cumcount(self):
   22:         df = DataFrame([["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"])
   23:         g = df.groupby("A")
   24:         sg = g.A
   25: 
   26:         expected = Series([0, 1, 2, 0, 3])
   27: 
   28:         tm.assert_series_equal(expected, g.cumcount())
   29:         tm.assert_series_equal(expected, sg.cumcount())
   30: 
   31:     def test_cumcount_empty(self):
   32:         ge = DataFrame().groupby(level=0)
   33:         se = Series(dtype=object).groupby(level=0)
   34: 
   35:         # edge case, as this is usually considered float
   36:         e = Series(dtype="int64")
   37: 
   38:         tm.assert_series_equal(e, ge.cumcount())
   39:         tm.assert_series_equal(e, se.cumcount())
   40: 
   41:     def test_cumcount_dupe_index(self):
   42:         df = DataFrame(
   43:             [["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=[0] * 5
   44:         )
   45:         g = df.groupby("A")
   46:         sg = g.A
   47: 
   48:         expected = Series([0, 1, 2, 0, 3], index=[0] * 5)
   49: 
   50:         tm.assert_series_equal(expected, g.cumcount())
   51:         tm.assert_series_equal(expected, sg.cumcount())
   52: 
   53:     def test_cumcount_mi(self):
   54:         mi = MultiIndex.from_tuples([[0, 1], [1, 2], [2, 2], [2, 2], [1, 0]])
   55:         df = DataFrame([["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=mi)
   56:         g = df.groupby("A")
   57:         sg = g.A
   58: 
   59:         expected = Series([0, 1, 2, 0, 3], index=mi)
   60: 
   61:         tm.assert_series_equal(expected, g.cumcount())
   62:         tm.assert_series_equal(expected, sg.cumcount())
   63: 
   64:     def test_cumcount_groupby_not_col(self):
   65:         df = DataFrame(
   66:             [["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=[0] * 5
   67:         )
   68:         g = df.groupby([0, 0, 0, 1, 0])
   69:         sg = g.A
   70: 
   71:         expected = Series([0, 1, 2, 0, 3], index=[0] * 5)
   72: 
   73:         tm.assert_series_equal(expected, g.cumcount())
   74:         tm.assert_series_equal(expected, sg.cumcount())
   75: 
   76:     def test_ngroup(self):
   77:         df = DataFrame({"A": list("aaaba")})
   78:         g = df.groupby("A")
   79:         sg = g.A
   80: 
   81:         expected = Series([0, 0, 0, 1, 0])
   82: 
   83:         tm.assert_series_equal(expected, g.ngroup())
   84:         tm.assert_series_equal(expected, sg.ngroup())
   85: 
   86:     def test_ngroup_distinct(self):
   87:         df = DataFrame({"A": list("abcde")})
   88:         g = df.groupby("A")
   89:         sg = g.A
   90: 
   91:         expected = Series(range(5), dtype="int64")
   92: 
   93:         tm.assert_series_equal(expected, g.ngroup())
   94:         tm.assert_series_equal(expected, sg.ngroup())
   95: 
   96:     def test_ngroup_one_group(self):
   97:         df = DataFrame({"A": [0] * 5})
   98:         g = df.groupby("A")
   99:         sg = g.A
  100: 
  101:         expected = Series([0] * 5)
  102: 
  103:         tm.assert_series_equal(expected, g.ngroup())
  104:         tm.assert_series_equal(expected, sg.ngroup())
  105: 
  106:     def test_ngroup_empty(self):
  107:         ge = DataFrame().groupby(level=0)
  108:         se = Series(dtype=object).groupby(level=0)
  109: 
  110:         # edge case, as this is usually considered float
  111:         e = Series(dtype="int64")
  112: 
  113:         tm.assert_series_equal(e, ge.ngroup())
  114:         tm.assert_series_equal(e, se.ngroup())
  115: 
  116:     def test_ngroup_series_matches_frame(self):
  117:         df = DataFrame({"A": list("aaaba")})
  118:         s = Series(list("aaaba"))
  119: 
  120:         tm.assert_series_equal(df.groupby(s).ngroup(), s.groupby(s).ngroup())
  121: 
  122:     def test_ngroup_dupe_index(self):
  123:         df = DataFrame({"A": list("aaaba")}, index=[0] * 5)
  124:         g = df.groupby("A")
  125:         sg = g.A
  126: 
  127:         expected = Series([0, 0, 0, 1, 0], index=[0] * 5)
  128: 
  129:         tm.assert_series_equal(expected, g.ngroup())
  130:         tm.assert_series_equal(expected, sg.ngroup())
  131: 
  132:     def test_ngroup_mi(self):
  133:         mi = MultiIndex.from_tuples([[0, 1], [1, 2], [2, 2], [2, 2], [1, 0]])
  134:         df = DataFrame({"A": list("aaaba")}, index=mi)
  135:         g = df.groupby("A")
  136:         sg = g.A
  137:         expected = Series([0, 0, 0, 1, 0], index=mi)
  138: 
  139:         tm.assert_series_equal(expected, g.ngroup())
  140:         tm.assert_series_equal(expected, sg.ngroup())
  141: 
  142:     def test_ngroup_groupby_not_col(self):
  143:         df = DataFrame({"A": list("aaaba")}, index=[0] * 5)
  144:         g = df.groupby([0, 0, 0, 1, 0])
  145:         sg = g.A
  146: 
  147:         expected = Series([0, 0, 0, 1, 0], index=[0] * 5)
  148: 
  149:         tm.assert_series_equal(expected, g.ngroup())
  150:         tm.assert_series_equal(expected, sg.ngroup())
  151: 
  152:     def test_ngroup_descending(self):
  153:         df = DataFrame(["a", "a", "b", "a", "b"], columns=["A"])
  154:         g = df.groupby(["A"])
  155: 
  156:         ascending = Series([0, 0, 1, 0, 1])
  157:         descending = Series([1, 1, 0, 1, 0])
  158: 
  159:         tm.assert_series_equal(descending, (g.ngroups - 1) - ascending)
  160:         tm.assert_series_equal(ascending, g.ngroup(ascending=True))
  161:         tm.assert_series_equal(descending, g.ngroup(ascending=False))
  162: 
  163:     def test_ngroup_matches_cumcount(self):
  164:         # verify one manually-worked out case works
  165:         df = DataFrame(
  166:             [["a", "x"], ["a", "y"], ["b", "x"], ["a", "x"], ["b", "y"]],
  167:             columns=["A", "X"],
  168:         )
  169:         g = df.groupby(["A", "X"])
  170:         g_ngroup = g.ngroup()
  171:         g_cumcount = g.cumcount()
  172:         expected_ngroup = Series([0, 1, 2, 0, 3])
  173:         expected_cumcount = Series([0, 0, 0, 1, 0])
  174: 
  175:         tm.assert_series_equal(g_ngroup, expected_ngroup)
  176:         tm.assert_series_equal(g_cumcount, expected_cumcount)
  177: 
  178:     def test_ngroup_cumcount_pair(self):
  179:         # brute force comparison for all small series
  180:         for p in product(range(3), repeat=4):
  181:             df = DataFrame({"a": p})
  182:             g = df.groupby(["a"])
  183: 
  184:             order = sorted(set(p))
  185:             ngroupd = [order.index(val) for val in p]
  186:             cumcounted = [p[:i].count(val) for i, val in enumerate(p)]
  187: 
  188:             tm.assert_series_equal(g.ngroup(), Series(ngroupd))
  189:             tm.assert_series_equal(g.cumcount(), Series(cumcounted))
  190: 
  191:     def test_ngroup_respects_groupby_order(self, sort):
  192:         df = DataFrame({"a": np.random.default_rng(2).choice(list("abcdef"), 100)})
  193:         g = df.groupby("a", sort=sort)
  194:         df["group_id"] = -1
  195:         df["group_index"] = -1
  196: 
  197:         for i, (_, group) in enumerate(g):
  198:             df.loc[group.index, "group_id"] = i
  199:             for j, ind in enumerate(group.index):
  200:                 df.loc[ind, "group_index"] = j
  201: 
  202:         tm.assert_series_equal(Series(df["group_id"].values), g.ngroup())
  203:         tm.assert_series_equal(Series(df["group_index"].values), g.cumcount())
  204: 
  205:     @pytest.mark.parametrize(
  206:         "datetimelike",
  207:         [
  208:             [Timestamp(f"2016-05-{i:02d} 20:09:25+00:00") for i in range(1, 4)],
  209:             [Timestamp(f"2016-05-{i:02d} 20:09:25") for i in range(1, 4)],
  210:             [Timestamp(f"2016-05-{i:02d} 20:09:25", tz="UTC") for i in range(1, 4)],
  211:             [Timedelta(x, unit="h") for x in range(1, 4)],
  212:             [Period(freq="2W", year=2017, month=x) for x in range(1, 4)],
  213:         ],
  214:     )
  215:     def test_count_with_datetimelike(self, datetimelike):
  216:         # test for #13393, where DataframeGroupBy.count() fails
  217:         # when counting a datetimelike column.
  218: 
  219:         df = DataFrame({"x": ["a", "a", "b"], "y": datetimelike})
  220:         res = df.groupby("x").count()
  221:         expected = DataFrame({"y": [2, 1]}, index=["a", "b"])
  222:         expected.index.name = "x"
  223:         tm.assert_frame_equal(expected, res)
  224: 
  225:     def test_count_with_only_nans_in_first_group(self):
  226:         # GH21956
  227:         df = DataFrame({"A": [np.nan, np.nan], "B": ["a", "b"], "C": [1, 2]})
  228:         result = df.groupby(["A", "B"]).C.count()
  229:         mi = MultiIndex(levels=[[], ["a", "b"]], codes=[[], []], names=["A", "B"])
  230:         expected = Series([], index=mi, dtype=np.int64, name="C")
  231:         tm.assert_series_equal(result, expected, check_index_type=False)
  232: 
  233:     def test_count_groupby_column_with_nan_in_groupby_column(self):
  234:         # https://github.com/pandas-dev/pandas/issues/32841
  235:         df = DataFrame({"A": [1, 1, 1, 1, 1], "B": [5, 4, np.nan, 3, 0]})
  236:         res = df.groupby(["B"]).count()
  237:         expected = DataFrame(
  238:             index=Index([0.0, 3.0, 4.0, 5.0], name="B"), data={"A": [1, 1, 1, 1]}
  239:         )
  240:         tm.assert_frame_equal(expected, res)
  241: 
  242:     def test_groupby_count_dateparseerror(self):
  243:         dr = date_range(start="1/1/2012", freq="5min", periods=10)
  244: 
  245:         # BAD Example, datetimes first
  246:         ser = Series(np.arange(10), index=[dr, np.arange(10)])
  247:         grouped = ser.groupby(lambda x: x[1] % 2 == 0)
  248:         result = grouped.count()
  249: 
  250:         ser = Series(np.arange(10), index=[np.arange(10), dr])
  251:         grouped = ser.groupby(lambda x: x[0] % 2 == 0)
  252:         expected = grouped.count()
  253: 
  254:         tm.assert_series_equal(result, expected)
  255: 
  256: 
  257: def test_groupby_timedelta_cython_count():
  258:     df = DataFrame(
  259:         {"g": list("ab" * 2), "delta": np.arange(4).astype("timedelta64[ns]")}
  260:     )
  261:     expected = Series([2, 2], index=Index(["a", "b"], name="g"), name="delta")
  262:     result = df.groupby("g").delta.count()
  263:     tm.assert_series_equal(expected, result)
  264: 
  265: 
  266: def test_count():
  267:     n = 1 << 15
  268:     dr = date_range("2015-08-30", periods=n // 10, freq="min")
  269: 
  270:     df = DataFrame(
  271:         {
  272:             "1st": np.random.default_rng(2).choice(list(ascii_lowercase), n),
  273:             "2nd": np.random.default_rng(2).integers(0, 5, n),
  274:             "3rd": np.random.default_rng(2).standard_normal(n).round(3),
  275:             "4th": np.random.default_rng(2).integers(-10, 10, n),
  276:             "5th": np.random.default_rng(2).choice(dr, n),
  277:             "6th": np.random.default_rng(2).standard_normal(n).round(3),
  278:             "7th": np.random.default_rng(2).standard_normal(n).round(3),
  279:             "8th": np.random.default_rng(2).choice(dr, n)
  280:             - np.random.default_rng(2).choice(dr, 1),
  281:             "9th": np.random.default_rng(2).choice(list(ascii_lowercase), n),
  282:         }
  283:     )
  284: 
  285:     for col in df.columns.drop(["1st", "2nd", "4th"]):
  286:         df.loc[np.random.default_rng(2).choice(n, n // 10), col] = np.nan
  287: 
  288:     df["9th"] = df["9th"].astype("category")
  289: 
  290:     for key in ["1st", "2nd", ["1st", "2nd"]]:
  291:         left = df.groupby(key).count()
  292:         msg = "DataFrameGroupBy.apply operated on the grouping columns"
  293:         with tm.assert_produces_warning(DeprecationWarning, match=msg):
  294:             right = df.groupby(key).apply(DataFrame.count).drop(key, axis=1)
  295:         tm.assert_frame_equal(left, right)
  296: 
  297: 
  298: def test_count_non_nulls():
  299:     # GH#5610
  300:     # count counts non-nulls
  301:     df = DataFrame(
  302:         [[1, 2, "foo"], [1, np.nan, "bar"], [3, np.nan, np.nan]],
  303:         columns=["A", "B", "C"],
  304:     )
  305: 
  306:     count_as = df.groupby("A").count()
  307:     count_not_as = df.groupby("A", as_index=False).count()
  308: 
  309:     expected = DataFrame([[1, 2], [0, 0]], columns=["B", "C"], index=[1, 3])
  310:     expected.index.name = "A"
  311:     tm.assert_frame_equal(count_not_as, expected.reset_index())
  312:     tm.assert_frame_equal(count_as, expected)
  313: 
  314:     count_B = df.groupby("A")["B"].count()
  315:     tm.assert_series_equal(count_B, expected["B"])
  316: 
  317: 
  318: def test_count_object():
  319:     df = DataFrame({"a": ["a"] * 3 + ["b"] * 3, "c": [2] * 3 + [3] * 3})
  320:     result = df.groupby("c").a.count()
  321:     expected = Series([3, 3], index=Index([2, 3], name="c"), name="a")
  322:     tm.assert_series_equal(result, expected)
  323: 
  324:     df = DataFrame({"a": ["a", np.nan, np.nan] + ["b"] * 3, "c": [2] * 3 + [3] * 3})
  325:     result = df.groupby("c").a.count()
  326:     expected = Series([1, 3], index=Index([2, 3], name="c"), name="a")
  327:     tm.assert_series_equal(result, expected)
  328: 
  329: 
  330: def test_count_cross_type():
  331:     # GH8169
  332:     # Set float64 dtype to avoid upcast when setting nan below
  333:     vals = np.hstack(
  334:         (
  335:             np.random.default_rng(2).integers(0, 5, (100, 2)),
  336:             np.random.default_rng(2).integers(0, 2, (100, 2)),
  337:         )
  338:     ).astype("float64")
  339: 
  340:     df = DataFrame(vals, columns=["a", "b", "c", "d"])
  341:     df[df == 2] = np.nan
  342:     expected = df.groupby(["c", "d"]).count()
  343: 
  344:     for t in ["float32", "object"]:
  345:         df["a"] = df["a"].astype(t)
  346:         df["b"] = df["b"].astype(t)
  347:         result = df.groupby(["c", "d"]).count()
  348:         tm.assert_frame_equal(result, expected)
  349: 
  350: 
  351: def test_lower_int_prec_count():
  352:     df = DataFrame(
  353:         {
  354:             "a": np.array([0, 1, 2, 100], np.int8),
  355:             "b": np.array([1, 2, 3, 6], np.uint32),
  356:             "c": np.array([4, 5, 6, 8], np.int16),
  357:             "grp": list("ab" * 2),
  358:         }
  359:     )
  360:     result = df.groupby("grp").count()
  361:     expected = DataFrame(
  362:         {"a": [2, 2], "b": [2, 2], "c": [2, 2]}, index=Index(list("ab"), name="grp")
  363:     )
  364:     tm.assert_frame_equal(result, expected)
  365: 
  366: 
  367: def test_count_uses_size_on_exception():
  368:     class RaisingObjectException(Exception):
  369:         pass
  370: 
  371:     class RaisingObject:
  372:         def __init__(self, msg="I will raise inside Cython") -> None:
  373:             super().__init__()
  374:             self.msg = msg
  375: 
  376:         def __eq__(self, other):
  377:             # gets called in Cython to check that raising calls the method
  378:             raise RaisingObjectException(self.msg)
  379: 
  380:     df = DataFrame({"a": [RaisingObject() for _ in range(4)], "grp": list("ab" * 2)})
  381:     result = df.groupby("grp").count()
  382:     expected = DataFrame({"a": [2, 2]}, index=Index(list("ab"), name="grp"))
  383:     tm.assert_frame_equal(result, expected)
  384: 
  385: 
  386: def test_count_arrow_string_array(any_string_dtype):
  387:     # GH#54751
  388:     pytest.importorskip("pyarrow")
  389:     df = DataFrame(
  390:         {"a": [1, 2, 3], "b": Series(["a", "b", "a"], dtype=any_string_dtype)}
  391:     )
  392:     result = df.groupby("a").count()
  393:     expected = DataFrame({"b": 1}, index=Index([1, 2, 3], name="a"))
  394:     tm.assert_frame_equal(result, expected)
