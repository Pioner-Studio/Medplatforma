    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     NaT,
    7:     Series,
    8:     Timedelta,
    9:     Timestamp,
   10:     date_range,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: def test_group_shift_with_null_key():
   16:     # This test is designed to replicate the segfault in issue #13813.
   17:     n_rows = 1200
   18: 
   19:     # Generate a moderately large dataframe with occasional missing
   20:     # values in column `B`, and then group by [`A`, `B`]. This should
   21:     # force `-1` in `labels` array of `g._grouper.group_info` exactly
   22:     # at those places, where the group-by key is partially missing.
   23:     df = DataFrame(
   24:         [(i % 12, i % 3 if i % 3 else np.nan, i) for i in range(n_rows)],
   25:         dtype=float,
   26:         columns=["A", "B", "Z"],
   27:         index=None,
   28:     )
   29:     g = df.groupby(["A", "B"])
   30: 
   31:     expected = DataFrame(
   32:         [(i + 12 if i % 3 and i < n_rows - 12 else np.nan) for i in range(n_rows)],
   33:         dtype=float,
   34:         columns=["Z"],
   35:         index=None,
   36:     )
   37:     result = g.shift(-1)
   38: 
   39:     tm.assert_frame_equal(result, expected)
   40: 
   41: 
   42: def test_group_shift_with_fill_value():
   43:     # GH #24128
   44:     n_rows = 24
   45:     df = DataFrame(
   46:         [(i % 12, i % 3, i) for i in range(n_rows)],
   47:         dtype=float,
   48:         columns=["A", "B", "Z"],
   49:         index=None,
   50:     )
   51:     g = df.groupby(["A", "B"])
   52: 
   53:     expected = DataFrame(
   54:         [(i + 12 if i < n_rows - 12 else 0) for i in range(n_rows)],
   55:         dtype=float,
   56:         columns=["Z"],
   57:         index=None,
   58:     )
   59:     result = g.shift(-1, fill_value=0)
   60: 
   61:     tm.assert_frame_equal(result, expected)
   62: 
   63: 
   64: def test_group_shift_lose_timezone():
   65:     # GH 30134
   66:     now_dt = Timestamp.utcnow().as_unit("ns")
   67:     df = DataFrame({"a": [1, 1], "date": now_dt})
   68:     result = df.groupby("a").shift(0).iloc[0]
   69:     expected = Series({"date": now_dt}, name=result.name)
   70:     tm.assert_series_equal(result, expected)
   71: 
   72: 
   73: def test_group_diff_real_series(any_real_numpy_dtype):
   74:     df = DataFrame(
   75:         {"a": [1, 2, 3, 3, 2], "b": [1, 2, 3, 4, 5]},
   76:         dtype=any_real_numpy_dtype,
   77:     )
   78:     result = df.groupby("a")["b"].diff()
   79:     exp_dtype = "float"
   80:     if any_real_numpy_dtype in ["int8", "int16", "float32"]:
   81:         exp_dtype = "float32"
   82:     expected = Series([np.nan, np.nan, np.nan, 1.0, 3.0], dtype=exp_dtype, name="b")
   83:     tm.assert_series_equal(result, expected)
   84: 
   85: 
   86: def test_group_diff_real_frame(any_real_numpy_dtype):
   87:     df = DataFrame(
   88:         {
   89:             "a": [1, 2, 3, 3, 2],
   90:             "b": [1, 2, 3, 4, 5],
   91:             "c": [1, 2, 3, 4, 6],
   92:         },
   93:         dtype=any_real_numpy_dtype,
   94:     )
   95:     result = df.groupby("a").diff()
   96:     exp_dtype = "float"
   97:     if any_real_numpy_dtype in ["int8", "int16", "float32"]:
   98:         exp_dtype = "float32"
   99:     expected = DataFrame(
  100:         {
  101:             "b": [np.nan, np.nan, np.nan, 1.0, 3.0],
  102:             "c": [np.nan, np.nan, np.nan, 1.0, 4.0],
  103:         },
  104:         dtype=exp_dtype,
  105:     )
  106:     tm.assert_frame_equal(result, expected)
  107: 
  108: 
  109: @pytest.mark.parametrize(
  110:     "data",
  111:     [
  112:         [
  113:             Timestamp("2013-01-01"),
  114:             Timestamp("2013-01-02"),
  115:             Timestamp("2013-01-03"),
  116:         ],
  117:         [Timedelta("5 days"), Timedelta("6 days"), Timedelta("7 days")],
  118:     ],
  119: )
  120: def test_group_diff_datetimelike(data, unit):
  121:     df = DataFrame({"a": [1, 2, 2], "b": data})
  122:     df["b"] = df["b"].dt.as_unit(unit)
  123:     result = df.groupby("a")["b"].diff()
  124:     expected = Series([NaT, NaT, Timedelta("1 days")], name="b").dt.as_unit(unit)
  125:     tm.assert_series_equal(result, expected)
  126: 
  127: 
  128: def test_group_diff_bool():
  129:     df = DataFrame({"a": [1, 2, 3, 3, 2], "b": [True, True, False, False, True]})
  130:     result = df.groupby("a")["b"].diff()
  131:     expected = Series([np.nan, np.nan, np.nan, False, False], name="b")
  132:     tm.assert_series_equal(result, expected)
  133: 
  134: 
  135: def test_group_diff_object_raises(object_dtype):
  136:     df = DataFrame(
  137:         {"a": ["foo", "bar", "bar"], "b": ["baz", "foo", "foo"]}, dtype=object_dtype
  138:     )
  139:     with pytest.raises(TypeError, match=r"unsupported operand type\(s\) for -"):
  140:         df.groupby("a")["b"].diff()
  141: 
  142: 
  143: def test_empty_shift_with_fill():
  144:     # GH 41264, single-index check
  145:     df = DataFrame(columns=["a", "b", "c"])
  146:     shifted = df.groupby(["a"]).shift(1)
  147:     shifted_with_fill = df.groupby(["a"]).shift(1, fill_value=0)
  148:     tm.assert_frame_equal(shifted, shifted_with_fill)
  149:     tm.assert_index_equal(shifted.index, shifted_with_fill.index)
  150: 
  151: 
  152: def test_multindex_empty_shift_with_fill():
  153:     # GH 41264, multi-index check
  154:     df = DataFrame(columns=["a", "b", "c"])
  155:     shifted = df.groupby(["a", "b"]).shift(1)
  156:     shifted_with_fill = df.groupby(["a", "b"]).shift(1, fill_value=0)
  157:     tm.assert_frame_equal(shifted, shifted_with_fill)
  158:     tm.assert_index_equal(shifted.index, shifted_with_fill.index)
  159: 
  160: 
  161: def test_shift_periods_freq():
  162:     # GH 54093
  163:     data = {"a": [1, 2, 3, 4, 5, 6], "b": [0, 0, 0, 1, 1, 1]}
  164:     df = DataFrame(data, index=date_range(start="20100101", periods=6))
  165:     result = df.groupby(df.index).shift(periods=-2, freq="D")
  166:     expected = DataFrame(data, index=date_range(start="2009-12-30", periods=6))
  167:     tm.assert_frame_equal(result, expected)
  168: 
  169: 
  170: def test_shift_deprecate_freq_and_fill_value():
  171:     # GH 53832
  172:     data = {"a": [1, 2, 3, 4, 5, 6], "b": [0, 0, 0, 1, 1, 1]}
  173:     df = DataFrame(data, index=date_range(start="20100101", periods=6))
  174:     msg = (
  175:         "Passing a 'freq' together with a 'fill_value' silently ignores the fill_value"
  176:     )
  177:     with tm.assert_produces_warning(FutureWarning, match=msg):
  178:         df.groupby(df.index).shift(periods=-2, freq="D", fill_value="1")
  179: 
  180: 
  181: def test_shift_disallow_suffix_if_periods_is_int():
  182:     # GH#44424
  183:     data = {"a": [1, 2, 3, 4, 5, 6], "b": [0, 0, 0, 1, 1, 1]}
  184:     df = DataFrame(data)
  185:     msg = "Cannot specify `suffix` if `periods` is an int."
  186:     with pytest.raises(ValueError, match=msg):
  187:         df.groupby("b").shift(1, suffix="fails")
  188: 
  189: 
  190: def test_group_shift_with_multiple_periods():
  191:     # GH#44424
  192:     df = DataFrame({"a": [1, 2, 3, 3, 2], "b": [True, True, False, False, True]})
  193: 
  194:     shifted_df = df.groupby("b")[["a"]].shift([0, 1])
  195:     expected_df = DataFrame(
  196:         {"a_0": [1, 2, 3, 3, 2], "a_1": [np.nan, 1.0, np.nan, 3.0, 2.0]}
  197:     )
  198:     tm.assert_frame_equal(shifted_df, expected_df)
  199: 
  200:     # series
  201:     shifted_series = df.groupby("b")["a"].shift([0, 1])
  202:     tm.assert_frame_equal(shifted_series, expected_df)
  203: 
  204: 
  205: def test_group_shift_with_multiple_periods_and_freq():
  206:     # GH#44424
  207:     df = DataFrame(
  208:         {"a": [1, 2, 3, 4, 5], "b": [True, True, False, False, True]},
  209:         index=date_range("1/1/2000", periods=5, freq="h"),
  210:     )
  211:     shifted_df = df.groupby("b")[["a"]].shift(
  212:         [0, 1],
  213:         freq="h",
  214:     )
  215:     expected_df = DataFrame(
  216:         {
  217:             "a_0": [1.0, 2.0, 3.0, 4.0, 5.0, np.nan],
  218:             "a_1": [
  219:                 np.nan,
  220:                 1.0,
  221:                 2.0,
  222:                 3.0,
  223:                 4.0,
  224:                 5.0,
  225:             ],
  226:         },
  227:         index=date_range("1/1/2000", periods=6, freq="h"),
  228:     )
  229:     tm.assert_frame_equal(shifted_df, expected_df)
  230: 
  231: 
  232: def test_group_shift_with_multiple_periods_and_fill_value():
  233:     # GH#44424
  234:     df = DataFrame(
  235:         {"a": [1, 2, 3, 4, 5], "b": [True, True, False, False, True]},
  236:     )
  237:     shifted_df = df.groupby("b")[["a"]].shift([0, 1], fill_value=-1)
  238:     expected_df = DataFrame(
  239:         {"a_0": [1, 2, 3, 4, 5], "a_1": [-1, 1, -1, 3, 2]},
  240:     )
  241:     tm.assert_frame_equal(shifted_df, expected_df)
  242: 
  243: 
  244: def test_group_shift_with_multiple_periods_and_both_fill_and_freq_deprecated():
  245:     # GH#44424
  246:     df = DataFrame(
  247:         {"a": [1, 2, 3, 4, 5], "b": [True, True, False, False, True]},
  248:         index=date_range("1/1/2000", periods=5, freq="h"),
  249:     )
  250:     msg = (
  251:         "Passing a 'freq' together with a 'fill_value' silently ignores the "
  252:         "fill_value"
  253:     )
  254:     with tm.assert_produces_warning(FutureWarning, match=msg):
  255:         df.groupby("b")[["a"]].shift([1, 2], fill_value=1, freq="h")
