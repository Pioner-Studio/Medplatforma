    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas.util._test_decorators as td
    5: 
    6: from pandas.core.dtypes.common import is_integer_dtype
    7: 
    8: from pandas import (
    9:     DataFrame,
   10:     Index,
   11:     PeriodIndex,
   12:     Series,
   13: )
   14: import pandas._testing as tm
   15: 
   16: 
   17: @pytest.mark.parametrize("by", ["A", "B", ["A", "B"]])
   18: def test_size(df, by):
   19:     grouped = df.groupby(by=by)
   20:     result = grouped.size()
   21:     for key, group in grouped:
   22:         assert result[key] == len(group)
   23: 
   24: 
   25: @pytest.mark.parametrize(
   26:     "by",
   27:     [
   28:         [0, 0, 0, 0],
   29:         [0, 1, 1, 1],
   30:         [1, 0, 1, 1],
   31:         [0, None, None, None],
   32:         pytest.param([None, None, None, None], marks=pytest.mark.xfail),
   33:     ],
   34: )
   35: def test_size_axis_1(df, axis_1, by, sort, dropna):
   36:     # GH#45715
   37:     counts = {key: sum(value == key for value in by) for key in dict.fromkeys(by)}
   38:     if dropna:
   39:         counts = {key: value for key, value in counts.items() if key is not None}
   40:     expected = Series(counts, dtype="int64")
   41:     if sort:
   42:         expected = expected.sort_index()
   43:     if is_integer_dtype(expected.index.dtype) and not any(x is None for x in by):
   44:         expected.index = expected.index.astype(int)
   45: 
   46:     msg = "DataFrame.groupby with axis=1 is deprecated"
   47:     with tm.assert_produces_warning(FutureWarning, match=msg):
   48:         grouped = df.groupby(by=by, axis=axis_1, sort=sort, dropna=dropna)
   49:     result = grouped.size()
   50:     tm.assert_series_equal(result, expected)
   51: 
   52: 
   53: @pytest.mark.parametrize("by", ["A", "B", ["A", "B"]])
   54: @pytest.mark.parametrize("sort", [True, False])
   55: def test_size_sort(sort, by):
   56:     df = DataFrame(np.random.default_rng(2).choice(20, (1000, 3)), columns=list("ABC"))
   57:     left = df.groupby(by=by, sort=sort).size()
   58:     right = df.groupby(by=by, sort=sort)["C"].apply(lambda a: a.shape[0])
   59:     tm.assert_series_equal(left, right, check_names=False)
   60: 
   61: 
   62: def test_size_series_dataframe():
   63:     # https://github.com/pandas-dev/pandas/issues/11699
   64:     df = DataFrame(columns=["A", "B"])
   65:     out = Series(dtype="int64", index=Index([], name="A"))
   66:     tm.assert_series_equal(df.groupby("A").size(), out)
   67: 
   68: 
   69: def test_size_groupby_all_null():
   70:     # https://github.com/pandas-dev/pandas/issues/23050
   71:     # Assert no 'Value Error : Length of passed values is 2, index implies 0'
   72:     df = DataFrame({"A": [None, None]})  # all-null groups
   73:     result = df.groupby("A").size()
   74:     expected = Series(dtype="int64", index=Index([], name="A"))
   75:     tm.assert_series_equal(result, expected)
   76: 
   77: 
   78: def test_size_period_index():
   79:     # https://github.com/pandas-dev/pandas/issues/34010
   80:     ser = Series([1], index=PeriodIndex(["2000"], name="A", freq="D"))
   81:     grp = ser.groupby(level="A")
   82:     result = grp.size()
   83:     tm.assert_series_equal(result, ser)
   84: 
   85: 
   86: @pytest.mark.parametrize("as_index", [True, False])
   87: def test_size_on_categorical(as_index):
   88:     df = DataFrame([[1, 1], [2, 2]], columns=["A", "B"])
   89:     df["A"] = df["A"].astype("category")
   90:     result = df.groupby(["A", "B"], as_index=as_index, observed=False).size()
   91: 
   92:     expected = DataFrame(
   93:         [[1, 1, 1], [1, 2, 0], [2, 1, 0], [2, 2, 1]], columns=["A", "B", "size"]
   94:     )
   95:     expected["A"] = expected["A"].astype("category")
   96:     if as_index:
   97:         expected = expected.set_index(["A", "B"])["size"].rename(None)
   98: 
   99:     tm.assert_equal(result, expected)
  100: 
  101: 
  102: @pytest.mark.parametrize("dtype", ["Int64", "Float64", "boolean"])
  103: def test_size_series_masked_type_returns_Int64(dtype):
  104:     # GH 54132
  105:     ser = Series([1, 1, 1], index=["a", "a", "b"], dtype=dtype)
  106:     result = ser.groupby(level=0).size()
  107:     expected = Series([2, 1], dtype="Int64", index=["a", "b"])
  108:     tm.assert_series_equal(result, expected)
  109: 
  110: 
  111: @pytest.mark.parametrize(
  112:     "dtype",
  113:     [
  114:         object,
  115:         pytest.param("string[pyarrow_numpy]", marks=td.skip_if_no("pyarrow")),
  116:         pytest.param("string[pyarrow]", marks=td.skip_if_no("pyarrow")),
  117:     ],
  118: )
  119: def test_size_strings(dtype):
  120:     # GH#55627
  121:     df = DataFrame({"a": ["a", "a", "b"], "b": "a"}, dtype=dtype)
  122:     result = df.groupby("a")["b"].size()
  123:     exp_dtype = "Int64" if dtype == "string[pyarrow]" else "int64"
  124:     expected = Series(
  125:         [2, 1],
  126:         index=Index(["a", "b"], name="a", dtype=dtype),
  127:         name="b",
  128:         dtype=exp_dtype,
  129:     )
  130:     tm.assert_series_equal(result, expected)
