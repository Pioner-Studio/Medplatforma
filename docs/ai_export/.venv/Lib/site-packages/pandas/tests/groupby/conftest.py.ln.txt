    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     Series,
    8:     date_range,
    9: )
   10: from pandas.core.groupby.base import (
   11:     reduction_kernels,
   12:     transformation_kernels,
   13: )
   14: 
   15: 
   16: @pytest.fixture(params=[True, False])
   17: def sort(request):
   18:     return request.param
   19: 
   20: 
   21: @pytest.fixture(params=[True, False])
   22: def as_index(request):
   23:     return request.param
   24: 
   25: 
   26: @pytest.fixture(params=[True, False])
   27: def dropna(request):
   28:     return request.param
   29: 
   30: 
   31: @pytest.fixture(params=[True, False])
   32: def observed(request):
   33:     return request.param
   34: 
   35: 
   36: @pytest.fixture
   37: def df():
   38:     return DataFrame(
   39:         {
   40:             "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],
   41:             "B": ["one", "one", "two", "three", "two", "two", "one", "three"],
   42:             "C": np.random.default_rng(2).standard_normal(8),
   43:             "D": np.random.default_rng(2).standard_normal(8),
   44:         }
   45:     )
   46: 
   47: 
   48: @pytest.fixture
   49: def ts():
   50:     return Series(
   51:         np.random.default_rng(2).standard_normal(30),
   52:         index=date_range("2000-01-01", periods=30, freq="B"),
   53:     )
   54: 
   55: 
   56: @pytest.fixture
   57: def tsframe():
   58:     return DataFrame(
   59:         np.random.default_rng(2).standard_normal((30, 4)),
   60:         columns=Index(list("ABCD"), dtype=object),
   61:         index=date_range("2000-01-01", periods=30, freq="B"),
   62:     )
   63: 
   64: 
   65: @pytest.fixture
   66: def three_group():
   67:     return DataFrame(
   68:         {
   69:             "A": [
   70:                 "foo",
   71:                 "foo",
   72:                 "foo",
   73:                 "foo",
   74:                 "bar",
   75:                 "bar",
   76:                 "bar",
   77:                 "bar",
   78:                 "foo",
   79:                 "foo",
   80:                 "foo",
   81:             ],
   82:             "B": [
   83:                 "one",
   84:                 "one",
   85:                 "one",
   86:                 "two",
   87:                 "one",
   88:                 "one",
   89:                 "one",
   90:                 "two",
   91:                 "two",
   92:                 "two",
   93:                 "one",
   94:             ],
   95:             "C": [
   96:                 "dull",
   97:                 "dull",
   98:                 "shiny",
   99:                 "dull",
  100:                 "dull",
  101:                 "shiny",
  102:                 "shiny",
  103:                 "dull",
  104:                 "shiny",
  105:                 "shiny",
  106:                 "shiny",
  107:             ],
  108:             "D": np.random.default_rng(2).standard_normal(11),
  109:             "E": np.random.default_rng(2).standard_normal(11),
  110:             "F": np.random.default_rng(2).standard_normal(11),
  111:         }
  112:     )
  113: 
  114: 
  115: @pytest.fixture()
  116: def slice_test_df():
  117:     data = [
  118:         [0, "a", "a0_at_0"],
  119:         [1, "b", "b0_at_1"],
  120:         [2, "a", "a1_at_2"],
  121:         [3, "b", "b1_at_3"],
  122:         [4, "c", "c0_at_4"],
  123:         [5, "a", "a2_at_5"],
  124:         [6, "a", "a3_at_6"],
  125:         [7, "a", "a4_at_7"],
  126:     ]
  127:     df = DataFrame(data, columns=["Index", "Group", "Value"])
  128:     return df.set_index("Index")
  129: 
  130: 
  131: @pytest.fixture()
  132: def slice_test_grouped(slice_test_df):
  133:     return slice_test_df.groupby("Group", as_index=False)
  134: 
  135: 
  136: @pytest.fixture(params=sorted(reduction_kernels))
  137: def reduction_func(request):
  138:     """
  139:     yields the string names of all groupby reduction functions, one at a time.
  140:     """
  141:     return request.param
  142: 
  143: 
  144: @pytest.fixture(params=sorted(transformation_kernels))
  145: def transformation_func(request):
  146:     """yields the string names of all groupby transformation functions."""
  147:     return request.param
  148: 
  149: 
  150: @pytest.fixture(params=sorted(reduction_kernels) + sorted(transformation_kernels))
  151: def groupby_func(request):
  152:     """yields both aggregation and transformation functions."""
  153:     return request.param
  154: 
  155: 
  156: @pytest.fixture(params=[True, False])
  157: def parallel(request):
  158:     """parallel keyword argument for numba.jit"""
  159:     return request.param
  160: 
  161: 
  162: # Can parameterize nogil & nopython over True | False, but limiting per
  163: # https://github.com/pandas-dev/pandas/pull/41971#issuecomment-860607472
  164: 
  165: 
  166: @pytest.fixture(params=[False])
  167: def nogil(request):
  168:     """nogil keyword argument for numba.jit"""
  169:     return request.param
  170: 
  171: 
  172: @pytest.fixture(params=[True])
  173: def nopython(request):
  174:     """nopython keyword argument for numba.jit"""
  175:     return request.param
  176: 
  177: 
  178: @pytest.fixture(
  179:     params=[
  180:         ("mean", {}),
  181:         ("var", {"ddof": 1}),
  182:         ("var", {"ddof": 0}),
  183:         ("std", {"ddof": 1}),
  184:         ("std", {"ddof": 0}),
  185:         ("sum", {}),
  186:         ("min", {}),
  187:         ("max", {}),
  188:         ("sum", {"min_count": 2}),
  189:         ("min", {"min_count": 2}),
  190:         ("max", {"min_count": 2}),
  191:     ],
  192:     ids=[
  193:         "mean",
  194:         "var_1",
  195:         "var_0",
  196:         "std_1",
  197:         "std_0",
  198:         "sum",
  199:         "min",
  200:         "max",
  201:         "sum-min_count",
  202:         "min-min_count",
  203:         "max-min_count",
  204:     ],
  205: )
  206: def numba_supported_reductions(request):
  207:     """reductions supported with engine='numba'"""
  208:     return request.param
