    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Index,
    8:     date_range,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: @pytest.mark.parametrize("func", ["ffill", "bfill"])
   14: def test_groupby_column_index_name_lost_fill_funcs(func):
   15:     # GH: 29764 groupby loses index sometimes
   16:     df = DataFrame(
   17:         [[1, 1.0, -1.0], [1, np.nan, np.nan], [1, 2.0, -2.0]],
   18:         columns=Index(["type", "a", "b"], name="idx"),
   19:     )
   20:     df_grouped = df.groupby(["type"])[["a", "b"]]
   21:     result = getattr(df_grouped, func)().columns
   22:     expected = Index(["a", "b"], name="idx")
   23:     tm.assert_index_equal(result, expected)
   24: 
   25: 
   26: @pytest.mark.parametrize("func", ["ffill", "bfill"])
   27: def test_groupby_fill_duplicate_column_names(func):
   28:     # GH: 25610 ValueError with duplicate column names
   29:     df1 = DataFrame({"field1": [1, 3, 4], "field2": [1, 3, 4]})
   30:     df2 = DataFrame({"field1": [1, np.nan, 4]})
   31:     df_grouped = pd.concat([df1, df2], axis=1).groupby(by=["field2"])
   32:     expected = DataFrame(
   33:         [[1, 1.0], [3, np.nan], [4, 4.0]], columns=["field1", "field1"]
   34:     )
   35:     result = getattr(df_grouped, func)()
   36:     tm.assert_frame_equal(result, expected)
   37: 
   38: 
   39: def test_ffill_missing_arguments():
   40:     # GH 14955
   41:     df = DataFrame({"a": [1, 2], "b": [1, 1]})
   42:     msg = "DataFrameGroupBy.fillna is deprecated"
   43:     with tm.assert_produces_warning(FutureWarning, match=msg):
   44:         with pytest.raises(ValueError, match="Must specify a fill"):
   45:             df.groupby("b").fillna()
   46: 
   47: 
   48: @pytest.mark.parametrize(
   49:     "method, expected", [("ffill", [None, "a", "a"]), ("bfill", ["a", "a", None])]
   50: )
   51: def test_fillna_with_string_dtype(method, expected):
   52:     # GH 40250
   53:     df = DataFrame({"a": pd.array([None, "a", None], dtype="string"), "b": [0, 0, 0]})
   54:     grp = df.groupby("b")
   55:     msg = "DataFrameGroupBy.fillna is deprecated"
   56:     with tm.assert_produces_warning(FutureWarning, match=msg):
   57:         result = grp.fillna(method=method)
   58:     expected = DataFrame({"a": pd.array(expected, dtype="string")})
   59:     tm.assert_frame_equal(result, expected)
   60: 
   61: 
   62: def test_fill_consistency():
   63:     # GH9221
   64:     # pass thru keyword arguments to the generated wrapper
   65:     # are set if the passed kw is None (only)
   66:     df = DataFrame(
   67:         index=pd.MultiIndex.from_product(
   68:             [["value1", "value2"], date_range("2014-01-01", "2014-01-06")]
   69:         ),
   70:         columns=Index(["1", "2"], name="id"),
   71:     )
   72:     df["1"] = [
   73:         np.nan,
   74:         1,
   75:         np.nan,
   76:         np.nan,
   77:         11,
   78:         np.nan,
   79:         np.nan,
   80:         2,
   81:         np.nan,
   82:         np.nan,
   83:         22,
   84:         np.nan,
   85:     ]
   86:     df["2"] = [
   87:         np.nan,
   88:         3,
   89:         np.nan,
   90:         np.nan,
   91:         33,
   92:         np.nan,
   93:         np.nan,
   94:         4,
   95:         np.nan,
   96:         np.nan,
   97:         44,
   98:         np.nan,
   99:     ]
  100: 
  101:     msg = "The 'axis' keyword in DataFrame.groupby is deprecated"
  102:     with tm.assert_produces_warning(FutureWarning, match=msg):
  103:         expected = df.groupby(level=0, axis=0).fillna(method="ffill")
  104: 
  105:     msg = "DataFrame.groupby with axis=1 is deprecated"
  106:     with tm.assert_produces_warning(FutureWarning, match=msg):
  107:         result = df.T.groupby(level=0, axis=1).fillna(method="ffill").T
  108:     tm.assert_frame_equal(result, expected)
  109: 
  110: 
  111: @pytest.mark.parametrize("method", ["ffill", "bfill"])
  112: @pytest.mark.parametrize("dropna", [True, False])
  113: @pytest.mark.parametrize("has_nan_group", [True, False])
  114: def test_ffill_handles_nan_groups(dropna, method, has_nan_group):
  115:     # GH 34725
  116: 
  117:     df_without_nan_rows = DataFrame([(1, 0.1), (2, 0.2)])
  118: 
  119:     ridx = [-1, 0, -1, -1, 1, -1]
  120:     df = df_without_nan_rows.reindex(ridx).reset_index(drop=True)
  121: 
  122:     group_b = np.nan if has_nan_group else "b"
  123:     df["group_col"] = pd.Series(["a"] * 3 + [group_b] * 3)
  124: 
  125:     grouped = df.groupby(by="group_col", dropna=dropna)
  126:     result = getattr(grouped, method)(limit=None)
  127: 
  128:     expected_rows = {
  129:         ("ffill", True, True): [-1, 0, 0, -1, -1, -1],
  130:         ("ffill", True, False): [-1, 0, 0, -1, 1, 1],
  131:         ("ffill", False, True): [-1, 0, 0, -1, 1, 1],
  132:         ("ffill", False, False): [-1, 0, 0, -1, 1, 1],
  133:         ("bfill", True, True): [0, 0, -1, -1, -1, -1],
  134:         ("bfill", True, False): [0, 0, -1, 1, 1, -1],
  135:         ("bfill", False, True): [0, 0, -1, 1, 1, -1],
  136:         ("bfill", False, False): [0, 0, -1, 1, 1, -1],
  137:     }
  138: 
  139:     ridx = expected_rows.get((method, dropna, has_nan_group))
  140:     expected = df_without_nan_rows.reindex(ridx).reset_index(drop=True)
  141:     # columns are a 'take' on df.columns, which are object dtype
  142:     expected.columns = expected.columns.astype(object)
  143: 
  144:     tm.assert_frame_equal(result, expected)
  145: 
  146: 
  147: @pytest.mark.parametrize("min_count, value", [(2, np.nan), (-1, 1.0)])
  148: @pytest.mark.parametrize("func", ["first", "last", "max", "min"])
  149: def test_min_count(func, min_count, value):
  150:     # GH#37821
  151:     df = DataFrame({"a": [1] * 3, "b": [1, np.nan, np.nan], "c": [np.nan] * 3})
  152:     result = getattr(df.groupby("a"), func)(min_count=min_count)
  153:     expected = DataFrame({"b": [value], "c": [np.nan]}, index=Index([1], name="a"))
  154:     tm.assert_frame_equal(result, expected)
  155: 
  156: 
  157: def test_indices_with_missing():
  158:     # GH 9304
  159:     df = DataFrame({"a": [1, 1, np.nan], "b": [2, 3, 4], "c": [5, 6, 7]})
  160:     g = df.groupby(["a", "b"])
  161:     result = g.indices
  162:     expected = {(1.0, 2): np.array([0]), (1.0, 3): np.array([1])}
  163:     assert result == expected
