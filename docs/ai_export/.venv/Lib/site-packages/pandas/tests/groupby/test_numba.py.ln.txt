    1: import pytest
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Series,
    6:     option_context,
    7: )
    8: import pandas._testing as tm
    9: 
   10: pytestmark = pytest.mark.single_cpu
   11: 
   12: pytest.importorskip("numba")
   13: 
   14: 
   15: @pytest.mark.filterwarnings("ignore")
   16: # Filter warnings when parallel=True and the function can't be parallelized by Numba
   17: class TestEngine:
   18:     def test_cython_vs_numba_frame(
   19:         self, sort, nogil, parallel, nopython, numba_supported_reductions
   20:     ):
   21:         func, kwargs = numba_supported_reductions
   22:         df = DataFrame({"a": [3, 2, 3, 2], "b": range(4), "c": range(1, 5)})
   23:         engine_kwargs = {"nogil": nogil, "parallel": parallel, "nopython": nopython}
   24:         gb = df.groupby("a", sort=sort)
   25:         result = getattr(gb, func)(
   26:             engine="numba", engine_kwargs=engine_kwargs, **kwargs
   27:         )
   28:         expected = getattr(gb, func)(**kwargs)
   29:         tm.assert_frame_equal(result, expected)
   30: 
   31:     def test_cython_vs_numba_getitem(
   32:         self, sort, nogil, parallel, nopython, numba_supported_reductions
   33:     ):
   34:         func, kwargs = numba_supported_reductions
   35:         df = DataFrame({"a": [3, 2, 3, 2], "b": range(4), "c": range(1, 5)})
   36:         engine_kwargs = {"nogil": nogil, "parallel": parallel, "nopython": nopython}
   37:         gb = df.groupby("a", sort=sort)["c"]
   38:         result = getattr(gb, func)(
   39:             engine="numba", engine_kwargs=engine_kwargs, **kwargs
   40:         )
   41:         expected = getattr(gb, func)(**kwargs)
   42:         tm.assert_series_equal(result, expected)
   43: 
   44:     def test_cython_vs_numba_series(
   45:         self, sort, nogil, parallel, nopython, numba_supported_reductions
   46:     ):
   47:         func, kwargs = numba_supported_reductions
   48:         ser = Series(range(3), index=[1, 2, 1], name="foo")
   49:         engine_kwargs = {"nogil": nogil, "parallel": parallel, "nopython": nopython}
   50:         gb = ser.groupby(level=0, sort=sort)
   51:         result = getattr(gb, func)(
   52:             engine="numba", engine_kwargs=engine_kwargs, **kwargs
   53:         )
   54:         expected = getattr(gb, func)(**kwargs)
   55:         tm.assert_series_equal(result, expected)
   56: 
   57:     def test_as_index_false_unsupported(self, numba_supported_reductions):
   58:         func, kwargs = numba_supported_reductions
   59:         df = DataFrame({"a": [3, 2, 3, 2], "b": range(4), "c": range(1, 5)})
   60:         gb = df.groupby("a", as_index=False)
   61:         with pytest.raises(NotImplementedError, match="as_index=False"):
   62:             getattr(gb, func)(engine="numba", **kwargs)
   63: 
   64:     def test_axis_1_unsupported(self, numba_supported_reductions):
   65:         func, kwargs = numba_supported_reductions
   66:         df = DataFrame({"a": [3, 2, 3, 2], "b": range(4), "c": range(1, 5)})
   67:         gb = df.groupby("a", axis=1)
   68:         with pytest.raises(NotImplementedError, match="axis=1"):
   69:             getattr(gb, func)(engine="numba", **kwargs)
   70: 
   71:     def test_no_engine_doesnt_raise(self):
   72:         # GH55520
   73:         df = DataFrame({"a": [3, 2, 3, 2], "b": range(4), "c": range(1, 5)})
   74:         gb = df.groupby("a")
   75:         # Make sure behavior of functions w/out engine argument don't raise
   76:         # when the global use_numba option is set
   77:         with option_context("compute.use_numba", True):
   78:             res = gb.agg({"b": "first"})
   79:         expected = gb.agg({"b": "first"})
   80:         tm.assert_frame_equal(res, expected)
