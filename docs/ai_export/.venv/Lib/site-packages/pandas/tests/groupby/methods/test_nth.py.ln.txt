    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Index,
    8:     MultiIndex,
    9:     Series,
   10:     Timestamp,
   11:     isna,
   12: )
   13: import pandas._testing as tm
   14: 
   15: 
   16: def test_first_last_nth(df):
   17:     # tests for first / last / nth
   18:     grouped = df.groupby("A")
   19:     first = grouped.first()
   20:     expected = df.loc[[1, 0], ["B", "C", "D"]]
   21:     expected.index = Index(["bar", "foo"], name="A")
   22:     expected = expected.sort_index()
   23:     tm.assert_frame_equal(first, expected)
   24: 
   25:     nth = grouped.nth(0)
   26:     expected = df.loc[[0, 1]]
   27:     tm.assert_frame_equal(nth, expected)
   28: 
   29:     last = grouped.last()
   30:     expected = df.loc[[5, 7], ["B", "C", "D"]]
   31:     expected.index = Index(["bar", "foo"], name="A")
   32:     tm.assert_frame_equal(last, expected)
   33: 
   34:     nth = grouped.nth(-1)
   35:     expected = df.iloc[[5, 7]]
   36:     tm.assert_frame_equal(nth, expected)
   37: 
   38:     nth = grouped.nth(1)
   39:     expected = df.iloc[[2, 3]]
   40:     tm.assert_frame_equal(nth, expected)
   41: 
   42:     # it works!
   43:     grouped["B"].first()
   44:     grouped["B"].last()
   45:     grouped["B"].nth(0)
   46: 
   47:     df = df.copy()
   48:     df.loc[df["A"] == "foo", "B"] = np.nan
   49:     grouped = df.groupby("A")
   50:     assert isna(grouped["B"].first()["foo"])
   51:     assert isna(grouped["B"].last()["foo"])
   52:     assert isna(grouped["B"].nth(0).iloc[0])
   53: 
   54:     # v0.14.0 whatsnew
   55:     df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=["A", "B"])
   56:     g = df.groupby("A")
   57:     result = g.first()
   58:     expected = df.iloc[[1, 2]].set_index("A")
   59:     tm.assert_frame_equal(result, expected)
   60: 
   61:     expected = df.iloc[[1, 2]]
   62:     result = g.nth(0, dropna="any")
   63:     tm.assert_frame_equal(result, expected)
   64: 
   65: 
   66: @pytest.mark.parametrize("method", ["first", "last"])
   67: def test_first_last_with_na_object(method, nulls_fixture):
   68:     # https://github.com/pandas-dev/pandas/issues/32123
   69:     groups = DataFrame({"a": [1, 1, 2, 2], "b": [1, 2, 3, nulls_fixture]}).groupby("a")
   70:     result = getattr(groups, method)()
   71: 
   72:     if method == "first":
   73:         values = [1, 3]
   74:     else:
   75:         values = [2, 3]
   76: 
   77:     values = np.array(values, dtype=result["b"].dtype)
   78:     idx = Index([1, 2], name="a")
   79:     expected = DataFrame({"b": values}, index=idx)
   80: 
   81:     tm.assert_frame_equal(result, expected)
   82: 
   83: 
   84: @pytest.mark.parametrize("index", [0, -1])
   85: def test_nth_with_na_object(index, nulls_fixture):
   86:     # https://github.com/pandas-dev/pandas/issues/32123
   87:     df = DataFrame({"a": [1, 1, 2, 2], "b": [1, 2, 3, nulls_fixture]})
   88:     groups = df.groupby("a")
   89:     result = groups.nth(index)
   90:     expected = df.iloc[[0, 2]] if index == 0 else df.iloc[[1, 3]]
   91:     tm.assert_frame_equal(result, expected)
   92: 
   93: 
   94: @pytest.mark.parametrize("method", ["first", "last"])
   95: def test_first_last_with_None(method):
   96:     # https://github.com/pandas-dev/pandas/issues/32800
   97:     # None should be preserved as object dtype
   98:     df = DataFrame.from_dict({"id": ["a"], "value": [None]})
   99:     groups = df.groupby("id", as_index=False)
  100:     result = getattr(groups, method)()
  101: 
  102:     tm.assert_frame_equal(result, df)
  103: 
  104: 
  105: @pytest.mark.parametrize("method", ["first", "last"])
  106: @pytest.mark.parametrize(
  107:     "df, expected",
  108:     [
  109:         (
  110:             DataFrame({"id": "a", "value": [None, "foo", np.nan]}),
  111:             DataFrame({"value": ["foo"]}, index=Index(["a"], name="id")),
  112:         ),
  113:         (
  114:             DataFrame({"id": "a", "value": [np.nan]}, dtype=object),
  115:             DataFrame({"value": [None]}, index=Index(["a"], name="id")),
  116:         ),
  117:     ],
  118: )
  119: def test_first_last_with_None_expanded(method, df, expected):
  120:     # GH 32800, 38286
  121:     result = getattr(df.groupby("id"), method)()
  122:     tm.assert_frame_equal(result, expected)
  123: 
  124: 
  125: def test_first_last_nth_dtypes():
  126:     df = DataFrame(
  127:         {
  128:             "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],
  129:             "B": ["one", "one", "two", "three", "two", "two", "one", "three"],
  130:             "C": np.random.default_rng(2).standard_normal(8),
  131:             "D": np.array(np.random.default_rng(2).standard_normal(8), dtype="float32"),
  132:         }
  133:     )
  134:     df["E"] = True
  135:     df["F"] = 1
  136: 
  137:     # tests for first / last / nth
  138:     grouped = df.groupby("A")
  139:     first = grouped.first()
  140:     expected = df.loc[[1, 0], ["B", "C", "D", "E", "F"]]
  141:     expected.index = Index(["bar", "foo"], name="A")
  142:     expected = expected.sort_index()
  143:     tm.assert_frame_equal(first, expected)
  144: 
  145:     last = grouped.last()
  146:     expected = df.loc[[5, 7], ["B", "C", "D", "E", "F"]]
  147:     expected.index = Index(["bar", "foo"], name="A")
  148:     expected = expected.sort_index()
  149:     tm.assert_frame_equal(last, expected)
  150: 
  151:     nth = grouped.nth(1)
  152:     expected = df.iloc[[2, 3]]
  153:     tm.assert_frame_equal(nth, expected)
  154: 
  155: 
  156: def test_first_last_nth_dtypes2():
  157:     # GH 2763, first/last shifting dtypes
  158:     idx = list(range(10))
  159:     idx.append(9)
  160:     ser = Series(data=range(11), index=idx, name="IntCol")
  161:     assert ser.dtype == "int64"
  162:     f = ser.groupby(level=0).first()
  163:     assert f.dtype == "int64"
  164: 
  165: 
  166: def test_first_last_nth_nan_dtype():
  167:     # GH 33591
  168:     df = DataFrame({"data": ["A"], "nans": Series([None], dtype=object)})
  169:     grouped = df.groupby("data")
  170: 
  171:     expected = df.set_index("data").nans
  172:     tm.assert_series_equal(grouped.nans.first(), expected)
  173:     tm.assert_series_equal(grouped.nans.last(), expected)
  174: 
  175:     expected = df.nans
  176:     tm.assert_series_equal(grouped.nans.nth(-1), expected)
  177:     tm.assert_series_equal(grouped.nans.nth(0), expected)
  178: 
  179: 
  180: def test_first_strings_timestamps():
  181:     # GH 11244
  182:     test = DataFrame(
  183:         {
  184:             Timestamp("2012-01-01 00:00:00"): ["a", "b"],
  185:             Timestamp("2012-01-02 00:00:00"): ["c", "d"],
  186:             "name": ["e", "e"],
  187:             "aaaa": ["f", "g"],
  188:         }
  189:     )
  190:     result = test.groupby("name").first()
  191:     expected = DataFrame(
  192:         [["a", "c", "f"]],
  193:         columns=Index([Timestamp("2012-01-01"), Timestamp("2012-01-02"), "aaaa"]),
  194:         index=Index(["e"], name="name"),
  195:     )
  196:     tm.assert_frame_equal(result, expected)
  197: 
  198: 
  199: def test_nth():
  200:     df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=["A", "B"])
  201:     gb = df.groupby("A")
  202: 
  203:     tm.assert_frame_equal(gb.nth(0), df.iloc[[0, 2]])
  204:     tm.assert_frame_equal(gb.nth(1), df.iloc[[1]])
  205:     tm.assert_frame_equal(gb.nth(2), df.loc[[]])
  206:     tm.assert_frame_equal(gb.nth(-1), df.iloc[[1, 2]])
  207:     tm.assert_frame_equal(gb.nth(-2), df.iloc[[0]])
  208:     tm.assert_frame_equal(gb.nth(-3), df.loc[[]])
  209:     tm.assert_series_equal(gb.B.nth(0), df.B.iloc[[0, 2]])
  210:     tm.assert_series_equal(gb.B.nth(1), df.B.iloc[[1]])
  211:     tm.assert_frame_equal(gb[["B"]].nth(0), df[["B"]].iloc[[0, 2]])
  212: 
  213:     tm.assert_frame_equal(gb.nth(0, dropna="any"), df.iloc[[1, 2]])
  214:     tm.assert_frame_equal(gb.nth(-1, dropna="any"), df.iloc[[1, 2]])
  215: 
  216:     tm.assert_frame_equal(gb.nth(7, dropna="any"), df.iloc[:0])
  217:     tm.assert_frame_equal(gb.nth(2, dropna="any"), df.iloc[:0])
  218: 
  219: 
  220: def test_nth2():
  221:     # out of bounds, regression from 0.13.1
  222:     # GH 6621
  223:     df = DataFrame(
  224:         {
  225:             "color": {0: "green", 1: "green", 2: "red", 3: "red", 4: "red"},
  226:             "food": {0: "ham", 1: "eggs", 2: "eggs", 3: "ham", 4: "pork"},
  227:             "two": {
  228:                 0: 1.5456590000000001,
  229:                 1: -0.070345000000000005,
  230:                 2: -2.4004539999999999,
  231:                 3: 0.46206000000000003,
  232:                 4: 0.52350799999999997,
  233:             },
  234:             "one": {
  235:                 0: 0.56573799999999996,
  236:                 1: -0.9742360000000001,
  237:                 2: 1.033801,
  238:                 3: -0.78543499999999999,
  239:                 4: 0.70422799999999997,
  240:             },
  241:         }
  242:     ).set_index(["color", "food"])
  243: 
  244:     result = df.groupby(level=0, as_index=False).nth(2)
  245:     expected = df.iloc[[-1]]
  246:     tm.assert_frame_equal(result, expected)
  247: 
  248:     result = df.groupby(level=0, as_index=False).nth(3)
  249:     expected = df.loc[[]]
  250:     tm.assert_frame_equal(result, expected)
  251: 
  252: 
  253: def test_nth3():
  254:     # GH 7559
  255:     # from the vbench
  256:     df = DataFrame(np.random.default_rng(2).integers(1, 10, (100, 2)), dtype="int64")
  257:     ser = df[1]
  258:     gb = df[0]
  259:     expected = ser.groupby(gb).first()
  260:     expected2 = ser.groupby(gb).apply(lambda x: x.iloc[0])
  261:     tm.assert_series_equal(expected2, expected, check_names=False)
  262:     assert expected.name == 1
  263:     assert expected2.name == 1
  264: 
  265:     # validate first
  266:     v = ser[gb == 1].iloc[0]
  267:     assert expected.iloc[0] == v
  268:     assert expected2.iloc[0] == v
  269: 
  270:     with pytest.raises(ValueError, match="For a DataFrame"):
  271:         ser.groupby(gb, sort=False).nth(0, dropna=True)
  272: 
  273: 
  274: def test_nth4():
  275:     # doc example
  276:     df = DataFrame([[1, np.nan], [1, 4], [5, 6]], columns=["A", "B"])
  277:     gb = df.groupby("A")
  278:     result = gb.B.nth(0, dropna="all")
  279:     expected = df.B.iloc[[1, 2]]
  280:     tm.assert_series_equal(result, expected)
  281: 
  282: 
  283: def test_nth5():
  284:     # test multiple nth values
  285:     df = DataFrame([[1, np.nan], [1, 3], [1, 4], [5, 6], [5, 7]], columns=["A", "B"])
  286:     gb = df.groupby("A")
  287: 
  288:     tm.assert_frame_equal(gb.nth(0), df.iloc[[0, 3]])
  289:     tm.assert_frame_equal(gb.nth([0]), df.iloc[[0, 3]])
  290:     tm.assert_frame_equal(gb.nth([0, 1]), df.iloc[[0, 1, 3, 4]])
  291:     tm.assert_frame_equal(gb.nth([0, -1]), df.iloc[[0, 2, 3, 4]])
  292:     tm.assert_frame_equal(gb.nth([0, 1, 2]), df.iloc[[0, 1, 2, 3, 4]])
  293:     tm.assert_frame_equal(gb.nth([0, 1, -1]), df.iloc[[0, 1, 2, 3, 4]])
  294:     tm.assert_frame_equal(gb.nth([2]), df.iloc[[2]])
  295:     tm.assert_frame_equal(gb.nth([3, 4]), df.loc[[]])
  296: 
  297: 
  298: def test_nth_bdays(unit):
  299:     business_dates = pd.date_range(
  300:         start="4/1/2014", end="6/30/2014", freq="B", unit=unit
  301:     )
  302:     df = DataFrame(1, index=business_dates, columns=["a", "b"])
  303:     # get the first, fourth and last two business days for each month
  304:     key = [df.index.year, df.index.month]
  305:     result = df.groupby(key, as_index=False).nth([0, 3, -2, -1])
  306:     expected_dates = pd.to_datetime(
  307:         [
  308:             "2014/4/1",
  309:             "2014/4/4",
  310:             "2014/4/29",
  311:             "2014/4/30",
  312:             "2014/5/1",
  313:             "2014/5/6",
  314:             "2014/5/29",
  315:             "2014/5/30",
  316:             "2014/6/2",
  317:             "2014/6/5",
  318:             "2014/6/27",
  319:             "2014/6/30",
  320:         ]
  321:     ).as_unit(unit)
  322:     expected = DataFrame(1, columns=["a", "b"], index=expected_dates)
  323:     tm.assert_frame_equal(result, expected)
  324: 
  325: 
  326: def test_nth_multi_grouper(three_group):
  327:     # PR 9090, related to issue 8979
  328:     # test nth on multiple groupers
  329:     grouped = three_group.groupby(["A", "B"])
  330:     result = grouped.nth(0)
  331:     expected = three_group.iloc[[0, 3, 4, 7]]
  332:     tm.assert_frame_equal(result, expected)
  333: 
  334: 
  335: @pytest.mark.parametrize(
  336:     "data, expected_first, expected_last",
  337:     [
  338:         (
  339:             {
  340:                 "id": ["A"],
  341:                 "time": Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  342:                 "foo": [1],
  343:             },
  344:             {
  345:                 "id": ["A"],
  346:                 "time": Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  347:                 "foo": [1],
  348:             },
  349:             {
  350:                 "id": ["A"],
  351:                 "time": Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  352:                 "foo": [1],
  353:             },
  354:         ),
  355:         (
  356:             {
  357:                 "id": ["A", "B", "A"],
  358:                 "time": [
  359:                     Timestamp("2012-01-01 13:00:00", tz="America/New_York"),
  360:                     Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  361:                     Timestamp("2012-03-01 12:00:00", tz="Europe/London"),
  362:                 ],
  363:                 "foo": [1, 2, 3],
  364:             },
  365:             {
  366:                 "id": ["A", "B"],
  367:                 "time": [
  368:                     Timestamp("2012-01-01 13:00:00", tz="America/New_York"),
  369:                     Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  370:                 ],
  371:                 "foo": [1, 2],
  372:             },
  373:             {
  374:                 "id": ["A", "B"],
  375:                 "time": [
  376:                     Timestamp("2012-03-01 12:00:00", tz="Europe/London"),
  377:                     Timestamp("2012-02-01 14:00:00", tz="US/Central"),
  378:                 ],
  379:                 "foo": [3, 2],
  380:             },
  381:         ),
  382:     ],
  383: )
  384: def test_first_last_tz(data, expected_first, expected_last):
  385:     # GH15884
  386:     # Test that the timezone is retained when calling first
  387:     # or last on groupby with as_index=False
  388: 
  389:     df = DataFrame(data)
  390: 
  391:     result = df.groupby("id", as_index=False).first()
  392:     expected = DataFrame(expected_first)
  393:     cols = ["id", "time", "foo"]
  394:     tm.assert_frame_equal(result[cols], expected[cols])
  395: 
  396:     result = df.groupby("id", as_index=False)["time"].first()
  397:     tm.assert_frame_equal(result, expected[["id", "time"]])
  398: 
  399:     result = df.groupby("id", as_index=False).last()
  400:     expected = DataFrame(expected_last)
  401:     cols = ["id", "time", "foo"]
  402:     tm.assert_frame_equal(result[cols], expected[cols])
  403: 
  404:     result = df.groupby("id", as_index=False)["time"].last()
  405:     tm.assert_frame_equal(result, expected[["id", "time"]])
  406: 
  407: 
  408: @pytest.mark.parametrize(
  409:     "method, ts, alpha",
  410:     [
  411:         ["first", Timestamp("2013-01-01", tz="US/Eastern"), "a"],
  412:         ["last", Timestamp("2013-01-02", tz="US/Eastern"), "b"],
  413:     ],
  414: )
  415: def test_first_last_tz_multi_column(method, ts, alpha, unit):
  416:     # GH 21603
  417:     category_string = Series(list("abc")).astype("category")
  418:     dti = pd.date_range("20130101", periods=3, tz="US/Eastern", unit=unit)
  419:     df = DataFrame(
  420:         {
  421:             "group": [1, 1, 2],
  422:             "category_string": category_string,
  423:             "datetimetz": dti,
  424:         }
  425:     )
  426:     result = getattr(df.groupby("group"), method)()
  427:     expected = DataFrame(
  428:         {
  429:             "category_string": pd.Categorical(
  430:                 [alpha, "c"], dtype=category_string.dtype
  431:             ),
  432:             "datetimetz": [ts, Timestamp("2013-01-03", tz="US/Eastern")],
  433:         },
  434:         index=Index([1, 2], name="group"),
  435:     )
  436:     expected["datetimetz"] = expected["datetimetz"].dt.as_unit(unit)
  437:     tm.assert_frame_equal(result, expected)
  438: 
  439: 
  440: @pytest.mark.parametrize(
  441:     "values",
  442:     [
  443:         pd.array([True, False], dtype="boolean"),
  444:         pd.array([1, 2], dtype="Int64"),
  445:         pd.to_datetime(["2020-01-01", "2020-02-01"]),
  446:         pd.to_timedelta([1, 2], unit="D"),
  447:     ],
  448: )
  449: @pytest.mark.parametrize("function", ["first", "last", "min", "max"])
  450: def test_first_last_extension_array_keeps_dtype(values, function):
  451:     # https://github.com/pandas-dev/pandas/issues/33071
  452:     # https://github.com/pandas-dev/pandas/issues/32194
  453:     df = DataFrame({"a": [1, 2], "b": values})
  454:     grouped = df.groupby("a")
  455:     idx = Index([1, 2], name="a")
  456:     expected_series = Series(values, name="b", index=idx)
  457:     expected_frame = DataFrame({"b": values}, index=idx)
  458: 
  459:     result_series = getattr(grouped["b"], function)()
  460:     tm.assert_series_equal(result_series, expected_series)
  461: 
  462:     result_frame = grouped.agg({"b": function})
  463:     tm.assert_frame_equal(result_frame, expected_frame)
  464: 
  465: 
  466: def test_nth_multi_index_as_expected():
  467:     # PR 9090, related to issue 8979
  468:     # test nth on MultiIndex
  469:     three_group = DataFrame(
  470:         {
  471:             "A": [
  472:                 "foo",
  473:                 "foo",
  474:                 "foo",
  475:                 "foo",
  476:                 "bar",
  477:                 "bar",
  478:                 "bar",
  479:                 "bar",
  480:                 "foo",
  481:                 "foo",
  482:                 "foo",
  483:             ],
  484:             "B": [
  485:                 "one",
  486:                 "one",
  487:                 "one",
  488:                 "two",
  489:                 "one",
  490:                 "one",
  491:                 "one",
  492:                 "two",
  493:                 "two",
  494:                 "two",
  495:                 "one",
  496:             ],
  497:             "C": [
  498:                 "dull",
  499:                 "dull",
  500:                 "shiny",
  501:                 "dull",
  502:                 "dull",
  503:                 "shiny",
  504:                 "shiny",
  505:                 "dull",
  506:                 "shiny",
  507:                 "shiny",
  508:                 "shiny",
  509:             ],
  510:         }
  511:     )
  512:     grouped = three_group.groupby(["A", "B"])
  513:     result = grouped.nth(0)
  514:     expected = three_group.iloc[[0, 3, 4, 7]]
  515:     tm.assert_frame_equal(result, expected)
  516: 
  517: 
  518: @pytest.mark.parametrize(
  519:     "op, n, expected_rows",
  520:     [
  521:         ("head", -1, [0]),
  522:         ("head", 0, []),
  523:         ("head", 1, [0, 2]),
  524:         ("head", 7, [0, 1, 2]),
  525:         ("tail", -1, [1]),
  526:         ("tail", 0, []),
  527:         ("tail", 1, [1, 2]),
  528:         ("tail", 7, [0, 1, 2]),
  529:     ],
  530: )
  531: @pytest.mark.parametrize("columns", [None, [], ["A"], ["B"], ["A", "B"]])
  532: @pytest.mark.parametrize("as_index", [True, False])
  533: def test_groupby_head_tail(op, n, expected_rows, columns, as_index):
  534:     df = DataFrame([[1, 2], [1, 4], [5, 6]], columns=["A", "B"])
  535:     g = df.groupby("A", as_index=as_index)
  536:     expected = df.iloc[expected_rows]
  537:     if columns is not None:
  538:         g = g[columns]
  539:         expected = expected[columns]
  540:     result = getattr(g, op)(n)
  541:     tm.assert_frame_equal(result, expected)
  542: 
  543: 
  544: @pytest.mark.parametrize(
  545:     "op, n, expected_cols",
  546:     [
  547:         ("head", -1, [0]),
  548:         ("head", 0, []),
  549:         ("head", 1, [0, 2]),
  550:         ("head", 7, [0, 1, 2]),
  551:         ("tail", -1, [1]),
  552:         ("tail", 0, []),
  553:         ("tail", 1, [1, 2]),
  554:         ("tail", 7, [0, 1, 2]),
  555:     ],
  556: )
  557: def test_groupby_head_tail_axis_1(op, n, expected_cols):
  558:     # GH 9772
  559:     df = DataFrame(
  560:         [[1, 2, 3], [1, 4, 5], [2, 6, 7], [3, 8, 9]], columns=["A", "B", "C"]
  561:     )
  562:     msg = "DataFrame.groupby with axis=1 is deprecated"
  563:     with tm.assert_produces_warning(FutureWarning, match=msg):
  564:         g = df.groupby([0, 0, 1], axis=1)
  565:     expected = df.iloc[:, expected_cols]
  566:     result = getattr(g, op)(n)
  567:     tm.assert_frame_equal(result, expected)
  568: 
  569: 
  570: def test_group_selection_cache():
  571:     # GH 12839 nth, head, and tail should return same result consistently
  572:     df = DataFrame([[1, 2], [1, 4], [5, 6]], columns=["A", "B"])
  573:     expected = df.iloc[[0, 2]]
  574: 
  575:     g = df.groupby("A")
  576:     result1 = g.head(n=2)
  577:     result2 = g.nth(0)
  578:     tm.assert_frame_equal(result1, df)
  579:     tm.assert_frame_equal(result2, expected)
  580: 
  581:     g = df.groupby("A")
  582:     result1 = g.tail(n=2)
  583:     result2 = g.nth(0)
  584:     tm.assert_frame_equal(result1, df)
  585:     tm.assert_frame_equal(result2, expected)
  586: 
  587:     g = df.groupby("A")
  588:     result1 = g.nth(0)
  589:     result2 = g.head(n=2)
  590:     tm.assert_frame_equal(result1, expected)
  591:     tm.assert_frame_equal(result2, df)
  592: 
  593:     g = df.groupby("A")
  594:     result1 = g.nth(0)
  595:     result2 = g.tail(n=2)
  596:     tm.assert_frame_equal(result1, expected)
  597:     tm.assert_frame_equal(result2, df)
  598: 
  599: 
  600: def test_nth_empty():
  601:     # GH 16064
  602:     df = DataFrame(index=[0], columns=["a", "b", "c"])
  603:     result = df.groupby("a").nth(10)
  604:     expected = df.iloc[:0]
  605:     tm.assert_frame_equal(result, expected)
  606: 
  607:     result = df.groupby(["a", "b"]).nth(10)
  608:     expected = df.iloc[:0]
  609:     tm.assert_frame_equal(result, expected)
  610: 
  611: 
  612: def test_nth_column_order():
  613:     # GH 20760
  614:     # Check that nth preserves column order
  615:     df = DataFrame(
  616:         [[1, "b", 100], [1, "a", 50], [1, "a", np.nan], [2, "c", 200], [2, "d", 150]],
  617:         columns=["A", "C", "B"],
  618:     )
  619:     result = df.groupby("A").nth(0)
  620:     expected = df.iloc[[0, 3]]
  621:     tm.assert_frame_equal(result, expected)
  622: 
  623:     result = df.groupby("A").nth(-1, dropna="any")
  624:     expected = df.iloc[[1, 4]]
  625:     tm.assert_frame_equal(result, expected)
  626: 
  627: 
  628: @pytest.mark.parametrize("dropna", [None, "any", "all"])
  629: def test_nth_nan_in_grouper(dropna):
  630:     # GH 26011
  631:     df = DataFrame(
  632:         {
  633:             "a": [np.nan, "a", np.nan, "b", np.nan],
  634:             "b": [0, 2, 4, 6, 8],
  635:             "c": [1, 3, 5, 7, 9],
  636:         }
  637:     )
  638:     result = df.groupby("a").nth(0, dropna=dropna)
  639:     expected = df.iloc[[1, 3]]
  640: 
  641:     tm.assert_frame_equal(result, expected)
  642: 
  643: 
  644: @pytest.mark.parametrize("dropna", [None, "any", "all"])
  645: def test_nth_nan_in_grouper_series(dropna):
  646:     # GH 26454
  647:     df = DataFrame(
  648:         {
  649:             "a": [np.nan, "a", np.nan, "b", np.nan],
  650:             "b": [0, 2, 4, 6, 8],
  651:         }
  652:     )
  653:     result = df.groupby("a")["b"].nth(0, dropna=dropna)
  654:     expected = df["b"].iloc[[1, 3]]
  655: 
  656:     tm.assert_series_equal(result, expected)
  657: 
  658: 
  659: def test_first_categorical_and_datetime_data_nat():
  660:     # GH 20520
  661:     df = DataFrame(
  662:         {
  663:             "group": ["first", "first", "second", "third", "third"],
  664:             "time": 5 * [np.datetime64("NaT")],
  665:             "categories": Series(["a", "b", "c", "a", "b"], dtype="category"),
  666:         }
  667:     )
  668:     result = df.groupby("group").first()
  669:     expected = DataFrame(
  670:         {
  671:             "time": 3 * [np.datetime64("NaT")],
  672:             "categories": Series(["a", "c", "a"]).astype(
  673:                 pd.CategoricalDtype(["a", "b", "c"])
  674:             ),
  675:         }
  676:     )
  677:     expected.index = Index(["first", "second", "third"], name="group")
  678:     tm.assert_frame_equal(result, expected)
  679: 
  680: 
  681: def test_first_multi_key_groupby_categorical():
  682:     # GH 22512
  683:     df = DataFrame(
  684:         {
  685:             "A": [1, 1, 1, 2, 2],
  686:             "B": [100, 100, 200, 100, 100],
  687:             "C": ["apple", "orange", "mango", "mango", "orange"],
  688:             "D": ["jupiter", "mercury", "mars", "venus", "venus"],
  689:         }
  690:     )
  691:     df = df.astype({"D": "category"})
  692:     result = df.groupby(by=["A", "B"]).first()
  693:     expected = DataFrame(
  694:         {
  695:             "C": ["apple", "mango", "mango"],
  696:             "D": Series(["jupiter", "mars", "venus"]).astype(
  697:                 pd.CategoricalDtype(["jupiter", "mars", "mercury", "venus"])
  698:             ),
  699:         }
  700:     )
  701:     expected.index = MultiIndex.from_tuples(
  702:         [(1, 100), (1, 200), (2, 100)], names=["A", "B"]
  703:     )
  704:     tm.assert_frame_equal(result, expected)
  705: 
  706: 
  707: @pytest.mark.parametrize("method", ["first", "last", "nth"])
  708: def test_groupby_last_first_nth_with_none(method, nulls_fixture):
  709:     # GH29645
  710:     expected = Series(["y"])
  711:     data = Series(
  712:         [nulls_fixture, nulls_fixture, nulls_fixture, "y", nulls_fixture],
  713:         index=[0, 0, 0, 0, 0],
  714:     ).groupby(level=0)
  715: 
  716:     if method == "nth":
  717:         result = getattr(data, method)(3)
  718:     else:
  719:         result = getattr(data, method)()
  720: 
  721:     tm.assert_series_equal(result, expected)
  722: 
  723: 
  724: @pytest.mark.parametrize(
  725:     "arg, expected_rows",
  726:     [
  727:         [slice(None, 3, 2), [0, 1, 4, 5]],
  728:         [slice(None, -2), [0, 2, 5]],
  729:         [[slice(None, 2), slice(-2, None)], [0, 1, 2, 3, 4, 6, 7]],
  730:         [[0, 1, slice(-2, None)], [0, 1, 2, 3, 4, 6, 7]],
  731:     ],
  732: )
  733: def test_slice(slice_test_df, slice_test_grouped, arg, expected_rows):
  734:     # Test slices     GH #42947
  735: 
  736:     result = slice_test_grouped.nth[arg]
  737:     equivalent = slice_test_grouped.nth(arg)
  738:     expected = slice_test_df.iloc[expected_rows]
  739: 
  740:     tm.assert_frame_equal(result, expected)
  741:     tm.assert_frame_equal(equivalent, expected)
  742: 
  743: 
  744: def test_nth_indexed(slice_test_df, slice_test_grouped):
  745:     # Test index notation     GH #44688
  746: 
  747:     result = slice_test_grouped.nth[0, 1, -2:]
  748:     equivalent = slice_test_grouped.nth([0, 1, slice(-2, None)])
  749:     expected = slice_test_df.iloc[[0, 1, 2, 3, 4, 6, 7]]
  750: 
  751:     tm.assert_frame_equal(result, expected)
  752:     tm.assert_frame_equal(equivalent, expected)
  753: 
  754: 
  755: def test_invalid_argument(slice_test_grouped):
  756:     # Test for error on invalid argument
  757: 
  758:     with pytest.raises(TypeError, match="Invalid index"):
  759:         slice_test_grouped.nth(3.14)
  760: 
  761: 
  762: def test_negative_step(slice_test_grouped):
  763:     # Test for error on negative slice step
  764: 
  765:     with pytest.raises(ValueError, match="Invalid step"):
  766:         slice_test_grouped.nth(slice(None, None, -1))
  767: 
  768: 
  769: def test_np_ints(slice_test_df, slice_test_grouped):
  770:     # Test np ints work
  771: 
  772:     result = slice_test_grouped.nth(np.array([0, 1]))
  773:     expected = slice_test_df.iloc[[0, 1, 2, 3, 4]]
  774:     tm.assert_frame_equal(result, expected)
  775: 
  776: 
  777: def test_groupby_nth_with_column_axis():
  778:     # GH43926
  779:     df = DataFrame(
  780:         [
  781:             [4, 5, 6],
  782:             [8, 8, 7],
  783:         ],
  784:         index=["z", "y"],
  785:         columns=["C", "B", "A"],
  786:     )
  787:     msg = "DataFrame.groupby with axis=1 is deprecated"
  788:     with tm.assert_produces_warning(FutureWarning, match=msg):
  789:         gb = df.groupby(df.iloc[1], axis=1)
  790:     result = gb.nth(0)
  791:     expected = df.iloc[:, [0, 2]]
  792:     tm.assert_frame_equal(result, expected)
  793: 
  794: 
  795: def test_groupby_nth_interval():
  796:     # GH#24205
  797:     idx_result = MultiIndex(
  798:         [
  799:             pd.CategoricalIndex([pd.Interval(0, 1), pd.Interval(1, 2)]),
  800:             pd.CategoricalIndex([pd.Interval(0, 10), pd.Interval(10, 20)]),
  801:         ],
  802:         [[0, 0, 0, 1, 1], [0, 1, 1, 0, -1]],
  803:     )
  804:     df_result = DataFrame({"col": range(len(idx_result))}, index=idx_result)
  805:     result = df_result.groupby(level=[0, 1], observed=False).nth(0)
  806:     val_expected = [0, 1, 3]
  807:     idx_expected = MultiIndex(
  808:         [
  809:             pd.CategoricalIndex([pd.Interval(0, 1), pd.Interval(1, 2)]),
  810:             pd.CategoricalIndex([pd.Interval(0, 10), pd.Interval(10, 20)]),
  811:         ],
  812:         [[0, 0, 1], [0, 1, 0]],
  813:     )
  814:     expected = DataFrame(val_expected, index=idx_expected, columns=["col"])
  815:     tm.assert_frame_equal(result, expected)
  816: 
  817: 
  818: @pytest.mark.parametrize(
  819:     "start, stop, expected_values, expected_columns",
  820:     [
  821:         (None, None, [0, 1, 2, 3, 4], list("ABCDE")),
  822:         (None, 1, [0, 3], list("AD")),
  823:         (None, 9, [0, 1, 2, 3, 4], list("ABCDE")),
  824:         (None, -1, [0, 1, 3], list("ABD")),
  825:         (1, None, [1, 2, 4], list("BCE")),
  826:         (1, -1, [1], list("B")),
  827:         (-1, None, [2, 4], list("CE")),
  828:         (-1, 2, [4], list("E")),
  829:     ],
  830: )
  831: @pytest.mark.parametrize("method", ["call", "index"])
  832: def test_nth_slices_with_column_axis(
  833:     start, stop, expected_values, expected_columns, method
  834: ):
  835:     df = DataFrame([range(5)], columns=[list("ABCDE")])
  836:     msg = "DataFrame.groupby with axis=1 is deprecated"
  837:     with tm.assert_produces_warning(FutureWarning, match=msg):
  838:         gb = df.groupby([5, 5, 5, 6, 6], axis=1)
  839:     result = {
  840:         "call": lambda start, stop: gb.nth(slice(start, stop)),
  841:         "index": lambda start, stop: gb.nth[start:stop],
  842:     }[method](start, stop)
  843:     expected = DataFrame([expected_values], columns=[expected_columns])
  844:     tm.assert_frame_equal(result, expected)
  845: 
  846: 
  847: @pytest.mark.filterwarnings(
  848:     "ignore:invalid value encountered in remainder:RuntimeWarning"
  849: )
  850: def test_head_tail_dropna_true():
  851:     # GH#45089
  852:     df = DataFrame(
  853:         [["a", "z"], ["b", np.nan], ["c", np.nan], ["c", np.nan]], columns=["X", "Y"]
  854:     )
  855:     expected = DataFrame([["a", "z"]], columns=["X", "Y"])
  856: 
  857:     result = df.groupby(["X", "Y"]).head(n=1)
  858:     tm.assert_frame_equal(result, expected)
  859: 
  860:     result = df.groupby(["X", "Y"]).tail(n=1)
  861:     tm.assert_frame_equal(result, expected)
  862: 
  863:     result = df.groupby(["X", "Y"]).nth(n=0)
  864:     tm.assert_frame_equal(result, expected)
  865: 
  866: 
  867: def test_head_tail_dropna_false():
  868:     # GH#45089
  869:     df = DataFrame([["a", "z"], ["b", np.nan], ["c", np.nan]], columns=["X", "Y"])
  870:     expected = DataFrame([["a", "z"], ["b", np.nan], ["c", np.nan]], columns=["X", "Y"])
  871: 
  872:     result = df.groupby(["X", "Y"], dropna=False).head(n=1)
  873:     tm.assert_frame_equal(result, expected)
  874: 
  875:     result = df.groupby(["X", "Y"], dropna=False).tail(n=1)
  876:     tm.assert_frame_equal(result, expected)
  877: 
  878:     result = df.groupby(["X", "Y"], dropna=False).nth(n=0)
  879:     tm.assert_frame_equal(result, expected)
  880: 
  881: 
  882: @pytest.mark.parametrize("selection", ("b", ["b"], ["b", "c"]))
  883: @pytest.mark.parametrize("dropna", ["any", "all", None])
  884: def test_nth_after_selection(selection, dropna):
  885:     # GH#11038, GH#53518
  886:     df = DataFrame(
  887:         {
  888:             "a": [1, 1, 2],
  889:             "b": [np.nan, 3, 4],
  890:             "c": [5, 6, 7],
  891:         }
  892:     )
  893:     gb = df.groupby("a")[selection]
  894:     result = gb.nth(0, dropna=dropna)
  895:     if dropna == "any" or (dropna == "all" and selection != ["b", "c"]):
  896:         locs = [1, 2]
  897:     else:
  898:         locs = [0, 2]
  899:     expected = df.loc[locs, selection]
  900:     tm.assert_equal(result, expected)
  901: 
  902: 
  903: @pytest.mark.parametrize(
  904:     "data",
  905:     [
  906:         (
  907:             Timestamp("2011-01-15 12:50:28.502376"),
  908:             Timestamp("2011-01-20 12:50:28.593448"),
  909:         ),
  910:         (24650000000000001, 24650000000000002),
  911:     ],
  912: )
  913: def test_groupby_nth_int_like_precision(data):
  914:     # GH#6620, GH#9311
  915:     df = DataFrame({"a": [1, 1], "b": data})
  916: 
  917:     grouped = df.groupby("a")
  918:     result = grouped.nth(0)
  919:     expected = DataFrame({"a": 1, "b": [data[0]]})
  920: 
  921:     tm.assert_frame_equal(result, expected)
