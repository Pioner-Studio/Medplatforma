    1: import pytest
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Index,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: @pytest.mark.parametrize("n, frac", [(2, None), (None, 0.2)])
   12: def test_groupby_sample_balanced_groups_shape(n, frac):
   13:     values = [1] * 10 + [2] * 10
   14:     df = DataFrame({"a": values, "b": values})
   15: 
   16:     result = df.groupby("a").sample(n=n, frac=frac)
   17:     values = [1] * 2 + [2] * 2
   18:     expected = DataFrame({"a": values, "b": values}, index=result.index)
   19:     tm.assert_frame_equal(result, expected)
   20: 
   21:     result = df.groupby("a")["b"].sample(n=n, frac=frac)
   22:     expected = Series(values, name="b", index=result.index)
   23:     tm.assert_series_equal(result, expected)
   24: 
   25: 
   26: def test_groupby_sample_unbalanced_groups_shape():
   27:     values = [1] * 10 + [2] * 20
   28:     df = DataFrame({"a": values, "b": values})
   29: 
   30:     result = df.groupby("a").sample(n=5)
   31:     values = [1] * 5 + [2] * 5
   32:     expected = DataFrame({"a": values, "b": values}, index=result.index)
   33:     tm.assert_frame_equal(result, expected)
   34: 
   35:     result = df.groupby("a")["b"].sample(n=5)
   36:     expected = Series(values, name="b", index=result.index)
   37:     tm.assert_series_equal(result, expected)
   38: 
   39: 
   40: def test_groupby_sample_index_value_spans_groups():
   41:     values = [1] * 3 + [2] * 3
   42:     df = DataFrame({"a": values, "b": values}, index=[1, 2, 2, 2, 2, 2])
   43: 
   44:     result = df.groupby("a").sample(n=2)
   45:     values = [1] * 2 + [2] * 2
   46:     expected = DataFrame({"a": values, "b": values}, index=result.index)
   47:     tm.assert_frame_equal(result, expected)
   48: 
   49:     result = df.groupby("a")["b"].sample(n=2)
   50:     expected = Series(values, name="b", index=result.index)
   51:     tm.assert_series_equal(result, expected)
   52: 
   53: 
   54: def test_groupby_sample_n_and_frac_raises():
   55:     df = DataFrame({"a": [1, 2], "b": [1, 2]})
   56:     msg = "Please enter a value for `frac` OR `n`, not both"
   57: 
   58:     with pytest.raises(ValueError, match=msg):
   59:         df.groupby("a").sample(n=1, frac=1.0)
   60: 
   61:     with pytest.raises(ValueError, match=msg):
   62:         df.groupby("a")["b"].sample(n=1, frac=1.0)
   63: 
   64: 
   65: def test_groupby_sample_frac_gt_one_without_replacement_raises():
   66:     df = DataFrame({"a": [1, 2], "b": [1, 2]})
   67:     msg = "Replace has to be set to `True` when upsampling the population `frac` > 1."
   68: 
   69:     with pytest.raises(ValueError, match=msg):
   70:         df.groupby("a").sample(frac=1.5, replace=False)
   71: 
   72:     with pytest.raises(ValueError, match=msg):
   73:         df.groupby("a")["b"].sample(frac=1.5, replace=False)
   74: 
   75: 
   76: @pytest.mark.parametrize("n", [-1, 1.5])
   77: def test_groupby_sample_invalid_n_raises(n):
   78:     df = DataFrame({"a": [1, 2], "b": [1, 2]})
   79: 
   80:     if n < 0:
   81:         msg = "A negative number of rows requested. Please provide `n` >= 0."
   82:     else:
   83:         msg = "Only integers accepted as `n` values"
   84: 
   85:     with pytest.raises(ValueError, match=msg):
   86:         df.groupby("a").sample(n=n)
   87: 
   88:     with pytest.raises(ValueError, match=msg):
   89:         df.groupby("a")["b"].sample(n=n)
   90: 
   91: 
   92: def test_groupby_sample_oversample():
   93:     values = [1] * 10 + [2] * 10
   94:     df = DataFrame({"a": values, "b": values})
   95: 
   96:     result = df.groupby("a").sample(frac=2.0, replace=True)
   97:     values = [1] * 20 + [2] * 20
   98:     expected = DataFrame({"a": values, "b": values}, index=result.index)
   99:     tm.assert_frame_equal(result, expected)
  100: 
  101:     result = df.groupby("a")["b"].sample(frac=2.0, replace=True)
  102:     expected = Series(values, name="b", index=result.index)
  103:     tm.assert_series_equal(result, expected)
  104: 
  105: 
  106: def test_groupby_sample_without_n_or_frac():
  107:     values = [1] * 10 + [2] * 10
  108:     df = DataFrame({"a": values, "b": values})
  109: 
  110:     result = df.groupby("a").sample(n=None, frac=None)
  111:     expected = DataFrame({"a": [1, 2], "b": [1, 2]}, index=result.index)
  112:     tm.assert_frame_equal(result, expected)
  113: 
  114:     result = df.groupby("a")["b"].sample(n=None, frac=None)
  115:     expected = Series([1, 2], name="b", index=result.index)
  116:     tm.assert_series_equal(result, expected)
  117: 
  118: 
  119: @pytest.mark.parametrize(
  120:     "index, expected_index",
  121:     [(["w", "x", "y", "z"], ["w", "w", "y", "y"]), ([3, 4, 5, 6], [3, 3, 5, 5])],
  122: )
  123: def test_groupby_sample_with_weights(index, expected_index):
  124:     # GH 39927 - tests for integer index needed
  125:     values = [1] * 2 + [2] * 2
  126:     df = DataFrame({"a": values, "b": values}, index=Index(index))
  127: 
  128:     result = df.groupby("a").sample(n=2, replace=True, weights=[1, 0, 1, 0])
  129:     expected = DataFrame({"a": values, "b": values}, index=Index(expected_index))
  130:     tm.assert_frame_equal(result, expected)
  131: 
  132:     result = df.groupby("a")["b"].sample(n=2, replace=True, weights=[1, 0, 1, 0])
  133:     expected = Series(values, name="b", index=Index(expected_index))
  134:     tm.assert_series_equal(result, expected)
  135: 
  136: 
  137: def test_groupby_sample_with_selections():
  138:     # GH 39928
  139:     values = [1] * 10 + [2] * 10
  140:     df = DataFrame({"a": values, "b": values, "c": values})
  141: 
  142:     result = df.groupby("a")[["b", "c"]].sample(n=None, frac=None)
  143:     expected = DataFrame({"b": [1, 2], "c": [1, 2]}, index=result.index)
  144:     tm.assert_frame_equal(result, expected)
  145: 
  146: 
  147: def test_groupby_sample_with_empty_inputs():
  148:     # GH48459
  149:     df = DataFrame({"a": [], "b": []})
  150:     groupby_df = df.groupby("a")
  151: 
  152:     result = groupby_df.sample()
  153:     expected = df
  154:     tm.assert_frame_equal(result, expected)
