    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: @pytest.fixture(params=[["inner"], ["inner", "outer"]])
    9: def frame(request):
   10:     levels = request.param
   11:     df = pd.DataFrame(
   12:         {
   13:             "outer": ["a", "a", "a", "b", "b", "b"],
   14:             "inner": [1, 2, 3, 1, 2, 3],
   15:             "A": np.arange(6),
   16:             "B": ["one", "one", "two", "two", "one", "one"],
   17:         }
   18:     )
   19:     if levels:
   20:         df = df.set_index(levels)
   21: 
   22:     return df
   23: 
   24: 
   25: @pytest.fixture()
   26: def series():
   27:     df = pd.DataFrame(
   28:         {
   29:             "outer": ["a", "a", "a", "b", "b", "b"],
   30:             "inner": [1, 2, 3, 1, 2, 3],
   31:             "A": np.arange(6),
   32:             "B": ["one", "one", "two", "two", "one", "one"],
   33:         }
   34:     )
   35:     s = df.set_index(["outer", "inner", "B"])["A"]
   36: 
   37:     return s
   38: 
   39: 
   40: @pytest.mark.parametrize(
   41:     "key_strs,groupers",
   42:     [
   43:         ("inner", pd.Grouper(level="inner")),  # Index name
   44:         (["inner"], [pd.Grouper(level="inner")]),  # List of index name
   45:         (["B", "inner"], ["B", pd.Grouper(level="inner")]),  # Column and index
   46:         (["inner", "B"], [pd.Grouper(level="inner"), "B"]),  # Index and column
   47:     ],
   48: )
   49: def test_grouper_index_level_as_string(frame, key_strs, groupers):
   50:     if "B" not in key_strs or "outer" in frame.columns:
   51:         result = frame.groupby(key_strs).mean(numeric_only=True)
   52:         expected = frame.groupby(groupers).mean(numeric_only=True)
   53:     else:
   54:         result = frame.groupby(key_strs).mean()
   55:         expected = frame.groupby(groupers).mean()
   56:     tm.assert_frame_equal(result, expected)
   57: 
   58: 
   59: @pytest.mark.parametrize(
   60:     "levels",
   61:     [
   62:         "inner",
   63:         "outer",
   64:         "B",
   65:         ["inner"],
   66:         ["outer"],
   67:         ["B"],
   68:         ["inner", "outer"],
   69:         ["outer", "inner"],
   70:         ["inner", "outer", "B"],
   71:         ["B", "outer", "inner"],
   72:     ],
   73: )
   74: def test_grouper_index_level_as_string_series(series, levels):
   75:     # Compute expected result
   76:     if isinstance(levels, list):
   77:         groupers = [pd.Grouper(level=lv) for lv in levels]
   78:     else:
   79:         groupers = pd.Grouper(level=levels)
   80: 
   81:     expected = series.groupby(groupers).mean()
   82: 
   83:     # Compute and check result
   84:     result = series.groupby(levels).mean()
   85:     tm.assert_series_equal(result, expected)
