    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     Index,
    9:     Series,
   10: )
   11: import pandas._testing as tm
   12: from pandas.tests.groupby import get_groupby_method_args
   13: 
   14: pytestmark = pytest.mark.filterwarnings(
   15:     "ignore:Passing a BlockManager|Passing a SingleBlockManager:DeprecationWarning"
   16: )
   17: 
   18: 
   19: @pytest.mark.parametrize(
   20:     "obj",
   21:     [
   22:         tm.SubclassedDataFrame({"A": np.arange(0, 10)}),
   23:         tm.SubclassedSeries(np.arange(0, 10), name="A"),
   24:     ],
   25: )
   26: def test_groupby_preserves_subclass(obj, groupby_func):
   27:     # GH28330 -- preserve subclass through groupby operations
   28: 
   29:     if isinstance(obj, Series) and groupby_func in {"corrwith"}:
   30:         pytest.skip(f"Not applicable for Series and {groupby_func}")
   31: 
   32:     grouped = obj.groupby(np.arange(0, 10))
   33: 
   34:     # Groups should preserve subclass type
   35:     assert isinstance(grouped.get_group(0), type(obj))
   36: 
   37:     args = get_groupby_method_args(groupby_func, obj)
   38: 
   39:     warn = FutureWarning if groupby_func == "fillna" else None
   40:     msg = f"{type(grouped).__name__}.fillna is deprecated"
   41:     with tm.assert_produces_warning(warn, match=msg, raise_on_extra_warnings=False):
   42:         result1 = getattr(grouped, groupby_func)(*args)
   43:     with tm.assert_produces_warning(warn, match=msg, raise_on_extra_warnings=False):
   44:         result2 = grouped.agg(groupby_func, *args)
   45: 
   46:     # Reduction or transformation kernels should preserve type
   47:     slices = {"ngroup", "cumcount", "size"}
   48:     if isinstance(obj, DataFrame) and groupby_func in slices:
   49:         assert isinstance(result1, tm.SubclassedSeries)
   50:     else:
   51:         assert isinstance(result1, type(obj))
   52: 
   53:     # Confirm .agg() groupby operations return same results
   54:     if isinstance(result1, DataFrame):
   55:         tm.assert_frame_equal(result1, result2)
   56:     else:
   57:         tm.assert_series_equal(result1, result2)
   58: 
   59: 
   60: def test_groupby_preserves_metadata():
   61:     # GH-37343
   62:     custom_df = tm.SubclassedDataFrame({"a": [1, 2, 3], "b": [1, 1, 2], "c": [7, 8, 9]})
   63:     assert "testattr" in custom_df._metadata
   64:     custom_df.testattr = "hello"
   65:     for _, group_df in custom_df.groupby("c"):
   66:         assert group_df.testattr == "hello"
   67: 
   68:     # GH-45314
   69:     def func(group):
   70:         assert isinstance(group, tm.SubclassedDataFrame)
   71:         assert hasattr(group, "testattr")
   72:         assert group.testattr == "hello"
   73:         return group.testattr
   74: 
   75:     msg = "DataFrameGroupBy.apply operated on the grouping columns"
   76:     with tm.assert_produces_warning(
   77:         DeprecationWarning,
   78:         match=msg,
   79:         raise_on_extra_warnings=False,
   80:         check_stacklevel=False,
   81:     ):
   82:         result = custom_df.groupby("c").apply(func)
   83:     expected = tm.SubclassedSeries(["hello"] * 3, index=Index([7, 8, 9], name="c"))
   84:     tm.assert_series_equal(result, expected)
   85: 
   86:     result = custom_df.groupby("c").apply(func, include_groups=False)
   87:     tm.assert_series_equal(result, expected)
   88: 
   89:     # https://github.com/pandas-dev/pandas/pull/56761
   90:     result = custom_df.groupby("c")[["a", "b"]].apply(func)
   91:     tm.assert_series_equal(result, expected)
   92: 
   93:     def func2(group):
   94:         assert isinstance(group, tm.SubclassedSeries)
   95:         assert hasattr(group, "testattr")
   96:         return group.testattr
   97: 
   98:     custom_series = tm.SubclassedSeries([1, 2, 3])
   99:     custom_series.testattr = "hello"
  100:     result = custom_series.groupby(custom_df["c"]).apply(func2)
  101:     tm.assert_series_equal(result, expected)
  102:     result = custom_series.groupby(custom_df["c"]).agg(func2)
  103:     tm.assert_series_equal(result, expected)
  104: 
  105: 
  106: @pytest.mark.parametrize("obj", [DataFrame, tm.SubclassedDataFrame])
  107: def test_groupby_resample_preserves_subclass(obj):
  108:     # GH28330 -- preserve subclass through groupby.resample()
  109: 
  110:     df = obj(
  111:         {
  112:             "Buyer": "Carl Carl Carl Carl Joe Carl".split(),
  113:             "Quantity": [18, 3, 5, 1, 9, 3],
  114:             "Date": [
  115:                 datetime(2013, 9, 1, 13, 0),
  116:                 datetime(2013, 9, 1, 13, 5),
  117:                 datetime(2013, 10, 1, 20, 0),
  118:                 datetime(2013, 10, 3, 10, 0),
  119:                 datetime(2013, 12, 2, 12, 0),
  120:                 datetime(2013, 9, 2, 14, 0),
  121:             ],
  122:         }
  123:     )
  124:     df = df.set_index("Date")
  125: 
  126:     # Confirm groupby.resample() preserves dataframe type
  127:     msg = "DataFrameGroupBy.resample operated on the grouping columns"
  128:     with tm.assert_produces_warning(
  129:         DeprecationWarning,
  130:         match=msg,
  131:         raise_on_extra_warnings=False,
  132:         check_stacklevel=False,
  133:     ):
  134:         result = df.groupby("Buyer").resample("5D").sum()
  135:     assert isinstance(result, obj)
