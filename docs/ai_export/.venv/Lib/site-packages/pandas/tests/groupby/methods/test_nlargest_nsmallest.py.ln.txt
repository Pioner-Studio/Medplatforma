    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     MultiIndex,
    6:     Series,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def test_nlargest():
   13:     a = Series([1, 3, 5, 7, 2, 9, 0, 4, 6, 10])
   14:     b = Series(list("a" * 5 + "b" * 5))
   15:     gb = a.groupby(b)
   16:     r = gb.nlargest(3)
   17:     e = Series(
   18:         [7, 5, 3, 10, 9, 6],
   19:         index=MultiIndex.from_arrays([list("aaabbb"), [3, 2, 1, 9, 5, 8]]),
   20:     )
   21:     tm.assert_series_equal(r, e)
   22: 
   23:     a = Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])
   24:     gb = a.groupby(b)
   25:     e = Series(
   26:         [3, 2, 1, 3, 3, 2],
   27:         index=MultiIndex.from_arrays([list("aaabbb"), [2, 3, 1, 6, 5, 7]]),
   28:     )
   29:     tm.assert_series_equal(gb.nlargest(3, keep="last"), e)
   30: 
   31: 
   32: def test_nlargest_mi_grouper():
   33:     # see gh-21411
   34:     npr = np.random.default_rng(2)
   35: 
   36:     dts = date_range("20180101", periods=10)
   37:     iterables = [dts, ["one", "two"]]
   38: 
   39:     idx = MultiIndex.from_product(iterables, names=["first", "second"])
   40:     s = Series(npr.standard_normal(20), index=idx)
   41: 
   42:     result = s.groupby("first").nlargest(1)
   43: 
   44:     exp_idx = MultiIndex.from_tuples(
   45:         [
   46:             (dts[0], dts[0], "one"),
   47:             (dts[1], dts[1], "one"),
   48:             (dts[2], dts[2], "one"),
   49:             (dts[3], dts[3], "two"),
   50:             (dts[4], dts[4], "one"),
   51:             (dts[5], dts[5], "one"),
   52:             (dts[6], dts[6], "one"),
   53:             (dts[7], dts[7], "one"),
   54:             (dts[8], dts[8], "one"),
   55:             (dts[9], dts[9], "one"),
   56:         ],
   57:         names=["first", "first", "second"],
   58:     )
   59: 
   60:     exp_values = [
   61:         0.18905338179353307,
   62:         -0.41306354339189344,
   63:         1.799707382720902,
   64:         0.7738065867276614,
   65:         0.28121066979764925,
   66:         0.9775674511260357,
   67:         -0.3288239040579627,
   68:         0.45495807124085547,
   69:         0.5452887139646817,
   70:         0.12682784711186987,
   71:     ]
   72: 
   73:     expected = Series(exp_values, index=exp_idx)
   74:     tm.assert_series_equal(result, expected, check_exact=False, rtol=1e-3)
   75: 
   76: 
   77: def test_nsmallest():
   78:     a = Series([1, 3, 5, 7, 2, 9, 0, 4, 6, 10])
   79:     b = Series(list("a" * 5 + "b" * 5))
   80:     gb = a.groupby(b)
   81:     r = gb.nsmallest(3)
   82:     e = Series(
   83:         [1, 2, 3, 0, 4, 6],
   84:         index=MultiIndex.from_arrays([list("aaabbb"), [0, 4, 1, 6, 7, 8]]),
   85:     )
   86:     tm.assert_series_equal(r, e)
   87: 
   88:     a = Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])
   89:     gb = a.groupby(b)
   90:     e = Series(
   91:         [0, 1, 1, 0, 1, 2],
   92:         index=MultiIndex.from_arrays([list("aaabbb"), [4, 1, 0, 9, 8, 7]]),
   93:     )
   94:     tm.assert_series_equal(gb.nsmallest(3, keep="last"), e)
   95: 
   96: 
   97: @pytest.mark.parametrize(
   98:     "data, groups",
   99:     [([0, 1, 2, 3], [0, 0, 1, 1]), ([0], [0])],
  100: )
  101: @pytest.mark.parametrize("dtype", [None, *tm.ALL_INT_NUMPY_DTYPES])
  102: @pytest.mark.parametrize("method", ["nlargest", "nsmallest"])
  103: def test_nlargest_and_smallest_noop(data, groups, dtype, method):
  104:     # GH 15272, GH 16345, GH 29129
  105:     # Test nlargest/smallest when it results in a noop,
  106:     # i.e. input is sorted and group size <= n
  107:     if dtype is not None:
  108:         data = np.array(data, dtype=dtype)
  109:     if method == "nlargest":
  110:         data = list(reversed(data))
  111:     ser = Series(data, name="a")
  112:     result = getattr(ser.groupby(groups), method)(n=2)
  113:     expidx = np.array(groups, dtype=int) if isinstance(groups, list) else groups
  114:     expected = Series(data, index=MultiIndex.from_arrays([expidx, ser.index]), name="a")
  115:     tm.assert_series_equal(result, expected)
