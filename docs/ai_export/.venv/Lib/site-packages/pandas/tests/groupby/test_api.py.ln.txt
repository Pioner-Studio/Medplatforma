    1: """
    2: Tests of the groupby API, including internal consistency and with other pandas objects.
    3: 
    4: Tests in this file should only check the existence, names, and arguments of groupby
    5: methods. It should not test the results of any groupby operation.
    6: """
    7: 
    8: import inspect
    9: 
   10: import pytest
   11: 
   12: from pandas import (
   13:     DataFrame,
   14:     Series,
   15: )
   16: from pandas.core.groupby.base import (
   17:     groupby_other_methods,
   18:     reduction_kernels,
   19:     transformation_kernels,
   20: )
   21: from pandas.core.groupby.generic import (
   22:     DataFrameGroupBy,
   23:     SeriesGroupBy,
   24: )
   25: 
   26: 
   27: def test_tab_completion(multiindex_dataframe_random_data):
   28:     grp = multiindex_dataframe_random_data.groupby(level="second")
   29:     results = {v for v in dir(grp) if not v.startswith("_")}
   30:     expected = {
   31:         "A",
   32:         "B",
   33:         "C",
   34:         "agg",
   35:         "aggregate",
   36:         "apply",
   37:         "boxplot",
   38:         "filter",
   39:         "first",
   40:         "get_group",
   41:         "groups",
   42:         "hist",
   43:         "indices",
   44:         "last",
   45:         "max",
   46:         "mean",
   47:         "median",
   48:         "min",
   49:         "ngroups",
   50:         "nth",
   51:         "ohlc",
   52:         "plot",
   53:         "prod",
   54:         "size",
   55:         "std",
   56:         "sum",
   57:         "transform",
   58:         "var",
   59:         "sem",
   60:         "count",
   61:         "nunique",
   62:         "head",
   63:         "describe",
   64:         "cummax",
   65:         "quantile",
   66:         "rank",
   67:         "cumprod",
   68:         "tail",
   69:         "resample",
   70:         "cummin",
   71:         "fillna",
   72:         "cumsum",
   73:         "cumcount",
   74:         "ngroup",
   75:         "all",
   76:         "shift",
   77:         "skew",
   78:         "take",
   79:         "pct_change",
   80:         "any",
   81:         "corr",
   82:         "corrwith",
   83:         "cov",
   84:         "dtypes",
   85:         "ndim",
   86:         "diff",
   87:         "idxmax",
   88:         "idxmin",
   89:         "ffill",
   90:         "bfill",
   91:         "rolling",
   92:         "expanding",
   93:         "pipe",
   94:         "sample",
   95:         "ewm",
   96:         "value_counts",
   97:     }
   98:     assert results == expected
   99: 
  100: 
  101: def test_all_methods_categorized(multiindex_dataframe_random_data):
  102:     grp = multiindex_dataframe_random_data.groupby(
  103:         multiindex_dataframe_random_data.iloc[:, 0]
  104:     )
  105:     names = {_ for _ in dir(grp) if not _.startswith("_")} - set(
  106:         multiindex_dataframe_random_data.columns
  107:     )
  108:     new_names = set(names)
  109:     new_names -= reduction_kernels
  110:     new_names -= transformation_kernels
  111:     new_names -= groupby_other_methods
  112: 
  113:     assert not reduction_kernels & transformation_kernels
  114:     assert not reduction_kernels & groupby_other_methods
  115:     assert not transformation_kernels & groupby_other_methods
  116: 
  117:     # new public method?
  118:     if new_names:
  119:         msg = f"""
  120: There are uncategorized methods defined on the Grouper class:
  121: {new_names}.
  122: 
  123: Was a new method recently added?
  124: 
  125: Every public method On Grouper must appear in exactly one the
  126: following three lists defined in pandas.core.groupby.base:
  127: - `reduction_kernels`
  128: - `transformation_kernels`
  129: - `groupby_other_methods`
  130: see the comments in pandas/core/groupby/base.py for guidance on
  131: how to fix this test.
  132:         """
  133:         raise AssertionError(msg)
  134: 
  135:     # removed a public method?
  136:     all_categorized = reduction_kernels | transformation_kernels | groupby_other_methods
  137:     if names != all_categorized:
  138:         msg = f"""
  139: Some methods which are supposed to be on the Grouper class
  140: are missing:
  141: {all_categorized - names}.
  142: 
  143: They're still defined in one of the lists that live in pandas/core/groupby/base.py.
  144: If you removed a method, you should update them
  145: """
  146:         raise AssertionError(msg)
  147: 
  148: 
  149: def test_frame_consistency(groupby_func):
  150:     # GH#48028
  151:     if groupby_func in ("first", "last"):
  152:         msg = "first and last are entirely different between frame and groupby"
  153:         pytest.skip(reason=msg)
  154: 
  155:     if groupby_func in ("cumcount", "ngroup"):
  156:         assert not hasattr(DataFrame, groupby_func)
  157:         return
  158: 
  159:     frame_method = getattr(DataFrame, groupby_func)
  160:     gb_method = getattr(DataFrameGroupBy, groupby_func)
  161:     result = set(inspect.signature(gb_method).parameters)
  162:     if groupby_func == "size":
  163:         # "size" is a method on GroupBy but property on DataFrame:
  164:         expected = {"self"}
  165:     else:
  166:         expected = set(inspect.signature(frame_method).parameters)
  167: 
  168:     # Exclude certain arguments from result and expected depending on the operation
  169:     # Some of these may be purposeful inconsistencies between the APIs
  170:     exclude_expected, exclude_result = set(), set()
  171:     if groupby_func in ("any", "all"):
  172:         exclude_expected = {"kwargs", "bool_only", "axis"}
  173:     elif groupby_func in ("count",):
  174:         exclude_expected = {"numeric_only", "axis"}
  175:     elif groupby_func in ("nunique",):
  176:         exclude_expected = {"axis"}
  177:     elif groupby_func in ("max", "min"):
  178:         exclude_expected = {"axis", "kwargs", "skipna"}
  179:         exclude_result = {"min_count", "engine", "engine_kwargs"}
  180:     elif groupby_func in ("mean", "std", "sum", "var"):
  181:         exclude_expected = {"axis", "kwargs", "skipna"}
  182:         exclude_result = {"engine", "engine_kwargs"}
  183:     elif groupby_func in ("median", "prod", "sem"):
  184:         exclude_expected = {"axis", "kwargs", "skipna"}
  185:     elif groupby_func in ("backfill", "bfill", "ffill", "pad"):
  186:         exclude_expected = {"downcast", "inplace", "axis", "limit_area"}
  187:     elif groupby_func in ("cummax", "cummin"):
  188:         exclude_expected = {"skipna", "args"}
  189:         exclude_result = {"numeric_only"}
  190:     elif groupby_func in ("cumprod", "cumsum"):
  191:         exclude_expected = {"skipna"}
  192:     elif groupby_func in ("pct_change",):
  193:         exclude_expected = {"kwargs"}
  194:         exclude_result = {"axis"}
  195:     elif groupby_func in ("rank",):
  196:         exclude_expected = {"numeric_only"}
  197:     elif groupby_func in ("quantile",):
  198:         exclude_expected = {"method", "axis"}
  199: 
  200:     # Ensure excluded arguments are actually in the signatures
  201:     assert result & exclude_result == exclude_result
  202:     assert expected & exclude_expected == exclude_expected
  203: 
  204:     result -= exclude_result
  205:     expected -= exclude_expected
  206:     assert result == expected
  207: 
  208: 
  209: def test_series_consistency(request, groupby_func):
  210:     # GH#48028
  211:     if groupby_func in ("first", "last"):
  212:         pytest.skip("first and last are entirely different between Series and groupby")
  213: 
  214:     if groupby_func in ("cumcount", "corrwith", "ngroup"):
  215:         assert not hasattr(Series, groupby_func)
  216:         return
  217: 
  218:     series_method = getattr(Series, groupby_func)
  219:     gb_method = getattr(SeriesGroupBy, groupby_func)
  220:     result = set(inspect.signature(gb_method).parameters)
  221:     if groupby_func == "size":
  222:         # "size" is a method on GroupBy but property on Series
  223:         expected = {"self"}
  224:     else:
  225:         expected = set(inspect.signature(series_method).parameters)
  226: 
  227:     # Exclude certain arguments from result and expected depending on the operation
  228:     # Some of these may be purposeful inconsistencies between the APIs
  229:     exclude_expected, exclude_result = set(), set()
  230:     if groupby_func in ("any", "all"):
  231:         exclude_expected = {"kwargs", "bool_only", "axis"}
  232:     elif groupby_func in ("diff",):
  233:         exclude_result = {"axis"}
  234:     elif groupby_func in ("max", "min"):
  235:         exclude_expected = {"axis", "kwargs", "skipna"}
  236:         exclude_result = {"min_count", "engine", "engine_kwargs"}
  237:     elif groupby_func in ("mean", "std", "sum", "var"):
  238:         exclude_expected = {"axis", "kwargs", "skipna"}
  239:         exclude_result = {"engine", "engine_kwargs"}
  240:     elif groupby_func in ("median", "prod", "sem"):
  241:         exclude_expected = {"axis", "kwargs", "skipna"}
  242:     elif groupby_func in ("backfill", "bfill", "ffill", "pad"):
  243:         exclude_expected = {"downcast", "inplace", "axis", "limit_area"}
  244:     elif groupby_func in ("cummax", "cummin"):
  245:         exclude_expected = {"skipna", "args"}
  246:         exclude_result = {"numeric_only"}
  247:     elif groupby_func in ("cumprod", "cumsum"):
  248:         exclude_expected = {"skipna"}
  249:     elif groupby_func in ("pct_change",):
  250:         exclude_expected = {"kwargs"}
  251:         exclude_result = {"axis"}
  252:     elif groupby_func in ("rank",):
  253:         exclude_expected = {"numeric_only"}
  254:     elif groupby_func in ("idxmin", "idxmax"):
  255:         exclude_expected = {"args", "kwargs"}
  256:     elif groupby_func in ("quantile",):
  257:         exclude_result = {"numeric_only"}
  258: 
  259:     # Ensure excluded arguments are actually in the signatures
  260:     assert result & exclude_result == exclude_result
  261:     assert expected & exclude_expected == exclude_expected
  262: 
  263:     result -= exclude_result
  264:     expected -= exclude_expected
  265:     assert result == expected
