    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs import lib
    5: import pandas.util._test_decorators as td
    6: 
    7: import pandas as pd
    8: import pandas._testing as tm
    9: 
   10: 
   11: def assert_block_lengths(x):
   12:     assert len(x) == len(x._mgr.blocks[0].mgr_locs)
   13:     return 0
   14: 
   15: 
   16: def cumsum_max(x):
   17:     x.cumsum().max()
   18:     return 0
   19: 
   20: 
   21: @pytest.mark.parametrize(
   22:     "func",
   23:     [
   24:         cumsum_max,
   25:         pytest.param(assert_block_lengths, marks=td.skip_array_manager_invalid_test),
   26:     ],
   27: )
   28: def test_mgr_locs_updated(func):
   29:     # https://github.com/pandas-dev/pandas/issues/31802
   30:     # Some operations may require creating new blocks, which requires
   31:     # valid mgr_locs
   32:     df = pd.DataFrame({"A": ["a", "a", "a"], "B": ["a", "b", "b"], "C": [1, 1, 1]})
   33:     result = df.groupby(["A", "B"]).agg(func)
   34:     expected = pd.DataFrame(
   35:         {"C": [0, 0]},
   36:         index=pd.MultiIndex.from_product([["a"], ["a", "b"]], names=["A", "B"]),
   37:     )
   38:     tm.assert_frame_equal(result, expected)
   39: 
   40: 
   41: @pytest.mark.parametrize(
   42:     "binner,closed,expected",
   43:     [
   44:         (
   45:             np.array([0, 3, 6, 9], dtype=np.int64),
   46:             "left",
   47:             np.array([2, 5, 6], dtype=np.int64),
   48:         ),
   49:         (
   50:             np.array([0, 3, 6, 9], dtype=np.int64),
   51:             "right",
   52:             np.array([3, 6, 6], dtype=np.int64),
   53:         ),
   54:         (np.array([0, 3, 6], dtype=np.int64), "left", np.array([2, 5], dtype=np.int64)),
   55:         (
   56:             np.array([0, 3, 6], dtype=np.int64),
   57:             "right",
   58:             np.array([3, 6], dtype=np.int64),
   59:         ),
   60:     ],
   61: )
   62: def test_generate_bins(binner, closed, expected):
   63:     values = np.array([1, 2, 3, 4, 5, 6], dtype=np.int64)
   64:     result = lib.generate_bins_dt64(values, binner, closed=closed)
   65:     tm.assert_numpy_array_equal(result, expected)
