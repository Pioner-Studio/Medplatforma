    1: """
    2: Tests that apply to all groupby operation methods.
    3: 
    4: The only tests that should appear here are those that use the `groupby_func` fixture.
    5: Even if it does use that fixture, prefer a more specific test file if it available
    6: such as:
    7: 
    8:  - test_categorical
    9:  - test_groupby_dropna
   10:  - test_groupby_subclass
   11:  - test_raises
   12: """
   13: 
   14: import pytest
   15: 
   16: import pandas as pd
   17: from pandas import DataFrame
   18: import pandas._testing as tm
   19: from pandas.tests.groupby import get_groupby_method_args
   20: 
   21: 
   22: def test_multiindex_group_all_columns_when_empty(groupby_func):
   23:     # GH 32464
   24:     df = DataFrame({"a": [], "b": [], "c": []}).set_index(["a", "b", "c"])
   25:     gb = df.groupby(["a", "b", "c"], group_keys=False)
   26:     method = getattr(gb, groupby_func)
   27:     args = get_groupby_method_args(groupby_func, df)
   28: 
   29:     warn = FutureWarning if groupby_func == "fillna" else None
   30:     warn_msg = "DataFrameGroupBy.fillna is deprecated"
   31:     with tm.assert_produces_warning(warn, match=warn_msg):
   32:         result = method(*args).index
   33:     expected = df.index
   34:     tm.assert_index_equal(result, expected)
   35: 
   36: 
   37: def test_duplicate_columns(request, groupby_func, as_index):
   38:     # GH#50806
   39:     if groupby_func == "corrwith":
   40:         msg = "GH#50845 - corrwith fails when there are duplicate columns"
   41:         request.applymarker(pytest.mark.xfail(reason=msg))
   42:     df = DataFrame([[1, 3, 6], [1, 4, 7], [2, 5, 8]], columns=list("abb"))
   43:     args = get_groupby_method_args(groupby_func, df)
   44:     gb = df.groupby("a", as_index=as_index)
   45:     warn = FutureWarning if groupby_func == "fillna" else None
   46:     warn_msg = "DataFrameGroupBy.fillna is deprecated"
   47:     with tm.assert_produces_warning(warn, match=warn_msg):
   48:         result = getattr(gb, groupby_func)(*args)
   49: 
   50:     expected_df = df.set_axis(["a", "b", "c"], axis=1)
   51:     expected_args = get_groupby_method_args(groupby_func, expected_df)
   52:     expected_gb = expected_df.groupby("a", as_index=as_index)
   53:     warn = FutureWarning if groupby_func == "fillna" else None
   54:     warn_msg = "DataFrameGroupBy.fillna is deprecated"
   55:     with tm.assert_produces_warning(warn, match=warn_msg):
   56:         expected = getattr(expected_gb, groupby_func)(*expected_args)
   57:     if groupby_func not in ("size", "ngroup", "cumcount"):
   58:         expected = expected.rename(columns={"c": "b"})
   59:     tm.assert_equal(result, expected)
   60: 
   61: 
   62: @pytest.mark.parametrize(
   63:     "idx",
   64:     [
   65:         pd.Index(["a", "a"], name="foo"),
   66:         pd.MultiIndex.from_tuples((("a", "a"), ("a", "a")), names=["foo", "bar"]),
   67:     ],
   68: )
   69: def test_dup_labels_output_shape(groupby_func, idx):
   70:     if groupby_func in {"size", "ngroup", "cumcount"}:
   71:         pytest.skip(f"Not applicable for {groupby_func}")
   72: 
   73:     df = DataFrame([[1, 1]], columns=idx)
   74:     grp_by = df.groupby([0])
   75: 
   76:     args = get_groupby_method_args(groupby_func, df)
   77:     warn = FutureWarning if groupby_func == "fillna" else None
   78:     warn_msg = "DataFrameGroupBy.fillna is deprecated"
   79:     with tm.assert_produces_warning(warn, match=warn_msg):
   80:         result = getattr(grp_by, groupby_func)(*args)
   81: 
   82:     assert result.shape == (1, 2)
   83:     tm.assert_index_equal(result.columns, idx)
