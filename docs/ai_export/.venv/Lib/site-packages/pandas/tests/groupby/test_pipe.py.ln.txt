    1: import numpy as np
    2: 
    3: import pandas as pd
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: def test_pipe():
   12:     # Test the pipe method of DataFrameGroupBy.
   13:     # Issue #17871
   14: 
   15:     random_state = np.random.default_rng(2)
   16: 
   17:     df = DataFrame(
   18:         {
   19:             "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],
   20:             "B": random_state.standard_normal(8),
   21:             "C": random_state.standard_normal(8),
   22:         }
   23:     )
   24: 
   25:     def f(dfgb):
   26:         return dfgb.B.max() - dfgb.C.min().min()
   27: 
   28:     def square(srs):
   29:         return srs**2
   30: 
   31:     # Note that the transformations are
   32:     # GroupBy -> Series
   33:     # Series -> Series
   34:     # This then chains the GroupBy.pipe and the
   35:     # NDFrame.pipe methods
   36:     result = df.groupby("A").pipe(f).pipe(square)
   37: 
   38:     index = Index(["bar", "foo"], dtype="object", name="A")
   39:     expected = pd.Series([3.749306591013693, 6.717707873081384], name="B", index=index)
   40: 
   41:     tm.assert_series_equal(expected, result)
   42: 
   43: 
   44: def test_pipe_args():
   45:     # Test passing args to the pipe method of DataFrameGroupBy.
   46:     # Issue #17871
   47: 
   48:     df = DataFrame(
   49:         {
   50:             "group": ["A", "A", "B", "B", "C"],
   51:             "x": [1.0, 2.0, 3.0, 2.0, 5.0],
   52:             "y": [10.0, 100.0, 1000.0, -100.0, -1000.0],
   53:         }
   54:     )
   55: 
   56:     def f(dfgb, arg1):
   57:         filtered = dfgb.filter(lambda grp: grp.y.mean() > arg1, dropna=False)
   58:         return filtered.groupby("group")
   59: 
   60:     def g(dfgb, arg2):
   61:         return dfgb.sum() / dfgb.sum().sum() + arg2
   62: 
   63:     def h(df, arg3):
   64:         return df.x + df.y - arg3
   65: 
   66:     result = df.groupby("group").pipe(f, 0).pipe(g, 10).pipe(h, 100)
   67: 
   68:     # Assert the results here
   69:     index = Index(["A", "B"], name="group")
   70:     expected = pd.Series([-79.5160891089, -78.4839108911], index=index)
   71: 
   72:     tm.assert_series_equal(result, expected)
   73: 
   74:     # test SeriesGroupby.pipe
   75:     ser = pd.Series([1, 1, 2, 2, 3, 3])
   76:     result = ser.groupby(ser).pipe(lambda grp: grp.sum() * grp.count())
   77: 
   78:     expected = pd.Series([4, 8, 12], index=Index([1, 2, 3], dtype=np.int64))
   79: 
   80:     tm.assert_series_equal(result, expected)
