    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: @pytest.mark.parametrize(
   13:     "in_vals, out_vals",
   14:     [
   15:         # Basics: strictly increasing (T), strictly decreasing (F),
   16:         # abs val increasing (F), non-strictly increasing (T)
   17:         ([1, 2, 5, 3, 2, 0, 4, 5, -6, 1, 1], [True, False, False, True]),
   18:         # Test with inf vals
   19:         (
   20:             [1, 2.1, np.inf, 3, 2, np.inf, -np.inf, 5, 11, 1, -np.inf],
   21:             [True, False, True, False],
   22:         ),
   23:         # Test with nan vals; should always be False
   24:         (
   25:             [1, 2, np.nan, 3, 2, np.nan, np.nan, 5, -np.inf, 1, np.nan],
   26:             [False, False, False, False],
   27:         ),
   28:     ],
   29: )
   30: def test_is_monotonic_increasing(in_vals, out_vals):
   31:     # GH 17015
   32:     source_dict = {
   33:         "A": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"],
   34:         "B": ["a", "a", "a", "b", "b", "b", "c", "c", "c", "d", "d"],
   35:         "C": in_vals,
   36:     }
   37:     df = DataFrame(source_dict)
   38:     result = df.groupby("B").C.is_monotonic_increasing
   39:     index = Index(list("abcd"), name="B")
   40:     expected = Series(index=index, data=out_vals, name="C")
   41:     tm.assert_series_equal(result, expected)
   42: 
   43:     # Also check result equal to manually taking x.is_monotonic_increasing.
   44:     expected = df.groupby(["B"]).C.apply(lambda x: x.is_monotonic_increasing)
   45:     tm.assert_series_equal(result, expected)
   46: 
   47: 
   48: @pytest.mark.parametrize(
   49:     "in_vals, out_vals",
   50:     [
   51:         # Basics: strictly decreasing (T), strictly increasing (F),
   52:         # abs val decreasing (F), non-strictly increasing (T)
   53:         ([10, 9, 7, 3, 4, 5, -3, 2, 0, 1, 1], [True, False, False, True]),
   54:         # Test with inf vals
   55:         (
   56:             [np.inf, 1, -np.inf, np.inf, 2, -3, -np.inf, 5, -3, -np.inf, -np.inf],
   57:             [True, True, False, True],
   58:         ),
   59:         # Test with nan vals; should always be False
   60:         (
   61:             [1, 2, np.nan, 3, 2, np.nan, np.nan, 5, -np.inf, 1, np.nan],
   62:             [False, False, False, False],
   63:         ),
   64:     ],
   65: )
   66: def test_is_monotonic_decreasing(in_vals, out_vals):
   67:     # GH 17015
   68:     source_dict = {
   69:         "A": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"],
   70:         "B": ["a", "a", "a", "b", "b", "b", "c", "c", "c", "d", "d"],
   71:         "C": in_vals,
   72:     }
   73: 
   74:     df = DataFrame(source_dict)
   75:     result = df.groupby("B").C.is_monotonic_decreasing
   76:     index = Index(list("abcd"), name="B")
   77:     expected = Series(index=index, data=out_vals, name="C")
   78:     tm.assert_series_equal(result, expected)
