    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7:     Timedelta,
    8:     concat,
    9:     date_range,
   10: )
   11: import pandas._testing as tm
   12: from pandas.api.indexers import BaseIndexer
   13: 
   14: 
   15: @pytest.fixture(
   16:     params=[
   17:         "triang",
   18:         "blackman",
   19:         "hamming",
   20:         "bartlett",
   21:         "bohman",
   22:         "blackmanharris",
   23:         "nuttall",
   24:         "barthann",
   25:     ]
   26: )
   27: def win_types(request):
   28:     return request.param
   29: 
   30: 
   31: @pytest.fixture(params=["kaiser", "gaussian", "general_gaussian", "exponential"])
   32: def win_types_special(request):
   33:     return request.param
   34: 
   35: 
   36: def test_constructor(frame_or_series):
   37:     # GH 12669
   38:     pytest.importorskip("scipy")
   39:     c = frame_or_series(range(5)).rolling
   40: 
   41:     # valid
   42:     c(win_type="boxcar", window=2, min_periods=1)
   43:     c(win_type="boxcar", window=2, min_periods=1, center=True)
   44:     c(win_type="boxcar", window=2, min_periods=1, center=False)
   45: 
   46: 
   47: @pytest.mark.parametrize("w", [2.0, "foo", np.array([2])])
   48: def test_invalid_constructor(frame_or_series, w):
   49:     # not valid
   50:     pytest.importorskip("scipy")
   51:     c = frame_or_series(range(5)).rolling
   52:     with pytest.raises(ValueError, match="min_periods must be an integer"):
   53:         c(win_type="boxcar", window=2, min_periods=w)
   54:     with pytest.raises(ValueError, match="center must be a boolean"):
   55:         c(win_type="boxcar", window=2, min_periods=1, center=w)
   56: 
   57: 
   58: @pytest.mark.parametrize("wt", ["foobar", 1])
   59: def test_invalid_constructor_wintype(frame_or_series, wt):
   60:     pytest.importorskip("scipy")
   61:     c = frame_or_series(range(5)).rolling
   62:     with pytest.raises(ValueError, match="Invalid win_type"):
   63:         c(win_type=wt, window=2)
   64: 
   65: 
   66: def test_constructor_with_win_type(frame_or_series, win_types):
   67:     # GH 12669
   68:     pytest.importorskip("scipy")
   69:     c = frame_or_series(range(5)).rolling
   70:     c(win_type=win_types, window=2)
   71: 
   72: 
   73: @pytest.mark.parametrize("arg", ["median", "kurt", "skew"])
   74: def test_agg_function_support(arg):
   75:     pytest.importorskip("scipy")
   76:     df = DataFrame({"A": np.arange(5)})
   77:     roll = df.rolling(2, win_type="triang")
   78: 
   79:     msg = f"'{arg}' is not a valid function for 'Window' object"
   80:     with pytest.raises(AttributeError, match=msg):
   81:         roll.agg(arg)
   82: 
   83:     with pytest.raises(AttributeError, match=msg):
   84:         roll.agg([arg])
   85: 
   86:     with pytest.raises(AttributeError, match=msg):
   87:         roll.agg({"A": arg})
   88: 
   89: 
   90: def test_invalid_scipy_arg():
   91:     # This error is raised by scipy
   92:     pytest.importorskip("scipy")
   93:     msg = r"boxcar\(\) got an unexpected"
   94:     with pytest.raises(TypeError, match=msg):
   95:         Series(range(3)).rolling(1, win_type="boxcar").mean(foo="bar")
   96: 
   97: 
   98: def test_constructor_with_win_type_invalid(frame_or_series):
   99:     # GH 13383
  100:     pytest.importorskip("scipy")
  101:     c = frame_or_series(range(5)).rolling
  102: 
  103:     msg = "window must be an integer 0 or greater"
  104: 
  105:     with pytest.raises(ValueError, match=msg):
  106:         c(-1, win_type="boxcar")
  107: 
  108: 
  109: def test_window_with_args(step):
  110:     # make sure that we are aggregating window functions correctly with arg
  111:     pytest.importorskip("scipy")
  112:     r = Series(np.random.default_rng(2).standard_normal(100)).rolling(
  113:         window=10, min_periods=1, win_type="gaussian", step=step
  114:     )
  115:     expected = concat([r.mean(std=10), r.mean(std=0.01)], axis=1)
  116:     expected.columns = ["<lambda>", "<lambda>"]
  117:     result = r.aggregate([lambda x: x.mean(std=10), lambda x: x.mean(std=0.01)])
  118:     tm.assert_frame_equal(result, expected)
  119: 
  120:     def a(x):
  121:         return x.mean(std=10)
  122: 
  123:     def b(x):
  124:         return x.mean(std=0.01)
  125: 
  126:     expected = concat([r.mean(std=10), r.mean(std=0.01)], axis=1)
  127:     expected.columns = ["a", "b"]
  128:     result = r.aggregate([a, b])
  129:     tm.assert_frame_equal(result, expected)
  130: 
  131: 
  132: def test_win_type_with_method_invalid():
  133:     pytest.importorskip("scipy")
  134:     with pytest.raises(
  135:         NotImplementedError, match="'single' is the only supported method type."
  136:     ):
  137:         Series(range(1)).rolling(1, win_type="triang", method="table")
  138: 
  139: 
  140: @pytest.mark.parametrize("arg", [2000000000, "2s", Timedelta("2s")])
  141: def test_consistent_win_type_freq(arg):
  142:     # GH 15969
  143:     pytest.importorskip("scipy")
  144:     s = Series(range(1))
  145:     with pytest.raises(ValueError, match="Invalid win_type freq"):
  146:         s.rolling(arg, win_type="freq")
  147: 
  148: 
  149: def test_win_type_freq_return_none():
  150:     # GH 48838
  151:     freq_roll = Series(range(2), index=date_range("2020", periods=2)).rolling("2s")
  152:     assert freq_roll.win_type is None
  153: 
  154: 
  155: def test_win_type_not_implemented():
  156:     pytest.importorskip("scipy")
  157: 
  158:     class CustomIndexer(BaseIndexer):
  159:         def get_window_bounds(self, num_values, min_periods, center, closed, step):
  160:             return np.array([0, 1]), np.array([1, 2])
  161: 
  162:     df = DataFrame({"values": range(2)})
  163:     indexer = CustomIndexer()
  164:     with pytest.raises(NotImplementedError, match="BaseIndexer subclasses not"):
  165:         df.rolling(indexer, win_type="boxcar")
  166: 
  167: 
  168: def test_cmov_mean(step):
  169:     # GH 8238
  170:     pytest.importorskip("scipy")
  171:     vals = np.array([6.95, 15.21, 4.72, 9.12, 13.81, 13.49, 16.68, 9.48, 10.63, 14.48])
  172:     result = Series(vals).rolling(5, center=True, step=step).mean()
  173:     expected_values = [
  174:         np.nan,
  175:         np.nan,
  176:         9.962,
  177:         11.27,
  178:         11.564,
  179:         12.516,
  180:         12.818,
  181:         12.952,
  182:         np.nan,
  183:         np.nan,
  184:     ]
  185:     expected = Series(expected_values)[::step]
  186:     tm.assert_series_equal(expected, result)
  187: 
  188: 
  189: def test_cmov_window(step):
  190:     # GH 8238
  191:     pytest.importorskip("scipy")
  192:     vals = np.array([6.95, 15.21, 4.72, 9.12, 13.81, 13.49, 16.68, 9.48, 10.63, 14.48])
  193:     result = Series(vals).rolling(5, win_type="boxcar", center=True, step=step).mean()
  194:     expected_values = [
  195:         np.nan,
  196:         np.nan,
  197:         9.962,
  198:         11.27,
  199:         11.564,
  200:         12.516,
  201:         12.818,
  202:         12.952,
  203:         np.nan,
  204:         np.nan,
  205:     ]
  206:     expected = Series(expected_values)[::step]
  207:     tm.assert_series_equal(expected, result)
  208: 
  209: 
  210: def test_cmov_window_corner(step):
  211:     # GH 8238
  212:     # all nan
  213:     pytest.importorskip("scipy")
  214:     vals = Series([np.nan] * 10)
  215:     result = vals.rolling(5, center=True, win_type="boxcar", step=step).mean()
  216:     assert np.isnan(result).all()
  217: 
  218:     # empty
  219:     vals = Series([], dtype=object)
  220:     result = vals.rolling(5, center=True, win_type="boxcar", step=step).mean()
  221:     assert len(result) == 0
  222: 
  223:     # shorter than window
  224:     vals = Series(np.random.default_rng(2).standard_normal(5))
  225:     result = vals.rolling(10, win_type="boxcar", step=step).mean()
  226:     assert np.isnan(result).all()
  227:     assert len(result) == len(range(0, 5, step or 1))
  228: 
  229: 
  230: @pytest.mark.parametrize(
  231:     "f,xp",
  232:     [
  233:         (
  234:             "mean",
  235:             [
  236:                 [np.nan, np.nan],
  237:                 [np.nan, np.nan],
  238:                 [9.252, 9.392],
  239:                 [8.644, 9.906],
  240:                 [8.87, 10.208],
  241:                 [6.81, 8.588],
  242:                 [7.792, 8.644],
  243:                 [9.05, 7.824],
  244:                 [np.nan, np.nan],
  245:                 [np.nan, np.nan],
  246:             ],
  247:         ),
  248:         (
  249:             "std",
  250:             [
  251:                 [np.nan, np.nan],
  252:                 [np.nan, np.nan],
  253:                 [3.789706, 4.068313],
  254:                 [3.429232, 3.237411],
  255:                 [3.589269, 3.220810],
  256:                 [3.405195, 2.380655],
  257:                 [3.281839, 2.369869],
  258:                 [3.676846, 1.801799],
  259:                 [np.nan, np.nan],
  260:                 [np.nan, np.nan],
  261:             ],
  262:         ),
  263:         (
  264:             "var",
  265:             [
  266:                 [np.nan, np.nan],
  267:                 [np.nan, np.nan],
  268:                 [14.36187, 16.55117],
  269:                 [11.75963, 10.48083],
  270:                 [12.88285, 10.37362],
  271:                 [11.59535, 5.66752],
  272:                 [10.77047, 5.61628],
  273:                 [13.51920, 3.24648],
  274:                 [np.nan, np.nan],
  275:                 [np.nan, np.nan],
  276:             ],
  277:         ),
  278:         (
  279:             "sum",
  280:             [
  281:                 [np.nan, np.nan],
  282:                 [np.nan, np.nan],
  283:                 [46.26, 46.96],
  284:                 [43.22, 49.53],
  285:                 [44.35, 51.04],
  286:                 [34.05, 42.94],
  287:                 [38.96, 43.22],
  288:                 [45.25, 39.12],
  289:                 [np.nan, np.nan],
  290:                 [np.nan, np.nan],
  291:             ],
  292:         ),
  293:     ],
  294: )
  295: def test_cmov_window_frame(f, xp, step):
  296:     # Gh 8238
  297:     pytest.importorskip("scipy")
  298:     df = DataFrame(
  299:         np.array(
  300:             [
  301:                 [12.18, 3.64],
  302:                 [10.18, 9.16],
  303:                 [13.24, 14.61],
  304:                 [4.51, 8.11],
  305:                 [6.15, 11.44],
  306:                 [9.14, 6.21],
  307:                 [11.31, 10.67],
  308:                 [2.94, 6.51],
  309:                 [9.42, 8.39],
  310:                 [12.44, 7.34],
  311:             ]
  312:         )
  313:     )
  314:     xp = DataFrame(np.array(xp))[::step]
  315: 
  316:     roll = df.rolling(5, win_type="boxcar", center=True, step=step)
  317:     rs = getattr(roll, f)()
  318: 
  319:     tm.assert_frame_equal(xp, rs)
  320: 
  321: 
  322: @pytest.mark.parametrize("min_periods", [0, 1, 2, 3, 4, 5])
  323: def test_cmov_window_na_min_periods(step, min_periods):
  324:     pytest.importorskip("scipy")
  325:     vals = Series(np.random.default_rng(2).standard_normal(10))
  326:     vals[4] = np.nan
  327:     vals[8] = np.nan
  328: 
  329:     xp = vals.rolling(5, min_periods=min_periods, center=True, step=step).mean()
  330:     rs = vals.rolling(
  331:         5, win_type="boxcar", min_periods=min_periods, center=True, step=step
  332:     ).mean()
  333:     tm.assert_series_equal(xp, rs)
  334: 
  335: 
  336: def test_cmov_window_regular(win_types, step):
  337:     # GH 8238
  338:     pytest.importorskip("scipy")
  339:     vals = np.array([6.95, 15.21, 4.72, 9.12, 13.81, 13.49, 16.68, 9.48, 10.63, 14.48])
  340:     xps = {
  341:         "hamming": [
  342:             np.nan,
  343:             np.nan,
  344:             8.71384,
  345:             9.56348,
  346:             12.38009,
  347:             14.03687,
  348:             13.8567,
  349:             11.81473,
  350:             np.nan,
  351:             np.nan,
  352:         ],
  353:         "triang": [
  354:             np.nan,
  355:             np.nan,
  356:             9.28667,
  357:             10.34667,
  358:             12.00556,
  359:             13.33889,
  360:             13.38,
  361:             12.33667,
  362:             np.nan,
  363:             np.nan,
  364:         ],
  365:         "barthann": [
  366:             np.nan,
  367:             np.nan,
  368:             8.4425,
  369:             9.1925,
  370:             12.5575,
  371:             14.3675,
  372:             14.0825,
  373:             11.5675,
  374:             np.nan,
  375:             np.nan,
  376:         ],
  377:         "bohman": [
  378:             np.nan,
  379:             np.nan,
  380:             7.61599,
  381:             9.1764,
  382:             12.83559,
  383:             14.17267,
  384:             14.65923,
  385:             11.10401,
  386:             np.nan,
  387:             np.nan,
  388:         ],
  389:         "blackmanharris": [
  390:             np.nan,
  391:             np.nan,
  392:             6.97691,
  393:             9.16438,
  394:             13.05052,
  395:             14.02156,
  396:             15.10512,
  397:             10.74574,
  398:             np.nan,
  399:             np.nan,
  400:         ],
  401:         "nuttall": [
  402:             np.nan,
  403:             np.nan,
  404:             7.04618,
  405:             9.16786,
  406:             13.02671,
  407:             14.03559,
  408:             15.05657,
  409:             10.78514,
  410:             np.nan,
  411:             np.nan,
  412:         ],
  413:         "blackman": [
  414:             np.nan,
  415:             np.nan,
  416:             7.73345,
  417:             9.17869,
  418:             12.79607,
  419:             14.20036,
  420:             14.57726,
  421:             11.16988,
  422:             np.nan,
  423:             np.nan,
  424:         ],
  425:         "bartlett": [
  426:             np.nan,
  427:             np.nan,
  428:             8.4425,
  429:             9.1925,
  430:             12.5575,
  431:             14.3675,
  432:             14.0825,
  433:             11.5675,
  434:             np.nan,
  435:             np.nan,
  436:         ],
  437:     }
  438: 
  439:     xp = Series(xps[win_types])[::step]
  440:     rs = Series(vals).rolling(5, win_type=win_types, center=True, step=step).mean()
  441:     tm.assert_series_equal(xp, rs)
  442: 
  443: 
  444: def test_cmov_window_regular_linear_range(win_types, step):
  445:     # GH 8238
  446:     pytest.importorskip("scipy")
  447:     vals = np.array(range(10), dtype=float)
  448:     xp = vals.copy()
  449:     xp[:2] = np.nan
  450:     xp[-2:] = np.nan
  451:     xp = Series(xp)[::step]
  452: 
  453:     rs = Series(vals).rolling(5, win_type=win_types, center=True, step=step).mean()
  454:     tm.assert_series_equal(xp, rs)
  455: 
  456: 
  457: def test_cmov_window_regular_missing_data(win_types, step):
  458:     # GH 8238
  459:     pytest.importorskip("scipy")
  460:     vals = np.array(
  461:         [6.95, 15.21, 4.72, 9.12, 13.81, 13.49, 16.68, np.nan, 10.63, 14.48]
  462:     )
  463:     xps = {
  464:         "bartlett": [
  465:             np.nan,
  466:             np.nan,
  467:             9.70333,
  468:             10.5225,
  469:             8.4425,
  470:             9.1925,
  471:             12.5575,
  472:             14.3675,
  473:             15.61667,
  474:             13.655,
  475:         ],
  476:         "blackman": [
  477:             np.nan,
  478:             np.nan,
  479:             9.04582,
  480:             11.41536,
  481:             7.73345,
  482:             9.17869,
  483:             12.79607,
  484:             14.20036,
  485:             15.8706,
  486:             13.655,
  487:         ],
  488:         "barthann": [
  489:             np.nan,
  490:             np.nan,
  491:             9.70333,
  492:             10.5225,
  493:             8.4425,
  494:             9.1925,
  495:             12.5575,
  496:             14.3675,
  497:             15.61667,
  498:             13.655,
  499:         ],
  500:         "bohman": [
  501:             np.nan,
  502:             np.nan,
  503:             8.9444,
  504:             11.56327,
  505:             7.61599,
  506:             9.1764,
  507:             12.83559,
  508:             14.17267,
  509:             15.90976,
  510:             13.655,
  511:         ],
  512:         "hamming": [
  513:             np.nan,
  514:             np.nan,
  515:             9.59321,
  516:             10.29694,
  517:             8.71384,
  518:             9.56348,
  519:             12.38009,
  520:             14.20565,
  521:             15.24694,
  522:             13.69758,
  523:         ],
  524:         "nuttall": [
  525:             np.nan,
  526:             np.nan,
  527:             8.47693,
  528:             12.2821,
  529:             7.04618,
  530:             9.16786,
  531:             13.02671,
  532:             14.03673,
  533:             16.08759,
  534:             13.65553,
  535:         ],
  536:         "triang": [
  537:             np.nan,
  538:             np.nan,
  539:             9.33167,
  540:             9.76125,
  541:             9.28667,
  542:             10.34667,
  543:             12.00556,
  544:             13.82125,
  545:             14.49429,
  546:             13.765,
  547:         ],
  548:         "blackmanharris": [
  549:             np.nan,
  550:             np.nan,
  551:             8.42526,
  552:             12.36824,
  553:             6.97691,
  554:             9.16438,
  555:             13.05052,
  556:             14.02175,
  557:             16.1098,
  558:             13.65509,
  559:         ],
  560:     }
  561: 
  562:     xp = Series(xps[win_types])[::step]
  563:     rs = Series(vals).rolling(5, win_type=win_types, min_periods=3, step=step).mean()
  564:     tm.assert_series_equal(xp, rs)
  565: 
  566: 
  567: def test_cmov_window_special(win_types_special, step):
  568:     # GH 8238
  569:     pytest.importorskip("scipy")
  570:     kwds = {
  571:         "kaiser": {"beta": 1.0},
  572:         "gaussian": {"std": 1.0},
  573:         "general_gaussian": {"p": 2.0, "sig": 2.0},
  574:         "exponential": {"tau": 10},
  575:     }
  576: 
  577:     vals = np.array([6.95, 15.21, 4.72, 9.12, 13.81, 13.49, 16.68, 9.48, 10.63, 14.48])
  578: 
  579:     xps = {
  580:         "gaussian": [
  581:             np.nan,
  582:             np.nan,
  583:             8.97297,
  584:             9.76077,
  585:             12.24763,
  586:             13.89053,
  587:             13.65671,
  588:             12.01002,
  589:             np.nan,
  590:             np.nan,
  591:         ],
  592:         "general_gaussian": [
  593:             np.nan,
  594:             np.nan,
  595:             9.85011,
  596:             10.71589,
  597:             11.73161,
  598:             13.08516,
  599:             12.95111,
  600:             12.74577,
  601:             np.nan,
  602:             np.nan,
  603:         ],
  604:         "kaiser": [
  605:             np.nan,
  606:             np.nan,
  607:             9.86851,
  608:             11.02969,
  609:             11.65161,
  610:             12.75129,
  611:             12.90702,
  612:             12.83757,
  613:             np.nan,
  614:             np.nan,
  615:         ],
  616:         "exponential": [
  617:             np.nan,
  618:             np.nan,
  619:             9.83364,
  620:             11.10472,
  621:             11.64551,
  622:             12.66138,
  623:             12.92379,
  624:             12.83770,
  625:             np.nan,
  626:             np.nan,
  627:         ],
  628:     }
  629: 
  630:     xp = Series(xps[win_types_special])[::step]
  631:     rs = (
  632:         Series(vals)
  633:         .rolling(5, win_type=win_types_special, center=True, step=step)
  634:         .mean(**kwds[win_types_special])
  635:     )
  636:     tm.assert_series_equal(xp, rs)
  637: 
  638: 
  639: def test_cmov_window_special_linear_range(win_types_special, step):
  640:     # GH 8238
  641:     pytest.importorskip("scipy")
  642:     kwds = {
  643:         "kaiser": {"beta": 1.0},
  644:         "gaussian": {"std": 1.0},
  645:         "general_gaussian": {"p": 2.0, "sig": 2.0},
  646:         "slepian": {"width": 0.5},
  647:         "exponential": {"tau": 10},
  648:     }
  649: 
  650:     vals = np.array(range(10), dtype=float)
  651:     xp = vals.copy()
  652:     xp[:2] = np.nan
  653:     xp[-2:] = np.nan
  654:     xp = Series(xp)[::step]
  655: 
  656:     rs = (
  657:         Series(vals)
  658:         .rolling(5, win_type=win_types_special, center=True, step=step)
  659:         .mean(**kwds[win_types_special])
  660:     )
  661:     tm.assert_series_equal(xp, rs)
  662: 
  663: 
  664: def test_weighted_var_big_window_no_segfault(win_types, center):
  665:     # GitHub Issue #46772
  666:     pytest.importorskip("scipy")
  667:     x = Series(0)
  668:     result = x.rolling(window=16, center=center, win_type=win_types).var()
  669:     expected = Series(np.nan)
  670: 
  671:     tm.assert_series_equal(result, expected)
  672: 
  673: 
  674: def test_rolling_center_axis_1():
  675:     pytest.importorskip("scipy")
  676:     df = DataFrame(
  677:         {"a": [1, 1, 0, 0, 0, 1], "b": [1, 0, 0, 1, 0, 0], "c": [1, 0, 0, 1, 0, 1]}
  678:     )
  679: 
  680:     msg = "Support for axis=1 in DataFrame.rolling is deprecated"
  681:     with tm.assert_produces_warning(FutureWarning, match=msg):
  682:         result = df.rolling(window=3, axis=1, win_type="boxcar", center=True).sum()
  683: 
  684:     expected = DataFrame(
  685:         {"a": [np.nan] * 6, "b": [3.0, 1.0, 0.0, 2.0, 0.0, 2.0], "c": [np.nan] * 6}
  686:     )
  687: 
  688:     tm.assert_frame_equal(result, expected, check_dtype=True)
