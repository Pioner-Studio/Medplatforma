    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4: )
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: import pandas.util._test_decorators as td
   10: 
   11: from pandas import (
   12:     DataFrame,
   13:     Series,
   14:     bdate_range,
   15: )
   16: 
   17: 
   18: @pytest.fixture(params=[True, False])
   19: def raw(request):
   20:     """raw keyword argument for rolling.apply"""
   21:     return request.param
   22: 
   23: 
   24: @pytest.fixture(
   25:     params=[
   26:         "sum",
   27:         "mean",
   28:         "median",
   29:         "max",
   30:         "min",
   31:         "var",
   32:         "std",
   33:         "kurt",
   34:         "skew",
   35:         "count",
   36:         "sem",
   37:     ]
   38: )
   39: def arithmetic_win_operators(request):
   40:     return request.param
   41: 
   42: 
   43: @pytest.fixture(params=[True, False])
   44: def center(request):
   45:     return request.param
   46: 
   47: 
   48: @pytest.fixture(params=[None, 1])
   49: def min_periods(request):
   50:     return request.param
   51: 
   52: 
   53: @pytest.fixture(params=[True, False])
   54: def parallel(request):
   55:     """parallel keyword argument for numba.jit"""
   56:     return request.param
   57: 
   58: 
   59: # Can parameterize nogil & nopython over True | False, but limiting per
   60: # https://github.com/pandas-dev/pandas/pull/41971#issuecomment-860607472
   61: 
   62: 
   63: @pytest.fixture(params=[False])
   64: def nogil(request):
   65:     """nogil keyword argument for numba.jit"""
   66:     return request.param
   67: 
   68: 
   69: @pytest.fixture(params=[True])
   70: def nopython(request):
   71:     """nopython keyword argument for numba.jit"""
   72:     return request.param
   73: 
   74: 
   75: @pytest.fixture(params=[True, False])
   76: def adjust(request):
   77:     """adjust keyword argument for ewm"""
   78:     return request.param
   79: 
   80: 
   81: @pytest.fixture(params=[True, False])
   82: def ignore_na(request):
   83:     """ignore_na keyword argument for ewm"""
   84:     return request.param
   85: 
   86: 
   87: @pytest.fixture(params=[True, False])
   88: def numeric_only(request):
   89:     """numeric_only keyword argument"""
   90:     return request.param
   91: 
   92: 
   93: @pytest.fixture(
   94:     params=[
   95:         pytest.param("numba", marks=[td.skip_if_no("numba"), pytest.mark.single_cpu]),
   96:         "cython",
   97:     ]
   98: )
   99: def engine(request):
  100:     """engine keyword argument for rolling.apply"""
  101:     return request.param
  102: 
  103: 
  104: @pytest.fixture(
  105:     params=[
  106:         pytest.param(
  107:             ("numba", True), marks=[td.skip_if_no("numba"), pytest.mark.single_cpu]
  108:         ),
  109:         ("cython", True),
  110:         ("cython", False),
  111:     ]
  112: )
  113: def engine_and_raw(request):
  114:     """engine and raw keyword arguments for rolling.apply"""
  115:     return request.param
  116: 
  117: 
  118: @pytest.fixture(params=["1 day", timedelta(days=1), np.timedelta64(1, "D")])
  119: def halflife_with_times(request):
  120:     """Halflife argument for EWM when times is specified."""
  121:     return request.param
  122: 
  123: 
  124: @pytest.fixture
  125: def series():
  126:     """Make mocked series as fixture."""
  127:     arr = np.random.default_rng(2).standard_normal(100)
  128:     locs = np.arange(20, 40)
  129:     arr[locs] = np.nan
  130:     series = Series(arr, index=bdate_range(datetime(2009, 1, 1), periods=100))
  131:     return series
  132: 
  133: 
  134: @pytest.fixture
  135: def frame():
  136:     """Make mocked frame as fixture."""
  137:     return DataFrame(
  138:         np.random.default_rng(2).standard_normal((100, 10)),
  139:         index=bdate_range(datetime(2009, 1, 1), periods=100),
  140:     )
  141: 
  142: 
  143: @pytest.fixture(params=[None, 1, 2, 5, 10])
  144: def step(request):
  145:     """step keyword argument for rolling window operations."""
  146:     return request.param
