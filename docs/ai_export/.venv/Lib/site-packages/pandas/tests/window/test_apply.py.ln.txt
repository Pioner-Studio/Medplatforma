    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     MultiIndex,
    8:     Series,
    9:     Timestamp,
   10:     concat,
   11:     date_range,
   12:     isna,
   13:     notna,
   14: )
   15: import pandas._testing as tm
   16: 
   17: from pandas.tseries import offsets
   18: 
   19: # suppress warnings about empty slices, as we are deliberately testing
   20: # with a 0-length Series
   21: pytestmark = pytest.mark.filterwarnings(
   22:     "ignore:.*(empty slice|0 for slice).*:RuntimeWarning"
   23: )
   24: 
   25: 
   26: def f(x):
   27:     return x[np.isfinite(x)].mean()
   28: 
   29: 
   30: @pytest.mark.parametrize("bad_raw", [None, 1, 0])
   31: def test_rolling_apply_invalid_raw(bad_raw):
   32:     with pytest.raises(ValueError, match="raw parameter must be `True` or `False`"):
   33:         Series(range(3)).rolling(1).apply(len, raw=bad_raw)
   34: 
   35: 
   36: def test_rolling_apply_out_of_bounds(engine_and_raw):
   37:     # gh-1850
   38:     engine, raw = engine_and_raw
   39: 
   40:     vals = Series([1, 2, 3, 4])
   41: 
   42:     result = vals.rolling(10).apply(np.sum, engine=engine, raw=raw)
   43:     assert result.isna().all()
   44: 
   45:     result = vals.rolling(10, min_periods=1).apply(np.sum, engine=engine, raw=raw)
   46:     expected = Series([1, 3, 6, 10], dtype=float)
   47:     tm.assert_almost_equal(result, expected)
   48: 
   49: 
   50: @pytest.mark.parametrize("window", [2, "2s"])
   51: def test_rolling_apply_with_pandas_objects(window):
   52:     # 5071
   53:     df = DataFrame(
   54:         {
   55:             "A": np.random.default_rng(2).standard_normal(5),
   56:             "B": np.random.default_rng(2).integers(0, 10, size=5),
   57:         },
   58:         index=date_range("20130101", periods=5, freq="s"),
   59:     )
   60: 
   61:     # we have an equal spaced timeseries index
   62:     # so simulate removing the first period
   63:     def f(x):
   64:         if x.index[0] == df.index[0]:
   65:             return np.nan
   66:         return x.iloc[-1]
   67: 
   68:     result = df.rolling(window).apply(f, raw=False)
   69:     expected = df.iloc[2:].reindex_like(df)
   70:     tm.assert_frame_equal(result, expected)
   71: 
   72:     with tm.external_error_raised(AttributeError):
   73:         df.rolling(window).apply(f, raw=True)
   74: 
   75: 
   76: def test_rolling_apply(engine_and_raw, step):
   77:     engine, raw = engine_and_raw
   78: 
   79:     expected = Series([], dtype="float64")
   80:     result = expected.rolling(10, step=step).apply(
   81:         lambda x: x.mean(), engine=engine, raw=raw
   82:     )
   83:     tm.assert_series_equal(result, expected)
   84: 
   85:     # gh-8080
   86:     s = Series([None, None, None])
   87:     result = s.rolling(2, min_periods=0, step=step).apply(
   88:         lambda x: len(x), engine=engine, raw=raw
   89:     )
   90:     expected = Series([1.0, 2.0, 2.0])[::step]
   91:     tm.assert_series_equal(result, expected)
   92: 
   93:     result = s.rolling(2, min_periods=0, step=step).apply(len, engine=engine, raw=raw)
   94:     tm.assert_series_equal(result, expected)
   95: 
   96: 
   97: def test_all_apply(engine_and_raw):
   98:     engine, raw = engine_and_raw
   99: 
  100:     df = (
  101:         DataFrame(
  102:             {"A": date_range("20130101", periods=5, freq="s"), "B": range(5)}
  103:         ).set_index("A")
  104:         * 2
  105:     )
  106:     er = df.rolling(window=1)
  107:     r = df.rolling(window="1s")
  108: 
  109:     result = r.apply(lambda x: 1, engine=engine, raw=raw)
  110:     expected = er.apply(lambda x: 1, engine=engine, raw=raw)
  111:     tm.assert_frame_equal(result, expected)
  112: 
  113: 
  114: def test_ragged_apply(engine_and_raw):
  115:     engine, raw = engine_and_raw
  116: 
  117:     df = DataFrame({"B": range(5)})
  118:     df.index = [
  119:         Timestamp("20130101 09:00:00"),
  120:         Timestamp("20130101 09:00:02"),
  121:         Timestamp("20130101 09:00:03"),
  122:         Timestamp("20130101 09:00:05"),
  123:         Timestamp("20130101 09:00:06"),
  124:     ]
  125: 
  126:     f = lambda x: 1
  127:     result = df.rolling(window="1s", min_periods=1).apply(f, engine=engine, raw=raw)
  128:     expected = df.copy()
  129:     expected["B"] = 1.0
  130:     tm.assert_frame_equal(result, expected)
  131: 
  132:     result = df.rolling(window="2s", min_periods=1).apply(f, engine=engine, raw=raw)
  133:     expected = df.copy()
  134:     expected["B"] = 1.0
  135:     tm.assert_frame_equal(result, expected)
  136: 
  137:     result = df.rolling(window="5s", min_periods=1).apply(f, engine=engine, raw=raw)
  138:     expected = df.copy()
  139:     expected["B"] = 1.0
  140:     tm.assert_frame_equal(result, expected)
  141: 
  142: 
  143: def test_invalid_engine():
  144:     with pytest.raises(ValueError, match="engine must be either 'numba' or 'cython'"):
  145:         Series(range(1)).rolling(1).apply(lambda x: x, engine="foo")
  146: 
  147: 
  148: def test_invalid_engine_kwargs_cython():
  149:     with pytest.raises(ValueError, match="cython engine does not accept engine_kwargs"):
  150:         Series(range(1)).rolling(1).apply(
  151:             lambda x: x, engine="cython", engine_kwargs={"nopython": False}
  152:         )
  153: 
  154: 
  155: def test_invalid_raw_numba():
  156:     with pytest.raises(
  157:         ValueError, match="raw must be `True` when using the numba engine"
  158:     ):
  159:         Series(range(1)).rolling(1).apply(lambda x: x, raw=False, engine="numba")
  160: 
  161: 
  162: @pytest.mark.parametrize("args_kwargs", [[None, {"par": 10}], [(10,), None]])
  163: def test_rolling_apply_args_kwargs(args_kwargs):
  164:     # GH 33433
  165:     def numpysum(x, par):
  166:         return np.sum(x + par)
  167: 
  168:     df = DataFrame({"gr": [1, 1], "a": [1, 2]})
  169: 
  170:     idx = Index(["gr", "a"])
  171:     expected = DataFrame([[11.0, 11.0], [11.0, 12.0]], columns=idx)
  172: 
  173:     result = df.rolling(1).apply(numpysum, args=args_kwargs[0], kwargs=args_kwargs[1])
  174:     tm.assert_frame_equal(result, expected)
  175: 
  176:     midx = MultiIndex.from_tuples([(1, 0), (1, 1)], names=["gr", None])
  177:     expected = Series([11.0, 12.0], index=midx, name="a")
  178: 
  179:     gb_rolling = df.groupby("gr")["a"].rolling(1)
  180: 
  181:     result = gb_rolling.apply(numpysum, args=args_kwargs[0], kwargs=args_kwargs[1])
  182:     tm.assert_series_equal(result, expected)
  183: 
  184: 
  185: def test_nans(raw):
  186:     obj = Series(np.random.default_rng(2).standard_normal(50))
  187:     obj[:10] = np.nan
  188:     obj[-10:] = np.nan
  189: 
  190:     result = obj.rolling(50, min_periods=30).apply(f, raw=raw)
  191:     tm.assert_almost_equal(result.iloc[-1], np.mean(obj[10:-10]))
  192: 
  193:     # min_periods is working correctly
  194:     result = obj.rolling(20, min_periods=15).apply(f, raw=raw)
  195:     assert isna(result.iloc[23])
  196:     assert not isna(result.iloc[24])
  197: 
  198:     assert not isna(result.iloc[-6])
  199:     assert isna(result.iloc[-5])
  200: 
  201:     obj2 = Series(np.random.default_rng(2).standard_normal(20))
  202:     result = obj2.rolling(10, min_periods=5).apply(f, raw=raw)
  203:     assert isna(result.iloc[3])
  204:     assert notna(result.iloc[4])
  205: 
  206:     result0 = obj.rolling(20, min_periods=0).apply(f, raw=raw)
  207:     result1 = obj.rolling(20, min_periods=1).apply(f, raw=raw)
  208:     tm.assert_almost_equal(result0, result1)
  209: 
  210: 
  211: def test_center(raw):
  212:     obj = Series(np.random.default_rng(2).standard_normal(50))
  213:     obj[:10] = np.nan
  214:     obj[-10:] = np.nan
  215: 
  216:     result = obj.rolling(20, min_periods=15, center=True).apply(f, raw=raw)
  217:     expected = (
  218:         concat([obj, Series([np.nan] * 9)])
  219:         .rolling(20, min_periods=15)
  220:         .apply(f, raw=raw)
  221:         .iloc[9:]
  222:         .reset_index(drop=True)
  223:     )
  224:     tm.assert_series_equal(result, expected)
  225: 
  226: 
  227: def test_series(raw, series):
  228:     result = series.rolling(50).apply(f, raw=raw)
  229:     assert isinstance(result, Series)
  230:     tm.assert_almost_equal(result.iloc[-1], np.mean(series[-50:]))
  231: 
  232: 
  233: def test_frame(raw, frame):
  234:     result = frame.rolling(50).apply(f, raw=raw)
  235:     assert isinstance(result, DataFrame)
  236:     tm.assert_series_equal(
  237:         result.iloc[-1, :],
  238:         frame.iloc[-50:, :].apply(np.mean, axis=0, raw=raw),
  239:         check_names=False,
  240:     )
  241: 
  242: 
  243: def test_time_rule_series(raw, series):
  244:     win = 25
  245:     minp = 10
  246:     ser = series[::2].resample("B").mean()
  247:     series_result = ser.rolling(window=win, min_periods=minp).apply(f, raw=raw)
  248:     last_date = series_result.index[-1]
  249:     prev_date = last_date - 24 * offsets.BDay()
  250: 
  251:     trunc_series = series[::2].truncate(prev_date, last_date)
  252:     tm.assert_almost_equal(series_result.iloc[-1], np.mean(trunc_series))
  253: 
  254: 
  255: def test_time_rule_frame(raw, frame):
  256:     win = 25
  257:     minp = 10
  258:     frm = frame[::2].resample("B").mean()
  259:     frame_result = frm.rolling(window=win, min_periods=minp).apply(f, raw=raw)
  260:     last_date = frame_result.index[-1]
  261:     prev_date = last_date - 24 * offsets.BDay()
  262: 
  263:     trunc_frame = frame[::2].truncate(prev_date, last_date)
  264:     tm.assert_series_equal(
  265:         frame_result.xs(last_date),
  266:         trunc_frame.apply(np.mean, raw=raw),
  267:         check_names=False,
  268:     )
  269: 
  270: 
  271: @pytest.mark.parametrize("minp", [0, 99, 100])
  272: def test_min_periods(raw, series, minp, step):
  273:     result = series.rolling(len(series) + 1, min_periods=minp, step=step).apply(
  274:         f, raw=raw
  275:     )
  276:     expected = series.rolling(len(series), min_periods=minp, step=step).apply(
  277:         f, raw=raw
  278:     )
  279:     nan_mask = isna(result)
  280:     tm.assert_series_equal(nan_mask, isna(expected))
  281: 
  282:     nan_mask = ~nan_mask
  283:     tm.assert_almost_equal(result[nan_mask], expected[nan_mask])
  284: 
  285: 
  286: def test_center_reindex_series(raw, series):
  287:     # shifter index
  288:     s = [f"x{x:d}" for x in range(12)]
  289:     minp = 10
  290: 
  291:     series_xp = (
  292:         series.reindex(list(series.index) + s)
  293:         .rolling(window=25, min_periods=minp)
  294:         .apply(f, raw=raw)
  295:         .shift(-12)
  296:         .reindex(series.index)
  297:     )
  298:     series_rs = series.rolling(window=25, min_periods=minp, center=True).apply(
  299:         f, raw=raw
  300:     )
  301:     tm.assert_series_equal(series_xp, series_rs)
  302: 
  303: 
  304: def test_center_reindex_frame(raw):
  305:     # shifter index
  306:     frame = DataFrame(range(100), index=date_range("2020-01-01", freq="D", periods=100))
  307:     s = [f"x{x:d}" for x in range(12)]
  308:     minp = 10
  309: 
  310:     frame_xp = (
  311:         frame.reindex(list(frame.index) + s)
  312:         .rolling(window=25, min_periods=minp)
  313:         .apply(f, raw=raw)
  314:         .shift(-12)
  315:         .reindex(frame.index)
  316:     )
  317:     frame_rs = frame.rolling(window=25, min_periods=minp, center=True).apply(f, raw=raw)
  318:     tm.assert_frame_equal(frame_xp, frame_rs)
  319: 
  320: 
  321: def test_axis1(raw):
  322:     # GH 45912
  323:     df = DataFrame([1, 2])
  324:     msg = "Support for axis=1 in DataFrame.rolling is deprecated"
  325:     with tm.assert_produces_warning(FutureWarning, match=msg):
  326:         result = df.rolling(window=1, axis=1).apply(np.sum, raw=raw)
  327:     expected = DataFrame([1.0, 2.0])
  328:     tm.assert_frame_equal(result, expected)
