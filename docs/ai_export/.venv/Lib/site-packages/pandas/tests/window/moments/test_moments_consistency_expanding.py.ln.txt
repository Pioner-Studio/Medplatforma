    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import Series
    5: import pandas._testing as tm
    6: 
    7: 
    8: def no_nans(x):
    9:     return x.notna().all().all()
   10: 
   11: 
   12: def all_na(x):
   13:     return x.isnull().all().all()
   14: 
   15: 
   16: @pytest.mark.parametrize("f", [lambda v: Series(v).sum(), np.nansum, np.sum])
   17: def test_expanding_apply_consistency_sum_nans(request, all_data, min_periods, f):
   18:     if f is np.sum:
   19:         if not no_nans(all_data) and not (
   20:             all_na(all_data) and not all_data.empty and min_periods > 0
   21:         ):
   22:             request.applymarker(
   23:                 pytest.mark.xfail(reason="np.sum has different behavior with NaNs")
   24:             )
   25:     expanding_f_result = all_data.expanding(min_periods=min_periods).sum()
   26:     expanding_apply_f_result = all_data.expanding(min_periods=min_periods).apply(
   27:         func=f, raw=True
   28:     )
   29:     tm.assert_equal(expanding_f_result, expanding_apply_f_result)
   30: 
   31: 
   32: @pytest.mark.parametrize("ddof", [0, 1])
   33: def test_moments_consistency_var(all_data, min_periods, ddof):
   34:     var_x = all_data.expanding(min_periods=min_periods).var(ddof=ddof)
   35:     assert not (var_x < 0).any().any()
   36: 
   37:     if ddof == 0:
   38:         # check that biased var(x) == mean(x^2) - mean(x)^2
   39:         mean_x2 = (all_data * all_data).expanding(min_periods=min_periods).mean()
   40:         mean_x = all_data.expanding(min_periods=min_periods).mean()
   41:         tm.assert_equal(var_x, mean_x2 - (mean_x * mean_x))
   42: 
   43: 
   44: @pytest.mark.parametrize("ddof", [0, 1])
   45: def test_moments_consistency_var_constant(consistent_data, min_periods, ddof):
   46:     count_x = consistent_data.expanding(min_periods=min_periods).count()
   47:     var_x = consistent_data.expanding(min_periods=min_periods).var(ddof=ddof)
   48: 
   49:     # check that variance of constant series is identically 0
   50:     assert not (var_x > 0).any().any()
   51:     expected = consistent_data * np.nan
   52:     expected[count_x >= max(min_periods, 1)] = 0.0
   53:     if ddof == 1:
   54:         expected[count_x < 2] = np.nan
   55:     tm.assert_equal(var_x, expected)
   56: 
   57: 
   58: @pytest.mark.parametrize("ddof", [0, 1])
   59: def test_expanding_consistency_var_std_cov(all_data, min_periods, ddof):
   60:     var_x = all_data.expanding(min_periods=min_periods).var(ddof=ddof)
   61:     assert not (var_x < 0).any().any()
   62: 
   63:     std_x = all_data.expanding(min_periods=min_periods).std(ddof=ddof)
   64:     assert not (std_x < 0).any().any()
   65: 
   66:     # check that var(x) == std(x)^2
   67:     tm.assert_equal(var_x, std_x * std_x)
   68: 
   69:     cov_x_x = all_data.expanding(min_periods=min_periods).cov(all_data, ddof=ddof)
   70:     assert not (cov_x_x < 0).any().any()
   71: 
   72:     # check that var(x) == cov(x, x)
   73:     tm.assert_equal(var_x, cov_x_x)
   74: 
   75: 
   76: @pytest.mark.parametrize("ddof", [0, 1])
   77: def test_expanding_consistency_series_cov_corr(series_data, min_periods, ddof):
   78:     var_x_plus_y = (
   79:         (series_data + series_data).expanding(min_periods=min_periods).var(ddof=ddof)
   80:     )
   81:     var_x = series_data.expanding(min_periods=min_periods).var(ddof=ddof)
   82:     var_y = series_data.expanding(min_periods=min_periods).var(ddof=ddof)
   83:     cov_x_y = series_data.expanding(min_periods=min_periods).cov(series_data, ddof=ddof)
   84:     # check that cov(x, y) == (var(x+y) - var(x) -
   85:     # var(y)) / 2
   86:     tm.assert_equal(cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y))
   87: 
   88:     # check that corr(x, y) == cov(x, y) / (std(x) *
   89:     # std(y))
   90:     corr_x_y = series_data.expanding(min_periods=min_periods).corr(series_data)
   91:     std_x = series_data.expanding(min_periods=min_periods).std(ddof=ddof)
   92:     std_y = series_data.expanding(min_periods=min_periods).std(ddof=ddof)
   93:     tm.assert_equal(corr_x_y, cov_x_y / (std_x * std_y))
   94: 
   95:     if ddof == 0:
   96:         # check that biased cov(x, y) == mean(x*y) -
   97:         # mean(x)*mean(y)
   98:         mean_x = series_data.expanding(min_periods=min_periods).mean()
   99:         mean_y = series_data.expanding(min_periods=min_periods).mean()
  100:         mean_x_times_y = (
  101:             (series_data * series_data).expanding(min_periods=min_periods).mean()
  102:         )
  103:         tm.assert_equal(cov_x_y, mean_x_times_y - (mean_x * mean_y))
  104: 
  105: 
  106: def test_expanding_consistency_mean(all_data, min_periods):
  107:     result = all_data.expanding(min_periods=min_periods).mean()
  108:     expected = (
  109:         all_data.expanding(min_periods=min_periods).sum()
  110:         / all_data.expanding(min_periods=min_periods).count()
  111:     )
  112:     tm.assert_equal(result, expected.astype("float64"))
  113: 
  114: 
  115: def test_expanding_consistency_constant(consistent_data, min_periods):
  116:     count_x = consistent_data.expanding().count()
  117:     mean_x = consistent_data.expanding(min_periods=min_periods).mean()
  118:     # check that correlation of a series with itself is either 1 or NaN
  119:     corr_x_x = consistent_data.expanding(min_periods=min_periods).corr(consistent_data)
  120: 
  121:     exp = (
  122:         consistent_data.max()
  123:         if isinstance(consistent_data, Series)
  124:         else consistent_data.max().max()
  125:     )
  126: 
  127:     # check mean of constant series
  128:     expected = consistent_data * np.nan
  129:     expected[count_x >= max(min_periods, 1)] = exp
  130:     tm.assert_equal(mean_x, expected)
  131: 
  132:     # check correlation of constant series with itself is NaN
  133:     expected[:] = np.nan
  134:     tm.assert_equal(corr_x_x, expected)
  135: 
  136: 
  137: def test_expanding_consistency_var_debiasing_factors(all_data, min_periods):
  138:     # check variance debiasing factors
  139:     var_unbiased_x = all_data.expanding(min_periods=min_periods).var()
  140:     var_biased_x = all_data.expanding(min_periods=min_periods).var(ddof=0)
  141:     var_debiasing_factors_x = all_data.expanding().count() / (
  142:         all_data.expanding().count() - 1.0
  143:     ).replace(0.0, np.nan)
  144:     tm.assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)
