    1: from functools import partial
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     Series,
    9:     concat,
   10:     isna,
   11:     notna,
   12: )
   13: import pandas._testing as tm
   14: 
   15: from pandas.tseries import offsets
   16: 
   17: 
   18: @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
   19: def test_series(series, sp_func, roll_func):
   20:     sp_stats = pytest.importorskip("scipy.stats")
   21: 
   22:     compare_func = partial(getattr(sp_stats, sp_func), bias=False)
   23:     result = getattr(series.rolling(50), roll_func)()
   24:     assert isinstance(result, Series)
   25:     tm.assert_almost_equal(result.iloc[-1], compare_func(series[-50:]))
   26: 
   27: 
   28: @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
   29: def test_frame(raw, frame, sp_func, roll_func):
   30:     sp_stats = pytest.importorskip("scipy.stats")
   31: 
   32:     compare_func = partial(getattr(sp_stats, sp_func), bias=False)
   33:     result = getattr(frame.rolling(50), roll_func)()
   34:     assert isinstance(result, DataFrame)
   35:     tm.assert_series_equal(
   36:         result.iloc[-1, :],
   37:         frame.iloc[-50:, :].apply(compare_func, axis=0, raw=raw),
   38:         check_names=False,
   39:     )
   40: 
   41: 
   42: @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
   43: def test_time_rule_series(series, sp_func, roll_func):
   44:     sp_stats = pytest.importorskip("scipy.stats")
   45: 
   46:     compare_func = partial(getattr(sp_stats, sp_func), bias=False)
   47:     win = 25
   48:     ser = series[::2].resample("B").mean()
   49:     series_result = getattr(ser.rolling(window=win, min_periods=10), roll_func)()
   50:     last_date = series_result.index[-1]
   51:     prev_date = last_date - 24 * offsets.BDay()
   52: 
   53:     trunc_series = series[::2].truncate(prev_date, last_date)
   54:     tm.assert_almost_equal(series_result.iloc[-1], compare_func(trunc_series))
   55: 
   56: 
   57: @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
   58: def test_time_rule_frame(raw, frame, sp_func, roll_func):
   59:     sp_stats = pytest.importorskip("scipy.stats")
   60: 
   61:     compare_func = partial(getattr(sp_stats, sp_func), bias=False)
   62:     win = 25
   63:     frm = frame[::2].resample("B").mean()
   64:     frame_result = getattr(frm.rolling(window=win, min_periods=10), roll_func)()
   65:     last_date = frame_result.index[-1]
   66:     prev_date = last_date - 24 * offsets.BDay()
   67: 
   68:     trunc_frame = frame[::2].truncate(prev_date, last_date)
   69:     tm.assert_series_equal(
   70:         frame_result.xs(last_date),
   71:         trunc_frame.apply(compare_func, raw=raw),
   72:         check_names=False,
   73:     )
   74: 
   75: 
   76: @pytest.mark.parametrize("sp_func, roll_func", [["kurtosis", "kurt"], ["skew", "skew"]])
   77: def test_nans(sp_func, roll_func):
   78:     sp_stats = pytest.importorskip("scipy.stats")
   79: 
   80:     compare_func = partial(getattr(sp_stats, sp_func), bias=False)
   81:     obj = Series(np.random.default_rng(2).standard_normal(50))
   82:     obj[:10] = np.nan
   83:     obj[-10:] = np.nan
   84: 
   85:     result = getattr(obj.rolling(50, min_periods=30), roll_func)()
   86:     tm.assert_almost_equal(result.iloc[-1], compare_func(obj[10:-10]))
   87: 
   88:     # min_periods is working correctly
   89:     result = getattr(obj.rolling(20, min_periods=15), roll_func)()
   90:     assert isna(result.iloc[23])
   91:     assert not isna(result.iloc[24])
   92: 
   93:     assert not isna(result.iloc[-6])
   94:     assert isna(result.iloc[-5])
   95: 
   96:     obj2 = Series(np.random.default_rng(2).standard_normal(20))
   97:     result = getattr(obj2.rolling(10, min_periods=5), roll_func)()
   98:     assert isna(result.iloc[3])
   99:     assert notna(result.iloc[4])
  100: 
  101:     result0 = getattr(obj.rolling(20, min_periods=0), roll_func)()
  102:     result1 = getattr(obj.rolling(20, min_periods=1), roll_func)()
  103:     tm.assert_almost_equal(result0, result1)
  104: 
  105: 
  106: @pytest.mark.parametrize("minp", [0, 99, 100])
  107: @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
  108: def test_min_periods(series, minp, roll_func, step):
  109:     result = getattr(
  110:         series.rolling(len(series) + 1, min_periods=minp, step=step), roll_func
  111:     )()
  112:     expected = getattr(
  113:         series.rolling(len(series), min_periods=minp, step=step), roll_func
  114:     )()
  115:     nan_mask = isna(result)
  116:     tm.assert_series_equal(nan_mask, isna(expected))
  117: 
  118:     nan_mask = ~nan_mask
  119:     tm.assert_almost_equal(result[nan_mask], expected[nan_mask])
  120: 
  121: 
  122: @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
  123: def test_center(roll_func):
  124:     obj = Series(np.random.default_rng(2).standard_normal(50))
  125:     obj[:10] = np.nan
  126:     obj[-10:] = np.nan
  127: 
  128:     result = getattr(obj.rolling(20, center=True), roll_func)()
  129:     expected = (
  130:         getattr(concat([obj, Series([np.nan] * 9)]).rolling(20), roll_func)()
  131:         .iloc[9:]
  132:         .reset_index(drop=True)
  133:     )
  134:     tm.assert_series_equal(result, expected)
  135: 
  136: 
  137: @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
  138: def test_center_reindex_series(series, roll_func):
  139:     # shifter index
  140:     s = [f"x{x:d}" for x in range(12)]
  141: 
  142:     series_xp = (
  143:         getattr(
  144:             series.reindex(list(series.index) + s).rolling(window=25),
  145:             roll_func,
  146:         )()
  147:         .shift(-12)
  148:         .reindex(series.index)
  149:     )
  150:     series_rs = getattr(series.rolling(window=25, center=True), roll_func)()
  151:     tm.assert_series_equal(series_xp, series_rs)
  152: 
  153: 
  154: @pytest.mark.slow
  155: @pytest.mark.parametrize("roll_func", ["kurt", "skew"])
  156: def test_center_reindex_frame(frame, roll_func):
  157:     # shifter index
  158:     s = [f"x{x:d}" for x in range(12)]
  159: 
  160:     frame_xp = (
  161:         getattr(
  162:             frame.reindex(list(frame.index) + s).rolling(window=25),
  163:             roll_func,
  164:         )()
  165:         .shift(-12)
  166:         .reindex(frame.index)
  167:     )
  168:     frame_rs = getattr(frame.rolling(window=25, center=True), roll_func)()
  169:     tm.assert_frame_equal(frame_xp, frame_rs)
  170: 
  171: 
  172: def test_rolling_skew_edge_cases(step):
  173:     expected = Series([np.nan] * 4 + [0.0])[::step]
  174:     # yields all NaN (0 variance)
  175:     d = Series([1] * 5)
  176:     x = d.rolling(window=5, step=step).skew()
  177:     # index 4 should be 0 as it contains 5 same obs
  178:     tm.assert_series_equal(expected, x)
  179: 
  180:     expected = Series([np.nan] * 5)[::step]
  181:     # yields all NaN (window too small)
  182:     d = Series(np.random.default_rng(2).standard_normal(5))
  183:     x = d.rolling(window=2, step=step).skew()
  184:     tm.assert_series_equal(expected, x)
  185: 
  186:     # yields [NaN, NaN, NaN, 0.177994, 1.548824]
  187:     d = Series([-1.50837035, -0.1297039, 0.19501095, 1.73508164, 0.41941401])
  188:     expected = Series([np.nan, np.nan, np.nan, 0.177994, 1.548824])[::step]
  189:     x = d.rolling(window=4, step=step).skew()
  190:     tm.assert_series_equal(expected, x)
  191: 
  192: 
  193: def test_rolling_kurt_edge_cases(step):
  194:     expected = Series([np.nan] * 4 + [-3.0])[::step]
  195: 
  196:     # yields all NaN (0 variance)
  197:     d = Series([1] * 5)
  198:     x = d.rolling(window=5, step=step).kurt()
  199:     tm.assert_series_equal(expected, x)
  200: 
  201:     # yields all NaN (window too small)
  202:     expected = Series([np.nan] * 5)[::step]
  203:     d = Series(np.random.default_rng(2).standard_normal(5))
  204:     x = d.rolling(window=3, step=step).kurt()
  205:     tm.assert_series_equal(expected, x)
  206: 
  207:     # yields [NaN, NaN, NaN, 1.224307, 2.671499]
  208:     d = Series([-1.50837035, -0.1297039, 0.19501095, 1.73508164, 0.41941401])
  209:     expected = Series([np.nan, np.nan, np.nan, 1.224307, 2.671499])[::step]
  210:     x = d.rolling(window=4, step=step).kurt()
  211:     tm.assert_series_equal(expected, x)
  212: 
  213: 
  214: def test_rolling_skew_eq_value_fperr(step):
  215:     # #18804 all rolling skew for all equal values should return Nan
  216:     # #46717 update: all equal values should return 0 instead of NaN
  217:     a = Series([1.1] * 15).rolling(window=10, step=step).skew()
  218:     assert (a[a.index >= 9] == 0).all()
  219:     assert a[a.index < 9].isna().all()
  220: 
  221: 
  222: def test_rolling_kurt_eq_value_fperr(step):
  223:     # #18804 all rolling kurt for all equal values should return Nan
  224:     # #46717 update: all equal values should return -3 instead of NaN
  225:     a = Series([1.1] * 15).rolling(window=10, step=step).kurt()
  226:     assert (a[a.index >= 9] == -3).all()
  227:     assert a[a.index < 9].isna().all()
