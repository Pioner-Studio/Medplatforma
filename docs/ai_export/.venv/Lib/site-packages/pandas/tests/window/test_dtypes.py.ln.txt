    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.errors import DataError
    5: 
    6: from pandas.core.dtypes.common import pandas_dtype
    7: 
    8: from pandas import (
    9:     NA,
   10:     DataFrame,
   11:     Series,
   12: )
   13: import pandas._testing as tm
   14: 
   15: # gh-12373 : rolling functions error on float32 data
   16: # make sure rolling functions works for different dtypes
   17: #
   18: # further note that we are only checking rolling for fully dtype
   19: # compliance (though both expanding and ewm inherit)
   20: 
   21: 
   22: def get_dtype(dtype, coerce_int=None):
   23:     if coerce_int is False and "int" in dtype:
   24:         return None
   25:     return pandas_dtype(dtype)
   26: 
   27: 
   28: @pytest.fixture(
   29:     params=[
   30:         "object",
   31:         "category",
   32:         "int8",
   33:         "int16",
   34:         "int32",
   35:         "int64",
   36:         "uint8",
   37:         "uint16",
   38:         "uint32",
   39:         "uint64",
   40:         "float16",
   41:         "float32",
   42:         "float64",
   43:         "m8[ns]",
   44:         "M8[ns]",
   45:         "datetime64[ns, UTC]",
   46:     ]
   47: )
   48: def dtypes(request):
   49:     """Dtypes for window tests"""
   50:     return request.param
   51: 
   52: 
   53: @pytest.mark.parametrize(
   54:     "method, data, expected_data, coerce_int, min_periods",
   55:     [
   56:         ("count", np.arange(5), [1, 2, 2, 2, 2], True, 0),
   57:         ("count", np.arange(10, 0, -2), [1, 2, 2, 2, 2], True, 0),
   58:         ("count", [0, 1, 2, np.nan, 4], [1, 2, 2, 1, 1], False, 0),
   59:         ("max", np.arange(5), [np.nan, 1, 2, 3, 4], True, None),
   60:         ("max", np.arange(10, 0, -2), [np.nan, 10, 8, 6, 4], True, None),
   61:         ("max", [0, 1, 2, np.nan, 4], [np.nan, 1, 2, np.nan, np.nan], False, None),
   62:         ("min", np.arange(5), [np.nan, 0, 1, 2, 3], True, None),
   63:         ("min", np.arange(10, 0, -2), [np.nan, 8, 6, 4, 2], True, None),
   64:         ("min", [0, 1, 2, np.nan, 4], [np.nan, 0, 1, np.nan, np.nan], False, None),
   65:         ("sum", np.arange(5), [np.nan, 1, 3, 5, 7], True, None),
   66:         ("sum", np.arange(10, 0, -2), [np.nan, 18, 14, 10, 6], True, None),
   67:         ("sum", [0, 1, 2, np.nan, 4], [np.nan, 1, 3, np.nan, np.nan], False, None),
   68:         ("mean", np.arange(5), [np.nan, 0.5, 1.5, 2.5, 3.5], True, None),
   69:         ("mean", np.arange(10, 0, -2), [np.nan, 9, 7, 5, 3], True, None),
   70:         ("mean", [0, 1, 2, np.nan, 4], [np.nan, 0.5, 1.5, np.nan, np.nan], False, None),
   71:         ("std", np.arange(5), [np.nan] + [np.sqrt(0.5)] * 4, True, None),
   72:         ("std", np.arange(10, 0, -2), [np.nan] + [np.sqrt(2)] * 4, True, None),
   73:         (
   74:             "std",
   75:             [0, 1, 2, np.nan, 4],
   76:             [np.nan] + [np.sqrt(0.5)] * 2 + [np.nan] * 2,
   77:             False,
   78:             None,
   79:         ),
   80:         ("var", np.arange(5), [np.nan, 0.5, 0.5, 0.5, 0.5], True, None),
   81:         ("var", np.arange(10, 0, -2), [np.nan, 2, 2, 2, 2], True, None),
   82:         ("var", [0, 1, 2, np.nan, 4], [np.nan, 0.5, 0.5, np.nan, np.nan], False, None),
   83:         ("median", np.arange(5), [np.nan, 0.5, 1.5, 2.5, 3.5], True, None),
   84:         ("median", np.arange(10, 0, -2), [np.nan, 9, 7, 5, 3], True, None),
   85:         (
   86:             "median",
   87:             [0, 1, 2, np.nan, 4],
   88:             [np.nan, 0.5, 1.5, np.nan, np.nan],
   89:             False,
   90:             None,
   91:         ),
   92:     ],
   93: )
   94: def test_series_dtypes(
   95:     method, data, expected_data, coerce_int, dtypes, min_periods, step
   96: ):
   97:     ser = Series(data, dtype=get_dtype(dtypes, coerce_int=coerce_int))
   98:     rolled = ser.rolling(2, min_periods=min_periods, step=step)
   99: 
  100:     if dtypes in ("m8[ns]", "M8[ns]", "datetime64[ns, UTC]") and method != "count":
  101:         msg = "No numeric types to aggregate"
  102:         with pytest.raises(DataError, match=msg):
  103:             getattr(rolled, method)()
  104:     else:
  105:         result = getattr(rolled, method)()
  106:         expected = Series(expected_data, dtype="float64")[::step]
  107:         tm.assert_almost_equal(result, expected)
  108: 
  109: 
  110: def test_series_nullable_int(any_signed_int_ea_dtype, step):
  111:     # GH 43016
  112:     ser = Series([0, 1, NA], dtype=any_signed_int_ea_dtype)
  113:     result = ser.rolling(2, step=step).mean()
  114:     expected = Series([np.nan, 0.5, np.nan])[::step]
  115:     tm.assert_series_equal(result, expected)
  116: 
  117: 
  118: @pytest.mark.parametrize(
  119:     "method, expected_data, min_periods",
  120:     [
  121:         ("count", {0: Series([1, 2, 2, 2, 2]), 1: Series([1, 2, 2, 2, 2])}, 0),
  122:         (
  123:             "max",
  124:             {0: Series([np.nan, 2, 4, 6, 8]), 1: Series([np.nan, 3, 5, 7, 9])},
  125:             None,
  126:         ),
  127:         (
  128:             "min",
  129:             {0: Series([np.nan, 0, 2, 4, 6]), 1: Series([np.nan, 1, 3, 5, 7])},
  130:             None,
  131:         ),
  132:         (
  133:             "sum",
  134:             {0: Series([np.nan, 2, 6, 10, 14]), 1: Series([np.nan, 4, 8, 12, 16])},
  135:             None,
  136:         ),
  137:         (
  138:             "mean",
  139:             {0: Series([np.nan, 1, 3, 5, 7]), 1: Series([np.nan, 2, 4, 6, 8])},
  140:             None,
  141:         ),
  142:         (
  143:             "std",
  144:             {
  145:                 0: Series([np.nan] + [np.sqrt(2)] * 4),
  146:                 1: Series([np.nan] + [np.sqrt(2)] * 4),
  147:             },
  148:             None,
  149:         ),
  150:         (
  151:             "var",
  152:             {0: Series([np.nan, 2, 2, 2, 2]), 1: Series([np.nan, 2, 2, 2, 2])},
  153:             None,
  154:         ),
  155:         (
  156:             "median",
  157:             {0: Series([np.nan, 1, 3, 5, 7]), 1: Series([np.nan, 2, 4, 6, 8])},
  158:             None,
  159:         ),
  160:     ],
  161: )
  162: def test_dataframe_dtypes(method, expected_data, dtypes, min_periods, step):
  163:     df = DataFrame(np.arange(10).reshape((5, 2)), dtype=get_dtype(dtypes))
  164:     rolled = df.rolling(2, min_periods=min_periods, step=step)
  165: 
  166:     if dtypes in ("m8[ns]", "M8[ns]", "datetime64[ns, UTC]") and method != "count":
  167:         msg = "Cannot aggregate non-numeric type"
  168:         with pytest.raises(DataError, match=msg):
  169:             getattr(rolled, method)()
  170:     else:
  171:         result = getattr(rolled, method)()
  172:         expected = DataFrame(expected_data, dtype="float64")[::step]
  173:         tm.assert_frame_equal(result, expected)
