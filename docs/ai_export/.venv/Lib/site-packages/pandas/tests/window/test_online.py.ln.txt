    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7: )
    8: import pandas._testing as tm
    9: 
   10: pytestmark = pytest.mark.single_cpu
   11: 
   12: pytest.importorskip("numba")
   13: 
   14: 
   15: @pytest.mark.filterwarnings("ignore")
   16: # Filter warnings when parallel=True and the function can't be parallelized by Numba
   17: class TestEWM:
   18:     def test_invalid_update(self):
   19:         df = DataFrame({"a": range(5), "b": range(5)})
   20:         online_ewm = df.head(2).ewm(0.5).online()
   21:         with pytest.raises(
   22:             ValueError,
   23:             match="Must call mean with update=None first before passing update",
   24:         ):
   25:             online_ewm.mean(update=df.head(1))
   26: 
   27:     @pytest.mark.slow
   28:     @pytest.mark.parametrize(
   29:         "obj", [DataFrame({"a": range(5), "b": range(5)}), Series(range(5), name="foo")]
   30:     )
   31:     def test_online_vs_non_online_mean(
   32:         self, obj, nogil, parallel, nopython, adjust, ignore_na
   33:     ):
   34:         expected = obj.ewm(0.5, adjust=adjust, ignore_na=ignore_na).mean()
   35:         engine_kwargs = {"nogil": nogil, "parallel": parallel, "nopython": nopython}
   36: 
   37:         online_ewm = (
   38:             obj.head(2)
   39:             .ewm(0.5, adjust=adjust, ignore_na=ignore_na)
   40:             .online(engine_kwargs=engine_kwargs)
   41:         )
   42:         # Test resetting once
   43:         for _ in range(2):
   44:             result = online_ewm.mean()
   45:             tm.assert_equal(result, expected.head(2))
   46: 
   47:             result = online_ewm.mean(update=obj.tail(3))
   48:             tm.assert_equal(result, expected.tail(3))
   49: 
   50:             online_ewm.reset()
   51: 
   52:     @pytest.mark.xfail(raises=NotImplementedError)
   53:     @pytest.mark.parametrize(
   54:         "obj", [DataFrame({"a": range(5), "b": range(5)}), Series(range(5), name="foo")]
   55:     )
   56:     def test_update_times_mean(
   57:         self, obj, nogil, parallel, nopython, adjust, ignore_na, halflife_with_times
   58:     ):
   59:         times = Series(
   60:             np.array(
   61:                 ["2020-01-01", "2020-01-05", "2020-01-07", "2020-01-17", "2020-01-21"],
   62:                 dtype="datetime64[ns]",
   63:             )
   64:         )
   65:         expected = obj.ewm(
   66:             0.5,
   67:             adjust=adjust,
   68:             ignore_na=ignore_na,
   69:             times=times,
   70:             halflife=halflife_with_times,
   71:         ).mean()
   72: 
   73:         engine_kwargs = {"nogil": nogil, "parallel": parallel, "nopython": nopython}
   74:         online_ewm = (
   75:             obj.head(2)
   76:             .ewm(
   77:                 0.5,
   78:                 adjust=adjust,
   79:                 ignore_na=ignore_na,
   80:                 times=times.head(2),
   81:                 halflife=halflife_with_times,
   82:             )
   83:             .online(engine_kwargs=engine_kwargs)
   84:         )
   85:         # Test resetting once
   86:         for _ in range(2):
   87:             result = online_ewm.mean()
   88:             tm.assert_equal(result, expected.head(2))
   89: 
   90:             result = online_ewm.mean(update=obj.tail(3), update_times=times.tail(3))
   91:             tm.assert_equal(result, expected.tail(3))
   92: 
   93:             online_ewm.reset()
   94: 
   95:     @pytest.mark.parametrize("method", ["aggregate", "std", "corr", "cov", "var"])
   96:     def test_ewm_notimplementederror_raises(self, method):
   97:         ser = Series(range(10))
   98:         kwargs = {}
   99:         if method == "aggregate":
  100:             kwargs["func"] = lambda x: x
  101: 
  102:         with pytest.raises(NotImplementedError, match=".* is not implemented."):
  103:             getattr(ser.ewm(1).online(), method)(**kwargs)
