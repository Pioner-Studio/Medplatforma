    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7:     concat,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def create_mock_weights(obj, com, adjust, ignore_na):
   13:     if isinstance(obj, DataFrame):
   14:         if not len(obj.columns):
   15:             return DataFrame(index=obj.index, columns=obj.columns)
   16:         w = concat(
   17:             [
   18:                 create_mock_series_weights(
   19:                     obj.iloc[:, i], com=com, adjust=adjust, ignore_na=ignore_na
   20:                 )
   21:                 for i in range(len(obj.columns))
   22:             ],
   23:             axis=1,
   24:         )
   25:         w.index = obj.index
   26:         w.columns = obj.columns
   27:         return w
   28:     else:
   29:         return create_mock_series_weights(obj, com, adjust, ignore_na)
   30: 
   31: 
   32: def create_mock_series_weights(s, com, adjust, ignore_na):
   33:     w = Series(np.nan, index=s.index, name=s.name)
   34:     alpha = 1.0 / (1.0 + com)
   35:     if adjust:
   36:         count = 0
   37:         for i in range(len(s)):
   38:             if s.iat[i] == s.iat[i]:
   39:                 w.iat[i] = pow(1.0 / (1.0 - alpha), count)
   40:                 count += 1
   41:             elif not ignore_na:
   42:                 count += 1
   43:     else:
   44:         sum_wts = 0.0
   45:         prev_i = -1
   46:         count = 0
   47:         for i in range(len(s)):
   48:             if s.iat[i] == s.iat[i]:
   49:                 if prev_i == -1:
   50:                     w.iat[i] = 1.0
   51:                 else:
   52:                     w.iat[i] = alpha * sum_wts / pow(1.0 - alpha, count - prev_i)
   53:                 sum_wts += w.iat[i]
   54:                 prev_i = count
   55:                 count += 1
   56:             elif not ignore_na:
   57:                 count += 1
   58:     return w
   59: 
   60: 
   61: def test_ewm_consistency_mean(all_data, adjust, ignore_na, min_periods):
   62:     com = 3.0
   63: 
   64:     result = all_data.ewm(
   65:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
   66:     ).mean()
   67:     weights = create_mock_weights(all_data, com=com, adjust=adjust, ignore_na=ignore_na)
   68:     expected = all_data.multiply(weights).cumsum().divide(weights.cumsum()).ffill()
   69:     expected[
   70:         all_data.expanding().count() < (max(min_periods, 1) if min_periods else 1)
   71:     ] = np.nan
   72:     tm.assert_equal(result, expected.astype("float64"))
   73: 
   74: 
   75: def test_ewm_consistency_consistent(consistent_data, adjust, ignore_na, min_periods):
   76:     com = 3.0
   77: 
   78:     count_x = consistent_data.expanding().count()
   79:     mean_x = consistent_data.ewm(
   80:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
   81:     ).mean()
   82:     # check that correlation of a series with itself is either 1 or NaN
   83:     corr_x_x = consistent_data.ewm(
   84:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
   85:     ).corr(consistent_data)
   86:     exp = (
   87:         consistent_data.max()
   88:         if isinstance(consistent_data, Series)
   89:         else consistent_data.max().max()
   90:     )
   91: 
   92:     # check mean of constant series
   93:     expected = consistent_data * np.nan
   94:     expected[count_x >= max(min_periods, 1)] = exp
   95:     tm.assert_equal(mean_x, expected)
   96: 
   97:     # check correlation of constant series with itself is NaN
   98:     expected[:] = np.nan
   99:     tm.assert_equal(corr_x_x, expected)
  100: 
  101: 
  102: def test_ewm_consistency_var_debiasing_factors(
  103:     all_data, adjust, ignore_na, min_periods
  104: ):
  105:     com = 3.0
  106: 
  107:     # check variance debiasing factors
  108:     var_unbiased_x = all_data.ewm(
  109:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  110:     ).var(bias=False)
  111:     var_biased_x = all_data.ewm(
  112:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  113:     ).var(bias=True)
  114: 
  115:     weights = create_mock_weights(all_data, com=com, adjust=adjust, ignore_na=ignore_na)
  116:     cum_sum = weights.cumsum().ffill()
  117:     cum_sum_sq = (weights * weights).cumsum().ffill()
  118:     numerator = cum_sum * cum_sum
  119:     denominator = numerator - cum_sum_sq
  120:     denominator[denominator <= 0.0] = np.nan
  121:     var_debiasing_factors_x = numerator / denominator
  122: 
  123:     tm.assert_equal(var_unbiased_x, var_biased_x * var_debiasing_factors_x)
  124: 
  125: 
  126: @pytest.mark.parametrize("bias", [True, False])
  127: def test_moments_consistency_var(all_data, adjust, ignore_na, min_periods, bias):
  128:     com = 3.0
  129: 
  130:     mean_x = all_data.ewm(
  131:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  132:     ).mean()
  133:     var_x = all_data.ewm(
  134:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  135:     ).var(bias=bias)
  136:     assert not (var_x < 0).any().any()
  137: 
  138:     if bias:
  139:         # check that biased var(x) == mean(x^2) - mean(x)^2
  140:         mean_x2 = (
  141:             (all_data * all_data)
  142:             .ewm(com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na)
  143:             .mean()
  144:         )
  145:         tm.assert_equal(var_x, mean_x2 - (mean_x * mean_x))
  146: 
  147: 
  148: @pytest.mark.parametrize("bias", [True, False])
  149: def test_moments_consistency_var_constant(
  150:     consistent_data, adjust, ignore_na, min_periods, bias
  151: ):
  152:     com = 3.0
  153:     count_x = consistent_data.expanding(min_periods=min_periods).count()
  154:     var_x = consistent_data.ewm(
  155:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  156:     ).var(bias=bias)
  157: 
  158:     # check that variance of constant series is identically 0
  159:     assert not (var_x > 0).any().any()
  160:     expected = consistent_data * np.nan
  161:     expected[count_x >= max(min_periods, 1)] = 0.0
  162:     if not bias:
  163:         expected[count_x < 2] = np.nan
  164:     tm.assert_equal(var_x, expected)
  165: 
  166: 
  167: @pytest.mark.parametrize("bias", [True, False])
  168: def test_ewm_consistency_std(all_data, adjust, ignore_na, min_periods, bias):
  169:     com = 3.0
  170:     var_x = all_data.ewm(
  171:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  172:     ).var(bias=bias)
  173:     assert not (var_x < 0).any().any()
  174: 
  175:     std_x = all_data.ewm(
  176:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  177:     ).std(bias=bias)
  178:     assert not (std_x < 0).any().any()
  179: 
  180:     # check that var(x) == std(x)^2
  181:     tm.assert_equal(var_x, std_x * std_x)
  182: 
  183:     cov_x_x = all_data.ewm(
  184:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  185:     ).cov(all_data, bias=bias)
  186:     assert not (cov_x_x < 0).any().any()
  187: 
  188:     # check that var(x) == cov(x, x)
  189:     tm.assert_equal(var_x, cov_x_x)
  190: 
  191: 
  192: @pytest.mark.parametrize("bias", [True, False])
  193: def test_ewm_consistency_series_cov_corr(
  194:     series_data, adjust, ignore_na, min_periods, bias
  195: ):
  196:     com = 3.0
  197: 
  198:     var_x_plus_y = (
  199:         (series_data + series_data)
  200:         .ewm(com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na)
  201:         .var(bias=bias)
  202:     )
  203:     var_x = series_data.ewm(
  204:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  205:     ).var(bias=bias)
  206:     var_y = series_data.ewm(
  207:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  208:     ).var(bias=bias)
  209:     cov_x_y = series_data.ewm(
  210:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  211:     ).cov(series_data, bias=bias)
  212:     # check that cov(x, y) == (var(x+y) - var(x) -
  213:     # var(y)) / 2
  214:     tm.assert_equal(cov_x_y, 0.5 * (var_x_plus_y - var_x - var_y))
  215: 
  216:     # check that corr(x, y) == cov(x, y) / (std(x) *
  217:     # std(y))
  218:     corr_x_y = series_data.ewm(
  219:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  220:     ).corr(series_data)
  221:     std_x = series_data.ewm(
  222:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  223:     ).std(bias=bias)
  224:     std_y = series_data.ewm(
  225:         com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  226:     ).std(bias=bias)
  227:     tm.assert_equal(corr_x_y, cov_x_y / (std_x * std_y))
  228: 
  229:     if bias:
  230:         # check that biased cov(x, y) == mean(x*y) -
  231:         # mean(x)*mean(y)
  232:         mean_x = series_data.ewm(
  233:             com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  234:         ).mean()
  235:         mean_y = series_data.ewm(
  236:             com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na
  237:         ).mean()
  238:         mean_x_times_y = (
  239:             (series_data * series_data)
  240:             .ewm(com=com, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na)
  241:             .mean()
  242:         )
  243:         tm.assert_equal(cov_x_y, mean_x_times_y - (mean_x * mean_y))
