    1: import itertools
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     Series,
    9:     notna,
   10: )
   11: 
   12: 
   13: def create_series():
   14:     return [
   15:         Series(dtype=np.float64, name="a"),
   16:         Series([np.nan] * 5),
   17:         Series([1.0] * 5),
   18:         Series(range(5, 0, -1)),
   19:         Series(range(5)),
   20:         Series([np.nan, 1.0, np.nan, 1.0, 1.0]),
   21:         Series([np.nan, 1.0, np.nan, 2.0, 3.0]),
   22:         Series([np.nan, 1.0, np.nan, 3.0, 2.0]),
   23:     ]
   24: 
   25: 
   26: def create_dataframes():
   27:     return [
   28:         DataFrame(columns=["a", "a"]),
   29:         DataFrame(np.arange(15).reshape((5, 3)), columns=["a", "a", 99]),
   30:     ] + [DataFrame(s) for s in create_series()]
   31: 
   32: 
   33: def is_constant(x):
   34:     values = x.values.ravel("K")
   35:     return len(set(values[notna(values)])) == 1
   36: 
   37: 
   38: @pytest.fixture(
   39:     params=(
   40:         obj
   41:         for obj in itertools.chain(create_series(), create_dataframes())
   42:         if is_constant(obj)
   43:     ),
   44: )
   45: def consistent_data(request):
   46:     return request.param
   47: 
   48: 
   49: @pytest.fixture(params=create_series())
   50: def series_data(request):
   51:     return request.param
   52: 
   53: 
   54: @pytest.fixture(params=itertools.chain(create_series(), create_dataframes()))
   55: def all_data(request):
   56:     """
   57:     Test:
   58:         - Empty Series / DataFrame
   59:         - All NaN
   60:         - All consistent value
   61:         - Monotonically decreasing
   62:         - Monotonically increasing
   63:         - Monotonically consistent with NaNs
   64:         - Monotonically increasing with NaNs
   65:         - Monotonically decreasing with NaNs
   66:     """
   67:     return request.param
   68: 
   69: 
   70: @pytest.fixture(params=[0, 2])
   71: def min_periods(request):
   72:     return request.param
