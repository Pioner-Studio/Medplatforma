    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs import join as libjoin
    5: from pandas._libs.join import (
    6:     inner_join,
    7:     left_outer_join,
    8: )
    9: 
   10: import pandas._testing as tm
   11: 
   12: 
   13: class TestIndexer:
   14:     @pytest.mark.parametrize(
   15:         "dtype", ["int32", "int64", "float32", "float64", "object"]
   16:     )
   17:     def test_outer_join_indexer(self, dtype):
   18:         indexer = libjoin.outer_join_indexer
   19: 
   20:         left = np.arange(3, dtype=dtype)
   21:         right = np.arange(2, 5, dtype=dtype)
   22:         empty = np.array([], dtype=dtype)
   23: 
   24:         result, lindexer, rindexer = indexer(left, right)
   25:         assert isinstance(result, np.ndarray)
   26:         assert isinstance(lindexer, np.ndarray)
   27:         assert isinstance(rindexer, np.ndarray)
   28:         tm.assert_numpy_array_equal(result, np.arange(5, dtype=dtype))
   29:         exp = np.array([0, 1, 2, -1, -1], dtype=np.intp)
   30:         tm.assert_numpy_array_equal(lindexer, exp)
   31:         exp = np.array([-1, -1, 0, 1, 2], dtype=np.intp)
   32:         tm.assert_numpy_array_equal(rindexer, exp)
   33: 
   34:         result, lindexer, rindexer = indexer(empty, right)
   35:         tm.assert_numpy_array_equal(result, right)
   36:         exp = np.array([-1, -1, -1], dtype=np.intp)
   37:         tm.assert_numpy_array_equal(lindexer, exp)
   38:         exp = np.array([0, 1, 2], dtype=np.intp)
   39:         tm.assert_numpy_array_equal(rindexer, exp)
   40: 
   41:         result, lindexer, rindexer = indexer(left, empty)
   42:         tm.assert_numpy_array_equal(result, left)
   43:         exp = np.array([0, 1, 2], dtype=np.intp)
   44:         tm.assert_numpy_array_equal(lindexer, exp)
   45:         exp = np.array([-1, -1, -1], dtype=np.intp)
   46:         tm.assert_numpy_array_equal(rindexer, exp)
   47: 
   48:     def test_cython_left_outer_join(self):
   49:         left = np.array([0, 1, 2, 1, 2, 0, 0, 1, 2, 3, 3], dtype=np.intp)
   50:         right = np.array([1, 1, 0, 4, 2, 2, 1], dtype=np.intp)
   51:         max_group = 5
   52: 
   53:         ls, rs = left_outer_join(left, right, max_group)
   54: 
   55:         exp_ls = left.argsort(kind="mergesort")
   56:         exp_rs = right.argsort(kind="mergesort")
   57: 
   58:         exp_li = np.array([0, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10])
   59:         exp_ri = np.array(
   60:             [0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 4, 5, -1, -1]
   61:         )
   62: 
   63:         exp_ls = exp_ls.take(exp_li)
   64:         exp_ls[exp_li == -1] = -1
   65: 
   66:         exp_rs = exp_rs.take(exp_ri)
   67:         exp_rs[exp_ri == -1] = -1
   68: 
   69:         tm.assert_numpy_array_equal(ls, exp_ls, check_dtype=False)
   70:         tm.assert_numpy_array_equal(rs, exp_rs, check_dtype=False)
   71: 
   72:     def test_cython_right_outer_join(self):
   73:         left = np.array([0, 1, 2, 1, 2, 0, 0, 1, 2, 3, 3], dtype=np.intp)
   74:         right = np.array([1, 1, 0, 4, 2, 2, 1], dtype=np.intp)
   75:         max_group = 5
   76: 
   77:         rs, ls = left_outer_join(right, left, max_group)
   78: 
   79:         exp_ls = left.argsort(kind="mergesort")
   80:         exp_rs = right.argsort(kind="mergesort")
   81: 
   82:         #            0        1        1        1
   83:         exp_li = np.array(
   84:             [
   85:                 0,
   86:                 1,
   87:                 2,
   88:                 3,
   89:                 4,
   90:                 5,
   91:                 3,
   92:                 4,
   93:                 5,
   94:                 3,
   95:                 4,
   96:                 5,
   97:                 #            2        2        4
   98:                 6,
   99:                 7,
  100:                 8,
  101:                 6,
  102:                 7,
  103:                 8,
  104:                 -1,
  105:             ]
  106:         )
  107:         exp_ri = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6])
  108: 
  109:         exp_ls = exp_ls.take(exp_li)
  110:         exp_ls[exp_li == -1] = -1
  111: 
  112:         exp_rs = exp_rs.take(exp_ri)
  113:         exp_rs[exp_ri == -1] = -1
  114: 
  115:         tm.assert_numpy_array_equal(ls, exp_ls)
  116:         tm.assert_numpy_array_equal(rs, exp_rs)
  117: 
  118:     def test_cython_inner_join(self):
  119:         left = np.array([0, 1, 2, 1, 2, 0, 0, 1, 2, 3, 3], dtype=np.intp)
  120:         right = np.array([1, 1, 0, 4, 2, 2, 1, 4], dtype=np.intp)
  121:         max_group = 5
  122: 
  123:         ls, rs = inner_join(left, right, max_group)
  124: 
  125:         exp_ls = left.argsort(kind="mergesort")
  126:         exp_rs = right.argsort(kind="mergesort")
  127: 
  128:         exp_li = np.array([0, 1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8])
  129:         exp_ri = np.array([0, 0, 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 5, 4, 5, 4, 5])
  130: 
  131:         exp_ls = exp_ls.take(exp_li)
  132:         exp_ls[exp_li == -1] = -1
  133: 
  134:         exp_rs = exp_rs.take(exp_ri)
  135:         exp_rs[exp_ri == -1] = -1
  136: 
  137:         tm.assert_numpy_array_equal(ls, exp_ls)
  138:         tm.assert_numpy_array_equal(rs, exp_rs)
  139: 
  140: 
  141: @pytest.mark.parametrize("readonly", [True, False])
  142: def test_left_join_indexer_unique(readonly):
  143:     a = np.array([1, 2, 3, 4, 5], dtype=np.int64)
  144:     b = np.array([2, 2, 3, 4, 4], dtype=np.int64)
  145:     if readonly:
  146:         # GH#37312, GH#37264
  147:         a.setflags(write=False)
  148:         b.setflags(write=False)
  149: 
  150:     result = libjoin.left_join_indexer_unique(b, a)
  151:     expected = np.array([1, 1, 2, 3, 3], dtype=np.intp)
  152:     tm.assert_numpy_array_equal(result, expected)
  153: 
  154: 
  155: def test_left_outer_join_bug():
  156:     left = np.array(
  157:         [
  158:             0,
  159:             1,
  160:             0,
  161:             1,
  162:             1,
  163:             2,
  164:             3,
  165:             1,
  166:             0,
  167:             2,
  168:             1,
  169:             2,
  170:             0,
  171:             1,
  172:             1,
  173:             2,
  174:             3,
  175:             2,
  176:             3,
  177:             2,
  178:             1,
  179:             1,
  180:             3,
  181:             0,
  182:             3,
  183:             2,
  184:             3,
  185:             0,
  186:             0,
  187:             2,
  188:             3,
  189:             2,
  190:             0,
  191:             3,
  192:             1,
  193:             3,
  194:             0,
  195:             1,
  196:             3,
  197:             0,
  198:             0,
  199:             1,
  200:             0,
  201:             3,
  202:             1,
  203:             0,
  204:             1,
  205:             0,
  206:             1,
  207:             1,
  208:             0,
  209:             2,
  210:             2,
  211:             2,
  212:             2,
  213:             2,
  214:             0,
  215:             3,
  216:             1,
  217:             2,
  218:             0,
  219:             0,
  220:             3,
  221:             1,
  222:             3,
  223:             2,
  224:             2,
  225:             0,
  226:             1,
  227:             3,
  228:             0,
  229:             2,
  230:             3,
  231:             2,
  232:             3,
  233:             3,
  234:             2,
  235:             3,
  236:             3,
  237:             1,
  238:             3,
  239:             2,
  240:             0,
  241:             0,
  242:             3,
  243:             1,
  244:             1,
  245:             1,
  246:             0,
  247:             2,
  248:             3,
  249:             3,
  250:             1,
  251:             2,
  252:             0,
  253:             3,
  254:             1,
  255:             2,
  256:             0,
  257:             2,
  258:         ],
  259:         dtype=np.intp,
  260:     )
  261: 
  262:     right = np.array([3, 1], dtype=np.intp)
  263:     max_groups = 4
  264: 
  265:     lidx, ridx = libjoin.left_outer_join(left, right, max_groups, sort=False)
  266: 
  267:     exp_lidx = np.arange(len(left), dtype=np.intp)
  268:     exp_ridx = -np.ones(len(left), dtype=np.intp)
  269: 
  270:     exp_ridx[left == 1] = 1
  271:     exp_ridx[left == 3] = 0
  272: 
  273:     tm.assert_numpy_array_equal(lidx, exp_lidx)
  274:     tm.assert_numpy_array_equal(ridx, exp_ridx)
  275: 
  276: 
  277: def test_inner_join_indexer():
  278:     a = np.array([1, 2, 3, 4, 5], dtype=np.int64)
  279:     b = np.array([0, 3, 5, 7, 9], dtype=np.int64)
  280: 
  281:     index, ares, bres = libjoin.inner_join_indexer(a, b)
  282: 
  283:     index_exp = np.array([3, 5], dtype=np.int64)
  284:     tm.assert_almost_equal(index, index_exp)
  285: 
  286:     aexp = np.array([2, 4], dtype=np.intp)
  287:     bexp = np.array([1, 2], dtype=np.intp)
  288:     tm.assert_almost_equal(ares, aexp)
  289:     tm.assert_almost_equal(bres, bexp)
  290: 
  291:     a = np.array([5], dtype=np.int64)
  292:     b = np.array([5], dtype=np.int64)
  293: 
  294:     index, ares, bres = libjoin.inner_join_indexer(a, b)
  295:     tm.assert_numpy_array_equal(index, np.array([5], dtype=np.int64))
  296:     tm.assert_numpy_array_equal(ares, np.array([0], dtype=np.intp))
  297:     tm.assert_numpy_array_equal(bres, np.array([0], dtype=np.intp))
  298: 
  299: 
  300: def test_outer_join_indexer():
  301:     a = np.array([1, 2, 3, 4, 5], dtype=np.int64)
  302:     b = np.array([0, 3, 5, 7, 9], dtype=np.int64)
  303: 
  304:     index, ares, bres = libjoin.outer_join_indexer(a, b)
  305: 
  306:     index_exp = np.array([0, 1, 2, 3, 4, 5, 7, 9], dtype=np.int64)
  307:     tm.assert_almost_equal(index, index_exp)
  308: 
  309:     aexp = np.array([-1, 0, 1, 2, 3, 4, -1, -1], dtype=np.intp)
  310:     bexp = np.array([0, -1, -1, 1, -1, 2, 3, 4], dtype=np.intp)
  311:     tm.assert_almost_equal(ares, aexp)
  312:     tm.assert_almost_equal(bres, bexp)
  313: 
  314:     a = np.array([5], dtype=np.int64)
  315:     b = np.array([5], dtype=np.int64)
  316: 
  317:     index, ares, bres = libjoin.outer_join_indexer(a, b)
  318:     tm.assert_numpy_array_equal(index, np.array([5], dtype=np.int64))
  319:     tm.assert_numpy_array_equal(ares, np.array([0], dtype=np.intp))
  320:     tm.assert_numpy_array_equal(bres, np.array([0], dtype=np.intp))
  321: 
  322: 
  323: def test_left_join_indexer():
  324:     a = np.array([1, 2, 3, 4, 5], dtype=np.int64)
  325:     b = np.array([0, 3, 5, 7, 9], dtype=np.int64)
  326: 
  327:     index, ares, bres = libjoin.left_join_indexer(a, b)
  328: 
  329:     tm.assert_almost_equal(index, a)
  330: 
  331:     aexp = np.array([0, 1, 2, 3, 4], dtype=np.intp)
  332:     bexp = np.array([-1, -1, 1, -1, 2], dtype=np.intp)
  333:     tm.assert_almost_equal(ares, aexp)
  334:     tm.assert_almost_equal(bres, bexp)
  335: 
  336:     a = np.array([5], dtype=np.int64)
  337:     b = np.array([5], dtype=np.int64)
  338: 
  339:     index, ares, bres = libjoin.left_join_indexer(a, b)
  340:     tm.assert_numpy_array_equal(index, np.array([5], dtype=np.int64))
  341:     tm.assert_numpy_array_equal(ares, np.array([0], dtype=np.intp))
  342:     tm.assert_numpy_array_equal(bres, np.array([0], dtype=np.intp))
  343: 
  344: 
  345: def test_left_join_indexer2():
  346:     idx = np.array([1, 1, 2, 5], dtype=np.int64)
  347:     idx2 = np.array([1, 2, 5, 7, 9], dtype=np.int64)
  348: 
  349:     res, lidx, ridx = libjoin.left_join_indexer(idx2, idx)
  350: 
  351:     exp_res = np.array([1, 1, 2, 5, 7, 9], dtype=np.int64)
  352:     tm.assert_almost_equal(res, exp_res)
  353: 
  354:     exp_lidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
  355:     tm.assert_almost_equal(lidx, exp_lidx)
  356: 
  357:     exp_ridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
  358:     tm.assert_almost_equal(ridx, exp_ridx)
  359: 
  360: 
  361: def test_outer_join_indexer2():
  362:     idx = np.array([1, 1, 2, 5], dtype=np.int64)
  363:     idx2 = np.array([1, 2, 5, 7, 9], dtype=np.int64)
  364: 
  365:     res, lidx, ridx = libjoin.outer_join_indexer(idx2, idx)
  366: 
  367:     exp_res = np.array([1, 1, 2, 5, 7, 9], dtype=np.int64)
  368:     tm.assert_almost_equal(res, exp_res)
  369: 
  370:     exp_lidx = np.array([0, 0, 1, 2, 3, 4], dtype=np.intp)
  371:     tm.assert_almost_equal(lidx, exp_lidx)
  372: 
  373:     exp_ridx = np.array([0, 1, 2, 3, -1, -1], dtype=np.intp)
  374:     tm.assert_almost_equal(ridx, exp_ridx)
  375: 
  376: 
  377: def test_inner_join_indexer2():
  378:     idx = np.array([1, 1, 2, 5], dtype=np.int64)
  379:     idx2 = np.array([1, 2, 5, 7, 9], dtype=np.int64)
  380: 
  381:     res, lidx, ridx = libjoin.inner_join_indexer(idx2, idx)
  382: 
  383:     exp_res = np.array([1, 1, 2, 5], dtype=np.int64)
  384:     tm.assert_almost_equal(res, exp_res)
  385: 
  386:     exp_lidx = np.array([0, 0, 1, 2], dtype=np.intp)
  387:     tm.assert_almost_equal(lidx, exp_lidx)
  388: 
  389:     exp_ridx = np.array([0, 1, 2, 3], dtype=np.intp)
  390:     tm.assert_almost_equal(ridx, exp_ridx)
