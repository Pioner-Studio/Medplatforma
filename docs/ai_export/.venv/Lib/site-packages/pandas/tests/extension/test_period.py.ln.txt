    1: """
    2: This file contains a minimal set of tests for compliance with the extension
    3: array interface test suite, and should contain no other tests.
    4: The test suite for the full functionality of the array is located in
    5: `pandas/tests/arrays/`.
    6: 
    7: The tests in this file are inherited from the BaseExtensionTests, and only
    8: minimal tweaks should be applied to get the tests passing (by overwriting a
    9: parent method).
   10: 
   11: Additional tests should either be added to one of the BaseExtensionTests
   12: classes (if they are relevant for the extension interface for all dtypes), or
   13: be added to the array-specific tests in `pandas/tests/arrays/`.
   14: 
   15: """
   16: from __future__ import annotations
   17: 
   18: from typing import TYPE_CHECKING
   19: 
   20: import numpy as np
   21: import pytest
   22: 
   23: from pandas._libs import (
   24:     Period,
   25:     iNaT,
   26: )
   27: from pandas.compat import is_platform_windows
   28: from pandas.compat.numpy import np_version_gte1p24
   29: 
   30: from pandas.core.dtypes.dtypes import PeriodDtype
   31: 
   32: import pandas._testing as tm
   33: from pandas.core.arrays import PeriodArray
   34: from pandas.tests.extension import base
   35: 
   36: if TYPE_CHECKING:
   37:     import pandas as pd
   38: 
   39: 
   40: @pytest.fixture(params=["D", "2D"])
   41: def dtype(request):
   42:     return PeriodDtype(freq=request.param)
   43: 
   44: 
   45: @pytest.fixture
   46: def data(dtype):
   47:     return PeriodArray(np.arange(1970, 2070), dtype=dtype)
   48: 
   49: 
   50: @pytest.fixture
   51: def data_for_sorting(dtype):
   52:     return PeriodArray([2018, 2019, 2017], dtype=dtype)
   53: 
   54: 
   55: @pytest.fixture
   56: def data_missing(dtype):
   57:     return PeriodArray([iNaT, 2017], dtype=dtype)
   58: 
   59: 
   60: @pytest.fixture
   61: def data_missing_for_sorting(dtype):
   62:     return PeriodArray([2018, iNaT, 2017], dtype=dtype)
   63: 
   64: 
   65: @pytest.fixture
   66: def data_for_grouping(dtype):
   67:     B = 2018
   68:     NA = iNaT
   69:     A = 2017
   70:     C = 2019
   71:     return PeriodArray([B, B, NA, NA, A, A, B, C], dtype=dtype)
   72: 
   73: 
   74: class TestPeriodArray(base.ExtensionTests):
   75:     def _get_expected_exception(self, op_name, obj, other):
   76:         if op_name in ("__sub__", "__rsub__"):
   77:             return None
   78:         return super()._get_expected_exception(op_name, obj, other)
   79: 
   80:     def _supports_accumulation(self, ser, op_name: str) -> bool:
   81:         return op_name in ["cummin", "cummax"]
   82: 
   83:     def _supports_reduction(self, obj, op_name: str) -> bool:
   84:         return op_name in ["min", "max", "median"]
   85: 
   86:     def check_reduce(self, ser: pd.Series, op_name: str, skipna: bool):
   87:         if op_name == "median":
   88:             res_op = getattr(ser, op_name)
   89: 
   90:             alt = ser.astype("int64")
   91: 
   92:             exp_op = getattr(alt, op_name)
   93:             result = res_op(skipna=skipna)
   94:             expected = exp_op(skipna=skipna)
   95:             # error: Item "dtype[Any]" of "dtype[Any] | ExtensionDtype" has no
   96:             # attribute "freq"
   97:             freq = ser.dtype.freq  # type: ignore[union-attr]
   98:             expected = Period._from_ordinal(int(expected), freq=freq)
   99:             tm.assert_almost_equal(result, expected)
  100: 
  101:         else:
  102:             return super().check_reduce(ser, op_name, skipna)
  103: 
  104:     @pytest.mark.parametrize("periods", [1, -2])
  105:     def test_diff(self, data, periods):
  106:         if is_platform_windows() and np_version_gte1p24:
  107:             with tm.assert_produces_warning(RuntimeWarning, check_stacklevel=False):
  108:                 super().test_diff(data, periods)
  109:         else:
  110:             super().test_diff(data, periods)
  111: 
  112:     @pytest.mark.parametrize("na_action", [None, "ignore"])
  113:     def test_map(self, data, na_action):
  114:         result = data.map(lambda x: x, na_action=na_action)
  115:         tm.assert_extension_array_equal(result, data)
  116: 
  117: 
  118: class Test2DCompat(base.NDArrayBacked2DTests):
  119:     pass
