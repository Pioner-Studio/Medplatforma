    1: import pytest
    2: 
    3: import pandas as pd
    4: import pandas._testing as tm
    5: 
    6: 
    7: class BaseAccumulateTests:
    8:     """
    9:     Accumulation specific tests. Generally these only
   10:     make sense for numeric/boolean operations.
   11:     """
   12: 
   13:     def _supports_accumulation(self, ser: pd.Series, op_name: str) -> bool:
   14:         # Do we expect this accumulation to be supported for this dtype?
   15:         # We default to assuming "no"; subclass authors should override here.
   16:         return False
   17: 
   18:     def check_accumulate(self, ser: pd.Series, op_name: str, skipna: bool):
   19:         try:
   20:             alt = ser.astype("float64")
   21:         except TypeError:
   22:             # e.g. Period can't be cast to float64
   23:             alt = ser.astype(object)
   24: 
   25:         result = getattr(ser, op_name)(skipna=skipna)
   26:         expected = getattr(alt, op_name)(skipna=skipna)
   27:         tm.assert_series_equal(result, expected, check_dtype=False)
   28: 
   29:     @pytest.mark.parametrize("skipna", [True, False])
   30:     def test_accumulate_series(self, data, all_numeric_accumulations, skipna):
   31:         op_name = all_numeric_accumulations
   32:         ser = pd.Series(data)
   33: 
   34:         if self._supports_accumulation(ser, op_name):
   35:             self.check_accumulate(ser, op_name, skipna)
   36:         else:
   37:             with pytest.raises((NotImplementedError, TypeError)):
   38:                 # TODO: require TypeError for things that will _never_ work?
   39:                 getattr(ser, op_name)(skipna=skipna)
