    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: class BaseMissingTests:
    9:     def test_isna(self, data_missing):
   10:         expected = np.array([True, False])
   11: 
   12:         result = pd.isna(data_missing)
   13:         tm.assert_numpy_array_equal(result, expected)
   14: 
   15:         result = pd.Series(data_missing).isna()
   16:         expected = pd.Series(expected)
   17:         tm.assert_series_equal(result, expected)
   18: 
   19:         # GH 21189
   20:         result = pd.Series(data_missing).drop([0, 1]).isna()
   21:         expected = pd.Series([], dtype=bool)
   22:         tm.assert_series_equal(result, expected)
   23: 
   24:     @pytest.mark.parametrize("na_func", ["isna", "notna"])
   25:     def test_isna_returns_copy(self, data_missing, na_func):
   26:         result = pd.Series(data_missing)
   27:         expected = result.copy()
   28:         mask = getattr(result, na_func)()
   29:         if isinstance(mask.dtype, pd.SparseDtype):
   30:             mask = np.array(mask)
   31: 
   32:         mask[:] = True
   33:         tm.assert_series_equal(result, expected)
   34: 
   35:     def test_dropna_array(self, data_missing):
   36:         result = data_missing.dropna()
   37:         expected = data_missing[[1]]
   38:         tm.assert_extension_array_equal(result, expected)
   39: 
   40:     def test_dropna_series(self, data_missing):
   41:         ser = pd.Series(data_missing)
   42:         result = ser.dropna()
   43:         expected = ser.iloc[[1]]
   44:         tm.assert_series_equal(result, expected)
   45: 
   46:     def test_dropna_frame(self, data_missing):
   47:         df = pd.DataFrame({"A": data_missing}, columns=pd.Index(["A"], dtype=object))
   48: 
   49:         # defaults
   50:         result = df.dropna()
   51:         expected = df.iloc[[1]]
   52:         tm.assert_frame_equal(result, expected)
   53: 
   54:         # axis = 1
   55:         result = df.dropna(axis="columns")
   56:         expected = pd.DataFrame(index=pd.RangeIndex(2), columns=pd.Index([]))
   57:         tm.assert_frame_equal(result, expected)
   58: 
   59:         # multiple
   60:         df = pd.DataFrame({"A": data_missing, "B": [1, np.nan]})
   61:         result = df.dropna()
   62:         expected = df.iloc[:0]
   63:         tm.assert_frame_equal(result, expected)
   64: 
   65:     def test_fillna_scalar(self, data_missing):
   66:         valid = data_missing[1]
   67:         result = data_missing.fillna(valid)
   68:         expected = data_missing.fillna(valid)
   69:         tm.assert_extension_array_equal(result, expected)
   70: 
   71:     @pytest.mark.filterwarnings(
   72:         "ignore:Series.fillna with 'method' is deprecated:FutureWarning"
   73:     )
   74:     def test_fillna_limit_pad(self, data_missing):
   75:         arr = data_missing.take([1, 0, 0, 0, 1])
   76:         result = pd.Series(arr).ffill(limit=2)
   77:         expected = pd.Series(data_missing.take([1, 1, 1, 0, 1]))
   78:         tm.assert_series_equal(result, expected)
   79: 
   80:     @pytest.mark.parametrize(
   81:         "limit_area, input_ilocs, expected_ilocs",
   82:         [
   83:             ("outside", [1, 0, 0, 0, 1], [1, 0, 0, 0, 1]),
   84:             ("outside", [1, 0, 1, 0, 1], [1, 0, 1, 0, 1]),
   85:             ("outside", [0, 1, 1, 1, 0], [0, 1, 1, 1, 1]),
   86:             ("outside", [0, 1, 0, 1, 0], [0, 1, 0, 1, 1]),
   87:             ("inside", [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]),
   88:             ("inside", [1, 0, 1, 0, 1], [1, 1, 1, 1, 1]),
   89:             ("inside", [0, 1, 1, 1, 0], [0, 1, 1, 1, 0]),
   90:             ("inside", [0, 1, 0, 1, 0], [0, 1, 1, 1, 0]),
   91:         ],
   92:     )
   93:     def test_ffill_limit_area(
   94:         self, data_missing, limit_area, input_ilocs, expected_ilocs
   95:     ):
   96:         # GH#56616
   97:         arr = data_missing.take(input_ilocs)
   98:         result = pd.Series(arr).ffill(limit_area=limit_area)
   99:         expected = pd.Series(data_missing.take(expected_ilocs))
  100:         tm.assert_series_equal(result, expected)
  101: 
  102:     @pytest.mark.filterwarnings(
  103:         "ignore:Series.fillna with 'method' is deprecated:FutureWarning"
  104:     )
  105:     def test_fillna_limit_backfill(self, data_missing):
  106:         arr = data_missing.take([1, 0, 0, 0, 1])
  107:         result = pd.Series(arr).fillna(method="backfill", limit=2)
  108:         expected = pd.Series(data_missing.take([1, 0, 1, 1, 1]))
  109:         tm.assert_series_equal(result, expected)
  110: 
  111:     def test_fillna_no_op_returns_copy(self, data):
  112:         data = data[~data.isna()]
  113: 
  114:         valid = data[0]
  115:         result = data.fillna(valid)
  116:         assert result is not data
  117:         tm.assert_extension_array_equal(result, data)
  118: 
  119:         result = data._pad_or_backfill(method="backfill")
  120:         assert result is not data
  121:         tm.assert_extension_array_equal(result, data)
  122: 
  123:     def test_fillna_series(self, data_missing):
  124:         fill_value = data_missing[1]
  125:         ser = pd.Series(data_missing)
  126: 
  127:         result = ser.fillna(fill_value)
  128:         expected = pd.Series(
  129:             data_missing._from_sequence(
  130:                 [fill_value, fill_value], dtype=data_missing.dtype
  131:             )
  132:         )
  133:         tm.assert_series_equal(result, expected)
  134: 
  135:         # Fill with a series
  136:         result = ser.fillna(expected)
  137:         tm.assert_series_equal(result, expected)
  138: 
  139:         # Fill with a series not affecting the missing values
  140:         result = ser.fillna(ser)
  141:         tm.assert_series_equal(result, ser)
  142: 
  143:     def test_fillna_series_method(self, data_missing, fillna_method):
  144:         fill_value = data_missing[1]
  145: 
  146:         if fillna_method == "ffill":
  147:             data_missing = data_missing[::-1]
  148: 
  149:         result = getattr(pd.Series(data_missing), fillna_method)()
  150:         expected = pd.Series(
  151:             data_missing._from_sequence(
  152:                 [fill_value, fill_value], dtype=data_missing.dtype
  153:             )
  154:         )
  155: 
  156:         tm.assert_series_equal(result, expected)
  157: 
  158:     def test_fillna_frame(self, data_missing):
  159:         fill_value = data_missing[1]
  160: 
  161:         result = pd.DataFrame({"A": data_missing, "B": [1, 2]}).fillna(fill_value)
  162: 
  163:         expected = pd.DataFrame(
  164:             {
  165:                 "A": data_missing._from_sequence(
  166:                     [fill_value, fill_value], dtype=data_missing.dtype
  167:                 ),
  168:                 "B": [1, 2],
  169:             }
  170:         )
  171: 
  172:         tm.assert_frame_equal(result, expected)
  173: 
  174:     def test_fillna_fill_other(self, data):
  175:         result = pd.DataFrame({"A": data, "B": [np.nan] * len(data)}).fillna({"B": 0.0})
  176: 
  177:         expected = pd.DataFrame({"A": data, "B": [0.0] * len(result)})
  178: 
  179:         tm.assert_frame_equal(result, expected)
  180: 
  181:     def test_use_inf_as_na_no_effect(self, data_missing):
  182:         ser = pd.Series(data_missing)
  183:         expected = ser.isna()
  184:         msg = "use_inf_as_na option is deprecated"
  185:         with tm.assert_produces_warning(FutureWarning, match=msg):
  186:             with pd.option_context("mode.use_inf_as_na", True):
  187:                 result = ser.isna()
  188:         tm.assert_series_equal(result, expected)
