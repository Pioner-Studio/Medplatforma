    1: from io import StringIO
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core.arrays import ExtensionArray
    9: 
   10: 
   11: class BaseParsingTests:
   12:     @pytest.mark.parametrize("engine", ["c", "python"])
   13:     def test_EA_types(self, engine, data, request):
   14:         if isinstance(data.dtype, pd.CategoricalDtype):
   15:             # in parsers.pyx _convert_with_dtype there is special-casing for
   16:             #  Categorical that pre-empts _from_sequence_of_strings
   17:             pass
   18:         elif isinstance(data.dtype, pd.core.dtypes.dtypes.NumpyEADtype):
   19:             # These get unwrapped internally so are treated as numpy dtypes
   20:             #  in the parsers.pyx code
   21:             pass
   22:         elif (
   23:             type(data)._from_sequence_of_strings.__func__
   24:             is ExtensionArray._from_sequence_of_strings.__func__
   25:         ):
   26:             # i.e. the EA hasn't overridden _from_sequence_of_strings
   27:             mark = pytest.mark.xfail(
   28:                 reason="_from_sequence_of_strings not implemented",
   29:                 raises=NotImplementedError,
   30:             )
   31:             request.node.add_marker(mark)
   32: 
   33:         df = pd.DataFrame({"with_dtype": pd.Series(data, dtype=str(data.dtype))})
   34:         csv_output = df.to_csv(index=False, na_rep=np.nan)
   35:         result = pd.read_csv(
   36:             StringIO(csv_output), dtype={"with_dtype": str(data.dtype)}, engine=engine
   37:         )
   38:         expected = df
   39:         tm.assert_frame_equal(result, expected)
