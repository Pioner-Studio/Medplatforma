    1: from typing import final
    2: 
    3: import pytest
    4: 
    5: import pandas as pd
    6: import pandas._testing as tm
    7: from pandas.api.types import is_numeric_dtype
    8: 
    9: 
   10: class BaseReduceTests:
   11:     """
   12:     Reduction specific tests. Generally these only
   13:     make sense for numeric/boolean operations.
   14:     """
   15: 
   16:     def _supports_reduction(self, ser: pd.Series, op_name: str) -> bool:
   17:         # Specify if we expect this reduction to succeed.
   18:         return False
   19: 
   20:     def check_reduce(self, ser: pd.Series, op_name: str, skipna: bool):
   21:         # We perform the same operation on the np.float64 data and check
   22:         #  that the results match. Override if you need to cast to something
   23:         #  other than float64.
   24:         res_op = getattr(ser, op_name)
   25: 
   26:         try:
   27:             alt = ser.astype("float64")
   28:         except (TypeError, ValueError):
   29:             # e.g. Interval can't cast (TypeError), StringArray can't cast
   30:             #  (ValueError), so let's cast to object and do
   31:             #  the reduction pointwise
   32:             alt = ser.astype(object)
   33: 
   34:         exp_op = getattr(alt, op_name)
   35:         if op_name == "count":
   36:             result = res_op()
   37:             expected = exp_op()
   38:         else:
   39:             result = res_op(skipna=skipna)
   40:             expected = exp_op(skipna=skipna)
   41:         tm.assert_almost_equal(result, expected)
   42: 
   43:     def _get_expected_reduction_dtype(self, arr, op_name: str, skipna: bool):
   44:         # Find the expected dtype when the given reduction is done on a DataFrame
   45:         # column with this array.  The default assumes float64-like behavior,
   46:         # i.e. retains the dtype.
   47:         return arr.dtype
   48: 
   49:     # We anticipate that authors should not need to override check_reduce_frame,
   50:     #  but should be able to do any necessary overriding in
   51:     #  _get_expected_reduction_dtype. If you have a use case where this
   52:     #  does not hold, please let us know at github.com/pandas-dev/pandas/issues.
   53:     @final
   54:     def check_reduce_frame(self, ser: pd.Series, op_name: str, skipna: bool):
   55:         # Check that the 2D reduction done in a DataFrame reduction "looks like"
   56:         # a wrapped version of the 1D reduction done by Series.
   57:         arr = ser.array
   58:         df = pd.DataFrame({"a": arr})
   59: 
   60:         kwargs = {"ddof": 1} if op_name in ["var", "std"] else {}
   61: 
   62:         cmp_dtype = self._get_expected_reduction_dtype(arr, op_name, skipna)
   63: 
   64:         # The DataFrame method just calls arr._reduce with keepdims=True,
   65:         #  so this first check is perfunctory.
   66:         result1 = arr._reduce(op_name, skipna=skipna, keepdims=True, **kwargs)
   67:         result2 = getattr(df, op_name)(skipna=skipna, **kwargs).array
   68:         tm.assert_extension_array_equal(result1, result2)
   69: 
   70:         # Check that the 2D reduction looks like a wrapped version of the
   71:         #  1D reduction
   72:         if not skipna and ser.isna().any():
   73:             expected = pd.array([pd.NA], dtype=cmp_dtype)
   74:         else:
   75:             exp_value = getattr(ser.dropna(), op_name)()
   76:             expected = pd.array([exp_value], dtype=cmp_dtype)
   77: 
   78:         tm.assert_extension_array_equal(result1, expected)
   79: 
   80:     @pytest.mark.parametrize("skipna", [True, False])
   81:     def test_reduce_series_boolean(self, data, all_boolean_reductions, skipna):
   82:         op_name = all_boolean_reductions
   83:         ser = pd.Series(data)
   84: 
   85:         if not self._supports_reduction(ser, op_name):
   86:             # TODO: the message being checked here isn't actually checking anything
   87:             msg = (
   88:                 "[Cc]annot perform|Categorical is not ordered for operation|"
   89:                 "does not support reduction|"
   90:             )
   91: 
   92:             with pytest.raises(TypeError, match=msg):
   93:                 getattr(ser, op_name)(skipna=skipna)
   94: 
   95:         else:
   96:             self.check_reduce(ser, op_name, skipna)
   97: 
   98:     @pytest.mark.filterwarnings("ignore::RuntimeWarning")
   99:     @pytest.mark.parametrize("skipna", [True, False])
  100:     def test_reduce_series_numeric(self, data, all_numeric_reductions, skipna):
  101:         op_name = all_numeric_reductions
  102:         ser = pd.Series(data)
  103: 
  104:         if not self._supports_reduction(ser, op_name):
  105:             # TODO: the message being checked here isn't actually checking anything
  106:             msg = (
  107:                 "[Cc]annot perform|Categorical is not ordered for operation|"
  108:                 "does not support reduction|"
  109:             )
  110: 
  111:             with pytest.raises(TypeError, match=msg):
  112:                 getattr(ser, op_name)(skipna=skipna)
  113: 
  114:         else:
  115:             # min/max with empty produce numpy warnings
  116:             self.check_reduce(ser, op_name, skipna)
  117: 
  118:     @pytest.mark.parametrize("skipna", [True, False])
  119:     def test_reduce_frame(self, data, all_numeric_reductions, skipna):
  120:         op_name = all_numeric_reductions
  121:         ser = pd.Series(data)
  122:         if not is_numeric_dtype(ser.dtype):
  123:             pytest.skip(f"{ser.dtype} is not numeric dtype")
  124: 
  125:         if op_name in ["count", "kurt", "sem"]:
  126:             pytest.skip(f"{op_name} not an array method")
  127: 
  128:         if not self._supports_reduction(ser, op_name):
  129:             pytest.skip(f"Reduction {op_name} not supported for this dtype")
  130: 
  131:         self.check_reduce_frame(ser, op_name, skipna)
  132: 
  133: 
  134: # TODO(3.0): remove BaseNoReduceTests, BaseNumericReduceTests,
  135: #  BaseBooleanReduceTests
  136: class BaseNoReduceTests(BaseReduceTests):
  137:     """we don't define any reductions"""
  138: 
  139: 
  140: class BaseNumericReduceTests(BaseReduceTests):
  141:     # For backward compatibility only, this only runs the numeric reductions
  142:     def _supports_reduction(self, ser: pd.Series, op_name: str) -> bool:
  143:         if op_name in ["any", "all"]:
  144:             pytest.skip("These are tested in BaseBooleanReduceTests")
  145:         return True
  146: 
  147: 
  148: class BaseBooleanReduceTests(BaseReduceTests):
  149:     # For backward compatibility only, this only runs the numeric reductions
  150:     def _supports_reduction(self, ser: pd.Series, op_name: str) -> bool:
  151:         if op_name not in ["any", "all"]:
  152:             pytest.skip("These are tested in BaseNumericReduceTests")
  153:         return True
