    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.api.extensions import ExtensionArray
    7: from pandas.core.internals.blocks import EABackedBlock
    8: 
    9: 
   10: class BaseConstructorsTests:
   11:     def test_from_sequence_from_cls(self, data):
   12:         result = type(data)._from_sequence(data, dtype=data.dtype)
   13:         tm.assert_extension_array_equal(result, data)
   14: 
   15:         data = data[:0]
   16:         result = type(data)._from_sequence(data, dtype=data.dtype)
   17:         tm.assert_extension_array_equal(result, data)
   18: 
   19:     def test_array_from_scalars(self, data):
   20:         scalars = [data[0], data[1], data[2]]
   21:         result = data._from_sequence(scalars, dtype=data.dtype)
   22:         assert isinstance(result, type(data))
   23: 
   24:     def test_series_constructor(self, data):
   25:         result = pd.Series(data, copy=False)
   26:         assert result.dtype == data.dtype
   27:         assert len(result) == len(data)
   28:         if hasattr(result._mgr, "blocks"):
   29:             assert isinstance(result._mgr.blocks[0], EABackedBlock)
   30:         assert result._mgr.array is data
   31: 
   32:         # Series[EA] is unboxed / boxed correctly
   33:         result2 = pd.Series(result)
   34:         assert result2.dtype == data.dtype
   35:         if hasattr(result._mgr, "blocks"):
   36:             assert isinstance(result2._mgr.blocks[0], EABackedBlock)
   37: 
   38:     def test_series_constructor_no_data_with_index(self, dtype, na_value):
   39:         result = pd.Series(index=[1, 2, 3], dtype=dtype)
   40:         expected = pd.Series([na_value] * 3, index=[1, 2, 3], dtype=dtype)
   41:         tm.assert_series_equal(result, expected)
   42: 
   43:         # GH 33559 - empty index
   44:         result = pd.Series(index=[], dtype=dtype)
   45:         expected = pd.Series([], index=pd.Index([], dtype="object"), dtype=dtype)
   46:         tm.assert_series_equal(result, expected)
   47: 
   48:     def test_series_constructor_scalar_na_with_index(self, dtype, na_value):
   49:         result = pd.Series(na_value, index=[1, 2, 3], dtype=dtype)
   50:         expected = pd.Series([na_value] * 3, index=[1, 2, 3], dtype=dtype)
   51:         tm.assert_series_equal(result, expected)
   52: 
   53:     def test_series_constructor_scalar_with_index(self, data, dtype):
   54:         scalar = data[0]
   55:         result = pd.Series(scalar, index=[1, 2, 3], dtype=dtype)
   56:         expected = pd.Series([scalar] * 3, index=[1, 2, 3], dtype=dtype)
   57:         tm.assert_series_equal(result, expected)
   58: 
   59:         result = pd.Series(scalar, index=["foo"], dtype=dtype)
   60:         expected = pd.Series([scalar], index=["foo"], dtype=dtype)
   61:         tm.assert_series_equal(result, expected)
   62: 
   63:     @pytest.mark.parametrize("from_series", [True, False])
   64:     def test_dataframe_constructor_from_dict(self, data, from_series):
   65:         if from_series:
   66:             data = pd.Series(data)
   67:         result = pd.DataFrame({"A": data})
   68:         assert result.dtypes["A"] == data.dtype
   69:         assert result.shape == (len(data), 1)
   70:         if hasattr(result._mgr, "blocks"):
   71:             assert isinstance(result._mgr.blocks[0], EABackedBlock)
   72:         assert isinstance(result._mgr.arrays[0], ExtensionArray)
   73: 
   74:     def test_dataframe_from_series(self, data):
   75:         result = pd.DataFrame(pd.Series(data))
   76:         assert result.dtypes[0] == data.dtype
   77:         assert result.shape == (len(data), 1)
   78:         if hasattr(result._mgr, "blocks"):
   79:             assert isinstance(result._mgr.blocks[0], EABackedBlock)
   80:         assert isinstance(result._mgr.arrays[0], ExtensionArray)
   81: 
   82:     def test_series_given_mismatched_index_raises(self, data):
   83:         msg = r"Length of values \(3\) does not match length of index \(5\)"
   84:         with pytest.raises(ValueError, match=msg):
   85:             pd.Series(data[:3], index=[0, 1, 2, 3, 4])
   86: 
   87:     def test_from_dtype(self, data):
   88:         # construct from our dtype & string dtype
   89:         dtype = data.dtype
   90: 
   91:         expected = pd.Series(data)
   92:         result = pd.Series(list(data), dtype=dtype)
   93:         tm.assert_series_equal(result, expected)
   94: 
   95:         result = pd.Series(list(data), dtype=str(dtype))
   96:         tm.assert_series_equal(result, expected)
   97: 
   98:         # gh-30280
   99: 
  100:         expected = pd.DataFrame(data).astype(dtype)
  101:         result = pd.DataFrame(list(data), dtype=dtype)
  102:         tm.assert_frame_equal(result, expected)
  103: 
  104:         result = pd.DataFrame(list(data), dtype=str(dtype))
  105:         tm.assert_frame_equal(result, expected)
  106: 
  107:     def test_pandas_array(self, data):
  108:         # pd.array(extension_array) should be idempotent...
  109:         result = pd.array(data)
  110:         tm.assert_extension_array_equal(result, data)
  111: 
  112:     def test_pandas_array_dtype(self, data):
  113:         # ... but specifying dtype will override idempotency
  114:         result = pd.array(data, dtype=np.dtype(object))
  115:         expected = pd.arrays.NumpyExtensionArray(np.asarray(data, dtype=object))
  116:         tm.assert_equal(result, expected)
  117: 
  118:     def test_construct_empty_dataframe(self, dtype):
  119:         # GH 33623
  120:         result = pd.DataFrame(columns=["a"], dtype=dtype)
  121:         expected = pd.DataFrame(
  122:             {"a": pd.array([], dtype=dtype)}, index=pd.RangeIndex(0)
  123:         )
  124:         tm.assert_frame_equal(result, expected)
  125: 
  126:     def test_empty(self, dtype):
  127:         cls = dtype.construct_array_type()
  128:         result = cls._empty((4,), dtype=dtype)
  129:         assert isinstance(result, cls)
  130:         assert result.dtype == dtype
  131:         assert result.shape == (4,)
  132: 
  133:         # GH#19600 method on ExtensionDtype
  134:         result2 = dtype.empty((4,))
  135:         assert isinstance(result2, cls)
  136:         assert result2.dtype == dtype
  137:         assert result2.shape == (4,)
  138: 
  139:         result2 = dtype.empty(4)
  140:         assert isinstance(result2, cls)
  141:         assert result2.dtype == dtype
  142:         assert result2.shape == (4,)
