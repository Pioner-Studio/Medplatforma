    1: """
    2: This file contains a minimal set of tests for compliance with the extension
    3: array interface test suite, and should contain no other tests.
    4: The test suite for the full functionality of the array is located in
    5: `pandas/tests/arrays/`.
    6: 
    7: The tests in this file are inherited from the BaseExtensionTests, and only
    8: minimal tweaks should be applied to get the tests passing (by overwriting a
    9: parent method).
   10: 
   11: Additional tests should either be added to one of the BaseExtensionTests
   12: classes (if they are relevant for the extension interface for all dtypes), or
   13: be added to the array-specific tests in `pandas/tests/arrays/`.
   14: 
   15: """
   16: from __future__ import annotations
   17: 
   18: from typing import TYPE_CHECKING
   19: 
   20: import numpy as np
   21: import pytest
   22: 
   23: from pandas.core.dtypes.dtypes import IntervalDtype
   24: 
   25: from pandas import Interval
   26: from pandas.core.arrays import IntervalArray
   27: from pandas.tests.extension import base
   28: 
   29: if TYPE_CHECKING:
   30:     import pandas as pd
   31: 
   32: 
   33: def make_data():
   34:     N = 100
   35:     left_array = np.random.default_rng(2).uniform(size=N).cumsum()
   36:     right_array = left_array + np.random.default_rng(2).uniform(size=N)
   37:     return [Interval(left, right) for left, right in zip(left_array, right_array)]
   38: 
   39: 
   40: @pytest.fixture
   41: def dtype():
   42:     return IntervalDtype()
   43: 
   44: 
   45: @pytest.fixture
   46: def data():
   47:     """Length-100 PeriodArray for semantics test."""
   48:     return IntervalArray(make_data())
   49: 
   50: 
   51: @pytest.fixture
   52: def data_missing():
   53:     """Length 2 array with [NA, Valid]"""
   54:     return IntervalArray.from_tuples([None, (0, 1)])
   55: 
   56: 
   57: @pytest.fixture
   58: def data_for_twos():
   59:     pytest.skip("Interval is not a numeric dtype")
   60: 
   61: 
   62: @pytest.fixture
   63: def data_for_sorting():
   64:     return IntervalArray.from_tuples([(1, 2), (2, 3), (0, 1)])
   65: 
   66: 
   67: @pytest.fixture
   68: def data_missing_for_sorting():
   69:     return IntervalArray.from_tuples([(1, 2), None, (0, 1)])
   70: 
   71: 
   72: @pytest.fixture
   73: def data_for_grouping():
   74:     a = (0, 1)
   75:     b = (1, 2)
   76:     c = (2, 3)
   77:     return IntervalArray.from_tuples([b, b, None, None, a, a, b, c])
   78: 
   79: 
   80: class TestIntervalArray(base.ExtensionTests):
   81:     divmod_exc = TypeError
   82: 
   83:     def _supports_reduction(self, ser: pd.Series, op_name: str) -> bool:
   84:         return op_name in ["min", "max"]
   85: 
   86:     @pytest.mark.xfail(
   87:         reason="Raises with incorrect message bc it disallows *all* listlikes "
   88:         "instead of just wrong-length listlikes"
   89:     )
   90:     def test_fillna_length_mismatch(self, data_missing):
   91:         super().test_fillna_length_mismatch(data_missing)
   92: 
   93: 
   94: # TODO: either belongs in tests.arrays.interval or move into base tests.
   95: def test_fillna_non_scalar_raises(data_missing):
   96:     msg = "can only insert Interval objects and NA into an IntervalArray"
   97:     with pytest.raises(TypeError, match=msg):
   98:         data_missing.fillna([1, 1])
