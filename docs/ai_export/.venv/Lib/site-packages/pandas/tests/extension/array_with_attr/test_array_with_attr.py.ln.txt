    1: import numpy as np
    2: 
    3: import pandas as pd
    4: import pandas._testing as tm
    5: from pandas.tests.extension.array_with_attr import FloatAttrArray
    6: 
    7: 
    8: def test_concat_with_all_na():
    9:     # https://github.com/pandas-dev/pandas/pull/47762
   10:     # ensure that attribute of the column array is preserved (when it gets
   11:     # preserved in reindexing the array) during merge/concat
   12:     arr = FloatAttrArray(np.array([np.nan, np.nan], dtype="float64"), attr="test")
   13: 
   14:     df1 = pd.DataFrame({"col": arr, "key": [0, 1]})
   15:     df2 = pd.DataFrame({"key": [0, 1], "col2": [1, 2]})
   16:     result = pd.merge(df1, df2, on="key")
   17:     expected = pd.DataFrame({"col": arr, "key": [0, 1], "col2": [1, 2]})
   18:     tm.assert_frame_equal(result, expected)
   19:     assert result["col"].array.attr == "test"
   20: 
   21:     df1 = pd.DataFrame({"col": arr, "key": [0, 1]})
   22:     df2 = pd.DataFrame({"key": [0, 2], "col2": [1, 2]})
   23:     result = pd.merge(df1, df2, on="key")
   24:     expected = pd.DataFrame({"col": arr.take([0]), "key": [0], "col2": [1]})
   25:     tm.assert_frame_equal(result, expected)
   26:     assert result["col"].array.attr == "test"
   27: 
   28:     result = pd.concat([df1.set_index("key"), df2.set_index("key")], axis=1)
   29:     expected = pd.DataFrame(
   30:         {"col": arr.take([0, 1, -1]), "col2": [1, np.nan, 2], "key": [0, 1, 2]}
   31:     ).set_index("key")
   32:     tm.assert_frame_equal(result, expected)
   33:     assert result["col"].array.attr == "test"
