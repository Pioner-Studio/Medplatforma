    1: import copy
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import Timestamp
    8: import pandas._testing as tm
    9: 
   10: 
   11: def test_assert_numpy_array_equal_shape_mismatch():
   12:     msg = """numpy array are different
   13: 
   14: numpy array shapes are different
   15: \\[left\\]:  \\(2L*,\\)
   16: \\[right\\]: \\(3L*,\\)"""
   17: 
   18:     with pytest.raises(AssertionError, match=msg):
   19:         tm.assert_numpy_array_equal(np.array([1, 2]), np.array([3, 4, 5]))
   20: 
   21: 
   22: def test_assert_numpy_array_equal_bad_type():
   23:     expected = "Expected type"
   24: 
   25:     with pytest.raises(AssertionError, match=expected):
   26:         tm.assert_numpy_array_equal(1, 2)
   27: 
   28: 
   29: @pytest.mark.parametrize(
   30:     "a,b,klass1,klass2",
   31:     [(np.array([1]), 1, "ndarray", "int"), (1, np.array([1]), "int", "ndarray")],
   32: )
   33: def test_assert_numpy_array_equal_class_mismatch(a, b, klass1, klass2):
   34:     msg = f"""numpy array are different
   35: 
   36: numpy array classes are different
   37: \\[left\\]:  {klass1}
   38: \\[right\\]: {klass2}"""
   39: 
   40:     with pytest.raises(AssertionError, match=msg):
   41:         tm.assert_numpy_array_equal(a, b)
   42: 
   43: 
   44: def test_assert_numpy_array_equal_value_mismatch1():
   45:     msg = """numpy array are different
   46: 
   47: numpy array values are different \\(66\\.66667 %\\)
   48: \\[left\\]:  \\[nan, 2\\.0, 3\\.0\\]
   49: \\[right\\]: \\[1\\.0, nan, 3\\.0\\]"""
   50: 
   51:     with pytest.raises(AssertionError, match=msg):
   52:         tm.assert_numpy_array_equal(np.array([np.nan, 2, 3]), np.array([1, np.nan, 3]))
   53: 
   54: 
   55: def test_assert_numpy_array_equal_value_mismatch2():
   56:     msg = """numpy array are different
   57: 
   58: numpy array values are different \\(50\\.0 %\\)
   59: \\[left\\]:  \\[1, 2\\]
   60: \\[right\\]: \\[1, 3\\]"""
   61: 
   62:     with pytest.raises(AssertionError, match=msg):
   63:         tm.assert_numpy_array_equal(np.array([1, 2]), np.array([1, 3]))
   64: 
   65: 
   66: def test_assert_numpy_array_equal_value_mismatch3():
   67:     msg = """numpy array are different
   68: 
   69: numpy array values are different \\(16\\.66667 %\\)
   70: \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\], \\[5, 6\\]\\]
   71: \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\], \\[5, 6\\]\\]"""
   72: 
   73:     with pytest.raises(AssertionError, match=msg):
   74:         tm.assert_numpy_array_equal(
   75:             np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])
   76:         )
   77: 
   78: 
   79: def test_assert_numpy_array_equal_value_mismatch4():
   80:     msg = """numpy array are different
   81: 
   82: numpy array values are different \\(50\\.0 %\\)
   83: \\[left\\]:  \\[1\\.1, 2\\.000001\\]
   84: \\[right\\]: \\[1\\.1, 2.0\\]"""
   85: 
   86:     with pytest.raises(AssertionError, match=msg):
   87:         tm.assert_numpy_array_equal(np.array([1.1, 2.000001]), np.array([1.1, 2.0]))
   88: 
   89: 
   90: def test_assert_numpy_array_equal_value_mismatch5():
   91:     msg = """numpy array are different
   92: 
   93: numpy array values are different \\(16\\.66667 %\\)
   94: \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\], \\[5, 6\\]\\]
   95: \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\], \\[5, 6\\]\\]"""
   96: 
   97:     with pytest.raises(AssertionError, match=msg):
   98:         tm.assert_numpy_array_equal(
   99:             np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])
  100:         )
  101: 
  102: 
  103: def test_assert_numpy_array_equal_value_mismatch6():
  104:     msg = """numpy array are different
  105: 
  106: numpy array values are different \\(25\\.0 %\\)
  107: \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\]\\]
  108: \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\]\\]"""
  109: 
  110:     with pytest.raises(AssertionError, match=msg):
  111:         tm.assert_numpy_array_equal(
  112:             np.array([[1, 2], [3, 4]]), np.array([[1, 3], [3, 4]])
  113:         )
  114: 
  115: 
  116: def test_assert_numpy_array_equal_shape_mismatch_override():
  117:     msg = """Index are different
  118: 
  119: Index shapes are different
  120: \\[left\\]:  \\(2L*,\\)
  121: \\[right\\]: \\(3L*,\\)"""
  122: 
  123:     with pytest.raises(AssertionError, match=msg):
  124:         tm.assert_numpy_array_equal(np.array([1, 2]), np.array([3, 4, 5]), obj="Index")
  125: 
  126: 
  127: def test_numpy_array_equal_unicode():
  128:     # see gh-20503
  129:     #
  130:     # Test ensures that `tm.assert_numpy_array_equals` raises the right
  131:     # exception when comparing np.arrays containing differing unicode objects.
  132:     msg = """numpy array are different
  133: 
  134: numpy array values are different \\(33\\.33333 %\\)
  135: \\[left\\]:  \\[ГЎ, Г , Г¤\\]
  136: \\[right\\]: \\[ГЎ, Г , ГҐ\\]"""
  137: 
  138:     with pytest.raises(AssertionError, match=msg):
  139:         tm.assert_numpy_array_equal(
  140:             np.array(["ГЎ", "Г ", "Г¤"]), np.array(["ГЎ", "Г ", "ГҐ"])
  141:         )
  142: 
  143: 
  144: def test_numpy_array_equal_object():
  145:     a = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-01")])
  146:     b = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-02")])
  147: 
  148:     msg = """numpy array are different
  149: 
  150: numpy array values are different \\(50\\.0 %\\)
  151: \\[left\\]:  \\[2011-01-01 00:00:00, 2011-01-01 00:00:00\\]
  152: \\[right\\]: \\[2011-01-01 00:00:00, 2011-01-02 00:00:00\\]"""
  153: 
  154:     with pytest.raises(AssertionError, match=msg):
  155:         tm.assert_numpy_array_equal(a, b)
  156: 
  157: 
  158: @pytest.mark.parametrize("other_type", ["same", "copy"])
  159: @pytest.mark.parametrize("check_same", ["same", "copy"])
  160: def test_numpy_array_equal_copy_flag(other_type, check_same):
  161:     a = np.array([1, 2, 3])
  162:     msg = None
  163: 
  164:     if other_type == "same":
  165:         other = a.view()
  166:     else:
  167:         other = a.copy()
  168: 
  169:     if check_same != other_type:
  170:         msg = (
  171:             r"array\(\[1, 2, 3\]\) is not array\(\[1, 2, 3\]\)"
  172:             if check_same == "same"
  173:             else r"array\(\[1, 2, 3\]\) is array\(\[1, 2, 3\]\)"
  174:         )
  175: 
  176:     if msg is not None:
  177:         with pytest.raises(AssertionError, match=msg):
  178:             tm.assert_numpy_array_equal(a, other, check_same=check_same)
  179:     else:
  180:         tm.assert_numpy_array_equal(a, other, check_same=check_same)
  181: 
  182: 
  183: def test_numpy_array_equal_contains_na():
  184:     # https://github.com/pandas-dev/pandas/issues/31881
  185:     a = np.array([True, False])
  186:     b = np.array([True, pd.NA], dtype=object)
  187: 
  188:     msg = """numpy array are different
  189: 
  190: numpy array values are different \\(50.0 %\\)
  191: \\[left\\]:  \\[True, False\\]
  192: \\[right\\]: \\[True, <NA>\\]"""
  193: 
  194:     with pytest.raises(AssertionError, match=msg):
  195:         tm.assert_numpy_array_equal(a, b)
  196: 
  197: 
  198: def test_numpy_array_equal_identical_na(nulls_fixture):
  199:     a = np.array([nulls_fixture], dtype=object)
  200: 
  201:     tm.assert_numpy_array_equal(a, a)
  202: 
  203:     # matching but not the identical object
  204:     if hasattr(nulls_fixture, "copy"):
  205:         other = nulls_fixture.copy()
  206:     else:
  207:         other = copy.copy(nulls_fixture)
  208:     b = np.array([other], dtype=object)
  209:     tm.assert_numpy_array_equal(a, b)
  210: 
  211: 
  212: def test_numpy_array_equal_different_na():
  213:     a = np.array([np.nan], dtype=object)
  214:     b = np.array([pd.NA], dtype=object)
  215: 
  216:     msg = """numpy array are different
  217: 
  218: numpy array values are different \\(100.0 %\\)
  219: \\[left\\]:  \\[nan\\]
  220: \\[right\\]: \\[<NA>\\]"""
  221: 
  222:     with pytest.raises(AssertionError, match=msg):
  223:         tm.assert_numpy_array_equal(a, b)
