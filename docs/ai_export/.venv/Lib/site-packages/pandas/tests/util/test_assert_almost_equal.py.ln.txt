    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     NA,
    6:     DataFrame,
    7:     Index,
    8:     NaT,
    9:     Series,
   10:     Timestamp,
   11: )
   12: import pandas._testing as tm
   13: 
   14: 
   15: def _assert_almost_equal_both(a, b, **kwargs):
   16:     """
   17:     Check that two objects are approximately equal.
   18: 
   19:     This check is performed commutatively.
   20: 
   21:     Parameters
   22:     ----------
   23:     a : object
   24:         The first object to compare.
   25:     b : object
   26:         The second object to compare.
   27:     **kwargs
   28:         The arguments passed to `tm.assert_almost_equal`.
   29:     """
   30:     tm.assert_almost_equal(a, b, **kwargs)
   31:     tm.assert_almost_equal(b, a, **kwargs)
   32: 
   33: 
   34: def _assert_not_almost_equal(a, b, **kwargs):
   35:     """
   36:     Check that two objects are not approximately equal.
   37: 
   38:     Parameters
   39:     ----------
   40:     a : object
   41:         The first object to compare.
   42:     b : object
   43:         The second object to compare.
   44:     **kwargs
   45:         The arguments passed to `tm.assert_almost_equal`.
   46:     """
   47:     try:
   48:         tm.assert_almost_equal(a, b, **kwargs)
   49:         msg = f"{a} and {b} were approximately equal when they shouldn't have been"
   50:         pytest.fail(reason=msg)
   51:     except AssertionError:
   52:         pass
   53: 
   54: 
   55: def _assert_not_almost_equal_both(a, b, **kwargs):
   56:     """
   57:     Check that two objects are not approximately equal.
   58: 
   59:     This check is performed commutatively.
   60: 
   61:     Parameters
   62:     ----------
   63:     a : object
   64:         The first object to compare.
   65:     b : object
   66:         The second object to compare.
   67:     **kwargs
   68:         The arguments passed to `tm.assert_almost_equal`.
   69:     """
   70:     _assert_not_almost_equal(a, b, **kwargs)
   71:     _assert_not_almost_equal(b, a, **kwargs)
   72: 
   73: 
   74: @pytest.mark.parametrize(
   75:     "a,b",
   76:     [
   77:         (1.1, 1.1),
   78:         (1.1, 1.100001),
   79:         (np.int16(1), 1.000001),
   80:         (np.float64(1.1), 1.1),
   81:         (np.uint32(5), 5),
   82:     ],
   83: )
   84: def test_assert_almost_equal_numbers(a, b):
   85:     _assert_almost_equal_both(a, b)
   86: 
   87: 
   88: @pytest.mark.parametrize(
   89:     "a,b",
   90:     [
   91:         (1.1, 1),
   92:         (1.1, True),
   93:         (1, 2),
   94:         (1.0001, np.int16(1)),
   95:         # The following two examples are not "almost equal" due to tol.
   96:         (0.1, 0.1001),
   97:         (0.0011, 0.0012),
   98:     ],
   99: )
  100: def test_assert_not_almost_equal_numbers(a, b):
  101:     _assert_not_almost_equal_both(a, b)
  102: 
  103: 
  104: @pytest.mark.parametrize(
  105:     "a,b",
  106:     [
  107:         (1.1, 1.1),
  108:         (1.1, 1.100001),
  109:         (1.1, 1.1001),
  110:         (0.000001, 0.000005),
  111:         (1000.0, 1000.0005),
  112:         # Testing this example, as per #13357
  113:         (0.000011, 0.000012),
  114:     ],
  115: )
  116: def test_assert_almost_equal_numbers_atol(a, b):
  117:     # Equivalent to the deprecated check_less_precise=True, enforced in 2.0
  118:     _assert_almost_equal_both(a, b, rtol=0.5e-3, atol=0.5e-3)
  119: 
  120: 
  121: @pytest.mark.parametrize("a,b", [(1.1, 1.11), (0.1, 0.101), (0.000011, 0.001012)])
  122: def test_assert_not_almost_equal_numbers_atol(a, b):
  123:     _assert_not_almost_equal_both(a, b, atol=1e-3)
  124: 
  125: 
  126: @pytest.mark.parametrize(
  127:     "a,b",
  128:     [
  129:         (1.1, 1.1),
  130:         (1.1, 1.100001),
  131:         (1.1, 1.1001),
  132:         (1000.0, 1000.0005),
  133:         (1.1, 1.11),
  134:         (0.1, 0.101),
  135:     ],
  136: )
  137: def test_assert_almost_equal_numbers_rtol(a, b):
  138:     _assert_almost_equal_both(a, b, rtol=0.05)
  139: 
  140: 
  141: @pytest.mark.parametrize("a,b", [(0.000011, 0.000012), (0.000001, 0.000005)])
  142: def test_assert_not_almost_equal_numbers_rtol(a, b):
  143:     _assert_not_almost_equal_both(a, b, rtol=0.05)
  144: 
  145: 
  146: @pytest.mark.parametrize(
  147:     "a,b,rtol",
  148:     [
  149:         (1.00001, 1.00005, 0.001),
  150:         (-0.908356 + 0.2j, -0.908358 + 0.2j, 1e-3),
  151:         (0.1 + 1.009j, 0.1 + 1.006j, 0.1),
  152:         (0.1001 + 2.0j, 0.1 + 2.001j, 0.01),
  153:     ],
  154: )
  155: def test_assert_almost_equal_complex_numbers(a, b, rtol):
  156:     _assert_almost_equal_both(a, b, rtol=rtol)
  157:     _assert_almost_equal_both(np.complex64(a), np.complex64(b), rtol=rtol)
  158:     _assert_almost_equal_both(np.complex128(a), np.complex128(b), rtol=rtol)
  159: 
  160: 
  161: @pytest.mark.parametrize(
  162:     "a,b,rtol",
  163:     [
  164:         (0.58310768, 0.58330768, 1e-7),
  165:         (-0.908 + 0.2j, -0.978 + 0.2j, 0.001),
  166:         (0.1 + 1j, 0.1 + 2j, 0.01),
  167:         (-0.132 + 1.001j, -0.132 + 1.005j, 1e-5),
  168:         (0.58310768j, 0.58330768j, 1e-9),
  169:     ],
  170: )
  171: def test_assert_not_almost_equal_complex_numbers(a, b, rtol):
  172:     _assert_not_almost_equal_both(a, b, rtol=rtol)
  173:     _assert_not_almost_equal_both(np.complex64(a), np.complex64(b), rtol=rtol)
  174:     _assert_not_almost_equal_both(np.complex128(a), np.complex128(b), rtol=rtol)
  175: 
  176: 
  177: @pytest.mark.parametrize("a,b", [(0, 0), (0, 0.0), (0, np.float64(0)), (0.00000001, 0)])
  178: def test_assert_almost_equal_numbers_with_zeros(a, b):
  179:     _assert_almost_equal_both(a, b)
  180: 
  181: 
  182: @pytest.mark.parametrize("a,b", [(0.001, 0), (1, 0)])
  183: def test_assert_not_almost_equal_numbers_with_zeros(a, b):
  184:     _assert_not_almost_equal_both(a, b)
  185: 
  186: 
  187: @pytest.mark.parametrize("a,b", [(1, "abc"), (1, [1]), (1, object())])
  188: def test_assert_not_almost_equal_numbers_with_mixed(a, b):
  189:     _assert_not_almost_equal_both(a, b)
  190: 
  191: 
  192: @pytest.mark.parametrize(
  193:     "left_dtype", ["M8[ns]", "m8[ns]", "float64", "int64", "object"]
  194: )
  195: @pytest.mark.parametrize(
  196:     "right_dtype", ["M8[ns]", "m8[ns]", "float64", "int64", "object"]
  197: )
  198: def test_assert_almost_equal_edge_case_ndarrays(left_dtype, right_dtype):
  199:     # Empty compare.
  200:     _assert_almost_equal_both(
  201:         np.array([], dtype=left_dtype),
  202:         np.array([], dtype=right_dtype),
  203:         check_dtype=False,
  204:     )
  205: 
  206: 
  207: def test_assert_almost_equal_sets():
  208:     # GH#51727
  209:     _assert_almost_equal_both({1, 2, 3}, {1, 2, 3})
  210: 
  211: 
  212: def test_assert_almost_not_equal_sets():
  213:     # GH#51727
  214:     msg = r"{1, 2, 3} != {1, 2, 4}"
  215:     with pytest.raises(AssertionError, match=msg):
  216:         _assert_almost_equal_both({1, 2, 3}, {1, 2, 4})
  217: 
  218: 
  219: def test_assert_almost_equal_dicts():
  220:     _assert_almost_equal_both({"a": 1, "b": 2}, {"a": 1, "b": 2})
  221: 
  222: 
  223: @pytest.mark.parametrize(
  224:     "a,b",
  225:     [
  226:         ({"a": 1, "b": 2}, {"a": 1, "b": 3}),
  227:         ({"a": 1, "b": 2}, {"a": 1, "b": 2, "c": 3}),
  228:         ({"a": 1}, 1),
  229:         ({"a": 1}, "abc"),
  230:         ({"a": 1}, [1]),
  231:     ],
  232: )
  233: def test_assert_not_almost_equal_dicts(a, b):
  234:     _assert_not_almost_equal_both(a, b)
  235: 
  236: 
  237: @pytest.mark.parametrize("val", [1, 2])
  238: def test_assert_almost_equal_dict_like_object(val):
  239:     dict_val = 1
  240:     real_dict = {"a": val}
  241: 
  242:     class DictLikeObj:
  243:         def keys(self):
  244:             return ("a",)
  245: 
  246:         def __getitem__(self, item):
  247:             if item == "a":
  248:                 return dict_val
  249: 
  250:     func = (
  251:         _assert_almost_equal_both if val == dict_val else _assert_not_almost_equal_both
  252:     )
  253:     func(real_dict, DictLikeObj(), check_dtype=False)
  254: 
  255: 
  256: def test_assert_almost_equal_strings():
  257:     _assert_almost_equal_both("abc", "abc")
  258: 
  259: 
  260: @pytest.mark.parametrize(
  261:     "a,b", [("abc", "abcd"), ("abc", "abd"), ("abc", 1), ("abc", [1])]
  262: )
  263: def test_assert_not_almost_equal_strings(a, b):
  264:     _assert_not_almost_equal_both(a, b)
  265: 
  266: 
  267: @pytest.mark.parametrize(
  268:     "a,b", [([1, 2, 3], [1, 2, 3]), (np.array([1, 2, 3]), np.array([1, 2, 3]))]
  269: )
  270: def test_assert_almost_equal_iterables(a, b):
  271:     _assert_almost_equal_both(a, b)
  272: 
  273: 
  274: @pytest.mark.parametrize(
  275:     "a,b",
  276:     [
  277:         # Class is different.
  278:         (np.array([1, 2, 3]), [1, 2, 3]),
  279:         # Dtype is different.
  280:         (np.array([1, 2, 3]), np.array([1.0, 2.0, 3.0])),
  281:         # Can't compare generators.
  282:         (iter([1, 2, 3]), [1, 2, 3]),
  283:         ([1, 2, 3], [1, 2, 4]),
  284:         ([1, 2, 3], [1, 2, 3, 4]),
  285:         ([1, 2, 3], 1),
  286:     ],
  287: )
  288: def test_assert_not_almost_equal_iterables(a, b):
  289:     _assert_not_almost_equal(a, b)
  290: 
  291: 
  292: def test_assert_almost_equal_null():
  293:     _assert_almost_equal_both(None, None)
  294: 
  295: 
  296: @pytest.mark.parametrize("a,b", [(None, np.nan), (None, 0), (np.nan, 0)])
  297: def test_assert_not_almost_equal_null(a, b):
  298:     _assert_not_almost_equal(a, b)
  299: 
  300: 
  301: @pytest.mark.parametrize(
  302:     "a,b",
  303:     [
  304:         (np.inf, np.inf),
  305:         (np.inf, float("inf")),
  306:         (np.array([np.inf, np.nan, -np.inf]), np.array([np.inf, np.nan, -np.inf])),
  307:     ],
  308: )
  309: def test_assert_almost_equal_inf(a, b):
  310:     _assert_almost_equal_both(a, b)
  311: 
  312: 
  313: objs = [NA, np.nan, NaT, None, np.datetime64("NaT"), np.timedelta64("NaT")]
  314: 
  315: 
  316: @pytest.mark.parametrize("left", objs)
  317: @pytest.mark.parametrize("right", objs)
  318: def test_mismatched_na_assert_almost_equal_deprecation(left, right):
  319:     left_arr = np.array([left], dtype=object)
  320:     right_arr = np.array([right], dtype=object)
  321: 
  322:     msg = "Mismatched null-like values"
  323: 
  324:     if left is right:
  325:         _assert_almost_equal_both(left, right, check_dtype=False)
  326:         tm.assert_numpy_array_equal(left_arr, right_arr)
  327:         tm.assert_index_equal(
  328:             Index(left_arr, dtype=object), Index(right_arr, dtype=object)
  329:         )
  330:         tm.assert_series_equal(
  331:             Series(left_arr, dtype=object), Series(right_arr, dtype=object)
  332:         )
  333:         tm.assert_frame_equal(
  334:             DataFrame(left_arr, dtype=object), DataFrame(right_arr, dtype=object)
  335:         )
  336: 
  337:     else:
  338:         with tm.assert_produces_warning(FutureWarning, match=msg):
  339:             _assert_almost_equal_both(left, right, check_dtype=False)
  340: 
  341:         # TODO: to get the same deprecation in assert_numpy_array_equal we need
  342:         #  to change/deprecate the default for strict_nan to become True
  343:         # TODO: to get the same deprecation in assert_index_equal we need to
  344:         #  change/deprecate array_equivalent_object to be stricter, as
  345:         #  assert_index_equal uses Index.equal which uses array_equivalent.
  346:         with tm.assert_produces_warning(FutureWarning, match=msg):
  347:             tm.assert_series_equal(
  348:                 Series(left_arr, dtype=object), Series(right_arr, dtype=object)
  349:             )
  350:         with tm.assert_produces_warning(FutureWarning, match=msg):
  351:             tm.assert_frame_equal(
  352:                 DataFrame(left_arr, dtype=object), DataFrame(right_arr, dtype=object)
  353:             )
  354: 
  355: 
  356: def test_assert_not_almost_equal_inf():
  357:     _assert_not_almost_equal_both(np.inf, 0)
  358: 
  359: 
  360: @pytest.mark.parametrize(
  361:     "a,b",
  362:     [
  363:         (Index([1.0, 1.1]), Index([1.0, 1.100001])),
  364:         (Series([1.0, 1.1]), Series([1.0, 1.100001])),
  365:         (np.array([1.1, 2.000001]), np.array([1.1, 2.0])),
  366:         (DataFrame({"a": [1.0, 1.1]}), DataFrame({"a": [1.0, 1.100001]})),
  367:     ],
  368: )
  369: def test_assert_almost_equal_pandas(a, b):
  370:     _assert_almost_equal_both(a, b)
  371: 
  372: 
  373: def test_assert_almost_equal_object():
  374:     a = [Timestamp("2011-01-01"), Timestamp("2011-01-01")]
  375:     b = [Timestamp("2011-01-01"), Timestamp("2011-01-01")]
  376:     _assert_almost_equal_both(a, b)
  377: 
  378: 
  379: def test_assert_almost_equal_value_mismatch():
  380:     msg = "expected 2\\.00000 but got 1\\.00000, with rtol=1e-05, atol=1e-08"
  381: 
  382:     with pytest.raises(AssertionError, match=msg):
  383:         tm.assert_almost_equal(1, 2)
  384: 
  385: 
  386: @pytest.mark.parametrize(
  387:     "a,b,klass1,klass2",
  388:     [(np.array([1]), 1, "ndarray", "int"), (1, np.array([1]), "int", "ndarray")],
  389: )
  390: def test_assert_almost_equal_class_mismatch(a, b, klass1, klass2):
  391:     msg = f"""numpy array are different
  392: 
  393: numpy array classes are different
  394: \\[left\\]:  {klass1}
  395: \\[right\\]: {klass2}"""
  396: 
  397:     with pytest.raises(AssertionError, match=msg):
  398:         tm.assert_almost_equal(a, b)
  399: 
  400: 
  401: def test_assert_almost_equal_value_mismatch1():
  402:     msg = """numpy array are different
  403: 
  404: numpy array values are different \\(66\\.66667 %\\)
  405: \\[left\\]:  \\[nan, 2\\.0, 3\\.0\\]
  406: \\[right\\]: \\[1\\.0, nan, 3\\.0\\]"""
  407: 
  408:     with pytest.raises(AssertionError, match=msg):
  409:         tm.assert_almost_equal(np.array([np.nan, 2, 3]), np.array([1, np.nan, 3]))
  410: 
  411: 
  412: def test_assert_almost_equal_value_mismatch2():
  413:     msg = """numpy array are different
  414: 
  415: numpy array values are different \\(50\\.0 %\\)
  416: \\[left\\]:  \\[1, 2\\]
  417: \\[right\\]: \\[1, 3\\]"""
  418: 
  419:     with pytest.raises(AssertionError, match=msg):
  420:         tm.assert_almost_equal(np.array([1, 2]), np.array([1, 3]))
  421: 
  422: 
  423: def test_assert_almost_equal_value_mismatch3():
  424:     msg = """numpy array are different
  425: 
  426: numpy array values are different \\(16\\.66667 %\\)
  427: \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\], \\[5, 6\\]\\]
  428: \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\], \\[5, 6\\]\\]"""
  429: 
  430:     with pytest.raises(AssertionError, match=msg):
  431:         tm.assert_almost_equal(
  432:             np.array([[1, 2], [3, 4], [5, 6]]), np.array([[1, 3], [3, 4], [5, 6]])
  433:         )
  434: 
  435: 
  436: def test_assert_almost_equal_value_mismatch4():
  437:     msg = """numpy array are different
  438: 
  439: numpy array values are different \\(25\\.0 %\\)
  440: \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\]\\]
  441: \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\]\\]"""
  442: 
  443:     with pytest.raises(AssertionError, match=msg):
  444:         tm.assert_almost_equal(np.array([[1, 2], [3, 4]]), np.array([[1, 3], [3, 4]]))
  445: 
  446: 
  447: def test_assert_almost_equal_shape_mismatch_override():
  448:     msg = """Index are different
  449: 
  450: Index shapes are different
  451: \\[left\\]:  \\(2L*,\\)
  452: \\[right\\]: \\(3L*,\\)"""
  453:     with pytest.raises(AssertionError, match=msg):
  454:         tm.assert_almost_equal(np.array([1, 2]), np.array([3, 4, 5]), obj="Index")
  455: 
  456: 
  457: def test_assert_almost_equal_unicode():
  458:     # see gh-20503
  459:     msg = """numpy array are different
  460: 
  461: numpy array values are different \\(33\\.33333 %\\)
  462: \\[left\\]:  \\[ГЎ, Г , Г¤\\]
  463: \\[right\\]: \\[ГЎ, Г , ГҐ\\]"""
  464: 
  465:     with pytest.raises(AssertionError, match=msg):
  466:         tm.assert_almost_equal(np.array(["ГЎ", "Г ", "Г¤"]), np.array(["ГЎ", "Г ", "ГҐ"]))
  467: 
  468: 
  469: def test_assert_almost_equal_timestamp():
  470:     a = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-01")])
  471:     b = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-02")])
  472: 
  473:     msg = """numpy array are different
  474: 
  475: numpy array values are different \\(50\\.0 %\\)
  476: \\[left\\]:  \\[2011-01-01 00:00:00, 2011-01-01 00:00:00\\]
  477: \\[right\\]: \\[2011-01-01 00:00:00, 2011-01-02 00:00:00\\]"""
  478: 
  479:     with pytest.raises(AssertionError, match=msg):
  480:         tm.assert_almost_equal(a, b)
  481: 
  482: 
  483: def test_assert_almost_equal_iterable_length_mismatch():
  484:     msg = """Iterable are different
  485: 
  486: Iterable length are different
  487: \\[left\\]:  2
  488: \\[right\\]: 3"""
  489: 
  490:     with pytest.raises(AssertionError, match=msg):
  491:         tm.assert_almost_equal([1, 2], [3, 4, 5])
  492: 
  493: 
  494: def test_assert_almost_equal_iterable_values_mismatch():
  495:     msg = """Iterable are different
  496: 
  497: Iterable values are different \\(50\\.0 %\\)
  498: \\[left\\]:  \\[1, 2\\]
  499: \\[right\\]: \\[1, 3\\]"""
  500: 
  501:     with pytest.raises(AssertionError, match=msg):
  502:         tm.assert_almost_equal([1, 2], [1, 3])
  503: 
  504: 
  505: subarr = np.empty(2, dtype=object)
  506: subarr[:] = [np.array([None, "b"], dtype=object), np.array(["c", "d"], dtype=object)]
  507: 
  508: NESTED_CASES = [
  509:     # nested array
  510:     (
  511:         np.array([np.array([50, 70, 90]), np.array([20, 30])], dtype=object),
  512:         np.array([np.array([50, 70, 90]), np.array([20, 30])], dtype=object),
  513:     ),
  514:     # >1 level of nesting
  515:     (
  516:         np.array(
  517:             [
  518:                 np.array([np.array([50, 70]), np.array([90])], dtype=object),
  519:                 np.array([np.array([20, 30])], dtype=object),
  520:             ],
  521:             dtype=object,
  522:         ),
  523:         np.array(
  524:             [
  525:                 np.array([np.array([50, 70]), np.array([90])], dtype=object),
  526:                 np.array([np.array([20, 30])], dtype=object),
  527:             ],
  528:             dtype=object,
  529:         ),
  530:     ),
  531:     # lists
  532:     (
  533:         np.array([[50, 70, 90], [20, 30]], dtype=object),
  534:         np.array([[50, 70, 90], [20, 30]], dtype=object),
  535:     ),
  536:     # mixed array/list
  537:     (
  538:         np.array([np.array([1, 2, 3]), np.array([4, 5])], dtype=object),
  539:         np.array([[1, 2, 3], [4, 5]], dtype=object),
  540:     ),
  541:     (
  542:         np.array(
  543:             [
  544:                 np.array([np.array([1, 2, 3]), np.array([4, 5])], dtype=object),
  545:                 np.array(
  546:                     [np.array([6]), np.array([7, 8]), np.array([9])], dtype=object
  547:                 ),
  548:             ],
  549:             dtype=object,
  550:         ),
  551:         np.array([[[1, 2, 3], [4, 5]], [[6], [7, 8], [9]]], dtype=object),
  552:     ),
  553:     # same-length lists
  554:     (
  555:         np.array([subarr, None], dtype=object),
  556:         np.array([[[None, "b"], ["c", "d"]], None], dtype=object),
  557:     ),
  558:     # dicts
  559:     (
  560:         np.array([{"f1": 1, "f2": np.array(["a", "b"], dtype=object)}], dtype=object),
  561:         np.array([{"f1": 1, "f2": np.array(["a", "b"], dtype=object)}], dtype=object),
  562:     ),
  563:     (
  564:         np.array([{"f1": 1, "f2": np.array(["a", "b"], dtype=object)}], dtype=object),
  565:         np.array([{"f1": 1, "f2": ["a", "b"]}], dtype=object),
  566:     ),
  567:     # array/list of dicts
  568:     (
  569:         np.array(
  570:             [
  571:                 np.array(
  572:                     [{"f1": 1, "f2": np.array(["a", "b"], dtype=object)}], dtype=object
  573:                 ),
  574:                 np.array([], dtype=object),
  575:             ],
  576:             dtype=object,
  577:         ),
  578:         np.array([[{"f1": 1, "f2": ["a", "b"]}], []], dtype=object),
  579:     ),
  580: ]
  581: 
  582: 
  583: @pytest.mark.filterwarnings("ignore:elementwise comparison failed:DeprecationWarning")
  584: @pytest.mark.parametrize("a,b", NESTED_CASES)
  585: def test_assert_almost_equal_array_nested(a, b):
  586:     _assert_almost_equal_both(a, b)
