    1: import os
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     array,
    7:     compat,
    8: )
    9: import pandas._testing as tm
   10: 
   11: 
   12: def test_numpy_err_state_is_default():
   13:     expected = {"over": "warn", "divide": "warn", "invalid": "warn", "under": "ignore"}
   14:     import numpy as np
   15: 
   16:     # The error state should be unchanged after that import.
   17:     assert np.geterr() == expected
   18: 
   19: 
   20: def test_convert_rows_list_to_csv_str():
   21:     rows_list = ["aaa", "bbb", "ccc"]
   22:     ret = tm.convert_rows_list_to_csv_str(rows_list)
   23: 
   24:     if compat.is_platform_windows():
   25:         expected = "aaa\r\nbbb\r\nccc\r\n"
   26:     else:
   27:         expected = "aaa\nbbb\nccc\n"
   28: 
   29:     assert ret == expected
   30: 
   31: 
   32: @pytest.mark.parametrize("strict_data_files", [True, False])
   33: def test_datapath_missing(datapath):
   34:     with pytest.raises(ValueError, match="Could not find file"):
   35:         datapath("not_a_file")
   36: 
   37: 
   38: def test_datapath(datapath):
   39:     args = ("io", "data", "csv", "iris.csv")
   40: 
   41:     result = datapath(*args)
   42:     expected = os.path.join(os.path.dirname(os.path.dirname(__file__)), *args)
   43: 
   44:     assert result == expected
   45: 
   46: 
   47: def test_external_error_raised():
   48:     with tm.external_error_raised(TypeError):
   49:         raise TypeError("Should not check this error message, so it will pass")
   50: 
   51: 
   52: def test_is_sorted():
   53:     arr = array([1, 2, 3], dtype="Int64")
   54:     tm.assert_is_sorted(arr)
   55: 
   56:     arr = array([4, 2, 3], dtype="Int64")
   57:     with pytest.raises(AssertionError, match="ExtensionArray are different"):
   58:         tm.assert_is_sorted(arr)
