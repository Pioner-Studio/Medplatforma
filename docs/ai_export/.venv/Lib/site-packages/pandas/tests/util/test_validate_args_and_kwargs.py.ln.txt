    1: import pytest
    2: 
    3: from pandas.util._validators import validate_args_and_kwargs
    4: 
    5: 
    6: @pytest.fixture
    7: def _fname():
    8:     return "func"
    9: 
   10: 
   11: def test_invalid_total_length_max_length_one(_fname):
   12:     compat_args = ("foo",)
   13:     kwargs = {"foo": "FOO"}
   14:     args = ("FoO", "BaZ")
   15: 
   16:     min_fname_arg_count = 0
   17:     max_length = len(compat_args) + min_fname_arg_count
   18:     actual_length = len(kwargs) + len(args) + min_fname_arg_count
   19: 
   20:     msg = (
   21:         rf"{_fname}\(\) takes at most {max_length} "
   22:         rf"argument \({actual_length} given\)"
   23:     )
   24: 
   25:     with pytest.raises(TypeError, match=msg):
   26:         validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)
   27: 
   28: 
   29: def test_invalid_total_length_max_length_multiple(_fname):
   30:     compat_args = ("foo", "bar", "baz")
   31:     kwargs = {"foo": "FOO", "bar": "BAR"}
   32:     args = ("FoO", "BaZ")
   33: 
   34:     min_fname_arg_count = 2
   35:     max_length = len(compat_args) + min_fname_arg_count
   36:     actual_length = len(kwargs) + len(args) + min_fname_arg_count
   37: 
   38:     msg = (
   39:         rf"{_fname}\(\) takes at most {max_length} "
   40:         rf"arguments \({actual_length} given\)"
   41:     )
   42: 
   43:     with pytest.raises(TypeError, match=msg):
   44:         validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)
   45: 
   46: 
   47: @pytest.mark.parametrize("args,kwargs", [((), {"foo": -5, "bar": 2}), ((-5, 2), {})])
   48: def test_missing_args_or_kwargs(args, kwargs, _fname):
   49:     bad_arg = "bar"
   50:     min_fname_arg_count = 2
   51: 
   52:     compat_args = {"foo": -5, bad_arg: 1}
   53: 
   54:     msg = (
   55:         rf"the '{bad_arg}' parameter is not supported "
   56:         rf"in the pandas implementation of {_fname}\(\)"
   57:     )
   58: 
   59:     with pytest.raises(ValueError, match=msg):
   60:         validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)
   61: 
   62: 
   63: def test_duplicate_argument(_fname):
   64:     min_fname_arg_count = 2
   65: 
   66:     compat_args = {"foo": None, "bar": None, "baz": None}
   67:     kwargs = {"foo": None, "bar": None}
   68:     args = (None,)  # duplicate value for "foo"
   69: 
   70:     msg = rf"{_fname}\(\) got multiple values for keyword argument 'foo'"
   71: 
   72:     with pytest.raises(TypeError, match=msg):
   73:         validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)
   74: 
   75: 
   76: def test_validation(_fname):
   77:     # No exceptions should be raised.
   78:     compat_args = {"foo": 1, "bar": None, "baz": -2}
   79:     kwargs = {"baz": -2}
   80: 
   81:     args = (1, None)
   82:     min_fname_arg_count = 2
   83: 
   84:     validate_args_and_kwargs(_fname, args, kwargs, min_fname_arg_count, compat_args)
