    1: import pytest
    2: 
    3: from pandas.util._validators import validate_args
    4: 
    5: 
    6: @pytest.fixture
    7: def _fname():
    8:     return "func"
    9: 
   10: 
   11: def test_bad_min_fname_arg_count(_fname):
   12:     msg = "'max_fname_arg_count' must be non-negative"
   13: 
   14:     with pytest.raises(ValueError, match=msg):
   15:         validate_args(_fname, (None,), -1, "foo")
   16: 
   17: 
   18: def test_bad_arg_length_max_value_single(_fname):
   19:     args = (None, None)
   20:     compat_args = ("foo",)
   21: 
   22:     min_fname_arg_count = 0
   23:     max_length = len(compat_args) + min_fname_arg_count
   24:     actual_length = len(args) + min_fname_arg_count
   25:     msg = (
   26:         rf"{_fname}\(\) takes at most {max_length} "
   27:         rf"argument \({actual_length} given\)"
   28:     )
   29: 
   30:     with pytest.raises(TypeError, match=msg):
   31:         validate_args(_fname, args, min_fname_arg_count, compat_args)
   32: 
   33: 
   34: def test_bad_arg_length_max_value_multiple(_fname):
   35:     args = (None, None)
   36:     compat_args = {"foo": None}
   37: 
   38:     min_fname_arg_count = 2
   39:     max_length = len(compat_args) + min_fname_arg_count
   40:     actual_length = len(args) + min_fname_arg_count
   41:     msg = (
   42:         rf"{_fname}\(\) takes at most {max_length} "
   43:         rf"arguments \({actual_length} given\)"
   44:     )
   45: 
   46:     with pytest.raises(TypeError, match=msg):
   47:         validate_args(_fname, args, min_fname_arg_count, compat_args)
   48: 
   49: 
   50: @pytest.mark.parametrize("i", range(1, 3))
   51: def test_not_all_defaults(i, _fname):
   52:     bad_arg = "foo"
   53:     msg = (
   54:         f"the '{bad_arg}' parameter is not supported "
   55:         rf"in the pandas implementation of {_fname}\(\)"
   56:     )
   57: 
   58:     compat_args = {"foo": 2, "bar": -1, "baz": 3}
   59:     arg_vals = (1, -1, 3)
   60: 
   61:     with pytest.raises(ValueError, match=msg):
   62:         validate_args(_fname, arg_vals[:i], 2, compat_args)
   63: 
   64: 
   65: def test_validation(_fname):
   66:     # No exceptions should be raised.
   67:     validate_args(_fname, (None,), 2, {"out": None})
   68: 
   69:     compat_args = {"axis": 1, "out": None}
   70:     validate_args(_fname, (1, None), 2, compat_args)
