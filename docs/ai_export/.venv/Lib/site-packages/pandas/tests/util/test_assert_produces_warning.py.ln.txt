    1: """"
    2: Test module for testing ``pandas._testing.assert_produces_warning``.
    3: """
    4: import warnings
    5: 
    6: import pytest
    7: 
    8: from pandas.errors import (
    9:     DtypeWarning,
   10:     PerformanceWarning,
   11: )
   12: 
   13: import pandas._testing as tm
   14: 
   15: 
   16: @pytest.fixture(
   17:     params=[
   18:         RuntimeWarning,
   19:         ResourceWarning,
   20:         UserWarning,
   21:         FutureWarning,
   22:         DeprecationWarning,
   23:         PerformanceWarning,
   24:         DtypeWarning,
   25:     ],
   26: )
   27: def category(request):
   28:     """
   29:     Return unique warning.
   30: 
   31:     Useful for testing behavior of tm.assert_produces_warning with various categories.
   32:     """
   33:     return request.param
   34: 
   35: 
   36: @pytest.fixture(
   37:     params=[
   38:         (RuntimeWarning, UserWarning),
   39:         (UserWarning, FutureWarning),
   40:         (FutureWarning, RuntimeWarning),
   41:         (DeprecationWarning, PerformanceWarning),
   42:         (PerformanceWarning, FutureWarning),
   43:         (DtypeWarning, DeprecationWarning),
   44:         (ResourceWarning, DeprecationWarning),
   45:         (FutureWarning, DeprecationWarning),
   46:     ],
   47:     ids=lambda x: type(x).__name__,
   48: )
   49: def pair_different_warnings(request):
   50:     """
   51:     Return pair or different warnings.
   52: 
   53:     Useful for testing how several different warnings are handled
   54:     in tm.assert_produces_warning.
   55:     """
   56:     return request.param
   57: 
   58: 
   59: def f():
   60:     warnings.warn("f1", FutureWarning)
   61:     warnings.warn("f2", RuntimeWarning)
   62: 
   63: 
   64: @pytest.mark.filterwarnings("ignore:f1:FutureWarning")
   65: def test_assert_produces_warning_honors_filter():
   66:     # Raise by default.
   67:     msg = r"Caused unexpected warning\(s\)"
   68:     with pytest.raises(AssertionError, match=msg):
   69:         with tm.assert_produces_warning(RuntimeWarning):
   70:             f()
   71: 
   72:     with tm.assert_produces_warning(RuntimeWarning, raise_on_extra_warnings=False):
   73:         f()
   74: 
   75: 
   76: @pytest.mark.parametrize(
   77:     "message, match",
   78:     [
   79:         ("", None),
   80:         ("", ""),
   81:         ("Warning message", r".*"),
   82:         ("Warning message", "War"),
   83:         ("Warning message", r"[Ww]arning"),
   84:         ("Warning message", "age"),
   85:         ("Warning message", r"age$"),
   86:         ("Message 12-234 with numbers", r"\d{2}-\d{3}"),
   87:         ("Message 12-234 with numbers", r"^Mes.*\d{2}-\d{3}"),
   88:         ("Message 12-234 with numbers", r"\d{2}-\d{3}\s\S+"),
   89:         ("Message, which we do not match", None),
   90:     ],
   91: )
   92: def test_catch_warning_category_and_match(category, message, match):
   93:     with tm.assert_produces_warning(category, match=match):
   94:         warnings.warn(message, category)
   95: 
   96: 
   97: def test_fail_to_match_runtime_warning():
   98:     category = RuntimeWarning
   99:     match = "Did not see this warning"
  100:     unmatched = (
  101:         r"Did not see warning 'RuntimeWarning' matching 'Did not see this warning'. "
  102:         r"The emitted warning messages are "
  103:         r"\[RuntimeWarning\('This is not a match.'\), "
  104:         r"RuntimeWarning\('Another unmatched warning.'\)\]"
  105:     )
  106:     with pytest.raises(AssertionError, match=unmatched):
  107:         with tm.assert_produces_warning(category, match=match):
  108:             warnings.warn("This is not a match.", category)
  109:             warnings.warn("Another unmatched warning.", category)
  110: 
  111: 
  112: def test_fail_to_match_future_warning():
  113:     category = FutureWarning
  114:     match = "Warning"
  115:     unmatched = (
  116:         r"Did not see warning 'FutureWarning' matching 'Warning'. "
  117:         r"The emitted warning messages are "
  118:         r"\[FutureWarning\('This is not a match.'\), "
  119:         r"FutureWarning\('Another unmatched warning.'\)\]"
  120:     )
  121:     with pytest.raises(AssertionError, match=unmatched):
  122:         with tm.assert_produces_warning(category, match=match):
  123:             warnings.warn("This is not a match.", category)
  124:             warnings.warn("Another unmatched warning.", category)
  125: 
  126: 
  127: def test_fail_to_match_resource_warning():
  128:     category = ResourceWarning
  129:     match = r"\d+"
  130:     unmatched = (
  131:         r"Did not see warning 'ResourceWarning' matching '\\d\+'. "
  132:         r"The emitted warning messages are "
  133:         r"\[ResourceWarning\('This is not a match.'\), "
  134:         r"ResourceWarning\('Another unmatched warning.'\)\]"
  135:     )
  136:     with pytest.raises(AssertionError, match=unmatched):
  137:         with tm.assert_produces_warning(category, match=match):
  138:             warnings.warn("This is not a match.", category)
  139:             warnings.warn("Another unmatched warning.", category)
  140: 
  141: 
  142: def test_fail_to_catch_actual_warning(pair_different_warnings):
  143:     expected_category, actual_category = pair_different_warnings
  144:     match = "Did not see expected warning of class"
  145:     with pytest.raises(AssertionError, match=match):
  146:         with tm.assert_produces_warning(expected_category):
  147:             warnings.warn("warning message", actual_category)
  148: 
  149: 
  150: def test_ignore_extra_warning(pair_different_warnings):
  151:     expected_category, extra_category = pair_different_warnings
  152:     with tm.assert_produces_warning(expected_category, raise_on_extra_warnings=False):
  153:         warnings.warn("Expected warning", expected_category)
  154:         warnings.warn("Unexpected warning OK", extra_category)
  155: 
  156: 
  157: def test_raise_on_extra_warning(pair_different_warnings):
  158:     expected_category, extra_category = pair_different_warnings
  159:     match = r"Caused unexpected warning\(s\)"
  160:     with pytest.raises(AssertionError, match=match):
  161:         with tm.assert_produces_warning(expected_category):
  162:             warnings.warn("Expected warning", expected_category)
  163:             warnings.warn("Unexpected warning NOT OK", extra_category)
  164: 
  165: 
  166: def test_same_category_different_messages_first_match():
  167:     category = UserWarning
  168:     with tm.assert_produces_warning(category, match=r"^Match this"):
  169:         warnings.warn("Match this", category)
  170:         warnings.warn("Do not match that", category)
  171:         warnings.warn("Do not match that either", category)
  172: 
  173: 
  174: def test_same_category_different_messages_last_match():
  175:     category = DeprecationWarning
  176:     with tm.assert_produces_warning(category, match=r"^Match this"):
  177:         warnings.warn("Do not match that", category)
  178:         warnings.warn("Do not match that either", category)
  179:         warnings.warn("Match this", category)
  180: 
  181: 
  182: def test_match_multiple_warnings():
  183:     # https://github.com/pandas-dev/pandas/issues/47829
  184:     category = (FutureWarning, UserWarning)
  185:     with tm.assert_produces_warning(category, match=r"^Match this"):
  186:         warnings.warn("Match this", FutureWarning)
  187:         warnings.warn("Match this too", UserWarning)
  188: 
  189: 
  190: def test_right_category_wrong_match_raises(pair_different_warnings):
  191:     target_category, other_category = pair_different_warnings
  192:     with pytest.raises(AssertionError, match="Did not see warning.*matching"):
  193:         with tm.assert_produces_warning(target_category, match=r"^Match this"):
  194:             warnings.warn("Do not match it", target_category)
  195:             warnings.warn("Match this", other_category)
  196: 
  197: 
  198: @pytest.mark.parametrize("false_or_none", [False, None])
  199: class TestFalseOrNoneExpectedWarning:
  200:     def test_raise_on_warning(self, false_or_none):
  201:         msg = r"Caused unexpected warning\(s\)"
  202:         with pytest.raises(AssertionError, match=msg):
  203:             with tm.assert_produces_warning(false_or_none):
  204:                 f()
  205: 
  206:     def test_no_raise_without_warning(self, false_or_none):
  207:         with tm.assert_produces_warning(false_or_none):
  208:             pass
  209: 
  210:     def test_no_raise_with_false_raise_on_extra(self, false_or_none):
  211:         with tm.assert_produces_warning(false_or_none, raise_on_extra_warnings=False):
  212:             f()
  213: 
  214: 
  215: def test_raises_during_exception():
  216:     msg = "Did not see expected warning of class 'UserWarning'"
  217:     with pytest.raises(AssertionError, match=msg):
  218:         with tm.assert_produces_warning(UserWarning):
  219:             raise ValueError
  220: 
  221:     with pytest.raises(AssertionError, match=msg):
  222:         with tm.assert_produces_warning(UserWarning):
  223:             warnings.warn("FutureWarning", FutureWarning)
  224:             raise IndexError
  225: 
  226:     msg = "Caused unexpected warning"
  227:     with pytest.raises(AssertionError, match=msg):
  228:         with tm.assert_produces_warning(None):
  229:             warnings.warn("FutureWarning", FutureWarning)
  230:             raise SystemError
  231: 
  232: 
  233: def test_passes_during_exception():
  234:     with pytest.raises(SyntaxError, match="Error"):
  235:         with tm.assert_produces_warning(None):
  236:             raise SyntaxError("Error")
  237: 
  238:     with pytest.raises(ValueError, match="Error"):
  239:         with tm.assert_produces_warning(FutureWarning, match="FutureWarning"):
  240:             warnings.warn("FutureWarning", FutureWarning)
  241:             raise ValueError("Error")
