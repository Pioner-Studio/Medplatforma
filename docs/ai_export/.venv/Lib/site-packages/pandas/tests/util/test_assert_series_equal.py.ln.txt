    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     Categorical,
    7:     DataFrame,
    8:     Series,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: def _assert_series_equal_both(a, b, **kwargs):
   14:     """
   15:     Check that two Series equal.
   16: 
   17:     This check is performed commutatively.
   18: 
   19:     Parameters
   20:     ----------
   21:     a : Series
   22:         The first Series to compare.
   23:     b : Series
   24:         The second Series to compare.
   25:     kwargs : dict
   26:         The arguments passed to `tm.assert_series_equal`.
   27:     """
   28:     tm.assert_series_equal(a, b, **kwargs)
   29:     tm.assert_series_equal(b, a, **kwargs)
   30: 
   31: 
   32: def _assert_not_series_equal(a, b, **kwargs):
   33:     """
   34:     Check that two Series are not equal.
   35: 
   36:     Parameters
   37:     ----------
   38:     a : Series
   39:         The first Series to compare.
   40:     b : Series
   41:         The second Series to compare.
   42:     kwargs : dict
   43:         The arguments passed to `tm.assert_series_equal`.
   44:     """
   45:     try:
   46:         tm.assert_series_equal(a, b, **kwargs)
   47:         msg = "The two Series were equal when they shouldn't have been"
   48: 
   49:         pytest.fail(msg=msg)
   50:     except AssertionError:
   51:         pass
   52: 
   53: 
   54: def _assert_not_series_equal_both(a, b, **kwargs):
   55:     """
   56:     Check that two Series are not equal.
   57: 
   58:     This check is performed commutatively.
   59: 
   60:     Parameters
   61:     ----------
   62:     a : Series
   63:         The first Series to compare.
   64:     b : Series
   65:         The second Series to compare.
   66:     kwargs : dict
   67:         The arguments passed to `tm.assert_series_equal`.
   68:     """
   69:     _assert_not_series_equal(a, b, **kwargs)
   70:     _assert_not_series_equal(b, a, **kwargs)
   71: 
   72: 
   73: @pytest.mark.parametrize("data", [range(3), list("abc"), list("ГЎГ Г¤")])
   74: def test_series_equal(data):
   75:     _assert_series_equal_both(Series(data), Series(data))
   76: 
   77: 
   78: @pytest.mark.parametrize(
   79:     "data1,data2",
   80:     [
   81:         (range(3), range(1, 4)),
   82:         (list("abc"), list("xyz")),
   83:         (list("ГЎГ Г¤"), list("Г©ГЁГ«")),
   84:         (list("ГЎГ Г¤"), list(b"aaa")),
   85:         (range(3), range(4)),
   86:     ],
   87: )
   88: def test_series_not_equal_value_mismatch(data1, data2):
   89:     _assert_not_series_equal_both(Series(data1), Series(data2))
   90: 
   91: 
   92: @pytest.mark.parametrize(
   93:     "kwargs",
   94:     [
   95:         {"dtype": "float64"},  # dtype mismatch
   96:         {"index": [1, 2, 4]},  # index mismatch
   97:         {"name": "foo"},  # name mismatch
   98:     ],
   99: )
  100: def test_series_not_equal_metadata_mismatch(kwargs):
  101:     data = range(3)
  102:     s1 = Series(data)
  103: 
  104:     s2 = Series(data, **kwargs)
  105:     _assert_not_series_equal_both(s1, s2)
  106: 
  107: 
  108: @pytest.mark.parametrize("data1,data2", [(0.12345, 0.12346), (0.1235, 0.1236)])
  109: @pytest.mark.parametrize("dtype", ["float32", "float64", "Float32"])
  110: @pytest.mark.parametrize("decimals", [0, 1, 2, 3, 5, 10])
  111: def test_less_precise(data1, data2, dtype, decimals):
  112:     rtol = 10**-decimals
  113:     s1 = Series([data1], dtype=dtype)
  114:     s2 = Series([data2], dtype=dtype)
  115: 
  116:     if decimals in (5, 10) or (decimals >= 3 and abs(data1 - data2) >= 0.0005):
  117:         msg = "Series values are different"
  118:         with pytest.raises(AssertionError, match=msg):
  119:             tm.assert_series_equal(s1, s2, rtol=rtol)
  120:     else:
  121:         _assert_series_equal_both(s1, s2, rtol=rtol)
  122: 
  123: 
  124: @pytest.mark.parametrize(
  125:     "s1,s2,msg",
  126:     [
  127:         # Index
  128:         (
  129:             Series(["l1", "l2"], index=[1, 2]),
  130:             Series(["l1", "l2"], index=[1.0, 2.0]),
  131:             "Series\\.index are different",
  132:         ),
  133:         # MultiIndex
  134:         (
  135:             DataFrame.from_records(
  136:                 {"a": [1, 2], "b": [2.1, 1.5], "c": ["l1", "l2"]}, index=["a", "b"]
  137:             ).c,
  138:             DataFrame.from_records(
  139:                 {"a": [1.0, 2.0], "b": [2.1, 1.5], "c": ["l1", "l2"]}, index=["a", "b"]
  140:             ).c,
  141:             "MultiIndex level \\[0\\] are different",
  142:         ),
  143:     ],
  144: )
  145: def test_series_equal_index_dtype(s1, s2, msg, check_index_type):
  146:     kwargs = {"check_index_type": check_index_type}
  147: 
  148:     if check_index_type:
  149:         with pytest.raises(AssertionError, match=msg):
  150:             tm.assert_series_equal(s1, s2, **kwargs)
  151:     else:
  152:         tm.assert_series_equal(s1, s2, **kwargs)
  153: 
  154: 
  155: @pytest.mark.parametrize("check_like", [True, False])
  156: def test_series_equal_order_mismatch(check_like):
  157:     s1 = Series([1, 2, 3], index=["a", "b", "c"])
  158:     s2 = Series([3, 2, 1], index=["c", "b", "a"])
  159: 
  160:     if not check_like:  # Do not ignore index ordering.
  161:         with pytest.raises(AssertionError, match="Series.index are different"):
  162:             tm.assert_series_equal(s1, s2, check_like=check_like)
  163:     else:
  164:         _assert_series_equal_both(s1, s2, check_like=check_like)
  165: 
  166: 
  167: @pytest.mark.parametrize("check_index", [True, False])
  168: def test_series_equal_index_mismatch(check_index):
  169:     s1 = Series([1, 2, 3], index=["a", "b", "c"])
  170:     s2 = Series([1, 2, 3], index=["c", "b", "a"])
  171: 
  172:     if check_index:  # Do not ignore index.
  173:         with pytest.raises(AssertionError, match="Series.index are different"):
  174:             tm.assert_series_equal(s1, s2, check_index=check_index)
  175:     else:
  176:         _assert_series_equal_both(s1, s2, check_index=check_index)
  177: 
  178: 
  179: def test_series_invalid_param_combination():
  180:     left = Series(dtype=object)
  181:     right = Series(dtype=object)
  182:     with pytest.raises(
  183:         ValueError, match="check_like must be False if check_index is False"
  184:     ):
  185:         tm.assert_series_equal(left, right, check_index=False, check_like=True)
  186: 
  187: 
  188: def test_series_equal_length_mismatch(rtol):
  189:     msg = """Series are different
  190: 
  191: Series length are different
  192: \\[left\\]:  3, RangeIndex\\(start=0, stop=3, step=1\\)
  193: \\[right\\]: 4, RangeIndex\\(start=0, stop=4, step=1\\)"""
  194: 
  195:     s1 = Series([1, 2, 3])
  196:     s2 = Series([1, 2, 3, 4])
  197: 
  198:     with pytest.raises(AssertionError, match=msg):
  199:         tm.assert_series_equal(s1, s2, rtol=rtol)
  200: 
  201: 
  202: def test_series_equal_numeric_values_mismatch(rtol):
  203:     msg = """Series are different
  204: 
  205: Series values are different \\(33\\.33333 %\\)
  206: \\[index\\]: \\[0, 1, 2\\]
  207: \\[left\\]:  \\[1, 2, 3\\]
  208: \\[right\\]: \\[1, 2, 4\\]"""
  209: 
  210:     s1 = Series([1, 2, 3])
  211:     s2 = Series([1, 2, 4])
  212: 
  213:     with pytest.raises(AssertionError, match=msg):
  214:         tm.assert_series_equal(s1, s2, rtol=rtol)
  215: 
  216: 
  217: def test_series_equal_categorical_values_mismatch(rtol, using_infer_string):
  218:     if using_infer_string:
  219:         msg = """Series are different
  220: 
  221: Series values are different \\(66\\.66667 %\\)
  222: \\[index\\]: \\[0, 1, 2\\]
  223: \\[left\\]:  \\['a', 'b', 'c'\\]
  224: Categories \\(3, string\\): \\[a, b, c\\]
  225: \\[right\\]: \\['a', 'c', 'b'\\]
  226: Categories \\(3, string\\): \\[a, b, c\\]"""
  227:     else:
  228:         msg = """Series are different
  229: 
  230: Series values are different \\(66\\.66667 %\\)
  231: \\[index\\]: \\[0, 1, 2\\]
  232: \\[left\\]:  \\['a', 'b', 'c'\\]
  233: Categories \\(3, object\\): \\['a', 'b', 'c'\\]
  234: \\[right\\]: \\['a', 'c', 'b'\\]
  235: Categories \\(3, object\\): \\['a', 'b', 'c'\\]"""
  236: 
  237:     s1 = Series(Categorical(["a", "b", "c"]))
  238:     s2 = Series(Categorical(["a", "c", "b"]))
  239: 
  240:     with pytest.raises(AssertionError, match=msg):
  241:         tm.assert_series_equal(s1, s2, rtol=rtol)
  242: 
  243: 
  244: def test_series_equal_datetime_values_mismatch(rtol):
  245:     msg = """Series are different
  246: 
  247: Series values are different \\(100.0 %\\)
  248: \\[index\\]: \\[0, 1, 2\\]
  249: \\[left\\]:  \\[1514764800000000000, 1514851200000000000, 1514937600000000000\\]
  250: \\[right\\]: \\[1549065600000000000, 1549152000000000000, 1549238400000000000\\]"""
  251: 
  252:     s1 = Series(pd.date_range("2018-01-01", periods=3, freq="D"))
  253:     s2 = Series(pd.date_range("2019-02-02", periods=3, freq="D"))
  254: 
  255:     with pytest.raises(AssertionError, match=msg):
  256:         tm.assert_series_equal(s1, s2, rtol=rtol)
  257: 
  258: 
  259: def test_series_equal_categorical_mismatch(check_categorical, using_infer_string):
  260:     if using_infer_string:
  261:         dtype = "string"
  262:     else:
  263:         dtype = "object"
  264:     msg = f"""Attributes of Series are different
  265: 
  266: Attribute "dtype" are different
  267: \\[left\\]:  CategoricalDtype\\(categories=\\['a', 'b'\\], ordered=False, \
  268: categories_dtype={dtype}\\)
  269: \\[right\\]: CategoricalDtype\\(categories=\\['a', 'b', 'c'\\], \
  270: ordered=False, categories_dtype={dtype}\\)"""
  271: 
  272:     s1 = Series(Categorical(["a", "b"]))
  273:     s2 = Series(Categorical(["a", "b"], categories=list("abc")))
  274: 
  275:     if check_categorical:
  276:         with pytest.raises(AssertionError, match=msg):
  277:             tm.assert_series_equal(s1, s2, check_categorical=check_categorical)
  278:     else:
  279:         _assert_series_equal_both(s1, s2, check_categorical=check_categorical)
  280: 
  281: 
  282: def test_assert_series_equal_extension_dtype_mismatch():
  283:     # https://github.com/pandas-dev/pandas/issues/32747
  284:     left = Series(pd.array([1, 2, 3], dtype="Int64"))
  285:     right = left.astype(int)
  286: 
  287:     msg = """Attributes of Series are different
  288: 
  289: Attribute "dtype" are different
  290: \\[left\\]:  Int64
  291: \\[right\\]: int[32|64]"""
  292: 
  293:     tm.assert_series_equal(left, right, check_dtype=False)
  294: 
  295:     with pytest.raises(AssertionError, match=msg):
  296:         tm.assert_series_equal(left, right, check_dtype=True)
  297: 
  298: 
  299: def test_assert_series_equal_interval_dtype_mismatch():
  300:     # https://github.com/pandas-dev/pandas/issues/32747
  301:     left = Series([pd.Interval(0, 1)], dtype="interval")
  302:     right = left.astype(object)
  303: 
  304:     msg = """Attributes of Series are different
  305: 
  306: Attribute "dtype" are different
  307: \\[left\\]:  interval\\[int64, right\\]
  308: \\[right\\]: object"""
  309: 
  310:     tm.assert_series_equal(left, right, check_dtype=False)
  311: 
  312:     with pytest.raises(AssertionError, match=msg):
  313:         tm.assert_series_equal(left, right, check_dtype=True)
  314: 
  315: 
  316: def test_series_equal_series_type():
  317:     class MySeries(Series):
  318:         pass
  319: 
  320:     s1 = Series([1, 2])
  321:     s2 = Series([1, 2])
  322:     s3 = MySeries([1, 2])
  323: 
  324:     tm.assert_series_equal(s1, s2, check_series_type=False)
  325:     tm.assert_series_equal(s1, s2, check_series_type=True)
  326: 
  327:     tm.assert_series_equal(s1, s3, check_series_type=False)
  328:     tm.assert_series_equal(s3, s1, check_series_type=False)
  329: 
  330:     with pytest.raises(AssertionError, match="Series classes are different"):
  331:         tm.assert_series_equal(s1, s3, check_series_type=True)
  332: 
  333:     with pytest.raises(AssertionError, match="Series classes are different"):
  334:         tm.assert_series_equal(s3, s1, check_series_type=True)
  335: 
  336: 
  337: def test_series_equal_exact_for_nonnumeric():
  338:     # https://github.com/pandas-dev/pandas/issues/35446
  339:     s1 = Series(["a", "b"])
  340:     s2 = Series(["a", "b"])
  341:     s3 = Series(["b", "a"])
  342: 
  343:     tm.assert_series_equal(s1, s2, check_exact=True)
  344:     tm.assert_series_equal(s2, s1, check_exact=True)
  345: 
  346:     msg = """Series are different
  347: 
  348: Series values are different \\(100\\.0 %\\)
  349: \\[index\\]: \\[0, 1\\]
  350: \\[left\\]:  \\[a, b\\]
  351: \\[right\\]: \\[b, a\\]"""
  352:     with pytest.raises(AssertionError, match=msg):
  353:         tm.assert_series_equal(s1, s3, check_exact=True)
  354: 
  355:     msg = """Series are different
  356: 
  357: Series values are different \\(100\\.0 %\\)
  358: \\[index\\]: \\[0, 1\\]
  359: \\[left\\]:  \\[b, a\\]
  360: \\[right\\]: \\[a, b\\]"""
  361:     with pytest.raises(AssertionError, match=msg):
  362:         tm.assert_series_equal(s3, s1, check_exact=True)
  363: 
  364: 
  365: def test_assert_series_equal_ignore_extension_dtype_mismatch():
  366:     # https://github.com/pandas-dev/pandas/issues/35715
  367:     left = Series([1, 2, 3], dtype="Int64")
  368:     right = Series([1, 2, 3], dtype="Int32")
  369:     tm.assert_series_equal(left, right, check_dtype=False)
  370: 
  371: 
  372: def test_assert_series_equal_ignore_extension_dtype_mismatch_cross_class():
  373:     # https://github.com/pandas-dev/pandas/issues/35715
  374:     left = Series([1, 2, 3], dtype="Int64")
  375:     right = Series([1, 2, 3], dtype="int64")
  376:     tm.assert_series_equal(left, right, check_dtype=False)
  377: 
  378: 
  379: def test_allows_duplicate_labels():
  380:     left = Series([1])
  381:     right = Series([1]).set_flags(allows_duplicate_labels=False)
  382:     tm.assert_series_equal(left, left)
  383:     tm.assert_series_equal(right, right)
  384:     tm.assert_series_equal(left, right, check_flags=False)
  385:     tm.assert_series_equal(right, left, check_flags=False)
  386: 
  387:     with pytest.raises(AssertionError, match="<Flags"):
  388:         tm.assert_series_equal(left, right)
  389: 
  390:     with pytest.raises(AssertionError, match="<Flags"):
  391:         tm.assert_series_equal(left, right)
  392: 
  393: 
  394: def test_assert_series_equal_identical_na(nulls_fixture):
  395:     ser = Series([nulls_fixture])
  396: 
  397:     tm.assert_series_equal(ser, ser.copy())
  398: 
  399:     # while we're here do Index too
  400:     idx = pd.Index(ser)
  401:     tm.assert_index_equal(idx, idx.copy(deep=True))
  402: 
  403: 
  404: def test_identical_nested_series_is_equal():
  405:     # GH#22400
  406:     x = Series(
  407:         [
  408:             0,
  409:             0.0131142231938,
  410:             1.77774652865e-05,
  411:             np.array([0.4722720840328748, 0.4216929783681722]),
  412:         ]
  413:     )
  414:     y = Series(
  415:         [
  416:             0,
  417:             0.0131142231938,
  418:             1.77774652865e-05,
  419:             np.array([0.4722720840328748, 0.4216929783681722]),
  420:         ]
  421:     )
  422:     # These two arrays should be equal, nesting could cause issue
  423: 
  424:     tm.assert_series_equal(x, x)
  425:     tm.assert_series_equal(x, x, check_exact=True)
  426:     tm.assert_series_equal(x, y)
  427:     tm.assert_series_equal(x, y, check_exact=True)
  428: 
  429: 
  430: @pytest.mark.parametrize("dtype", ["datetime64", "timedelta64"])
  431: def test_check_dtype_false_different_reso(dtype):
  432:     # GH 52449
  433:     ser_s = Series([1000213, 2131232, 21312331]).astype(f"{dtype}[s]")
  434:     ser_ms = ser_s.astype(f"{dtype}[ms]")
  435:     with pytest.raises(AssertionError, match="Attributes of Series are different"):
  436:         tm.assert_series_equal(ser_s, ser_ms)
  437:     tm.assert_series_equal(ser_ms, ser_s, check_dtype=False)
  438: 
  439:     ser_ms -= Series([1, 1, 1]).astype(f"{dtype}[ms]")
  440: 
  441:     with pytest.raises(AssertionError, match="Series are different"):
  442:         tm.assert_series_equal(ser_s, ser_ms)
  443: 
  444:     with pytest.raises(AssertionError, match="Series are different"):
  445:         tm.assert_series_equal(ser_s, ser_ms, check_dtype=False)
  446: 
  447: 
  448: @pytest.mark.parametrize("dtype", ["Int64", "int64"])
  449: def test_large_unequal_ints(dtype):
  450:     # https://github.com/pandas-dev/pandas/issues/55882
  451:     left = Series([1577840521123000], dtype=dtype)
  452:     right = Series([1577840521123543], dtype=dtype)
  453:     with pytest.raises(AssertionError, match="Series are different"):
  454:         tm.assert_series_equal(left, right)
  455: 
  456: 
  457: @pytest.mark.parametrize("dtype", [None, object])
  458: @pytest.mark.parametrize("check_exact", [True, False])
  459: @pytest.mark.parametrize("val", [3, 3.5])
  460: def test_ea_and_numpy_no_dtype_check(val, check_exact, dtype):
  461:     # GH#56651
  462:     left = Series([1, 2, val], dtype=dtype)
  463:     right = Series(pd.array([1, 2, val]))
  464:     tm.assert_series_equal(left, right, check_dtype=False, check_exact=check_exact)
  465: 
  466: 
  467: def test_assert_series_equal_int_tol():
  468:     # GH#56646
  469:     left = Series([81, 18, 121, 38, 74, 72, 81, 81, 146, 81, 81, 170, 74, 74])
  470:     right = Series([72, 9, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72])
  471:     tm.assert_series_equal(left, right, rtol=1.5)
  472: 
  473:     tm.assert_frame_equal(left.to_frame(), right.to_frame(), rtol=1.5)
  474:     tm.assert_extension_array_equal(
  475:         left.astype("Int64").values, right.astype("Int64").values, rtol=1.5
  476:     )
  477: 
  478: 
  479: def test_assert_series_equal_index_exact_default():
  480:     # GH#57067
  481:     ser1 = Series(np.zeros(6, dtype=int), [0, 0.2, 0.4, 0.6, 0.8, 1])
  482:     ser2 = Series(np.zeros(6, dtype=int), np.linspace(0, 1, 6))
  483:     tm.assert_series_equal(ser1, ser2)
  484:     tm.assert_frame_equal(ser1.to_frame(), ser2.to_frame())
