    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Timestamp,
    6:     array,
    7: )
    8: import pandas._testing as tm
    9: from pandas.core.arrays.sparse import SparseArray
   10: 
   11: 
   12: @pytest.mark.parametrize(
   13:     "kwargs",
   14:     [
   15:         {},  # Default is check_exact=False
   16:         {"check_exact": False},
   17:         {"check_exact": True},
   18:     ],
   19: )
   20: def test_assert_extension_array_equal_not_exact(kwargs):
   21:     # see gh-23709
   22:     arr1 = SparseArray([-0.17387645482451206, 0.3414148016424936])
   23:     arr2 = SparseArray([-0.17387645482451206, 0.3414148016424937])
   24: 
   25:     if kwargs.get("check_exact", False):
   26:         msg = """\
   27: ExtensionArray are different
   28: 
   29: ExtensionArray values are different \\(50\\.0 %\\)
   30: \\[left\\]:  \\[-0\\.17387645482.*, 0\\.341414801642.*\\]
   31: \\[right\\]: \\[-0\\.17387645482.*, 0\\.341414801642.*\\]"""
   32: 
   33:         with pytest.raises(AssertionError, match=msg):
   34:             tm.assert_extension_array_equal(arr1, arr2, **kwargs)
   35:     else:
   36:         tm.assert_extension_array_equal(arr1, arr2, **kwargs)
   37: 
   38: 
   39: @pytest.mark.parametrize("decimals", range(10))
   40: def test_assert_extension_array_equal_less_precise(decimals):
   41:     rtol = 0.5 * 10**-decimals
   42:     arr1 = SparseArray([0.5, 0.123456])
   43:     arr2 = SparseArray([0.5, 0.123457])
   44: 
   45:     if decimals >= 5:
   46:         msg = """\
   47: ExtensionArray are different
   48: 
   49: ExtensionArray values are different \\(50\\.0 %\\)
   50: \\[left\\]:  \\[0\\.5, 0\\.123456\\]
   51: \\[right\\]: \\[0\\.5, 0\\.123457\\]"""
   52: 
   53:         with pytest.raises(AssertionError, match=msg):
   54:             tm.assert_extension_array_equal(arr1, arr2, rtol=rtol)
   55:     else:
   56:         tm.assert_extension_array_equal(arr1, arr2, rtol=rtol)
   57: 
   58: 
   59: def test_assert_extension_array_equal_dtype_mismatch(check_dtype):
   60:     end = 5
   61:     kwargs = {"check_dtype": check_dtype}
   62: 
   63:     arr1 = SparseArray(np.arange(end, dtype="int64"))
   64:     arr2 = SparseArray(np.arange(end, dtype="int32"))
   65: 
   66:     if check_dtype:
   67:         msg = """\
   68: ExtensionArray are different
   69: 
   70: Attribute "dtype" are different
   71: \\[left\\]:  Sparse\\[int64, 0\\]
   72: \\[right\\]: Sparse\\[int32, 0\\]"""
   73: 
   74:         with pytest.raises(AssertionError, match=msg):
   75:             tm.assert_extension_array_equal(arr1, arr2, **kwargs)
   76:     else:
   77:         tm.assert_extension_array_equal(arr1, arr2, **kwargs)
   78: 
   79: 
   80: def test_assert_extension_array_equal_missing_values():
   81:     arr1 = SparseArray([np.nan, 1, 2, np.nan])
   82:     arr2 = SparseArray([np.nan, 1, 2, 3])
   83: 
   84:     msg = """\
   85: ExtensionArray NA mask are different
   86: 
   87: ExtensionArray NA mask values are different \\(25\\.0 %\\)
   88: \\[left\\]:  \\[True, False, False, True\\]
   89: \\[right\\]: \\[True, False, False, False\\]"""
   90: 
   91:     with pytest.raises(AssertionError, match=msg):
   92:         tm.assert_extension_array_equal(arr1, arr2)
   93: 
   94: 
   95: @pytest.mark.parametrize("side", ["left", "right"])
   96: def test_assert_extension_array_equal_non_extension_array(side):
   97:     numpy_array = np.arange(5)
   98:     extension_array = SparseArray(numpy_array)
   99: 
  100:     msg = f"{side} is not an ExtensionArray"
  101:     args = (
  102:         (numpy_array, extension_array)
  103:         if side == "left"
  104:         else (extension_array, numpy_array)
  105:     )
  106: 
  107:     with pytest.raises(AssertionError, match=msg):
  108:         tm.assert_extension_array_equal(*args)
  109: 
  110: 
  111: @pytest.mark.parametrize("right_dtype", ["Int32", "int64"])
  112: def test_assert_extension_array_equal_ignore_dtype_mismatch(right_dtype):
  113:     # https://github.com/pandas-dev/pandas/issues/35715
  114:     left = array([1, 2, 3], dtype="Int64")
  115:     right = array([1, 2, 3], dtype=right_dtype)
  116:     tm.assert_extension_array_equal(left, right, check_dtype=False)
  117: 
  118: 
  119: def test_assert_extension_array_equal_time_units():
  120:     # https://github.com/pandas-dev/pandas/issues/55730
  121:     timestamp = Timestamp("2023-11-04T12")
  122:     naive = array([timestamp], dtype="datetime64[ns]")
  123:     utc = array([timestamp], dtype="datetime64[ns, UTC]")
  124: 
  125:     tm.assert_extension_array_equal(naive, utc, check_dtype=False)
  126:     tm.assert_extension_array_equal(utc, naive, check_dtype=False)
