    1: """
    2: Tests for the `deprecate_nonkeyword_arguments` decorator
    3: """
    4: 
    5: import inspect
    6: 
    7: from pandas.util._decorators import deprecate_nonkeyword_arguments
    8: 
    9: import pandas._testing as tm
   10: 
   11: 
   12: @deprecate_nonkeyword_arguments(
   13:     version="1.1", allowed_args=["a", "b"], name="f_add_inputs"
   14: )
   15: def f(a, b=0, c=0, d=0):
   16:     return a + b + c + d
   17: 
   18: 
   19: def test_f_signature():
   20:     assert str(inspect.signature(f)) == "(a, b=0, *, c=0, d=0)"
   21: 
   22: 
   23: def test_one_argument():
   24:     with tm.assert_produces_warning(None):
   25:         assert f(19) == 19
   26: 
   27: 
   28: def test_one_and_one_arguments():
   29:     with tm.assert_produces_warning(None):
   30:         assert f(19, d=6) == 25
   31: 
   32: 
   33: def test_two_arguments():
   34:     with tm.assert_produces_warning(None):
   35:         assert f(1, 5) == 6
   36: 
   37: 
   38: def test_two_and_two_arguments():
   39:     with tm.assert_produces_warning(None):
   40:         assert f(1, 3, c=3, d=5) == 12
   41: 
   42: 
   43: def test_three_arguments():
   44:     with tm.assert_produces_warning(FutureWarning):
   45:         assert f(6, 3, 3) == 12
   46: 
   47: 
   48: def test_four_arguments():
   49:     with tm.assert_produces_warning(FutureWarning):
   50:         assert f(1, 2, 3, 4) == 10
   51: 
   52: 
   53: def test_three_arguments_with_name_in_warning():
   54:     msg = (
   55:         "Starting with pandas version 1.1 all arguments of f_add_inputs "
   56:         "except for the arguments 'a' and 'b' will be keyword-only."
   57:     )
   58:     with tm.assert_produces_warning(FutureWarning, match=msg):
   59:         assert f(6, 3, 3) == 12
   60: 
   61: 
   62: @deprecate_nonkeyword_arguments(version="1.1")
   63: def g(a, b=0, c=0, d=0):
   64:     with tm.assert_produces_warning(None):
   65:         return a + b + c + d
   66: 
   67: 
   68: def test_g_signature():
   69:     assert str(inspect.signature(g)) == "(a, *, b=0, c=0, d=0)"
   70: 
   71: 
   72: def test_one_and_three_arguments_default_allowed_args():
   73:     with tm.assert_produces_warning(None):
   74:         assert g(1, b=3, c=3, d=5) == 12
   75: 
   76: 
   77: def test_three_arguments_default_allowed_args():
   78:     with tm.assert_produces_warning(FutureWarning):
   79:         assert g(6, 3, 3) == 12
   80: 
   81: 
   82: def test_three_positional_argument_with_warning_message_analysis():
   83:     msg = (
   84:         "Starting with pandas version 1.1 all arguments of g "
   85:         "except for the argument 'a' will be keyword-only."
   86:     )
   87:     with tm.assert_produces_warning(FutureWarning, match=msg):
   88:         assert g(6, 3, 3) == 12
   89: 
   90: 
   91: @deprecate_nonkeyword_arguments(version="1.1")
   92: def h(a=0, b=0, c=0, d=0):
   93:     return a + b + c + d
   94: 
   95: 
   96: def test_h_signature():
   97:     assert str(inspect.signature(h)) == "(*, a=0, b=0, c=0, d=0)"
   98: 
   99: 
  100: def test_all_keyword_arguments():
  101:     with tm.assert_produces_warning(None):
  102:         assert h(a=1, b=2) == 3
  103: 
  104: 
  105: def test_one_positional_argument():
  106:     with tm.assert_produces_warning(FutureWarning):
  107:         assert h(23) == 23
  108: 
  109: 
  110: def test_one_positional_argument_with_warning_message_analysis():
  111:     msg = "Starting with pandas version 1.1 all arguments of h will be keyword-only."
  112:     with tm.assert_produces_warning(FutureWarning, match=msg):
  113:         assert h(19) == 19
  114: 
  115: 
  116: @deprecate_nonkeyword_arguments(version="1.1")
  117: def i(a=0, /, b=0, *, c=0, d=0):
  118:     return a + b + c + d
  119: 
  120: 
  121: def test_i_signature():
  122:     assert str(inspect.signature(i)) == "(*, a=0, b=0, c=0, d=0)"
  123: 
  124: 
  125: class Foo:
  126:     @deprecate_nonkeyword_arguments(version=None, allowed_args=["self", "bar"])
  127:     def baz(self, bar=None, foobar=None):  # pylint: disable=disallowed-name
  128:         ...
  129: 
  130: 
  131: def test_foo_signature():
  132:     assert str(inspect.signature(Foo.baz)) == "(self, bar=None, *, foobar=None)"
  133: 
  134: 
  135: def test_class():
  136:     msg = (
  137:         r"In a future version of pandas all arguments of Foo\.baz "
  138:         r"except for the argument \'bar\' will be keyword-only"
  139:     )
  140:     with tm.assert_produces_warning(FutureWarning, match=msg):
  141:         Foo().baz("qux", "quox")
