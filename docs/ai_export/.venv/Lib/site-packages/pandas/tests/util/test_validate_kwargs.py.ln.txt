    1: import pytest
    2: 
    3: from pandas.util._validators import (
    4:     validate_bool_kwarg,
    5:     validate_kwargs,
    6: )
    7: 
    8: 
    9: @pytest.fixture
   10: def _fname():
   11:     return "func"
   12: 
   13: 
   14: def test_bad_kwarg(_fname):
   15:     good_arg = "f"
   16:     bad_arg = good_arg + "o"
   17: 
   18:     compat_args = {good_arg: "foo", bad_arg + "o": "bar"}
   19:     kwargs = {good_arg: "foo", bad_arg: "bar"}
   20: 
   21:     msg = rf"{_fname}\(\) got an unexpected keyword argument '{bad_arg}'"
   22: 
   23:     with pytest.raises(TypeError, match=msg):
   24:         validate_kwargs(_fname, kwargs, compat_args)
   25: 
   26: 
   27: @pytest.mark.parametrize("i", range(1, 3))
   28: def test_not_all_none(i, _fname):
   29:     bad_arg = "foo"
   30:     msg = (
   31:         rf"the '{bad_arg}' parameter is not supported "
   32:         rf"in the pandas implementation of {_fname}\(\)"
   33:     )
   34: 
   35:     compat_args = {"foo": 1, "bar": "s", "baz": None}
   36: 
   37:     kwarg_keys = ("foo", "bar", "baz")
   38:     kwarg_vals = (2, "s", None)
   39: 
   40:     kwargs = dict(zip(kwarg_keys[:i], kwarg_vals[:i]))
   41: 
   42:     with pytest.raises(ValueError, match=msg):
   43:         validate_kwargs(_fname, kwargs, compat_args)
   44: 
   45: 
   46: def test_validation(_fname):
   47:     # No exceptions should be raised.
   48:     compat_args = {"f": None, "b": 1, "ba": "s"}
   49: 
   50:     kwargs = {"f": None, "b": 1}
   51:     validate_kwargs(_fname, kwargs, compat_args)
   52: 
   53: 
   54: @pytest.mark.parametrize("name", ["inplace", "copy"])
   55: @pytest.mark.parametrize("value", [1, "True", [1, 2, 3], 5.0])
   56: def test_validate_bool_kwarg_fail(name, value):
   57:     msg = (
   58:         f'For argument "{name}" expected type bool, '
   59:         f"received type {type(value).__name__}"
   60:     )
   61: 
   62:     with pytest.raises(ValueError, match=msg):
   63:         validate_bool_kwarg(value, name)
   64: 
   65: 
   66: @pytest.mark.parametrize("name", ["inplace", "copy"])
   67: @pytest.mark.parametrize("value", [True, False, None])
   68: def test_validate_bool_kwarg(name, value):
   69:     assert validate_bool_kwarg(value, name) == value
