    1: import pytest
    2: 
    3: from pandas.util._decorators import deprecate_kwarg
    4: 
    5: import pandas._testing as tm
    6: 
    7: 
    8: @deprecate_kwarg("old", "new")
    9: def _f1(new=False):
   10:     return new
   11: 
   12: 
   13: _f2_mappings = {"yes": True, "no": False}
   14: 
   15: 
   16: @deprecate_kwarg("old", "new", _f2_mappings)
   17: def _f2(new=False):
   18:     return new
   19: 
   20: 
   21: def _f3_mapping(x):
   22:     return x + 1
   23: 
   24: 
   25: @deprecate_kwarg("old", "new", _f3_mapping)
   26: def _f3(new=0):
   27:     return new
   28: 
   29: 
   30: @pytest.mark.parametrize("key,klass", [("old", FutureWarning), ("new", None)])
   31: def test_deprecate_kwarg(key, klass):
   32:     x = 78
   33: 
   34:     with tm.assert_produces_warning(klass):
   35:         assert _f1(**{key: x}) == x
   36: 
   37: 
   38: @pytest.mark.parametrize("key", list(_f2_mappings.keys()))
   39: def test_dict_deprecate_kwarg(key):
   40:     with tm.assert_produces_warning(FutureWarning):
   41:         assert _f2(old=key) == _f2_mappings[key]
   42: 
   43: 
   44: @pytest.mark.parametrize("key", ["bogus", 12345, -1.23])
   45: def test_missing_deprecate_kwarg(key):
   46:     with tm.assert_produces_warning(FutureWarning):
   47:         assert _f2(old=key) == key
   48: 
   49: 
   50: @pytest.mark.parametrize("x", [1, -1.4, 0])
   51: def test_callable_deprecate_kwarg(x):
   52:     with tm.assert_produces_warning(FutureWarning):
   53:         assert _f3(old=x) == _f3_mapping(x)
   54: 
   55: 
   56: def test_callable_deprecate_kwarg_fail():
   57:     msg = "((can only|cannot) concatenate)|(must be str)|(Can't convert)"
   58: 
   59:     with pytest.raises(TypeError, match=msg):
   60:         _f3(old="hello")
   61: 
   62: 
   63: def test_bad_deprecate_kwarg():
   64:     msg = "mapping from old to new argument values must be dict or callable!"
   65: 
   66:     with pytest.raises(TypeError, match=msg):
   67: 
   68:         @deprecate_kwarg("old", "new", 0)
   69:         def f4(new=None):
   70:             return new
   71: 
   72: 
   73: @deprecate_kwarg("old", None)
   74: def _f4(old=True, unchanged=True):
   75:     return old, unchanged
   76: 
   77: 
   78: @pytest.mark.parametrize("key", ["old", "unchanged"])
   79: def test_deprecate_keyword(key):
   80:     x = 9
   81: 
   82:     if key == "old":
   83:         klass = FutureWarning
   84:         expected = (x, True)
   85:     else:
   86:         klass = None
   87:         expected = (True, x)
   88: 
   89:     with tm.assert_produces_warning(klass):
   90:         assert _f4(**{key: x}) == expected
