    1: from datetime import time
    2: import locale
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas.compat import PY311
    8: 
    9: from pandas import Series
   10: import pandas._testing as tm
   11: from pandas.core.tools.times import to_time
   12: 
   13: # The tests marked with this are locale-dependent.
   14: # They pass, except when the machine locale is zh_CN or it_IT.
   15: fails_on_non_english = pytest.mark.xfail(
   16:     locale.getlocale()[0] in ("zh_CN", "it_IT"),
   17:     reason="fail on a CI build with LC_ALL=zh_CN.utf8/it_IT.utf8",
   18:     strict=False,
   19: )
   20: 
   21: 
   22: class TestToTime:
   23:     @pytest.mark.parametrize(
   24:         "time_string",
   25:         [
   26:             "14:15",
   27:             "1415",
   28:             pytest.param("2:15pm", marks=fails_on_non_english),
   29:             pytest.param("0215pm", marks=fails_on_non_english),
   30:             "14:15:00",
   31:             "141500",
   32:             pytest.param("2:15:00pm", marks=fails_on_non_english),
   33:             pytest.param("021500pm", marks=fails_on_non_english),
   34:             time(14, 15),
   35:         ],
   36:     )
   37:     def test_parsers_time(self, time_string):
   38:         # GH#11818
   39:         assert to_time(time_string) == time(14, 15)
   40: 
   41:     def test_odd_format(self):
   42:         new_string = "14.15"
   43:         msg = r"Cannot convert arg \['14\.15'\] to a time"
   44:         if not PY311:
   45:             with pytest.raises(ValueError, match=msg):
   46:                 to_time(new_string)
   47:         assert to_time(new_string, format="%H.%M") == time(14, 15)
   48: 
   49:     def test_arraylike(self):
   50:         arg = ["14:15", "20:20"]
   51:         expected_arr = [time(14, 15), time(20, 20)]
   52:         assert to_time(arg) == expected_arr
   53:         assert to_time(arg, format="%H:%M") == expected_arr
   54:         assert to_time(arg, infer_time_format=True) == expected_arr
   55:         assert to_time(arg, format="%I:%M%p", errors="coerce") == [None, None]
   56: 
   57:         msg = "errors='ignore' is deprecated"
   58:         with tm.assert_produces_warning(FutureWarning, match=msg):
   59:             res = to_time(arg, format="%I:%M%p", errors="ignore")
   60:         tm.assert_numpy_array_equal(res, np.array(arg, dtype=np.object_))
   61: 
   62:         msg = "Cannot convert.+to a time with given format"
   63:         with pytest.raises(ValueError, match=msg):
   64:             to_time(arg, format="%I:%M%p", errors="raise")
   65: 
   66:         tm.assert_series_equal(
   67:             to_time(Series(arg, name="test")), Series(expected_arr, name="test")
   68:         )
   69: 
   70:         res = to_time(np.array(arg))
   71:         assert isinstance(res, list)
   72:         assert res == expected_arr
