    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas.core.arrays.floating import (
    6:     Float32Dtype,
    7:     Float64Dtype,
    8: )
    9: 
   10: 
   11: def test_dtypes(dtype):
   12:     # smoke tests on auto dtype construction
   13: 
   14:     np.dtype(dtype.type).kind == "f"
   15:     assert dtype.name is not None
   16: 
   17: 
   18: @pytest.mark.parametrize(
   19:     "dtype, expected",
   20:     [(Float32Dtype(), "Float32Dtype()"), (Float64Dtype(), "Float64Dtype()")],
   21: )
   22: def test_repr_dtype(dtype, expected):
   23:     assert repr(dtype) == expected
   24: 
   25: 
   26: def test_repr_array():
   27:     result = repr(pd.array([1.0, None, 3.0]))
   28:     expected = "<FloatingArray>\n[1.0, <NA>, 3.0]\nLength: 3, dtype: Float64"
   29:     assert result == expected
   30: 
   31: 
   32: def test_repr_array_long():
   33:     data = pd.array([1.0, 2.0, None] * 1000)
   34:     expected = """<FloatingArray>
   35: [ 1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,
   36:  ...
   37:  <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>,  1.0,  2.0, <NA>]
   38: Length: 3000, dtype: Float64"""
   39:     result = repr(data)
   40:     assert result == expected
   41: 
   42: 
   43: def test_frame_repr(data_missing):
   44:     df = pd.DataFrame({"A": data_missing})
   45:     result = repr(df)
   46:     expected = "      A\n0  <NA>\n1   0.1"
   47:     assert result == expected
