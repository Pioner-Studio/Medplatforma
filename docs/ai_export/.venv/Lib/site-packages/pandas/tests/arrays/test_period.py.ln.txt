    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import iNaT
    5: from pandas._libs.tslibs.period import IncompatibleFrequency
    6: 
    7: from pandas.core.dtypes.base import _registry as registry
    8: from pandas.core.dtypes.dtypes import PeriodDtype
    9: 
   10: import pandas as pd
   11: import pandas._testing as tm
   12: from pandas.core.arrays import PeriodArray
   13: 
   14: # ----------------------------------------------------------------------------
   15: # Dtype
   16: 
   17: 
   18: def test_registered():
   19:     assert PeriodDtype in registry.dtypes
   20:     result = registry.find("Period[D]")
   21:     expected = PeriodDtype("D")
   22:     assert result == expected
   23: 
   24: 
   25: # ----------------------------------------------------------------------------
   26: # period_array
   27: 
   28: 
   29: def test_asi8():
   30:     result = PeriodArray._from_sequence(["2000", "2001", None], dtype="period[D]").asi8
   31:     expected = np.array([10957, 11323, iNaT])
   32:     tm.assert_numpy_array_equal(result, expected)
   33: 
   34: 
   35: def test_take_raises():
   36:     arr = PeriodArray._from_sequence(["2000", "2001"], dtype="period[D]")
   37:     with pytest.raises(IncompatibleFrequency, match="freq"):
   38:         arr.take([0, -1], allow_fill=True, fill_value=pd.Period("2000", freq="W"))
   39: 
   40:     msg = "value should be a 'Period' or 'NaT'. Got 'str' instead"
   41:     with pytest.raises(TypeError, match=msg):
   42:         arr.take([0, -1], allow_fill=True, fill_value="foo")
   43: 
   44: 
   45: def test_fillna_raises():
   46:     arr = PeriodArray._from_sequence(["2000", "2001", "2002"], dtype="period[D]")
   47:     with pytest.raises(ValueError, match="Length"):
   48:         arr.fillna(arr[:2])
   49: 
   50: 
   51: def test_fillna_copies():
   52:     arr = PeriodArray._from_sequence(["2000", "2001", "2002"], dtype="period[D]")
   53:     result = arr.fillna(pd.Period("2000", "D"))
   54:     assert result is not arr
   55: 
   56: 
   57: # ----------------------------------------------------------------------------
   58: # setitem
   59: 
   60: 
   61: @pytest.mark.parametrize(
   62:     "key, value, expected",
   63:     [
   64:         ([0], pd.Period("2000", "D"), [10957, 1, 2]),
   65:         ([0], None, [iNaT, 1, 2]),
   66:         ([0], np.nan, [iNaT, 1, 2]),
   67:         ([0, 1, 2], pd.Period("2000", "D"), [10957] * 3),
   68:         (
   69:             [0, 1, 2],
   70:             [pd.Period("2000", "D"), pd.Period("2001", "D"), pd.Period("2002", "D")],
   71:             [10957, 11323, 11688],
   72:         ),
   73:     ],
   74: )
   75: def test_setitem(key, value, expected):
   76:     arr = PeriodArray(np.arange(3), dtype="period[D]")
   77:     expected = PeriodArray(expected, dtype="period[D]")
   78:     arr[key] = value
   79:     tm.assert_period_array_equal(arr, expected)
   80: 
   81: 
   82: def test_setitem_raises_incompatible_freq():
   83:     arr = PeriodArray(np.arange(3), dtype="period[D]")
   84:     with pytest.raises(IncompatibleFrequency, match="freq"):
   85:         arr[0] = pd.Period("2000", freq="Y")
   86: 
   87:     other = PeriodArray._from_sequence(["2000", "2001"], dtype="period[Y]")
   88:     with pytest.raises(IncompatibleFrequency, match="freq"):
   89:         arr[[0, 1]] = other
   90: 
   91: 
   92: def test_setitem_raises_length():
   93:     arr = PeriodArray(np.arange(3), dtype="period[D]")
   94:     with pytest.raises(ValueError, match="length"):
   95:         arr[[0, 1]] = [pd.Period("2000", freq="D")]
   96: 
   97: 
   98: def test_setitem_raises_type():
   99:     arr = PeriodArray(np.arange(3), dtype="period[D]")
  100:     with pytest.raises(TypeError, match="int"):
  101:         arr[0] = 1
  102: 
  103: 
  104: # ----------------------------------------------------------------------------
  105: # Ops
  106: 
  107: 
  108: def test_sub_period():
  109:     arr = PeriodArray._from_sequence(["2000", "2001"], dtype="period[D]")
  110:     other = pd.Period("2000", freq="M")
  111:     with pytest.raises(IncompatibleFrequency, match="freq"):
  112:         arr - other
  113: 
  114: 
  115: def test_sub_period_overflow():
  116:     # GH#47538
  117:     dti = pd.date_range("1677-09-22", periods=2, freq="D")
  118:     pi = dti.to_period("ns")
  119: 
  120:     per = pd.Period._from_ordinal(10**14, pi.freq)
  121: 
  122:     with pytest.raises(OverflowError, match="Overflow in int64 addition"):
  123:         pi - per
  124: 
  125:     with pytest.raises(OverflowError, match="Overflow in int64 addition"):
  126:         per - pi
  127: 
  128: 
  129: # ----------------------------------------------------------------------------
  130: # Methods
  131: 
  132: 
  133: @pytest.mark.parametrize(
  134:     "other",
  135:     [
  136:         pd.Period("2000", freq="h"),
  137:         PeriodArray._from_sequence(["2000", "2001", "2000"], dtype="period[h]"),
  138:     ],
  139: )
  140: def test_where_different_freq_raises(other):
  141:     # GH#45768 The PeriodArray method raises, the Series method coerces
  142:     ser = pd.Series(
  143:         PeriodArray._from_sequence(["2000", "2001", "2002"], dtype="period[D]")
  144:     )
  145:     cond = np.array([True, False, True])
  146: 
  147:     with pytest.raises(IncompatibleFrequency, match="freq"):
  148:         ser.array._where(cond, other)
  149: 
  150:     res = ser.where(cond, other)
  151:     expected = ser.astype(object).where(cond, other)
  152:     tm.assert_series_equal(res, expected)
  153: 
  154: 
  155: # ----------------------------------------------------------------------------
  156: # Printing
  157: 
  158: 
  159: def test_repr_small():
  160:     arr = PeriodArray._from_sequence(["2000", "2001"], dtype="period[D]")
  161:     result = str(arr)
  162:     expected = (
  163:         "<PeriodArray>\n['2000-01-01', '2001-01-01']\nLength: 2, dtype: period[D]"
  164:     )
  165:     assert result == expected
  166: 
  167: 
  168: def test_repr_large():
  169:     arr = PeriodArray._from_sequence(["2000", "2001"] * 500, dtype="period[D]")
  170:     result = str(arr)
  171:     expected = (
  172:         "<PeriodArray>\n"
  173:         "['2000-01-01', '2001-01-01', '2000-01-01', '2001-01-01', "
  174:         "'2000-01-01',\n"
  175:         " '2001-01-01', '2000-01-01', '2001-01-01', '2000-01-01', "
  176:         "'2001-01-01',\n"
  177:         " ...\n"
  178:         " '2000-01-01', '2001-01-01', '2000-01-01', '2001-01-01', "
  179:         "'2000-01-01',\n"
  180:         " '2001-01-01', '2000-01-01', '2001-01-01', '2000-01-01', "
  181:         "'2001-01-01']\n"
  182:         "Length: 1000, dtype: period[D]"
  183:     )
  184:     assert result == expected
