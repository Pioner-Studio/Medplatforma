    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.sparse import IntIndex
    5: 
    6: from pandas import (
    7:     SparseDtype,
    8:     Timestamp,
    9: )
   10: import pandas._testing as tm
   11: from pandas.core.arrays.sparse import SparseArray
   12: 
   13: 
   14: class TestAstype:
   15:     def test_astype(self):
   16:         # float -> float
   17:         arr = SparseArray([None, None, 0, 2])
   18:         result = arr.astype("Sparse[float32]")
   19:         expected = SparseArray([None, None, 0, 2], dtype=np.dtype("float32"))
   20:         tm.assert_sp_array_equal(result, expected)
   21: 
   22:         dtype = SparseDtype("float64", fill_value=0)
   23:         result = arr.astype(dtype)
   24:         expected = SparseArray._simple_new(
   25:             np.array([0.0, 2.0], dtype=dtype.subtype), IntIndex(4, [2, 3]), dtype
   26:         )
   27:         tm.assert_sp_array_equal(result, expected)
   28: 
   29:         dtype = SparseDtype("int64", 0)
   30:         result = arr.astype(dtype)
   31:         expected = SparseArray._simple_new(
   32:             np.array([0, 2], dtype=np.int64), IntIndex(4, [2, 3]), dtype
   33:         )
   34:         tm.assert_sp_array_equal(result, expected)
   35: 
   36:         arr = SparseArray([0, np.nan, 0, 1], fill_value=0)
   37:         with pytest.raises(ValueError, match="NA"):
   38:             arr.astype("Sparse[i8]")
   39: 
   40:     def test_astype_bool(self):
   41:         a = SparseArray([1, 0, 0, 1], dtype=SparseDtype(int, 0))
   42:         result = a.astype(bool)
   43:         expected = np.array([1, 0, 0, 1], dtype=bool)
   44:         tm.assert_numpy_array_equal(result, expected)
   45: 
   46:         # update fill value
   47:         result = a.astype(SparseDtype(bool, False))
   48:         expected = SparseArray(
   49:             [True, False, False, True], dtype=SparseDtype(bool, False)
   50:         )
   51:         tm.assert_sp_array_equal(result, expected)
   52: 
   53:     def test_astype_all(self, any_real_numpy_dtype):
   54:         vals = np.array([1, 2, 3])
   55:         arr = SparseArray(vals, fill_value=1)
   56:         typ = np.dtype(any_real_numpy_dtype)
   57:         res = arr.astype(typ)
   58:         tm.assert_numpy_array_equal(res, vals.astype(any_real_numpy_dtype))
   59: 
   60:     @pytest.mark.parametrize(
   61:         "arr, dtype, expected",
   62:         [
   63:             (
   64:                 SparseArray([0, 1]),
   65:                 "float",
   66:                 SparseArray([0.0, 1.0], dtype=SparseDtype(float, 0.0)),
   67:             ),
   68:             (SparseArray([0, 1]), bool, SparseArray([False, True])),
   69:             (
   70:                 SparseArray([0, 1], fill_value=1),
   71:                 bool,
   72:                 SparseArray([False, True], dtype=SparseDtype(bool, True)),
   73:             ),
   74:             pytest.param(
   75:                 SparseArray([0, 1]),
   76:                 "datetime64[ns]",
   77:                 SparseArray(
   78:                     np.array([0, 1], dtype="datetime64[ns]"),
   79:                     dtype=SparseDtype("datetime64[ns]", Timestamp("1970")),
   80:                 ),
   81:             ),
   82:             (
   83:                 SparseArray([0, 1, 10]),
   84:                 str,
   85:                 SparseArray(["0", "1", "10"], dtype=SparseDtype(str, "0")),
   86:             ),
   87:             (SparseArray(["10", "20"]), float, SparseArray([10.0, 20.0])),
   88:             (
   89:                 SparseArray([0, 1, 0]),
   90:                 object,
   91:                 SparseArray([0, 1, 0], dtype=SparseDtype(object, 0)),
   92:             ),
   93:         ],
   94:     )
   95:     def test_astype_more(self, arr, dtype, expected):
   96:         result = arr.astype(arr.dtype.update_dtype(dtype))
   97:         tm.assert_sp_array_equal(result, expected)
   98: 
   99:     def test_astype_nan_raises(self):
  100:         arr = SparseArray([1.0, np.nan])
  101:         with pytest.raises(ValueError, match="Cannot convert non-finite"):
  102:             arr.astype(int)
  103: 
  104:     def test_astype_copy_false(self):
  105:         # GH#34456 bug caused by using .view instead of .astype in astype_nansafe
  106:         arr = SparseArray([1, 2, 3])
  107: 
  108:         dtype = SparseDtype(float, 0)
  109: 
  110:         result = arr.astype(dtype, copy=False)
  111:         expected = SparseArray([1.0, 2.0, 3.0], fill_value=0.0)
  112:         tm.assert_sp_array_equal(result, expected)
  113: 
  114:     def test_astype_dt64_to_int64(self):
  115:         # GH#49631 match non-sparse behavior
  116:         values = np.array(["NaT", "2016-01-02", "2016-01-03"], dtype="M8[ns]")
  117: 
  118:         arr = SparseArray(values)
  119:         result = arr.astype("int64")
  120:         expected = values.astype("int64")
  121:         tm.assert_numpy_array_equal(result, expected)
  122: 
  123:         # we should also be able to cast to equivalent Sparse[int64]
  124:         dtype_int64 = SparseDtype("int64", np.iinfo(np.int64).min)
  125:         result2 = arr.astype(dtype_int64)
  126:         tm.assert_numpy_array_equal(result2.to_numpy(), expected)
  127: 
  128:         # GH#50087 we should match the non-sparse behavior regardless of
  129:         #  if we have a fill_value other than NaT
  130:         dtype = SparseDtype("datetime64[ns]", values[1])
  131:         arr3 = SparseArray(values, dtype=dtype)
  132:         result3 = arr3.astype("int64")
  133:         tm.assert_numpy_array_equal(result3, expected)
