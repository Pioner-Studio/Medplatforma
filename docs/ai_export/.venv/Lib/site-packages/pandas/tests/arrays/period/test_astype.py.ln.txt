    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.dtypes import PeriodDtype
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core.arrays import period_array
    9: 
   10: 
   11: @pytest.mark.parametrize("dtype", [int, np.int32, np.int64, "uint32", "uint64"])
   12: def test_astype_int(dtype):
   13:     # We choose to ignore the sign and size of integers for
   14:     # Period/Datetime/Timedelta astype
   15:     arr = period_array(["2000", "2001", None], freq="D")
   16: 
   17:     if np.dtype(dtype) != np.int64:
   18:         with pytest.raises(TypeError, match=r"Do obj.astype\('int64'\)"):
   19:             arr.astype(dtype)
   20:         return
   21: 
   22:     result = arr.astype(dtype)
   23:     expected = arr._ndarray.view("i8")
   24:     tm.assert_numpy_array_equal(result, expected)
   25: 
   26: 
   27: def test_astype_copies():
   28:     arr = period_array(["2000", "2001", None], freq="D")
   29:     result = arr.astype(np.int64, copy=False)
   30: 
   31:     # Add the `.base`, since we now use `.asi8` which returns a view.
   32:     # We could maybe override it in PeriodArray to return ._ndarray directly.
   33:     assert result.base is arr._ndarray
   34: 
   35:     result = arr.astype(np.int64, copy=True)
   36:     assert result is not arr._ndarray
   37:     tm.assert_numpy_array_equal(result, arr._ndarray.view("i8"))
   38: 
   39: 
   40: def test_astype_categorical():
   41:     arr = period_array(["2000", "2001", "2001", None], freq="D")
   42:     result = arr.astype("category")
   43:     categories = pd.PeriodIndex(["2000", "2001"], freq="D")
   44:     expected = pd.Categorical.from_codes([0, 1, 1, -1], categories=categories)
   45:     tm.assert_categorical_equal(result, expected)
   46: 
   47: 
   48: def test_astype_period():
   49:     arr = period_array(["2000", "2001", None], freq="D")
   50:     result = arr.astype(PeriodDtype("M"))
   51:     expected = period_array(["2000", "2001", None], freq="M")
   52:     tm.assert_period_array_equal(result, expected)
   53: 
   54: 
   55: @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
   56: def test_astype_datetime(dtype):
   57:     arr = period_array(["2000", "2001", None], freq="D")
   58:     # slice off the [ns] so that the regex matches.
   59:     if dtype == "timedelta64[ns]":
   60:         with pytest.raises(TypeError, match=dtype[:-4]):
   61:             arr.astype(dtype)
   62: 
   63:     else:
   64:         # GH#45038 allow period->dt64 because we allow dt64->period
   65:         result = arr.astype(dtype)
   66:         expected = pd.DatetimeIndex(["2000", "2001", pd.NaT], dtype=dtype)._data
   67:         tm.assert_datetime_array_equal(result, expected)
