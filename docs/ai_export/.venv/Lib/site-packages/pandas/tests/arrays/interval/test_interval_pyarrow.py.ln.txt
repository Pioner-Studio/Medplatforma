    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.core.arrays import IntervalArray
    7: 
    8: 
    9: def test_arrow_extension_type():
   10:     pa = pytest.importorskip("pyarrow")
   11: 
   12:     from pandas.core.arrays.arrow.extension_types import ArrowIntervalType
   13: 
   14:     p1 = ArrowIntervalType(pa.int64(), "left")
   15:     p2 = ArrowIntervalType(pa.int64(), "left")
   16:     p3 = ArrowIntervalType(pa.int64(), "right")
   17: 
   18:     assert p1.closed == "left"
   19:     assert p1 == p2
   20:     assert p1 != p3
   21:     assert hash(p1) == hash(p2)
   22:     assert hash(p1) != hash(p3)
   23: 
   24: 
   25: def test_arrow_array():
   26:     pa = pytest.importorskip("pyarrow")
   27: 
   28:     from pandas.core.arrays.arrow.extension_types import ArrowIntervalType
   29: 
   30:     intervals = pd.interval_range(1, 5, freq=1).array
   31: 
   32:     result = pa.array(intervals)
   33:     assert isinstance(result.type, ArrowIntervalType)
   34:     assert result.type.closed == intervals.closed
   35:     assert result.type.subtype == pa.int64()
   36:     assert result.storage.field("left").equals(pa.array([1, 2, 3, 4], type="int64"))
   37:     assert result.storage.field("right").equals(pa.array([2, 3, 4, 5], type="int64"))
   38: 
   39:     expected = pa.array([{"left": i, "right": i + 1} for i in range(1, 5)])
   40:     assert result.storage.equals(expected)
   41: 
   42:     # convert to its storage type
   43:     result = pa.array(intervals, type=expected.type)
   44:     assert result.equals(expected)
   45: 
   46:     # unsupported conversions
   47:     with pytest.raises(TypeError, match="Not supported to convert IntervalArray"):
   48:         pa.array(intervals, type="float64")
   49: 
   50:     with pytest.raises(TypeError, match="Not supported to convert IntervalArray"):
   51:         pa.array(intervals, type=ArrowIntervalType(pa.float64(), "left"))
   52: 
   53: 
   54: def test_arrow_array_missing():
   55:     pa = pytest.importorskip("pyarrow")
   56: 
   57:     from pandas.core.arrays.arrow.extension_types import ArrowIntervalType
   58: 
   59:     arr = IntervalArray.from_breaks([0.0, 1.0, 2.0, 3.0])
   60:     arr[1] = None
   61: 
   62:     result = pa.array(arr)
   63:     assert isinstance(result.type, ArrowIntervalType)
   64:     assert result.type.closed == arr.closed
   65:     assert result.type.subtype == pa.float64()
   66: 
   67:     # fields have missing values (not NaN)
   68:     left = pa.array([0.0, None, 2.0], type="float64")
   69:     right = pa.array([1.0, None, 3.0], type="float64")
   70:     assert result.storage.field("left").equals(left)
   71:     assert result.storage.field("right").equals(right)
   72: 
   73:     # structarray itself also has missing values on the array level
   74:     vals = [
   75:         {"left": 0.0, "right": 1.0},
   76:         {"left": None, "right": None},
   77:         {"left": 2.0, "right": 3.0},
   78:     ]
   79:     expected = pa.StructArray.from_pandas(vals, mask=np.array([False, True, False]))
   80:     assert result.storage.equals(expected)
   81: 
   82: 
   83: @pytest.mark.filterwarnings(
   84:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   85: )
   86: @pytest.mark.parametrize(
   87:     "breaks",
   88:     [[0.0, 1.0, 2.0, 3.0], pd.date_range("2017", periods=4, freq="D")],
   89:     ids=["float", "datetime64[ns]"],
   90: )
   91: def test_arrow_table_roundtrip(breaks):
   92:     pa = pytest.importorskip("pyarrow")
   93: 
   94:     from pandas.core.arrays.arrow.extension_types import ArrowIntervalType
   95: 
   96:     arr = IntervalArray.from_breaks(breaks)
   97:     arr[1] = None
   98:     df = pd.DataFrame({"a": arr})
   99: 
  100:     table = pa.table(df)
  101:     assert isinstance(table.field("a").type, ArrowIntervalType)
  102:     result = table.to_pandas()
  103:     assert isinstance(result["a"].dtype, pd.IntervalDtype)
  104:     tm.assert_frame_equal(result, df)
  105: 
  106:     table2 = pa.concat_tables([table, table])
  107:     result = table2.to_pandas()
  108:     expected = pd.concat([df, df], ignore_index=True)
  109:     tm.assert_frame_equal(result, expected)
  110: 
  111:     # GH#41040
  112:     table = pa.table(
  113:         [pa.chunked_array([], type=table.column(0).type)], schema=table.schema
  114:     )
  115:     result = table.to_pandas()
  116:     tm.assert_frame_equal(result, expected[0:0])
  117: 
  118: 
  119: @pytest.mark.filterwarnings(
  120:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
  121: )
  122: @pytest.mark.parametrize(
  123:     "breaks",
  124:     [[0.0, 1.0, 2.0, 3.0], pd.date_range("2017", periods=4, freq="D")],
  125:     ids=["float", "datetime64[ns]"],
  126: )
  127: def test_arrow_table_roundtrip_without_metadata(breaks):
  128:     pa = pytest.importorskip("pyarrow")
  129: 
  130:     arr = IntervalArray.from_breaks(breaks)
  131:     arr[1] = None
  132:     df = pd.DataFrame({"a": arr})
  133: 
  134:     table = pa.table(df)
  135:     # remove the metadata
  136:     table = table.replace_schema_metadata()
  137:     assert table.schema.metadata is None
  138: 
  139:     result = table.to_pandas()
  140:     assert isinstance(result["a"].dtype, pd.IntervalDtype)
  141:     tm.assert_frame_equal(result, df)
  142: 
  143: 
  144: def test_from_arrow_from_raw_struct_array():
  145:     # in case pyarrow lost the Interval extension type (eg on parquet roundtrip
  146:     # with datetime64[ns] subtype, see GH-45881), still allow conversion
  147:     # from arrow to IntervalArray
  148:     pa = pytest.importorskip("pyarrow")
  149: 
  150:     arr = pa.array([{"left": 0, "right": 1}, {"left": 1, "right": 2}])
  151:     dtype = pd.IntervalDtype(np.dtype("int64"), closed="neither")
  152: 
  153:     result = dtype.__from_arrow__(arr)
  154:     expected = IntervalArray.from_breaks(
  155:         np.array([0, 1, 2], dtype="int64"), closed="neither"
  156:     )
  157:     tm.assert_extension_array_equal(result, expected)
  158: 
  159:     result = dtype.__from_arrow__(pa.chunked_array([arr]))
  160:     tm.assert_extension_array_equal(result, expected)
