    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._config import using_pyarrow_string_dtype
    5: 
    6: from pandas import (
    7:     Categorical,
    8:     CategoricalDtype,
    9:     CategoricalIndex,
   10:     Index,
   11:     Series,
   12:     date_range,
   13:     option_context,
   14:     period_range,
   15:     timedelta_range,
   16: )
   17: 
   18: 
   19: class TestCategoricalReprWithFactor:
   20:     def test_print(self, using_infer_string):
   21:         factor = Categorical(["a", "b", "b", "a", "a", "c", "c", "c"], ordered=True)
   22:         if using_infer_string:
   23:             expected = [
   24:                 "['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']",
   25:                 "Categories (3, string): [a < b < c]",
   26:             ]
   27:         else:
   28:             expected = [
   29:                 "['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']",
   30:                 "Categories (3, object): ['a' < 'b' < 'c']",
   31:             ]
   32:         expected = "\n".join(expected)
   33:         actual = repr(factor)
   34:         assert actual == expected
   35: 
   36: 
   37: class TestCategoricalRepr:
   38:     def test_big_print(self):
   39:         codes = np.array([0, 1, 2, 0, 1, 2] * 100)
   40:         dtype = CategoricalDtype(categories=Index(["a", "b", "c"], dtype=object))
   41:         factor = Categorical.from_codes(codes, dtype=dtype)
   42:         expected = [
   43:             "['a', 'b', 'c', 'a', 'b', ..., 'b', 'c', 'a', 'b', 'c']",
   44:             "Length: 600",
   45:             "Categories (3, object): ['a', 'b', 'c']",
   46:         ]
   47:         expected = "\n".join(expected)
   48: 
   49:         actual = repr(factor)
   50: 
   51:         assert actual == expected
   52: 
   53:     def test_empty_print(self):
   54:         factor = Categorical([], Index(["a", "b", "c"], dtype=object))
   55:         expected = "[], Categories (3, object): ['a', 'b', 'c']"
   56:         actual = repr(factor)
   57:         assert actual == expected
   58: 
   59:         assert expected == actual
   60:         factor = Categorical([], Index(["a", "b", "c"], dtype=object), ordered=True)
   61:         expected = "[], Categories (3, object): ['a' < 'b' < 'c']"
   62:         actual = repr(factor)
   63:         assert expected == actual
   64: 
   65:         factor = Categorical([], [])
   66:         expected = "[], Categories (0, object): []"
   67:         assert expected == repr(factor)
   68: 
   69:     def test_print_none_width(self):
   70:         # GH10087
   71:         a = Series(Categorical([1, 2, 3, 4]))
   72:         exp = (
   73:             "0    1\n1    2\n2    3\n3    4\n"
   74:             "dtype: category\nCategories (4, int64): [1, 2, 3, 4]"
   75:         )
   76: 
   77:         with option_context("display.width", None):
   78:             assert exp == repr(a)
   79: 
   80:     @pytest.mark.skipif(
   81:         using_pyarrow_string_dtype(),
   82:         reason="Change once infer_string is set to True by default",
   83:     )
   84:     def test_unicode_print(self):
   85:         c = Categorical(["aaaaa", "bb", "cccc"] * 20)
   86:         expected = """\
   87: ['aaaaa', 'bb', 'cccc', 'aaaaa', 'bb', ..., 'bb', 'cccc', 'aaaaa', 'bb', 'cccc']
   88: Length: 60
   89: Categories (3, object): ['aaaaa', 'bb', 'cccc']"""
   90: 
   91:         assert repr(c) == expected
   92: 
   93:         c = Categorical(["гЃ‚гЃ‚гЃ‚гЃ‚", "гЃ„гЃ„гЃ„гЃ„гЃ„", "гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†"] * 20)
   94:         expected = """\
   95: ['гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†', 'гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', ..., 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†', 'гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†']
   96: Length: 60
   97: Categories (3, object): ['гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†']"""  # noqa: E501
   98: 
   99:         assert repr(c) == expected
  100: 
  101:         # unicode option should not affect to Categorical, as it doesn't care
  102:         # the repr width
  103:         with option_context("display.unicode.east_asian_width", True):
  104:             c = Categorical(["гЃ‚гЃ‚гЃ‚гЃ‚", "гЃ„гЃ„гЃ„гЃ„гЃ„", "гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†"] * 20)
  105:             expected = """['гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†', 'гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', ..., 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†', 'гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†']
  106: Length: 60
  107: Categories (3, object): ['гЃ‚гЃ‚гЃ‚гЃ‚', 'гЃ„гЃ„гЃ„гЃ„гЃ„', 'гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†гЃ†']"""  # noqa: E501
  108: 
  109:             assert repr(c) == expected
  110: 
  111:     def test_categorical_repr(self):
  112:         c = Categorical([1, 2, 3])
  113:         exp = """[1, 2, 3]
  114: Categories (3, int64): [1, 2, 3]"""
  115: 
  116:         assert repr(c) == exp
  117: 
  118:         c = Categorical([1, 2, 3, 1, 2, 3], categories=[1, 2, 3])
  119:         exp = """[1, 2, 3, 1, 2, 3]
  120: Categories (3, int64): [1, 2, 3]"""
  121: 
  122:         assert repr(c) == exp
  123: 
  124:         c = Categorical([1, 2, 3, 4, 5] * 10)
  125:         exp = """[1, 2, 3, 4, 5, ..., 1, 2, 3, 4, 5]
  126: Length: 50
  127: Categories (5, int64): [1, 2, 3, 4, 5]"""
  128: 
  129:         assert repr(c) == exp
  130: 
  131:         c = Categorical(np.arange(20, dtype=np.int64))
  132:         exp = """[0, 1, 2, 3, 4, ..., 15, 16, 17, 18, 19]
  133: Length: 20
  134: Categories (20, int64): [0, 1, 2, 3, ..., 16, 17, 18, 19]"""
  135: 
  136:         assert repr(c) == exp
  137: 
  138:     def test_categorical_repr_ordered(self):
  139:         c = Categorical([1, 2, 3], ordered=True)
  140:         exp = """[1, 2, 3]
  141: Categories (3, int64): [1 < 2 < 3]"""
  142: 
  143:         assert repr(c) == exp
  144: 
  145:         c = Categorical([1, 2, 3, 1, 2, 3], categories=[1, 2, 3], ordered=True)
  146:         exp = """[1, 2, 3, 1, 2, 3]
  147: Categories (3, int64): [1 < 2 < 3]"""
  148: 
  149:         assert repr(c) == exp
  150: 
  151:         c = Categorical([1, 2, 3, 4, 5] * 10, ordered=True)
  152:         exp = """[1, 2, 3, 4, 5, ..., 1, 2, 3, 4, 5]
  153: Length: 50
  154: Categories (5, int64): [1 < 2 < 3 < 4 < 5]"""
  155: 
  156:         assert repr(c) == exp
  157: 
  158:         c = Categorical(np.arange(20, dtype=np.int64), ordered=True)
  159:         exp = """[0, 1, 2, 3, 4, ..., 15, 16, 17, 18, 19]
  160: Length: 20
  161: Categories (20, int64): [0 < 1 < 2 < 3 ... 16 < 17 < 18 < 19]"""
  162: 
  163:         assert repr(c) == exp
  164: 
  165:     def test_categorical_repr_datetime(self):
  166:         idx = date_range("2011-01-01 09:00", freq="h", periods=5)
  167:         c = Categorical(idx)
  168: 
  169:         exp = (
  170:             "[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, "
  171:             "2011-01-01 12:00:00, 2011-01-01 13:00:00]\n"
  172:             "Categories (5, datetime64[ns]): [2011-01-01 09:00:00, "
  173:             "2011-01-01 10:00:00, 2011-01-01 11:00:00,\n"
  174:             "                                 2011-01-01 12:00:00, "
  175:             "2011-01-01 13:00:00]"
  176:             ""
  177:         )
  178:         assert repr(c) == exp
  179: 
  180:         c = Categorical(idx.append(idx), categories=idx)
  181:         exp = (
  182:             "[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, "
  183:             "2011-01-01 12:00:00, 2011-01-01 13:00:00, 2011-01-01 09:00:00, "
  184:             "2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, "
  185:             "2011-01-01 13:00:00]\n"
  186:             "Categories (5, datetime64[ns]): [2011-01-01 09:00:00, "
  187:             "2011-01-01 10:00:00, 2011-01-01 11:00:00,\n"
  188:             "                                 2011-01-01 12:00:00, "
  189:             "2011-01-01 13:00:00]"
  190:         )
  191: 
  192:         assert repr(c) == exp
  193: 
  194:         idx = date_range("2011-01-01 09:00", freq="h", periods=5, tz="US/Eastern")
  195:         c = Categorical(idx)
  196:         exp = (
  197:             "[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, "
  198:             "2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, "
  199:             "2011-01-01 13:00:00-05:00]\n"
  200:             "Categories (5, datetime64[ns, US/Eastern]): "
  201:             "[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00,\n"
  202:             "                                             "
  203:             "2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00,\n"
  204:             "                                             "
  205:             "2011-01-01 13:00:00-05:00]"
  206:         )
  207: 
  208:         assert repr(c) == exp
  209: 
  210:         c = Categorical(idx.append(idx), categories=idx)
  211:         exp = (
  212:             "[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, "
  213:             "2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, "
  214:             "2011-01-01 13:00:00-05:00, 2011-01-01 09:00:00-05:00, "
  215:             "2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, "
  216:             "2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00]\n"
  217:             "Categories (5, datetime64[ns, US/Eastern]): "
  218:             "[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00,\n"
  219:             "                                             "
  220:             "2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00,\n"
  221:             "                                             "
  222:             "2011-01-01 13:00:00-05:00]"
  223:         )
  224: 
  225:         assert repr(c) == exp
  226: 
  227:     def test_categorical_repr_datetime_ordered(self):
  228:         idx = date_range("2011-01-01 09:00", freq="h", periods=5)
  229:         c = Categorical(idx, ordered=True)
  230:         exp = """[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00]
  231: Categories (5, datetime64[ns]): [2011-01-01 09:00:00 < 2011-01-01 10:00:00 < 2011-01-01 11:00:00 <
  232:                                  2011-01-01 12:00:00 < 2011-01-01 13:00:00]"""  # noqa: E501
  233: 
  234:         assert repr(c) == exp
  235: 
  236:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  237:         exp = """[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00, 2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00]
  238: Categories (5, datetime64[ns]): [2011-01-01 09:00:00 < 2011-01-01 10:00:00 < 2011-01-01 11:00:00 <
  239:                                  2011-01-01 12:00:00 < 2011-01-01 13:00:00]"""  # noqa: E501
  240: 
  241:         assert repr(c) == exp
  242: 
  243:         idx = date_range("2011-01-01 09:00", freq="h", periods=5, tz="US/Eastern")
  244:         c = Categorical(idx, ordered=True)
  245:         exp = """[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00]
  246: Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01-01 10:00:00-05:00 <
  247:                                              2011-01-01 11:00:00-05:00 < 2011-01-01 12:00:00-05:00 <
  248:                                              2011-01-01 13:00:00-05:00]"""  # noqa: E501
  249: 
  250:         assert repr(c) == exp
  251: 
  252:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  253:         exp = """[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00, 2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00]
  254: Categories (5, datetime64[ns, US/Eastern]): [2011-01-01 09:00:00-05:00 < 2011-01-01 10:00:00-05:00 <
  255:                                              2011-01-01 11:00:00-05:00 < 2011-01-01 12:00:00-05:00 <
  256:                                              2011-01-01 13:00:00-05:00]"""  # noqa: E501
  257: 
  258:         assert repr(c) == exp
  259: 
  260:     def test_categorical_repr_int_with_nan(self):
  261:         c = Categorical([1, 2, np.nan])
  262:         c_exp = """[1, 2, NaN]\nCategories (2, int64): [1, 2]"""
  263:         assert repr(c) == c_exp
  264: 
  265:         s = Series([1, 2, np.nan], dtype="object").astype("category")
  266:         s_exp = """0      1\n1      2\n2    NaN
  267: dtype: category
  268: Categories (2, int64): [1, 2]"""
  269:         assert repr(s) == s_exp
  270: 
  271:     def test_categorical_repr_period(self):
  272:         idx = period_range("2011-01-01 09:00", freq="h", periods=5)
  273:         c = Categorical(idx)
  274:         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
  275: Categories (5, period[h]): [2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00,
  276:                             2011-01-01 13:00]"""  # noqa: E501
  277: 
  278:         assert repr(c) == exp
  279: 
  280:         c = Categorical(idx.append(idx), categories=idx)
  281:         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00, 2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
  282: Categories (5, period[h]): [2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00,
  283:                             2011-01-01 13:00]"""  # noqa: E501
  284: 
  285:         assert repr(c) == exp
  286: 
  287:         idx = period_range("2011-01", freq="M", periods=5)
  288:         c = Categorical(idx)
  289:         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
  290: Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""
  291: 
  292:         assert repr(c) == exp
  293: 
  294:         c = Categorical(idx.append(idx), categories=idx)
  295:         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05, 2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
  296: Categories (5, period[M]): [2011-01, 2011-02, 2011-03, 2011-04, 2011-05]"""  # noqa: E501
  297: 
  298:         assert repr(c) == exp
  299: 
  300:     def test_categorical_repr_period_ordered(self):
  301:         idx = period_range("2011-01-01 09:00", freq="h", periods=5)
  302:         c = Categorical(idx, ordered=True)
  303:         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
  304: Categories (5, period[h]): [2011-01-01 09:00 < 2011-01-01 10:00 < 2011-01-01 11:00 < 2011-01-01 12:00 <
  305:                             2011-01-01 13:00]"""  # noqa: E501
  306: 
  307:         assert repr(c) == exp
  308: 
  309:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  310:         exp = """[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00, 2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00]
  311: Categories (5, period[h]): [2011-01-01 09:00 < 2011-01-01 10:00 < 2011-01-01 11:00 < 2011-01-01 12:00 <
  312:                             2011-01-01 13:00]"""  # noqa: E501
  313: 
  314:         assert repr(c) == exp
  315: 
  316:         idx = period_range("2011-01", freq="M", periods=5)
  317:         c = Categorical(idx, ordered=True)
  318:         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
  319: Categories (5, period[M]): [2011-01 < 2011-02 < 2011-03 < 2011-04 < 2011-05]"""
  320: 
  321:         assert repr(c) == exp
  322: 
  323:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  324:         exp = """[2011-01, 2011-02, 2011-03, 2011-04, 2011-05, 2011-01, 2011-02, 2011-03, 2011-04, 2011-05]
  325: Categories (5, period[M]): [2011-01 < 2011-02 < 2011-03 < 2011-04 < 2011-05]"""  # noqa: E501
  326: 
  327:         assert repr(c) == exp
  328: 
  329:     def test_categorical_repr_timedelta(self):
  330:         idx = timedelta_range("1 days", periods=5)
  331:         c = Categorical(idx)
  332:         exp = """[1 days, 2 days, 3 days, 4 days, 5 days]
  333: Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""
  334: 
  335:         assert repr(c) == exp
  336: 
  337:         c = Categorical(idx.append(idx), categories=idx)
  338:         exp = """[1 days, 2 days, 3 days, 4 days, 5 days, 1 days, 2 days, 3 days, 4 days, 5 days]
  339: Categories (5, timedelta64[ns]): [1 days, 2 days, 3 days, 4 days, 5 days]"""  # noqa: E501
  340: 
  341:         assert repr(c) == exp
  342: 
  343:         idx = timedelta_range("1 hours", periods=20)
  344:         c = Categorical(idx)
  345:         exp = """[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, ..., 15 days 01:00:00, 16 days 01:00:00, 17 days 01:00:00, 18 days 01:00:00, 19 days 01:00:00]
  346: Length: 20
  347: Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00,
  348:                                    3 days 01:00:00, ..., 16 days 01:00:00, 17 days 01:00:00,
  349:                                    18 days 01:00:00, 19 days 01:00:00]"""  # noqa: E501
  350: 
  351:         assert repr(c) == exp
  352: 
  353:         c = Categorical(idx.append(idx), categories=idx)
  354:         exp = """[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, ..., 15 days 01:00:00, 16 days 01:00:00, 17 days 01:00:00, 18 days 01:00:00, 19 days 01:00:00]
  355: Length: 40
  356: Categories (20, timedelta64[ns]): [0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00,
  357:                                    3 days 01:00:00, ..., 16 days 01:00:00, 17 days 01:00:00,
  358:                                    18 days 01:00:00, 19 days 01:00:00]"""  # noqa: E501
  359: 
  360:         assert repr(c) == exp
  361: 
  362:     def test_categorical_repr_timedelta_ordered(self):
  363:         idx = timedelta_range("1 days", periods=5)
  364:         c = Categorical(idx, ordered=True)
  365:         exp = """[1 days, 2 days, 3 days, 4 days, 5 days]
  366: Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""
  367: 
  368:         assert repr(c) == exp
  369: 
  370:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  371:         exp = """[1 days, 2 days, 3 days, 4 days, 5 days, 1 days, 2 days, 3 days, 4 days, 5 days]
  372: Categories (5, timedelta64[ns]): [1 days < 2 days < 3 days < 4 days < 5 days]"""  # noqa: E501
  373: 
  374:         assert repr(c) == exp
  375: 
  376:         idx = timedelta_range("1 hours", periods=20)
  377:         c = Categorical(idx, ordered=True)
  378:         exp = """[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, ..., 15 days 01:00:00, 16 days 01:00:00, 17 days 01:00:00, 18 days 01:00:00, 19 days 01:00:00]
  379: Length: 20
  380: Categories (20, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01:00:00 <
  381:                                    3 days 01:00:00 ... 16 days 01:00:00 < 17 days 01:00:00 <
  382:                                    18 days 01:00:00 < 19 days 01:00:00]"""  # noqa: E501
  383: 
  384:         assert repr(c) == exp
  385: 
  386:         c = Categorical(idx.append(idx), categories=idx, ordered=True)
  387:         exp = """[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, 4 days 01:00:00, ..., 15 days 01:00:00, 16 days 01:00:00, 17 days 01:00:00, 18 days 01:00:00, 19 days 01:00:00]
  388: Length: 40
  389: Categories (20, timedelta64[ns]): [0 days 01:00:00 < 1 days 01:00:00 < 2 days 01:00:00 <
  390:                                    3 days 01:00:00 ... 16 days 01:00:00 < 17 days 01:00:00 <
  391:                                    18 days 01:00:00 < 19 days 01:00:00]"""  # noqa: E501
  392: 
  393:         assert repr(c) == exp
  394: 
  395:     def test_categorical_index_repr(self):
  396:         idx = CategoricalIndex(Categorical([1, 2, 3]))
  397:         exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=False, dtype='category')"""  # noqa: E501
  398:         assert repr(idx) == exp
  399: 
  400:         i = CategoricalIndex(Categorical(np.arange(10, dtype=np.int64)))
  401:         exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, ..., 6, 7, 8, 9], ordered=False, dtype='category')"""  # noqa: E501
  402:         assert repr(i) == exp
  403: 
  404:     def test_categorical_index_repr_ordered(self):
  405:         i = CategoricalIndex(Categorical([1, 2, 3], ordered=True))
  406:         exp = """CategoricalIndex([1, 2, 3], categories=[1, 2, 3], ordered=True, dtype='category')"""  # noqa: E501
  407:         assert repr(i) == exp
  408: 
  409:         i = CategoricalIndex(Categorical(np.arange(10, dtype=np.int64), ordered=True))
  410:         exp = """CategoricalIndex([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], categories=[0, 1, 2, 3, ..., 6, 7, 8, 9], ordered=True, dtype='category')"""  # noqa: E501
  411:         assert repr(i) == exp
  412: 
  413:     def test_categorical_index_repr_datetime(self):
  414:         idx = date_range("2011-01-01 09:00", freq="h", periods=5)
  415:         i = CategoricalIndex(Categorical(idx))
  416:         exp = """CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',
  417:                   '2011-01-01 11:00:00', '2011-01-01 12:00:00',
  418:                   '2011-01-01 13:00:00'],
  419:                  categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=False, dtype='category')"""  # noqa: E501
  420: 
  421:         assert repr(i) == exp
  422: 
  423:         idx = date_range("2011-01-01 09:00", freq="h", periods=5, tz="US/Eastern")
  424:         i = CategoricalIndex(Categorical(idx))
  425:         exp = """CategoricalIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00',
  426:                   '2011-01-01 11:00:00-05:00', '2011-01-01 12:00:00-05:00',
  427:                   '2011-01-01 13:00:00-05:00'],
  428:                  categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=False, dtype='category')"""  # noqa: E501
  429: 
  430:         assert repr(i) == exp
  431: 
  432:     def test_categorical_index_repr_datetime_ordered(self):
  433:         idx = date_range("2011-01-01 09:00", freq="h", periods=5)
  434:         i = CategoricalIndex(Categorical(idx, ordered=True))
  435:         exp = """CategoricalIndex(['2011-01-01 09:00:00', '2011-01-01 10:00:00',
  436:                   '2011-01-01 11:00:00', '2011-01-01 12:00:00',
  437:                   '2011-01-01 13:00:00'],
  438:                  categories=[2011-01-01 09:00:00, 2011-01-01 10:00:00, 2011-01-01 11:00:00, 2011-01-01 12:00:00, 2011-01-01 13:00:00], ordered=True, dtype='category')"""  # noqa: E501
  439: 
  440:         assert repr(i) == exp
  441: 
  442:         idx = date_range("2011-01-01 09:00", freq="h", periods=5, tz="US/Eastern")
  443:         i = CategoricalIndex(Categorical(idx, ordered=True))
  444:         exp = """CategoricalIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00',
  445:                   '2011-01-01 11:00:00-05:00', '2011-01-01 12:00:00-05:00',
  446:                   '2011-01-01 13:00:00-05:00'],
  447:                  categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""  # noqa: E501
  448: 
  449:         assert repr(i) == exp
  450: 
  451:         i = CategoricalIndex(Categorical(idx.append(idx), ordered=True))
  452:         exp = """CategoricalIndex(['2011-01-01 09:00:00-05:00', '2011-01-01 10:00:00-05:00',
  453:                   '2011-01-01 11:00:00-05:00', '2011-01-01 12:00:00-05:00',
  454:                   '2011-01-01 13:00:00-05:00', '2011-01-01 09:00:00-05:00',
  455:                   '2011-01-01 10:00:00-05:00', '2011-01-01 11:00:00-05:00',
  456:                   '2011-01-01 12:00:00-05:00', '2011-01-01 13:00:00-05:00'],
  457:                  categories=[2011-01-01 09:00:00-05:00, 2011-01-01 10:00:00-05:00, 2011-01-01 11:00:00-05:00, 2011-01-01 12:00:00-05:00, 2011-01-01 13:00:00-05:00], ordered=True, dtype='category')"""  # noqa: E501
  458: 
  459:         assert repr(i) == exp
  460: 
  461:     def test_categorical_index_repr_period(self):
  462:         # test all length
  463:         idx = period_range("2011-01-01 09:00", freq="h", periods=1)
  464:         i = CategoricalIndex(Categorical(idx))
  465:         exp = """CategoricalIndex(['2011-01-01 09:00'], categories=[2011-01-01 09:00], ordered=False, dtype='category')"""  # noqa: E501
  466:         assert repr(i) == exp
  467: 
  468:         idx = period_range("2011-01-01 09:00", freq="h", periods=2)
  469:         i = CategoricalIndex(Categorical(idx))
  470:         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00], ordered=False, dtype='category')"""  # noqa: E501
  471:         assert repr(i) == exp
  472: 
  473:         idx = period_range("2011-01-01 09:00", freq="h", periods=3)
  474:         i = CategoricalIndex(Categorical(idx))
  475:         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00], ordered=False, dtype='category')"""  # noqa: E501
  476:         assert repr(i) == exp
  477: 
  478:         idx = period_range("2011-01-01 09:00", freq="h", periods=5)
  479:         i = CategoricalIndex(Categorical(idx))
  480:         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00',
  481:                   '2011-01-01 12:00', '2011-01-01 13:00'],
  482:                  categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""  # noqa: E501
  483: 
  484:         assert repr(i) == exp
  485: 
  486:         i = CategoricalIndex(Categorical(idx.append(idx)))
  487:         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00',
  488:                   '2011-01-01 12:00', '2011-01-01 13:00', '2011-01-01 09:00',
  489:                   '2011-01-01 10:00', '2011-01-01 11:00', '2011-01-01 12:00',
  490:                   '2011-01-01 13:00'],
  491:                  categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=False, dtype='category')"""  # noqa: E501
  492: 
  493:         assert repr(i) == exp
  494: 
  495:         idx = period_range("2011-01", freq="M", periods=5)
  496:         i = CategoricalIndex(Categorical(idx))
  497:         exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=False, dtype='category')"""  # noqa: E501
  498:         assert repr(i) == exp
  499: 
  500:     def test_categorical_index_repr_period_ordered(self):
  501:         idx = period_range("2011-01-01 09:00", freq="h", periods=5)
  502:         i = CategoricalIndex(Categorical(idx, ordered=True))
  503:         exp = """CategoricalIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00',
  504:                   '2011-01-01 12:00', '2011-01-01 13:00'],
  505:                  categories=[2011-01-01 09:00, 2011-01-01 10:00, 2011-01-01 11:00, 2011-01-01 12:00, 2011-01-01 13:00], ordered=True, dtype='category')"""  # noqa: E501
  506: 
  507:         assert repr(i) == exp
  508: 
  509:         idx = period_range("2011-01", freq="M", periods=5)
  510:         i = CategoricalIndex(Categorical(idx, ordered=True))
  511:         exp = """CategoricalIndex(['2011-01', '2011-02', '2011-03', '2011-04', '2011-05'], categories=[2011-01, 2011-02, 2011-03, 2011-04, 2011-05], ordered=True, dtype='category')"""  # noqa: E501
  512:         assert repr(i) == exp
  513: 
  514:     def test_categorical_index_repr_timedelta(self):
  515:         idx = timedelta_range("1 days", periods=5)
  516:         i = CategoricalIndex(Categorical(idx))
  517:         exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days, 2 days, 3 days, 4 days, 5 days], ordered=False, dtype='category')"""  # noqa: E501
  518:         assert repr(i) == exp
  519: 
  520:         idx = timedelta_range("1 hours", periods=10)
  521:         i = CategoricalIndex(Categorical(idx))
  522:         exp = """CategoricalIndex(['0 days 01:00:00', '1 days 01:00:00', '2 days 01:00:00',
  523:                   '3 days 01:00:00', '4 days 01:00:00', '5 days 01:00:00',
  524:                   '6 days 01:00:00', '7 days 01:00:00', '8 days 01:00:00',
  525:                   '9 days 01:00:00'],
  526:                  categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, ..., 6 days 01:00:00, 7 days 01:00:00, 8 days 01:00:00, 9 days 01:00:00], ordered=False, dtype='category')"""  # noqa: E501
  527: 
  528:         assert repr(i) == exp
  529: 
  530:     def test_categorical_index_repr_timedelta_ordered(self):
  531:         idx = timedelta_range("1 days", periods=5)
  532:         i = CategoricalIndex(Categorical(idx, ordered=True))
  533:         exp = """CategoricalIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], categories=[1 days, 2 days, 3 days, 4 days, 5 days], ordered=True, dtype='category')"""  # noqa: E501
  534:         assert repr(i) == exp
  535: 
  536:         idx = timedelta_range("1 hours", periods=10)
  537:         i = CategoricalIndex(Categorical(idx, ordered=True))
  538:         exp = """CategoricalIndex(['0 days 01:00:00', '1 days 01:00:00', '2 days 01:00:00',
  539:                   '3 days 01:00:00', '4 days 01:00:00', '5 days 01:00:00',
  540:                   '6 days 01:00:00', '7 days 01:00:00', '8 days 01:00:00',
  541:                   '9 days 01:00:00'],
  542:                  categories=[0 days 01:00:00, 1 days 01:00:00, 2 days 01:00:00, 3 days 01:00:00, ..., 6 days 01:00:00, 7 days 01:00:00, 8 days 01:00:00, 9 days 01:00:00], ordered=True, dtype='category')"""  # noqa: E501
  543: 
  544:         assert repr(i) == exp
  545: 
  546:     def test_categorical_str_repr(self):
  547:         # GH 33676
  548:         result = repr(Categorical([1, "2", 3, 4]))
  549:         expected = "[1, '2', 3, 4]\nCategories (4, object): [1, 3, 4, '2']"
  550:         assert result == expected
