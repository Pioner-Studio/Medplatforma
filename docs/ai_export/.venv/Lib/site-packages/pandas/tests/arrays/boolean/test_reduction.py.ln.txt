    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: 
    6: 
    7: @pytest.fixture
    8: def data():
    9:     """Fixture returning boolean array, with valid and missing values."""
   10:     return pd.array(
   11:         [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
   12:         dtype="boolean",
   13:     )
   14: 
   15: 
   16: @pytest.mark.parametrize(
   17:     "values, exp_any, exp_all, exp_any_noskip, exp_all_noskip",
   18:     [
   19:         ([True, pd.NA], True, True, True, pd.NA),
   20:         ([False, pd.NA], False, False, pd.NA, False),
   21:         ([pd.NA], False, True, pd.NA, pd.NA),
   22:         ([], False, True, False, True),
   23:         # GH-33253: all True / all False values buggy with skipna=False
   24:         ([True, True], True, True, True, True),
   25:         ([False, False], False, False, False, False),
   26:     ],
   27: )
   28: def test_any_all(values, exp_any, exp_all, exp_any_noskip, exp_all_noskip):
   29:     # the methods return numpy scalars
   30:     exp_any = pd.NA if exp_any is pd.NA else np.bool_(exp_any)
   31:     exp_all = pd.NA if exp_all is pd.NA else np.bool_(exp_all)
   32:     exp_any_noskip = pd.NA if exp_any_noskip is pd.NA else np.bool_(exp_any_noskip)
   33:     exp_all_noskip = pd.NA if exp_all_noskip is pd.NA else np.bool_(exp_all_noskip)
   34: 
   35:     for con in [pd.array, pd.Series]:
   36:         a = con(values, dtype="boolean")
   37:         assert a.any() is exp_any
   38:         assert a.all() is exp_all
   39:         assert a.any(skipna=False) is exp_any_noskip
   40:         assert a.all(skipna=False) is exp_all_noskip
   41: 
   42:         assert np.any(a.any()) is exp_any
   43:         assert np.all(a.all()) is exp_all
   44: 
   45: 
   46: @pytest.mark.parametrize("dropna", [True, False])
   47: def test_reductions_return_types(dropna, data, all_numeric_reductions):
   48:     op = all_numeric_reductions
   49:     s = pd.Series(data)
   50:     if dropna:
   51:         s = s.dropna()
   52: 
   53:     if op in ("sum", "prod"):
   54:         assert isinstance(getattr(s, op)(), np.int_)
   55:     elif op == "count":
   56:         # Oddly on the 32 bit build (but not Windows), this is intc (!= intp)
   57:         assert isinstance(getattr(s, op)(), np.integer)
   58:     elif op in ("min", "max"):
   59:         assert isinstance(getattr(s, op)(), np.bool_)
   60:     else:
   61:         # "mean", "std", "var", "median", "kurt", "skew"
   62:         assert isinstance(getattr(s, op)(), np.float64)
