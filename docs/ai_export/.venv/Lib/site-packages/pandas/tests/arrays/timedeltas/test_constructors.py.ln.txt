    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas._testing as tm
    5: from pandas.core.arrays import TimedeltaArray
    6: 
    7: 
    8: class TestTimedeltaArrayConstructor:
    9:     def test_only_1dim_accepted(self):
   10:         # GH#25282
   11:         arr = np.array([0, 1, 2, 3], dtype="m8[h]").astype("m8[ns]")
   12: 
   13:         depr_msg = "TimedeltaArray.__init__ is deprecated"
   14:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   15:             with pytest.raises(ValueError, match="Only 1-dimensional"):
   16:                 # 3-dim, we allow 2D to sneak in for ops purposes GH#29853
   17:                 TimedeltaArray(arr.reshape(2, 2, 1))
   18: 
   19:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   20:             with pytest.raises(ValueError, match="Only 1-dimensional"):
   21:                 # 0-dim
   22:                 TimedeltaArray(arr[[0]].squeeze())
   23: 
   24:     def test_freq_validation(self):
   25:         # ensure that the public constructor cannot create an invalid instance
   26:         arr = np.array([0, 0, 1], dtype=np.int64) * 3600 * 10**9
   27: 
   28:         msg = (
   29:             "Inferred frequency None from passed values does not "
   30:             "conform to passed frequency D"
   31:         )
   32:         depr_msg = "TimedeltaArray.__init__ is deprecated"
   33:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   34:             with pytest.raises(ValueError, match=msg):
   35:                 TimedeltaArray(arr.view("timedelta64[ns]"), freq="D")
   36: 
   37:     def test_non_array_raises(self):
   38:         depr_msg = "TimedeltaArray.__init__ is deprecated"
   39:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   40:             with pytest.raises(ValueError, match="list"):
   41:                 TimedeltaArray([1, 2, 3])
   42: 
   43:     def test_other_type_raises(self):
   44:         msg = r"dtype bool cannot be converted to timedelta64\[ns\]"
   45:         with pytest.raises(TypeError, match=msg):
   46:             TimedeltaArray._from_sequence(np.array([1, 2, 3], dtype="bool"))
   47: 
   48:     def test_incorrect_dtype_raises(self):
   49:         msg = "dtype 'category' is invalid, should be np.timedelta64 dtype"
   50:         with pytest.raises(ValueError, match=msg):
   51:             TimedeltaArray._from_sequence(
   52:                 np.array([1, 2, 3], dtype="i8"), dtype="category"
   53:             )
   54: 
   55:         msg = "dtype 'int64' is invalid, should be np.timedelta64 dtype"
   56:         with pytest.raises(ValueError, match=msg):
   57:             TimedeltaArray._from_sequence(
   58:                 np.array([1, 2, 3], dtype="i8"), dtype=np.dtype("int64")
   59:             )
   60: 
   61:         msg = r"dtype 'datetime64\[ns\]' is invalid, should be np.timedelta64 dtype"
   62:         with pytest.raises(ValueError, match=msg):
   63:             TimedeltaArray._from_sequence(
   64:                 np.array([1, 2, 3], dtype="i8"), dtype=np.dtype("M8[ns]")
   65:             )
   66: 
   67:         msg = (
   68:             r"dtype 'datetime64\[us, UTC\]' is invalid, should be np.timedelta64 dtype"
   69:         )
   70:         with pytest.raises(ValueError, match=msg):
   71:             TimedeltaArray._from_sequence(
   72:                 np.array([1, 2, 3], dtype="i8"), dtype="M8[us, UTC]"
   73:             )
   74: 
   75:         msg = "Supported timedelta64 resolutions are 's', 'ms', 'us', 'ns'"
   76:         with pytest.raises(ValueError, match=msg):
   77:             TimedeltaArray._from_sequence(
   78:                 np.array([1, 2, 3], dtype="i8"), dtype=np.dtype("m8[Y]")
   79:             )
   80: 
   81:     def test_mismatched_values_dtype_units(self):
   82:         arr = np.array([1, 2, 3], dtype="m8[s]")
   83:         dtype = np.dtype("m8[ns]")
   84:         msg = r"Values resolution does not match dtype"
   85:         depr_msg = "TimedeltaArray.__init__ is deprecated"
   86: 
   87:         with tm.assert_produces_warning(FutureWarning, match=depr_msg):
   88:             with pytest.raises(ValueError, match=msg):
   89:                 TimedeltaArray(arr, dtype=dtype)
   90: 
   91:     def test_copy(self):
   92:         data = np.array([1, 2, 3], dtype="m8[ns]")
   93:         arr = TimedeltaArray._from_sequence(data, copy=False)
   94:         assert arr._ndarray is data
   95: 
   96:         arr = TimedeltaArray._from_sequence(data, copy=True)
   97:         assert arr._ndarray is not data
   98:         assert arr._ndarray.base is not data
   99: 
  100:     def test_from_sequence_dtype(self):
  101:         msg = "dtype 'object' is invalid, should be np.timedelta64 dtype"
  102:         with pytest.raises(ValueError, match=msg):
  103:             TimedeltaArray._from_sequence([], dtype=object)
