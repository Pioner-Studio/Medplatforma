    1: import operator
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core.arrays import SparseArray
    9: 
   10: 
   11: @pytest.mark.filterwarnings("ignore:invalid value encountered in cast:RuntimeWarning")
   12: @pytest.mark.parametrize("fill_value", [0, np.nan])
   13: @pytest.mark.parametrize("op", [operator.pos, operator.neg])
   14: def test_unary_op(op, fill_value):
   15:     arr = np.array([0, 1, np.nan, 2])
   16:     sparray = SparseArray(arr, fill_value=fill_value)
   17:     result = op(sparray)
   18:     expected = SparseArray(op(arr), fill_value=op(fill_value))
   19:     tm.assert_sp_array_equal(result, expected)
   20: 
   21: 
   22: @pytest.mark.parametrize("fill_value", [True, False])
   23: def test_invert(fill_value):
   24:     arr = np.array([True, False, False, True])
   25:     sparray = SparseArray(arr, fill_value=fill_value)
   26:     result = ~sparray
   27:     expected = SparseArray(~arr, fill_value=not fill_value)
   28:     tm.assert_sp_array_equal(result, expected)
   29: 
   30:     result = ~pd.Series(sparray)
   31:     expected = pd.Series(expected)
   32:     tm.assert_series_equal(result, expected)
   33: 
   34:     result = ~pd.DataFrame({"A": sparray})
   35:     expected = pd.DataFrame({"A": expected})
   36:     tm.assert_frame_equal(result, expected)
   37: 
   38: 
   39: class TestUnaryMethods:
   40:     @pytest.mark.filterwarnings(
   41:         "ignore:invalid value encountered in cast:RuntimeWarning"
   42:     )
   43:     def test_neg_operator(self):
   44:         arr = SparseArray([-1, -2, np.nan, 3], fill_value=np.nan, dtype=np.int8)
   45:         res = -arr
   46:         exp = SparseArray([1, 2, np.nan, -3], fill_value=np.nan, dtype=np.int8)
   47:         tm.assert_sp_array_equal(exp, res)
   48: 
   49:         arr = SparseArray([-1, -2, 1, 3], fill_value=-1, dtype=np.int8)
   50:         res = -arr
   51:         exp = SparseArray([1, 2, -1, -3], fill_value=1, dtype=np.int8)
   52:         tm.assert_sp_array_equal(exp, res)
   53: 
   54:     @pytest.mark.filterwarnings(
   55:         "ignore:invalid value encountered in cast:RuntimeWarning"
   56:     )
   57:     def test_abs_operator(self):
   58:         arr = SparseArray([-1, -2, np.nan, 3], fill_value=np.nan, dtype=np.int8)
   59:         res = abs(arr)
   60:         exp = SparseArray([1, 2, np.nan, 3], fill_value=np.nan, dtype=np.int8)
   61:         tm.assert_sp_array_equal(exp, res)
   62: 
   63:         arr = SparseArray([-1, -2, 1, 3], fill_value=-1, dtype=np.int8)
   64:         res = abs(arr)
   65:         exp = SparseArray([1, 2, 1, 3], fill_value=1, dtype=np.int8)
   66:         tm.assert_sp_array_equal(exp, res)
   67: 
   68:     def test_invert_operator(self):
   69:         arr = SparseArray([False, True, False, True], fill_value=False, dtype=np.bool_)
   70:         exp = SparseArray(
   71:             np.invert([False, True, False, True]), fill_value=True, dtype=np.bool_
   72:         )
   73:         res = ~arr
   74:         tm.assert_sp_array_equal(exp, res)
   75: 
   76:         arr = SparseArray([0, 1, 0, 2, 3, 0], fill_value=0, dtype=np.int32)
   77:         res = ~arr
   78:         exp = SparseArray([-1, -2, -1, -3, -4, -1], fill_value=-1, dtype=np.int32)
   79:         tm.assert_sp_array_equal(exp, res)
