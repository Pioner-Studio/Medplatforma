    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: 
    8: 
    9: class TestSetitemValidation:
   10:     def _check_setitem_invalid(self, arr, invalid):
   11:         msg = f"Invalid value '{str(invalid)}' for dtype {arr.dtype}"
   12:         msg = re.escape(msg)
   13:         with pytest.raises(TypeError, match=msg):
   14:             arr[0] = invalid
   15: 
   16:         with pytest.raises(TypeError, match=msg):
   17:             arr[:] = invalid
   18: 
   19:         with pytest.raises(TypeError, match=msg):
   20:             arr[[0]] = invalid
   21: 
   22:         # FIXME: don't leave commented-out
   23:         # with pytest.raises(TypeError):
   24:         #    arr[[0]] = [invalid]
   25: 
   26:         # with pytest.raises(TypeError):
   27:         #    arr[[0]] = np.array([invalid], dtype=object)
   28: 
   29:         # Series non-coercion, behavior subject to change
   30:         ser = pd.Series(arr)
   31:         with pytest.raises(TypeError, match=msg):
   32:             ser[0] = invalid
   33:             # TODO: so, so many other variants of this...
   34: 
   35:     _invalid_scalars = [
   36:         1 + 2j,
   37:         "True",
   38:         "1",
   39:         "1.0",
   40:         pd.NaT,
   41:         np.datetime64("NaT"),
   42:         np.timedelta64("NaT"),
   43:     ]
   44: 
   45:     @pytest.mark.parametrize(
   46:         "invalid", _invalid_scalars + [1, 1.0, np.int64(1), np.float64(1)]
   47:     )
   48:     def test_setitem_validation_scalar_bool(self, invalid):
   49:         arr = pd.array([True, False, None], dtype="boolean")
   50:         self._check_setitem_invalid(arr, invalid)
   51: 
   52:     @pytest.mark.parametrize("invalid", _invalid_scalars + [True, 1.5, np.float64(1.5)])
   53:     def test_setitem_validation_scalar_int(self, invalid, any_int_ea_dtype):
   54:         arr = pd.array([1, 2, None], dtype=any_int_ea_dtype)
   55:         self._check_setitem_invalid(arr, invalid)
   56: 
   57:     @pytest.mark.parametrize("invalid", _invalid_scalars + [True])
   58:     def test_setitem_validation_scalar_float(self, invalid, float_ea_dtype):
   59:         arr = pd.array([1, 2, None], dtype=float_ea_dtype)
   60:         self._check_setitem_invalid(arr, invalid)
