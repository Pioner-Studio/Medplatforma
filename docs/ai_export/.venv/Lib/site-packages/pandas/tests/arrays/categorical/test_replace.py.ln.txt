    1: import pytest
    2: 
    3: import pandas as pd
    4: from pandas import Categorical
    5: import pandas._testing as tm
    6: 
    7: 
    8: @pytest.mark.parametrize(
    9:     "to_replace,value,expected,flip_categories",
   10:     [
   11:         # one-to-one
   12:         (1, 2, [2, 2, 3], False),
   13:         (1, 4, [4, 2, 3], False),
   14:         (4, 1, [1, 2, 3], False),
   15:         (5, 6, [1, 2, 3], False),
   16:         # many-to-one
   17:         ([1], 2, [2, 2, 3], False),
   18:         ([1, 2], 3, [3, 3, 3], False),
   19:         ([1, 2], 4, [4, 4, 3], False),
   20:         ((1, 2, 4), 5, [5, 5, 3], False),
   21:         ((5, 6), 2, [1, 2, 3], False),
   22:         ([1], [2], [2, 2, 3], False),
   23:         ([1, 4], [5, 2], [5, 2, 3], False),
   24:         # GH49404: overlap between to_replace and value
   25:         ([1, 2, 3], [2, 3, 4], [2, 3, 4], False),
   26:         # GH50872, GH46884: replace with null
   27:         (1, None, [None, 2, 3], False),
   28:         (1, pd.NA, [None, 2, 3], False),
   29:         # check_categorical sorts categories, which crashes on mixed dtypes
   30:         (3, "4", [1, 2, "4"], False),
   31:         ([1, 2, "3"], "5", ["5", "5", 3], True),
   32:     ],
   33: )
   34: @pytest.mark.filterwarnings(
   35:     "ignore:.*with CategoricalDtype is deprecated:FutureWarning"
   36: )
   37: def test_replace_categorical_series(to_replace, value, expected, flip_categories):
   38:     # GH 31720
   39: 
   40:     ser = pd.Series([1, 2, 3], dtype="category")
   41:     result = ser.replace(to_replace, value)
   42:     expected = pd.Series(expected, dtype="category")
   43:     ser.replace(to_replace, value, inplace=True)
   44: 
   45:     if flip_categories:
   46:         expected = expected.cat.set_categories(expected.cat.categories[::-1])
   47: 
   48:     tm.assert_series_equal(expected, result, check_category_order=False)
   49:     tm.assert_series_equal(expected, ser, check_category_order=False)
   50: 
   51: 
   52: @pytest.mark.parametrize(
   53:     "to_replace, value, result, expected_error_msg",
   54:     [
   55:         ("b", "c", ["a", "c"], "Categorical.categories are different"),
   56:         ("c", "d", ["a", "b"], None),
   57:         # https://github.com/pandas-dev/pandas/issues/33288
   58:         ("a", "a", ["a", "b"], None),
   59:         ("b", None, ["a", None], "Categorical.categories length are different"),
   60:     ],
   61: )
   62: def test_replace_categorical(to_replace, value, result, expected_error_msg):
   63:     # GH#26988
   64:     cat = Categorical(["a", "b"])
   65:     expected = Categorical(result)
   66:     msg = (
   67:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
   68:         "with CategoricalDtype"
   69:     )
   70:     warn = FutureWarning if expected_error_msg is not None else None
   71:     with tm.assert_produces_warning(warn, match=msg):
   72:         result = pd.Series(cat, copy=False).replace(to_replace, value)._values
   73: 
   74:     tm.assert_categorical_equal(result, expected)
   75:     if to_replace == "b":  # the "c" test is supposed to be unchanged
   76:         with pytest.raises(AssertionError, match=expected_error_msg):
   77:             # ensure non-inplace call does not affect original
   78:             tm.assert_categorical_equal(cat, expected)
   79: 
   80:     ser = pd.Series(cat, copy=False)
   81:     with tm.assert_produces_warning(warn, match=msg):
   82:         ser.replace(to_replace, value, inplace=True)
   83:     tm.assert_categorical_equal(cat, expected)
   84: 
   85: 
   86: def test_replace_categorical_ea_dtype():
   87:     # GH49404
   88:     cat = Categorical(pd.array(["a", "b"], dtype="string"))
   89:     msg = (
   90:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
   91:         "with CategoricalDtype"
   92:     )
   93:     with tm.assert_produces_warning(FutureWarning, match=msg):
   94:         result = pd.Series(cat).replace(["a", "b"], ["c", pd.NA])._values
   95:     expected = Categorical(pd.array(["c", pd.NA], dtype="string"))
   96:     tm.assert_categorical_equal(result, expected)
   97: 
   98: 
   99: def test_replace_maintain_ordering():
  100:     # GH51016
  101:     dtype = pd.CategoricalDtype([0, 1, 2], ordered=True)
  102:     ser = pd.Series([0, 1, 2], dtype=dtype)
  103:     msg = (
  104:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  105:         "with CategoricalDtype"
  106:     )
  107:     with tm.assert_produces_warning(FutureWarning, match=msg):
  108:         result = ser.replace(0, 2)
  109:     expected_dtype = pd.CategoricalDtype([1, 2], ordered=True)
  110:     expected = pd.Series([2, 1, 2], dtype=expected_dtype)
  111:     tm.assert_series_equal(expected, result, check_category_order=True)
