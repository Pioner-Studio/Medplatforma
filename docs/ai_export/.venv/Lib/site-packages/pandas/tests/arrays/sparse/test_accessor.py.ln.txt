    1: import string
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: from pandas import SparseDtype
    8: import pandas._testing as tm
    9: from pandas.core.arrays.sparse import SparseArray
   10: 
   11: 
   12: class TestSeriesAccessor:
   13:     def test_to_dense(self):
   14:         ser = pd.Series([0, 1, 0, 10], dtype="Sparse[int64]")
   15:         result = ser.sparse.to_dense()
   16:         expected = pd.Series([0, 1, 0, 10])
   17:         tm.assert_series_equal(result, expected)
   18: 
   19:     @pytest.mark.parametrize("attr", ["npoints", "density", "fill_value", "sp_values"])
   20:     def test_get_attributes(self, attr):
   21:         arr = SparseArray([0, 1])
   22:         ser = pd.Series(arr)
   23: 
   24:         result = getattr(ser.sparse, attr)
   25:         expected = getattr(arr, attr)
   26:         assert result == expected
   27: 
   28:     def test_from_coo(self):
   29:         scipy_sparse = pytest.importorskip("scipy.sparse")
   30: 
   31:         row = [0, 3, 1, 0]
   32:         col = [0, 3, 1, 2]
   33:         data = [4, 5, 7, 9]
   34: 
   35:         sp_array = scipy_sparse.coo_matrix((data, (row, col)))
   36:         result = pd.Series.sparse.from_coo(sp_array)
   37: 
   38:         index = pd.MultiIndex.from_arrays(
   39:             [
   40:                 np.array([0, 0, 1, 3], dtype=np.int32),
   41:                 np.array([0, 2, 1, 3], dtype=np.int32),
   42:             ],
   43:         )
   44:         expected = pd.Series([4, 9, 7, 5], index=index, dtype="Sparse[int]")
   45:         tm.assert_series_equal(result, expected)
   46: 
   47:     @pytest.mark.parametrize(
   48:         "sort_labels, expected_rows, expected_cols, expected_values_pos",
   49:         [
   50:             (
   51:                 False,
   52:                 [("b", 2), ("a", 2), ("b", 1), ("a", 1)],
   53:                 [("z", 1), ("z", 2), ("x", 2), ("z", 0)],
   54:                 {1: (1, 0), 3: (3, 3)},
   55:             ),
   56:             (
   57:                 True,
   58:                 [("a", 1), ("a", 2), ("b", 1), ("b", 2)],
   59:                 [("x", 2), ("z", 0), ("z", 1), ("z", 2)],
   60:                 {1: (1, 2), 3: (0, 1)},
   61:             ),
   62:         ],
   63:     )
   64:     def test_to_coo(
   65:         self, sort_labels, expected_rows, expected_cols, expected_values_pos
   66:     ):
   67:         sp_sparse = pytest.importorskip("scipy.sparse")
   68: 
   69:         values = SparseArray([0, np.nan, 1, 0, None, 3], fill_value=0)
   70:         index = pd.MultiIndex.from_tuples(
   71:             [
   72:                 ("b", 2, "z", 1),
   73:                 ("a", 2, "z", 2),
   74:                 ("a", 2, "z", 1),
   75:                 ("a", 2, "x", 2),
   76:                 ("b", 1, "z", 1),
   77:                 ("a", 1, "z", 0),
   78:             ]
   79:         )
   80:         ss = pd.Series(values, index=index)
   81: 
   82:         expected_A = np.zeros((4, 4))
   83:         for value, (row, col) in expected_values_pos.items():
   84:             expected_A[row, col] = value
   85: 
   86:         A, rows, cols = ss.sparse.to_coo(
   87:             row_levels=(0, 1), column_levels=(2, 3), sort_labels=sort_labels
   88:         )
   89:         assert isinstance(A, sp_sparse.coo_matrix)
   90:         tm.assert_numpy_array_equal(A.toarray(), expected_A)
   91:         assert rows == expected_rows
   92:         assert cols == expected_cols
   93: 
   94:     def test_non_sparse_raises(self):
   95:         ser = pd.Series([1, 2, 3])
   96:         with pytest.raises(AttributeError, match=".sparse"):
   97:             ser.sparse.density
   98: 
   99: 
  100: class TestFrameAccessor:
  101:     def test_accessor_raises(self):
  102:         df = pd.DataFrame({"A": [0, 1]})
  103:         with pytest.raises(AttributeError, match="sparse"):
  104:             df.sparse
  105: 
  106:     @pytest.mark.parametrize("format", ["csc", "csr", "coo"])
  107:     @pytest.mark.parametrize("labels", [None, list(string.ascii_letters[:10])])
  108:     @pytest.mark.parametrize("dtype", ["float64", "int64"])
  109:     def test_from_spmatrix(self, format, labels, dtype):
  110:         sp_sparse = pytest.importorskip("scipy.sparse")
  111: 
  112:         sp_dtype = SparseDtype(dtype, np.array(0, dtype=dtype).item())
  113: 
  114:         mat = sp_sparse.eye(10, format=format, dtype=dtype)
  115:         result = pd.DataFrame.sparse.from_spmatrix(mat, index=labels, columns=labels)
  116:         expected = pd.DataFrame(
  117:             np.eye(10, dtype=dtype), index=labels, columns=labels
  118:         ).astype(sp_dtype)
  119:         tm.assert_frame_equal(result, expected)
  120: 
  121:     @pytest.mark.parametrize("format", ["csc", "csr", "coo"])
  122:     def test_from_spmatrix_including_explicit_zero(self, format):
  123:         sp_sparse = pytest.importorskip("scipy.sparse")
  124: 
  125:         mat = sp_sparse.random(10, 2, density=0.5, format=format)
  126:         mat.data[0] = 0
  127:         result = pd.DataFrame.sparse.from_spmatrix(mat)
  128:         dtype = SparseDtype("float64", 0.0)
  129:         expected = pd.DataFrame(mat.todense()).astype(dtype)
  130:         tm.assert_frame_equal(result, expected)
  131: 
  132:     @pytest.mark.parametrize(
  133:         "columns",
  134:         [["a", "b"], pd.MultiIndex.from_product([["A"], ["a", "b"]]), ["a", "a"]],
  135:     )
  136:     def test_from_spmatrix_columns(self, columns):
  137:         sp_sparse = pytest.importorskip("scipy.sparse")
  138: 
  139:         dtype = SparseDtype("float64", 0.0)
  140: 
  141:         mat = sp_sparse.random(10, 2, density=0.5)
  142:         result = pd.DataFrame.sparse.from_spmatrix(mat, columns=columns)
  143:         expected = pd.DataFrame(mat.toarray(), columns=columns).astype(dtype)
  144:         tm.assert_frame_equal(result, expected)
  145: 
  146:     @pytest.mark.parametrize(
  147:         "colnames", [("A", "B"), (1, 2), (1, pd.NA), (0.1, 0.2), ("x", "x"), (0, 0)]
  148:     )
  149:     def test_to_coo(self, colnames):
  150:         sp_sparse = pytest.importorskip("scipy.sparse")
  151: 
  152:         df = pd.DataFrame(
  153:             {colnames[0]: [0, 1, 0], colnames[1]: [1, 0, 0]}, dtype="Sparse[int64, 0]"
  154:         )
  155:         result = df.sparse.to_coo()
  156:         expected = sp_sparse.coo_matrix(np.asarray(df))
  157:         assert (result != expected).nnz == 0
  158: 
  159:     @pytest.mark.parametrize("fill_value", [1, np.nan])
  160:     def test_to_coo_nonzero_fill_val_raises(self, fill_value):
  161:         pytest.importorskip("scipy")
  162:         df = pd.DataFrame(
  163:             {
  164:                 "A": SparseArray(
  165:                     [fill_value, fill_value, fill_value, 2], fill_value=fill_value
  166:                 ),
  167:                 "B": SparseArray(
  168:                     [fill_value, 2, fill_value, fill_value], fill_value=fill_value
  169:                 ),
  170:             }
  171:         )
  172:         with pytest.raises(ValueError, match="fill value must be 0"):
  173:             df.sparse.to_coo()
  174: 
  175:     def test_to_coo_midx_categorical(self):
  176:         # GH#50996
  177:         sp_sparse = pytest.importorskip("scipy.sparse")
  178: 
  179:         midx = pd.MultiIndex.from_arrays(
  180:             [
  181:                 pd.CategoricalIndex(list("ab"), name="x"),
  182:                 pd.CategoricalIndex([0, 1], name="y"),
  183:             ]
  184:         )
  185: 
  186:         ser = pd.Series(1, index=midx, dtype="Sparse[int]")
  187:         result = ser.sparse.to_coo(row_levels=["x"], column_levels=["y"])[0]
  188:         expected = sp_sparse.coo_matrix(
  189:             (np.array([1, 1]), (np.array([0, 1]), np.array([0, 1]))), shape=(2, 2)
  190:         )
  191:         assert (result != expected).nnz == 0
  192: 
  193:     def test_to_dense(self):
  194:         df = pd.DataFrame(
  195:             {
  196:                 "A": SparseArray([1, 0], dtype=SparseDtype("int64", 0)),
  197:                 "B": SparseArray([1, 0], dtype=SparseDtype("int64", 1)),
  198:                 "C": SparseArray([1.0, 0.0], dtype=SparseDtype("float64", 0.0)),
  199:             },
  200:             index=["b", "a"],
  201:         )
  202:         result = df.sparse.to_dense()
  203:         expected = pd.DataFrame(
  204:             {"A": [1, 0], "B": [1, 0], "C": [1.0, 0.0]}, index=["b", "a"]
  205:         )
  206:         tm.assert_frame_equal(result, expected)
  207: 
  208:     def test_density(self):
  209:         df = pd.DataFrame(
  210:             {
  211:                 "A": SparseArray([1, 0, 2, 1], fill_value=0),
  212:                 "B": SparseArray([0, 1, 1, 1], fill_value=0),
  213:             }
  214:         )
  215:         res = df.sparse.density
  216:         expected = 0.75
  217:         assert res == expected
  218: 
  219:     @pytest.mark.parametrize("dtype", ["int64", "float64"])
  220:     @pytest.mark.parametrize("dense_index", [True, False])
  221:     def test_series_from_coo(self, dtype, dense_index):
  222:         sp_sparse = pytest.importorskip("scipy.sparse")
  223: 
  224:         A = sp_sparse.eye(3, format="coo", dtype=dtype)
  225:         result = pd.Series.sparse.from_coo(A, dense_index=dense_index)
  226: 
  227:         index = pd.MultiIndex.from_tuples(
  228:             [
  229:                 np.array([0, 0], dtype=np.int32),
  230:                 np.array([1, 1], dtype=np.int32),
  231:                 np.array([2, 2], dtype=np.int32),
  232:             ],
  233:         )
  234:         expected = pd.Series(SparseArray(np.array([1, 1, 1], dtype=dtype)), index=index)
  235:         if dense_index:
  236:             expected = expected.reindex(pd.MultiIndex.from_product(index.levels))
  237: 
  238:         tm.assert_series_equal(result, expected)
  239: 
  240:     def test_series_from_coo_incorrect_format_raises(self):
  241:         # gh-26554
  242:         sp_sparse = pytest.importorskip("scipy.sparse")
  243: 
  244:         m = sp_sparse.csr_matrix(np.array([[0, 1], [0, 0]]))
  245:         with pytest.raises(
  246:             TypeError, match="Expected coo_matrix. Got csr_matrix instead."
  247:         ):
  248:             pd.Series.sparse.from_coo(m)
  249: 
  250:     def test_with_column_named_sparse(self):
  251:         # https://github.com/pandas-dev/pandas/issues/30758
  252:         df = pd.DataFrame({"sparse": pd.arrays.SparseArray([1, 2])})
  253:         assert isinstance(df.sparse, pd.core.arrays.sparse.accessor.SparseFrameAccessor)
