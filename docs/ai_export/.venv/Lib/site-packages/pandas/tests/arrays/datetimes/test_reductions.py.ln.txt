    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.dtypes import DatetimeTZDtype
    5: 
    6: import pandas as pd
    7: from pandas import NaT
    8: import pandas._testing as tm
    9: from pandas.core.arrays import DatetimeArray
   10: 
   11: 
   12: class TestReductions:
   13:     @pytest.fixture(params=["s", "ms", "us", "ns"])
   14:     def unit(self, request):
   15:         return request.param
   16: 
   17:     @pytest.fixture
   18:     def arr1d(self, tz_naive_fixture):
   19:         """Fixture returning DatetimeArray with parametrized timezones"""
   20:         tz = tz_naive_fixture
   21:         dtype = DatetimeTZDtype(tz=tz) if tz is not None else np.dtype("M8[ns]")
   22:         arr = DatetimeArray._from_sequence(
   23:             [
   24:                 "2000-01-03",
   25:                 "2000-01-03",
   26:                 "NaT",
   27:                 "2000-01-02",
   28:                 "2000-01-05",
   29:                 "2000-01-04",
   30:             ],
   31:             dtype=dtype,
   32:         )
   33:         return arr
   34: 
   35:     def test_min_max(self, arr1d, unit):
   36:         arr = arr1d
   37:         arr = arr.as_unit(unit)
   38:         tz = arr.tz
   39: 
   40:         result = arr.min()
   41:         expected = pd.Timestamp("2000-01-02", tz=tz).as_unit(unit)
   42:         assert result == expected
   43:         assert result.unit == expected.unit
   44: 
   45:         result = arr.max()
   46:         expected = pd.Timestamp("2000-01-05", tz=tz).as_unit(unit)
   47:         assert result == expected
   48:         assert result.unit == expected.unit
   49: 
   50:         result = arr.min(skipna=False)
   51:         assert result is NaT
   52: 
   53:         result = arr.max(skipna=False)
   54:         assert result is NaT
   55: 
   56:     @pytest.mark.parametrize("tz", [None, "US/Central"])
   57:     @pytest.mark.parametrize("skipna", [True, False])
   58:     def test_min_max_empty(self, skipna, tz):
   59:         dtype = DatetimeTZDtype(tz=tz) if tz is not None else np.dtype("M8[ns]")
   60:         arr = DatetimeArray._from_sequence([], dtype=dtype)
   61:         result = arr.min(skipna=skipna)
   62:         assert result is NaT
   63: 
   64:         result = arr.max(skipna=skipna)
   65:         assert result is NaT
   66: 
   67:     @pytest.mark.parametrize("tz", [None, "US/Central"])
   68:     @pytest.mark.parametrize("skipna", [True, False])
   69:     def test_median_empty(self, skipna, tz):
   70:         dtype = DatetimeTZDtype(tz=tz) if tz is not None else np.dtype("M8[ns]")
   71:         arr = DatetimeArray._from_sequence([], dtype=dtype)
   72:         result = arr.median(skipna=skipna)
   73:         assert result is NaT
   74: 
   75:         arr = arr.reshape(0, 3)
   76:         result = arr.median(axis=0, skipna=skipna)
   77:         expected = type(arr)._from_sequence([NaT, NaT, NaT], dtype=arr.dtype)
   78:         tm.assert_equal(result, expected)
   79: 
   80:         result = arr.median(axis=1, skipna=skipna)
   81:         expected = type(arr)._from_sequence([], dtype=arr.dtype)
   82:         tm.assert_equal(result, expected)
   83: 
   84:     def test_median(self, arr1d):
   85:         arr = arr1d
   86: 
   87:         result = arr.median()
   88:         assert result == arr[0]
   89:         result = arr.median(skipna=False)
   90:         assert result is NaT
   91: 
   92:         result = arr.dropna().median(skipna=False)
   93:         assert result == arr[0]
   94: 
   95:         result = arr.median(axis=0)
   96:         assert result == arr[0]
   97: 
   98:     def test_median_axis(self, arr1d):
   99:         arr = arr1d
  100:         assert arr.median(axis=0) == arr.median()
  101:         assert arr.median(axis=0, skipna=False) is NaT
  102: 
  103:         msg = r"abs\(axis\) must be less than ndim"
  104:         with pytest.raises(ValueError, match=msg):
  105:             arr.median(axis=1)
  106: 
  107:     @pytest.mark.filterwarnings("ignore:All-NaN slice encountered:RuntimeWarning")
  108:     def test_median_2d(self, arr1d):
  109:         arr = arr1d.reshape(1, -1)
  110: 
  111:         # axis = None
  112:         assert arr.median() == arr1d.median()
  113:         assert arr.median(skipna=False) is NaT
  114: 
  115:         # axis = 0
  116:         result = arr.median(axis=0)
  117:         expected = arr1d
  118:         tm.assert_equal(result, expected)
  119: 
  120:         # Since column 3 is all-NaT, we get NaT there with or without skipna
  121:         result = arr.median(axis=0, skipna=False)
  122:         expected = arr1d
  123:         tm.assert_equal(result, expected)
  124: 
  125:         # axis = 1
  126:         result = arr.median(axis=1)
  127:         expected = type(arr)._from_sequence([arr1d.median()], dtype=arr.dtype)
  128:         tm.assert_equal(result, expected)
  129: 
  130:         result = arr.median(axis=1, skipna=False)
  131:         expected = type(arr)._from_sequence([NaT], dtype=arr.dtype)
  132:         tm.assert_equal(result, expected)
  133: 
  134:     def test_mean(self, arr1d):
  135:         arr = arr1d
  136: 
  137:         # manually verified result
  138:         expected = arr[0] + 0.4 * pd.Timedelta(days=1)
  139: 
  140:         result = arr.mean()
  141:         assert result == expected
  142:         result = arr.mean(skipna=False)
  143:         assert result is NaT
  144: 
  145:         result = arr.dropna().mean(skipna=False)
  146:         assert result == expected
  147: 
  148:         result = arr.mean(axis=0)
  149:         assert result == expected
  150: 
  151:     def test_mean_2d(self):
  152:         dti = pd.date_range("2016-01-01", periods=6, tz="US/Pacific")
  153:         dta = dti._data.reshape(3, 2)
  154: 
  155:         result = dta.mean(axis=0)
  156:         expected = dta[1]
  157:         tm.assert_datetime_array_equal(result, expected)
  158: 
  159:         result = dta.mean(axis=1)
  160:         expected = dta[:, 0] + pd.Timedelta(hours=12)
  161:         tm.assert_datetime_array_equal(result, expected)
  162: 
  163:         result = dta.mean(axis=None)
  164:         expected = dti.mean()
  165:         assert result == expected
  166: 
  167:     @pytest.mark.parametrize("skipna", [True, False])
  168:     def test_mean_empty(self, arr1d, skipna):
  169:         arr = arr1d[:0]
  170: 
  171:         assert arr.mean(skipna=skipna) is NaT
  172: 
  173:         arr2d = arr.reshape(0, 3)
  174:         result = arr2d.mean(axis=0, skipna=skipna)
  175:         expected = DatetimeArray._from_sequence([NaT, NaT, NaT], dtype=arr.dtype)
  176:         tm.assert_datetime_array_equal(result, expected)
  177: 
  178:         result = arr2d.mean(axis=1, skipna=skipna)
  179:         expected = arr  # i.e. 1D, empty
  180:         tm.assert_datetime_array_equal(result, expected)
  181: 
  182:         result = arr2d.mean(axis=None, skipna=skipna)
  183:         assert result is NaT
