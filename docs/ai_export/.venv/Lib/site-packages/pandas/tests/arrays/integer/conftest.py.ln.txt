    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas.core.arrays.integer import (
    6:     Int8Dtype,
    7:     Int16Dtype,
    8:     Int32Dtype,
    9:     Int64Dtype,
   10:     UInt8Dtype,
   11:     UInt16Dtype,
   12:     UInt32Dtype,
   13:     UInt64Dtype,
   14: )
   15: 
   16: 
   17: @pytest.fixture(
   18:     params=[
   19:         Int8Dtype,
   20:         Int16Dtype,
   21:         Int32Dtype,
   22:         Int64Dtype,
   23:         UInt8Dtype,
   24:         UInt16Dtype,
   25:         UInt32Dtype,
   26:         UInt64Dtype,
   27:     ]
   28: )
   29: def dtype(request):
   30:     """Parametrized fixture returning integer 'dtype'"""
   31:     return request.param()
   32: 
   33: 
   34: @pytest.fixture
   35: def data(dtype):
   36:     """
   37:     Fixture returning 'data' array with valid and missing values according to
   38:     parametrized integer 'dtype'.
   39: 
   40:     Used to test dtype conversion with and without missing values.
   41:     """
   42:     return pd.array(
   43:         list(range(8)) + [np.nan] + list(range(10, 98)) + [np.nan] + [99, 100],
   44:         dtype=dtype,
   45:     )
   46: 
   47: 
   48: @pytest.fixture
   49: def data_missing(dtype):
   50:     """
   51:     Fixture returning array with exactly one NaN and one valid integer,
   52:     according to parametrized integer 'dtype'.
   53: 
   54:     Used to test dtype conversion with and without missing values.
   55:     """
   56:     return pd.array([np.nan, 1], dtype=dtype)
   57: 
   58: 
   59: @pytest.fixture(params=["data", "data_missing"])
   60: def all_data(request, data, data_missing):
   61:     """Parametrized fixture returning 'data' or 'data_missing' integer arrays.
   62: 
   63:     Used to test dtype conversion with and without missing values.
   64:     """
   65:     if request.param == "data":
   66:         return data
   67:     elif request.param == "data_missing":
   68:         return data_missing
