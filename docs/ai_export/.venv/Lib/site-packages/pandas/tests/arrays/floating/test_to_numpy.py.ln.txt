    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.core.arrays import FloatingArray
    7: 
    8: 
    9: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
   10: def test_to_numpy(box):
   11:     con = pd.Series if box else pd.array
   12: 
   13:     # default (with or without missing values) -> object dtype
   14:     arr = con([0.1, 0.2, 0.3], dtype="Float64")
   15:     result = arr.to_numpy()
   16:     expected = np.array([0.1, 0.2, 0.3], dtype="float64")
   17:     tm.assert_numpy_array_equal(result, expected)
   18: 
   19:     arr = con([0.1, 0.2, None], dtype="Float64")
   20:     result = arr.to_numpy()
   21:     expected = np.array([0.1, 0.2, np.nan], dtype="float64")
   22:     tm.assert_numpy_array_equal(result, expected)
   23: 
   24: 
   25: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
   26: def test_to_numpy_float(box):
   27:     con = pd.Series if box else pd.array
   28: 
   29:     # no missing values -> can convert to float, otherwise raises
   30:     arr = con([0.1, 0.2, 0.3], dtype="Float64")
   31:     result = arr.to_numpy(dtype="float64")
   32:     expected = np.array([0.1, 0.2, 0.3], dtype="float64")
   33:     tm.assert_numpy_array_equal(result, expected)
   34: 
   35:     arr = con([0.1, 0.2, None], dtype="Float64")
   36:     result = arr.to_numpy(dtype="float64")
   37:     expected = np.array([0.1, 0.2, np.nan], dtype="float64")
   38:     tm.assert_numpy_array_equal(result, expected)
   39: 
   40:     result = arr.to_numpy(dtype="float64", na_value=np.nan)
   41:     expected = np.array([0.1, 0.2, np.nan], dtype="float64")
   42:     tm.assert_numpy_array_equal(result, expected)
   43: 
   44: 
   45: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
   46: def test_to_numpy_int(box):
   47:     con = pd.Series if box else pd.array
   48: 
   49:     # no missing values -> can convert to int, otherwise raises
   50:     arr = con([1.0, 2.0, 3.0], dtype="Float64")
   51:     result = arr.to_numpy(dtype="int64")
   52:     expected = np.array([1, 2, 3], dtype="int64")
   53:     tm.assert_numpy_array_equal(result, expected)
   54: 
   55:     arr = con([1.0, 2.0, None], dtype="Float64")
   56:     with pytest.raises(ValueError, match="cannot convert to 'int64'-dtype"):
   57:         result = arr.to_numpy(dtype="int64")
   58: 
   59:     # automatic casting (floors the values)
   60:     arr = con([0.1, 0.9, 1.1], dtype="Float64")
   61:     result = arr.to_numpy(dtype="int64")
   62:     expected = np.array([0, 0, 1], dtype="int64")
   63:     tm.assert_numpy_array_equal(result, expected)
   64: 
   65: 
   66: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
   67: def test_to_numpy_na_value(box):
   68:     con = pd.Series if box else pd.array
   69: 
   70:     arr = con([0.0, 1.0, None], dtype="Float64")
   71:     result = arr.to_numpy(dtype=object, na_value=None)
   72:     expected = np.array([0.0, 1.0, None], dtype="object")
   73:     tm.assert_numpy_array_equal(result, expected)
   74: 
   75:     result = arr.to_numpy(dtype=bool, na_value=False)
   76:     expected = np.array([False, True, False], dtype="bool")
   77:     tm.assert_numpy_array_equal(result, expected)
   78: 
   79:     result = arr.to_numpy(dtype="int64", na_value=-99)
   80:     expected = np.array([0, 1, -99], dtype="int64")
   81:     tm.assert_numpy_array_equal(result, expected)
   82: 
   83: 
   84: def test_to_numpy_na_value_with_nan():
   85:     # array with both NaN and NA -> only fill NA with `na_value`
   86:     arr = FloatingArray(np.array([0.0, np.nan, 0.0]), np.array([False, False, True]))
   87:     result = arr.to_numpy(dtype="float64", na_value=-1)
   88:     expected = np.array([0.0, np.nan, -1.0], dtype="float64")
   89:     tm.assert_numpy_array_equal(result, expected)
   90: 
   91: 
   92: @pytest.mark.parametrize("dtype", ["float64", "float32", "int32", "int64", "bool"])
   93: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
   94: def test_to_numpy_dtype(box, dtype):
   95:     con = pd.Series if box else pd.array
   96:     arr = con([0.0, 1.0], dtype="Float64")
   97: 
   98:     result = arr.to_numpy(dtype=dtype)
   99:     expected = np.array([0, 1], dtype=dtype)
  100:     tm.assert_numpy_array_equal(result, expected)
  101: 
  102: 
  103: @pytest.mark.parametrize("dtype", ["int32", "int64", "bool"])
  104: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
  105: def test_to_numpy_na_raises(box, dtype):
  106:     con = pd.Series if box else pd.array
  107:     arr = con([0.0, 1.0, None], dtype="Float64")
  108:     with pytest.raises(ValueError, match=dtype):
  109:         arr.to_numpy(dtype=dtype)
  110: 
  111: 
  112: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
  113: def test_to_numpy_string(box, dtype):
  114:     con = pd.Series if box else pd.array
  115:     arr = con([0.0, 1.0, None], dtype="Float64")
  116: 
  117:     result = arr.to_numpy(dtype="str")
  118:     expected = np.array([0.0, 1.0, pd.NA], dtype=f"{tm.ENDIAN}U32")
  119:     tm.assert_numpy_array_equal(result, expected)
  120: 
  121: 
  122: def test_to_numpy_copy():
  123:     # to_numpy can be zero-copy if no missing values
  124:     arr = pd.array([0.1, 0.2, 0.3], dtype="Float64")
  125:     result = arr.to_numpy(dtype="float64")
  126:     result[0] = 10
  127:     tm.assert_extension_array_equal(arr, pd.array([10, 0.2, 0.3], dtype="Float64"))
  128: 
  129:     arr = pd.array([0.1, 0.2, 0.3], dtype="Float64")
  130:     result = arr.to_numpy(dtype="float64", copy=True)
  131:     result[0] = 10
  132:     tm.assert_extension_array_equal(arr, pd.array([0.1, 0.2, 0.3], dtype="Float64"))
