    1: import operator
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: 
    9: 
   10: @pytest.fixture
   11: def data():
   12:     """Fixture returning boolean array with valid and missing values."""
   13:     return pd.array(
   14:         [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
   15:         dtype="boolean",
   16:     )
   17: 
   18: 
   19: @pytest.fixture
   20: def left_array():
   21:     """Fixture returning boolean array with valid and missing values."""
   22:     return pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
   23: 
   24: 
   25: @pytest.fixture
   26: def right_array():
   27:     """Fixture returning boolean array with valid and missing values."""
   28:     return pd.array([True, False, None] * 3, dtype="boolean")
   29: 
   30: 
   31: # Basic test for the arithmetic array ops
   32: # -----------------------------------------------------------------------------
   33: 
   34: 
   35: @pytest.mark.parametrize(
   36:     "opname, exp",
   37:     [
   38:         ("add", [True, True, None, True, False, None, None, None, None]),
   39:         ("mul", [True, False, None, False, False, None, None, None, None]),
   40:     ],
   41:     ids=["add", "mul"],
   42: )
   43: def test_add_mul(left_array, right_array, opname, exp):
   44:     op = getattr(operator, opname)
   45:     result = op(left_array, right_array)
   46:     expected = pd.array(exp, dtype="boolean")
   47:     tm.assert_extension_array_equal(result, expected)
   48: 
   49: 
   50: def test_sub(left_array, right_array):
   51:     msg = (
   52:         r"numpy boolean subtract, the `-` operator, is (?:deprecated|not supported), "
   53:         r"use the bitwise_xor, the `\^` operator, or the logical_xor function instead\."
   54:     )
   55:     with pytest.raises(TypeError, match=msg):
   56:         left_array - right_array
   57: 
   58: 
   59: def test_div(left_array, right_array):
   60:     msg = "operator '.*' not implemented for bool dtypes"
   61:     with pytest.raises(NotImplementedError, match=msg):
   62:         # check that we are matching the non-masked Series behavior
   63:         pd.Series(left_array._data) / pd.Series(right_array._data)
   64: 
   65:     with pytest.raises(NotImplementedError, match=msg):
   66:         left_array / right_array
   67: 
   68: 
   69: @pytest.mark.parametrize(
   70:     "opname",
   71:     [
   72:         "floordiv",
   73:         "mod",
   74:         "pow",
   75:     ],
   76: )
   77: def test_op_int8(left_array, right_array, opname):
   78:     op = getattr(operator, opname)
   79:     if opname != "mod":
   80:         msg = "operator '.*' not implemented for bool dtypes"
   81:         with pytest.raises(NotImplementedError, match=msg):
   82:             result = op(left_array, right_array)
   83:         return
   84:     result = op(left_array, right_array)
   85:     expected = op(left_array.astype("Int8"), right_array.astype("Int8"))
   86:     tm.assert_extension_array_equal(result, expected)
   87: 
   88: 
   89: # Test generic characteristics / errors
   90: # -----------------------------------------------------------------------------
   91: 
   92: 
   93: def test_error_invalid_values(data, all_arithmetic_operators, using_infer_string):
   94:     # invalid ops
   95: 
   96:     if using_infer_string:
   97:         import pyarrow as pa
   98: 
   99:         err = (TypeError, pa.lib.ArrowNotImplementedError, NotImplementedError)
  100:     else:
  101:         err = TypeError
  102: 
  103:     op = all_arithmetic_operators
  104:     s = pd.Series(data)
  105:     ops = getattr(s, op)
  106: 
  107:     # invalid scalars
  108:     msg = (
  109:         "did not contain a loop with signature matching types|"
  110:         "BooleanArray cannot perform the operation|"
  111:         "not supported for the input types, and the inputs could not be safely coerced "
  112:         "to any supported types according to the casting rule ''safe''"
  113:     )
  114:     with pytest.raises(TypeError, match=msg):
  115:         ops("foo")
  116:     msg = "|".join(
  117:         [
  118:             r"unsupported operand type\(s\) for",
  119:             "Concatenation operation is not implemented for NumPy arrays",
  120:             "has no kernel",
  121:         ]
  122:     )
  123:     with pytest.raises(err, match=msg):
  124:         ops(pd.Timestamp("20180101"))
  125: 
  126:     # invalid array-likes
  127:     if op not in ("__mul__", "__rmul__"):
  128:         # TODO(extension) numpy's mul with object array sees booleans as numbers
  129:         msg = "|".join(
  130:             [
  131:                 r"unsupported operand type\(s\) for",
  132:                 "can only concatenate str",
  133:                 "not all arguments converted during string formatting",
  134:                 "has no kernel",
  135:                 "not implemented",
  136:             ]
  137:         )
  138:         with pytest.raises(err, match=msg):
  139:             ops(pd.Series("foo", index=s.index))
