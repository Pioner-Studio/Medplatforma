    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.arrays import BooleanArray
    7: from pandas.core.arrays.boolean import coerce_to_array
    8: 
    9: 
   10: def test_boolean_array_constructor():
   11:     values = np.array([True, False, True, False], dtype="bool")
   12:     mask = np.array([False, False, False, True], dtype="bool")
   13: 
   14:     result = BooleanArray(values, mask)
   15:     expected = pd.array([True, False, True, None], dtype="boolean")
   16:     tm.assert_extension_array_equal(result, expected)
   17: 
   18:     with pytest.raises(TypeError, match="values should be boolean numpy array"):
   19:         BooleanArray(values.tolist(), mask)
   20: 
   21:     with pytest.raises(TypeError, match="mask should be boolean numpy array"):
   22:         BooleanArray(values, mask.tolist())
   23: 
   24:     with pytest.raises(TypeError, match="values should be boolean numpy array"):
   25:         BooleanArray(values.astype(int), mask)
   26: 
   27:     with pytest.raises(TypeError, match="mask should be boolean numpy array"):
   28:         BooleanArray(values, None)
   29: 
   30:     with pytest.raises(ValueError, match="values.shape must match mask.shape"):
   31:         BooleanArray(values.reshape(1, -1), mask)
   32: 
   33:     with pytest.raises(ValueError, match="values.shape must match mask.shape"):
   34:         BooleanArray(values, mask.reshape(1, -1))
   35: 
   36: 
   37: def test_boolean_array_constructor_copy():
   38:     values = np.array([True, False, True, False], dtype="bool")
   39:     mask = np.array([False, False, False, True], dtype="bool")
   40: 
   41:     result = BooleanArray(values, mask)
   42:     assert result._data is values
   43:     assert result._mask is mask
   44: 
   45:     result = BooleanArray(values, mask, copy=True)
   46:     assert result._data is not values
   47:     assert result._mask is not mask
   48: 
   49: 
   50: def test_to_boolean_array():
   51:     expected = BooleanArray(
   52:         np.array([True, False, True]), np.array([False, False, False])
   53:     )
   54: 
   55:     result = pd.array([True, False, True], dtype="boolean")
   56:     tm.assert_extension_array_equal(result, expected)
   57:     result = pd.array(np.array([True, False, True]), dtype="boolean")
   58:     tm.assert_extension_array_equal(result, expected)
   59:     result = pd.array(np.array([True, False, True], dtype=object), dtype="boolean")
   60:     tm.assert_extension_array_equal(result, expected)
   61: 
   62:     # with missing values
   63:     expected = BooleanArray(
   64:         np.array([True, False, True]), np.array([False, False, True])
   65:     )
   66: 
   67:     result = pd.array([True, False, None], dtype="boolean")
   68:     tm.assert_extension_array_equal(result, expected)
   69:     result = pd.array(np.array([True, False, None], dtype=object), dtype="boolean")
   70:     tm.assert_extension_array_equal(result, expected)
   71: 
   72: 
   73: def test_to_boolean_array_all_none():
   74:     expected = BooleanArray(np.array([True, True, True]), np.array([True, True, True]))
   75: 
   76:     result = pd.array([None, None, None], dtype="boolean")
   77:     tm.assert_extension_array_equal(result, expected)
   78:     result = pd.array(np.array([None, None, None], dtype=object), dtype="boolean")
   79:     tm.assert_extension_array_equal(result, expected)
   80: 
   81: 
   82: @pytest.mark.parametrize(
   83:     "a, b",
   84:     [
   85:         ([True, False, None, np.nan, pd.NA], [True, False, None, None, None]),
   86:         ([True, np.nan], [True, None]),
   87:         ([True, pd.NA], [True, None]),
   88:         ([np.nan, np.nan], [None, None]),
   89:         (np.array([np.nan, np.nan], dtype=float), [None, None]),
   90:     ],
   91: )
   92: def test_to_boolean_array_missing_indicators(a, b):
   93:     result = pd.array(a, dtype="boolean")
   94:     expected = pd.array(b, dtype="boolean")
   95:     tm.assert_extension_array_equal(result, expected)
   96: 
   97: 
   98: @pytest.mark.parametrize(
   99:     "values",
  100:     [
  101:         ["foo", "bar"],
  102:         ["1", "2"],
  103:         # "foo",
  104:         [1, 2],
  105:         [1.0, 2.0],
  106:         pd.date_range("20130101", periods=2),
  107:         np.array(["foo"]),
  108:         np.array([1, 2]),
  109:         np.array([1.0, 2.0]),
  110:         [np.nan, {"a": 1}],
  111:     ],
  112: )
  113: def test_to_boolean_array_error(values):
  114:     # error in converting existing arrays to BooleanArray
  115:     msg = "Need to pass bool-like value"
  116:     with pytest.raises(TypeError, match=msg):
  117:         pd.array(values, dtype="boolean")
  118: 
  119: 
  120: def test_to_boolean_array_from_integer_array():
  121:     result = pd.array(np.array([1, 0, 1, 0]), dtype="boolean")
  122:     expected = pd.array([True, False, True, False], dtype="boolean")
  123:     tm.assert_extension_array_equal(result, expected)
  124: 
  125:     # with missing values
  126:     result = pd.array(np.array([1, 0, 1, None]), dtype="boolean")
  127:     expected = pd.array([True, False, True, None], dtype="boolean")
  128:     tm.assert_extension_array_equal(result, expected)
  129: 
  130: 
  131: def test_to_boolean_array_from_float_array():
  132:     result = pd.array(np.array([1.0, 0.0, 1.0, 0.0]), dtype="boolean")
  133:     expected = pd.array([True, False, True, False], dtype="boolean")
  134:     tm.assert_extension_array_equal(result, expected)
  135: 
  136:     # with missing values
  137:     result = pd.array(np.array([1.0, 0.0, 1.0, np.nan]), dtype="boolean")
  138:     expected = pd.array([True, False, True, None], dtype="boolean")
  139:     tm.assert_extension_array_equal(result, expected)
  140: 
  141: 
  142: def test_to_boolean_array_integer_like():
  143:     # integers of 0's and 1's
  144:     result = pd.array([1, 0, 1, 0], dtype="boolean")
  145:     expected = pd.array([True, False, True, False], dtype="boolean")
  146:     tm.assert_extension_array_equal(result, expected)
  147: 
  148:     # with missing values
  149:     result = pd.array([1, 0, 1, None], dtype="boolean")
  150:     expected = pd.array([True, False, True, None], dtype="boolean")
  151:     tm.assert_extension_array_equal(result, expected)
  152: 
  153: 
  154: def test_coerce_to_array():
  155:     # TODO this is currently not public API
  156:     values = np.array([True, False, True, False], dtype="bool")
  157:     mask = np.array([False, False, False, True], dtype="bool")
  158:     result = BooleanArray(*coerce_to_array(values, mask=mask))
  159:     expected = BooleanArray(values, mask)
  160:     tm.assert_extension_array_equal(result, expected)
  161:     assert result._data is values
  162:     assert result._mask is mask
  163:     result = BooleanArray(*coerce_to_array(values, mask=mask, copy=True))
  164:     expected = BooleanArray(values, mask)
  165:     tm.assert_extension_array_equal(result, expected)
  166:     assert result._data is not values
  167:     assert result._mask is not mask
  168: 
  169:     # mixed missing from values and mask
  170:     values = [True, False, None, False]
  171:     mask = np.array([False, False, False, True], dtype="bool")
  172:     result = BooleanArray(*coerce_to_array(values, mask=mask))
  173:     expected = BooleanArray(
  174:         np.array([True, False, True, True]), np.array([False, False, True, True])
  175:     )
  176:     tm.assert_extension_array_equal(result, expected)
  177:     result = BooleanArray(*coerce_to_array(np.array(values, dtype=object), mask=mask))
  178:     tm.assert_extension_array_equal(result, expected)
  179:     result = BooleanArray(*coerce_to_array(values, mask=mask.tolist()))
  180:     tm.assert_extension_array_equal(result, expected)
  181: 
  182:     # raise errors for wrong dimension
  183:     values = np.array([True, False, True, False], dtype="bool")
  184:     mask = np.array([False, False, False, True], dtype="bool")
  185: 
  186:     # passing 2D values is OK as long as no mask
  187:     coerce_to_array(values.reshape(1, -1))
  188: 
  189:     with pytest.raises(ValueError, match="values.shape and mask.shape must match"):
  190:         coerce_to_array(values.reshape(1, -1), mask=mask)
  191: 
  192:     with pytest.raises(ValueError, match="values.shape and mask.shape must match"):
  193:         coerce_to_array(values, mask=mask.reshape(1, -1))
  194: 
  195: 
  196: def test_coerce_to_array_from_boolean_array():
  197:     # passing BooleanArray to coerce_to_array
  198:     values = np.array([True, False, True, False], dtype="bool")
  199:     mask = np.array([False, False, False, True], dtype="bool")
  200:     arr = BooleanArray(values, mask)
  201:     result = BooleanArray(*coerce_to_array(arr))
  202:     tm.assert_extension_array_equal(result, arr)
  203:     # no copy
  204:     assert result._data is arr._data
  205:     assert result._mask is arr._mask
  206: 
  207:     result = BooleanArray(*coerce_to_array(arr), copy=True)
  208:     tm.assert_extension_array_equal(result, arr)
  209:     assert result._data is not arr._data
  210:     assert result._mask is not arr._mask
  211: 
  212:     with pytest.raises(ValueError, match="cannot pass mask for BooleanArray input"):
  213:         coerce_to_array(arr, mask=mask)
  214: 
  215: 
  216: def test_coerce_to_numpy_array():
  217:     # with missing values -> object dtype
  218:     arr = pd.array([True, False, None], dtype="boolean")
  219:     result = np.array(arr)
  220:     expected = np.array([True, False, pd.NA], dtype="object")
  221:     tm.assert_numpy_array_equal(result, expected)
  222: 
  223:     # also with no missing values -> object dtype
  224:     arr = pd.array([True, False, True], dtype="boolean")
  225:     result = np.array(arr)
  226:     expected = np.array([True, False, True], dtype="bool")
  227:     tm.assert_numpy_array_equal(result, expected)
  228: 
  229:     # force bool dtype
  230:     result = np.array(arr, dtype="bool")
  231:     expected = np.array([True, False, True], dtype="bool")
  232:     tm.assert_numpy_array_equal(result, expected)
  233:     # with missing values will raise error
  234:     arr = pd.array([True, False, None], dtype="boolean")
  235:     msg = (
  236:         "cannot convert to 'bool'-dtype NumPy array with missing values. "
  237:         "Specify an appropriate 'na_value' for this dtype."
  238:     )
  239:     with pytest.raises(ValueError, match=msg):
  240:         np.array(arr, dtype="bool")
  241: 
  242: 
  243: def test_to_boolean_array_from_strings():
  244:     result = BooleanArray._from_sequence_of_strings(
  245:         np.array(["True", "False", "1", "1.0", "0", "0.0", np.nan], dtype=object),
  246:         dtype="boolean",
  247:     )
  248:     expected = BooleanArray(
  249:         np.array([True, False, True, True, False, False, False]),
  250:         np.array([False, False, False, False, False, False, True]),
  251:     )
  252: 
  253:     tm.assert_extension_array_equal(result, expected)
  254: 
  255: 
  256: def test_to_boolean_array_from_strings_invalid_string():
  257:     with pytest.raises(ValueError, match="cannot be cast"):
  258:         BooleanArray._from_sequence_of_strings(["donkey"], dtype="boolean")
  259: 
  260: 
  261: @pytest.mark.parametrize("box", [True, False], ids=["series", "array"])
  262: def test_to_numpy(box):
  263:     con = pd.Series if box else pd.array
  264:     # default (with or without missing values) -> object dtype
  265:     arr = con([True, False, True], dtype="boolean")
  266:     result = arr.to_numpy()
  267:     expected = np.array([True, False, True], dtype="bool")
  268:     tm.assert_numpy_array_equal(result, expected)
  269: 
  270:     arr = con([True, False, None], dtype="boolean")
  271:     result = arr.to_numpy()
  272:     expected = np.array([True, False, pd.NA], dtype="object")
  273:     tm.assert_numpy_array_equal(result, expected)
  274: 
  275:     arr = con([True, False, None], dtype="boolean")
  276:     result = arr.to_numpy(dtype="str")
  277:     expected = np.array([True, False, pd.NA], dtype=f"{tm.ENDIAN}U5")
  278:     tm.assert_numpy_array_equal(result, expected)
  279: 
  280:     # no missing values -> can convert to bool, otherwise raises
  281:     arr = con([True, False, True], dtype="boolean")
  282:     result = arr.to_numpy(dtype="bool")
  283:     expected = np.array([True, False, True], dtype="bool")
  284:     tm.assert_numpy_array_equal(result, expected)
  285: 
  286:     arr = con([True, False, None], dtype="boolean")
  287:     with pytest.raises(ValueError, match="cannot convert to 'bool'-dtype"):
  288:         result = arr.to_numpy(dtype="bool")
  289: 
  290:     # specify dtype and na_value
  291:     arr = con([True, False, None], dtype="boolean")
  292:     result = arr.to_numpy(dtype=object, na_value=None)
  293:     expected = np.array([True, False, None], dtype="object")
  294:     tm.assert_numpy_array_equal(result, expected)
  295: 
  296:     result = arr.to_numpy(dtype=bool, na_value=False)
  297:     expected = np.array([True, False, False], dtype="bool")
  298:     tm.assert_numpy_array_equal(result, expected)
  299: 
  300:     result = arr.to_numpy(dtype="int64", na_value=-99)
  301:     expected = np.array([1, 0, -99], dtype="int64")
  302:     tm.assert_numpy_array_equal(result, expected)
  303: 
  304:     result = arr.to_numpy(dtype="float64", na_value=np.nan)
  305:     expected = np.array([1, 0, np.nan], dtype="float64")
  306:     tm.assert_numpy_array_equal(result, expected)
  307: 
  308:     # converting to int or float without specifying na_value raises
  309:     with pytest.raises(ValueError, match="cannot convert to 'int64'-dtype"):
  310:         arr.to_numpy(dtype="int64")
  311: 
  312: 
  313: def test_to_numpy_copy():
  314:     # to_numpy can be zero-copy if no missing values
  315:     arr = pd.array([True, False, True], dtype="boolean")
  316:     result = arr.to_numpy(dtype=bool)
  317:     result[0] = False
  318:     tm.assert_extension_array_equal(
  319:         arr, pd.array([False, False, True], dtype="boolean")
  320:     )
  321: 
  322:     arr = pd.array([True, False, True], dtype="boolean")
  323:     result = arr.to_numpy(dtype=bool, copy=True)
  324:     result[0] = False
  325:     tm.assert_extension_array_equal(arr, pd.array([True, False, True], dtype="boolean"))
