    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.generic import ABCIndex
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core.arrays.integer import (
    9:     Int8Dtype,
   10:     UInt32Dtype,
   11: )
   12: 
   13: 
   14: def test_dtypes(dtype):
   15:     # smoke tests on auto dtype construction
   16: 
   17:     if dtype.is_signed_integer:
   18:         assert np.dtype(dtype.type).kind == "i"
   19:     else:
   20:         assert np.dtype(dtype.type).kind == "u"
   21:     assert dtype.name is not None
   22: 
   23: 
   24: @pytest.mark.parametrize("op", ["sum", "min", "max", "prod"])
   25: def test_preserve_dtypes(op):
   26:     # for ops that enable (mean would actually work here
   27:     # but generally it is a float return value)
   28:     df = pd.DataFrame(
   29:         {
   30:             "A": ["a", "b", "b"],
   31:             "B": [1, None, 3],
   32:             "C": pd.array([1, None, 3], dtype="Int64"),
   33:         }
   34:     )
   35: 
   36:     # op
   37:     result = getattr(df.C, op)()
   38:     if op in {"sum", "prod", "min", "max"}:
   39:         assert isinstance(result, np.int64)
   40:     else:
   41:         assert isinstance(result, int)
   42: 
   43:     # groupby
   44:     result = getattr(df.groupby("A"), op)()
   45: 
   46:     expected = pd.DataFrame(
   47:         {"B": np.array([1.0, 3.0]), "C": pd.array([1, 3], dtype="Int64")},
   48:         index=pd.Index(["a", "b"], name="A"),
   49:     )
   50:     tm.assert_frame_equal(result, expected)
   51: 
   52: 
   53: def test_astype_nansafe():
   54:     # see gh-22343
   55:     arr = pd.array([np.nan, 1, 2], dtype="Int8")
   56:     msg = "cannot convert NA to integer"
   57: 
   58:     with pytest.raises(ValueError, match=msg):
   59:         arr.astype("uint32")
   60: 
   61: 
   62: @pytest.mark.parametrize("dropna", [True, False])
   63: def test_construct_index(all_data, dropna):
   64:     # ensure that we do not coerce to different Index dtype or non-index
   65: 
   66:     all_data = all_data[:10]
   67:     if dropna:
   68:         other = np.array(all_data[~all_data.isna()])
   69:     else:
   70:         other = all_data
   71: 
   72:     result = pd.Index(pd.array(other, dtype=all_data.dtype))
   73:     expected = pd.Index(other, dtype=all_data.dtype)
   74:     assert all_data.dtype == expected.dtype  # dont coerce to object
   75: 
   76:     tm.assert_index_equal(result, expected)
   77: 
   78: 
   79: @pytest.mark.parametrize("dropna", [True, False])
   80: def test_astype_index(all_data, dropna):
   81:     # as an int/uint index to Index
   82: 
   83:     all_data = all_data[:10]
   84:     if dropna:
   85:         other = all_data[~all_data.isna()]
   86:     else:
   87:         other = all_data
   88: 
   89:     dtype = all_data.dtype
   90:     idx = pd.Index(np.array(other))
   91:     assert isinstance(idx, ABCIndex)
   92: 
   93:     result = idx.astype(dtype)
   94:     expected = idx.astype(object).astype(dtype)
   95:     tm.assert_index_equal(result, expected)
   96: 
   97: 
   98: def test_astype(all_data):
   99:     all_data = all_data[:10]
  100: 
  101:     ints = all_data[~all_data.isna()]
  102:     mixed = all_data
  103:     dtype = Int8Dtype()
  104: 
  105:     # coerce to same type - ints
  106:     s = pd.Series(ints)
  107:     result = s.astype(all_data.dtype)
  108:     expected = pd.Series(ints)
  109:     tm.assert_series_equal(result, expected)
  110: 
  111:     # coerce to same other - ints
  112:     s = pd.Series(ints)
  113:     result = s.astype(dtype)
  114:     expected = pd.Series(ints, dtype=dtype)
  115:     tm.assert_series_equal(result, expected)
  116: 
  117:     # coerce to same numpy_dtype - ints
  118:     s = pd.Series(ints)
  119:     result = s.astype(all_data.dtype.numpy_dtype)
  120:     expected = pd.Series(ints._data.astype(all_data.dtype.numpy_dtype))
  121:     tm.assert_series_equal(result, expected)
  122: 
  123:     # coerce to same type - mixed
  124:     s = pd.Series(mixed)
  125:     result = s.astype(all_data.dtype)
  126:     expected = pd.Series(mixed)
  127:     tm.assert_series_equal(result, expected)
  128: 
  129:     # coerce to same other - mixed
  130:     s = pd.Series(mixed)
  131:     result = s.astype(dtype)
  132:     expected = pd.Series(mixed, dtype=dtype)
  133:     tm.assert_series_equal(result, expected)
  134: 
  135:     # coerce to same numpy_dtype - mixed
  136:     s = pd.Series(mixed)
  137:     msg = "cannot convert NA to integer"
  138:     with pytest.raises(ValueError, match=msg):
  139:         s.astype(all_data.dtype.numpy_dtype)
  140: 
  141:     # coerce to object
  142:     s = pd.Series(mixed)
  143:     result = s.astype("object")
  144:     expected = pd.Series(np.asarray(mixed, dtype=object))
  145:     tm.assert_series_equal(result, expected)
  146: 
  147: 
  148: def test_astype_copy():
  149:     arr = pd.array([1, 2, 3, None], dtype="Int64")
  150:     orig = pd.array([1, 2, 3, None], dtype="Int64")
  151: 
  152:     # copy=True -> ensure both data and mask are actual copies
  153:     result = arr.astype("Int64", copy=True)
  154:     assert result is not arr
  155:     assert not tm.shares_memory(result, arr)
  156:     result[0] = 10
  157:     tm.assert_extension_array_equal(arr, orig)
  158:     result[0] = pd.NA
  159:     tm.assert_extension_array_equal(arr, orig)
  160: 
  161:     # copy=False
  162:     result = arr.astype("Int64", copy=False)
  163:     assert result is arr
  164:     assert np.shares_memory(result._data, arr._data)
  165:     assert np.shares_memory(result._mask, arr._mask)
  166:     result[0] = 10
  167:     assert arr[0] == 10
  168:     result[0] = pd.NA
  169:     assert arr[0] is pd.NA
  170: 
  171:     # astype to different dtype -> always needs a copy -> even with copy=False
  172:     # we need to ensure that also the mask is actually copied
  173:     arr = pd.array([1, 2, 3, None], dtype="Int64")
  174:     orig = pd.array([1, 2, 3, None], dtype="Int64")
  175: 
  176:     result = arr.astype("Int32", copy=False)
  177:     assert not tm.shares_memory(result, arr)
  178:     result[0] = 10
  179:     tm.assert_extension_array_equal(arr, orig)
  180:     result[0] = pd.NA
  181:     tm.assert_extension_array_equal(arr, orig)
  182: 
  183: 
  184: def test_astype_to_larger_numpy():
  185:     a = pd.array([1, 2], dtype="Int32")
  186:     result = a.astype("int64")
  187:     expected = np.array([1, 2], dtype="int64")
  188:     tm.assert_numpy_array_equal(result, expected)
  189: 
  190:     a = pd.array([1, 2], dtype="UInt32")
  191:     result = a.astype("uint64")
  192:     expected = np.array([1, 2], dtype="uint64")
  193:     tm.assert_numpy_array_equal(result, expected)
  194: 
  195: 
  196: @pytest.mark.parametrize("dtype", [Int8Dtype(), "Int8", UInt32Dtype(), "UInt32"])
  197: def test_astype_specific_casting(dtype):
  198:     s = pd.Series([1, 2, 3], dtype="Int64")
  199:     result = s.astype(dtype)
  200:     expected = pd.Series([1, 2, 3], dtype=dtype)
  201:     tm.assert_series_equal(result, expected)
  202: 
  203:     s = pd.Series([1, 2, 3, None], dtype="Int64")
  204:     result = s.astype(dtype)
  205:     expected = pd.Series([1, 2, 3, None], dtype=dtype)
  206:     tm.assert_series_equal(result, expected)
  207: 
  208: 
  209: def test_astype_floating():
  210:     arr = pd.array([1, 2, None], dtype="Int64")
  211:     result = arr.astype("Float64")
  212:     expected = pd.array([1.0, 2.0, None], dtype="Float64")
  213:     tm.assert_extension_array_equal(result, expected)
  214: 
  215: 
  216: def test_astype_dt64():
  217:     # GH#32435
  218:     arr = pd.array([1, 2, 3, pd.NA]) * 10**9
  219: 
  220:     result = arr.astype("datetime64[ns]")
  221: 
  222:     expected = np.array([1, 2, 3, "NaT"], dtype="M8[s]").astype("M8[ns]")
  223:     tm.assert_numpy_array_equal(result, expected)
  224: 
  225: 
  226: def test_construct_cast_invalid(dtype):
  227:     msg = "cannot safely"
  228:     arr = [1.2, 2.3, 3.7]
  229:     with pytest.raises(TypeError, match=msg):
  230:         pd.array(arr, dtype=dtype)
  231: 
  232:     with pytest.raises(TypeError, match=msg):
  233:         pd.Series(arr).astype(dtype)
  234: 
  235:     arr = [1.2, 2.3, 3.7, np.nan]
  236:     with pytest.raises(TypeError, match=msg):
  237:         pd.array(arr, dtype=dtype)
  238: 
  239:     with pytest.raises(TypeError, match=msg):
  240:         pd.Series(arr).astype(dtype)
  241: 
  242: 
  243: @pytest.mark.parametrize("in_series", [True, False])
  244: def test_to_numpy_na_nan(in_series):
  245:     a = pd.array([0, 1, None], dtype="Int64")
  246:     if in_series:
  247:         a = pd.Series(a)
  248: 
  249:     result = a.to_numpy(dtype="float64", na_value=np.nan)
  250:     expected = np.array([0.0, 1.0, np.nan], dtype="float64")
  251:     tm.assert_numpy_array_equal(result, expected)
  252: 
  253:     result = a.to_numpy(dtype="int64", na_value=-1)
  254:     expected = np.array([0, 1, -1], dtype="int64")
  255:     tm.assert_numpy_array_equal(result, expected)
  256: 
  257:     result = a.to_numpy(dtype="bool", na_value=False)
  258:     expected = np.array([False, True, False], dtype="bool")
  259:     tm.assert_numpy_array_equal(result, expected)
  260: 
  261: 
  262: @pytest.mark.parametrize("in_series", [True, False])
  263: @pytest.mark.parametrize("dtype", ["int32", "int64", "bool"])
  264: def test_to_numpy_dtype(dtype, in_series):
  265:     a = pd.array([0, 1], dtype="Int64")
  266:     if in_series:
  267:         a = pd.Series(a)
  268: 
  269:     result = a.to_numpy(dtype=dtype)
  270:     expected = np.array([0, 1], dtype=dtype)
  271:     tm.assert_numpy_array_equal(result, expected)
  272: 
  273: 
  274: @pytest.mark.parametrize("dtype", ["int64", "bool"])
  275: def test_to_numpy_na_raises(dtype):
  276:     a = pd.array([0, 1, None], dtype="Int64")
  277:     with pytest.raises(ValueError, match=dtype):
  278:         a.to_numpy(dtype=dtype)
  279: 
  280: 
  281: def test_astype_str():
  282:     a = pd.array([1, 2, None], dtype="Int64")
  283:     expected = np.array(["1", "2", "<NA>"], dtype=f"{tm.ENDIAN}U21")
  284: 
  285:     tm.assert_numpy_array_equal(a.astype(str), expected)
  286:     tm.assert_numpy_array_equal(a.astype("str"), expected)
  287: 
  288: 
  289: def test_astype_boolean():
  290:     # https://github.com/pandas-dev/pandas/issues/31102
  291:     a = pd.array([1, 0, -1, 2, None], dtype="Int64")
  292:     result = a.astype("boolean")
  293:     expected = pd.array([True, False, True, True, None], dtype="boolean")
  294:     tm.assert_extension_array_equal(result, expected)
