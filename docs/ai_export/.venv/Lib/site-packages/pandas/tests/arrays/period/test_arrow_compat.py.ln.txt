    1: import pytest
    2: 
    3: from pandas.compat.pyarrow import pa_version_under10p1
    4: 
    5: from pandas.core.dtypes.dtypes import PeriodDtype
    6: 
    7: import pandas as pd
    8: import pandas._testing as tm
    9: from pandas.core.arrays import (
   10:     PeriodArray,
   11:     period_array,
   12: )
   13: 
   14: pytestmark = pytest.mark.filterwarnings(
   15:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   16: )
   17: 
   18: 
   19: pa = pytest.importorskip("pyarrow")
   20: 
   21: 
   22: def test_arrow_extension_type():
   23:     from pandas.core.arrays.arrow.extension_types import ArrowPeriodType
   24: 
   25:     p1 = ArrowPeriodType("D")
   26:     p2 = ArrowPeriodType("D")
   27:     p3 = ArrowPeriodType("M")
   28: 
   29:     assert p1.freq == "D"
   30:     assert p1 == p2
   31:     assert p1 != p3
   32:     assert hash(p1) == hash(p2)
   33:     assert hash(p1) != hash(p3)
   34: 
   35: 
   36: @pytest.mark.xfail(not pa_version_under10p1, reason="Wrong behavior with pyarrow 10")
   37: @pytest.mark.parametrize(
   38:     "data, freq",
   39:     [
   40:         (pd.date_range("2017", periods=3), "D"),
   41:         (pd.date_range("2017", periods=3, freq="YE"), "Y-DEC"),
   42:     ],
   43: )
   44: def test_arrow_array(data, freq):
   45:     from pandas.core.arrays.arrow.extension_types import ArrowPeriodType
   46: 
   47:     periods = period_array(data, freq=freq)
   48:     result = pa.array(periods)
   49:     assert isinstance(result.type, ArrowPeriodType)
   50:     assert result.type.freq == freq
   51:     expected = pa.array(periods.asi8, type="int64")
   52:     assert result.storage.equals(expected)
   53: 
   54:     # convert to its storage type
   55:     result = pa.array(periods, type=pa.int64())
   56:     assert result.equals(expected)
   57: 
   58:     # unsupported conversions
   59:     msg = "Not supported to convert PeriodArray to 'double' type"
   60:     with pytest.raises(TypeError, match=msg):
   61:         pa.array(periods, type="float64")
   62: 
   63:     with pytest.raises(TypeError, match="different 'freq'"):
   64:         pa.array(periods, type=ArrowPeriodType("T"))
   65: 
   66: 
   67: def test_arrow_array_missing():
   68:     from pandas.core.arrays.arrow.extension_types import ArrowPeriodType
   69: 
   70:     arr = PeriodArray([1, 2, 3], dtype="period[D]")
   71:     arr[1] = pd.NaT
   72: 
   73:     result = pa.array(arr)
   74:     assert isinstance(result.type, ArrowPeriodType)
   75:     assert result.type.freq == "D"
   76:     expected = pa.array([1, None, 3], type="int64")
   77:     assert result.storage.equals(expected)
   78: 
   79: 
   80: def test_arrow_table_roundtrip():
   81:     from pandas.core.arrays.arrow.extension_types import ArrowPeriodType
   82: 
   83:     arr = PeriodArray([1, 2, 3], dtype="period[D]")
   84:     arr[1] = pd.NaT
   85:     df = pd.DataFrame({"a": arr})
   86: 
   87:     table = pa.table(df)
   88:     assert isinstance(table.field("a").type, ArrowPeriodType)
   89:     result = table.to_pandas()
   90:     assert isinstance(result["a"].dtype, PeriodDtype)
   91:     tm.assert_frame_equal(result, df)
   92: 
   93:     table2 = pa.concat_tables([table, table])
   94:     result = table2.to_pandas()
   95:     expected = pd.concat([df, df], ignore_index=True)
   96:     tm.assert_frame_equal(result, expected)
   97: 
   98: 
   99: def test_arrow_load_from_zero_chunks():
  100:     # GH-41040
  101: 
  102:     from pandas.core.arrays.arrow.extension_types import ArrowPeriodType
  103: 
  104:     arr = PeriodArray([], dtype="period[D]")
  105:     df = pd.DataFrame({"a": arr})
  106: 
  107:     table = pa.table(df)
  108:     assert isinstance(table.field("a").type, ArrowPeriodType)
  109:     table = pa.table(
  110:         [pa.chunked_array([], type=table.column(0).type)], schema=table.schema
  111:     )
  112: 
  113:     result = table.to_pandas()
  114:     assert isinstance(result["a"].dtype, PeriodDtype)
  115:     tm.assert_frame_equal(result, df)
  116: 
  117: 
  118: def test_arrow_table_roundtrip_without_metadata():
  119:     arr = PeriodArray([1, 2, 3], dtype="period[h]")
  120:     arr[1] = pd.NaT
  121:     df = pd.DataFrame({"a": arr})
  122: 
  123:     table = pa.table(df)
  124:     # remove the metadata
  125:     table = table.replace_schema_metadata()
  126:     assert table.schema.metadata is None
  127: 
  128:     result = table.to_pandas()
  129:     assert isinstance(result["a"].dtype, PeriodDtype)
  130:     tm.assert_frame_equal(result, df)
