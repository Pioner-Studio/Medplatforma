    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import iNaT
    5: from pandas._libs.tslibs.offsets import MonthEnd
    6: from pandas._libs.tslibs.period import IncompatibleFrequency
    7: 
    8: import pandas as pd
    9: import pandas._testing as tm
   10: from pandas.core.arrays import (
   11:     PeriodArray,
   12:     period_array,
   13: )
   14: 
   15: 
   16: @pytest.mark.parametrize(
   17:     "data, freq, expected",
   18:     [
   19:         ([pd.Period("2017", "D")], None, [17167]),
   20:         ([pd.Period("2017", "D")], "D", [17167]),
   21:         ([2017], "D", [17167]),
   22:         (["2017"], "D", [17167]),
   23:         ([pd.Period("2017", "D")], pd.tseries.offsets.Day(), [17167]),
   24:         ([pd.Period("2017", "D"), None], None, [17167, iNaT]),
   25:         (pd.Series(pd.date_range("2017", periods=3)), None, [17167, 17168, 17169]),
   26:         (pd.date_range("2017", periods=3), None, [17167, 17168, 17169]),
   27:         (pd.period_range("2017", periods=4, freq="Q"), None, [188, 189, 190, 191]),
   28:     ],
   29: )
   30: def test_period_array_ok(data, freq, expected):
   31:     result = period_array(data, freq=freq).asi8
   32:     expected = np.asarray(expected, dtype=np.int64)
   33:     tm.assert_numpy_array_equal(result, expected)
   34: 
   35: 
   36: def test_period_array_readonly_object():
   37:     # https://github.com/pandas-dev/pandas/issues/25403
   38:     pa = period_array([pd.Period("2019-01-01")])
   39:     arr = np.asarray(pa, dtype="object")
   40:     arr.setflags(write=False)
   41: 
   42:     result = period_array(arr)
   43:     tm.assert_period_array_equal(result, pa)
   44: 
   45:     result = pd.Series(arr)
   46:     tm.assert_series_equal(result, pd.Series(pa))
   47: 
   48:     result = pd.DataFrame({"A": arr})
   49:     tm.assert_frame_equal(result, pd.DataFrame({"A": pa}))
   50: 
   51: 
   52: def test_from_datetime64_freq_changes():
   53:     # https://github.com/pandas-dev/pandas/issues/23438
   54:     arr = pd.date_range("2017", periods=3, freq="D")
   55:     result = PeriodArray._from_datetime64(arr, freq="M")
   56:     expected = period_array(["2017-01-01", "2017-01-01", "2017-01-01"], freq="M")
   57:     tm.assert_period_array_equal(result, expected)
   58: 
   59: 
   60: @pytest.mark.parametrize("freq", ["2M", MonthEnd(2)])
   61: def test_from_datetime64_freq_2M(freq):
   62:     arr = np.array(
   63:         ["2020-01-01T00:00:00", "2020-01-02T00:00:00"], dtype="datetime64[ns]"
   64:     )
   65:     result = PeriodArray._from_datetime64(arr, freq)
   66:     expected = period_array(["2020-01", "2020-01"], freq=freq)
   67:     tm.assert_period_array_equal(result, expected)
   68: 
   69: 
   70: @pytest.mark.parametrize(
   71:     "data, freq, msg",
   72:     [
   73:         (
   74:             [pd.Period("2017", "D"), pd.Period("2017", "Y")],
   75:             None,
   76:             "Input has different freq",
   77:         ),
   78:         ([pd.Period("2017", "D")], "Y", "Input has different freq"),
   79:     ],
   80: )
   81: def test_period_array_raises(data, freq, msg):
   82:     with pytest.raises(IncompatibleFrequency, match=msg):
   83:         period_array(data, freq)
   84: 
   85: 
   86: def test_period_array_non_period_series_raies():
   87:     ser = pd.Series([1, 2, 3])
   88:     with pytest.raises(TypeError, match="dtype"):
   89:         PeriodArray(ser, dtype="period[D]")
   90: 
   91: 
   92: def test_period_array_freq_mismatch():
   93:     arr = period_array(["2000", "2001"], freq="D")
   94:     with pytest.raises(IncompatibleFrequency, match="freq"):
   95:         PeriodArray(arr, dtype="period[M]")
   96: 
   97:     dtype = pd.PeriodDtype(pd.tseries.offsets.MonthEnd())
   98:     with pytest.raises(IncompatibleFrequency, match="freq"):
   99:         PeriodArray(arr, dtype=dtype)
  100: 
  101: 
  102: def test_from_sequence_disallows_i8():
  103:     arr = period_array(["2000", "2001"], freq="D")
  104: 
  105:     msg = str(arr[0].ordinal)
  106:     with pytest.raises(TypeError, match=msg):
  107:         PeriodArray._from_sequence(arr.asi8, dtype=arr.dtype)
  108: 
  109:     with pytest.raises(TypeError, match=msg):
  110:         PeriodArray._from_sequence(list(arr.asi8), dtype=arr.dtype)
  111: 
  112: 
  113: def test_from_td64nat_sequence_raises():
  114:     # GH#44507
  115:     td = pd.NaT.to_numpy("m8[ns]")
  116: 
  117:     dtype = pd.period_range("2005-01-01", periods=3, freq="D").dtype
  118: 
  119:     arr = np.array([None], dtype=object)
  120:     arr[0] = td
  121: 
  122:     msg = "Value must be Period, string, integer, or datetime"
  123:     with pytest.raises(ValueError, match=msg):
  124:         PeriodArray._from_sequence(arr, dtype=dtype)
  125: 
  126:     with pytest.raises(ValueError, match=msg):
  127:         pd.PeriodIndex(arr, dtype=dtype)
  128:     with pytest.raises(ValueError, match=msg):
  129:         pd.Index(arr, dtype=dtype)
  130:     with pytest.raises(ValueError, match=msg):
  131:         pd.array(arr, dtype=dtype)
  132:     with pytest.raises(ValueError, match=msg):
  133:         pd.Series(arr, dtype=dtype)
  134:     with pytest.raises(ValueError, match=msg):
  135:         pd.DataFrame(arr, dtype=dtype)
  136: 
  137: 
  138: def test_freq_deprecated():
  139:     # GH#52462
  140:     data = np.arange(5).astype(np.int64)
  141:     msg = "The 'freq' keyword in the PeriodArray constructor is deprecated"
  142:     with tm.assert_produces_warning(FutureWarning, match=msg):
  143:         res = PeriodArray(data, freq="M")
  144: 
  145:     expected = PeriodArray(data, dtype="period[M]")
  146:     tm.assert_equal(res, expected)
  147: 
  148: 
  149: def test_period_array_from_datetime64():
  150:     arr = np.array(
  151:         ["2020-01-01T00:00:00", "2020-02-02T00:00:00"], dtype="datetime64[ns]"
  152:     )
  153:     result = PeriodArray._from_datetime64(arr, freq=MonthEnd(2))
  154: 
  155:     expected = period_array(["2020-01-01", "2020-02-01"], freq=MonthEnd(2))
  156:     tm.assert_period_array_equal(result, expected)
