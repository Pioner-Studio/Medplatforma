    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.core.arrays import FloatingArray
    7: from pandas.core.arrays.floating import (
    8:     Float32Dtype,
    9:     Float64Dtype,
   10: )
   11: 
   12: 
   13: def test_uses_pandas_na():
   14:     a = pd.array([1, None], dtype=Float64Dtype())
   15:     assert a[1] is pd.NA
   16: 
   17: 
   18: def test_floating_array_constructor():
   19:     values = np.array([1, 2, 3, 4], dtype="float64")
   20:     mask = np.array([False, False, False, True], dtype="bool")
   21: 
   22:     result = FloatingArray(values, mask)
   23:     expected = pd.array([1, 2, 3, np.nan], dtype="Float64")
   24:     tm.assert_extension_array_equal(result, expected)
   25:     tm.assert_numpy_array_equal(result._data, values)
   26:     tm.assert_numpy_array_equal(result._mask, mask)
   27: 
   28:     msg = r".* should be .* numpy array. Use the 'pd.array' function instead"
   29:     with pytest.raises(TypeError, match=msg):
   30:         FloatingArray(values.tolist(), mask)
   31: 
   32:     with pytest.raises(TypeError, match=msg):
   33:         FloatingArray(values, mask.tolist())
   34: 
   35:     with pytest.raises(TypeError, match=msg):
   36:         FloatingArray(values.astype(int), mask)
   37: 
   38:     msg = r"__init__\(\) missing 1 required positional argument: 'mask'"
   39:     with pytest.raises(TypeError, match=msg):
   40:         FloatingArray(values)
   41: 
   42: 
   43: def test_floating_array_disallows_float16():
   44:     # GH#44715
   45:     arr = np.array([1, 2], dtype=np.float16)
   46:     mask = np.array([False, False])
   47: 
   48:     msg = "FloatingArray does not support np.float16 dtype"
   49:     with pytest.raises(TypeError, match=msg):
   50:         FloatingArray(arr, mask)
   51: 
   52: 
   53: def test_floating_array_disallows_Float16_dtype(request):
   54:     # GH#44715
   55:     with pytest.raises(TypeError, match="data type 'Float16' not understood"):
   56:         pd.array([1.0, 2.0], dtype="Float16")
   57: 
   58: 
   59: def test_floating_array_constructor_copy():
   60:     values = np.array([1, 2, 3, 4], dtype="float64")
   61:     mask = np.array([False, False, False, True], dtype="bool")
   62: 
   63:     result = FloatingArray(values, mask)
   64:     assert result._data is values
   65:     assert result._mask is mask
   66: 
   67:     result = FloatingArray(values, mask, copy=True)
   68:     assert result._data is not values
   69:     assert result._mask is not mask
   70: 
   71: 
   72: def test_to_array():
   73:     result = pd.array([0.1, 0.2, 0.3, 0.4])
   74:     expected = pd.array([0.1, 0.2, 0.3, 0.4], dtype="Float64")
   75:     tm.assert_extension_array_equal(result, expected)
   76: 
   77: 
   78: @pytest.mark.parametrize(
   79:     "a, b",
   80:     [
   81:         ([1, None], [1, pd.NA]),
   82:         ([None], [pd.NA]),
   83:         ([None, np.nan], [pd.NA, pd.NA]),
   84:         ([1, np.nan], [1, pd.NA]),
   85:         ([np.nan], [pd.NA]),
   86:     ],
   87: )
   88: def test_to_array_none_is_nan(a, b):
   89:     result = pd.array(a, dtype="Float64")
   90:     expected = pd.array(b, dtype="Float64")
   91:     tm.assert_extension_array_equal(result, expected)
   92: 
   93: 
   94: def test_to_array_mixed_integer_float():
   95:     result = pd.array([1, 2.0])
   96:     expected = pd.array([1.0, 2.0], dtype="Float64")
   97:     tm.assert_extension_array_equal(result, expected)
   98: 
   99:     result = pd.array([1, None, 2.0])
  100:     expected = pd.array([1.0, None, 2.0], dtype="Float64")
  101:     tm.assert_extension_array_equal(result, expected)
  102: 
  103: 
  104: @pytest.mark.parametrize(
  105:     "values",
  106:     [
  107:         ["foo", "bar"],
  108:         "foo",
  109:         1,
  110:         1.0,
  111:         pd.date_range("20130101", periods=2),
  112:         np.array(["foo"]),
  113:         [[1, 2], [3, 4]],
  114:         [np.nan, {"a": 1}],
  115:         # GH#44514 all-NA case used to get quietly swapped out before checking ndim
  116:         np.array([pd.NA] * 6, dtype=object).reshape(3, 2),
  117:     ],
  118: )
  119: def test_to_array_error(values):
  120:     # error in converting existing arrays to FloatingArray
  121:     msg = "|".join(
  122:         [
  123:             "cannot be converted to FloatingDtype",
  124:             "values must be a 1D list-like",
  125:             "Cannot pass scalar",
  126:             r"float\(\) argument must be a string or a (real )?number, not 'dict'",
  127:             "could not convert string to float: 'foo'",
  128:             r"could not convert string to float: np\.str_\('foo'\)",
  129:         ]
  130:     )
  131:     with pytest.raises((TypeError, ValueError), match=msg):
  132:         pd.array(values, dtype="Float64")
  133: 
  134: 
  135: @pytest.mark.parametrize("values", [["1", "2", None], ["1.5", "2", None]])
  136: def test_construct_from_float_strings(values):
  137:     # see also test_to_integer_array_str
  138:     expected = pd.array([float(values[0]), 2, None], dtype="Float64")
  139: 
  140:     res = pd.array(values, dtype="Float64")
  141:     tm.assert_extension_array_equal(res, expected)
  142: 
  143:     res = FloatingArray._from_sequence(values)
  144:     tm.assert_extension_array_equal(res, expected)
  145: 
  146: 
  147: def test_to_array_inferred_dtype():
  148:     # if values has dtype -> respect it
  149:     result = pd.array(np.array([1, 2], dtype="float32"))
  150:     assert result.dtype == Float32Dtype()
  151: 
  152:     # if values have no dtype -> always float64
  153:     result = pd.array([1.0, 2.0])
  154:     assert result.dtype == Float64Dtype()
  155: 
  156: 
  157: def test_to_array_dtype_keyword():
  158:     result = pd.array([1, 2], dtype="Float32")
  159:     assert result.dtype == Float32Dtype()
  160: 
  161:     # if values has dtype -> override it
  162:     result = pd.array(np.array([1, 2], dtype="float32"), dtype="Float64")
  163:     assert result.dtype == Float64Dtype()
  164: 
  165: 
  166: def test_to_array_integer():
  167:     result = pd.array([1, 2], dtype="Float64")
  168:     expected = pd.array([1.0, 2.0], dtype="Float64")
  169:     tm.assert_extension_array_equal(result, expected)
  170: 
  171:     # for integer dtypes, the itemsize is not preserved
  172:     # TODO can we specify "floating" in general?
  173:     result = pd.array(np.array([1, 2], dtype="int32"), dtype="Float64")
  174:     assert result.dtype == Float64Dtype()
  175: 
  176: 
  177: @pytest.mark.parametrize(
  178:     "bool_values, values, target_dtype, expected_dtype",
  179:     [
  180:         ([False, True], [0, 1], Float64Dtype(), Float64Dtype()),
  181:         ([False, True], [0, 1], "Float64", Float64Dtype()),
  182:         ([False, True, np.nan], [0, 1, np.nan], Float64Dtype(), Float64Dtype()),
  183:     ],
  184: )
  185: def test_to_array_bool(bool_values, values, target_dtype, expected_dtype):
  186:     result = pd.array(bool_values, dtype=target_dtype)
  187:     assert result.dtype == expected_dtype
  188:     expected = pd.array(values, dtype=target_dtype)
  189:     tm.assert_extension_array_equal(result, expected)
  190: 
  191: 
  192: def test_series_from_float(data):
  193:     # construct from our dtype & string dtype
  194:     dtype = data.dtype
  195: 
  196:     # from float
  197:     expected = pd.Series(data)
  198:     result = pd.Series(data.to_numpy(na_value=np.nan, dtype="float"), dtype=str(dtype))
  199:     tm.assert_series_equal(result, expected)
  200: 
  201:     # from list
  202:     expected = pd.Series(data)
  203:     result = pd.Series(np.array(data).tolist(), dtype=str(dtype))
  204:     tm.assert_series_equal(result, expected)
