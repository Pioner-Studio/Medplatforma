    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.sparse import IntIndex
    5: 
    6: import pandas as pd
    7: from pandas import (
    8:     SparseDtype,
    9:     isna,
   10: )
   11: import pandas._testing as tm
   12: from pandas.core.arrays.sparse import SparseArray
   13: 
   14: 
   15: class TestConstructors:
   16:     def test_constructor_dtype(self):
   17:         arr = SparseArray([np.nan, 1, 2, np.nan])
   18:         assert arr.dtype == SparseDtype(np.float64, np.nan)
   19:         assert arr.dtype.subtype == np.float64
   20:         assert np.isnan(arr.fill_value)
   21: 
   22:         arr = SparseArray([np.nan, 1, 2, np.nan], fill_value=0)
   23:         assert arr.dtype == SparseDtype(np.float64, 0)
   24:         assert arr.fill_value == 0
   25: 
   26:         arr = SparseArray([0, 1, 2, 4], dtype=np.float64)
   27:         assert arr.dtype == SparseDtype(np.float64, np.nan)
   28:         assert np.isnan(arr.fill_value)
   29: 
   30:         arr = SparseArray([0, 1, 2, 4], dtype=np.int64)
   31:         assert arr.dtype == SparseDtype(np.int64, 0)
   32:         assert arr.fill_value == 0
   33: 
   34:         arr = SparseArray([0, 1, 2, 4], fill_value=0, dtype=np.int64)
   35:         assert arr.dtype == SparseDtype(np.int64, 0)
   36:         assert arr.fill_value == 0
   37: 
   38:         arr = SparseArray([0, 1, 2, 4], dtype=None)
   39:         assert arr.dtype == SparseDtype(np.int64, 0)
   40:         assert arr.fill_value == 0
   41: 
   42:         arr = SparseArray([0, 1, 2, 4], fill_value=0, dtype=None)
   43:         assert arr.dtype == SparseDtype(np.int64, 0)
   44:         assert arr.fill_value == 0
   45: 
   46:     def test_constructor_dtype_str(self):
   47:         result = SparseArray([1, 2, 3], dtype="int")
   48:         expected = SparseArray([1, 2, 3], dtype=int)
   49:         tm.assert_sp_array_equal(result, expected)
   50: 
   51:     def test_constructor_sparse_dtype(self):
   52:         result = SparseArray([1, 0, 0, 1], dtype=SparseDtype("int64", -1))
   53:         expected = SparseArray([1, 0, 0, 1], fill_value=-1, dtype=np.int64)
   54:         tm.assert_sp_array_equal(result, expected)
   55:         assert result.sp_values.dtype == np.dtype("int64")
   56: 
   57:     def test_constructor_sparse_dtype_str(self):
   58:         result = SparseArray([1, 0, 0, 1], dtype="Sparse[int32]")
   59:         expected = SparseArray([1, 0, 0, 1], dtype=np.int32)
   60:         tm.assert_sp_array_equal(result, expected)
   61:         assert result.sp_values.dtype == np.dtype("int32")
   62: 
   63:     def test_constructor_object_dtype(self):
   64:         # GH#11856
   65:         arr = SparseArray(["A", "A", np.nan, "B"], dtype=object)
   66:         assert arr.dtype == SparseDtype(object)
   67:         assert np.isnan(arr.fill_value)
   68: 
   69:         arr = SparseArray(["A", "A", np.nan, "B"], dtype=object, fill_value="A")
   70:         assert arr.dtype == SparseDtype(object, "A")
   71:         assert arr.fill_value == "A"
   72: 
   73:     def test_constructor_object_dtype_bool_fill(self):
   74:         # GH#17574
   75:         data = [False, 0, 100.0, 0.0]
   76:         arr = SparseArray(data, dtype=object, fill_value=False)
   77:         assert arr.dtype == SparseDtype(object, False)
   78:         assert arr.fill_value is False
   79:         arr_expected = np.array(data, dtype=object)
   80:         it = (type(x) == type(y) and x == y for x, y in zip(arr, arr_expected))
   81:         assert np.fromiter(it, dtype=np.bool_).all()
   82: 
   83:     @pytest.mark.parametrize("dtype", [SparseDtype(int, 0), int])
   84:     def test_constructor_na_dtype(self, dtype):
   85:         with pytest.raises(ValueError, match="Cannot convert"):
   86:             SparseArray([0, 1, np.nan], dtype=dtype)
   87: 
   88:     def test_constructor_warns_when_losing_timezone(self):
   89:         # GH#32501 warn when losing timezone information
   90:         dti = pd.date_range("2016-01-01", periods=3, tz="US/Pacific")
   91: 
   92:         expected = SparseArray(np.asarray(dti, dtype="datetime64[ns]"))
   93: 
   94:         with tm.assert_produces_warning(UserWarning):
   95:             result = SparseArray(dti)
   96: 
   97:         tm.assert_sp_array_equal(result, expected)
   98: 
   99:         with tm.assert_produces_warning(UserWarning):
  100:             result = SparseArray(pd.Series(dti))
  101: 
  102:         tm.assert_sp_array_equal(result, expected)
  103: 
  104:     def test_constructor_spindex_dtype(self):
  105:         arr = SparseArray(data=[1, 2], sparse_index=IntIndex(4, [1, 2]))
  106:         # TODO: actionable?
  107:         # XXX: Behavior change: specifying SparseIndex no longer changes the
  108:         # fill_value
  109:         expected = SparseArray([0, 1, 2, 0], kind="integer")
  110:         tm.assert_sp_array_equal(arr, expected)
  111:         assert arr.dtype == SparseDtype(np.int64)
  112:         assert arr.fill_value == 0
  113: 
  114:         arr = SparseArray(
  115:             data=[1, 2, 3],
  116:             sparse_index=IntIndex(4, [1, 2, 3]),
  117:             dtype=np.int64,
  118:             fill_value=0,
  119:         )
  120:         exp = SparseArray([0, 1, 2, 3], dtype=np.int64, fill_value=0)
  121:         tm.assert_sp_array_equal(arr, exp)
  122:         assert arr.dtype == SparseDtype(np.int64)
  123:         assert arr.fill_value == 0
  124: 
  125:         arr = SparseArray(
  126:             data=[1, 2], sparse_index=IntIndex(4, [1, 2]), fill_value=0, dtype=np.int64
  127:         )
  128:         exp = SparseArray([0, 1, 2, 0], fill_value=0, dtype=np.int64)
  129:         tm.assert_sp_array_equal(arr, exp)
  130:         assert arr.dtype == SparseDtype(np.int64)
  131:         assert arr.fill_value == 0
  132: 
  133:         arr = SparseArray(
  134:             data=[1, 2, 3],
  135:             sparse_index=IntIndex(4, [1, 2, 3]),
  136:             dtype=None,
  137:             fill_value=0,
  138:         )
  139:         exp = SparseArray([0, 1, 2, 3], dtype=None)
  140:         tm.assert_sp_array_equal(arr, exp)
  141:         assert arr.dtype == SparseDtype(np.int64)
  142:         assert arr.fill_value == 0
  143: 
  144:     @pytest.mark.parametrize("sparse_index", [None, IntIndex(1, [0])])
  145:     def test_constructor_spindex_dtype_scalar(self, sparse_index):
  146:         # scalar input
  147:         msg = "Constructing SparseArray with scalar data is deprecated"
  148:         with tm.assert_produces_warning(FutureWarning, match=msg):
  149:             arr = SparseArray(data=1, sparse_index=sparse_index, dtype=None)
  150:         exp = SparseArray([1], dtype=None)
  151:         tm.assert_sp_array_equal(arr, exp)
  152:         assert arr.dtype == SparseDtype(np.int64)
  153:         assert arr.fill_value == 0
  154: 
  155:         with tm.assert_produces_warning(FutureWarning, match=msg):
  156:             arr = SparseArray(data=1, sparse_index=IntIndex(1, [0]), dtype=None)
  157:         exp = SparseArray([1], dtype=None)
  158:         tm.assert_sp_array_equal(arr, exp)
  159:         assert arr.dtype == SparseDtype(np.int64)
  160:         assert arr.fill_value == 0
  161: 
  162:     def test_constructor_spindex_dtype_scalar_broadcasts(self):
  163:         arr = SparseArray(
  164:             data=[1, 2], sparse_index=IntIndex(4, [1, 2]), fill_value=0, dtype=None
  165:         )
  166:         exp = SparseArray([0, 1, 2, 0], fill_value=0, dtype=None)
  167:         tm.assert_sp_array_equal(arr, exp)
  168:         assert arr.dtype == SparseDtype(np.int64)
  169:         assert arr.fill_value == 0
  170: 
  171:     @pytest.mark.parametrize(
  172:         "data, fill_value",
  173:         [
  174:             (np.array([1, 2]), 0),
  175:             (np.array([1.0, 2.0]), np.nan),
  176:             ([True, False], False),
  177:             ([pd.Timestamp("2017-01-01")], pd.NaT),
  178:         ],
  179:     )
  180:     def test_constructor_inferred_fill_value(self, data, fill_value):
  181:         result = SparseArray(data).fill_value
  182: 
  183:         if isna(fill_value):
  184:             assert isna(result)
  185:         else:
  186:             assert result == fill_value
  187: 
  188:     @pytest.mark.parametrize("format", ["coo", "csc", "csr"])
  189:     @pytest.mark.parametrize("size", [0, 10])
  190:     def test_from_spmatrix(self, size, format):
  191:         sp_sparse = pytest.importorskip("scipy.sparse")
  192: 
  193:         mat = sp_sparse.random(size, 1, density=0.5, format=format)
  194:         result = SparseArray.from_spmatrix(mat)
  195: 
  196:         result = np.asarray(result)
  197:         expected = mat.toarray().ravel()
  198:         tm.assert_numpy_array_equal(result, expected)
  199: 
  200:     @pytest.mark.parametrize("format", ["coo", "csc", "csr"])
  201:     def test_from_spmatrix_including_explicit_zero(self, format):
  202:         sp_sparse = pytest.importorskip("scipy.sparse")
  203: 
  204:         mat = sp_sparse.random(10, 1, density=0.5, format=format)
  205:         mat.data[0] = 0
  206:         result = SparseArray.from_spmatrix(mat)
  207: 
  208:         result = np.asarray(result)
  209:         expected = mat.toarray().ravel()
  210:         tm.assert_numpy_array_equal(result, expected)
  211: 
  212:     def test_from_spmatrix_raises(self):
  213:         sp_sparse = pytest.importorskip("scipy.sparse")
  214: 
  215:         mat = sp_sparse.eye(5, 4, format="csc")
  216: 
  217:         with pytest.raises(ValueError, match="not '4'"):
  218:             SparseArray.from_spmatrix(mat)
  219: 
  220:     def test_constructor_from_too_large_array(self):
  221:         with pytest.raises(TypeError, match="expected dimension <= 1 data"):
  222:             SparseArray(np.arange(10).reshape((2, 5)))
  223: 
  224:     def test_constructor_from_sparse(self):
  225:         zarr = SparseArray([0, 0, 1, 2, 3, 0, 4, 5, 0, 6], fill_value=0)
  226:         res = SparseArray(zarr)
  227:         assert res.fill_value == 0
  228:         tm.assert_almost_equal(res.sp_values, zarr.sp_values)
  229: 
  230:     def test_constructor_copy(self):
  231:         arr_data = np.array([np.nan, np.nan, 1, 2, 3, np.nan, 4, 5, np.nan, 6])
  232:         arr = SparseArray(arr_data)
  233: 
  234:         cp = SparseArray(arr, copy=True)
  235:         cp.sp_values[:3] = 0
  236:         assert not (arr.sp_values[:3] == 0).any()
  237: 
  238:         not_copy = SparseArray(arr)
  239:         not_copy.sp_values[:3] = 0
  240:         assert (arr.sp_values[:3] == 0).all()
  241: 
  242:     def test_constructor_bool(self):
  243:         # GH#10648
  244:         data = np.array([False, False, True, True, False, False])
  245:         arr = SparseArray(data, fill_value=False, dtype=bool)
  246: 
  247:         assert arr.dtype == SparseDtype(bool)
  248:         tm.assert_numpy_array_equal(arr.sp_values, np.array([True, True]))
  249:         # Behavior change: np.asarray densifies.
  250:         # tm.assert_numpy_array_equal(arr.sp_values, np.asarray(arr))
  251:         tm.assert_numpy_array_equal(arr.sp_index.indices, np.array([2, 3], np.int32))
  252: 
  253:         dense = arr.to_dense()
  254:         assert dense.dtype == bool
  255:         tm.assert_numpy_array_equal(dense, data)
  256: 
  257:     def test_constructor_bool_fill_value(self):
  258:         arr = SparseArray([True, False, True], dtype=None)
  259:         assert arr.dtype == SparseDtype(np.bool_)
  260:         assert not arr.fill_value
  261: 
  262:         arr = SparseArray([True, False, True], dtype=np.bool_)
  263:         assert arr.dtype == SparseDtype(np.bool_)
  264:         assert not arr.fill_value
  265: 
  266:         arr = SparseArray([True, False, True], dtype=np.bool_, fill_value=True)
  267:         assert arr.dtype == SparseDtype(np.bool_, True)
  268:         assert arr.fill_value
  269: 
  270:     def test_constructor_float32(self):
  271:         # GH#10648
  272:         data = np.array([1.0, np.nan, 3], dtype=np.float32)
  273:         arr = SparseArray(data, dtype=np.float32)
  274: 
  275:         assert arr.dtype == SparseDtype(np.float32)
  276:         tm.assert_numpy_array_equal(arr.sp_values, np.array([1, 3], dtype=np.float32))
  277:         # Behavior change: np.asarray densifies.
  278:         # tm.assert_numpy_array_equal(arr.sp_values, np.asarray(arr))
  279:         tm.assert_numpy_array_equal(
  280:             arr.sp_index.indices, np.array([0, 2], dtype=np.int32)
  281:         )
  282: 
  283:         dense = arr.to_dense()
  284:         assert dense.dtype == np.float32
  285:         tm.assert_numpy_array_equal(dense, data)
