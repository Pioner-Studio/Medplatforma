    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     Index,
    7: )
    8: import pandas._testing as tm
    9: 
   10: 
   11: class TestCategoricalSort:
   12:     def test_argsort(self):
   13:         c = Categorical([5, 3, 1, 4, 2], ordered=True)
   14: 
   15:         expected = np.array([2, 4, 1, 3, 0])
   16:         tm.assert_numpy_array_equal(
   17:             c.argsort(ascending=True), expected, check_dtype=False
   18:         )
   19: 
   20:         expected = expected[::-1]
   21:         tm.assert_numpy_array_equal(
   22:             c.argsort(ascending=False), expected, check_dtype=False
   23:         )
   24: 
   25:     def test_numpy_argsort(self):
   26:         c = Categorical([5, 3, 1, 4, 2], ordered=True)
   27: 
   28:         expected = np.array([2, 4, 1, 3, 0])
   29:         tm.assert_numpy_array_equal(np.argsort(c), expected, check_dtype=False)
   30: 
   31:         tm.assert_numpy_array_equal(
   32:             np.argsort(c, kind="mergesort"), expected, check_dtype=False
   33:         )
   34: 
   35:         msg = "the 'axis' parameter is not supported"
   36:         with pytest.raises(ValueError, match=msg):
   37:             np.argsort(c, axis=0)
   38: 
   39:         msg = "the 'order' parameter is not supported"
   40:         with pytest.raises(ValueError, match=msg):
   41:             np.argsort(c, order="C")
   42: 
   43:     def test_sort_values(self):
   44:         # unordered cats are sortable
   45:         cat = Categorical(["a", "b", "b", "a"], ordered=False)
   46:         cat.sort_values()
   47: 
   48:         cat = Categorical(["a", "c", "b", "d"], ordered=True)
   49: 
   50:         # sort_values
   51:         res = cat.sort_values()
   52:         exp = np.array(["a", "b", "c", "d"], dtype=object)
   53:         tm.assert_numpy_array_equal(res.__array__(), exp)
   54:         tm.assert_index_equal(res.categories, cat.categories)
   55: 
   56:         cat = Categorical(
   57:             ["a", "c", "b", "d"], categories=["a", "b", "c", "d"], ordered=True
   58:         )
   59:         res = cat.sort_values()
   60:         exp = np.array(["a", "b", "c", "d"], dtype=object)
   61:         tm.assert_numpy_array_equal(res.__array__(), exp)
   62:         tm.assert_index_equal(res.categories, cat.categories)
   63: 
   64:         res = cat.sort_values(ascending=False)
   65:         exp = np.array(["d", "c", "b", "a"], dtype=object)
   66:         tm.assert_numpy_array_equal(res.__array__(), exp)
   67:         tm.assert_index_equal(res.categories, cat.categories)
   68: 
   69:         # sort (inplace order)
   70:         cat1 = cat.copy()
   71:         orig_codes = cat1._codes
   72:         cat1.sort_values(inplace=True)
   73:         assert cat1._codes is orig_codes
   74:         exp = np.array(["a", "b", "c", "d"], dtype=object)
   75:         tm.assert_numpy_array_equal(cat1.__array__(), exp)
   76:         tm.assert_index_equal(res.categories, cat.categories)
   77: 
   78:         # reverse
   79:         cat = Categorical(["a", "c", "c", "b", "d"], ordered=True)
   80:         res = cat.sort_values(ascending=False)
   81:         exp_val = np.array(["d", "c", "c", "b", "a"], dtype=object)
   82:         exp_categories = Index(["a", "b", "c", "d"])
   83:         tm.assert_numpy_array_equal(res.__array__(), exp_val)
   84:         tm.assert_index_equal(res.categories, exp_categories)
   85: 
   86:     def test_sort_values_na_position(self):
   87:         # see gh-12882
   88:         cat = Categorical([5, 2, np.nan, 2, np.nan], ordered=True)
   89:         exp_categories = Index([2, 5])
   90: 
   91:         exp = np.array([2.0, 2.0, 5.0, np.nan, np.nan])
   92:         res = cat.sort_values()  # default arguments
   93:         tm.assert_numpy_array_equal(res.__array__(), exp)
   94:         tm.assert_index_equal(res.categories, exp_categories)
   95: 
   96:         exp = np.array([np.nan, np.nan, 2.0, 2.0, 5.0])
   97:         res = cat.sort_values(ascending=True, na_position="first")
   98:         tm.assert_numpy_array_equal(res.__array__(), exp)
   99:         tm.assert_index_equal(res.categories, exp_categories)
  100: 
  101:         exp = np.array([np.nan, np.nan, 5.0, 2.0, 2.0])
  102:         res = cat.sort_values(ascending=False, na_position="first")
  103:         tm.assert_numpy_array_equal(res.__array__(), exp)
  104:         tm.assert_index_equal(res.categories, exp_categories)
  105: 
  106:         exp = np.array([2.0, 2.0, 5.0, np.nan, np.nan])
  107:         res = cat.sort_values(ascending=True, na_position="last")
  108:         tm.assert_numpy_array_equal(res.__array__(), exp)
  109:         tm.assert_index_equal(res.categories, exp_categories)
  110: 
  111:         exp = np.array([5.0, 2.0, 2.0, np.nan, np.nan])
  112:         res = cat.sort_values(ascending=False, na_position="last")
  113:         tm.assert_numpy_array_equal(res.__array__(), exp)
  114:         tm.assert_index_equal(res.categories, exp_categories)
  115: 
  116:         cat = Categorical(["a", "c", "b", "d", np.nan], ordered=True)
  117:         res = cat.sort_values(ascending=False, na_position="last")
  118:         exp_val = np.array(["d", "c", "b", "a", np.nan], dtype=object)
  119:         exp_categories = Index(["a", "b", "c", "d"])
  120:         tm.assert_numpy_array_equal(res.__array__(), exp_val)
  121:         tm.assert_index_equal(res.categories, exp_categories)
  122: 
  123:         cat = Categorical(["a", "c", "b", "d", np.nan], ordered=True)
  124:         res = cat.sort_values(ascending=False, na_position="first")
  125:         exp_val = np.array([np.nan, "d", "c", "b", "a"], dtype=object)
  126:         exp_categories = Index(["a", "b", "c", "d"])
  127:         tm.assert_numpy_array_equal(res.__array__(), exp_val)
  128:         tm.assert_index_equal(res.categories, exp_categories)
