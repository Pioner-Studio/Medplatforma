    1: import numpy as np
    2: 
    3: from pandas.core.dtypes.common import is_scalar
    4: 
    5: import pandas as pd
    6: import pandas._testing as tm
    7: 
    8: 
    9: class TestSearchsorted:
   10:     def test_searchsorted_string(self, string_dtype):
   11:         arr = pd.array(["a", "b", "c"], dtype=string_dtype)
   12: 
   13:         result = arr.searchsorted("a", side="left")
   14:         assert is_scalar(result)
   15:         assert result == 0
   16: 
   17:         result = arr.searchsorted("a", side="right")
   18:         assert is_scalar(result)
   19:         assert result == 1
   20: 
   21:     def test_searchsorted_numeric_dtypes_scalar(self, any_real_numpy_dtype):
   22:         arr = pd.array([1, 3, 90], dtype=any_real_numpy_dtype)
   23:         result = arr.searchsorted(30)
   24:         assert is_scalar(result)
   25:         assert result == 2
   26: 
   27:         result = arr.searchsorted([30])
   28:         expected = np.array([2], dtype=np.intp)
   29:         tm.assert_numpy_array_equal(result, expected)
   30: 
   31:     def test_searchsorted_numeric_dtypes_vector(self, any_real_numpy_dtype):
   32:         arr = pd.array([1, 3, 90], dtype=any_real_numpy_dtype)
   33:         result = arr.searchsorted([2, 30])
   34:         expected = np.array([1, 2], dtype=np.intp)
   35:         tm.assert_numpy_array_equal(result, expected)
   36: 
   37:     def test_searchsorted_sorter(self, any_real_numpy_dtype):
   38:         arr = pd.array([3, 1, 2], dtype=any_real_numpy_dtype)
   39:         result = arr.searchsorted([0, 3], sorter=np.argsort(arr))
   40:         expected = np.array([0, 2], dtype=np.intp)
   41:         tm.assert_numpy_array_equal(result, expected)
