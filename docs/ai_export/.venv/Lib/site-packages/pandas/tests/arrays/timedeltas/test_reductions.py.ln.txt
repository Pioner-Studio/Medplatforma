    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import Timedelta
    6: import pandas._testing as tm
    7: from pandas.core import nanops
    8: from pandas.core.arrays import TimedeltaArray
    9: 
   10: 
   11: class TestReductions:
   12:     @pytest.mark.parametrize("name", ["std", "min", "max", "median", "mean"])
   13:     @pytest.mark.parametrize("skipna", [True, False])
   14:     def test_reductions_empty(self, name, skipna):
   15:         tdi = pd.TimedeltaIndex([])
   16:         arr = tdi.array
   17: 
   18:         result = getattr(tdi, name)(skipna=skipna)
   19:         assert result is pd.NaT
   20: 
   21:         result = getattr(arr, name)(skipna=skipna)
   22:         assert result is pd.NaT
   23: 
   24:     @pytest.mark.parametrize("skipna", [True, False])
   25:     def test_sum_empty(self, skipna):
   26:         tdi = pd.TimedeltaIndex([])
   27:         arr = tdi.array
   28: 
   29:         result = tdi.sum(skipna=skipna)
   30:         assert isinstance(result, Timedelta)
   31:         assert result == Timedelta(0)
   32: 
   33:         result = arr.sum(skipna=skipna)
   34:         assert isinstance(result, Timedelta)
   35:         assert result == Timedelta(0)
   36: 
   37:     def test_min_max(self, unit):
   38:         dtype = f"m8[{unit}]"
   39:         arr = TimedeltaArray._from_sequence(
   40:             ["3h", "3h", "NaT", "2h", "5h", "4h"], dtype=dtype
   41:         )
   42: 
   43:         result = arr.min()
   44:         expected = Timedelta("2h")
   45:         assert result == expected
   46: 
   47:         result = arr.max()
   48:         expected = Timedelta("5h")
   49:         assert result == expected
   50: 
   51:         result = arr.min(skipna=False)
   52:         assert result is pd.NaT
   53: 
   54:         result = arr.max(skipna=False)
   55:         assert result is pd.NaT
   56: 
   57:     def test_sum(self):
   58:         tdi = pd.TimedeltaIndex(["3h", "3h", "NaT", "2h", "5h", "4h"])
   59:         arr = tdi.array
   60: 
   61:         result = arr.sum(skipna=True)
   62:         expected = Timedelta(hours=17)
   63:         assert isinstance(result, Timedelta)
   64:         assert result == expected
   65: 
   66:         result = tdi.sum(skipna=True)
   67:         assert isinstance(result, Timedelta)
   68:         assert result == expected
   69: 
   70:         result = arr.sum(skipna=False)
   71:         assert result is pd.NaT
   72: 
   73:         result = tdi.sum(skipna=False)
   74:         assert result is pd.NaT
   75: 
   76:         result = arr.sum(min_count=9)
   77:         assert result is pd.NaT
   78: 
   79:         result = tdi.sum(min_count=9)
   80:         assert result is pd.NaT
   81: 
   82:         result = arr.sum(min_count=1)
   83:         assert isinstance(result, Timedelta)
   84:         assert result == expected
   85: 
   86:         result = tdi.sum(min_count=1)
   87:         assert isinstance(result, Timedelta)
   88:         assert result == expected
   89: 
   90:     def test_npsum(self):
   91:         # GH#25282, GH#25335 np.sum should return a Timedelta, not timedelta64
   92:         tdi = pd.TimedeltaIndex(["3h", "3h", "2h", "5h", "4h"])
   93:         arr = tdi.array
   94: 
   95:         result = np.sum(tdi)
   96:         expected = Timedelta(hours=17)
   97:         assert isinstance(result, Timedelta)
   98:         assert result == expected
   99: 
  100:         result = np.sum(arr)
  101:         assert isinstance(result, Timedelta)
  102:         assert result == expected
  103: 
  104:     def test_sum_2d_skipna_false(self):
  105:         arr = np.arange(8).astype(np.int64).view("m8[s]").astype("m8[ns]").reshape(4, 2)
  106:         arr[-1, -1] = "Nat"
  107: 
  108:         tda = TimedeltaArray._from_sequence(arr)
  109: 
  110:         result = tda.sum(skipna=False)
  111:         assert result is pd.NaT
  112: 
  113:         result = tda.sum(axis=0, skipna=False)
  114:         expected = pd.TimedeltaIndex([Timedelta(seconds=12), pd.NaT])._values
  115:         tm.assert_timedelta_array_equal(result, expected)
  116: 
  117:         result = tda.sum(axis=1, skipna=False)
  118:         expected = pd.TimedeltaIndex(
  119:             [
  120:                 Timedelta(seconds=1),
  121:                 Timedelta(seconds=5),
  122:                 Timedelta(seconds=9),
  123:                 pd.NaT,
  124:             ]
  125:         )._values
  126:         tm.assert_timedelta_array_equal(result, expected)
  127: 
  128:     # Adding a Timestamp makes this a test for DatetimeArray.std
  129:     @pytest.mark.parametrize(
  130:         "add",
  131:         [
  132:             Timedelta(0),
  133:             pd.Timestamp("2021-01-01"),
  134:             pd.Timestamp("2021-01-01", tz="UTC"),
  135:             pd.Timestamp("2021-01-01", tz="Asia/Tokyo"),
  136:         ],
  137:     )
  138:     def test_std(self, add):
  139:         tdi = pd.TimedeltaIndex(["0h", "4h", "NaT", "4h", "0h", "2h"]) + add
  140:         arr = tdi.array
  141: 
  142:         result = arr.std(skipna=True)
  143:         expected = Timedelta(hours=2)
  144:         assert isinstance(result, Timedelta)
  145:         assert result == expected
  146: 
  147:         result = tdi.std(skipna=True)
  148:         assert isinstance(result, Timedelta)
  149:         assert result == expected
  150: 
  151:         if getattr(arr, "tz", None) is None:
  152:             result = nanops.nanstd(np.asarray(arr), skipna=True)
  153:             assert isinstance(result, np.timedelta64)
  154:             assert result == expected
  155: 
  156:         result = arr.std(skipna=False)
  157:         assert result is pd.NaT
  158: 
  159:         result = tdi.std(skipna=False)
  160:         assert result is pd.NaT
  161: 
  162:         if getattr(arr, "tz", None) is None:
  163:             result = nanops.nanstd(np.asarray(arr), skipna=False)
  164:             assert isinstance(result, np.timedelta64)
  165:             assert np.isnat(result)
  166: 
  167:     def test_median(self):
  168:         tdi = pd.TimedeltaIndex(["0h", "3h", "NaT", "5h06m", "0h", "2h"])
  169:         arr = tdi.array
  170: 
  171:         result = arr.median(skipna=True)
  172:         expected = Timedelta(hours=2)
  173:         assert isinstance(result, Timedelta)
  174:         assert result == expected
  175: 
  176:         result = tdi.median(skipna=True)
  177:         assert isinstance(result, Timedelta)
  178:         assert result == expected
  179: 
  180:         result = arr.median(skipna=False)
  181:         assert result is pd.NaT
  182: 
  183:         result = tdi.median(skipna=False)
  184:         assert result is pd.NaT
  185: 
  186:     def test_mean(self):
  187:         tdi = pd.TimedeltaIndex(["0h", "3h", "NaT", "5h06m", "0h", "2h"])
  188:         arr = tdi._data
  189: 
  190:         # manually verified result
  191:         expected = Timedelta(arr.dropna()._ndarray.mean())
  192: 
  193:         result = arr.mean()
  194:         assert result == expected
  195:         result = arr.mean(skipna=False)
  196:         assert result is pd.NaT
  197: 
  198:         result = arr.dropna().mean(skipna=False)
  199:         assert result == expected
  200: 
  201:         result = arr.mean(axis=0)
  202:         assert result == expected
  203: 
  204:     def test_mean_2d(self):
  205:         tdi = pd.timedelta_range("14 days", periods=6)
  206:         tda = tdi._data.reshape(3, 2)
  207: 
  208:         result = tda.mean(axis=0)
  209:         expected = tda[1]
  210:         tm.assert_timedelta_array_equal(result, expected)
  211: 
  212:         result = tda.mean(axis=1)
  213:         expected = tda[:, 0] + Timedelta(hours=12)
  214:         tm.assert_timedelta_array_equal(result, expected)
  215: 
  216:         result = tda.mean(axis=None)
  217:         expected = tdi.mean()
  218:         assert result == expected
