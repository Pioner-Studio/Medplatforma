    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.arrays import BooleanArray
    7: from pandas.tests.arrays.masked_shared import ComparisonOps
    8: 
    9: 
   10: @pytest.fixture
   11: def data():
   12:     """Fixture returning boolean array with valid and missing data"""
   13:     return pd.array(
   14:         [True, False] * 4 + [np.nan] + [True, False] * 44 + [np.nan] + [True, False],
   15:         dtype="boolean",
   16:     )
   17: 
   18: 
   19: @pytest.fixture
   20: def dtype():
   21:     """Fixture returning BooleanDtype"""
   22:     return pd.BooleanDtype()
   23: 
   24: 
   25: class TestComparisonOps(ComparisonOps):
   26:     def test_compare_scalar(self, data, comparison_op):
   27:         self._compare_other(data, comparison_op, True)
   28: 
   29:     def test_compare_array(self, data, comparison_op):
   30:         other = pd.array([True] * len(data), dtype="boolean")
   31:         self._compare_other(data, comparison_op, other)
   32:         other = np.array([True] * len(data))
   33:         self._compare_other(data, comparison_op, other)
   34:         other = pd.Series([True] * len(data))
   35:         self._compare_other(data, comparison_op, other)
   36: 
   37:     @pytest.mark.parametrize("other", [True, False, pd.NA])
   38:     def test_scalar(self, other, comparison_op, dtype):
   39:         ComparisonOps.test_scalar(self, other, comparison_op, dtype)
   40: 
   41:     def test_array(self, comparison_op):
   42:         op = comparison_op
   43:         a = pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
   44:         b = pd.array([True, False, None] * 3, dtype="boolean")
   45: 
   46:         result = op(a, b)
   47: 
   48:         values = op(a._data, b._data)
   49:         mask = a._mask | b._mask
   50:         expected = BooleanArray(values, mask)
   51:         tm.assert_extension_array_equal(result, expected)
   52: 
   53:         # ensure we haven't mutated anything inplace
   54:         result[0] = None
   55:         tm.assert_extension_array_equal(
   56:             a, pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
   57:         )
   58:         tm.assert_extension_array_equal(
   59:             b, pd.array([True, False, None] * 3, dtype="boolean")
   60:         )
