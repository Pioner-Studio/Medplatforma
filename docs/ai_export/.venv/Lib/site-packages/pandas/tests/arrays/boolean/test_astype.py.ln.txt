    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_astype():
    9:     # with missing values
   10:     arr = pd.array([True, False, None], dtype="boolean")
   11: 
   12:     with pytest.raises(ValueError, match="cannot convert NA to integer"):
   13:         arr.astype("int64")
   14: 
   15:     with pytest.raises(ValueError, match="cannot convert float NaN to"):
   16:         arr.astype("bool")
   17: 
   18:     result = arr.astype("float64")
   19:     expected = np.array([1, 0, np.nan], dtype="float64")
   20:     tm.assert_numpy_array_equal(result, expected)
   21: 
   22:     result = arr.astype("str")
   23:     expected = np.array(["True", "False", "<NA>"], dtype=f"{tm.ENDIAN}U5")
   24:     tm.assert_numpy_array_equal(result, expected)
   25: 
   26:     # no missing values
   27:     arr = pd.array([True, False, True], dtype="boolean")
   28:     result = arr.astype("int64")
   29:     expected = np.array([1, 0, 1], dtype="int64")
   30:     tm.assert_numpy_array_equal(result, expected)
   31: 
   32:     result = arr.astype("bool")
   33:     expected = np.array([True, False, True], dtype="bool")
   34:     tm.assert_numpy_array_equal(result, expected)
   35: 
   36: 
   37: def test_astype_to_boolean_array():
   38:     # astype to BooleanArray
   39:     arr = pd.array([True, False, None], dtype="boolean")
   40: 
   41:     result = arr.astype("boolean")
   42:     tm.assert_extension_array_equal(result, arr)
   43:     result = arr.astype(pd.BooleanDtype())
   44:     tm.assert_extension_array_equal(result, arr)
   45: 
   46: 
   47: def test_astype_to_integer_array():
   48:     # astype to IntegerArray
   49:     arr = pd.array([True, False, None], dtype="boolean")
   50: 
   51:     result = arr.astype("Int64")
   52:     expected = pd.array([1, 0, None], dtype="Int64")
   53:     tm.assert_extension_array_equal(result, expected)
