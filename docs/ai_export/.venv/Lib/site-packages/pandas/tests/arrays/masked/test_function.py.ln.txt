    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.dtypes.common import is_integer_dtype
    5: 
    6: import pandas as pd
    7: import pandas._testing as tm
    8: from pandas.core.arrays import BaseMaskedArray
    9: 
   10: arrays = [pd.array([1, 2, 3, None], dtype=dtype) for dtype in tm.ALL_INT_EA_DTYPES]
   11: arrays += [
   12:     pd.array([0.141, -0.268, 5.895, None], dtype=dtype) for dtype in tm.FLOAT_EA_DTYPES
   13: ]
   14: 
   15: 
   16: @pytest.fixture(params=arrays, ids=[a.dtype.name for a in arrays])
   17: def data(request):
   18:     """
   19:     Fixture returning parametrized 'data' array with different integer and
   20:     floating point types
   21:     """
   22:     return request.param
   23: 
   24: 
   25: @pytest.fixture()
   26: def numpy_dtype(data):
   27:     """
   28:     Fixture returning numpy dtype from 'data' input array.
   29:     """
   30:     # For integer dtype, the numpy conversion must be done to float
   31:     if is_integer_dtype(data):
   32:         numpy_dtype = float
   33:     else:
   34:         numpy_dtype = data.dtype.type
   35:     return numpy_dtype
   36: 
   37: 
   38: def test_round(data, numpy_dtype):
   39:     # No arguments
   40:     result = data.round()
   41:     expected = pd.array(
   42:         np.round(data.to_numpy(dtype=numpy_dtype, na_value=None)), dtype=data.dtype
   43:     )
   44:     tm.assert_extension_array_equal(result, expected)
   45: 
   46:     # Decimals argument
   47:     result = data.round(decimals=2)
   48:     expected = pd.array(
   49:         np.round(data.to_numpy(dtype=numpy_dtype, na_value=None), decimals=2),
   50:         dtype=data.dtype,
   51:     )
   52:     tm.assert_extension_array_equal(result, expected)
   53: 
   54: 
   55: def test_tolist(data):
   56:     result = data.tolist()
   57:     expected = list(data)
   58:     tm.assert_equal(result, expected)
   59: 
   60: 
   61: def test_to_numpy():
   62:     # GH#56991
   63: 
   64:     class MyStringArray(BaseMaskedArray):
   65:         dtype = pd.StringDtype()
   66:         _dtype_cls = pd.StringDtype
   67:         _internal_fill_value = pd.NA
   68: 
   69:     arr = MyStringArray(
   70:         values=np.array(["a", "b", "c"]), mask=np.array([False, True, False])
   71:     )
   72:     result = arr.to_numpy()
   73:     expected = np.array(["a", pd.NA, "c"])
   74:     tm.assert_numpy_array_equal(result, expected)
