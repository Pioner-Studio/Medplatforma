    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: @pytest.mark.parametrize(
    9:     "ufunc", [np.add, np.logical_or, np.logical_and, np.logical_xor]
   10: )
   11: def test_ufuncs_binary(ufunc):
   12:     # two BooleanArrays
   13:     a = pd.array([True, False, None], dtype="boolean")
   14:     result = ufunc(a, a)
   15:     expected = pd.array(ufunc(a._data, a._data), dtype="boolean")
   16:     expected[a._mask] = np.nan
   17:     tm.assert_extension_array_equal(result, expected)
   18: 
   19:     s = pd.Series(a)
   20:     result = ufunc(s, a)
   21:     expected = pd.Series(ufunc(a._data, a._data), dtype="boolean")
   22:     expected[a._mask] = np.nan
   23:     tm.assert_series_equal(result, expected)
   24: 
   25:     # Boolean with numpy array
   26:     arr = np.array([True, True, False])
   27:     result = ufunc(a, arr)
   28:     expected = pd.array(ufunc(a._data, arr), dtype="boolean")
   29:     expected[a._mask] = np.nan
   30:     tm.assert_extension_array_equal(result, expected)
   31: 
   32:     result = ufunc(arr, a)
   33:     expected = pd.array(ufunc(arr, a._data), dtype="boolean")
   34:     expected[a._mask] = np.nan
   35:     tm.assert_extension_array_equal(result, expected)
   36: 
   37:     # BooleanArray with scalar
   38:     result = ufunc(a, True)
   39:     expected = pd.array(ufunc(a._data, True), dtype="boolean")
   40:     expected[a._mask] = np.nan
   41:     tm.assert_extension_array_equal(result, expected)
   42: 
   43:     result = ufunc(True, a)
   44:     expected = pd.array(ufunc(True, a._data), dtype="boolean")
   45:     expected[a._mask] = np.nan
   46:     tm.assert_extension_array_equal(result, expected)
   47: 
   48:     # not handled types
   49:     msg = r"operand type\(s\) all returned NotImplemented from __array_ufunc__"
   50:     with pytest.raises(TypeError, match=msg):
   51:         ufunc(a, "test")
   52: 
   53: 
   54: @pytest.mark.parametrize("ufunc", [np.logical_not])
   55: def test_ufuncs_unary(ufunc):
   56:     a = pd.array([True, False, None], dtype="boolean")
   57:     result = ufunc(a)
   58:     expected = pd.array(ufunc(a._data), dtype="boolean")
   59:     expected[a._mask] = np.nan
   60:     tm.assert_extension_array_equal(result, expected)
   61: 
   62:     ser = pd.Series(a)
   63:     result = ufunc(ser)
   64:     expected = pd.Series(ufunc(a._data), dtype="boolean")
   65:     expected[a._mask] = np.nan
   66:     tm.assert_series_equal(result, expected)
   67: 
   68: 
   69: def test_ufunc_numeric():
   70:     # np.sqrt on np.bool_ returns float16, which we upcast to Float32
   71:     #  bc we do not have Float16
   72:     arr = pd.array([True, False, None], dtype="boolean")
   73: 
   74:     res = np.sqrt(arr)
   75: 
   76:     expected = pd.array([1, 0, None], dtype="Float32")
   77:     tm.assert_extension_array_equal(res, expected)
   78: 
   79: 
   80: @pytest.mark.parametrize("values", [[True, False], [True, None]])
   81: def test_ufunc_reduce_raises(values):
   82:     arr = pd.array(values, dtype="boolean")
   83: 
   84:     res = np.add.reduce(arr)
   85:     if arr[-1] is pd.NA:
   86:         expected = pd.NA
   87:     else:
   88:         expected = arr._data.sum()
   89:     tm.assert_almost_equal(res, expected)
   90: 
   91: 
   92: def test_value_counts_na():
   93:     arr = pd.array([True, False, pd.NA], dtype="boolean")
   94:     result = arr.value_counts(dropna=False)
   95:     expected = pd.Series([1, 1, 1], index=arr, dtype="Int64", name="count")
   96:     assert expected.index.dtype == arr.dtype
   97:     tm.assert_series_equal(result, expected)
   98: 
   99:     result = arr.value_counts(dropna=True)
  100:     expected = pd.Series([1, 1], index=arr[:-1], dtype="Int64", name="count")
  101:     assert expected.index.dtype == arr.dtype
  102:     tm.assert_series_equal(result, expected)
  103: 
  104: 
  105: def test_value_counts_with_normalize():
  106:     ser = pd.Series([True, False, pd.NA], dtype="boolean")
  107:     result = ser.value_counts(normalize=True)
  108:     expected = pd.Series([1, 1], index=ser[:-1], dtype="Float64", name="proportion") / 2
  109:     assert expected.index.dtype == "boolean"
  110:     tm.assert_series_equal(result, expected)
  111: 
  112: 
  113: def test_diff():
  114:     a = pd.array(
  115:         [True, True, False, False, True, None, True, None, False], dtype="boolean"
  116:     )
  117:     result = pd.core.algorithms.diff(a, 1)
  118:     expected = pd.array(
  119:         [None, False, True, False, True, None, None, None, None], dtype="boolean"
  120:     )
  121:     tm.assert_extension_array_equal(result, expected)
  122: 
  123:     ser = pd.Series(a)
  124:     result = ser.diff()
  125:     expected = pd.Series(expected)
  126:     tm.assert_series_equal(result, expected)
