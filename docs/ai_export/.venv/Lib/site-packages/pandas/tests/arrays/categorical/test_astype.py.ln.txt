    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     CategoricalDtype,
    7:     CategoricalIndex,
    8:     DatetimeIndex,
    9:     Interval,
   10:     NaT,
   11:     Period,
   12:     Timestamp,
   13:     array,
   14:     to_datetime,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: class TestAstype:
   20:     @pytest.mark.parametrize("cls", [Categorical, CategoricalIndex])
   21:     @pytest.mark.parametrize("values", [[1, np.nan], [Timestamp("2000"), NaT]])
   22:     def test_astype_nan_to_int(self, cls, values):
   23:         # GH#28406
   24:         obj = cls(values)
   25: 
   26:         msg = "Cannot (cast|convert)"
   27:         with pytest.raises((ValueError, TypeError), match=msg):
   28:             obj.astype(int)
   29: 
   30:     @pytest.mark.parametrize(
   31:         "expected",
   32:         [
   33:             array(["2019", "2020"], dtype="datetime64[ns, UTC]"),
   34:             array([0, 0], dtype="timedelta64[ns]"),
   35:             array([Period("2019"), Period("2020")], dtype="period[Y-DEC]"),
   36:             array([Interval(0, 1), Interval(1, 2)], dtype="interval"),
   37:             array([1, np.nan], dtype="Int64"),
   38:         ],
   39:     )
   40:     def test_astype_category_to_extension_dtype(self, expected):
   41:         # GH#28668
   42:         result = expected.astype("category").astype(expected.dtype)
   43: 
   44:         tm.assert_extension_array_equal(result, expected)
   45: 
   46:     @pytest.mark.parametrize(
   47:         "dtype, expected",
   48:         [
   49:             (
   50:                 "datetime64[ns]",
   51:                 np.array(["2015-01-01T00:00:00.000000000"], dtype="datetime64[ns]"),
   52:             ),
   53:             (
   54:                 "datetime64[ns, MET]",
   55:                 DatetimeIndex([Timestamp("2015-01-01 00:00:00+0100", tz="MET")]).array,
   56:             ),
   57:         ],
   58:     )
   59:     def test_astype_to_datetime64(self, dtype, expected):
   60:         # GH#28448
   61:         result = Categorical(["2015-01-01"]).astype(dtype)
   62:         assert result == expected
   63: 
   64:     def test_astype_str_int_categories_to_nullable_int(self):
   65:         # GH#39616
   66:         dtype = CategoricalDtype([str(i) for i in range(5)])
   67:         codes = np.random.default_rng(2).integers(5, size=20)
   68:         arr = Categorical.from_codes(codes, dtype=dtype)
   69: 
   70:         res = arr.astype("Int64")
   71:         expected = array(codes, dtype="Int64")
   72:         tm.assert_extension_array_equal(res, expected)
   73: 
   74:     def test_astype_str_int_categories_to_nullable_float(self):
   75:         # GH#39616
   76:         dtype = CategoricalDtype([str(i / 2) for i in range(5)])
   77:         codes = np.random.default_rng(2).integers(5, size=20)
   78:         arr = Categorical.from_codes(codes, dtype=dtype)
   79: 
   80:         res = arr.astype("Float64")
   81:         expected = array(codes, dtype="Float64") / 2
   82:         tm.assert_extension_array_equal(res, expected)
   83: 
   84:     @pytest.mark.parametrize("ordered", [True, False])
   85:     def test_astype(self, ordered):
   86:         # string
   87:         cat = Categorical(list("abbaaccc"), ordered=ordered)
   88:         result = cat.astype(object)
   89:         expected = np.array(cat)
   90:         tm.assert_numpy_array_equal(result, expected)
   91: 
   92:         msg = r"Cannot cast object|string dtype to float64"
   93:         with pytest.raises(ValueError, match=msg):
   94:             cat.astype(float)
   95: 
   96:         # numeric
   97:         cat = Categorical([0, 1, 2, 2, 1, 0, 1, 0, 2], ordered=ordered)
   98:         result = cat.astype(object)
   99:         expected = np.array(cat, dtype=object)
  100:         tm.assert_numpy_array_equal(result, expected)
  101: 
  102:         result = cat.astype(int)
  103:         expected = np.array(cat, dtype="int")
  104:         tm.assert_numpy_array_equal(result, expected)
  105: 
  106:         result = cat.astype(float)
  107:         expected = np.array(cat, dtype=float)
  108:         tm.assert_numpy_array_equal(result, expected)
  109: 
  110:     @pytest.mark.parametrize("dtype_ordered", [True, False])
  111:     @pytest.mark.parametrize("cat_ordered", [True, False])
  112:     def test_astype_category(self, dtype_ordered, cat_ordered):
  113:         # GH#10696/GH#18593
  114:         data = list("abcaacbab")
  115:         cat = Categorical(data, categories=list("bac"), ordered=cat_ordered)
  116: 
  117:         # standard categories
  118:         dtype = CategoricalDtype(ordered=dtype_ordered)
  119:         result = cat.astype(dtype)
  120:         expected = Categorical(data, categories=cat.categories, ordered=dtype_ordered)
  121:         tm.assert_categorical_equal(result, expected)
  122: 
  123:         # non-standard categories
  124:         dtype = CategoricalDtype(list("adc"), dtype_ordered)
  125:         result = cat.astype(dtype)
  126:         expected = Categorical(data, dtype=dtype)
  127:         tm.assert_categorical_equal(result, expected)
  128: 
  129:         if dtype_ordered is False:
  130:             # dtype='category' can't specify ordered, so only test once
  131:             result = cat.astype("category")
  132:             expected = cat
  133:             tm.assert_categorical_equal(result, expected)
  134: 
  135:     def test_astype_object_datetime_categories(self):
  136:         # GH#40754
  137:         cat = Categorical(to_datetime(["2021-03-27", NaT]))
  138:         result = cat.astype(object)
  139:         expected = np.array([Timestamp("2021-03-27 00:00:00"), NaT], dtype="object")
  140:         tm.assert_numpy_array_equal(result, expected)
  141: 
  142:     def test_astype_object_timestamp_categories(self):
  143:         # GH#18024
  144:         cat = Categorical([Timestamp("2014-01-01")])
  145:         result = cat.astype(object)
  146:         expected = np.array([Timestamp("2014-01-01 00:00:00")], dtype="object")
  147:         tm.assert_numpy_array_equal(result, expected)
  148: 
  149:     def test_astype_category_readonly_mask_values(self):
  150:         # GH#53658
  151:         arr = array([0, 1, 2], dtype="Int64")
  152:         arr._mask.flags["WRITEABLE"] = False
  153:         result = arr.astype("category")
  154:         expected = array([0, 1, 2], dtype="Int64").astype("category")
  155:         tm.assert_extension_array_equal(result, expected)
