    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: def test_astype():
    9:     # with missing values
   10:     arr = pd.array([0.1, 0.2, None], dtype="Float64")
   11: 
   12:     with pytest.raises(ValueError, match="cannot convert NA to integer"):
   13:         arr.astype("int64")
   14: 
   15:     with pytest.raises(ValueError, match="cannot convert float NaN to bool"):
   16:         arr.astype("bool")
   17: 
   18:     result = arr.astype("float64")
   19:     expected = np.array([0.1, 0.2, np.nan], dtype="float64")
   20:     tm.assert_numpy_array_equal(result, expected)
   21: 
   22:     # no missing values
   23:     arr = pd.array([0.0, 1.0, 0.5], dtype="Float64")
   24:     result = arr.astype("int64")
   25:     expected = np.array([0, 1, 0], dtype="int64")
   26:     tm.assert_numpy_array_equal(result, expected)
   27: 
   28:     result = arr.astype("bool")
   29:     expected = np.array([False, True, True], dtype="bool")
   30:     tm.assert_numpy_array_equal(result, expected)
   31: 
   32: 
   33: def test_astype_to_floating_array():
   34:     # astype to FloatingArray
   35:     arr = pd.array([0.0, 1.0, None], dtype="Float64")
   36: 
   37:     result = arr.astype("Float64")
   38:     tm.assert_extension_array_equal(result, arr)
   39:     result = arr.astype(pd.Float64Dtype())
   40:     tm.assert_extension_array_equal(result, arr)
   41:     result = arr.astype("Float32")
   42:     expected = pd.array([0.0, 1.0, None], dtype="Float32")
   43:     tm.assert_extension_array_equal(result, expected)
   44: 
   45: 
   46: def test_astype_to_boolean_array():
   47:     # astype to BooleanArray
   48:     arr = pd.array([0.0, 1.0, None], dtype="Float64")
   49: 
   50:     result = arr.astype("boolean")
   51:     expected = pd.array([False, True, None], dtype="boolean")
   52:     tm.assert_extension_array_equal(result, expected)
   53:     result = arr.astype(pd.BooleanDtype())
   54:     tm.assert_extension_array_equal(result, expected)
   55: 
   56: 
   57: def test_astype_to_integer_array():
   58:     # astype to IntegerArray
   59:     arr = pd.array([0.0, 1.5, None], dtype="Float64")
   60: 
   61:     result = arr.astype("Int64")
   62:     expected = pd.array([0, 1, None], dtype="Int64")
   63:     tm.assert_extension_array_equal(result, expected)
   64: 
   65: 
   66: def test_astype_str():
   67:     a = pd.array([0.1, 0.2, None], dtype="Float64")
   68:     expected = np.array(["0.1", "0.2", "<NA>"], dtype="U32")
   69: 
   70:     tm.assert_numpy_array_equal(a.astype(str), expected)
   71:     tm.assert_numpy_array_equal(a.astype("str"), expected)
   72: 
   73: 
   74: def test_astype_copy():
   75:     arr = pd.array([0.1, 0.2, None], dtype="Float64")
   76:     orig = pd.array([0.1, 0.2, None], dtype="Float64")
   77: 
   78:     # copy=True -> ensure both data and mask are actual copies
   79:     result = arr.astype("Float64", copy=True)
   80:     assert result is not arr
   81:     assert not tm.shares_memory(result, arr)
   82:     result[0] = 10
   83:     tm.assert_extension_array_equal(arr, orig)
   84:     result[0] = pd.NA
   85:     tm.assert_extension_array_equal(arr, orig)
   86: 
   87:     # copy=False
   88:     result = arr.astype("Float64", copy=False)
   89:     assert result is arr
   90:     assert np.shares_memory(result._data, arr._data)
   91:     assert np.shares_memory(result._mask, arr._mask)
   92:     result[0] = 10
   93:     assert arr[0] == 10
   94:     result[0] = pd.NA
   95:     assert arr[0] is pd.NA
   96: 
   97:     # astype to different dtype -> always needs a copy -> even with copy=False
   98:     # we need to ensure that also the mask is actually copied
   99:     arr = pd.array([0.1, 0.2, None], dtype="Float64")
  100:     orig = pd.array([0.1, 0.2, None], dtype="Float64")
  101: 
  102:     result = arr.astype("Float32", copy=False)
  103:     assert not tm.shares_memory(result, arr)
  104:     result[0] = 10
  105:     tm.assert_extension_array_equal(arr, orig)
  106:     result[0] = pd.NA
  107:     tm.assert_extension_array_equal(arr, orig)
  108: 
  109: 
  110: def test_astype_object(dtype):
  111:     arr = pd.array([1.0, pd.NA], dtype=dtype)
  112: 
  113:     result = arr.astype(object)
  114:     expected = np.array([1.0, pd.NA], dtype=object)
  115:     tm.assert_numpy_array_equal(result, expected)
  116:     # check exact element types
  117:     assert isinstance(result[0], float)
  118:     assert result[1] is pd.NA
  119: 
  120: 
  121: def test_Float64_conversion():
  122:     # GH#40729
  123:     testseries = pd.Series(["1", "2", "3", "4"], dtype="object")
  124:     result = testseries.astype(pd.Float64Dtype())
  125: 
  126:     expected = pd.Series([1.0, 2.0, 3.0, 4.0], dtype=pd.Float64Dtype())
  127: 
  128:     tm.assert_series_equal(result, expected)
