    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: 
    7: 
    8: @pytest.mark.parametrize("ordered", [True, False])
    9: @pytest.mark.parametrize("categories", [["b", "a", "c"], ["a", "b", "c", "d"]])
   10: def test_factorize(categories, ordered):
   11:     cat = pd.Categorical(
   12:         ["b", "b", "a", "c", None], categories=categories, ordered=ordered
   13:     )
   14:     codes, uniques = pd.factorize(cat)
   15:     expected_codes = np.array([0, 0, 1, 2, -1], dtype=np.intp)
   16:     expected_uniques = pd.Categorical(
   17:         ["b", "a", "c"], categories=categories, ordered=ordered
   18:     )
   19: 
   20:     tm.assert_numpy_array_equal(codes, expected_codes)
   21:     tm.assert_categorical_equal(uniques, expected_uniques)
   22: 
   23: 
   24: def test_factorized_sort():
   25:     cat = pd.Categorical(["b", "b", None, "a"])
   26:     codes, uniques = pd.factorize(cat, sort=True)
   27:     expected_codes = np.array([1, 1, -1, 0], dtype=np.intp)
   28:     expected_uniques = pd.Categorical(["a", "b"])
   29: 
   30:     tm.assert_numpy_array_equal(codes, expected_codes)
   31:     tm.assert_categorical_equal(uniques, expected_uniques)
   32: 
   33: 
   34: def test_factorized_sort_ordered():
   35:     cat = pd.Categorical(
   36:         ["b", "b", None, "a"], categories=["c", "b", "a"], ordered=True
   37:     )
   38: 
   39:     codes, uniques = pd.factorize(cat, sort=True)
   40:     expected_codes = np.array([0, 0, -1, 1], dtype=np.intp)
   41:     expected_uniques = pd.Categorical(
   42:         ["b", "a"], categories=["c", "b", "a"], ordered=True
   43:     )
   44: 
   45:     tm.assert_numpy_array_equal(codes, expected_codes)
   46:     tm.assert_categorical_equal(uniques, expected_uniques)
   47: 
   48: 
   49: def test_isin_cats():
   50:     # GH2003
   51:     cat = pd.Categorical(["a", "b", np.nan])
   52: 
   53:     result = cat.isin(["a", np.nan])
   54:     expected = np.array([True, False, True], dtype=bool)
   55:     tm.assert_numpy_array_equal(expected, result)
   56: 
   57:     result = cat.isin(["a", "c"])
   58:     expected = np.array([True, False, False], dtype=bool)
   59:     tm.assert_numpy_array_equal(expected, result)
   60: 
   61: 
   62: @pytest.mark.parametrize("value", [[""], [None, ""], [pd.NaT, ""]])
   63: def test_isin_cats_corner_cases(value):
   64:     # GH36550
   65:     cat = pd.Categorical([""])
   66:     result = cat.isin(value)
   67:     expected = np.array([True], dtype=bool)
   68:     tm.assert_numpy_array_equal(expected, result)
   69: 
   70: 
   71: @pytest.mark.parametrize("empty", [[], pd.Series(dtype=object), np.array([])])
   72: def test_isin_empty(empty):
   73:     s = pd.Categorical(["a", "b"])
   74:     expected = np.array([False, False], dtype=bool)
   75: 
   76:     result = s.isin(empty)
   77:     tm.assert_numpy_array_equal(expected, result)
   78: 
   79: 
   80: def test_diff():
   81:     ser = pd.Series([1, 2, 3], dtype="category")
   82: 
   83:     msg = "Convert to a suitable dtype"
   84:     with pytest.raises(TypeError, match=msg):
   85:         ser.diff()
   86: 
   87:     df = ser.to_frame(name="A")
   88:     with pytest.raises(TypeError, match=msg):
   89:         df.diff()
