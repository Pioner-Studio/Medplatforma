    1: """Tests for Interval-Interval operations, such as overlaps, contains, etc."""
    2: import numpy as np
    3: import pytest
    4: 
    5: from pandas import (
    6:     Interval,
    7:     IntervalIndex,
    8:     Timedelta,
    9:     Timestamp,
   10: )
   11: import pandas._testing as tm
   12: from pandas.core.arrays import IntervalArray
   13: 
   14: 
   15: @pytest.fixture(params=[IntervalArray, IntervalIndex])
   16: def constructor(request):
   17:     """
   18:     Fixture for testing both interval container classes.
   19:     """
   20:     return request.param
   21: 
   22: 
   23: @pytest.fixture(
   24:     params=[
   25:         (Timedelta("0 days"), Timedelta("1 day")),
   26:         (Timestamp("2018-01-01"), Timedelta("1 day")),
   27:         (0, 1),
   28:     ],
   29:     ids=lambda x: type(x[0]).__name__,
   30: )
   31: def start_shift(request):
   32:     """
   33:     Fixture for generating intervals of different types from a start value
   34:     and a shift value that can be added to start to generate an endpoint.
   35:     """
   36:     return request.param
   37: 
   38: 
   39: class TestOverlaps:
   40:     def test_overlaps_interval(self, constructor, start_shift, closed, other_closed):
   41:         start, shift = start_shift
   42:         interval = Interval(start, start + 3 * shift, other_closed)
   43: 
   44:         # intervals: identical, nested, spanning, partial, adjacent, disjoint
   45:         tuples = [
   46:             (start, start + 3 * shift),
   47:             (start + shift, start + 2 * shift),
   48:             (start - shift, start + 4 * shift),
   49:             (start + 2 * shift, start + 4 * shift),
   50:             (start + 3 * shift, start + 4 * shift),
   51:             (start + 4 * shift, start + 5 * shift),
   52:         ]
   53:         interval_container = constructor.from_tuples(tuples, closed)
   54: 
   55:         adjacent = interval.closed_right and interval_container.closed_left
   56:         expected = np.array([True, True, True, True, adjacent, False])
   57:         result = interval_container.overlaps(interval)
   58:         tm.assert_numpy_array_equal(result, expected)
   59: 
   60:     @pytest.mark.parametrize("other_constructor", [IntervalArray, IntervalIndex])
   61:     def test_overlaps_interval_container(self, constructor, other_constructor):
   62:         # TODO: modify this test when implemented
   63:         interval_container = constructor.from_breaks(range(5))
   64:         other_container = other_constructor.from_breaks(range(5))
   65:         with pytest.raises(NotImplementedError, match="^$"):
   66:             interval_container.overlaps(other_container)
   67: 
   68:     def test_overlaps_na(self, constructor, start_shift):
   69:         """NA values are marked as False"""
   70:         start, shift = start_shift
   71:         interval = Interval(start, start + shift)
   72: 
   73:         tuples = [
   74:             (start, start + shift),
   75:             np.nan,
   76:             (start + 2 * shift, start + 3 * shift),
   77:         ]
   78:         interval_container = constructor.from_tuples(tuples)
   79: 
   80:         expected = np.array([True, False, False])
   81:         result = interval_container.overlaps(interval)
   82:         tm.assert_numpy_array_equal(result, expected)
   83: 
   84:     @pytest.mark.parametrize(
   85:         "other",
   86:         [10, True, "foo", Timedelta("1 day"), Timestamp("2018-01-01")],
   87:         ids=lambda x: type(x).__name__,
   88:     )
   89:     def test_overlaps_invalid_type(self, constructor, other):
   90:         interval_container = constructor.from_breaks(range(5))
   91:         msg = f"`other` must be Interval-like, got {type(other).__name__}"
   92:         with pytest.raises(TypeError, match=msg):
   93:             interval_container.overlaps(other)
