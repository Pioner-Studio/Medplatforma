    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: import pandas._testing as tm
    6: from pandas.core.arrays import FloatingArray
    7: from pandas.tests.arrays.masked_shared import (
    8:     ComparisonOps,
    9:     NumericOps,
   10: )
   11: 
   12: 
   13: class TestComparisonOps(NumericOps, ComparisonOps):
   14:     @pytest.mark.parametrize("other", [True, False, pd.NA, -1.0, 0.0, 1])
   15:     def test_scalar(self, other, comparison_op, dtype):
   16:         ComparisonOps.test_scalar(self, other, comparison_op, dtype)
   17: 
   18:     def test_compare_with_integerarray(self, comparison_op):
   19:         op = comparison_op
   20:         a = pd.array([0, 1, None] * 3, dtype="Int64")
   21:         b = pd.array([0] * 3 + [1] * 3 + [None] * 3, dtype="Float64")
   22:         other = b.astype("Int64")
   23:         expected = op(a, other)
   24:         result = op(a, b)
   25:         tm.assert_extension_array_equal(result, expected)
   26:         expected = op(other, a)
   27:         result = op(b, a)
   28:         tm.assert_extension_array_equal(result, expected)
   29: 
   30: 
   31: def test_equals():
   32:     # GH-30652
   33:     # equals is generally tested in /tests/extension/base/methods, but this
   34:     # specifically tests that two arrays of the same class but different dtype
   35:     # do not evaluate equal
   36:     a1 = pd.array([1, 2, None], dtype="Float64")
   37:     a2 = pd.array([1, 2, None], dtype="Float32")
   38:     assert a1.equals(a2) is False
   39: 
   40: 
   41: def test_equals_nan_vs_na():
   42:     # GH#44382
   43: 
   44:     mask = np.zeros(3, dtype=bool)
   45:     data = np.array([1.0, np.nan, 3.0], dtype=np.float64)
   46: 
   47:     left = FloatingArray(data, mask)
   48:     assert left.equals(left)
   49:     tm.assert_extension_array_equal(left, left)
   50: 
   51:     assert left.equals(left.copy())
   52:     assert left.equals(FloatingArray(data.copy(), mask.copy()))
   53: 
   54:     mask2 = np.array([False, True, False], dtype=bool)
   55:     data2 = np.array([1.0, 2.0, 3.0], dtype=np.float64)
   56:     right = FloatingArray(data2, mask2)
   57:     assert right.equals(right)
   58:     tm.assert_extension_array_equal(right, right)
   59: 
   60:     assert not left.equals(right)
   61: 
   62:     # with mask[1] = True, the only difference is data[1], which should
   63:     #  not matter for equals
   64:     mask[1] = True
   65:     assert left.equals(right)
