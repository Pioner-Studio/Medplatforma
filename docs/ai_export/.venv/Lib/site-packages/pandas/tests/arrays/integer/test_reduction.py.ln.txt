    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Series,
    8:     array,
    9: )
   10: import pandas._testing as tm
   11: 
   12: 
   13: @pytest.mark.parametrize(
   14:     "op, expected",
   15:     [
   16:         ["sum", np.int64(3)],
   17:         ["prod", np.int64(2)],
   18:         ["min", np.int64(1)],
   19:         ["max", np.int64(2)],
   20:         ["mean", np.float64(1.5)],
   21:         ["median", np.float64(1.5)],
   22:         ["var", np.float64(0.5)],
   23:         ["std", np.float64(0.5**0.5)],
   24:         ["skew", pd.NA],
   25:         ["kurt", pd.NA],
   26:         ["any", True],
   27:         ["all", True],
   28:     ],
   29: )
   30: def test_series_reductions(op, expected):
   31:     ser = Series([1, 2], dtype="Int64")
   32:     result = getattr(ser, op)()
   33:     tm.assert_equal(result, expected)
   34: 
   35: 
   36: @pytest.mark.parametrize(
   37:     "op, expected",
   38:     [
   39:         ["sum", Series([3], index=["a"], dtype="Int64")],
   40:         ["prod", Series([2], index=["a"], dtype="Int64")],
   41:         ["min", Series([1], index=["a"], dtype="Int64")],
   42:         ["max", Series([2], index=["a"], dtype="Int64")],
   43:         ["mean", Series([1.5], index=["a"], dtype="Float64")],
   44:         ["median", Series([1.5], index=["a"], dtype="Float64")],
   45:         ["var", Series([0.5], index=["a"], dtype="Float64")],
   46:         ["std", Series([0.5**0.5], index=["a"], dtype="Float64")],
   47:         ["skew", Series([pd.NA], index=["a"], dtype="Float64")],
   48:         ["kurt", Series([pd.NA], index=["a"], dtype="Float64")],
   49:         ["any", Series([True], index=["a"], dtype="boolean")],
   50:         ["all", Series([True], index=["a"], dtype="boolean")],
   51:     ],
   52: )
   53: def test_dataframe_reductions(op, expected):
   54:     df = DataFrame({"a": array([1, 2], dtype="Int64")})
   55:     result = getattr(df, op)()
   56:     tm.assert_series_equal(result, expected)
   57: 
   58: 
   59: @pytest.mark.parametrize(
   60:     "op, expected",
   61:     [
   62:         ["sum", array([1, 3], dtype="Int64")],
   63:         ["prod", array([1, 3], dtype="Int64")],
   64:         ["min", array([1, 3], dtype="Int64")],
   65:         ["max", array([1, 3], dtype="Int64")],
   66:         ["mean", array([1, 3], dtype="Float64")],
   67:         ["median", array([1, 3], dtype="Float64")],
   68:         ["var", array([pd.NA], dtype="Float64")],
   69:         ["std", array([pd.NA], dtype="Float64")],
   70:         ["skew", array([pd.NA], dtype="Float64")],
   71:         ["any", array([True, True], dtype="boolean")],
   72:         ["all", array([True, True], dtype="boolean")],
   73:     ],
   74: )
   75: def test_groupby_reductions(op, expected):
   76:     df = DataFrame(
   77:         {
   78:             "A": ["a", "b", "b"],
   79:             "B": array([1, None, 3], dtype="Int64"),
   80:         }
   81:     )
   82:     result = getattr(df.groupby("A"), op)()
   83:     expected = DataFrame(expected, index=pd.Index(["a", "b"], name="A"), columns=["B"])
   84: 
   85:     tm.assert_frame_equal(result, expected)
   86: 
   87: 
   88: @pytest.mark.parametrize(
   89:     "op, expected",
   90:     [
   91:         ["sum", Series([4, 4], index=["B", "C"], dtype="Float64")],
   92:         ["prod", Series([3, 3], index=["B", "C"], dtype="Float64")],
   93:         ["min", Series([1, 1], index=["B", "C"], dtype="Float64")],
   94:         ["max", Series([3, 3], index=["B", "C"], dtype="Float64")],
   95:         ["mean", Series([2, 2], index=["B", "C"], dtype="Float64")],
   96:         ["median", Series([2, 2], index=["B", "C"], dtype="Float64")],
   97:         ["var", Series([2, 2], index=["B", "C"], dtype="Float64")],
   98:         ["std", Series([2**0.5, 2**0.5], index=["B", "C"], dtype="Float64")],
   99:         ["skew", Series([pd.NA, pd.NA], index=["B", "C"], dtype="Float64")],
  100:         ["kurt", Series([pd.NA, pd.NA], index=["B", "C"], dtype="Float64")],
  101:         ["any", Series([True, True, True], index=["A", "B", "C"], dtype="boolean")],
  102:         ["all", Series([True, True, True], index=["A", "B", "C"], dtype="boolean")],
  103:     ],
  104: )
  105: def test_mixed_reductions(op, expected, using_infer_string):
  106:     if op in ["any", "all"] and using_infer_string:
  107:         expected = expected.astype("bool")
  108:     df = DataFrame(
  109:         {
  110:             "A": ["a", "b", "b"],
  111:             "B": [1, None, 3],
  112:             "C": array([1, None, 3], dtype="Int64"),
  113:         }
  114:     )
  115: 
  116:     # series
  117:     result = getattr(df.C, op)()
  118:     tm.assert_equal(result, expected["C"])
  119: 
  120:     # frame
  121:     if op in ["any", "all"]:
  122:         result = getattr(df, op)()
  123:     else:
  124:         result = getattr(df, op)(numeric_only=True)
  125:     tm.assert_series_equal(result, expected)
