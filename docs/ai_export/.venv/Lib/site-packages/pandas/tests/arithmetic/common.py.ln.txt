    1: """
    2: Assertion helpers for arithmetic tests.
    3: """
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas import (
    8:     DataFrame,
    9:     Index,
   10:     Series,
   11:     array,
   12: )
   13: import pandas._testing as tm
   14: from pandas.core.arrays import (
   15:     BooleanArray,
   16:     NumpyExtensionArray,
   17: )
   18: 
   19: 
   20: def assert_cannot_add(left, right, msg="cannot add"):
   21:     """
   22:     Helper to assert that left and right cannot be added.
   23: 
   24:     Parameters
   25:     ----------
   26:     left : object
   27:     right : object
   28:     msg : str, default "cannot add"
   29:     """
   30:     with pytest.raises(TypeError, match=msg):
   31:         left + right
   32:     with pytest.raises(TypeError, match=msg):
   33:         right + left
   34: 
   35: 
   36: def assert_invalid_addsub_type(left, right, msg=None):
   37:     """
   38:     Helper to assert that left and right can be neither added nor subtracted.
   39: 
   40:     Parameters
   41:     ----------
   42:     left : object
   43:     right : object
   44:     msg : str or None, default None
   45:     """
   46:     with pytest.raises(TypeError, match=msg):
   47:         left + right
   48:     with pytest.raises(TypeError, match=msg):
   49:         right + left
   50:     with pytest.raises(TypeError, match=msg):
   51:         left - right
   52:     with pytest.raises(TypeError, match=msg):
   53:         right - left
   54: 
   55: 
   56: def get_upcast_box(left, right, is_cmp: bool = False):
   57:     """
   58:     Get the box to use for 'expected' in an arithmetic or comparison operation.
   59: 
   60:     Parameters
   61:     left : Any
   62:     right : Any
   63:     is_cmp : bool, default False
   64:         Whether the operation is a comparison method.
   65:     """
   66: 
   67:     if isinstance(left, DataFrame) or isinstance(right, DataFrame):
   68:         return DataFrame
   69:     if isinstance(left, Series) or isinstance(right, Series):
   70:         if is_cmp and isinstance(left, Index):
   71:             # Index does not defer for comparisons
   72:             return np.array
   73:         return Series
   74:     if isinstance(left, Index) or isinstance(right, Index):
   75:         if is_cmp:
   76:             return np.array
   77:         return Index
   78:     return tm.to_array
   79: 
   80: 
   81: def assert_invalid_comparison(left, right, box):
   82:     """
   83:     Assert that comparison operations with mismatched types behave correctly.
   84: 
   85:     Parameters
   86:     ----------
   87:     left : np.ndarray, ExtensionArray, Index, or Series
   88:     right : object
   89:     box : {pd.DataFrame, pd.Series, pd.Index, pd.array, tm.to_array}
   90:     """
   91:     # Not for tznaive-tzaware comparison
   92: 
   93:     # Note: not quite the same as how we do this for tm.box_expected
   94:     xbox = box if box not in [Index, array] else np.array
   95: 
   96:     def xbox2(x):
   97:         # Eventually we'd like this to be tighter, but for now we'll
   98:         #  just exclude NumpyExtensionArray[bool]
   99:         if isinstance(x, NumpyExtensionArray):
  100:             return x._ndarray
  101:         if isinstance(x, BooleanArray):
  102:             # NB: we are assuming no pd.NAs for now
  103:             return x.astype(bool)
  104:         return x
  105: 
  106:     # rev_box: box to use for reversed comparisons
  107:     rev_box = xbox
  108:     if isinstance(right, Index) and isinstance(left, Series):
  109:         rev_box = np.array
  110: 
  111:     result = xbox2(left == right)
  112:     expected = xbox(np.zeros(result.shape, dtype=np.bool_))
  113: 
  114:     tm.assert_equal(result, expected)
  115: 
  116:     result = xbox2(right == left)
  117:     tm.assert_equal(result, rev_box(expected))
  118: 
  119:     result = xbox2(left != right)
  120:     tm.assert_equal(result, ~expected)
  121: 
  122:     result = xbox2(right != left)
  123:     tm.assert_equal(result, rev_box(~expected))
  124: 
  125:     msg = "|".join(
  126:         [
  127:             "Invalid comparison between",
  128:             "Cannot compare type",
  129:             "not supported between",
  130:             "invalid type promotion",
  131:             (
  132:                 # GH#36706 npdev 1.20.0 2020-09-28
  133:                 r"The DTypes <class 'numpy.dtype\[datetime64\]'> and "
  134:                 r"<class 'numpy.dtype\[int64\]'> do not have a common DType. "
  135:                 "For example they cannot be stored in a single array unless the "
  136:                 "dtype is `object`."
  137:             ),
  138:         ]
  139:     )
  140:     with pytest.raises(TypeError, match=msg):
  141:         left < right
  142:     with pytest.raises(TypeError, match=msg):
  143:         left <= right
  144:     with pytest.raises(TypeError, match=msg):
  145:         left > right
  146:     with pytest.raises(TypeError, match=msg):
  147:         left >= right
  148:     with pytest.raises(TypeError, match=msg):
  149:         right < left
  150:     with pytest.raises(TypeError, match=msg):
  151:         right <= left
  152:     with pytest.raises(TypeError, match=msg):
  153:         right > left
  154:     with pytest.raises(TypeError, match=msg):
  155:         right >= left
