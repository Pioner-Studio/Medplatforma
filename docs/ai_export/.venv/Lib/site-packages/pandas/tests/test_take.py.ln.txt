    1: from datetime import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs import iNaT
    7: 
    8: import pandas._testing as tm
    9: import pandas.core.algorithms as algos
   10: 
   11: 
   12: @pytest.fixture(
   13:     params=[
   14:         (np.int8, np.int16(127), np.int8),
   15:         (np.int8, np.int16(128), np.int16),
   16:         (np.int32, 1, np.int32),
   17:         (np.int32, 2.0, np.float64),
   18:         (np.int32, 3.0 + 4.0j, np.complex128),
   19:         (np.int32, True, np.object_),
   20:         (np.int32, "", np.object_),
   21:         (np.float64, 1, np.float64),
   22:         (np.float64, 2.0, np.float64),
   23:         (np.float64, 3.0 + 4.0j, np.complex128),
   24:         (np.float64, True, np.object_),
   25:         (np.float64, "", np.object_),
   26:         (np.complex128, 1, np.complex128),
   27:         (np.complex128, 2.0, np.complex128),
   28:         (np.complex128, 3.0 + 4.0j, np.complex128),
   29:         (np.complex128, True, np.object_),
   30:         (np.complex128, "", np.object_),
   31:         (np.bool_, 1, np.object_),
   32:         (np.bool_, 2.0, np.object_),
   33:         (np.bool_, 3.0 + 4.0j, np.object_),
   34:         (np.bool_, True, np.bool_),
   35:         (np.bool_, "", np.object_),
   36:     ]
   37: )
   38: def dtype_fill_out_dtype(request):
   39:     return request.param
   40: 
   41: 
   42: class TestTake:
   43:     def test_1d_fill_nonna(self, dtype_fill_out_dtype):
   44:         dtype, fill_value, out_dtype = dtype_fill_out_dtype
   45:         data = np.random.default_rng(2).integers(0, 2, 4).astype(dtype)
   46:         indexer = [2, 1, 0, -1]
   47: 
   48:         result = algos.take_nd(data, indexer, fill_value=fill_value)
   49:         assert (result[[0, 1, 2]] == data[[2, 1, 0]]).all()
   50:         assert result[3] == fill_value
   51:         assert result.dtype == out_dtype
   52: 
   53:         indexer = [2, 1, 0, 1]
   54: 
   55:         result = algos.take_nd(data, indexer, fill_value=fill_value)
   56:         assert (result[[0, 1, 2, 3]] == data[indexer]).all()
   57:         assert result.dtype == dtype
   58: 
   59:     def test_2d_fill_nonna(self, dtype_fill_out_dtype):
   60:         dtype, fill_value, out_dtype = dtype_fill_out_dtype
   61:         data = np.random.default_rng(2).integers(0, 2, (5, 3)).astype(dtype)
   62:         indexer = [2, 1, 0, -1]
   63: 
   64:         result = algos.take_nd(data, indexer, axis=0, fill_value=fill_value)
   65:         assert (result[[0, 1, 2], :] == data[[2, 1, 0], :]).all()
   66:         assert (result[3, :] == fill_value).all()
   67:         assert result.dtype == out_dtype
   68: 
   69:         result = algos.take_nd(data, indexer, axis=1, fill_value=fill_value)
   70:         assert (result[:, [0, 1, 2]] == data[:, [2, 1, 0]]).all()
   71:         assert (result[:, 3] == fill_value).all()
   72:         assert result.dtype == out_dtype
   73: 
   74:         indexer = [2, 1, 0, 1]
   75:         result = algos.take_nd(data, indexer, axis=0, fill_value=fill_value)
   76:         assert (result[[0, 1, 2, 3], :] == data[indexer, :]).all()
   77:         assert result.dtype == dtype
   78: 
   79:         result = algos.take_nd(data, indexer, axis=1, fill_value=fill_value)
   80:         assert (result[:, [0, 1, 2, 3]] == data[:, indexer]).all()
   81:         assert result.dtype == dtype
   82: 
   83:     def test_3d_fill_nonna(self, dtype_fill_out_dtype):
   84:         dtype, fill_value, out_dtype = dtype_fill_out_dtype
   85: 
   86:         data = np.random.default_rng(2).integers(0, 2, (5, 4, 3)).astype(dtype)
   87:         indexer = [2, 1, 0, -1]
   88: 
   89:         result = algos.take_nd(data, indexer, axis=0, fill_value=fill_value)
   90:         assert (result[[0, 1, 2], :, :] == data[[2, 1, 0], :, :]).all()
   91:         assert (result[3, :, :] == fill_value).all()
   92:         assert result.dtype == out_dtype
   93: 
   94:         result = algos.take_nd(data, indexer, axis=1, fill_value=fill_value)
   95:         assert (result[:, [0, 1, 2], :] == data[:, [2, 1, 0], :]).all()
   96:         assert (result[:, 3, :] == fill_value).all()
   97:         assert result.dtype == out_dtype
   98: 
   99:         result = algos.take_nd(data, indexer, axis=2, fill_value=fill_value)
  100:         assert (result[:, :, [0, 1, 2]] == data[:, :, [2, 1, 0]]).all()
  101:         assert (result[:, :, 3] == fill_value).all()
  102:         assert result.dtype == out_dtype
  103: 
  104:         indexer = [2, 1, 0, 1]
  105:         result = algos.take_nd(data, indexer, axis=0, fill_value=fill_value)
  106:         assert (result[[0, 1, 2, 3], :, :] == data[indexer, :, :]).all()
  107:         assert result.dtype == dtype
  108: 
  109:         result = algos.take_nd(data, indexer, axis=1, fill_value=fill_value)
  110:         assert (result[:, [0, 1, 2, 3], :] == data[:, indexer, :]).all()
  111:         assert result.dtype == dtype
  112: 
  113:         result = algos.take_nd(data, indexer, axis=2, fill_value=fill_value)
  114:         assert (result[:, :, [0, 1, 2, 3]] == data[:, :, indexer]).all()
  115:         assert result.dtype == dtype
  116: 
  117:     def test_1d_other_dtypes(self):
  118:         arr = np.random.default_rng(2).standard_normal(10).astype(np.float32)
  119: 
  120:         indexer = [1, 2, 3, -1]
  121:         result = algos.take_nd(arr, indexer)
  122:         expected = arr.take(indexer)
  123:         expected[-1] = np.nan
  124:         tm.assert_almost_equal(result, expected)
  125: 
  126:     def test_2d_other_dtypes(self):
  127:         arr = np.random.default_rng(2).standard_normal((10, 5)).astype(np.float32)
  128: 
  129:         indexer = [1, 2, 3, -1]
  130: 
  131:         # axis=0
  132:         result = algos.take_nd(arr, indexer, axis=0)
  133:         expected = arr.take(indexer, axis=0)
  134:         expected[-1] = np.nan
  135:         tm.assert_almost_equal(result, expected)
  136: 
  137:         # axis=1
  138:         result = algos.take_nd(arr, indexer, axis=1)
  139:         expected = arr.take(indexer, axis=1)
  140:         expected[:, -1] = np.nan
  141:         tm.assert_almost_equal(result, expected)
  142: 
  143:     def test_1d_bool(self):
  144:         arr = np.array([0, 1, 0], dtype=bool)
  145: 
  146:         result = algos.take_nd(arr, [0, 2, 2, 1])
  147:         expected = arr.take([0, 2, 2, 1])
  148:         tm.assert_numpy_array_equal(result, expected)
  149: 
  150:         result = algos.take_nd(arr, [0, 2, -1])
  151:         assert result.dtype == np.object_
  152: 
  153:     def test_2d_bool(self):
  154:         arr = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 1]], dtype=bool)
  155: 
  156:         result = algos.take_nd(arr, [0, 2, 2, 1])
  157:         expected = arr.take([0, 2, 2, 1], axis=0)
  158:         tm.assert_numpy_array_equal(result, expected)
  159: 
  160:         result = algos.take_nd(arr, [0, 2, 2, 1], axis=1)
  161:         expected = arr.take([0, 2, 2, 1], axis=1)
  162:         tm.assert_numpy_array_equal(result, expected)
  163: 
  164:         result = algos.take_nd(arr, [0, 2, -1])
  165:         assert result.dtype == np.object_
  166: 
  167:     def test_2d_float32(self):
  168:         arr = np.random.default_rng(2).standard_normal((4, 3)).astype(np.float32)
  169:         indexer = [0, 2, -1, 1, -1]
  170: 
  171:         # axis=0
  172:         result = algos.take_nd(arr, indexer, axis=0)
  173: 
  174:         expected = arr.take(indexer, axis=0)
  175:         expected[[2, 4], :] = np.nan
  176:         tm.assert_almost_equal(result, expected)
  177: 
  178:         # axis=1
  179:         result = algos.take_nd(arr, indexer, axis=1)
  180:         expected = arr.take(indexer, axis=1)
  181:         expected[:, [2, 4]] = np.nan
  182:         tm.assert_almost_equal(result, expected)
  183: 
  184:     def test_2d_datetime64(self):
  185:         # 2005/01/01 - 2006/01/01
  186:         arr = (
  187:             np.random.default_rng(2).integers(11_045_376, 11_360_736, (5, 3))
  188:             * 100_000_000_000
  189:         )
  190:         arr = arr.view(dtype="datetime64[ns]")
  191:         indexer = [0, 2, -1, 1, -1]
  192: 
  193:         # axis=0
  194:         result = algos.take_nd(arr, indexer, axis=0)
  195:         expected = arr.take(indexer, axis=0)
  196:         expected.view(np.int64)[[2, 4], :] = iNaT
  197:         tm.assert_almost_equal(result, expected)
  198: 
  199:         result = algos.take_nd(arr, indexer, axis=0, fill_value=datetime(2007, 1, 1))
  200:         expected = arr.take(indexer, axis=0)
  201:         expected[[2, 4], :] = datetime(2007, 1, 1)
  202:         tm.assert_almost_equal(result, expected)
  203: 
  204:         # axis=1
  205:         result = algos.take_nd(arr, indexer, axis=1)
  206:         expected = arr.take(indexer, axis=1)
  207:         expected.view(np.int64)[:, [2, 4]] = iNaT
  208:         tm.assert_almost_equal(result, expected)
  209: 
  210:         result = algos.take_nd(arr, indexer, axis=1, fill_value=datetime(2007, 1, 1))
  211:         expected = arr.take(indexer, axis=1)
  212:         expected[:, [2, 4]] = datetime(2007, 1, 1)
  213:         tm.assert_almost_equal(result, expected)
  214: 
  215:     def test_take_axis_0(self):
  216:         arr = np.arange(12).reshape(4, 3)
  217:         result = algos.take(arr, [0, -1])
  218:         expected = np.array([[0, 1, 2], [9, 10, 11]])
  219:         tm.assert_numpy_array_equal(result, expected)
  220: 
  221:         # allow_fill=True
  222:         result = algos.take(arr, [0, -1], allow_fill=True, fill_value=0)
  223:         expected = np.array([[0, 1, 2], [0, 0, 0]])
  224:         tm.assert_numpy_array_equal(result, expected)
  225: 
  226:     def test_take_axis_1(self):
  227:         arr = np.arange(12).reshape(4, 3)
  228:         result = algos.take(arr, [0, -1], axis=1)
  229:         expected = np.array([[0, 2], [3, 5], [6, 8], [9, 11]])
  230:         tm.assert_numpy_array_equal(result, expected)
  231: 
  232:         # allow_fill=True
  233:         result = algos.take(arr, [0, -1], axis=1, allow_fill=True, fill_value=0)
  234:         expected = np.array([[0, 0], [3, 0], [6, 0], [9, 0]])
  235:         tm.assert_numpy_array_equal(result, expected)
  236: 
  237:         # GH#26976 make sure we validate along the correct axis
  238:         with pytest.raises(IndexError, match="indices are out-of-bounds"):
  239:             algos.take(arr, [0, 3], axis=1, allow_fill=True, fill_value=0)
  240: 
  241:     def test_take_non_hashable_fill_value(self):
  242:         arr = np.array([1, 2, 3])
  243:         indexer = np.array([1, -1])
  244:         with pytest.raises(ValueError, match="fill_value must be a scalar"):
  245:             algos.take(arr, indexer, allow_fill=True, fill_value=[1])
  246: 
  247:         # with object dtype it is allowed
  248:         arr = np.array([1, 2, 3], dtype=object)
  249:         result = algos.take(arr, indexer, allow_fill=True, fill_value=[1])
  250:         expected = np.array([2, [1]], dtype=object)
  251:         tm.assert_numpy_array_equal(result, expected)
  252: 
  253: 
  254: class TestExtensionTake:
  255:     # The take method found in pd.api.extensions
  256: 
  257:     def test_bounds_check_large(self):
  258:         arr = np.array([1, 2])
  259: 
  260:         msg = "indices are out-of-bounds"
  261:         with pytest.raises(IndexError, match=msg):
  262:             algos.take(arr, [2, 3], allow_fill=True)
  263: 
  264:         msg = "index 2 is out of bounds for( axis 0 with)? size 2"
  265:         with pytest.raises(IndexError, match=msg):
  266:             algos.take(arr, [2, 3], allow_fill=False)
  267: 
  268:     def test_bounds_check_small(self):
  269:         arr = np.array([1, 2, 3], dtype=np.int64)
  270:         indexer = [0, -1, -2]
  271: 
  272:         msg = r"'indices' contains values less than allowed \(-2 < -1\)"
  273:         with pytest.raises(ValueError, match=msg):
  274:             algos.take(arr, indexer, allow_fill=True)
  275: 
  276:         result = algos.take(arr, indexer)
  277:         expected = np.array([1, 3, 2], dtype=np.int64)
  278:         tm.assert_numpy_array_equal(result, expected)
  279: 
  280:     @pytest.mark.parametrize("allow_fill", [True, False])
  281:     def test_take_empty(self, allow_fill):
  282:         arr = np.array([], dtype=np.int64)
  283:         # empty take is ok
  284:         result = algos.take(arr, [], allow_fill=allow_fill)
  285:         tm.assert_numpy_array_equal(arr, result)
  286: 
  287:         msg = "|".join(
  288:             [
  289:                 "cannot do a non-empty take from an empty axes.",
  290:                 "indices are out-of-bounds",
  291:             ]
  292:         )
  293:         with pytest.raises(IndexError, match=msg):
  294:             algos.take(arr, [0], allow_fill=allow_fill)
  295: 
  296:     def test_take_na_empty(self):
  297:         result = algos.take(np.array([]), [-1, -1], allow_fill=True, fill_value=0.0)
  298:         expected = np.array([0.0, 0.0])
  299:         tm.assert_numpy_array_equal(result, expected)
  300: 
  301:     def test_take_coerces_list(self):
  302:         arr = [1, 2, 3]
  303:         msg = "take accepting non-standard inputs is deprecated"
  304:         with tm.assert_produces_warning(FutureWarning, match=msg):
  305:             result = algos.take(arr, [0, 0])
  306:         expected = np.array([1, 1])
  307:         tm.assert_numpy_array_equal(result, expected)
