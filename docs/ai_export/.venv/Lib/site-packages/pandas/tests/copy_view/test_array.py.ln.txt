    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Series,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: from pandas.tests.copy_view.util import get_array
   11: 
   12: # -----------------------------------------------------------------------------
   13: # Copy/view behaviour for accessing underlying array of Series/DataFrame
   14: 
   15: 
   16: @pytest.mark.parametrize(
   17:     "method",
   18:     [lambda ser: ser.values, lambda ser: np.asarray(ser)],
   19:     ids=["values", "asarray"],
   20: )
   21: def test_series_values(using_copy_on_write, method):
   22:     ser = Series([1, 2, 3], name="name")
   23:     ser_orig = ser.copy()
   24: 
   25:     arr = method(ser)
   26: 
   27:     if using_copy_on_write:
   28:         # .values still gives a view but is read-only
   29:         assert np.shares_memory(arr, get_array(ser, "name"))
   30:         assert arr.flags.writeable is False
   31: 
   32:         # mutating series through arr therefore doesn't work
   33:         with pytest.raises(ValueError, match="read-only"):
   34:             arr[0] = 0
   35:         tm.assert_series_equal(ser, ser_orig)
   36: 
   37:         # mutating the series itself still works
   38:         ser.iloc[0] = 0
   39:         assert ser.values[0] == 0
   40:     else:
   41:         assert arr.flags.writeable is True
   42:         arr[0] = 0
   43:         assert ser.iloc[0] == 0
   44: 
   45: 
   46: @pytest.mark.parametrize(
   47:     "method",
   48:     [lambda df: df.values, lambda df: np.asarray(df)],
   49:     ids=["values", "asarray"],
   50: )
   51: def test_dataframe_values(using_copy_on_write, using_array_manager, method):
   52:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   53:     df_orig = df.copy()
   54: 
   55:     arr = method(df)
   56: 
   57:     if using_copy_on_write:
   58:         # .values still gives a view but is read-only
   59:         assert np.shares_memory(arr, get_array(df, "a"))
   60:         assert arr.flags.writeable is False
   61: 
   62:         # mutating series through arr therefore doesn't work
   63:         with pytest.raises(ValueError, match="read-only"):
   64:             arr[0, 0] = 0
   65:         tm.assert_frame_equal(df, df_orig)
   66: 
   67:         # mutating the series itself still works
   68:         df.iloc[0, 0] = 0
   69:         assert df.values[0, 0] == 0
   70:     else:
   71:         assert arr.flags.writeable is True
   72:         arr[0, 0] = 0
   73:         if not using_array_manager:
   74:             assert df.iloc[0, 0] == 0
   75:         else:
   76:             tm.assert_frame_equal(df, df_orig)
   77: 
   78: 
   79: def test_series_to_numpy(using_copy_on_write):
   80:     ser = Series([1, 2, 3], name="name")
   81:     ser_orig = ser.copy()
   82: 
   83:     # default: copy=False, no dtype or NAs
   84:     arr = ser.to_numpy()
   85:     if using_copy_on_write:
   86:         # to_numpy still gives a view but is read-only
   87:         assert np.shares_memory(arr, get_array(ser, "name"))
   88:         assert arr.flags.writeable is False
   89: 
   90:         # mutating series through arr therefore doesn't work
   91:         with pytest.raises(ValueError, match="read-only"):
   92:             arr[0] = 0
   93:         tm.assert_series_equal(ser, ser_orig)
   94: 
   95:         # mutating the series itself still works
   96:         ser.iloc[0] = 0
   97:         assert ser.values[0] == 0
   98:     else:
   99:         assert arr.flags.writeable is True
  100:         arr[0] = 0
  101:         assert ser.iloc[0] == 0
  102: 
  103:     # specify copy=False gives a writeable array
  104:     ser = Series([1, 2, 3], name="name")
  105:     arr = ser.to_numpy(copy=True)
  106:     assert not np.shares_memory(arr, get_array(ser, "name"))
  107:     assert arr.flags.writeable is True
  108: 
  109:     # specifying a dtype that already causes a copy also gives a writeable array
  110:     ser = Series([1, 2, 3], name="name")
  111:     arr = ser.to_numpy(dtype="float64")
  112:     assert not np.shares_memory(arr, get_array(ser, "name"))
  113:     assert arr.flags.writeable is True
  114: 
  115: 
  116: @pytest.mark.parametrize("order", ["F", "C"])
  117: def test_ravel_read_only(using_copy_on_write, order):
  118:     ser = Series([1, 2, 3])
  119:     with tm.assert_produces_warning(FutureWarning, match="is deprecated"):
  120:         arr = ser.ravel(order=order)
  121:     if using_copy_on_write:
  122:         assert arr.flags.writeable is False
  123:     assert np.shares_memory(get_array(ser), arr)
  124: 
  125: 
  126: def test_series_array_ea_dtypes(using_copy_on_write):
  127:     ser = Series([1, 2, 3], dtype="Int64")
  128:     arr = np.asarray(ser, dtype="int64")
  129:     assert np.shares_memory(arr, get_array(ser))
  130:     if using_copy_on_write:
  131:         assert arr.flags.writeable is False
  132:     else:
  133:         assert arr.flags.writeable is True
  134: 
  135:     arr = np.asarray(ser)
  136:     assert np.shares_memory(arr, get_array(ser))
  137:     if using_copy_on_write:
  138:         assert arr.flags.writeable is False
  139:     else:
  140:         assert arr.flags.writeable is True
  141: 
  142: 
  143: def test_dataframe_array_ea_dtypes(using_copy_on_write):
  144:     df = DataFrame({"a": [1, 2, 3]}, dtype="Int64")
  145:     arr = np.asarray(df, dtype="int64")
  146:     assert np.shares_memory(arr, get_array(df, "a"))
  147:     if using_copy_on_write:
  148:         assert arr.flags.writeable is False
  149:     else:
  150:         assert arr.flags.writeable is True
  151: 
  152:     arr = np.asarray(df)
  153:     assert np.shares_memory(arr, get_array(df, "a"))
  154:     if using_copy_on_write:
  155:         assert arr.flags.writeable is False
  156:     else:
  157:         assert arr.flags.writeable is True
  158: 
  159: 
  160: def test_dataframe_array_string_dtype(using_copy_on_write, using_array_manager):
  161:     df = DataFrame({"a": ["a", "b"]}, dtype="string")
  162:     arr = np.asarray(df)
  163:     if not using_array_manager:
  164:         assert np.shares_memory(arr, get_array(df, "a"))
  165:     if using_copy_on_write:
  166:         assert arr.flags.writeable is False
  167:     else:
  168:         assert arr.flags.writeable is True
  169: 
  170: 
  171: def test_dataframe_multiple_numpy_dtypes():
  172:     df = DataFrame({"a": [1, 2, 3], "b": 1.5})
  173:     arr = np.asarray(df)
  174:     assert not np.shares_memory(arr, get_array(df, "a"))
  175:     assert arr.flags.writeable is True
  176: 
  177: 
  178: def test_values_is_ea(using_copy_on_write):
  179:     df = DataFrame({"a": date_range("2012-01-01", periods=3)})
  180:     arr = np.asarray(df)
  181:     if using_copy_on_write:
  182:         assert arr.flags.writeable is False
  183:     else:
  184:         assert arr.flags.writeable is True
  185: 
  186: 
  187: def test_empty_dataframe():
  188:     df = DataFrame()
  189:     arr = np.asarray(df)
  190:     assert arr.flags.writeable is True
