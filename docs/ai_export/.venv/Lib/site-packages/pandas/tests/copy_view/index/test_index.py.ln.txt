    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: from pandas.tests.copy_view.util import get_array
   11: 
   12: 
   13: def index_view(index_data=[1, 2]):
   14:     df = DataFrame({"a": index_data, "b": 1.5})
   15:     view = df[:]
   16:     df = df.set_index("a", drop=True)
   17:     idx = df.index
   18:     # df = None
   19:     return idx, view
   20: 
   21: 
   22: def test_set_index_update_column(using_copy_on_write, warn_copy_on_write):
   23:     df = DataFrame({"a": [1, 2], "b": 1})
   24:     df = df.set_index("a", drop=False)
   25:     expected = df.index.copy(deep=True)
   26:     with tm.assert_cow_warning(warn_copy_on_write):
   27:         df.iloc[0, 0] = 100
   28:     if using_copy_on_write:
   29:         tm.assert_index_equal(df.index, expected)
   30:     else:
   31:         tm.assert_index_equal(df.index, Index([100, 2], name="a"))
   32: 
   33: 
   34: def test_set_index_drop_update_column(using_copy_on_write):
   35:     df = DataFrame({"a": [1, 2], "b": 1.5})
   36:     view = df[:]
   37:     df = df.set_index("a", drop=True)
   38:     expected = df.index.copy(deep=True)
   39:     view.iloc[0, 0] = 100
   40:     tm.assert_index_equal(df.index, expected)
   41: 
   42: 
   43: def test_set_index_series(using_copy_on_write, warn_copy_on_write):
   44:     df = DataFrame({"a": [1, 2], "b": 1.5})
   45:     ser = Series([10, 11])
   46:     df = df.set_index(ser)
   47:     expected = df.index.copy(deep=True)
   48:     with tm.assert_cow_warning(warn_copy_on_write):
   49:         ser.iloc[0] = 100
   50:     if using_copy_on_write:
   51:         tm.assert_index_equal(df.index, expected)
   52:     else:
   53:         tm.assert_index_equal(df.index, Index([100, 11]))
   54: 
   55: 
   56: def test_assign_index_as_series(using_copy_on_write, warn_copy_on_write):
   57:     df = DataFrame({"a": [1, 2], "b": 1.5})
   58:     ser = Series([10, 11])
   59:     df.index = ser
   60:     expected = df.index.copy(deep=True)
   61:     with tm.assert_cow_warning(warn_copy_on_write):
   62:         ser.iloc[0] = 100
   63:     if using_copy_on_write:
   64:         tm.assert_index_equal(df.index, expected)
   65:     else:
   66:         tm.assert_index_equal(df.index, Index([100, 11]))
   67: 
   68: 
   69: def test_assign_index_as_index(using_copy_on_write, warn_copy_on_write):
   70:     df = DataFrame({"a": [1, 2], "b": 1.5})
   71:     ser = Series([10, 11])
   72:     rhs_index = Index(ser)
   73:     df.index = rhs_index
   74:     rhs_index = None  # overwrite to clear reference
   75:     expected = df.index.copy(deep=True)
   76:     with tm.assert_cow_warning(warn_copy_on_write):
   77:         ser.iloc[0] = 100
   78:     if using_copy_on_write:
   79:         tm.assert_index_equal(df.index, expected)
   80:     else:
   81:         tm.assert_index_equal(df.index, Index([100, 11]))
   82: 
   83: 
   84: def test_index_from_series(using_copy_on_write, warn_copy_on_write):
   85:     ser = Series([1, 2])
   86:     idx = Index(ser)
   87:     expected = idx.copy(deep=True)
   88:     with tm.assert_cow_warning(warn_copy_on_write):
   89:         ser.iloc[0] = 100
   90:     if using_copy_on_write:
   91:         tm.assert_index_equal(idx, expected)
   92:     else:
   93:         tm.assert_index_equal(idx, Index([100, 2]))
   94: 
   95: 
   96: def test_index_from_series_copy(using_copy_on_write):
   97:     ser = Series([1, 2])
   98:     idx = Index(ser, copy=True)  # noqa: F841
   99:     arr = get_array(ser)
  100:     ser.iloc[0] = 100
  101:     assert np.shares_memory(get_array(ser), arr)
  102: 
  103: 
  104: def test_index_from_index(using_copy_on_write, warn_copy_on_write):
  105:     ser = Series([1, 2])
  106:     idx = Index(ser)
  107:     idx = Index(idx)
  108:     expected = idx.copy(deep=True)
  109:     with tm.assert_cow_warning(warn_copy_on_write):
  110:         ser.iloc[0] = 100
  111:     if using_copy_on_write:
  112:         tm.assert_index_equal(idx, expected)
  113:     else:
  114:         tm.assert_index_equal(idx, Index([100, 2]))
  115: 
  116: 
  117: @pytest.mark.parametrize(
  118:     "func",
  119:     [
  120:         lambda x: x._shallow_copy(x._values),
  121:         lambda x: x.view(),
  122:         lambda x: x.take([0, 1]),
  123:         lambda x: x.repeat([1, 1]),
  124:         lambda x: x[slice(0, 2)],
  125:         lambda x: x[[0, 1]],
  126:         lambda x: x._getitem_slice(slice(0, 2)),
  127:         lambda x: x.delete([]),
  128:         lambda x: x.rename("b"),
  129:         lambda x: x.astype("Int64", copy=False),
  130:     ],
  131:     ids=[
  132:         "_shallow_copy",
  133:         "view",
  134:         "take",
  135:         "repeat",
  136:         "getitem_slice",
  137:         "getitem_list",
  138:         "_getitem_slice",
  139:         "delete",
  140:         "rename",
  141:         "astype",
  142:     ],
  143: )
  144: def test_index_ops(using_copy_on_write, func, request):
  145:     idx, view_ = index_view()
  146:     expected = idx.copy(deep=True)
  147:     if "astype" in request.node.callspec.id:
  148:         expected = expected.astype("Int64")
  149:     idx = func(idx)
  150:     view_.iloc[0, 0] = 100
  151:     if using_copy_on_write:
  152:         tm.assert_index_equal(idx, expected, check_names=False)
  153: 
  154: 
  155: def test_infer_objects(using_copy_on_write):
  156:     idx, view_ = index_view(["a", "b"])
  157:     expected = idx.copy(deep=True)
  158:     idx = idx.infer_objects(copy=False)
  159:     view_.iloc[0, 0] = "aaaa"
  160:     if using_copy_on_write:
  161:         tm.assert_index_equal(idx, expected, check_names=False)
  162: 
  163: 
  164: def test_index_to_frame(using_copy_on_write):
  165:     idx = Index([1, 2, 3], name="a")
  166:     expected = idx.copy(deep=True)
  167:     df = idx.to_frame()
  168:     if using_copy_on_write:
  169:         assert np.shares_memory(get_array(df, "a"), idx._values)
  170:         assert not df._mgr._has_no_reference(0)
  171:     else:
  172:         assert not np.shares_memory(get_array(df, "a"), idx._values)
  173: 
  174:     df.iloc[0, 0] = 100
  175:     tm.assert_index_equal(idx, expected)
  176: 
  177: 
  178: def test_index_values(using_copy_on_write):
  179:     idx = Index([1, 2, 3])
  180:     result = idx.values
  181:     if using_copy_on_write:
  182:         assert result.flags.writeable is False
  183:     else:
  184:         assert result.flags.writeable is True
