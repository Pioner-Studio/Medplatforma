    1: import pytest
    2: 
    3: from pandas import (
    4:     DatetimeIndex,
    5:     Series,
    6:     Timestamp,
    7:     date_range,
    8: )
    9: import pandas._testing as tm
   10: 
   11: pytestmark = pytest.mark.filterwarnings(
   12:     "ignore:Setting a value on a view:FutureWarning"
   13: )
   14: 
   15: 
   16: @pytest.mark.parametrize(
   17:     "cons",
   18:     [
   19:         lambda x: DatetimeIndex(x),
   20:         lambda x: DatetimeIndex(DatetimeIndex(x)),
   21:     ],
   22: )
   23: def test_datetimeindex(using_copy_on_write, cons):
   24:     dt = date_range("2019-12-31", periods=3, freq="D")
   25:     ser = Series(dt)
   26:     idx = cons(ser)
   27:     expected = idx.copy(deep=True)
   28:     ser.iloc[0] = Timestamp("2020-12-31")
   29:     if using_copy_on_write:
   30:         tm.assert_index_equal(idx, expected)
   31: 
   32: 
   33: def test_datetimeindex_tz_convert(using_copy_on_write):
   34:     dt = date_range("2019-12-31", periods=3, freq="D", tz="Europe/Berlin")
   35:     ser = Series(dt)
   36:     idx = DatetimeIndex(ser).tz_convert("US/Eastern")
   37:     expected = idx.copy(deep=True)
   38:     ser.iloc[0] = Timestamp("2020-12-31", tz="Europe/Berlin")
   39:     if using_copy_on_write:
   40:         tm.assert_index_equal(idx, expected)
   41: 
   42: 
   43: def test_datetimeindex_tz_localize(using_copy_on_write):
   44:     dt = date_range("2019-12-31", periods=3, freq="D")
   45:     ser = Series(dt)
   46:     idx = DatetimeIndex(ser).tz_localize("Europe/Berlin")
   47:     expected = idx.copy(deep=True)
   48:     ser.iloc[0] = Timestamp("2020-12-31")
   49:     if using_copy_on_write:
   50:         tm.assert_index_equal(idx, expected)
   51: 
   52: 
   53: def test_datetimeindex_isocalendar(using_copy_on_write):
   54:     dt = date_range("2019-12-31", periods=3, freq="D")
   55:     ser = Series(dt)
   56:     df = DatetimeIndex(ser).isocalendar()
   57:     expected = df.index.copy(deep=True)
   58:     ser.iloc[0] = Timestamp("2020-12-31")
   59:     if using_copy_on_write:
   60:         tm.assert_index_equal(df.index, expected)
   61: 
   62: 
   63: def test_index_values(using_copy_on_write):
   64:     idx = date_range("2019-12-31", periods=3, freq="D")
   65:     result = idx.values
   66:     if using_copy_on_write:
   67:         assert result.flags.writeable is False
   68:     else:
   69:         assert result.flags.writeable is True
