    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     Index,
    6:     MultiIndex,
    7:     RangeIndex,
    8:     Series,
    9: )
   10: import pandas._testing as tm
   11: from pandas.tests.copy_view.util import get_array
   12: 
   13: # -----------------------------------------------------------------------------
   14: # Copy/view behaviour for the values that are set in a DataFrame
   15: 
   16: 
   17: def test_set_column_with_array():
   18:     # Case: setting an array as a new column (df[col] = arr) copies that data
   19:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   20:     arr = np.array([1, 2, 3], dtype="int64")
   21: 
   22:     df["c"] = arr
   23: 
   24:     # the array data is copied
   25:     assert not np.shares_memory(get_array(df, "c"), arr)
   26:     # and thus modifying the array does not modify the DataFrame
   27:     arr[0] = 0
   28:     tm.assert_series_equal(df["c"], Series([1, 2, 3], name="c"))
   29: 
   30: 
   31: def test_set_column_with_series(using_copy_on_write):
   32:     # Case: setting a series as a new column (df[col] = s) copies that data
   33:     # (with delayed copy with CoW)
   34:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   35:     ser = Series([1, 2, 3])
   36: 
   37:     df["c"] = ser
   38: 
   39:     if using_copy_on_write:
   40:         assert np.shares_memory(get_array(df, "c"), get_array(ser))
   41:     else:
   42:         # the series data is copied
   43:         assert not np.shares_memory(get_array(df, "c"), get_array(ser))
   44: 
   45:     # and modifying the series does not modify the DataFrame
   46:     ser.iloc[0] = 0
   47:     assert ser.iloc[0] == 0
   48:     tm.assert_series_equal(df["c"], Series([1, 2, 3], name="c"))
   49: 
   50: 
   51: def test_set_column_with_index(using_copy_on_write):
   52:     # Case: setting an index as a new column (df[col] = idx) copies that data
   53:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   54:     idx = Index([1, 2, 3])
   55: 
   56:     df["c"] = idx
   57: 
   58:     # the index data is copied
   59:     assert not np.shares_memory(get_array(df, "c"), idx.values)
   60: 
   61:     idx = RangeIndex(1, 4)
   62:     arr = idx.values
   63: 
   64:     df["d"] = idx
   65: 
   66:     assert not np.shares_memory(get_array(df, "d"), arr)
   67: 
   68: 
   69: def test_set_columns_with_dataframe(using_copy_on_write):
   70:     # Case: setting a DataFrame as new columns copies that data
   71:     # (with delayed copy with CoW)
   72:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
   73:     df2 = DataFrame({"c": [7, 8, 9], "d": [10, 11, 12]})
   74: 
   75:     df[["c", "d"]] = df2
   76: 
   77:     if using_copy_on_write:
   78:         assert np.shares_memory(get_array(df, "c"), get_array(df2, "c"))
   79:     else:
   80:         # the data is copied
   81:         assert not np.shares_memory(get_array(df, "c"), get_array(df2, "c"))
   82: 
   83:     # and modifying the set DataFrame does not modify the original DataFrame
   84:     df2.iloc[0, 0] = 0
   85:     tm.assert_series_equal(df["c"], Series([7, 8, 9], name="c"))
   86: 
   87: 
   88: def test_setitem_series_no_copy(using_copy_on_write):
   89:     # Case: setting a Series as column into a DataFrame can delay copying that data
   90:     df = DataFrame({"a": [1, 2, 3]})
   91:     rhs = Series([4, 5, 6])
   92:     rhs_orig = rhs.copy()
   93: 
   94:     # adding a new column
   95:     df["b"] = rhs
   96:     if using_copy_on_write:
   97:         assert np.shares_memory(get_array(rhs), get_array(df, "b"))
   98: 
   99:     df.iloc[0, 1] = 100
  100:     tm.assert_series_equal(rhs, rhs_orig)
  101: 
  102: 
  103: def test_setitem_series_no_copy_single_block(using_copy_on_write):
  104:     # Overwriting an existing column that is a single block
  105:     df = DataFrame({"a": [1, 2, 3], "b": [0.1, 0.2, 0.3]})
  106:     rhs = Series([4, 5, 6])
  107:     rhs_orig = rhs.copy()
  108: 
  109:     df["a"] = rhs
  110:     if using_copy_on_write:
  111:         assert np.shares_memory(get_array(rhs), get_array(df, "a"))
  112: 
  113:     df.iloc[0, 0] = 100
  114:     tm.assert_series_equal(rhs, rhs_orig)
  115: 
  116: 
  117: def test_setitem_series_no_copy_split_block(using_copy_on_write):
  118:     # Overwriting an existing column that is part of a larger block
  119:     df = DataFrame({"a": [1, 2, 3], "b": 1})
  120:     rhs = Series([4, 5, 6])
  121:     rhs_orig = rhs.copy()
  122: 
  123:     df["b"] = rhs
  124:     if using_copy_on_write:
  125:         assert np.shares_memory(get_array(rhs), get_array(df, "b"))
  126: 
  127:     df.iloc[0, 1] = 100
  128:     tm.assert_series_equal(rhs, rhs_orig)
  129: 
  130: 
  131: def test_setitem_series_column_midx_broadcasting(using_copy_on_write):
  132:     # Setting a Series to multiple columns will repeat the data
  133:     # (currently copying the data eagerly)
  134:     df = DataFrame(
  135:         [[1, 2, 3], [3, 4, 5]],
  136:         columns=MultiIndex.from_arrays([["a", "a", "b"], [1, 2, 3]]),
  137:     )
  138:     rhs = Series([10, 11])
  139:     df["a"] = rhs
  140:     assert not np.shares_memory(get_array(rhs), df._get_column_array(0))
  141:     if using_copy_on_write:
  142:         assert df._mgr._has_no_reference(0)
  143: 
  144: 
  145: def test_set_column_with_inplace_operator(using_copy_on_write, warn_copy_on_write):
  146:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
  147: 
  148:     # this should not raise any warning
  149:     with tm.assert_produces_warning(None):
  150:         df["a"] += 1
  151: 
  152:     # when it is not in a chain, then it should produce a warning
  153:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6]})
  154:     ser = df["a"]
  155:     with tm.assert_cow_warning(warn_copy_on_write):
  156:         ser += 1
