    1: import numpy as np
    2: 
    3: from pandas import (
    4:     DataFrame,
    5:     option_context,
    6: )
    7: import pandas._testing as tm
    8: from pandas.tests.copy_view.util import get_array
    9: 
   10: 
   11: def test_clip_inplace_reference(using_copy_on_write, warn_copy_on_write):
   12:     df = DataFrame({"a": [1.5, 2, 3]})
   13:     df_copy = df.copy()
   14:     arr_a = get_array(df, "a")
   15:     view = df[:]
   16:     if warn_copy_on_write:
   17:         with tm.assert_cow_warning():
   18:             df.clip(lower=2, inplace=True)
   19:     else:
   20:         df.clip(lower=2, inplace=True)
   21: 
   22:     if using_copy_on_write:
   23:         assert not np.shares_memory(get_array(df, "a"), arr_a)
   24:         assert df._mgr._has_no_reference(0)
   25:         assert view._mgr._has_no_reference(0)
   26:         tm.assert_frame_equal(df_copy, view)
   27:     else:
   28:         assert np.shares_memory(get_array(df, "a"), arr_a)
   29: 
   30: 
   31: def test_clip_inplace_reference_no_op(using_copy_on_write):
   32:     df = DataFrame({"a": [1.5, 2, 3]})
   33:     df_copy = df.copy()
   34:     arr_a = get_array(df, "a")
   35:     view = df[:]
   36:     df.clip(lower=0, inplace=True)
   37: 
   38:     assert np.shares_memory(get_array(df, "a"), arr_a)
   39: 
   40:     if using_copy_on_write:
   41:         assert not df._mgr._has_no_reference(0)
   42:         assert not view._mgr._has_no_reference(0)
   43:         tm.assert_frame_equal(df_copy, view)
   44: 
   45: 
   46: def test_clip_inplace(using_copy_on_write):
   47:     df = DataFrame({"a": [1.5, 2, 3]})
   48:     arr_a = get_array(df, "a")
   49:     df.clip(lower=2, inplace=True)
   50: 
   51:     assert np.shares_memory(get_array(df, "a"), arr_a)
   52: 
   53:     if using_copy_on_write:
   54:         assert df._mgr._has_no_reference(0)
   55: 
   56: 
   57: def test_clip(using_copy_on_write):
   58:     df = DataFrame({"a": [1.5, 2, 3]})
   59:     df_orig = df.copy()
   60:     df2 = df.clip(lower=2)
   61: 
   62:     assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   63: 
   64:     if using_copy_on_write:
   65:         assert df._mgr._has_no_reference(0)
   66:     tm.assert_frame_equal(df_orig, df)
   67: 
   68: 
   69: def test_clip_no_op(using_copy_on_write):
   70:     df = DataFrame({"a": [1.5, 2, 3]})
   71:     df2 = df.clip(lower=0)
   72: 
   73:     if using_copy_on_write:
   74:         assert not df._mgr._has_no_reference(0)
   75:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   76:     else:
   77:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   78: 
   79: 
   80: def test_clip_chained_inplace(using_copy_on_write):
   81:     df = DataFrame({"a": [1, 4, 2], "b": 1})
   82:     df_orig = df.copy()
   83:     if using_copy_on_write:
   84:         with tm.raises_chained_assignment_error():
   85:             df["a"].clip(1, 2, inplace=True)
   86:         tm.assert_frame_equal(df, df_orig)
   87: 
   88:         with tm.raises_chained_assignment_error():
   89:             df[["a"]].clip(1, 2, inplace=True)
   90:         tm.assert_frame_equal(df, df_orig)
   91:     else:
   92:         with tm.assert_produces_warning(FutureWarning, match="inplace method"):
   93:             df["a"].clip(1, 2, inplace=True)
   94: 
   95:         with tm.assert_produces_warning(None):
   96:             with option_context("mode.chained_assignment", None):
   97:                 df[["a"]].clip(1, 2, inplace=True)
   98: 
   99:         with tm.assert_produces_warning(None):
  100:             with option_context("mode.chained_assignment", None):
  101:                 df[df["a"] > 1].clip(1, 2, inplace=True)
