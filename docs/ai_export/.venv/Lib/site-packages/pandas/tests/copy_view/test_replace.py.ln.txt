    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Categorical,
    6:     DataFrame,
    7:     option_context,
    8: )
    9: import pandas._testing as tm
   10: from pandas.tests.copy_view.util import get_array
   11: 
   12: 
   13: @pytest.mark.parametrize(
   14:     "replace_kwargs",
   15:     [
   16:         {"to_replace": {"a": 1, "b": 4}, "value": -1},
   17:         # Test CoW splits blocks to avoid copying unchanged columns
   18:         {"to_replace": {"a": 1}, "value": -1},
   19:         {"to_replace": {"b": 4}, "value": -1},
   20:         {"to_replace": {"b": {4: 1}}},
   21:         # TODO: Add these in a further optimization
   22:         # We would need to see which columns got replaced in the mask
   23:         # which could be expensive
   24:         # {"to_replace": {"b": 1}},
   25:         # 1
   26:     ],
   27: )
   28: def test_replace(using_copy_on_write, replace_kwargs):
   29:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6], "c": ["foo", "bar", "baz"]})
   30:     df_orig = df.copy()
   31: 
   32:     df_replaced = df.replace(**replace_kwargs)
   33: 
   34:     if using_copy_on_write:
   35:         if (df_replaced["b"] == df["b"]).all():
   36:             assert np.shares_memory(get_array(df_replaced, "b"), get_array(df, "b"))
   37:         assert np.shares_memory(get_array(df_replaced, "c"), get_array(df, "c"))
   38: 
   39:     # mutating squeezed df triggers a copy-on-write for that column/block
   40:     df_replaced.loc[0, "c"] = -1
   41:     if using_copy_on_write:
   42:         assert not np.shares_memory(get_array(df_replaced, "c"), get_array(df, "c"))
   43: 
   44:     if "a" in replace_kwargs["to_replace"]:
   45:         arr = get_array(df_replaced, "a")
   46:         df_replaced.loc[0, "a"] = 100
   47:         assert np.shares_memory(get_array(df_replaced, "a"), arr)
   48:     tm.assert_frame_equal(df, df_orig)
   49: 
   50: 
   51: def test_replace_regex_inplace_refs(using_copy_on_write, warn_copy_on_write):
   52:     df = DataFrame({"a": ["aaa", "bbb"]})
   53:     df_orig = df.copy()
   54:     view = df[:]
   55:     arr = get_array(df, "a")
   56:     with tm.assert_cow_warning(warn_copy_on_write):
   57:         df.replace(to_replace=r"^a.*$", value="new", inplace=True, regex=True)
   58:     if using_copy_on_write:
   59:         assert not np.shares_memory(arr, get_array(df, "a"))
   60:         assert df._mgr._has_no_reference(0)
   61:         tm.assert_frame_equal(view, df_orig)
   62:     else:
   63:         assert np.shares_memory(arr, get_array(df, "a"))
   64: 
   65: 
   66: def test_replace_regex_inplace(using_copy_on_write):
   67:     df = DataFrame({"a": ["aaa", "bbb"]})
   68:     arr = get_array(df, "a")
   69:     df.replace(to_replace=r"^a.*$", value="new", inplace=True, regex=True)
   70:     if using_copy_on_write:
   71:         assert df._mgr._has_no_reference(0)
   72:     assert np.shares_memory(arr, get_array(df, "a"))
   73: 
   74:     df_orig = df.copy()
   75:     df2 = df.replace(to_replace=r"^b.*$", value="new", regex=True)
   76:     tm.assert_frame_equal(df_orig, df)
   77:     assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   78: 
   79: 
   80: def test_replace_regex_inplace_no_op(using_copy_on_write):
   81:     df = DataFrame({"a": [1, 2]})
   82:     arr = get_array(df, "a")
   83:     df.replace(to_replace=r"^a.$", value="new", inplace=True, regex=True)
   84:     if using_copy_on_write:
   85:         assert df._mgr._has_no_reference(0)
   86:     assert np.shares_memory(arr, get_array(df, "a"))
   87: 
   88:     df_orig = df.copy()
   89:     df2 = df.replace(to_replace=r"^x.$", value="new", regex=True)
   90:     tm.assert_frame_equal(df_orig, df)
   91:     if using_copy_on_write:
   92:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   93:     else:
   94:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   95: 
   96: 
   97: def test_replace_mask_all_false_second_block(using_copy_on_write):
   98:     df = DataFrame({"a": [1.5, 2, 3], "b": 100.5, "c": 1, "d": 2})
   99:     df_orig = df.copy()
  100: 
  101:     df2 = df.replace(to_replace=1.5, value=55.5)
  102: 
  103:     if using_copy_on_write:
  104:         # TODO: Block splitting would allow us to avoid copying b
  105:         assert np.shares_memory(get_array(df, "c"), get_array(df2, "c"))
  106:         assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  107: 
  108:     else:
  109:         assert not np.shares_memory(get_array(df, "c"), get_array(df2, "c"))
  110:         assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  111: 
  112:     df2.loc[0, "c"] = 1
  113:     tm.assert_frame_equal(df, df_orig)  # Original is unchanged
  114: 
  115:     if using_copy_on_write:
  116:         assert not np.shares_memory(get_array(df, "c"), get_array(df2, "c"))
  117:         # TODO: This should split and not copy the whole block
  118:         # assert np.shares_memory(get_array(df, "d"), get_array(df2, "d"))
  119: 
  120: 
  121: def test_replace_coerce_single_column(using_copy_on_write, using_array_manager):
  122:     df = DataFrame({"a": [1.5, 2, 3], "b": 100.5})
  123:     df_orig = df.copy()
  124: 
  125:     df2 = df.replace(to_replace=1.5, value="a")
  126: 
  127:     if using_copy_on_write:
  128:         assert np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  129:         assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  130: 
  131:     elif not using_array_manager:
  132:         assert np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  133:         assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  134: 
  135:     if using_copy_on_write:
  136:         df2.loc[0, "b"] = 0.5
  137:         tm.assert_frame_equal(df, df_orig)  # Original is unchanged
  138:         assert not np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  139: 
  140: 
  141: def test_replace_to_replace_wrong_dtype(using_copy_on_write):
  142:     df = DataFrame({"a": [1.5, 2, 3], "b": 100.5})
  143:     df_orig = df.copy()
  144: 
  145:     df2 = df.replace(to_replace="xxx", value=1.5)
  146: 
  147:     if using_copy_on_write:
  148:         assert np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  149:         assert np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  150: 
  151:     else:
  152:         assert not np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  153:         assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  154: 
  155:     df2.loc[0, "b"] = 0.5
  156:     tm.assert_frame_equal(df, df_orig)  # Original is unchanged
  157: 
  158:     if using_copy_on_write:
  159:         assert not np.shares_memory(get_array(df, "b"), get_array(df2, "b"))
  160: 
  161: 
  162: def test_replace_list_categorical(using_copy_on_write):
  163:     df = DataFrame({"a": ["a", "b", "c"]}, dtype="category")
  164:     arr = get_array(df, "a")
  165:     msg = (
  166:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  167:         "with CategoricalDtype"
  168:     )
  169:     with tm.assert_produces_warning(FutureWarning, match=msg):
  170:         df.replace(["c"], value="a", inplace=True)
  171:     assert np.shares_memory(arr.codes, get_array(df, "a").codes)
  172:     if using_copy_on_write:
  173:         assert df._mgr._has_no_reference(0)
  174: 
  175:     df_orig = df.copy()
  176:     with tm.assert_produces_warning(FutureWarning, match=msg):
  177:         df2 = df.replace(["b"], value="a")
  178:     assert not np.shares_memory(arr.codes, get_array(df2, "a").codes)
  179: 
  180:     tm.assert_frame_equal(df, df_orig)
  181: 
  182: 
  183: def test_replace_list_inplace_refs_categorical(using_copy_on_write):
  184:     df = DataFrame({"a": ["a", "b", "c"]}, dtype="category")
  185:     view = df[:]
  186:     df_orig = df.copy()
  187:     msg = (
  188:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  189:         "with CategoricalDtype"
  190:     )
  191:     with tm.assert_produces_warning(FutureWarning, match=msg):
  192:         df.replace(["c"], value="a", inplace=True)
  193:     if using_copy_on_write:
  194:         assert not np.shares_memory(
  195:             get_array(view, "a").codes, get_array(df, "a").codes
  196:         )
  197:         tm.assert_frame_equal(df_orig, view)
  198:     else:
  199:         # This could be inplace
  200:         assert not np.shares_memory(
  201:             get_array(view, "a").codes, get_array(df, "a").codes
  202:         )
  203: 
  204: 
  205: @pytest.mark.parametrize("to_replace", [1.5, [1.5], []])
  206: def test_replace_inplace(using_copy_on_write, to_replace):
  207:     df = DataFrame({"a": [1.5, 2, 3]})
  208:     arr_a = get_array(df, "a")
  209:     df.replace(to_replace=1.5, value=15.5, inplace=True)
  210: 
  211:     assert np.shares_memory(get_array(df, "a"), arr_a)
  212:     if using_copy_on_write:
  213:         assert df._mgr._has_no_reference(0)
  214: 
  215: 
  216: @pytest.mark.parametrize("to_replace", [1.5, [1.5]])
  217: def test_replace_inplace_reference(using_copy_on_write, to_replace, warn_copy_on_write):
  218:     df = DataFrame({"a": [1.5, 2, 3]})
  219:     arr_a = get_array(df, "a")
  220:     view = df[:]
  221:     with tm.assert_cow_warning(warn_copy_on_write):
  222:         df.replace(to_replace=to_replace, value=15.5, inplace=True)
  223: 
  224:     if using_copy_on_write:
  225:         assert not np.shares_memory(get_array(df, "a"), arr_a)
  226:         assert df._mgr._has_no_reference(0)
  227:         assert view._mgr._has_no_reference(0)
  228:     else:
  229:         assert np.shares_memory(get_array(df, "a"), arr_a)
  230: 
  231: 
  232: @pytest.mark.parametrize("to_replace", ["a", 100.5])
  233: def test_replace_inplace_reference_no_op(using_copy_on_write, to_replace):
  234:     df = DataFrame({"a": [1.5, 2, 3]})
  235:     arr_a = get_array(df, "a")
  236:     view = df[:]
  237:     df.replace(to_replace=to_replace, value=15.5, inplace=True)
  238: 
  239:     assert np.shares_memory(get_array(df, "a"), arr_a)
  240:     if using_copy_on_write:
  241:         assert not df._mgr._has_no_reference(0)
  242:         assert not view._mgr._has_no_reference(0)
  243: 
  244: 
  245: @pytest.mark.parametrize("to_replace", [1, [1]])
  246: @pytest.mark.parametrize("val", [1, 1.5])
  247: def test_replace_categorical_inplace_reference(using_copy_on_write, val, to_replace):
  248:     df = DataFrame({"a": Categorical([1, 2, 3])})
  249:     df_orig = df.copy()
  250:     arr_a = get_array(df, "a")
  251:     view = df[:]
  252:     msg = (
  253:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  254:         "with CategoricalDtype"
  255:     )
  256:     warn = FutureWarning if val == 1.5 else None
  257:     with tm.assert_produces_warning(warn, match=msg):
  258:         df.replace(to_replace=to_replace, value=val, inplace=True)
  259: 
  260:     if using_copy_on_write:
  261:         assert not np.shares_memory(get_array(df, "a").codes, arr_a.codes)
  262:         assert df._mgr._has_no_reference(0)
  263:         assert view._mgr._has_no_reference(0)
  264:         tm.assert_frame_equal(view, df_orig)
  265:     else:
  266:         assert np.shares_memory(get_array(df, "a").codes, arr_a.codes)
  267: 
  268: 
  269: @pytest.mark.parametrize("val", [1, 1.5])
  270: def test_replace_categorical_inplace(using_copy_on_write, val):
  271:     df = DataFrame({"a": Categorical([1, 2, 3])})
  272:     arr_a = get_array(df, "a")
  273:     msg = (
  274:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  275:         "with CategoricalDtype"
  276:     )
  277:     warn = FutureWarning if val == 1.5 else None
  278:     with tm.assert_produces_warning(warn, match=msg):
  279:         df.replace(to_replace=1, value=val, inplace=True)
  280: 
  281:     assert np.shares_memory(get_array(df, "a").codes, arr_a.codes)
  282:     if using_copy_on_write:
  283:         assert df._mgr._has_no_reference(0)
  284: 
  285:     expected = DataFrame({"a": Categorical([val, 2, 3])})
  286:     tm.assert_frame_equal(df, expected)
  287: 
  288: 
  289: @pytest.mark.parametrize("val", [1, 1.5])
  290: def test_replace_categorical(using_copy_on_write, val):
  291:     df = DataFrame({"a": Categorical([1, 2, 3])})
  292:     df_orig = df.copy()
  293:     msg = (
  294:         r"The behavior of Series\.replace \(and DataFrame.replace\) "
  295:         "with CategoricalDtype"
  296:     )
  297:     warn = FutureWarning if val == 1.5 else None
  298:     with tm.assert_produces_warning(warn, match=msg):
  299:         df2 = df.replace(to_replace=1, value=val)
  300: 
  301:     if using_copy_on_write:
  302:         assert df._mgr._has_no_reference(0)
  303:         assert df2._mgr._has_no_reference(0)
  304:     assert not np.shares_memory(get_array(df, "a").codes, get_array(df2, "a").codes)
  305:     tm.assert_frame_equal(df, df_orig)
  306: 
  307:     arr_a = get_array(df2, "a").codes
  308:     df2.iloc[0, 0] = 2.0
  309:     assert np.shares_memory(get_array(df2, "a").codes, arr_a)
  310: 
  311: 
  312: @pytest.mark.parametrize("method", ["where", "mask"])
  313: def test_masking_inplace(using_copy_on_write, method, warn_copy_on_write):
  314:     df = DataFrame({"a": [1.5, 2, 3]})
  315:     df_orig = df.copy()
  316:     arr_a = get_array(df, "a")
  317:     view = df[:]
  318: 
  319:     method = getattr(df, method)
  320:     if warn_copy_on_write:
  321:         with tm.assert_cow_warning():
  322:             method(df["a"] > 1.6, -1, inplace=True)
  323:     else:
  324:         method(df["a"] > 1.6, -1, inplace=True)
  325: 
  326:     if using_copy_on_write:
  327:         assert not np.shares_memory(get_array(df, "a"), arr_a)
  328:         assert df._mgr._has_no_reference(0)
  329:         assert view._mgr._has_no_reference(0)
  330:         tm.assert_frame_equal(view, df_orig)
  331:     else:
  332:         assert np.shares_memory(get_array(df, "a"), arr_a)
  333: 
  334: 
  335: def test_replace_empty_list(using_copy_on_write):
  336:     df = DataFrame({"a": [1, 2]})
  337: 
  338:     df2 = df.replace([], [])
  339:     if using_copy_on_write:
  340:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  341:         assert not df._mgr._has_no_reference(0)
  342:     else:
  343:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  344: 
  345:     arr_a = get_array(df, "a")
  346:     df.replace([], [])
  347:     if using_copy_on_write:
  348:         assert np.shares_memory(get_array(df, "a"), arr_a)
  349:         assert not df._mgr._has_no_reference(0)
  350:         assert not df2._mgr._has_no_reference(0)
  351: 
  352: 
  353: @pytest.mark.parametrize("value", ["d", None])
  354: def test_replace_object_list_inplace(using_copy_on_write, value):
  355:     df = DataFrame({"a": ["a", "b", "c"]})
  356:     arr = get_array(df, "a")
  357:     df.replace(["c"], value, inplace=True)
  358:     if using_copy_on_write or value is None:
  359:         assert np.shares_memory(arr, get_array(df, "a"))
  360:     else:
  361:         # This could be inplace
  362:         assert not np.shares_memory(arr, get_array(df, "a"))
  363:     if using_copy_on_write:
  364:         assert df._mgr._has_no_reference(0)
  365: 
  366: 
  367: def test_replace_list_multiple_elements_inplace(using_copy_on_write):
  368:     df = DataFrame({"a": [1, 2, 3]})
  369:     arr = get_array(df, "a")
  370:     df.replace([1, 2], 4, inplace=True)
  371:     if using_copy_on_write:
  372:         assert np.shares_memory(arr, get_array(df, "a"))
  373:         assert df._mgr._has_no_reference(0)
  374:     else:
  375:         assert np.shares_memory(arr, get_array(df, "a"))
  376: 
  377: 
  378: def test_replace_list_none(using_copy_on_write):
  379:     df = DataFrame({"a": ["a", "b", "c"]})
  380: 
  381:     df_orig = df.copy()
  382:     df2 = df.replace(["b"], value=None)
  383:     tm.assert_frame_equal(df, df_orig)
  384: 
  385:     assert not np.shares_memory(get_array(df, "a"), get_array(df2, "a"))
  386: 
  387: 
  388: def test_replace_list_none_inplace_refs(using_copy_on_write, warn_copy_on_write):
  389:     df = DataFrame({"a": ["a", "b", "c"]})
  390:     arr = get_array(df, "a")
  391:     df_orig = df.copy()
  392:     view = df[:]
  393:     with tm.assert_cow_warning(warn_copy_on_write):
  394:         df.replace(["a"], value=None, inplace=True)
  395:     if using_copy_on_write:
  396:         assert df._mgr._has_no_reference(0)
  397:         assert not np.shares_memory(arr, get_array(df, "a"))
  398:         tm.assert_frame_equal(df_orig, view)
  399:     else:
  400:         assert np.shares_memory(arr, get_array(df, "a"))
  401: 
  402: 
  403: def test_replace_columnwise_no_op_inplace(using_copy_on_write):
  404:     df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3]})
  405:     view = df[:]
  406:     df_orig = df.copy()
  407:     df.replace({"a": 10}, 100, inplace=True)
  408:     if using_copy_on_write:
  409:         assert np.shares_memory(get_array(view, "a"), get_array(df, "a"))
  410:         df.iloc[0, 0] = 100
  411:         tm.assert_frame_equal(view, df_orig)
  412: 
  413: 
  414: def test_replace_columnwise_no_op(using_copy_on_write):
  415:     df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3]})
  416:     df_orig = df.copy()
  417:     df2 = df.replace({"a": 10}, 100)
  418:     if using_copy_on_write:
  419:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  420:     df2.iloc[0, 0] = 100
  421:     tm.assert_frame_equal(df, df_orig)
  422: 
  423: 
  424: def test_replace_chained_assignment(using_copy_on_write):
  425:     df = DataFrame({"a": [1, np.nan, 2], "b": 1})
  426:     df_orig = df.copy()
  427:     if using_copy_on_write:
  428:         with tm.raises_chained_assignment_error():
  429:             df["a"].replace(1, 100, inplace=True)
  430:         tm.assert_frame_equal(df, df_orig)
  431: 
  432:         with tm.raises_chained_assignment_error():
  433:             df[["a"]].replace(1, 100, inplace=True)
  434:         tm.assert_frame_equal(df, df_orig)
  435:     else:
  436:         with tm.assert_produces_warning(None):
  437:             with option_context("mode.chained_assignment", None):
  438:                 df[["a"]].replace(1, 100, inplace=True)
  439: 
  440:         with tm.assert_produces_warning(None):
  441:             with option_context("mode.chained_assignment", None):
  442:                 df[df.a > 5].replace(1, 100, inplace=True)
  443: 
  444:         with tm.assert_produces_warning(FutureWarning, match="inplace method"):
  445:             df["a"].replace(1, 100, inplace=True)
  446: 
  447: 
  448: def test_replace_listlike(using_copy_on_write):
  449:     df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3]})
  450:     df_orig = df.copy()
  451: 
  452:     result = df.replace([200, 201], [11, 11])
  453:     if using_copy_on_write:
  454:         assert np.shares_memory(get_array(result, "a"), get_array(df, "a"))
  455:     else:
  456:         assert not np.shares_memory(get_array(result, "a"), get_array(df, "a"))
  457: 
  458:     result.iloc[0, 0] = 100
  459:     tm.assert_frame_equal(df, df)
  460: 
  461:     result = df.replace([200, 2], [10, 10])
  462:     assert not np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  463:     tm.assert_frame_equal(df, df_orig)
  464: 
  465: 
  466: def test_replace_listlike_inplace(using_copy_on_write, warn_copy_on_write):
  467:     df = DataFrame({"a": [1, 2, 3], "b": [1, 2, 3]})
  468:     arr = get_array(df, "a")
  469:     df.replace([200, 2], [10, 11], inplace=True)
  470:     assert np.shares_memory(get_array(df, "a"), arr)
  471: 
  472:     view = df[:]
  473:     df_orig = df.copy()
  474:     with tm.assert_cow_warning(warn_copy_on_write):
  475:         df.replace([200, 3], [10, 11], inplace=True)
  476:     if using_copy_on_write:
  477:         assert not np.shares_memory(get_array(df, "a"), arr)
  478:         tm.assert_frame_equal(view, df_orig)
  479:     else:
  480:         assert np.shares_memory(get_array(df, "a"), arr)
  481:         tm.assert_frame_equal(df, view)
