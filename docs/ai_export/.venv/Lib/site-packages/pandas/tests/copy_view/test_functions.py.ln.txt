    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     Index,
    7:     Series,
    8:     concat,
    9:     merge,
   10: )
   11: import pandas._testing as tm
   12: from pandas.tests.copy_view.util import get_array
   13: 
   14: 
   15: def test_concat_frames(using_copy_on_write):
   16:     df = DataFrame({"b": ["a"] * 3})
   17:     df2 = DataFrame({"a": ["a"] * 3})
   18:     df_orig = df.copy()
   19:     result = concat([df, df2], axis=1)
   20: 
   21:     if using_copy_on_write:
   22:         assert np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   23:         assert np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   24:     else:
   25:         assert not np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   26:         assert not np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   27: 
   28:     result.iloc[0, 0] = "d"
   29:     if using_copy_on_write:
   30:         assert not np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   31:         assert np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   32: 
   33:     result.iloc[0, 1] = "d"
   34:     if using_copy_on_write:
   35:         assert not np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   36:     tm.assert_frame_equal(df, df_orig)
   37: 
   38: 
   39: def test_concat_frames_updating_input(using_copy_on_write):
   40:     df = DataFrame({"b": ["a"] * 3})
   41:     df2 = DataFrame({"a": ["a"] * 3})
   42:     result = concat([df, df2], axis=1)
   43: 
   44:     if using_copy_on_write:
   45:         assert np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   46:         assert np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   47:     else:
   48:         assert not np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   49:         assert not np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   50: 
   51:     expected = result.copy()
   52:     df.iloc[0, 0] = "d"
   53:     if using_copy_on_write:
   54:         assert not np.shares_memory(get_array(result, "b"), get_array(df, "b"))
   55:         assert np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   56: 
   57:     df2.iloc[0, 0] = "d"
   58:     if using_copy_on_write:
   59:         assert not np.shares_memory(get_array(result, "a"), get_array(df2, "a"))
   60:     tm.assert_frame_equal(result, expected)
   61: 
   62: 
   63: def test_concat_series(using_copy_on_write):
   64:     ser = Series([1, 2], name="a")
   65:     ser2 = Series([3, 4], name="b")
   66:     ser_orig = ser.copy()
   67:     ser2_orig = ser2.copy()
   68:     result = concat([ser, ser2], axis=1)
   69: 
   70:     if using_copy_on_write:
   71:         assert np.shares_memory(get_array(result, "a"), ser.values)
   72:         assert np.shares_memory(get_array(result, "b"), ser2.values)
   73:     else:
   74:         assert not np.shares_memory(get_array(result, "a"), ser.values)
   75:         assert not np.shares_memory(get_array(result, "b"), ser2.values)
   76: 
   77:     result.iloc[0, 0] = 100
   78:     if using_copy_on_write:
   79:         assert not np.shares_memory(get_array(result, "a"), ser.values)
   80:         assert np.shares_memory(get_array(result, "b"), ser2.values)
   81: 
   82:     result.iloc[0, 1] = 1000
   83:     if using_copy_on_write:
   84:         assert not np.shares_memory(get_array(result, "b"), ser2.values)
   85:     tm.assert_series_equal(ser, ser_orig)
   86:     tm.assert_series_equal(ser2, ser2_orig)
   87: 
   88: 
   89: def test_concat_frames_chained(using_copy_on_write):
   90:     df1 = DataFrame({"a": [1, 2, 3], "b": [0.1, 0.2, 0.3]})
   91:     df2 = DataFrame({"c": [4, 5, 6]})
   92:     df3 = DataFrame({"d": [4, 5, 6]})
   93:     result = concat([concat([df1, df2], axis=1), df3], axis=1)
   94:     expected = result.copy()
   95: 
   96:     if using_copy_on_write:
   97:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
   98:         assert np.shares_memory(get_array(result, "c"), get_array(df2, "c"))
   99:         assert np.shares_memory(get_array(result, "d"), get_array(df3, "d"))
  100:     else:
  101:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  102:         assert not np.shares_memory(get_array(result, "c"), get_array(df2, "c"))
  103:         assert not np.shares_memory(get_array(result, "d"), get_array(df3, "d"))
  104: 
  105:     df1.iloc[0, 0] = 100
  106:     if using_copy_on_write:
  107:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  108: 
  109:     tm.assert_frame_equal(result, expected)
  110: 
  111: 
  112: def test_concat_series_chained(using_copy_on_write):
  113:     ser1 = Series([1, 2, 3], name="a")
  114:     ser2 = Series([4, 5, 6], name="c")
  115:     ser3 = Series([4, 5, 6], name="d")
  116:     result = concat([concat([ser1, ser2], axis=1), ser3], axis=1)
  117:     expected = result.copy()
  118: 
  119:     if using_copy_on_write:
  120:         assert np.shares_memory(get_array(result, "a"), get_array(ser1, "a"))
  121:         assert np.shares_memory(get_array(result, "c"), get_array(ser2, "c"))
  122:         assert np.shares_memory(get_array(result, "d"), get_array(ser3, "d"))
  123:     else:
  124:         assert not np.shares_memory(get_array(result, "a"), get_array(ser1, "a"))
  125:         assert not np.shares_memory(get_array(result, "c"), get_array(ser2, "c"))
  126:         assert not np.shares_memory(get_array(result, "d"), get_array(ser3, "d"))
  127: 
  128:     ser1.iloc[0] = 100
  129:     if using_copy_on_write:
  130:         assert not np.shares_memory(get_array(result, "a"), get_array(ser1, "a"))
  131: 
  132:     tm.assert_frame_equal(result, expected)
  133: 
  134: 
  135: def test_concat_series_updating_input(using_copy_on_write):
  136:     ser = Series([1, 2], name="a")
  137:     ser2 = Series([3, 4], name="b")
  138:     expected = DataFrame({"a": [1, 2], "b": [3, 4]})
  139:     result = concat([ser, ser2], axis=1)
  140: 
  141:     if using_copy_on_write:
  142:         assert np.shares_memory(get_array(result, "a"), get_array(ser, "a"))
  143:         assert np.shares_memory(get_array(result, "b"), get_array(ser2, "b"))
  144:     else:
  145:         assert not np.shares_memory(get_array(result, "a"), get_array(ser, "a"))
  146:         assert not np.shares_memory(get_array(result, "b"), get_array(ser2, "b"))
  147: 
  148:     ser.iloc[0] = 100
  149:     if using_copy_on_write:
  150:         assert not np.shares_memory(get_array(result, "a"), get_array(ser, "a"))
  151:         assert np.shares_memory(get_array(result, "b"), get_array(ser2, "b"))
  152:     tm.assert_frame_equal(result, expected)
  153: 
  154:     ser2.iloc[0] = 1000
  155:     if using_copy_on_write:
  156:         assert not np.shares_memory(get_array(result, "b"), get_array(ser2, "b"))
  157:     tm.assert_frame_equal(result, expected)
  158: 
  159: 
  160: def test_concat_mixed_series_frame(using_copy_on_write):
  161:     df = DataFrame({"a": [1, 2, 3], "c": 1})
  162:     ser = Series([4, 5, 6], name="d")
  163:     result = concat([df, ser], axis=1)
  164:     expected = result.copy()
  165: 
  166:     if using_copy_on_write:
  167:         assert np.shares_memory(get_array(result, "a"), get_array(df, "a"))
  168:         assert np.shares_memory(get_array(result, "c"), get_array(df, "c"))
  169:         assert np.shares_memory(get_array(result, "d"), get_array(ser, "d"))
  170:     else:
  171:         assert not np.shares_memory(get_array(result, "a"), get_array(df, "a"))
  172:         assert not np.shares_memory(get_array(result, "c"), get_array(df, "c"))
  173:         assert not np.shares_memory(get_array(result, "d"), get_array(ser, "d"))
  174: 
  175:     ser.iloc[0] = 100
  176:     if using_copy_on_write:
  177:         assert not np.shares_memory(get_array(result, "d"), get_array(ser, "d"))
  178: 
  179:     df.iloc[0, 0] = 100
  180:     if using_copy_on_write:
  181:         assert not np.shares_memory(get_array(result, "a"), get_array(df, "a"))
  182:     tm.assert_frame_equal(result, expected)
  183: 
  184: 
  185: @pytest.mark.parametrize("copy", [True, None, False])
  186: def test_concat_copy_keyword(using_copy_on_write, copy):
  187:     df = DataFrame({"a": [1, 2]})
  188:     df2 = DataFrame({"b": [1.5, 2.5]})
  189: 
  190:     result = concat([df, df2], axis=1, copy=copy)
  191: 
  192:     if using_copy_on_write or copy is False:
  193:         assert np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  194:         assert np.shares_memory(get_array(df2, "b"), get_array(result, "b"))
  195:     else:
  196:         assert not np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  197:         assert not np.shares_memory(get_array(df2, "b"), get_array(result, "b"))
  198: 
  199: 
  200: @pytest.mark.parametrize(
  201:     "func",
  202:     [
  203:         lambda df1, df2, **kwargs: df1.merge(df2, **kwargs),
  204:         lambda df1, df2, **kwargs: merge(df1, df2, **kwargs),
  205:     ],
  206: )
  207: def test_merge_on_key(using_copy_on_write, func):
  208:     df1 = DataFrame({"key": ["a", "b", "c"], "a": [1, 2, 3]})
  209:     df2 = DataFrame({"key": ["a", "b", "c"], "b": [4, 5, 6]})
  210:     df1_orig = df1.copy()
  211:     df2_orig = df2.copy()
  212: 
  213:     result = func(df1, df2, on="key")
  214: 
  215:     if using_copy_on_write:
  216:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  217:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  218:         assert np.shares_memory(get_array(result, "key"), get_array(df1, "key"))
  219:         assert not np.shares_memory(get_array(result, "key"), get_array(df2, "key"))
  220:     else:
  221:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  222:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  223: 
  224:     result.iloc[0, 1] = 0
  225:     if using_copy_on_write:
  226:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  227:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  228: 
  229:     result.iloc[0, 2] = 0
  230:     if using_copy_on_write:
  231:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  232:     tm.assert_frame_equal(df1, df1_orig)
  233:     tm.assert_frame_equal(df2, df2_orig)
  234: 
  235: 
  236: def test_merge_on_index(using_copy_on_write):
  237:     df1 = DataFrame({"a": [1, 2, 3]})
  238:     df2 = DataFrame({"b": [4, 5, 6]})
  239:     df1_orig = df1.copy()
  240:     df2_orig = df2.copy()
  241: 
  242:     result = merge(df1, df2, left_index=True, right_index=True)
  243: 
  244:     if using_copy_on_write:
  245:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  246:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  247:     else:
  248:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  249:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  250: 
  251:     result.iloc[0, 0] = 0
  252:     if using_copy_on_write:
  253:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  254:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  255: 
  256:     result.iloc[0, 1] = 0
  257:     if using_copy_on_write:
  258:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  259:     tm.assert_frame_equal(df1, df1_orig)
  260:     tm.assert_frame_equal(df2, df2_orig)
  261: 
  262: 
  263: @pytest.mark.parametrize(
  264:     "func, how",
  265:     [
  266:         (lambda df1, df2, **kwargs: merge(df2, df1, on="key", **kwargs), "right"),
  267:         (lambda df1, df2, **kwargs: merge(df1, df2, on="key", **kwargs), "left"),
  268:     ],
  269: )
  270: def test_merge_on_key_enlarging_one(using_copy_on_write, func, how):
  271:     df1 = DataFrame({"key": ["a", "b", "c"], "a": [1, 2, 3]})
  272:     df2 = DataFrame({"key": ["a", "b"], "b": [4, 5]})
  273:     df1_orig = df1.copy()
  274:     df2_orig = df2.copy()
  275: 
  276:     result = func(df1, df2, how=how)
  277: 
  278:     if using_copy_on_write:
  279:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  280:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  281:         assert df2._mgr._has_no_reference(1)
  282:         assert df2._mgr._has_no_reference(0)
  283:         assert np.shares_memory(get_array(result, "key"), get_array(df1, "key")) is (
  284:             how == "left"
  285:         )
  286:         assert not np.shares_memory(get_array(result, "key"), get_array(df2, "key"))
  287:     else:
  288:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  289:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  290: 
  291:     if how == "left":
  292:         result.iloc[0, 1] = 0
  293:     else:
  294:         result.iloc[0, 2] = 0
  295:     if using_copy_on_write:
  296:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  297:     tm.assert_frame_equal(df1, df1_orig)
  298:     tm.assert_frame_equal(df2, df2_orig)
  299: 
  300: 
  301: @pytest.mark.parametrize("copy", [True, None, False])
  302: def test_merge_copy_keyword(using_copy_on_write, copy):
  303:     df = DataFrame({"a": [1, 2]})
  304:     df2 = DataFrame({"b": [3, 4.5]})
  305: 
  306:     result = df.merge(df2, copy=copy, left_index=True, right_index=True)
  307: 
  308:     if using_copy_on_write or copy is False:
  309:         assert np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  310:         assert np.shares_memory(get_array(df2, "b"), get_array(result, "b"))
  311:     else:
  312:         assert not np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  313:         assert not np.shares_memory(get_array(df2, "b"), get_array(result, "b"))
  314: 
  315: 
  316: def test_join_on_key(using_copy_on_write):
  317:     df_index = Index(["a", "b", "c"], name="key")
  318: 
  319:     df1 = DataFrame({"a": [1, 2, 3]}, index=df_index.copy(deep=True))
  320:     df2 = DataFrame({"b": [4, 5, 6]}, index=df_index.copy(deep=True))
  321: 
  322:     df1_orig = df1.copy()
  323:     df2_orig = df2.copy()
  324: 
  325:     result = df1.join(df2, on="key")
  326: 
  327:     if using_copy_on_write:
  328:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  329:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  330:         assert np.shares_memory(get_array(result.index), get_array(df1.index))
  331:         assert not np.shares_memory(get_array(result.index), get_array(df2.index))
  332:     else:
  333:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  334:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  335: 
  336:     result.iloc[0, 0] = 0
  337:     if using_copy_on_write:
  338:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  339:         assert np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  340: 
  341:     result.iloc[0, 1] = 0
  342:     if using_copy_on_write:
  343:         assert not np.shares_memory(get_array(result, "b"), get_array(df2, "b"))
  344: 
  345:     tm.assert_frame_equal(df1, df1_orig)
  346:     tm.assert_frame_equal(df2, df2_orig)
  347: 
  348: 
  349: def test_join_multiple_dataframes_on_key(using_copy_on_write):
  350:     df_index = Index(["a", "b", "c"], name="key")
  351: 
  352:     df1 = DataFrame({"a": [1, 2, 3]}, index=df_index.copy(deep=True))
  353:     dfs_list = [
  354:         DataFrame({"b": [4, 5, 6]}, index=df_index.copy(deep=True)),
  355:         DataFrame({"c": [7, 8, 9]}, index=df_index.copy(deep=True)),
  356:     ]
  357: 
  358:     df1_orig = df1.copy()
  359:     dfs_list_orig = [df.copy() for df in dfs_list]
  360: 
  361:     result = df1.join(dfs_list)
  362: 
  363:     if using_copy_on_write:
  364:         assert np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  365:         assert np.shares_memory(get_array(result, "b"), get_array(dfs_list[0], "b"))
  366:         assert np.shares_memory(get_array(result, "c"), get_array(dfs_list[1], "c"))
  367:         assert np.shares_memory(get_array(result.index), get_array(df1.index))
  368:         assert not np.shares_memory(
  369:             get_array(result.index), get_array(dfs_list[0].index)
  370:         )
  371:         assert not np.shares_memory(
  372:             get_array(result.index), get_array(dfs_list[1].index)
  373:         )
  374:     else:
  375:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  376:         assert not np.shares_memory(get_array(result, "b"), get_array(dfs_list[0], "b"))
  377:         assert not np.shares_memory(get_array(result, "c"), get_array(dfs_list[1], "c"))
  378: 
  379:     result.iloc[0, 0] = 0
  380:     if using_copy_on_write:
  381:         assert not np.shares_memory(get_array(result, "a"), get_array(df1, "a"))
  382:         assert np.shares_memory(get_array(result, "b"), get_array(dfs_list[0], "b"))
  383:         assert np.shares_memory(get_array(result, "c"), get_array(dfs_list[1], "c"))
  384: 
  385:     result.iloc[0, 1] = 0
  386:     if using_copy_on_write:
  387:         assert not np.shares_memory(get_array(result, "b"), get_array(dfs_list[0], "b"))
  388:         assert np.shares_memory(get_array(result, "c"), get_array(dfs_list[1], "c"))
  389: 
  390:     result.iloc[0, 2] = 0
  391:     if using_copy_on_write:
  392:         assert not np.shares_memory(get_array(result, "c"), get_array(dfs_list[1], "c"))
  393: 
  394:     tm.assert_frame_equal(df1, df1_orig)
  395:     for df, df_orig in zip(dfs_list, dfs_list_orig):
  396:         tm.assert_frame_equal(df, df_orig)
