    1: import pickle
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas.compat.pyarrow import pa_version_under12p0
    7: import pandas.util._test_decorators as td
    8: 
    9: import pandas as pd
   10: from pandas import (
   11:     DataFrame,
   12:     Series,
   13:     Timestamp,
   14:     date_range,
   15: )
   16: import pandas._testing as tm
   17: from pandas.tests.copy_view.util import get_array
   18: 
   19: 
   20: def test_astype_single_dtype(using_copy_on_write):
   21:     df = DataFrame({"a": [1, 2, 3], "b": [4, 5, 6], "c": 1.5})
   22:     df_orig = df.copy()
   23:     df2 = df.astype("float64")
   24: 
   25:     if using_copy_on_write:
   26:         assert np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
   27:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   28:     else:
   29:         assert not np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
   30:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   31: 
   32:     # mutating df2 triggers a copy-on-write for that column/block
   33:     df2.iloc[0, 2] = 5.5
   34:     if using_copy_on_write:
   35:         assert not np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
   36:     tm.assert_frame_equal(df, df_orig)
   37: 
   38:     # mutating parent also doesn't update result
   39:     df2 = df.astype("float64")
   40:     df.iloc[0, 2] = 5.5
   41:     tm.assert_frame_equal(df2, df_orig.astype("float64"))
   42: 
   43: 
   44: @pytest.mark.parametrize("dtype", ["int64", "Int64"])
   45: @pytest.mark.parametrize("new_dtype", ["int64", "Int64", "int64[pyarrow]"])
   46: def test_astype_avoids_copy(using_copy_on_write, dtype, new_dtype):
   47:     if new_dtype == "int64[pyarrow]":
   48:         pytest.importorskip("pyarrow")
   49:     df = DataFrame({"a": [1, 2, 3]}, dtype=dtype)
   50:     df_orig = df.copy()
   51:     df2 = df.astype(new_dtype)
   52: 
   53:     if using_copy_on_write:
   54:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   55:     else:
   56:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   57: 
   58:     # mutating df2 triggers a copy-on-write for that column/block
   59:     df2.iloc[0, 0] = 10
   60:     if using_copy_on_write:
   61:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   62:     tm.assert_frame_equal(df, df_orig)
   63: 
   64:     # mutating parent also doesn't update result
   65:     df2 = df.astype(new_dtype)
   66:     df.iloc[0, 0] = 100
   67:     tm.assert_frame_equal(df2, df_orig.astype(new_dtype))
   68: 
   69: 
   70: @pytest.mark.parametrize("dtype", ["float64", "int32", "Int32", "int32[pyarrow]"])
   71: def test_astype_different_target_dtype(using_copy_on_write, dtype):
   72:     if dtype == "int32[pyarrow]":
   73:         pytest.importorskip("pyarrow")
   74:     df = DataFrame({"a": [1, 2, 3]})
   75:     df_orig = df.copy()
   76:     df2 = df.astype(dtype)
   77: 
   78:     assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
   79:     if using_copy_on_write:
   80:         assert df2._mgr._has_no_reference(0)
   81: 
   82:     df2.iloc[0, 0] = 5
   83:     tm.assert_frame_equal(df, df_orig)
   84: 
   85:     # mutating parent also doesn't update result
   86:     df2 = df.astype(dtype)
   87:     df.iloc[0, 0] = 100
   88:     tm.assert_frame_equal(df2, df_orig.astype(dtype))
   89: 
   90: 
   91: @td.skip_array_manager_invalid_test
   92: def test_astype_numpy_to_ea():
   93:     ser = Series([1, 2, 3])
   94:     with pd.option_context("mode.copy_on_write", True):
   95:         result = ser.astype("Int64")
   96:     assert np.shares_memory(get_array(ser), get_array(result))
   97: 
   98: 
   99: @pytest.mark.parametrize(
  100:     "dtype, new_dtype", [("object", "string"), ("string", "object")]
  101: )
  102: def test_astype_string_and_object(using_copy_on_write, dtype, new_dtype):
  103:     df = DataFrame({"a": ["a", "b", "c"]}, dtype=dtype)
  104:     df_orig = df.copy()
  105:     df2 = df.astype(new_dtype)
  106: 
  107:     if using_copy_on_write:
  108:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  109:     else:
  110:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  111: 
  112:     df2.iloc[0, 0] = "x"
  113:     tm.assert_frame_equal(df, df_orig)
  114: 
  115: 
  116: @pytest.mark.parametrize(
  117:     "dtype, new_dtype", [("object", "string"), ("string", "object")]
  118: )
  119: def test_astype_string_and_object_update_original(
  120:     using_copy_on_write, dtype, new_dtype
  121: ):
  122:     df = DataFrame({"a": ["a", "b", "c"]}, dtype=dtype)
  123:     df2 = df.astype(new_dtype)
  124:     df_orig = df2.copy()
  125: 
  126:     if using_copy_on_write:
  127:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  128:     else:
  129:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  130: 
  131:     df.iloc[0, 0] = "x"
  132:     tm.assert_frame_equal(df2, df_orig)
  133: 
  134: 
  135: def test_astype_string_copy_on_pickle_roundrip():
  136:     # https://github.com/pandas-dev/pandas/issues/54654
  137:     # ensure_string_array may alter array inplace
  138:     base = Series(np.array([(1, 2), None, 1], dtype="object"))
  139:     base_copy = pickle.loads(pickle.dumps(base))
  140:     base_copy.astype(str)
  141:     tm.assert_series_equal(base, base_copy)
  142: 
  143: 
  144: def test_astype_dict_dtypes(using_copy_on_write):
  145:     df = DataFrame(
  146:         {"a": [1, 2, 3], "b": [4, 5, 6], "c": Series([1.5, 1.5, 1.5], dtype="float64")}
  147:     )
  148:     df_orig = df.copy()
  149:     df2 = df.astype({"a": "float64", "c": "float64"})
  150: 
  151:     if using_copy_on_write:
  152:         assert np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
  153:         assert np.shares_memory(get_array(df2, "b"), get_array(df, "b"))
  154:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  155:     else:
  156:         assert not np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
  157:         assert not np.shares_memory(get_array(df2, "b"), get_array(df, "b"))
  158:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  159: 
  160:     # mutating df2 triggers a copy-on-write for that column/block
  161:     df2.iloc[0, 2] = 5.5
  162:     if using_copy_on_write:
  163:         assert not np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
  164: 
  165:     df2.iloc[0, 1] = 10
  166:     if using_copy_on_write:
  167:         assert not np.shares_memory(get_array(df2, "b"), get_array(df, "b"))
  168:     tm.assert_frame_equal(df, df_orig)
  169: 
  170: 
  171: def test_astype_different_datetime_resos(using_copy_on_write):
  172:     df = DataFrame({"a": date_range("2019-12-31", periods=2, freq="D")})
  173:     result = df.astype("datetime64[ms]")
  174: 
  175:     assert not np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  176:     if using_copy_on_write:
  177:         assert result._mgr._has_no_reference(0)
  178: 
  179: 
  180: def test_astype_different_timezones(using_copy_on_write):
  181:     df = DataFrame(
  182:         {"a": date_range("2019-12-31", periods=5, freq="D", tz="US/Pacific")}
  183:     )
  184:     result = df.astype("datetime64[ns, Europe/Berlin]")
  185:     if using_copy_on_write:
  186:         assert not result._mgr._has_no_reference(0)
  187:         assert np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  188: 
  189: 
  190: def test_astype_different_timezones_different_reso(using_copy_on_write):
  191:     df = DataFrame(
  192:         {"a": date_range("2019-12-31", periods=5, freq="D", tz="US/Pacific")}
  193:     )
  194:     result = df.astype("datetime64[ms, Europe/Berlin]")
  195:     if using_copy_on_write:
  196:         assert result._mgr._has_no_reference(0)
  197:         assert not np.shares_memory(get_array(df, "a"), get_array(result, "a"))
  198: 
  199: 
  200: def test_astype_arrow_timestamp(using_copy_on_write):
  201:     pytest.importorskip("pyarrow")
  202:     df = DataFrame(
  203:         {
  204:             "a": [
  205:                 Timestamp("2020-01-01 01:01:01.000001"),
  206:                 Timestamp("2020-01-01 01:01:01.000001"),
  207:             ]
  208:         },
  209:         dtype="M8[ns]",
  210:     )
  211:     result = df.astype("timestamp[ns][pyarrow]")
  212:     if using_copy_on_write:
  213:         assert not result._mgr._has_no_reference(0)
  214:         if pa_version_under12p0:
  215:             assert not np.shares_memory(
  216:                 get_array(df, "a"), get_array(result, "a")._pa_array
  217:             )
  218:         else:
  219:             assert np.shares_memory(
  220:                 get_array(df, "a"), get_array(result, "a")._pa_array
  221:             )
  222: 
  223: 
  224: def test_convert_dtypes_infer_objects(using_copy_on_write):
  225:     ser = Series(["a", "b", "c"])
  226:     ser_orig = ser.copy()
  227:     result = ser.convert_dtypes(
  228:         convert_integer=False,
  229:         convert_boolean=False,
  230:         convert_floating=False,
  231:         convert_string=False,
  232:     )
  233: 
  234:     if using_copy_on_write:
  235:         assert np.shares_memory(get_array(ser), get_array(result))
  236:     else:
  237:         assert not np.shares_memory(get_array(ser), get_array(result))
  238: 
  239:     result.iloc[0] = "x"
  240:     tm.assert_series_equal(ser, ser_orig)
  241: 
  242: 
  243: def test_convert_dtypes(using_copy_on_write):
  244:     df = DataFrame({"a": ["a", "b"], "b": [1, 2], "c": [1.5, 2.5], "d": [True, False]})
  245:     df_orig = df.copy()
  246:     df2 = df.convert_dtypes()
  247: 
  248:     if using_copy_on_write:
  249:         assert np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  250:         assert np.shares_memory(get_array(df2, "d"), get_array(df, "d"))
  251:         assert np.shares_memory(get_array(df2, "b"), get_array(df, "b"))
  252:         assert np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
  253:     else:
  254:         assert not np.shares_memory(get_array(df2, "a"), get_array(df, "a"))
  255:         assert not np.shares_memory(get_array(df2, "b"), get_array(df, "b"))
  256:         assert not np.shares_memory(get_array(df2, "c"), get_array(df, "c"))
  257:         assert not np.shares_memory(get_array(df2, "d"), get_array(df, "d"))
  258: 
  259:     df2.iloc[0, 0] = "x"
  260:     tm.assert_frame_equal(df, df_orig)
