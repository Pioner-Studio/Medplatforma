    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     Interval,
    8:     Timedelta,
    9:     Timestamp,
   10: )
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestIntervalArithmetic:
   15:     def test_interval_add(self, closed):
   16:         interval = Interval(0, 1, closed=closed)
   17:         expected = Interval(1, 2, closed=closed)
   18: 
   19:         result = interval + 1
   20:         assert result == expected
   21: 
   22:         result = 1 + interval
   23:         assert result == expected
   24: 
   25:         result = interval
   26:         result += 1
   27:         assert result == expected
   28: 
   29:         msg = r"unsupported operand type\(s\) for \+"
   30:         with pytest.raises(TypeError, match=msg):
   31:             interval + interval
   32: 
   33:         with pytest.raises(TypeError, match=msg):
   34:             interval + "foo"
   35: 
   36:     def test_interval_sub(self, closed):
   37:         interval = Interval(0, 1, closed=closed)
   38:         expected = Interval(-1, 0, closed=closed)
   39: 
   40:         result = interval - 1
   41:         assert result == expected
   42: 
   43:         result = interval
   44:         result -= 1
   45:         assert result == expected
   46: 
   47:         msg = r"unsupported operand type\(s\) for -"
   48:         with pytest.raises(TypeError, match=msg):
   49:             interval - interval
   50: 
   51:         with pytest.raises(TypeError, match=msg):
   52:             interval - "foo"
   53: 
   54:     def test_interval_mult(self, closed):
   55:         interval = Interval(0, 1, closed=closed)
   56:         expected = Interval(0, 2, closed=closed)
   57: 
   58:         result = interval * 2
   59:         assert result == expected
   60: 
   61:         result = 2 * interval
   62:         assert result == expected
   63: 
   64:         result = interval
   65:         result *= 2
   66:         assert result == expected
   67: 
   68:         msg = r"unsupported operand type\(s\) for \*"
   69:         with pytest.raises(TypeError, match=msg):
   70:             interval * interval
   71: 
   72:         msg = r"can\'t multiply sequence by non-int"
   73:         with pytest.raises(TypeError, match=msg):
   74:             interval * "foo"
   75: 
   76:     def test_interval_div(self, closed):
   77:         interval = Interval(0, 1, closed=closed)
   78:         expected = Interval(0, 0.5, closed=closed)
   79: 
   80:         result = interval / 2.0
   81:         assert result == expected
   82: 
   83:         result = interval
   84:         result /= 2.0
   85:         assert result == expected
   86: 
   87:         msg = r"unsupported operand type\(s\) for /"
   88:         with pytest.raises(TypeError, match=msg):
   89:             interval / interval
   90: 
   91:         with pytest.raises(TypeError, match=msg):
   92:             interval / "foo"
   93: 
   94:     def test_interval_floordiv(self, closed):
   95:         interval = Interval(1, 2, closed=closed)
   96:         expected = Interval(0, 1, closed=closed)
   97: 
   98:         result = interval // 2
   99:         assert result == expected
  100: 
  101:         result = interval
  102:         result //= 2
  103:         assert result == expected
  104: 
  105:         msg = r"unsupported operand type\(s\) for //"
  106:         with pytest.raises(TypeError, match=msg):
  107:             interval // interval
  108: 
  109:         with pytest.raises(TypeError, match=msg):
  110:             interval // "foo"
  111: 
  112:     @pytest.mark.parametrize("method", ["__add__", "__sub__"])
  113:     @pytest.mark.parametrize(
  114:         "interval",
  115:         [
  116:             Interval(
  117:                 Timestamp("2017-01-01 00:00:00"), Timestamp("2018-01-01 00:00:00")
  118:             ),
  119:             Interval(Timedelta(days=7), Timedelta(days=14)),
  120:         ],
  121:     )
  122:     @pytest.mark.parametrize(
  123:         "delta", [Timedelta(days=7), timedelta(7), np.timedelta64(7, "D")]
  124:     )
  125:     def test_time_interval_add_subtract_timedelta(self, interval, delta, method):
  126:         # https://github.com/pandas-dev/pandas/issues/32023
  127:         result = getattr(interval, method)(delta)
  128:         left = getattr(interval.left, method)(delta)
  129:         right = getattr(interval.right, method)(delta)
  130:         expected = Interval(left, right)
  131: 
  132:         assert result == expected
  133: 
  134:     @pytest.mark.parametrize("interval", [Interval(1, 2), Interval(1.0, 2.0)])
  135:     @pytest.mark.parametrize(
  136:         "delta", [Timedelta(days=7), timedelta(7), np.timedelta64(7, "D")]
  137:     )
  138:     def test_numeric_interval_add_timedelta_raises(self, interval, delta):
  139:         # https://github.com/pandas-dev/pandas/issues/32023
  140:         msg = "|".join(
  141:             [
  142:                 "unsupported operand",
  143:                 "cannot use operands",
  144:                 "Only numeric, Timestamp and Timedelta endpoints are allowed",
  145:             ]
  146:         )
  147:         with pytest.raises((TypeError, ValueError), match=msg):
  148:             interval + delta
  149: 
  150:         with pytest.raises((TypeError, ValueError), match=msg):
  151:             delta + interval
  152: 
  153:     @pytest.mark.parametrize("klass", [timedelta, np.timedelta64, Timedelta])
  154:     def test_timedelta_add_timestamp_interval(self, klass):
  155:         delta = klass(0)
  156:         expected = Interval(Timestamp("2020-01-01"), Timestamp("2020-02-01"))
  157: 
  158:         result = delta + expected
  159:         assert result == expected
  160: 
  161:         result = expected + delta
  162:         assert result == expected
  163: 
  164: 
  165: class TestIntervalComparisons:
  166:     def test_interval_equal(self):
  167:         assert Interval(0, 1) == Interval(0, 1, closed="right")
  168:         assert Interval(0, 1) != Interval(0, 1, closed="left")
  169:         assert Interval(0, 1) != 0
  170: 
  171:     def test_interval_comparison(self):
  172:         msg = (
  173:             "'<' not supported between instances of "
  174:             "'pandas._libs.interval.Interval' and 'int'"
  175:         )
  176:         with pytest.raises(TypeError, match=msg):
  177:             Interval(0, 1) < 2
  178: 
  179:         assert Interval(0, 1) < Interval(1, 2)
  180:         assert Interval(0, 1) < Interval(0, 2)
  181:         assert Interval(0, 1) < Interval(0.5, 1.5)
  182:         assert Interval(0, 1) <= Interval(0, 1)
  183:         assert Interval(0, 1) > Interval(-1, 2)
  184:         assert Interval(0, 1) >= Interval(0, 1)
  185: 
  186:     def test_equality_comparison_broadcasts_over_array(self):
  187:         # https://github.com/pandas-dev/pandas/issues/35931
  188:         interval = Interval(0, 1)
  189:         arr = np.array([interval, interval])
  190:         result = interval == arr
  191:         expected = np.array([True, True])
  192:         tm.assert_numpy_array_equal(result, expected)
