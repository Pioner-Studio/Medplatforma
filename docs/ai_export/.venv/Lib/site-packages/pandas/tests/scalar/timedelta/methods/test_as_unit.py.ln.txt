    1: import pytest
    2: 
    3: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
    4: from pandas.errors import OutOfBoundsTimedelta
    5: 
    6: from pandas import Timedelta
    7: 
    8: 
    9: class TestAsUnit:
   10:     def test_as_unit(self):
   11:         td = Timedelta(days=1)
   12: 
   13:         assert td.as_unit("ns") is td
   14: 
   15:         res = td.as_unit("us")
   16:         assert res._value == td._value // 1000
   17:         assert res._creso == NpyDatetimeUnit.NPY_FR_us.value
   18: 
   19:         rt = res.as_unit("ns")
   20:         assert rt._value == td._value
   21:         assert rt._creso == td._creso
   22: 
   23:         res = td.as_unit("ms")
   24:         assert res._value == td._value // 1_000_000
   25:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   26: 
   27:         rt = res.as_unit("ns")
   28:         assert rt._value == td._value
   29:         assert rt._creso == td._creso
   30: 
   31:         res = td.as_unit("s")
   32:         assert res._value == td._value // 1_000_000_000
   33:         assert res._creso == NpyDatetimeUnit.NPY_FR_s.value
   34: 
   35:         rt = res.as_unit("ns")
   36:         assert rt._value == td._value
   37:         assert rt._creso == td._creso
   38: 
   39:     def test_as_unit_overflows(self):
   40:         # microsecond that would be just out of bounds for nano
   41:         us = 9223372800000000
   42:         td = Timedelta._from_value_and_reso(us, NpyDatetimeUnit.NPY_FR_us.value)
   43: 
   44:         msg = "Cannot cast 106752 days 00:00:00 to unit='ns' without overflow"
   45:         with pytest.raises(OutOfBoundsTimedelta, match=msg):
   46:             td.as_unit("ns")
   47: 
   48:         res = td.as_unit("ms")
   49:         assert res._value == us // 1000
   50:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   51: 
   52:     def test_as_unit_rounding(self):
   53:         td = Timedelta(microseconds=1500)
   54:         res = td.as_unit("ms")
   55: 
   56:         expected = Timedelta(milliseconds=1)
   57:         assert res == expected
   58: 
   59:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   60:         assert res._value == 1
   61: 
   62:         with pytest.raises(ValueError, match="Cannot losslessly convert units"):
   63:             td.as_unit("ms", round_ok=False)
   64: 
   65:     def test_as_unit_non_nano(self):
   66:         # case where we are going neither to nor from nano
   67:         td = Timedelta(days=1).as_unit("ms")
   68:         assert td.days == 1
   69:         assert td._value == 86_400_000
   70:         assert td.components.days == 1
   71:         assert td._d == 1
   72:         assert td.total_seconds() == 86400
   73: 
   74:         res = td.as_unit("us")
   75:         assert res._value == 86_400_000_000
   76:         assert res.components.days == 1
   77:         assert res.components.hours == 0
   78:         assert res._d == 1
   79:         assert res._h == 0
   80:         assert res.total_seconds() == 86400
