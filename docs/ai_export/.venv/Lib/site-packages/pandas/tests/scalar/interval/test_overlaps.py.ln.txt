    1: import pytest
    2: 
    3: from pandas import (
    4:     Interval,
    5:     Timedelta,
    6:     Timestamp,
    7: )
    8: 
    9: 
   10: @pytest.fixture(
   11:     params=[
   12:         (Timedelta("0 days"), Timedelta("1 day")),
   13:         (Timestamp("2018-01-01"), Timedelta("1 day")),
   14:         (0, 1),
   15:     ],
   16:     ids=lambda x: type(x[0]).__name__,
   17: )
   18: def start_shift(request):
   19:     """
   20:     Fixture for generating intervals of types from a start value and a shift
   21:     value that can be added to start to generate an endpoint
   22:     """
   23:     return request.param
   24: 
   25: 
   26: class TestOverlaps:
   27:     def test_overlaps_self(self, start_shift, closed):
   28:         start, shift = start_shift
   29:         interval = Interval(start, start + shift, closed)
   30:         assert interval.overlaps(interval)
   31: 
   32:     def test_overlaps_nested(self, start_shift, closed, other_closed):
   33:         start, shift = start_shift
   34:         interval1 = Interval(start, start + 3 * shift, other_closed)
   35:         interval2 = Interval(start + shift, start + 2 * shift, closed)
   36: 
   37:         # nested intervals should always overlap
   38:         assert interval1.overlaps(interval2)
   39: 
   40:     def test_overlaps_disjoint(self, start_shift, closed, other_closed):
   41:         start, shift = start_shift
   42:         interval1 = Interval(start, start + shift, other_closed)
   43:         interval2 = Interval(start + 2 * shift, start + 3 * shift, closed)
   44: 
   45:         # disjoint intervals should never overlap
   46:         assert not interval1.overlaps(interval2)
   47: 
   48:     def test_overlaps_endpoint(self, start_shift, closed, other_closed):
   49:         start, shift = start_shift
   50:         interval1 = Interval(start, start + shift, other_closed)
   51:         interval2 = Interval(start + shift, start + 2 * shift, closed)
   52: 
   53:         # overlap if shared endpoint is closed for both (overlap at a point)
   54:         result = interval1.overlaps(interval2)
   55:         expected = interval1.closed_right and interval2.closed_left
   56:         assert result == expected
   57: 
   58:     @pytest.mark.parametrize(
   59:         "other",
   60:         [10, True, "foo", Timedelta("1 day"), Timestamp("2018-01-01")],
   61:         ids=lambda x: type(x).__name__,
   62:     )
   63:     def test_overlaps_invalid_type(self, other):
   64:         interval = Interval(0, 1)
   65:         msg = f"`other` must be an Interval, got {type(other).__name__}"
   66:         with pytest.raises(TypeError, match=msg):
   67:             interval.overlaps(other)
