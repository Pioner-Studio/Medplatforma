    1: from datetime import timedelta
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs.tslibs.period import IncompatibleFrequency
    7: 
    8: from pandas import (
    9:     NaT,
   10:     Period,
   11:     Timedelta,
   12:     Timestamp,
   13:     offsets,
   14: )
   15: 
   16: 
   17: class TestPeriodArithmetic:
   18:     def test_add_overflow_raises(self):
   19:         # GH#55503
   20:         per = Timestamp.max.to_period("ns")
   21: 
   22:         msg = "|".join(
   23:             [
   24:                 "Python int too large to convert to C long",
   25:                 # windows, 32bit linux builds
   26:                 "int too big to convert",
   27:             ]
   28:         )
   29:         with pytest.raises(OverflowError, match=msg):
   30:             per + 1
   31: 
   32:         msg = "value too large"
   33:         with pytest.raises(OverflowError, match=msg):
   34:             per + Timedelta(1)
   35:         with pytest.raises(OverflowError, match=msg):
   36:             per + offsets.Nano(1)
   37: 
   38:     def test_period_add_integer(self):
   39:         per1 = Period(freq="D", year=2008, month=1, day=1)
   40:         per2 = Period(freq="D", year=2008, month=1, day=2)
   41:         assert per1 + 1 == per2
   42:         assert 1 + per1 == per2
   43: 
   44:     def test_period_add_invalid(self):
   45:         # GH#4731
   46:         per1 = Period(freq="D", year=2008, month=1, day=1)
   47:         per2 = Period(freq="D", year=2008, month=1, day=2)
   48: 
   49:         msg = "|".join(
   50:             [
   51:                 r"unsupported operand type\(s\)",
   52:                 "can only concatenate str",
   53:                 "must be str, not Period",
   54:             ]
   55:         )
   56:         with pytest.raises(TypeError, match=msg):
   57:             per1 + "str"
   58:         with pytest.raises(TypeError, match=msg):
   59:             "str" + per1
   60:         with pytest.raises(TypeError, match=msg):
   61:             per1 + per2
   62: 
   63:     def test_period_sub_period_annual(self):
   64:         left, right = Period("2011", freq="Y"), Period("2007", freq="Y")
   65:         result = left - right
   66:         assert result == 4 * right.freq
   67: 
   68:         msg = r"Input has different freq=M from Period\(freq=Y-DEC\)"
   69:         with pytest.raises(IncompatibleFrequency, match=msg):
   70:             left - Period("2007-01", freq="M")
   71: 
   72:     def test_period_sub_period(self):
   73:         per1 = Period("2011-01-01", freq="D")
   74:         per2 = Period("2011-01-15", freq="D")
   75: 
   76:         off = per1.freq
   77:         assert per1 - per2 == -14 * off
   78:         assert per2 - per1 == 14 * off
   79: 
   80:         msg = r"Input has different freq=M from Period\(freq=D\)"
   81:         with pytest.raises(IncompatibleFrequency, match=msg):
   82:             per1 - Period("2011-02", freq="M")
   83: 
   84:     @pytest.mark.parametrize("n", [1, 2, 3, 4])
   85:     def test_sub_n_gt_1_ticks(self, tick_classes, n):
   86:         # GH#23878
   87:         p1 = Period("19910905", freq=tick_classes(n))
   88:         p2 = Period("19920406", freq=tick_classes(n))
   89: 
   90:         expected = Period(str(p2), freq=p2.freq.base) - Period(
   91:             str(p1), freq=p1.freq.base
   92:         )
   93: 
   94:         assert (p2 - p1) == expected
   95: 
   96:     @pytest.mark.parametrize("normalize", [True, False])
   97:     @pytest.mark.parametrize("n", [1, 2, 3, 4])
   98:     @pytest.mark.parametrize(
   99:         "offset, kwd_name",
  100:         [
  101:             (offsets.YearEnd, "month"),
  102:             (offsets.QuarterEnd, "startingMonth"),
  103:             (offsets.MonthEnd, None),
  104:             (offsets.Week, "weekday"),
  105:         ],
  106:     )
  107:     def test_sub_n_gt_1_offsets(self, offset, kwd_name, n, normalize):
  108:         # GH#23878
  109:         kwds = {kwd_name: 3} if kwd_name is not None else {}
  110:         p1_d = "19910905"
  111:         p2_d = "19920406"
  112:         p1 = Period(p1_d, freq=offset(n, normalize, **kwds))
  113:         p2 = Period(p2_d, freq=offset(n, normalize, **kwds))
  114: 
  115:         expected = Period(p2_d, freq=p2.freq.base) - Period(p1_d, freq=p1.freq.base)
  116: 
  117:         assert (p2 - p1) == expected
  118: 
  119:     def test_period_add_offset(self):
  120:         # freq is DateOffset
  121:         for freq in ["Y", "2Y", "3Y"]:
  122:             per = Period("2011", freq=freq)
  123:             exp = Period("2013", freq=freq)
  124:             assert per + offsets.YearEnd(2) == exp
  125:             assert offsets.YearEnd(2) + per == exp
  126: 
  127:             for off in [
  128:                 offsets.YearBegin(2),
  129:                 offsets.MonthBegin(1),
  130:                 offsets.Minute(),
  131:                 np.timedelta64(365, "D"),
  132:                 timedelta(365),
  133:             ]:
  134:                 msg = "Input has different freq|Input cannot be converted to Period"
  135:                 with pytest.raises(IncompatibleFrequency, match=msg):
  136:                     per + off
  137:                 with pytest.raises(IncompatibleFrequency, match=msg):
  138:                     off + per
  139: 
  140:         for freq in ["M", "2M", "3M"]:
  141:             per = Period("2011-03", freq=freq)
  142:             exp = Period("2011-05", freq=freq)
  143:             assert per + offsets.MonthEnd(2) == exp
  144:             assert offsets.MonthEnd(2) + per == exp
  145: 
  146:             exp = Period("2012-03", freq=freq)
  147:             assert per + offsets.MonthEnd(12) == exp
  148:             assert offsets.MonthEnd(12) + per == exp
  149: 
  150:             msg = "|".join(
  151:                 [
  152:                     "Input has different freq",
  153:                     "Input cannot be converted to Period",
  154:                 ]
  155:             )
  156: 
  157:             for off in [
  158:                 offsets.YearBegin(2),
  159:                 offsets.MonthBegin(1),
  160:                 offsets.Minute(),
  161:                 np.timedelta64(365, "D"),
  162:                 timedelta(365),
  163:             ]:
  164:                 with pytest.raises(IncompatibleFrequency, match=msg):
  165:                     per + off
  166:                 with pytest.raises(IncompatibleFrequency, match=msg):
  167:                     off + per
  168: 
  169:         # freq is Tick
  170:         for freq in ["D", "2D", "3D"]:
  171:             per = Period("2011-04-01", freq=freq)
  172: 
  173:             exp = Period("2011-04-06", freq=freq)
  174:             assert per + offsets.Day(5) == exp
  175:             assert offsets.Day(5) + per == exp
  176: 
  177:             exp = Period("2011-04-02", freq=freq)
  178:             assert per + offsets.Hour(24) == exp
  179:             assert offsets.Hour(24) + per == exp
  180: 
  181:             exp = Period("2011-04-03", freq=freq)
  182:             assert per + np.timedelta64(2, "D") == exp
  183:             assert np.timedelta64(2, "D") + per == exp
  184: 
  185:             exp = Period("2011-04-02", freq=freq)
  186:             assert per + np.timedelta64(3600 * 24, "s") == exp
  187:             assert np.timedelta64(3600 * 24, "s") + per == exp
  188: 
  189:             exp = Period("2011-03-30", freq=freq)
  190:             assert per + timedelta(-2) == exp
  191:             assert timedelta(-2) + per == exp
  192: 
  193:             exp = Period("2011-04-03", freq=freq)
  194:             assert per + timedelta(hours=48) == exp
  195:             assert timedelta(hours=48) + per == exp
  196: 
  197:             msg = "|".join(
  198:                 [
  199:                     "Input has different freq",
  200:                     "Input cannot be converted to Period",
  201:                 ]
  202:             )
  203: 
  204:             for off in [
  205:                 offsets.YearBegin(2),
  206:                 offsets.MonthBegin(1),
  207:                 offsets.Minute(),
  208:                 np.timedelta64(4, "h"),
  209:                 timedelta(hours=23),
  210:             ]:
  211:                 with pytest.raises(IncompatibleFrequency, match=msg):
  212:                     per + off
  213:                 with pytest.raises(IncompatibleFrequency, match=msg):
  214:                     off + per
  215: 
  216:         for freq in ["h", "2h", "3h"]:
  217:             per = Period("2011-04-01 09:00", freq=freq)
  218: 
  219:             exp = Period("2011-04-03 09:00", freq=freq)
  220:             assert per + offsets.Day(2) == exp
  221:             assert offsets.Day(2) + per == exp
  222: 
  223:             exp = Period("2011-04-01 12:00", freq=freq)
  224:             assert per + offsets.Hour(3) == exp
  225:             assert offsets.Hour(3) + per == exp
  226: 
  227:             msg = "cannot use operands with types"
  228:             exp = Period("2011-04-01 12:00", freq=freq)
  229:             assert per + np.timedelta64(3, "h") == exp
  230:             assert np.timedelta64(3, "h") + per == exp
  231: 
  232:             exp = Period("2011-04-01 10:00", freq=freq)
  233:             assert per + np.timedelta64(3600, "s") == exp
  234:             assert np.timedelta64(3600, "s") + per == exp
  235: 
  236:             exp = Period("2011-04-01 11:00", freq=freq)
  237:             assert per + timedelta(minutes=120) == exp
  238:             assert timedelta(minutes=120) + per == exp
  239: 
  240:             exp = Period("2011-04-05 12:00", freq=freq)
  241:             assert per + timedelta(days=4, minutes=180) == exp
  242:             assert timedelta(days=4, minutes=180) + per == exp
  243: 
  244:             msg = "|".join(
  245:                 [
  246:                     "Input has different freq",
  247:                     "Input cannot be converted to Period",
  248:                 ]
  249:             )
  250: 
  251:             for off in [
  252:                 offsets.YearBegin(2),
  253:                 offsets.MonthBegin(1),
  254:                 offsets.Minute(),
  255:                 np.timedelta64(3200, "s"),
  256:                 timedelta(hours=23, minutes=30),
  257:             ]:
  258:                 with pytest.raises(IncompatibleFrequency, match=msg):
  259:                     per + off
  260:                 with pytest.raises(IncompatibleFrequency, match=msg):
  261:                     off + per
  262: 
  263:     def test_period_sub_offset(self):
  264:         # freq is DateOffset
  265:         msg = "|".join(
  266:             [
  267:                 "Input has different freq",
  268:                 "Input cannot be converted to Period",
  269:             ]
  270:         )
  271: 
  272:         for freq in ["Y", "2Y", "3Y"]:
  273:             per = Period("2011", freq=freq)
  274:             assert per - offsets.YearEnd(2) == Period("2009", freq=freq)
  275: 
  276:             for off in [
  277:                 offsets.YearBegin(2),
  278:                 offsets.MonthBegin(1),
  279:                 offsets.Minute(),
  280:                 np.timedelta64(365, "D"),
  281:                 timedelta(365),
  282:             ]:
  283:                 with pytest.raises(IncompatibleFrequency, match=msg):
  284:                     per - off
  285: 
  286:         for freq in ["M", "2M", "3M"]:
  287:             per = Period("2011-03", freq=freq)
  288:             assert per - offsets.MonthEnd(2) == Period("2011-01", freq=freq)
  289:             assert per - offsets.MonthEnd(12) == Period("2010-03", freq=freq)
  290: 
  291:             for off in [
  292:                 offsets.YearBegin(2),
  293:                 offsets.MonthBegin(1),
  294:                 offsets.Minute(),
  295:                 np.timedelta64(365, "D"),
  296:                 timedelta(365),
  297:             ]:
  298:                 with pytest.raises(IncompatibleFrequency, match=msg):
  299:                     per - off
  300: 
  301:         # freq is Tick
  302:         for freq in ["D", "2D", "3D"]:
  303:             per = Period("2011-04-01", freq=freq)
  304:             assert per - offsets.Day(5) == Period("2011-03-27", freq=freq)
  305:             assert per - offsets.Hour(24) == Period("2011-03-31", freq=freq)
  306:             assert per - np.timedelta64(2, "D") == Period("2011-03-30", freq=freq)
  307:             assert per - np.timedelta64(3600 * 24, "s") == Period(
  308:                 "2011-03-31", freq=freq
  309:             )
  310:             assert per - timedelta(-2) == Period("2011-04-03", freq=freq)
  311:             assert per - timedelta(hours=48) == Period("2011-03-30", freq=freq)
  312: 
  313:             for off in [
  314:                 offsets.YearBegin(2),
  315:                 offsets.MonthBegin(1),
  316:                 offsets.Minute(),
  317:                 np.timedelta64(4, "h"),
  318:                 timedelta(hours=23),
  319:             ]:
  320:                 with pytest.raises(IncompatibleFrequency, match=msg):
  321:                     per - off
  322: 
  323:         for freq in ["h", "2h", "3h"]:
  324:             per = Period("2011-04-01 09:00", freq=freq)
  325:             assert per - offsets.Day(2) == Period("2011-03-30 09:00", freq=freq)
  326:             assert per - offsets.Hour(3) == Period("2011-04-01 06:00", freq=freq)
  327:             assert per - np.timedelta64(3, "h") == Period("2011-04-01 06:00", freq=freq)
  328:             assert per - np.timedelta64(3600, "s") == Period(
  329:                 "2011-04-01 08:00", freq=freq
  330:             )
  331:             assert per - timedelta(minutes=120) == Period("2011-04-01 07:00", freq=freq)
  332:             assert per - timedelta(days=4, minutes=180) == Period(
  333:                 "2011-03-28 06:00", freq=freq
  334:             )
  335: 
  336:             for off in [
  337:                 offsets.YearBegin(2),
  338:                 offsets.MonthBegin(1),
  339:                 offsets.Minute(),
  340:                 np.timedelta64(3200, "s"),
  341:                 timedelta(hours=23, minutes=30),
  342:             ]:
  343:                 with pytest.raises(IncompatibleFrequency, match=msg):
  344:                     per - off
  345: 
  346:     @pytest.mark.parametrize("freq", ["M", "2M", "3M"])
  347:     def test_period_addsub_nat(self, freq):
  348:         # GH#13071
  349:         per = Period("2011-01", freq=freq)
  350: 
  351:         # For subtraction, NaT is treated as another Period object
  352:         assert NaT - per is NaT
  353:         assert per - NaT is NaT
  354: 
  355:         # For addition, NaT is treated as offset-like
  356:         assert NaT + per is NaT
  357:         assert per + NaT is NaT
  358: 
  359:     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s", "m"])
  360:     def test_period_add_sub_td64_nat(self, unit):
  361:         # GH#47196
  362:         per = Period("2022-06-01", "D")
  363:         nat = np.timedelta64("NaT", unit)
  364: 
  365:         assert per + nat is NaT
  366:         assert nat + per is NaT
  367:         assert per - nat is NaT
  368: 
  369:         with pytest.raises(TypeError, match="unsupported operand"):
  370:             nat - per
  371: 
  372:     def test_period_ops_offset(self):
  373:         per = Period("2011-04-01", freq="D")
  374:         result = per + offsets.Day()
  375:         exp = Period("2011-04-02", freq="D")
  376:         assert result == exp
  377: 
  378:         result = per - offsets.Day(2)
  379:         exp = Period("2011-03-30", freq="D")
  380:         assert result == exp
  381: 
  382:         msg = r"Input cannot be converted to Period\(freq=D\)"
  383:         with pytest.raises(IncompatibleFrequency, match=msg):
  384:             per + offsets.Hour(2)
  385: 
  386:         with pytest.raises(IncompatibleFrequency, match=msg):
  387:             per - offsets.Hour(2)
  388: 
  389:     def test_period_add_timestamp_raises(self):
  390:         # GH#17983
  391:         ts = Timestamp("2017")
  392:         per = Period("2017", freq="M")
  393: 
  394:         msg = r"unsupported operand type\(s\) for \+: 'Timestamp' and 'Period'"
  395:         with pytest.raises(TypeError, match=msg):
  396:             ts + per
  397: 
  398:         msg = r"unsupported operand type\(s\) for \+: 'Period' and 'Timestamp'"
  399:         with pytest.raises(TypeError, match=msg):
  400:             per + ts
  401: 
  402: 
  403: class TestPeriodComparisons:
  404:     def test_period_comparison_same_freq(self):
  405:         jan = Period("2000-01", "M")
  406:         feb = Period("2000-02", "M")
  407: 
  408:         assert not jan == feb
  409:         assert jan != feb
  410:         assert jan < feb
  411:         assert jan <= feb
  412:         assert not jan > feb
  413:         assert not jan >= feb
  414: 
  415:     def test_period_comparison_same_period_different_object(self):
  416:         # Separate Period objects for the same period
  417:         left = Period("2000-01", "M")
  418:         right = Period("2000-01", "M")
  419: 
  420:         assert left == right
  421:         assert left >= right
  422:         assert left <= right
  423:         assert not left < right
  424:         assert not left > right
  425: 
  426:     def test_period_comparison_mismatched_freq(self):
  427:         jan = Period("2000-01", "M")
  428:         day = Period("2012-01-01", "D")
  429: 
  430:         assert not jan == day
  431:         assert jan != day
  432:         msg = r"Input has different freq=D from Period\(freq=M\)"
  433:         with pytest.raises(IncompatibleFrequency, match=msg):
  434:             jan < day
  435:         with pytest.raises(IncompatibleFrequency, match=msg):
  436:             jan <= day
  437:         with pytest.raises(IncompatibleFrequency, match=msg):
  438:             jan > day
  439:         with pytest.raises(IncompatibleFrequency, match=msg):
  440:             jan >= day
  441: 
  442:     def test_period_comparison_invalid_type(self):
  443:         jan = Period("2000-01", "M")
  444: 
  445:         assert not jan == 1
  446:         assert jan != 1
  447: 
  448:         int_or_per = "'(Period|int)'"
  449:         msg = f"not supported between instances of {int_or_per} and {int_or_per}"
  450:         for left, right in [(jan, 1), (1, jan)]:
  451:             with pytest.raises(TypeError, match=msg):
  452:                 left > right
  453:             with pytest.raises(TypeError, match=msg):
  454:                 left >= right
  455:             with pytest.raises(TypeError, match=msg):
  456:                 left < right
  457:             with pytest.raises(TypeError, match=msg):
  458:                 left <= right
  459: 
  460:     def test_period_comparison_nat(self):
  461:         per = Period("2011-01-01", freq="D")
  462: 
  463:         ts = Timestamp("2011-01-01")
  464:         # confirm Period('NaT') work identical with Timestamp('NaT')
  465:         for left, right in [
  466:             (NaT, per),
  467:             (per, NaT),
  468:             (NaT, ts),
  469:             (ts, NaT),
  470:         ]:
  471:             assert not left < right
  472:             assert not left > right
  473:             assert not left == right
  474:             assert left != right
  475:             assert not left <= right
  476:             assert not left >= right
  477: 
  478:     @pytest.mark.parametrize(
  479:         "zerodim_arr, expected",
  480:         ((np.array(0), False), (np.array(Period("2000-01", "M")), True)),
  481:     )
  482:     def test_period_comparison_numpy_zerodim_arr(self, zerodim_arr, expected):
  483:         per = Period("2000-01", "M")
  484: 
  485:         assert (per == zerodim_arr) is expected
  486:         assert (zerodim_arr == per) is expected
