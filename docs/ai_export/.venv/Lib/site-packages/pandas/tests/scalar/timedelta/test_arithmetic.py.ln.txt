    1: """
    2: Tests for scalar Timedelta arithmetic ops
    3: """
    4: from datetime import (
    5:     datetime,
    6:     timedelta,
    7: )
    8: import operator
    9: 
   10: import numpy as np
   11: import pytest
   12: 
   13: from pandas.errors import OutOfBoundsTimedelta
   14: 
   15: import pandas as pd
   16: from pandas import (
   17:     NaT,
   18:     Timedelta,
   19:     Timestamp,
   20:     offsets,
   21: )
   22: import pandas._testing as tm
   23: from pandas.core import ops
   24: 
   25: 
   26: class TestTimedeltaAdditionSubtraction:
   27:     """
   28:     Tests for Timedelta methods:
   29: 
   30:         __add__, __radd__,
   31:         __sub__, __rsub__
   32:     """
   33: 
   34:     @pytest.mark.parametrize(
   35:         "ten_seconds",
   36:         [
   37:             Timedelta(10, unit="s"),
   38:             timedelta(seconds=10),
   39:             np.timedelta64(10, "s"),
   40:             np.timedelta64(10000000000, "ns"),
   41:             offsets.Second(10),
   42:         ],
   43:     )
   44:     def test_td_add_sub_ten_seconds(self, ten_seconds):
   45:         # GH#6808
   46:         base = Timestamp("20130101 09:01:12.123456")
   47:         expected_add = Timestamp("20130101 09:01:22.123456")
   48:         expected_sub = Timestamp("20130101 09:01:02.123456")
   49: 
   50:         result = base + ten_seconds
   51:         assert result == expected_add
   52: 
   53:         result = base - ten_seconds
   54:         assert result == expected_sub
   55: 
   56:     @pytest.mark.parametrize(
   57:         "one_day_ten_secs",
   58:         [
   59:             Timedelta("1 day, 00:00:10"),
   60:             Timedelta("1 days, 00:00:10"),
   61:             timedelta(days=1, seconds=10),
   62:             np.timedelta64(1, "D") + np.timedelta64(10, "s"),
   63:             offsets.Day() + offsets.Second(10),
   64:         ],
   65:     )
   66:     def test_td_add_sub_one_day_ten_seconds(self, one_day_ten_secs):
   67:         # GH#6808
   68:         base = Timestamp("20130102 09:01:12.123456")
   69:         expected_add = Timestamp("20130103 09:01:22.123456")
   70:         expected_sub = Timestamp("20130101 09:01:02.123456")
   71: 
   72:         result = base + one_day_ten_secs
   73:         assert result == expected_add
   74: 
   75:         result = base - one_day_ten_secs
   76:         assert result == expected_sub
   77: 
   78:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
   79:     def test_td_add_datetimelike_scalar(self, op):
   80:         # GH#19738
   81:         td = Timedelta(10, unit="d")
   82: 
   83:         result = op(td, datetime(2016, 1, 1))
   84:         if op is operator.add:
   85:             # datetime + Timedelta does _not_ call Timedelta.__radd__,
   86:             # so we get a datetime back instead of a Timestamp
   87:             assert isinstance(result, Timestamp)
   88:         assert result == Timestamp(2016, 1, 11)
   89: 
   90:         result = op(td, Timestamp("2018-01-12 18:09"))
   91:         assert isinstance(result, Timestamp)
   92:         assert result == Timestamp("2018-01-22 18:09")
   93: 
   94:         result = op(td, np.datetime64("2018-01-12"))
   95:         assert isinstance(result, Timestamp)
   96:         assert result == Timestamp("2018-01-22")
   97: 
   98:         result = op(td, NaT)
   99:         assert result is NaT
  100: 
  101:     def test_td_add_timestamp_overflow(self):
  102:         ts = Timestamp("1700-01-01").as_unit("ns")
  103:         msg = "Cannot cast 259987 from D to 'ns' without overflow."
  104:         with pytest.raises(OutOfBoundsTimedelta, match=msg):
  105:             ts + Timedelta(13 * 19999, unit="D")
  106: 
  107:         msg = "Cannot cast 259987 days 00:00:00 to unit='ns' without overflow"
  108:         with pytest.raises(OutOfBoundsTimedelta, match=msg):
  109:             ts + timedelta(days=13 * 19999)
  110: 
  111:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  112:     def test_td_add_td(self, op):
  113:         td = Timedelta(10, unit="d")
  114: 
  115:         result = op(td, Timedelta(days=10))
  116:         assert isinstance(result, Timedelta)
  117:         assert result == Timedelta(days=20)
  118: 
  119:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  120:     def test_td_add_pytimedelta(self, op):
  121:         td = Timedelta(10, unit="d")
  122:         result = op(td, timedelta(days=9))
  123:         assert isinstance(result, Timedelta)
  124:         assert result == Timedelta(days=19)
  125: 
  126:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  127:     def test_td_add_timedelta64(self, op):
  128:         td = Timedelta(10, unit="d")
  129:         result = op(td, np.timedelta64(-4, "D"))
  130:         assert isinstance(result, Timedelta)
  131:         assert result == Timedelta(days=6)
  132: 
  133:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  134:     def test_td_add_offset(self, op):
  135:         td = Timedelta(10, unit="d")
  136: 
  137:         result = op(td, offsets.Hour(6))
  138:         assert isinstance(result, Timedelta)
  139:         assert result == Timedelta(days=10, hours=6)
  140: 
  141:     def test_td_sub_td(self):
  142:         td = Timedelta(10, unit="d")
  143:         expected = Timedelta(0, unit="ns")
  144:         result = td - td
  145:         assert isinstance(result, Timedelta)
  146:         assert result == expected
  147: 
  148:     def test_td_sub_pytimedelta(self):
  149:         td = Timedelta(10, unit="d")
  150:         expected = Timedelta(0, unit="ns")
  151: 
  152:         result = td - td.to_pytimedelta()
  153:         assert isinstance(result, Timedelta)
  154:         assert result == expected
  155: 
  156:         result = td.to_pytimedelta() - td
  157:         assert isinstance(result, Timedelta)
  158:         assert result == expected
  159: 
  160:     def test_td_sub_timedelta64(self):
  161:         td = Timedelta(10, unit="d")
  162:         expected = Timedelta(0, unit="ns")
  163: 
  164:         result = td - td.to_timedelta64()
  165:         assert isinstance(result, Timedelta)
  166:         assert result == expected
  167: 
  168:         result = td.to_timedelta64() - td
  169:         assert isinstance(result, Timedelta)
  170:         assert result == expected
  171: 
  172:     def test_td_sub_nat(self):
  173:         # In this context pd.NaT is treated as timedelta-like
  174:         td = Timedelta(10, unit="d")
  175:         result = td - NaT
  176:         assert result is NaT
  177: 
  178:     def test_td_sub_td64_nat(self):
  179:         td = Timedelta(10, unit="d")
  180:         td_nat = np.timedelta64("NaT")
  181: 
  182:         result = td - td_nat
  183:         assert result is NaT
  184: 
  185:         result = td_nat - td
  186:         assert result is NaT
  187: 
  188:     def test_td_sub_offset(self):
  189:         td = Timedelta(10, unit="d")
  190:         result = td - offsets.Hour(1)
  191:         assert isinstance(result, Timedelta)
  192:         assert result == Timedelta(239, unit="h")
  193: 
  194:     def test_td_add_sub_numeric_raises(self):
  195:         td = Timedelta(10, unit="d")
  196:         msg = "unsupported operand type"
  197:         for other in [2, 2.0, np.int64(2), np.float64(2)]:
  198:             with pytest.raises(TypeError, match=msg):
  199:                 td + other
  200:             with pytest.raises(TypeError, match=msg):
  201:                 other + td
  202:             with pytest.raises(TypeError, match=msg):
  203:                 td - other
  204:             with pytest.raises(TypeError, match=msg):
  205:                 other - td
  206: 
  207:     def test_td_add_sub_int_ndarray(self):
  208:         td = Timedelta("1 day")
  209:         other = np.array([1])
  210: 
  211:         msg = r"unsupported operand type\(s\) for \+: 'Timedelta' and 'int'"
  212:         with pytest.raises(TypeError, match=msg):
  213:             td + np.array([1])
  214: 
  215:         msg = "|".join(
  216:             [
  217:                 (
  218:                     r"unsupported operand type\(s\) for \+: 'numpy.ndarray' "
  219:                     "and 'Timedelta'"
  220:                 ),
  221:                 # This message goes on to say "Please do not rely on this error;
  222:                 #  it may not be given on all Python implementations"
  223:                 "Concatenation operation is not implemented for NumPy arrays",
  224:             ]
  225:         )
  226:         with pytest.raises(TypeError, match=msg):
  227:             other + td
  228:         msg = r"unsupported operand type\(s\) for -: 'Timedelta' and 'int'"
  229:         with pytest.raises(TypeError, match=msg):
  230:             td - other
  231:         msg = r"unsupported operand type\(s\) for -: 'numpy.ndarray' and 'Timedelta'"
  232:         with pytest.raises(TypeError, match=msg):
  233:             other - td
  234: 
  235:     def test_td_rsub_nat(self):
  236:         td = Timedelta(10, unit="d")
  237:         result = NaT - td
  238:         assert result is NaT
  239: 
  240:         result = np.datetime64("NaT") - td
  241:         assert result is NaT
  242: 
  243:     def test_td_rsub_offset(self):
  244:         result = offsets.Hour(1) - Timedelta(10, unit="d")
  245:         assert isinstance(result, Timedelta)
  246:         assert result == Timedelta(-239, unit="h")
  247: 
  248:     def test_td_sub_timedeltalike_object_dtype_array(self):
  249:         # GH#21980
  250:         arr = np.array([Timestamp("20130101 9:01"), Timestamp("20121230 9:02")])
  251:         exp = np.array([Timestamp("20121231 9:01"), Timestamp("20121229 9:02")])
  252:         res = arr - Timedelta("1D")
  253:         tm.assert_numpy_array_equal(res, exp)
  254: 
  255:     def test_td_sub_mixed_most_timedeltalike_object_dtype_array(self):
  256:         # GH#21980
  257:         now = Timestamp("2021-11-09 09:54:00")
  258:         arr = np.array([now, Timedelta("1D"), np.timedelta64(2, "h")])
  259:         exp = np.array(
  260:             [
  261:                 now - Timedelta("1D"),
  262:                 Timedelta("0D"),
  263:                 np.timedelta64(2, "h") - Timedelta("1D"),
  264:             ]
  265:         )
  266:         res = arr - Timedelta("1D")
  267:         tm.assert_numpy_array_equal(res, exp)
  268: 
  269:     def test_td_rsub_mixed_most_timedeltalike_object_dtype_array(self):
  270:         # GH#21980
  271:         now = Timestamp("2021-11-09 09:54:00")
  272:         arr = np.array([now, Timedelta("1D"), np.timedelta64(2, "h")])
  273:         msg = r"unsupported operand type\(s\) for \-: 'Timedelta' and 'Timestamp'"
  274:         with pytest.raises(TypeError, match=msg):
  275:             Timedelta("1D") - arr
  276: 
  277:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  278:     def test_td_add_timedeltalike_object_dtype_array(self, op):
  279:         # GH#21980
  280:         arr = np.array([Timestamp("20130101 9:01"), Timestamp("20121230 9:02")])
  281:         exp = np.array([Timestamp("20130102 9:01"), Timestamp("20121231 9:02")])
  282:         res = op(arr, Timedelta("1D"))
  283:         tm.assert_numpy_array_equal(res, exp)
  284: 
  285:     @pytest.mark.parametrize("op", [operator.add, ops.radd])
  286:     def test_td_add_mixed_timedeltalike_object_dtype_array(self, op):
  287:         # GH#21980
  288:         now = Timestamp("2021-11-09 09:54:00")
  289:         arr = np.array([now, Timedelta("1D")])
  290:         exp = np.array([now + Timedelta("1D"), Timedelta("2D")])
  291:         res = op(arr, Timedelta("1D"))
  292:         tm.assert_numpy_array_equal(res, exp)
  293: 
  294:     def test_td_add_sub_td64_ndarray(self):
  295:         td = Timedelta("1 day")
  296: 
  297:         other = np.array([td.to_timedelta64()])
  298:         expected = np.array([Timedelta("2 Days").to_timedelta64()])
  299: 
  300:         result = td + other
  301:         tm.assert_numpy_array_equal(result, expected)
  302:         result = other + td
  303:         tm.assert_numpy_array_equal(result, expected)
  304: 
  305:         result = td - other
  306:         tm.assert_numpy_array_equal(result, expected * 0)
  307:         result = other - td
  308:         tm.assert_numpy_array_equal(result, expected * 0)
  309: 
  310:     def test_td_add_sub_dt64_ndarray(self):
  311:         td = Timedelta("1 day")
  312:         other = np.array(["2000-01-01"], dtype="M8[ns]")
  313: 
  314:         expected = np.array(["2000-01-02"], dtype="M8[ns]")
  315:         tm.assert_numpy_array_equal(td + other, expected)
  316:         tm.assert_numpy_array_equal(other + td, expected)
  317: 
  318:         expected = np.array(["1999-12-31"], dtype="M8[ns]")
  319:         tm.assert_numpy_array_equal(-td + other, expected)
  320:         tm.assert_numpy_array_equal(other - td, expected)
  321: 
  322:     def test_td_add_sub_ndarray_0d(self):
  323:         td = Timedelta("1 day")
  324:         other = np.array(td.asm8)
  325: 
  326:         result = td + other
  327:         assert isinstance(result, Timedelta)
  328:         assert result == 2 * td
  329: 
  330:         result = other + td
  331:         assert isinstance(result, Timedelta)
  332:         assert result == 2 * td
  333: 
  334:         result = other - td
  335:         assert isinstance(result, Timedelta)
  336:         assert result == 0 * td
  337: 
  338:         result = td - other
  339:         assert isinstance(result, Timedelta)
  340:         assert result == 0 * td
  341: 
  342: 
  343: class TestTimedeltaMultiplicationDivision:
  344:     """
  345:     Tests for Timedelta methods:
  346: 
  347:         __mul__, __rmul__,
  348:         __div__, __rdiv__,
  349:         __truediv__, __rtruediv__,
  350:         __floordiv__, __rfloordiv__,
  351:         __mod__, __rmod__,
  352:         __divmod__, __rdivmod__
  353:     """
  354: 
  355:     # ---------------------------------------------------------------
  356:     # Timedelta.__mul__, __rmul__
  357: 
  358:     @pytest.mark.parametrize(
  359:         "td_nat", [NaT, np.timedelta64("NaT", "ns"), np.timedelta64("NaT")]
  360:     )
  361:     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
  362:     def test_td_mul_nat(self, op, td_nat):
  363:         # GH#19819
  364:         td = Timedelta(10, unit="d")
  365:         typs = "|".join(["numpy.timedelta64", "NaTType", "Timedelta"])
  366:         msg = "|".join(
  367:             [
  368:                 rf"unsupported operand type\(s\) for \*: '{typs}' and '{typs}'",
  369:                 r"ufunc '?multiply'? cannot use operands with types",
  370:             ]
  371:         )
  372:         with pytest.raises(TypeError, match=msg):
  373:             op(td, td_nat)
  374: 
  375:     @pytest.mark.parametrize("nan", [np.nan, np.float64("NaN"), float("nan")])
  376:     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
  377:     def test_td_mul_nan(self, op, nan):
  378:         # np.float64('NaN') has a 'dtype' attr, avoid treating as array
  379:         td = Timedelta(10, unit="d")
  380:         result = op(td, nan)
  381:         assert result is NaT
  382: 
  383:     @pytest.mark.parametrize("op", [operator.mul, ops.rmul])
  384:     def test_td_mul_scalar(self, op):
  385:         # GH#19738
  386:         td = Timedelta(minutes=3)
  387: 
  388:         result = op(td, 2)
  389:         assert result == Timedelta(minutes=6)
  390: 
  391:         result = op(td, 1.5)
  392:         assert result == Timedelta(minutes=4, seconds=30)
  393: 
  394:         assert op(td, np.nan) is NaT
  395: 
  396:         assert op(-1, td)._value == -1 * td._value
  397:         assert op(-1.0, td)._value == -1.0 * td._value
  398: 
  399:         msg = "unsupported operand type"
  400:         with pytest.raises(TypeError, match=msg):
  401:             # timedelta * datetime is gibberish
  402:             op(td, Timestamp(2016, 1, 2))
  403: 
  404:         with pytest.raises(TypeError, match=msg):
  405:             # invalid multiply with another timedelta
  406:             op(td, td)
  407: 
  408:     def test_td_mul_numeric_ndarray(self):
  409:         td = Timedelta("1 day")
  410:         other = np.array([2])
  411:         expected = np.array([Timedelta("2 Days").to_timedelta64()])
  412: 
  413:         result = td * other
  414:         tm.assert_numpy_array_equal(result, expected)
  415: 
  416:         result = other * td
  417:         tm.assert_numpy_array_equal(result, expected)
  418: 
  419:     def test_td_mul_numeric_ndarray_0d(self):
  420:         td = Timedelta("1 day")
  421:         other = np.array(2)
  422:         assert other.ndim == 0
  423:         expected = Timedelta("2 days")
  424: 
  425:         res = td * other
  426:         assert type(res) is Timedelta
  427:         assert res == expected
  428: 
  429:         res = other * td
  430:         assert type(res) is Timedelta
  431:         assert res == expected
  432: 
  433:     def test_td_mul_td64_ndarray_invalid(self):
  434:         td = Timedelta("1 day")
  435:         other = np.array([Timedelta("2 Days").to_timedelta64()])
  436: 
  437:         msg = (
  438:             "ufunc '?multiply'? cannot use operands with types "
  439:             rf"dtype\('{tm.ENDIAN}m8\[ns\]'\) and dtype\('{tm.ENDIAN}m8\[ns\]'\)"
  440:         )
  441:         with pytest.raises(TypeError, match=msg):
  442:             td * other
  443:         with pytest.raises(TypeError, match=msg):
  444:             other * td
  445: 
  446:     # ---------------------------------------------------------------
  447:     # Timedelta.__div__, __truediv__
  448: 
  449:     def test_td_div_timedeltalike_scalar(self):
  450:         # GH#19738
  451:         td = Timedelta(10, unit="d")
  452: 
  453:         result = td / offsets.Hour(1)
  454:         assert result == 240
  455: 
  456:         assert td / td == 1
  457:         assert td / np.timedelta64(60, "h") == 4
  458: 
  459:         assert np.isnan(td / NaT)
  460: 
  461:     def test_td_div_td64_non_nano(self):
  462:         # truediv
  463:         td = Timedelta("1 days 2 hours 3 ns")
  464:         result = td / np.timedelta64(1, "D")
  465:         assert result == td._value / (86400 * 10**9)
  466:         result = td / np.timedelta64(1, "s")
  467:         assert result == td._value / 10**9
  468:         result = td / np.timedelta64(1, "ns")
  469:         assert result == td._value
  470: 
  471:         # floordiv
  472:         td = Timedelta("1 days 2 hours 3 ns")
  473:         result = td // np.timedelta64(1, "D")
  474:         assert result == 1
  475:         result = td // np.timedelta64(1, "s")
  476:         assert result == 93600
  477:         result = td // np.timedelta64(1, "ns")
  478:         assert result == td._value
  479: 
  480:     def test_td_div_numeric_scalar(self):
  481:         # GH#19738
  482:         td = Timedelta(10, unit="d")
  483: 
  484:         result = td / 2
  485:         assert isinstance(result, Timedelta)
  486:         assert result == Timedelta(days=5)
  487: 
  488:         result = td / 5
  489:         assert isinstance(result, Timedelta)
  490:         assert result == Timedelta(days=2)
  491: 
  492:     @pytest.mark.parametrize(
  493:         "nan",
  494:         [
  495:             np.nan,
  496:             np.float64("NaN"),
  497:             float("nan"),
  498:         ],
  499:     )
  500:     def test_td_div_nan(self, nan):
  501:         # np.float64('NaN') has a 'dtype' attr, avoid treating as array
  502:         td = Timedelta(10, unit="d")
  503:         result = td / nan
  504:         assert result is NaT
  505: 
  506:         result = td // nan
  507:         assert result is NaT
  508: 
  509:     def test_td_div_td64_ndarray(self):
  510:         td = Timedelta("1 day")
  511: 
  512:         other = np.array([Timedelta("2 Days").to_timedelta64()])
  513:         expected = np.array([0.5])
  514: 
  515:         result = td / other
  516:         tm.assert_numpy_array_equal(result, expected)
  517: 
  518:         result = other / td
  519:         tm.assert_numpy_array_equal(result, expected * 4)
  520: 
  521:     def test_td_div_ndarray_0d(self):
  522:         td = Timedelta("1 day")
  523: 
  524:         other = np.array(1)
  525:         res = td / other
  526:         assert isinstance(res, Timedelta)
  527:         assert res == td
  528: 
  529:     # ---------------------------------------------------------------
  530:     # Timedelta.__rdiv__
  531: 
  532:     def test_td_rdiv_timedeltalike_scalar(self):
  533:         # GH#19738
  534:         td = Timedelta(10, unit="d")
  535:         result = offsets.Hour(1) / td
  536:         assert result == 1 / 240.0
  537: 
  538:         assert np.timedelta64(60, "h") / td == 0.25
  539: 
  540:     def test_td_rdiv_na_scalar(self):
  541:         # GH#31869 None gets cast to NaT
  542:         td = Timedelta(10, unit="d")
  543: 
  544:         result = NaT / td
  545:         assert np.isnan(result)
  546: 
  547:         result = None / td
  548:         assert np.isnan(result)
  549: 
  550:         result = np.timedelta64("NaT") / td
  551:         assert np.isnan(result)
  552: 
  553:         msg = r"unsupported operand type\(s\) for /: 'numpy.datetime64' and 'Timedelta'"
  554:         with pytest.raises(TypeError, match=msg):
  555:             np.datetime64("NaT") / td
  556: 
  557:         msg = r"unsupported operand type\(s\) for /: 'float' and 'Timedelta'"
  558:         with pytest.raises(TypeError, match=msg):
  559:             np.nan / td
  560: 
  561:     def test_td_rdiv_ndarray(self):
  562:         td = Timedelta(10, unit="d")
  563: 
  564:         arr = np.array([td], dtype=object)
  565:         result = arr / td
  566:         expected = np.array([1], dtype=np.float64)
  567:         tm.assert_numpy_array_equal(result, expected)
  568: 
  569:         arr = np.array([None])
  570:         result = arr / td
  571:         expected = np.array([np.nan])
  572:         tm.assert_numpy_array_equal(result, expected)
  573: 
  574:         arr = np.array([np.nan], dtype=object)
  575:         msg = r"unsupported operand type\(s\) for /: 'float' and 'Timedelta'"
  576:         with pytest.raises(TypeError, match=msg):
  577:             arr / td
  578: 
  579:         arr = np.array([np.nan], dtype=np.float64)
  580:         msg = "cannot use operands with types dtype"
  581:         with pytest.raises(TypeError, match=msg):
  582:             arr / td
  583: 
  584:     def test_td_rdiv_ndarray_0d(self):
  585:         td = Timedelta(10, unit="d")
  586: 
  587:         arr = np.array(td.asm8)
  588: 
  589:         assert arr / td == 1
  590: 
  591:     # ---------------------------------------------------------------
  592:     # Timedelta.__floordiv__
  593: 
  594:     def test_td_floordiv_timedeltalike_scalar(self):
  595:         # GH#18846
  596:         td = Timedelta(hours=3, minutes=4)
  597:         scalar = Timedelta(hours=3, minutes=3)
  598: 
  599:         assert td // scalar == 1
  600:         assert -td // scalar.to_pytimedelta() == -2
  601:         assert (2 * td) // scalar.to_timedelta64() == 2
  602: 
  603:     def test_td_floordiv_null_scalar(self):
  604:         # GH#18846
  605:         td = Timedelta(hours=3, minutes=4)
  606: 
  607:         assert td // np.nan is NaT
  608:         assert np.isnan(td // NaT)
  609:         assert np.isnan(td // np.timedelta64("NaT"))
  610: 
  611:     def test_td_floordiv_offsets(self):
  612:         # GH#19738
  613:         td = Timedelta(hours=3, minutes=4)
  614:         assert td // offsets.Hour(1) == 3
  615:         assert td // offsets.Minute(2) == 92
  616: 
  617:     def test_td_floordiv_invalid_scalar(self):
  618:         # GH#18846
  619:         td = Timedelta(hours=3, minutes=4)
  620: 
  621:         msg = "|".join(
  622:             [
  623:                 r"Invalid dtype datetime64\[D\] for __floordiv__",
  624:                 "'dtype' is an invalid keyword argument for this function",
  625:                 r"ufunc '?floor_divide'? cannot use operands with types",
  626:             ]
  627:         )
  628:         with pytest.raises(TypeError, match=msg):
  629:             td // np.datetime64("2016-01-01", dtype="datetime64[us]")
  630: 
  631:     def test_td_floordiv_numeric_scalar(self):
  632:         # GH#18846
  633:         td = Timedelta(hours=3, minutes=4)
  634: 
  635:         expected = Timedelta(hours=1, minutes=32)
  636:         assert td // 2 == expected
  637:         assert td // 2.0 == expected
  638:         assert td // np.float64(2.0) == expected
  639:         assert td // np.int32(2.0) == expected
  640:         assert td // np.uint8(2.0) == expected
  641: 
  642:     def test_td_floordiv_timedeltalike_array(self):
  643:         # GH#18846
  644:         td = Timedelta(hours=3, minutes=4)
  645:         scalar = Timedelta(hours=3, minutes=3)
  646: 
  647:         # Array-like others
  648:         assert td // np.array(scalar.to_timedelta64()) == 1
  649: 
  650:         res = (3 * td) // np.array([scalar.to_timedelta64()])
  651:         expected = np.array([3], dtype=np.int64)
  652:         tm.assert_numpy_array_equal(res, expected)
  653: 
  654:         res = (10 * td) // np.array([scalar.to_timedelta64(), np.timedelta64("NaT")])
  655:         expected = np.array([10, np.nan])
  656:         tm.assert_numpy_array_equal(res, expected)
  657: 
  658:     def test_td_floordiv_numeric_series(self):
  659:         # GH#18846
  660:         td = Timedelta(hours=3, minutes=4)
  661:         ser = pd.Series([1], dtype=np.int64)
  662:         res = td // ser
  663:         assert res.dtype.kind == "m"
  664: 
  665:     # ---------------------------------------------------------------
  666:     # Timedelta.__rfloordiv__
  667: 
  668:     def test_td_rfloordiv_timedeltalike_scalar(self):
  669:         # GH#18846
  670:         td = Timedelta(hours=3, minutes=3)
  671:         scalar = Timedelta(hours=3, minutes=4)
  672: 
  673:         # scalar others
  674:         # x // Timedelta is defined only for timedelta-like x. int-like,
  675:         # float-like, and date-like, in particular, should all either
  676:         # a) raise TypeError directly or
  677:         # b) return NotImplemented, following which the reversed
  678:         #    operation will raise TypeError.
  679:         assert td.__rfloordiv__(scalar) == 1
  680:         assert (-td).__rfloordiv__(scalar.to_pytimedelta()) == -2
  681:         assert (2 * td).__rfloordiv__(scalar.to_timedelta64()) == 0
  682: 
  683:     def test_td_rfloordiv_null_scalar(self):
  684:         # GH#18846
  685:         td = Timedelta(hours=3, minutes=3)
  686: 
  687:         assert np.isnan(td.__rfloordiv__(NaT))
  688:         assert np.isnan(td.__rfloordiv__(np.timedelta64("NaT")))
  689: 
  690:     def test_td_rfloordiv_offsets(self):
  691:         # GH#19738
  692:         assert offsets.Hour(1) // Timedelta(minutes=25) == 2
  693: 
  694:     def test_td_rfloordiv_invalid_scalar(self):
  695:         # GH#18846
  696:         td = Timedelta(hours=3, minutes=3)
  697: 
  698:         dt64 = np.datetime64("2016-01-01", "us")
  699: 
  700:         assert td.__rfloordiv__(dt64) is NotImplemented
  701: 
  702:         msg = (
  703:             r"unsupported operand type\(s\) for //: 'numpy.datetime64' and 'Timedelta'"
  704:         )
  705:         with pytest.raises(TypeError, match=msg):
  706:             dt64 // td
  707: 
  708:     def test_td_rfloordiv_numeric_scalar(self):
  709:         # GH#18846
  710:         td = Timedelta(hours=3, minutes=3)
  711: 
  712:         assert td.__rfloordiv__(np.nan) is NotImplemented
  713:         assert td.__rfloordiv__(3.5) is NotImplemented
  714:         assert td.__rfloordiv__(2) is NotImplemented
  715:         assert td.__rfloordiv__(np.float64(2.0)) is NotImplemented
  716:         assert td.__rfloordiv__(np.uint8(9)) is NotImplemented
  717:         assert td.__rfloordiv__(np.int32(2.0)) is NotImplemented
  718: 
  719:         msg = r"unsupported operand type\(s\) for //: '.*' and 'Timedelta"
  720:         with pytest.raises(TypeError, match=msg):
  721:             np.float64(2.0) // td
  722:         with pytest.raises(TypeError, match=msg):
  723:             np.uint8(9) // td
  724:         with pytest.raises(TypeError, match=msg):
  725:             # deprecated GH#19761, enforced GH#29797
  726:             np.int32(2.0) // td
  727: 
  728:     def test_td_rfloordiv_timedeltalike_array(self):
  729:         # GH#18846
  730:         td = Timedelta(hours=3, minutes=3)
  731:         scalar = Timedelta(hours=3, minutes=4)
  732: 
  733:         # Array-like others
  734:         assert td.__rfloordiv__(np.array(scalar.to_timedelta64())) == 1
  735: 
  736:         res = td.__rfloordiv__(np.array([(3 * scalar).to_timedelta64()]))
  737:         expected = np.array([3], dtype=np.int64)
  738:         tm.assert_numpy_array_equal(res, expected)
  739: 
  740:         arr = np.array([(10 * scalar).to_timedelta64(), np.timedelta64("NaT")])
  741:         res = td.__rfloordiv__(arr)
  742:         expected = np.array([10, np.nan])
  743:         tm.assert_numpy_array_equal(res, expected)
  744: 
  745:     def test_td_rfloordiv_intarray(self):
  746:         # deprecated GH#19761, enforced GH#29797
  747:         ints = np.array([1349654400, 1349740800, 1349827200, 1349913600]) * 10**9
  748: 
  749:         msg = "Invalid dtype"
  750:         with pytest.raises(TypeError, match=msg):
  751:             ints // Timedelta(1, unit="s")
  752: 
  753:     def test_td_rfloordiv_numeric_series(self):
  754:         # GH#18846
  755:         td = Timedelta(hours=3, minutes=3)
  756:         ser = pd.Series([1], dtype=np.int64)
  757:         res = td.__rfloordiv__(ser)
  758:         assert res is NotImplemented
  759: 
  760:         msg = "Invalid dtype"
  761:         with pytest.raises(TypeError, match=msg):
  762:             # Deprecated GH#19761, enforced GH#29797
  763:             ser // td
  764: 
  765:     # ----------------------------------------------------------------
  766:     # Timedelta.__mod__, __rmod__
  767: 
  768:     def test_mod_timedeltalike(self):
  769:         # GH#19365
  770:         td = Timedelta(hours=37)
  771: 
  772:         # Timedelta-like others
  773:         result = td % Timedelta(hours=6)
  774:         assert isinstance(result, Timedelta)
  775:         assert result == Timedelta(hours=1)
  776: 
  777:         result = td % timedelta(minutes=60)
  778:         assert isinstance(result, Timedelta)
  779:         assert result == Timedelta(0)
  780: 
  781:         result = td % NaT
  782:         assert result is NaT
  783: 
  784:     def test_mod_timedelta64_nat(self):
  785:         # GH#19365
  786:         td = Timedelta(hours=37)
  787: 
  788:         result = td % np.timedelta64("NaT", "ns")
  789:         assert result is NaT
  790: 
  791:     def test_mod_timedelta64(self):
  792:         # GH#19365
  793:         td = Timedelta(hours=37)
  794: 
  795:         result = td % np.timedelta64(2, "h")
  796:         assert isinstance(result, Timedelta)
  797:         assert result == Timedelta(hours=1)
  798: 
  799:     def test_mod_offset(self):
  800:         # GH#19365
  801:         td = Timedelta(hours=37)
  802: 
  803:         result = td % offsets.Hour(5)
  804:         assert isinstance(result, Timedelta)
  805:         assert result == Timedelta(hours=2)
  806: 
  807:     def test_mod_numeric(self):
  808:         # GH#19365
  809:         td = Timedelta(hours=37)
  810: 
  811:         # Numeric Others
  812:         result = td % 2
  813:         assert isinstance(result, Timedelta)
  814:         assert result == Timedelta(0)
  815: 
  816:         result = td % 1e12
  817:         assert isinstance(result, Timedelta)
  818:         assert result == Timedelta(minutes=3, seconds=20)
  819: 
  820:         result = td % int(1e12)
  821:         assert isinstance(result, Timedelta)
  822:         assert result == Timedelta(minutes=3, seconds=20)
  823: 
  824:     def test_mod_invalid(self):
  825:         # GH#19365
  826:         td = Timedelta(hours=37)
  827:         msg = "unsupported operand type"
  828:         with pytest.raises(TypeError, match=msg):
  829:             td % Timestamp("2018-01-22")
  830: 
  831:         with pytest.raises(TypeError, match=msg):
  832:             td % []
  833: 
  834:     def test_rmod_pytimedelta(self):
  835:         # GH#19365
  836:         td = Timedelta(minutes=3)
  837: 
  838:         result = timedelta(minutes=4) % td
  839:         assert isinstance(result, Timedelta)
  840:         assert result == Timedelta(minutes=1)
  841: 
  842:     def test_rmod_timedelta64(self):
  843:         # GH#19365
  844:         td = Timedelta(minutes=3)
  845:         result = np.timedelta64(5, "m") % td
  846:         assert isinstance(result, Timedelta)
  847:         assert result == Timedelta(minutes=2)
  848: 
  849:     def test_rmod_invalid(self):
  850:         # GH#19365
  851:         td = Timedelta(minutes=3)
  852: 
  853:         msg = "unsupported operand"
  854:         with pytest.raises(TypeError, match=msg):
  855:             Timestamp("2018-01-22") % td
  856: 
  857:         with pytest.raises(TypeError, match=msg):
  858:             15 % td
  859: 
  860:         with pytest.raises(TypeError, match=msg):
  861:             16.0 % td
  862: 
  863:         msg = "Invalid dtype int"
  864:         with pytest.raises(TypeError, match=msg):
  865:             np.array([22, 24]) % td
  866: 
  867:     # ----------------------------------------------------------------
  868:     # Timedelta.__divmod__, __rdivmod__
  869: 
  870:     def test_divmod_numeric(self):
  871:         # GH#19365
  872:         td = Timedelta(days=2, hours=6)
  873: 
  874:         result = divmod(td, 53 * 3600 * 1e9)
  875:         assert result[0] == Timedelta(1, unit="ns")
  876:         assert isinstance(result[1], Timedelta)
  877:         assert result[1] == Timedelta(hours=1)
  878: 
  879:         assert result
  880:         result = divmod(td, np.nan)
  881:         assert result[0] is NaT
  882:         assert result[1] is NaT
  883: 
  884:     def test_divmod(self):
  885:         # GH#19365
  886:         td = Timedelta(days=2, hours=6)
  887: 
  888:         result = divmod(td, timedelta(days=1))
  889:         assert result[0] == 2
  890:         assert isinstance(result[1], Timedelta)
  891:         assert result[1] == Timedelta(hours=6)
  892: 
  893:         result = divmod(td, 54)
  894:         assert result[0] == Timedelta(hours=1)
  895:         assert isinstance(result[1], Timedelta)
  896:         assert result[1] == Timedelta(0)
  897: 
  898:         result = divmod(td, NaT)
  899:         assert np.isnan(result[0])
  900:         assert result[1] is NaT
  901: 
  902:     def test_divmod_offset(self):
  903:         # GH#19365
  904:         td = Timedelta(days=2, hours=6)
  905: 
  906:         result = divmod(td, offsets.Hour(-4))
  907:         assert result[0] == -14
  908:         assert isinstance(result[1], Timedelta)
  909:         assert result[1] == Timedelta(hours=-2)
  910: 
  911:     def test_divmod_invalid(self):
  912:         # GH#19365
  913:         td = Timedelta(days=2, hours=6)
  914: 
  915:         msg = r"unsupported operand type\(s\) for //: 'Timedelta' and 'Timestamp'"
  916:         with pytest.raises(TypeError, match=msg):
  917:             divmod(td, Timestamp("2018-01-22"))
  918: 
  919:     def test_rdivmod_pytimedelta(self):
  920:         # GH#19365
  921:         result = divmod(timedelta(days=2, hours=6), Timedelta(days=1))
  922:         assert result[0] == 2
  923:         assert isinstance(result[1], Timedelta)
  924:         assert result[1] == Timedelta(hours=6)
  925: 
  926:     def test_rdivmod_offset(self):
  927:         result = divmod(offsets.Hour(54), Timedelta(hours=-4))
  928:         assert result[0] == -14
  929:         assert isinstance(result[1], Timedelta)
  930:         assert result[1] == Timedelta(hours=-2)
  931: 
  932:     def test_rdivmod_invalid(self):
  933:         # GH#19365
  934:         td = Timedelta(minutes=3)
  935:         msg = "unsupported operand type"
  936: 
  937:         with pytest.raises(TypeError, match=msg):
  938:             divmod(Timestamp("2018-01-22"), td)
  939: 
  940:         with pytest.raises(TypeError, match=msg):
  941:             divmod(15, td)
  942: 
  943:         with pytest.raises(TypeError, match=msg):
  944:             divmod(16.0, td)
  945: 
  946:         msg = "Invalid dtype int"
  947:         with pytest.raises(TypeError, match=msg):
  948:             divmod(np.array([22, 24]), td)
  949: 
  950:     # ----------------------------------------------------------------
  951: 
  952:     @pytest.mark.parametrize(
  953:         "op", [operator.mul, ops.rmul, operator.truediv, ops.rdiv, ops.rsub]
  954:     )
  955:     @pytest.mark.parametrize(
  956:         "arr",
  957:         [
  958:             np.array([Timestamp("20130101 9:01"), Timestamp("20121230 9:02")]),
  959:             np.array([Timestamp("2021-11-09 09:54:00"), Timedelta("1D")]),
  960:         ],
  961:     )
  962:     def test_td_op_timedelta_timedeltalike_array(self, op, arr):
  963:         msg = "unsupported operand type|cannot use operands with types"
  964:         with pytest.raises(TypeError, match=msg):
  965:             op(arr, Timedelta("1D"))
  966: 
  967: 
  968: class TestTimedeltaComparison:
  969:     @pytest.mark.skip_ubsan
  970:     def test_compare_pytimedelta_bounds(self):
  971:         # GH#49021 don't overflow on comparison with very large pytimedeltas
  972: 
  973:         for unit in ["ns", "us"]:
  974:             tdmax = Timedelta.max.as_unit(unit).max
  975:             tdmin = Timedelta.min.as_unit(unit).min
  976: 
  977:             assert tdmax < timedelta.max
  978:             assert tdmax <= timedelta.max
  979:             assert not tdmax > timedelta.max
  980:             assert not tdmax >= timedelta.max
  981:             assert tdmax != timedelta.max
  982:             assert not tdmax == timedelta.max
  983: 
  984:             assert tdmin > timedelta.min
  985:             assert tdmin >= timedelta.min
  986:             assert not tdmin < timedelta.min
  987:             assert not tdmin <= timedelta.min
  988:             assert tdmin != timedelta.min
  989:             assert not tdmin == timedelta.min
  990: 
  991:         # But the "ms" and "s"-reso bounds extend pass pytimedelta
  992:         for unit in ["ms", "s"]:
  993:             tdmax = Timedelta.max.as_unit(unit).max
  994:             tdmin = Timedelta.min.as_unit(unit).min
  995: 
  996:             assert tdmax > timedelta.max
  997:             assert tdmax >= timedelta.max
  998:             assert not tdmax < timedelta.max
  999:             assert not tdmax <= timedelta.max
 1000:             assert tdmax != timedelta.max
 1001:             assert not tdmax == timedelta.max
 1002: 
 1003:             assert tdmin < timedelta.min
 1004:             assert tdmin <= timedelta.min
 1005:             assert not tdmin > timedelta.min
 1006:             assert not tdmin >= timedelta.min
 1007:             assert tdmin != timedelta.min
 1008:             assert not tdmin == timedelta.min
 1009: 
 1010:     def test_compare_pytimedelta_bounds2(self):
 1011:         # a pytimedelta outside the microsecond bounds
 1012:         pytd = timedelta(days=999999999, seconds=86399)
 1013:         # NB: np.timedelta64(td, "s"") incorrectly overflows
 1014:         td64 = np.timedelta64(pytd.days, "D") + np.timedelta64(pytd.seconds, "s")
 1015:         td = Timedelta(td64)
 1016:         assert td.days == pytd.days
 1017:         assert td.seconds == pytd.seconds
 1018: 
 1019:         assert td == pytd
 1020:         assert not td != pytd
 1021:         assert not td < pytd
 1022:         assert not td > pytd
 1023:         assert td <= pytd
 1024:         assert td >= pytd
 1025: 
 1026:         td2 = td - Timedelta(seconds=1).as_unit("s")
 1027:         assert td2 != pytd
 1028:         assert not td2 == pytd
 1029:         assert td2 < pytd
 1030:         assert td2 <= pytd
 1031:         assert not td2 > pytd
 1032:         assert not td2 >= pytd
 1033: 
 1034:     def test_compare_tick(self, tick_classes):
 1035:         cls = tick_classes
 1036: 
 1037:         off = cls(4)
 1038:         td = off._as_pd_timedelta
 1039:         assert isinstance(td, Timedelta)
 1040: 
 1041:         assert td == off
 1042:         assert not td != off
 1043:         assert td <= off
 1044:         assert td >= off
 1045:         assert not td < off
 1046:         assert not td > off
 1047: 
 1048:         assert not td == 2 * off
 1049:         assert td != 2 * off
 1050:         assert td <= 2 * off
 1051:         assert td < 2 * off
 1052:         assert not td >= 2 * off
 1053:         assert not td > 2 * off
 1054: 
 1055:     def test_comparison_object_array(self):
 1056:         # analogous to GH#15183
 1057:         td = Timedelta("2 days")
 1058:         other = Timedelta("3 hours")
 1059: 
 1060:         arr = np.array([other, td], dtype=object)
 1061:         res = arr == td
 1062:         expected = np.array([False, True], dtype=bool)
 1063:         assert (res == expected).all()
 1064: 
 1065:         # 2D case
 1066:         arr = np.array([[other, td], [td, other]], dtype=object)
 1067:         res = arr != td
 1068:         expected = np.array([[True, False], [False, True]], dtype=bool)
 1069:         assert res.shape == expected.shape
 1070:         assert (res == expected).all()
 1071: 
 1072:     def test_compare_timedelta_ndarray(self):
 1073:         # GH#11835
 1074:         periods = [Timedelta("0 days 01:00:00"), Timedelta("0 days 01:00:00")]
 1075:         arr = np.array(periods)
 1076:         result = arr[0] > arr
 1077:         expected = np.array([False, False])
 1078:         tm.assert_numpy_array_equal(result, expected)
 1079: 
 1080:     def test_compare_td64_ndarray(self):
 1081:         # GG#33441
 1082:         arr = np.arange(5).astype("timedelta64[ns]")
 1083:         td = Timedelta(arr[1])
 1084: 
 1085:         expected = np.array([False, True, False, False, False], dtype=bool)
 1086: 
 1087:         result = td == arr
 1088:         tm.assert_numpy_array_equal(result, expected)
 1089: 
 1090:         result = arr == td
 1091:         tm.assert_numpy_array_equal(result, expected)
 1092: 
 1093:         result = td != arr
 1094:         tm.assert_numpy_array_equal(result, ~expected)
 1095: 
 1096:         result = arr != td
 1097:         tm.assert_numpy_array_equal(result, ~expected)
 1098: 
 1099:     def test_compare_custom_object(self):
 1100:         """
 1101:         Make sure non supported operations on Timedelta returns NonImplemented
 1102:         and yields to other operand (GH#20829).
 1103:         """
 1104: 
 1105:         class CustomClass:
 1106:             def __init__(self, cmp_result=None) -> None:
 1107:                 self.cmp_result = cmp_result
 1108: 
 1109:             def generic_result(self):
 1110:                 if self.cmp_result is None:
 1111:                     return NotImplemented
 1112:                 else:
 1113:                     return self.cmp_result
 1114: 
 1115:             def __eq__(self, other):
 1116:                 return self.generic_result()
 1117: 
 1118:             def __gt__(self, other):
 1119:                 return self.generic_result()
 1120: 
 1121:         t = Timedelta("1s")
 1122: 
 1123:         assert t != "string"
 1124:         assert t != 1
 1125:         assert t != CustomClass()
 1126:         assert t != CustomClass(cmp_result=False)
 1127: 
 1128:         assert t < CustomClass(cmp_result=True)
 1129:         assert not t < CustomClass(cmp_result=False)
 1130: 
 1131:         assert t == CustomClass(cmp_result=True)
 1132: 
 1133:     @pytest.mark.parametrize("val", ["string", 1])
 1134:     def test_compare_unknown_type(self, val):
 1135:         # GH#20829
 1136:         t = Timedelta("1s")
 1137:         msg = "not supported between instances of 'Timedelta' and '(int|str)'"
 1138:         with pytest.raises(TypeError, match=msg):
 1139:             t >= val
 1140:         with pytest.raises(TypeError, match=msg):
 1141:             t > val
 1142:         with pytest.raises(TypeError, match=msg):
 1143:             t <= val
 1144:         with pytest.raises(TypeError, match=msg):
 1145:             t < val
 1146: 
 1147: 
 1148: def test_ops_notimplemented():
 1149:     class Other:
 1150:         pass
 1151: 
 1152:     other = Other()
 1153: 
 1154:     td = Timedelta("1 day")
 1155:     assert td.__add__(other) is NotImplemented
 1156:     assert td.__sub__(other) is NotImplemented
 1157:     assert td.__truediv__(other) is NotImplemented
 1158:     assert td.__mul__(other) is NotImplemented
 1159:     assert td.__floordiv__(other) is NotImplemented
 1160: 
 1161: 
 1162: def test_ops_error_str():
 1163:     # GH#13624
 1164:     td = Timedelta("1 day")
 1165: 
 1166:     for left, right in [(td, "a"), ("a", td)]:
 1167:         msg = "|".join(
 1168:             [
 1169:                 "unsupported operand type",
 1170:                 r'can only concatenate str \(not "Timedelta"\) to str',
 1171:                 "must be str, not Timedelta",
 1172:             ]
 1173:         )
 1174:         with pytest.raises(TypeError, match=msg):
 1175:             left + right
 1176: 
 1177:         msg = "not supported between instances of"
 1178:         with pytest.raises(TypeError, match=msg):
 1179:             left > right
 1180: 
 1181:         assert not left == right  # pylint: disable=unneeded-not
 1182:         assert left != right
