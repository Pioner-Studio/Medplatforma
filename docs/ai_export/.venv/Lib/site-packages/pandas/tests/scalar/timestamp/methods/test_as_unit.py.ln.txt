    1: import pytest
    2: 
    3: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
    4: from pandas.errors import OutOfBoundsDatetime
    5: 
    6: from pandas import Timestamp
    7: 
    8: 
    9: class TestTimestampAsUnit:
   10:     def test_as_unit(self):
   11:         ts = Timestamp("1970-01-01").as_unit("ns")
   12:         assert ts.unit == "ns"
   13: 
   14:         assert ts.as_unit("ns") is ts
   15: 
   16:         res = ts.as_unit("us")
   17:         assert res._value == ts._value // 1000
   18:         assert res._creso == NpyDatetimeUnit.NPY_FR_us.value
   19: 
   20:         rt = res.as_unit("ns")
   21:         assert rt._value == ts._value
   22:         assert rt._creso == ts._creso
   23: 
   24:         res = ts.as_unit("ms")
   25:         assert res._value == ts._value // 1_000_000
   26:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   27: 
   28:         rt = res.as_unit("ns")
   29:         assert rt._value == ts._value
   30:         assert rt._creso == ts._creso
   31: 
   32:         res = ts.as_unit("s")
   33:         assert res._value == ts._value // 1_000_000_000
   34:         assert res._creso == NpyDatetimeUnit.NPY_FR_s.value
   35: 
   36:         rt = res.as_unit("ns")
   37:         assert rt._value == ts._value
   38:         assert rt._creso == ts._creso
   39: 
   40:     def test_as_unit_overflows(self):
   41:         # microsecond that would be just out of bounds for nano
   42:         us = 9223372800000000
   43:         ts = Timestamp._from_value_and_reso(us, NpyDatetimeUnit.NPY_FR_us.value, None)
   44: 
   45:         msg = "Cannot cast 2262-04-12 00:00:00 to unit='ns' without overflow"
   46:         with pytest.raises(OutOfBoundsDatetime, match=msg):
   47:             ts.as_unit("ns")
   48: 
   49:         res = ts.as_unit("ms")
   50:         assert res._value == us // 1000
   51:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   52: 
   53:     def test_as_unit_rounding(self):
   54:         ts = Timestamp(1_500_000)  # i.e. 1500 microseconds
   55:         res = ts.as_unit("ms")
   56: 
   57:         expected = Timestamp(1_000_000)  # i.e. 1 millisecond
   58:         assert res == expected
   59: 
   60:         assert res._creso == NpyDatetimeUnit.NPY_FR_ms.value
   61:         assert res._value == 1
   62: 
   63:         with pytest.raises(ValueError, match="Cannot losslessly convert units"):
   64:             ts.as_unit("ms", round_ok=False)
   65: 
   66:     def test_as_unit_non_nano(self):
   67:         # case where we are going neither to nor from nano
   68:         ts = Timestamp("1970-01-02").as_unit("ms")
   69:         assert ts.year == 1970
   70:         assert ts.month == 1
   71:         assert ts.day == 2
   72:         assert ts.hour == ts.minute == ts.second == ts.microsecond == ts.nanosecond == 0
   73: 
   74:         res = ts.as_unit("s")
   75:         assert res._value == 24 * 3600
   76:         assert res.year == 1970
   77:         assert res.month == 1
   78:         assert res.day == 2
   79:         assert (
   80:             res.hour
   81:             == res.minute
   82:             == res.second
   83:             == res.microsecond
   84:             == res.nanosecond
   85:             == 0
   86:         )
