    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     Interval,
    6:     Timedelta,
    7:     Timestamp,
    8: )
    9: 
   10: 
   11: @pytest.fixture
   12: def interval():
   13:     return Interval(0, 1)
   14: 
   15: 
   16: class TestInterval:
   17:     def test_properties(self, interval):
   18:         assert interval.closed == "right"
   19:         assert interval.left == 0
   20:         assert interval.right == 1
   21:         assert interval.mid == 0.5
   22: 
   23:     def test_hash(self, interval):
   24:         # should not raise
   25:         hash(interval)
   26: 
   27:     @pytest.mark.parametrize(
   28:         "left, right, expected",
   29:         [
   30:             (0, 5, 5),
   31:             (-2, 5.5, 7.5),
   32:             (10, 10, 0),
   33:             (10, np.inf, np.inf),
   34:             (-np.inf, -5, np.inf),
   35:             (-np.inf, np.inf, np.inf),
   36:             (Timedelta("0 days"), Timedelta("5 days"), Timedelta("5 days")),
   37:             (Timedelta("10 days"), Timedelta("10 days"), Timedelta("0 days")),
   38:             (Timedelta("1h10min"), Timedelta("5h5min"), Timedelta("3h55min")),
   39:             (Timedelta("5s"), Timedelta("1h"), Timedelta("59min55s")),
   40:         ],
   41:     )
   42:     def test_length(self, left, right, expected):
   43:         # GH 18789
   44:         iv = Interval(left, right)
   45:         result = iv.length
   46:         assert result == expected
   47: 
   48:     @pytest.mark.parametrize(
   49:         "left, right, expected",
   50:         [
   51:             ("2017-01-01", "2017-01-06", "5 days"),
   52:             ("2017-01-01", "2017-01-01 12:00:00", "12 hours"),
   53:             ("2017-01-01 12:00", "2017-01-01 12:00:00", "0 days"),
   54:             ("2017-01-01 12:01", "2017-01-05 17:31:00", "4 days 5 hours 30 min"),
   55:         ],
   56:     )
   57:     @pytest.mark.parametrize("tz", (None, "UTC", "CET", "US/Eastern"))
   58:     def test_length_timestamp(self, tz, left, right, expected):
   59:         # GH 18789
   60:         iv = Interval(Timestamp(left, tz=tz), Timestamp(right, tz=tz))
   61:         result = iv.length
   62:         expected = Timedelta(expected)
   63:         assert result == expected
   64: 
   65:     @pytest.mark.parametrize(
   66:         "left, right",
   67:         [
   68:             (0, 1),
   69:             (Timedelta("0 days"), Timedelta("1 day")),
   70:             (Timestamp("2018-01-01"), Timestamp("2018-01-02")),
   71:             (
   72:                 Timestamp("2018-01-01", tz="US/Eastern"),
   73:                 Timestamp("2018-01-02", tz="US/Eastern"),
   74:             ),
   75:         ],
   76:     )
   77:     def test_is_empty(self, left, right, closed):
   78:         # GH27219
   79:         # non-empty always return False
   80:         iv = Interval(left, right, closed)
   81:         assert iv.is_empty is False
   82: 
   83:         # same endpoint is empty except when closed='both' (contains one point)
   84:         iv = Interval(left, left, closed)
   85:         result = iv.is_empty
   86:         expected = closed != "both"
   87:         assert result is expected
