    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4: )
    5: import operator
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas import Timestamp
   11: import pandas._testing as tm
   12: 
   13: 
   14: class TestTimestampComparison:
   15:     def test_compare_non_nano_dt64(self):
   16:         # don't raise when converting dt64 to Timestamp in __richcmp__
   17:         dt = np.datetime64("1066-10-14")
   18:         ts = Timestamp(dt)
   19: 
   20:         assert dt == ts
   21: 
   22:     def test_comparison_dt64_ndarray(self):
   23:         ts = Timestamp("2021-01-01")
   24:         ts2 = Timestamp("2019-04-05")
   25:         arr = np.array([[ts.asm8, ts2.asm8]], dtype="M8[ns]")
   26: 
   27:         result = ts == arr
   28:         expected = np.array([[True, False]], dtype=bool)
   29:         tm.assert_numpy_array_equal(result, expected)
   30: 
   31:         result = arr == ts
   32:         tm.assert_numpy_array_equal(result, expected)
   33: 
   34:         result = ts != arr
   35:         tm.assert_numpy_array_equal(result, ~expected)
   36: 
   37:         result = arr != ts
   38:         tm.assert_numpy_array_equal(result, ~expected)
   39: 
   40:         result = ts2 < arr
   41:         tm.assert_numpy_array_equal(result, expected)
   42: 
   43:         result = arr < ts2
   44:         tm.assert_numpy_array_equal(result, np.array([[False, False]], dtype=bool))
   45: 
   46:         result = ts2 <= arr
   47:         tm.assert_numpy_array_equal(result, np.array([[True, True]], dtype=bool))
   48: 
   49:         result = arr <= ts2
   50:         tm.assert_numpy_array_equal(result, ~expected)
   51: 
   52:         result = ts >= arr
   53:         tm.assert_numpy_array_equal(result, np.array([[True, True]], dtype=bool))
   54: 
   55:         result = arr >= ts
   56:         tm.assert_numpy_array_equal(result, np.array([[True, False]], dtype=bool))
   57: 
   58:     @pytest.mark.parametrize("reverse", [True, False])
   59:     def test_comparison_dt64_ndarray_tzaware(self, reverse, comparison_op):
   60:         ts = Timestamp("2021-01-01 00:00:00.00000", tz="UTC")
   61:         arr = np.array([ts.asm8, ts.asm8], dtype="M8[ns]")
   62: 
   63:         left, right = ts, arr
   64:         if reverse:
   65:             left, right = arr, ts
   66: 
   67:         if comparison_op is operator.eq:
   68:             expected = np.array([False, False], dtype=bool)
   69:             result = comparison_op(left, right)
   70:             tm.assert_numpy_array_equal(result, expected)
   71:         elif comparison_op is operator.ne:
   72:             expected = np.array([True, True], dtype=bool)
   73:             result = comparison_op(left, right)
   74:             tm.assert_numpy_array_equal(result, expected)
   75:         else:
   76:             msg = "Cannot compare tz-naive and tz-aware timestamps"
   77:             with pytest.raises(TypeError, match=msg):
   78:                 comparison_op(left, right)
   79: 
   80:     def test_comparison_object_array(self):
   81:         # GH#15183
   82:         ts = Timestamp("2011-01-03 00:00:00-0500", tz="US/Eastern")
   83:         other = Timestamp("2011-01-01 00:00:00-0500", tz="US/Eastern")
   84:         naive = Timestamp("2011-01-01 00:00:00")
   85: 
   86:         arr = np.array([other, ts], dtype=object)
   87:         res = arr == ts
   88:         expected = np.array([False, True], dtype=bool)
   89:         assert (res == expected).all()
   90: 
   91:         # 2D case
   92:         arr = np.array([[other, ts], [ts, other]], dtype=object)
   93:         res = arr != ts
   94:         expected = np.array([[True, False], [False, True]], dtype=bool)
   95:         assert res.shape == expected.shape
   96:         assert (res == expected).all()
   97: 
   98:         # tzaware mismatch
   99:         arr = np.array([naive], dtype=object)
  100:         msg = "Cannot compare tz-naive and tz-aware timestamps"
  101:         with pytest.raises(TypeError, match=msg):
  102:             arr < ts
  103: 
  104:     def test_comparison(self):
  105:         # 5-18-2012 00:00:00.000
  106:         stamp = 1337299200000000000
  107: 
  108:         val = Timestamp(stamp)
  109: 
  110:         assert val == val
  111:         assert not val != val
  112:         assert not val < val
  113:         assert val <= val
  114:         assert not val > val
  115:         assert val >= val
  116: 
  117:         other = datetime(2012, 5, 18)
  118:         assert val == other
  119:         assert not val != other
  120:         assert not val < other
  121:         assert val <= other
  122:         assert not val > other
  123:         assert val >= other
  124: 
  125:         other = Timestamp(stamp + 100)
  126: 
  127:         assert val != other
  128:         assert val != other
  129:         assert val < other
  130:         assert val <= other
  131:         assert other > val
  132:         assert other >= val
  133: 
  134:     def test_compare_invalid(self):
  135:         # GH#8058
  136:         val = Timestamp("20130101 12:01:02")
  137:         assert not val == "foo"
  138:         assert not val == 10.0
  139:         assert not val == 1
  140:         assert not val == []
  141:         assert not val == {"foo": 1}
  142:         assert not val == np.float64(1)
  143:         assert not val == np.int64(1)
  144: 
  145:         assert val != "foo"
  146:         assert val != 10.0
  147:         assert val != 1
  148:         assert val != []
  149:         assert val != {"foo": 1}
  150:         assert val != np.float64(1)
  151:         assert val != np.int64(1)
  152: 
  153:     @pytest.mark.parametrize("tz", [None, "US/Pacific"])
  154:     def test_compare_date(self, tz):
  155:         # GH#36131 comparing Timestamp with date object is deprecated
  156:         ts = Timestamp("2021-01-01 00:00:00.00000", tz=tz)
  157:         dt = ts.to_pydatetime().date()
  158:         # in 2.0 we disallow comparing pydate objects with Timestamps,
  159:         #  following the stdlib datetime behavior.
  160: 
  161:         msg = "Cannot compare Timestamp with datetime.date"
  162:         for left, right in [(ts, dt), (dt, ts)]:
  163:             assert not left == right
  164:             assert left != right
  165: 
  166:             with pytest.raises(TypeError, match=msg):
  167:                 left < right
  168:             with pytest.raises(TypeError, match=msg):
  169:                 left <= right
  170:             with pytest.raises(TypeError, match=msg):
  171:                 left > right
  172:             with pytest.raises(TypeError, match=msg):
  173:                 left >= right
  174: 
  175:     def test_cant_compare_tz_naive_w_aware(self, utc_fixture):
  176:         # see GH#1404
  177:         a = Timestamp("3/12/2012")
  178:         b = Timestamp("3/12/2012", tz=utc_fixture)
  179: 
  180:         msg = "Cannot compare tz-naive and tz-aware timestamps"
  181:         assert not a == b
  182:         assert a != b
  183:         with pytest.raises(TypeError, match=msg):
  184:             a < b
  185:         with pytest.raises(TypeError, match=msg):
  186:             a <= b
  187:         with pytest.raises(TypeError, match=msg):
  188:             a > b
  189:         with pytest.raises(TypeError, match=msg):
  190:             a >= b
  191: 
  192:         assert not b == a
  193:         assert b != a
  194:         with pytest.raises(TypeError, match=msg):
  195:             b < a
  196:         with pytest.raises(TypeError, match=msg):
  197:             b <= a
  198:         with pytest.raises(TypeError, match=msg):
  199:             b > a
  200:         with pytest.raises(TypeError, match=msg):
  201:             b >= a
  202: 
  203:         assert not a == b.to_pydatetime()
  204:         assert not a.to_pydatetime() == b
  205: 
  206:     def test_timestamp_compare_scalars(self):
  207:         # case where ndim == 0
  208:         lhs = np.datetime64(datetime(2013, 12, 6))
  209:         rhs = Timestamp("now")
  210:         nat = Timestamp("nat")
  211: 
  212:         ops = {"gt": "lt", "lt": "gt", "ge": "le", "le": "ge", "eq": "eq", "ne": "ne"}
  213: 
  214:         for left, right in ops.items():
  215:             left_f = getattr(operator, left)
  216:             right_f = getattr(operator, right)
  217:             expected = left_f(lhs, rhs)
  218: 
  219:             result = right_f(rhs, lhs)
  220:             assert result == expected
  221: 
  222:             expected = left_f(rhs, nat)
  223:             result = right_f(nat, rhs)
  224:             assert result == expected
  225: 
  226:     def test_timestamp_compare_with_early_datetime(self):
  227:         # e.g. datetime.min
  228:         stamp = Timestamp("2012-01-01")
  229: 
  230:         assert not stamp == datetime.min
  231:         assert not stamp == datetime(1600, 1, 1)
  232:         assert not stamp == datetime(2700, 1, 1)
  233:         assert stamp != datetime.min
  234:         assert stamp != datetime(1600, 1, 1)
  235:         assert stamp != datetime(2700, 1, 1)
  236:         assert stamp > datetime(1600, 1, 1)
  237:         assert stamp >= datetime(1600, 1, 1)
  238:         assert stamp < datetime(2700, 1, 1)
  239:         assert stamp <= datetime(2700, 1, 1)
  240: 
  241:         other = Timestamp.min.to_pydatetime(warn=False)
  242:         assert other - timedelta(microseconds=1) < Timestamp.min
  243: 
  244:     def test_timestamp_compare_oob_dt64(self):
  245:         us = np.timedelta64(1, "us")
  246:         other = np.datetime64(Timestamp.min).astype("M8[us]")
  247: 
  248:         # This may change if the implementation bound is dropped to match
  249:         #  DatetimeArray/DatetimeIndex GH#24124
  250:         assert Timestamp.min > other
  251:         # Note: numpy gets the reversed comparison wrong
  252: 
  253:         other = np.datetime64(Timestamp.max).astype("M8[us]")
  254:         assert Timestamp.max > other  # not actually OOB
  255:         assert other < Timestamp.max
  256: 
  257:         assert Timestamp.max < other + us
  258:         # Note: numpy gets the reversed comparison wrong
  259: 
  260:         # GH-42794
  261:         other = datetime(9999, 9, 9)
  262:         assert Timestamp.min < other
  263:         assert other > Timestamp.min
  264:         assert Timestamp.max < other
  265:         assert other > Timestamp.max
  266: 
  267:         other = datetime(1, 1, 1)
  268:         assert Timestamp.max > other
  269:         assert other < Timestamp.max
  270:         assert Timestamp.min > other
  271:         assert other < Timestamp.min
  272: 
  273:     def test_compare_zerodim_array(self, fixed_now_ts):
  274:         # GH#26916
  275:         ts = fixed_now_ts
  276:         dt64 = np.datetime64("2016-01-01", "ns")
  277:         arr = np.array(dt64)
  278:         assert arr.ndim == 0
  279: 
  280:         result = arr < ts
  281:         assert result is np.bool_(True)
  282:         result = arr > ts
  283:         assert result is np.bool_(False)
  284: 
  285: 
  286: def test_rich_comparison_with_unsupported_type():
  287:     # Comparisons with unsupported objects should return NotImplemented
  288:     # (it previously raised TypeError, see #24011)
  289: 
  290:     class Inf:
  291:         def __lt__(self, o):
  292:             return False
  293: 
  294:         def __le__(self, o):
  295:             return isinstance(o, Inf)
  296: 
  297:         def __gt__(self, o):
  298:             return not isinstance(o, Inf)
  299: 
  300:         def __ge__(self, o):
  301:             return True
  302: 
  303:         def __eq__(self, other) -> bool:
  304:             return isinstance(other, Inf)
  305: 
  306:     inf = Inf()
  307:     timestamp = Timestamp("2018-11-30")
  308: 
  309:     for left, right in [(inf, timestamp), (timestamp, inf)]:
  310:         assert left > right or left < right
  311:         assert left >= right or left <= right
  312:         assert not left == right  # pylint: disable=unneeded-not
  313:         assert left != right
