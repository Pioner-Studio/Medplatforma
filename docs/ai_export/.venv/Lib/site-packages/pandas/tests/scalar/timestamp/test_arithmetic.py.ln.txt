    1: from datetime import (
    2:     datetime,
    3:     timedelta,
    4:     timezone,
    5: )
    6: 
    7: from dateutil.tz import gettz
    8: import numpy as np
    9: import pytest
   10: import pytz
   11: 
   12: from pandas._libs.tslibs import (
   13:     OutOfBoundsDatetime,
   14:     OutOfBoundsTimedelta,
   15:     Timedelta,
   16:     Timestamp,
   17:     offsets,
   18:     to_offset,
   19: )
   20: 
   21: import pandas._testing as tm
   22: 
   23: 
   24: class TestTimestampArithmetic:
   25:     def test_overflow_offset(self):
   26:         # no overflow expected
   27: 
   28:         stamp = Timestamp("2000/1/1")
   29:         offset_no_overflow = to_offset("D") * 100
   30: 
   31:         expected = Timestamp("2000/04/10")
   32:         assert stamp + offset_no_overflow == expected
   33: 
   34:         assert offset_no_overflow + stamp == expected
   35: 
   36:         expected = Timestamp("1999/09/23")
   37:         assert stamp - offset_no_overflow == expected
   38: 
   39:     def test_overflow_offset_raises(self):
   40:         # xref https://github.com/statsmodels/statsmodels/issues/3374
   41:         # ends up multiplying really large numbers which overflow
   42: 
   43:         stamp = Timestamp("2017-01-13 00:00:00").as_unit("ns")
   44:         offset_overflow = 20169940 * offsets.Day(1)
   45:         lmsg2 = r"Cannot cast -?20169940 days \+?00:00:00 to unit='ns' without overflow"
   46: 
   47:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
   48:             stamp + offset_overflow
   49: 
   50:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
   51:             offset_overflow + stamp
   52: 
   53:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg2):
   54:             stamp - offset_overflow
   55: 
   56:         # xref https://github.com/pandas-dev/pandas/issues/14080
   57:         # used to crash, so check for proper overflow exception
   58: 
   59:         stamp = Timestamp("2000/1/1").as_unit("ns")
   60:         offset_overflow = to_offset("D") * 100**5
   61: 
   62:         lmsg3 = (
   63:             r"Cannot cast -?10000000000 days \+?00:00:00 to unit='ns' without overflow"
   64:         )
   65:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
   66:             stamp + offset_overflow
   67: 
   68:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
   69:             offset_overflow + stamp
   70: 
   71:         with pytest.raises(OutOfBoundsTimedelta, match=lmsg3):
   72:             stamp - offset_overflow
   73: 
   74:     def test_overflow_timestamp_raises(self):
   75:         # https://github.com/pandas-dev/pandas/issues/31774
   76:         msg = "Result is too large"
   77:         a = Timestamp("2101-01-01 00:00:00").as_unit("ns")
   78:         b = Timestamp("1688-01-01 00:00:00").as_unit("ns")
   79: 
   80:         with pytest.raises(OutOfBoundsDatetime, match=msg):
   81:             a - b
   82: 
   83:         # but we're OK for timestamp and datetime.datetime
   84:         assert (a - b.to_pydatetime()) == (a.to_pydatetime() - b)
   85: 
   86:     def test_delta_preserve_nanos(self):
   87:         val = Timestamp(1337299200000000123)
   88:         result = val + timedelta(1)
   89:         assert result.nanosecond == val.nanosecond
   90: 
   91:     def test_rsub_dtscalars(self, tz_naive_fixture):
   92:         # In particular, check that datetime64 - Timestamp works GH#28286
   93:         td = Timedelta(1235345642000)
   94:         ts = Timestamp("2021-01-01", tz=tz_naive_fixture)
   95:         other = ts + td
   96: 
   97:         assert other - ts == td
   98:         assert other.to_pydatetime() - ts == td
   99:         if tz_naive_fixture is None:
  100:             assert other.to_datetime64() - ts == td
  101:         else:
  102:             msg = "Cannot subtract tz-naive and tz-aware datetime-like objects"
  103:             with pytest.raises(TypeError, match=msg):
  104:                 other.to_datetime64() - ts
  105: 
  106:     def test_timestamp_sub_datetime(self):
  107:         dt = datetime(2013, 10, 12)
  108:         ts = Timestamp(datetime(2013, 10, 13))
  109:         assert (ts - dt).days == 1
  110:         assert (dt - ts).days == -1
  111: 
  112:     def test_subtract_tzaware_datetime(self):
  113:         t1 = Timestamp("2020-10-22T22:00:00+00:00")
  114:         t2 = datetime(2020, 10, 22, 22, tzinfo=timezone.utc)
  115: 
  116:         result = t1 - t2
  117: 
  118:         assert isinstance(result, Timedelta)
  119:         assert result == Timedelta("0 days")
  120: 
  121:     def test_subtract_timestamp_from_different_timezone(self):
  122:         t1 = Timestamp("20130101").tz_localize("US/Eastern")
  123:         t2 = Timestamp("20130101").tz_localize("CET")
  124: 
  125:         result = t1 - t2
  126: 
  127:         assert isinstance(result, Timedelta)
  128:         assert result == Timedelta("0 days 06:00:00")
  129: 
  130:     def test_subtracting_involving_datetime_with_different_tz(self):
  131:         t1 = datetime(2013, 1, 1, tzinfo=timezone(timedelta(hours=-5)))
  132:         t2 = Timestamp("20130101").tz_localize("CET")
  133: 
  134:         result = t1 - t2
  135: 
  136:         assert isinstance(result, Timedelta)
  137:         assert result == Timedelta("0 days 06:00:00")
  138: 
  139:         result = t2 - t1
  140:         assert isinstance(result, Timedelta)
  141:         assert result == Timedelta("-1 days +18:00:00")
  142: 
  143:     def test_subtracting_different_timezones(self, tz_aware_fixture):
  144:         t_raw = Timestamp("20130101")
  145:         t_UTC = t_raw.tz_localize("UTC")
  146:         t_diff = t_UTC.tz_convert(tz_aware_fixture) + Timedelta("0 days 05:00:00")
  147: 
  148:         result = t_diff - t_UTC
  149: 
  150:         assert isinstance(result, Timedelta)
  151:         assert result == Timedelta("0 days 05:00:00")
  152: 
  153:     def test_addition_subtraction_types(self):
  154:         # Assert on the types resulting from Timestamp +/- various date/time
  155:         # objects
  156:         dt = datetime(2014, 3, 4)
  157:         td = timedelta(seconds=1)
  158:         ts = Timestamp(dt)
  159: 
  160:         msg = "Addition/subtraction of integers"
  161:         with pytest.raises(TypeError, match=msg):
  162:             # GH#22535 add/sub with integers is deprecated
  163:             ts + 1
  164:         with pytest.raises(TypeError, match=msg):
  165:             ts - 1
  166: 
  167:         # Timestamp + datetime not supported, though subtraction is supported
  168:         # and yields timedelta more tests in tseries/base/tests/test_base.py
  169:         assert type(ts - dt) == Timedelta
  170:         assert type(ts + td) == Timestamp
  171:         assert type(ts - td) == Timestamp
  172: 
  173:         # Timestamp +/- datetime64 not supported, so not tested (could possibly
  174:         # assert error raised?)
  175:         td64 = np.timedelta64(1, "D")
  176:         assert type(ts + td64) == Timestamp
  177:         assert type(ts - td64) == Timestamp
  178: 
  179:     @pytest.mark.parametrize(
  180:         "td", [Timedelta(hours=3), np.timedelta64(3, "h"), timedelta(hours=3)]
  181:     )
  182:     def test_radd_tdscalar(self, td, fixed_now_ts):
  183:         # GH#24775 timedelta64+Timestamp should not raise
  184:         ts = fixed_now_ts
  185:         assert td + ts == ts + td
  186: 
  187:     @pytest.mark.parametrize(
  188:         "other,expected_difference",
  189:         [
  190:             (np.timedelta64(-123, "ns"), -123),
  191:             (np.timedelta64(1234567898, "ns"), 1234567898),
  192:             (np.timedelta64(-123, "us"), -123000),
  193:             (np.timedelta64(-123, "ms"), -123000000),
  194:         ],
  195:     )
  196:     def test_timestamp_add_timedelta64_unit(self, other, expected_difference):
  197:         now = datetime.now(timezone.utc)
  198:         ts = Timestamp(now).as_unit("ns")
  199:         result = ts + other
  200:         valdiff = result._value - ts._value
  201:         assert valdiff == expected_difference
  202: 
  203:         ts2 = Timestamp(now)
  204:         assert ts2 + other == result
  205: 
  206:     @pytest.mark.parametrize(
  207:         "ts",
  208:         [
  209:             Timestamp("1776-07-04"),
  210:             Timestamp("1776-07-04", tz="UTC"),
  211:         ],
  212:     )
  213:     @pytest.mark.parametrize(
  214:         "other",
  215:         [
  216:             1,
  217:             np.int64(1),
  218:             np.array([1, 2], dtype=np.int32),
  219:             np.array([3, 4], dtype=np.uint64),
  220:         ],
  221:     )
  222:     def test_add_int_with_freq(self, ts, other):
  223:         msg = "Addition/subtraction of integers and integer-arrays"
  224:         with pytest.raises(TypeError, match=msg):
  225:             ts + other
  226:         with pytest.raises(TypeError, match=msg):
  227:             other + ts
  228: 
  229:         with pytest.raises(TypeError, match=msg):
  230:             ts - other
  231: 
  232:         msg = "unsupported operand type"
  233:         with pytest.raises(TypeError, match=msg):
  234:             other - ts
  235: 
  236:     @pytest.mark.parametrize("shape", [(6,), (2, 3)])
  237:     def test_addsub_m8ndarray(self, shape):
  238:         # GH#33296
  239:         ts = Timestamp("2020-04-04 15:45").as_unit("ns")
  240:         other = np.arange(6).astype("m8[h]").reshape(shape)
  241: 
  242:         result = ts + other
  243: 
  244:         ex_stamps = [ts + Timedelta(hours=n) for n in range(6)]
  245:         expected = np.array([x.asm8 for x in ex_stamps], dtype="M8[ns]").reshape(shape)
  246:         tm.assert_numpy_array_equal(result, expected)
  247: 
  248:         result = other + ts
  249:         tm.assert_numpy_array_equal(result, expected)
  250: 
  251:         result = ts - other
  252:         ex_stamps = [ts - Timedelta(hours=n) for n in range(6)]
  253:         expected = np.array([x.asm8 for x in ex_stamps], dtype="M8[ns]").reshape(shape)
  254:         tm.assert_numpy_array_equal(result, expected)
  255: 
  256:         msg = r"unsupported operand type\(s\) for -: 'numpy.ndarray' and 'Timestamp'"
  257:         with pytest.raises(TypeError, match=msg):
  258:             other - ts
  259: 
  260:     @pytest.mark.parametrize("shape", [(6,), (2, 3)])
  261:     def test_addsub_m8ndarray_tzaware(self, shape):
  262:         # GH#33296
  263:         ts = Timestamp("2020-04-04 15:45", tz="US/Pacific")
  264: 
  265:         other = np.arange(6).astype("m8[h]").reshape(shape)
  266: 
  267:         result = ts + other
  268: 
  269:         ex_stamps = [ts + Timedelta(hours=n) for n in range(6)]
  270:         expected = np.array(ex_stamps).reshape(shape)
  271:         tm.assert_numpy_array_equal(result, expected)
  272: 
  273:         result = other + ts
  274:         tm.assert_numpy_array_equal(result, expected)
  275: 
  276:         result = ts - other
  277:         ex_stamps = [ts - Timedelta(hours=n) for n in range(6)]
  278:         expected = np.array(ex_stamps).reshape(shape)
  279:         tm.assert_numpy_array_equal(result, expected)
  280: 
  281:         msg = r"unsupported operand type\(s\) for -: 'numpy.ndarray' and 'Timestamp'"
  282:         with pytest.raises(TypeError, match=msg):
  283:             other - ts
  284: 
  285:     def test_subtract_different_utc_objects(self, utc_fixture, utc_fixture2):
  286:         # GH 32619
  287:         dt = datetime(2021, 1, 1)
  288:         ts1 = Timestamp(dt, tz=utc_fixture)
  289:         ts2 = Timestamp(dt, tz=utc_fixture2)
  290:         result = ts1 - ts2
  291:         expected = Timedelta(0)
  292:         assert result == expected
  293: 
  294:     @pytest.mark.parametrize(
  295:         "tz",
  296:         [
  297:             pytz.timezone("US/Eastern"),
  298:             gettz("US/Eastern"),
  299:             "US/Eastern",
  300:             "dateutil/US/Eastern",
  301:         ],
  302:     )
  303:     def test_timestamp_add_timedelta_push_over_dst_boundary(self, tz):
  304:         # GH#1389
  305: 
  306:         # 4 hours before DST transition
  307:         stamp = Timestamp("3/10/2012 22:00", tz=tz)
  308: 
  309:         result = stamp + timedelta(hours=6)
  310: 
  311:         # spring forward, + "7" hours
  312:         expected = Timestamp("3/11/2012 05:00", tz=tz)
  313: 
  314:         assert result == expected
  315: 
  316: 
  317: class SubDatetime(datetime):
  318:     pass
  319: 
  320: 
  321: @pytest.mark.parametrize(
  322:     "lh,rh",
  323:     [
  324:         (SubDatetime(2000, 1, 1), Timedelta(hours=1)),
  325:         (Timedelta(hours=1), SubDatetime(2000, 1, 1)),
  326:     ],
  327: )
  328: def test_dt_subclass_add_timedelta(lh, rh):
  329:     # GH#25851
  330:     # ensure that subclassed datetime works for
  331:     # Timedelta operations
  332:     result = lh + rh
  333:     expected = SubDatetime(2000, 1, 1, 1)
  334:     assert result == expected
