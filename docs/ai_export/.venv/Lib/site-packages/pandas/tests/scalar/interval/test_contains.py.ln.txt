    1: import pytest
    2: 
    3: from pandas import (
    4:     Interval,
    5:     Timedelta,
    6:     Timestamp,
    7: )
    8: 
    9: 
   10: class TestContains:
   11:     def test_contains(self):
   12:         interval = Interval(0, 1)
   13:         assert 0.5 in interval
   14:         assert 1 in interval
   15:         assert 0 not in interval
   16: 
   17:         interval_both = Interval(0, 1, "both")
   18:         assert 0 in interval_both
   19:         assert 1 in interval_both
   20: 
   21:         interval_neither = Interval(0, 1, closed="neither")
   22:         assert 0 not in interval_neither
   23:         assert 0.5 in interval_neither
   24:         assert 1 not in interval_neither
   25: 
   26:     def test_contains_interval(self, inclusive_endpoints_fixture):
   27:         interval1 = Interval(0, 1, "both")
   28:         interval2 = Interval(0, 1, inclusive_endpoints_fixture)
   29:         assert interval1 in interval1
   30:         assert interval2 in interval2
   31:         assert interval2 in interval1
   32:         assert interval1 not in interval2 or inclusive_endpoints_fixture == "both"
   33: 
   34:     def test_contains_infinite_length(self):
   35:         interval1 = Interval(0, 1, "both")
   36:         interval2 = Interval(float("-inf"), float("inf"), "neither")
   37:         assert interval1 in interval2
   38:         assert interval2 not in interval1
   39: 
   40:     def test_contains_zero_length(self):
   41:         interval1 = Interval(0, 1, "both")
   42:         interval2 = Interval(-1, -1, "both")
   43:         interval3 = Interval(0.5, 0.5, "both")
   44:         assert interval2 not in interval1
   45:         assert interval3 in interval1
   46:         assert interval2 not in interval3 and interval3 not in interval2
   47:         assert interval1 not in interval2 and interval1 not in interval3
   48: 
   49:     @pytest.mark.parametrize(
   50:         "type1",
   51:         [
   52:             (0, 1),
   53:             (Timestamp(2000, 1, 1, 0), Timestamp(2000, 1, 1, 1)),
   54:             (Timedelta("0h"), Timedelta("1h")),
   55:         ],
   56:     )
   57:     @pytest.mark.parametrize(
   58:         "type2",
   59:         [
   60:             (0, 1),
   61:             (Timestamp(2000, 1, 1, 0), Timestamp(2000, 1, 1, 1)),
   62:             (Timedelta("0h"), Timedelta("1h")),
   63:         ],
   64:     )
   65:     def test_contains_mixed_types(self, type1, type2):
   66:         interval1 = Interval(*type1)
   67:         interval2 = Interval(*type2)
   68:         if type1 == type2:
   69:             assert interval1 in interval2
   70:         else:
   71:             msg = "^'<=' not supported between instances of"
   72:             with pytest.raises(TypeError, match=msg):
   73:                 interval1 in interval2
