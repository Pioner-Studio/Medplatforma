    1: from datetime import datetime
    2: 
    3: from dateutil.tz import gettz
    4: import numpy as np
    5: import pytest
    6: import pytz
    7: 
    8: from pandas._libs.tslibs import (
    9:     OutOfBoundsDatetime,
   10:     Timestamp,
   11:     conversion,
   12: )
   13: from pandas._libs.tslibs.dtypes import NpyDatetimeUnit
   14: import pandas.util._test_decorators as td
   15: 
   16: import pandas._testing as tm
   17: 
   18: 
   19: class TestTimestampReplace:
   20:     def test_replace_out_of_pydatetime_bounds(self):
   21:         # GH#50348
   22:         ts = Timestamp("2016-01-01").as_unit("ns")
   23: 
   24:         msg = "Out of bounds timestamp: 99999-01-01 00:00:00 with frequency 'ns'"
   25:         with pytest.raises(OutOfBoundsDatetime, match=msg):
   26:             ts.replace(year=99_999)
   27: 
   28:         ts = ts.as_unit("ms")
   29:         result = ts.replace(year=99_999)
   30:         assert result.year == 99_999
   31:         assert result._value == Timestamp(np.datetime64("99999-01-01", "ms"))._value
   32: 
   33:     def test_replace_non_nano(self):
   34:         ts = Timestamp._from_value_and_reso(
   35:             91514880000000000, NpyDatetimeUnit.NPY_FR_us.value, None
   36:         )
   37:         assert ts.to_pydatetime() == datetime(4869, 12, 28)
   38: 
   39:         result = ts.replace(year=4900)
   40:         assert result._creso == ts._creso
   41:         assert result.to_pydatetime() == datetime(4900, 12, 28)
   42: 
   43:     def test_replace_naive(self):
   44:         # GH#14621, GH#7825
   45:         ts = Timestamp("2016-01-01 09:00:00")
   46:         result = ts.replace(hour=0)
   47:         expected = Timestamp("2016-01-01 00:00:00")
   48:         assert result == expected
   49: 
   50:     def test_replace_aware(self, tz_aware_fixture):
   51:         tz = tz_aware_fixture
   52:         # GH#14621, GH#7825
   53:         # replacing datetime components with and w/o presence of a timezone
   54:         ts = Timestamp("2016-01-01 09:00:00", tz=tz)
   55:         result = ts.replace(hour=0)
   56:         expected = Timestamp("2016-01-01 00:00:00", tz=tz)
   57:         assert result == expected
   58: 
   59:     def test_replace_preserves_nanos(self, tz_aware_fixture):
   60:         tz = tz_aware_fixture
   61:         # GH#14621, GH#7825
   62:         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
   63:         result = ts.replace(hour=0)
   64:         expected = Timestamp("2016-01-01 00:00:00.000000123", tz=tz)
   65:         assert result == expected
   66: 
   67:     def test_replace_multiple(self, tz_aware_fixture):
   68:         tz = tz_aware_fixture
   69:         # GH#14621, GH#7825
   70:         # replacing datetime components with and w/o presence of a timezone
   71:         # test all
   72:         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
   73:         result = ts.replace(
   74:             year=2015,
   75:             month=2,
   76:             day=2,
   77:             hour=0,
   78:             minute=5,
   79:             second=5,
   80:             microsecond=5,
   81:             nanosecond=5,
   82:         )
   83:         expected = Timestamp("2015-02-02 00:05:05.000005005", tz=tz)
   84:         assert result == expected
   85: 
   86:     def test_replace_invalid_kwarg(self, tz_aware_fixture):
   87:         tz = tz_aware_fixture
   88:         # GH#14621, GH#7825
   89:         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
   90:         msg = r"replace\(\) got an unexpected keyword argument"
   91:         with pytest.raises(TypeError, match=msg):
   92:             ts.replace(foo=5)
   93: 
   94:     def test_replace_integer_args(self, tz_aware_fixture):
   95:         tz = tz_aware_fixture
   96:         # GH#14621, GH#7825
   97:         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
   98:         msg = "value must be an integer, received <class 'float'> for hour"
   99:         with pytest.raises(ValueError, match=msg):
  100:             ts.replace(hour=0.1)
  101: 
  102:     def test_replace_tzinfo_equiv_tz_localize_none(self):
  103:         # GH#14621, GH#7825
  104:         # assert conversion to naive is the same as replacing tzinfo with None
  105:         ts = Timestamp("2013-11-03 01:59:59.999999-0400", tz="US/Eastern")
  106:         assert ts.tz_localize(None) == ts.replace(tzinfo=None)
  107: 
  108:     @td.skip_if_windows
  109:     def test_replace_tzinfo(self):
  110:         # GH#15683
  111:         dt = datetime(2016, 3, 27, 1)
  112:         tzinfo = pytz.timezone("CET").localize(dt, is_dst=False).tzinfo
  113: 
  114:         result_dt = dt.replace(tzinfo=tzinfo)
  115:         result_pd = Timestamp(dt).replace(tzinfo=tzinfo)
  116: 
  117:         # datetime.timestamp() converts in the local timezone
  118:         with tm.set_timezone("UTC"):
  119:             assert result_dt.timestamp() == result_pd.timestamp()
  120: 
  121:         assert result_dt == result_pd
  122:         assert result_dt == result_pd.to_pydatetime()
  123: 
  124:         result_dt = dt.replace(tzinfo=tzinfo).replace(tzinfo=None)
  125:         result_pd = Timestamp(dt).replace(tzinfo=tzinfo).replace(tzinfo=None)
  126: 
  127:         # datetime.timestamp() converts in the local timezone
  128:         with tm.set_timezone("UTC"):
  129:             assert result_dt.timestamp() == result_pd.timestamp()
  130: 
  131:         assert result_dt == result_pd
  132:         assert result_dt == result_pd.to_pydatetime()
  133: 
  134:     @pytest.mark.parametrize(
  135:         "tz, normalize",
  136:         [
  137:             (pytz.timezone("US/Eastern"), lambda x: x.tzinfo.normalize(x)),
  138:             (gettz("US/Eastern"), lambda x: x),
  139:         ],
  140:     )
  141:     def test_replace_across_dst(self, tz, normalize):
  142:         # GH#18319 check that 1) timezone is correctly normalized and
  143:         # 2) that hour is not incorrectly changed by this normalization
  144:         ts_naive = Timestamp("2017-12-03 16:03:30")
  145:         ts_aware = conversion.localize_pydatetime(ts_naive, tz)
  146: 
  147:         # Preliminary sanity-check
  148:         assert ts_aware == normalize(ts_aware)
  149: 
  150:         # Replace across DST boundary
  151:         ts2 = ts_aware.replace(month=6)
  152: 
  153:         # Check that `replace` preserves hour literal
  154:         assert (ts2.hour, ts2.minute) == (ts_aware.hour, ts_aware.minute)
  155: 
  156:         # Check that post-replace object is appropriately normalized
  157:         ts2b = normalize(ts2)
  158:         assert ts2 == ts2b
  159: 
  160:     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
  161:     def test_replace_dst_border(self, unit):
  162:         # Gh 7825
  163:         t = Timestamp("2013-11-3", tz="America/Chicago").as_unit(unit)
  164:         result = t.replace(hour=3)
  165:         expected = Timestamp("2013-11-3 03:00:00", tz="America/Chicago")
  166:         assert result == expected
  167:         assert result._creso == getattr(NpyDatetimeUnit, f"NPY_FR_{unit}").value
  168: 
  169:     @pytest.mark.parametrize("fold", [0, 1])
  170:     @pytest.mark.parametrize("tz", ["dateutil/Europe/London", "Europe/London"])
  171:     @pytest.mark.parametrize("unit", ["ns", "us", "ms", "s"])
  172:     def test_replace_dst_fold(self, fold, tz, unit):
  173:         # GH 25017
  174:         d = datetime(2019, 10, 27, 2, 30)
  175:         ts = Timestamp(d, tz=tz).as_unit(unit)
  176:         result = ts.replace(hour=1, fold=fold)
  177:         expected = Timestamp(datetime(2019, 10, 27, 1, 30)).tz_localize(
  178:             tz, ambiguous=not fold
  179:         )
  180:         assert result == expected
  181:         assert result._creso == getattr(NpyDatetimeUnit, f"NPY_FR_{unit}").value
  182: 
  183:     @pytest.mark.parametrize("fold", [0, 1])
  184:     def test_replace_preserves_fold(self, fold):
  185:         # GH#37610. Check that replace preserves Timestamp fold property
  186:         tz = gettz("Europe/Moscow")
  187: 
  188:         ts = Timestamp(
  189:             year=2009, month=10, day=25, hour=2, minute=30, fold=fold, tzinfo=tz
  190:         )
  191:         ts_replaced = ts.replace(second=1)
  192: 
  193:         assert ts_replaced.fold == fold
