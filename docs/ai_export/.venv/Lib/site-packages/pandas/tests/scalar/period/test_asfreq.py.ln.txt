    1: import pytest
    2: 
    3: from pandas._libs.tslibs.period import INVALID_FREQ_ERR_MSG
    4: from pandas.errors import OutOfBoundsDatetime
    5: 
    6: from pandas import (
    7:     Period,
    8:     Timestamp,
    9:     offsets,
   10: )
   11: import pandas._testing as tm
   12: 
   13: bday_msg = "Period with BDay freq is deprecated"
   14: 
   15: 
   16: class TestFreqConversion:
   17:     """Test frequency conversion of date objects"""
   18: 
   19:     @pytest.mark.filterwarnings("ignore:Period with BDay:FutureWarning")
   20:     @pytest.mark.parametrize("freq", ["Y", "Q", "M", "W", "B", "D"])
   21:     def test_asfreq_near_zero(self, freq):
   22:         # GH#19643, GH#19650
   23:         per = Period("0001-01-01", freq=freq)
   24:         tup1 = (per.year, per.hour, per.day)
   25: 
   26:         prev = per - 1
   27:         assert prev.ordinal == per.ordinal - 1
   28:         tup2 = (prev.year, prev.month, prev.day)
   29:         assert tup2 < tup1
   30: 
   31:     def test_asfreq_near_zero_weekly(self):
   32:         # GH#19834
   33:         per1 = Period("0001-01-01", "D") + 6
   34:         per2 = Period("0001-01-01", "D") - 6
   35:         week1 = per1.asfreq("W")
   36:         week2 = per2.asfreq("W")
   37:         assert week1 != week2
   38:         assert week1.asfreq("D", "E") >= per1
   39:         assert week2.asfreq("D", "S") <= per2
   40: 
   41:     def test_to_timestamp_out_of_bounds(self):
   42:         # GH#19643, used to incorrectly give Timestamp in 1754
   43:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
   44:             per = Period("0001-01-01", freq="B")
   45:         msg = "Out of bounds nanosecond timestamp"
   46:         with pytest.raises(OutOfBoundsDatetime, match=msg):
   47:             with tm.assert_produces_warning(FutureWarning, match=bday_msg):
   48:                 per.to_timestamp()
   49: 
   50:     def test_asfreq_corner(self):
   51:         val = Period(freq="Y", year=2007)
   52:         result1 = val.asfreq("5min")
   53:         result2 = val.asfreq("min")
   54:         expected = Period("2007-12-31 23:59", freq="min")
   55:         assert result1.ordinal == expected.ordinal
   56:         assert result1.freqstr == "5min"
   57:         assert result2.ordinal == expected.ordinal
   58:         assert result2.freqstr == "min"
   59: 
   60:     def test_conv_annual(self):
   61:         # frequency conversion tests: from Annual Frequency
   62: 
   63:         ival_A = Period(freq="Y", year=2007)
   64: 
   65:         ival_AJAN = Period(freq="Y-JAN", year=2007)
   66:         ival_AJUN = Period(freq="Y-JUN", year=2007)
   67:         ival_ANOV = Period(freq="Y-NOV", year=2007)
   68: 
   69:         ival_A_to_Q_start = Period(freq="Q", year=2007, quarter=1)
   70:         ival_A_to_Q_end = Period(freq="Q", year=2007, quarter=4)
   71:         ival_A_to_M_start = Period(freq="M", year=2007, month=1)
   72:         ival_A_to_M_end = Period(freq="M", year=2007, month=12)
   73:         ival_A_to_W_start = Period(freq="W", year=2007, month=1, day=1)
   74:         ival_A_to_W_end = Period(freq="W", year=2007, month=12, day=31)
   75:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
   76:             ival_A_to_B_start = Period(freq="B", year=2007, month=1, day=1)
   77:             ival_A_to_B_end = Period(freq="B", year=2007, month=12, day=31)
   78:         ival_A_to_D_start = Period(freq="D", year=2007, month=1, day=1)
   79:         ival_A_to_D_end = Period(freq="D", year=2007, month=12, day=31)
   80:         ival_A_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
   81:         ival_A_to_H_end = Period(freq="h", year=2007, month=12, day=31, hour=23)
   82:         ival_A_to_T_start = Period(
   83:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
   84:         )
   85:         ival_A_to_T_end = Period(
   86:             freq="Min", year=2007, month=12, day=31, hour=23, minute=59
   87:         )
   88:         ival_A_to_S_start = Period(
   89:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
   90:         )
   91:         ival_A_to_S_end = Period(
   92:             freq="s", year=2007, month=12, day=31, hour=23, minute=59, second=59
   93:         )
   94: 
   95:         ival_AJAN_to_D_end = Period(freq="D", year=2007, month=1, day=31)
   96:         ival_AJAN_to_D_start = Period(freq="D", year=2006, month=2, day=1)
   97:         ival_AJUN_to_D_end = Period(freq="D", year=2007, month=6, day=30)
   98:         ival_AJUN_to_D_start = Period(freq="D", year=2006, month=7, day=1)
   99:         ival_ANOV_to_D_end = Period(freq="D", year=2007, month=11, day=30)
  100:         ival_ANOV_to_D_start = Period(freq="D", year=2006, month=12, day=1)
  101: 
  102:         assert ival_A.asfreq("Q", "s") == ival_A_to_Q_start
  103:         assert ival_A.asfreq("Q", "e") == ival_A_to_Q_end
  104:         assert ival_A.asfreq("M", "s") == ival_A_to_M_start
  105:         assert ival_A.asfreq("M", "E") == ival_A_to_M_end
  106:         assert ival_A.asfreq("W", "s") == ival_A_to_W_start
  107:         assert ival_A.asfreq("W", "E") == ival_A_to_W_end
  108:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  109:             assert ival_A.asfreq("B", "s") == ival_A_to_B_start
  110:             assert ival_A.asfreq("B", "E") == ival_A_to_B_end
  111:         assert ival_A.asfreq("D", "s") == ival_A_to_D_start
  112:         assert ival_A.asfreq("D", "E") == ival_A_to_D_end
  113:         msg = "'H' is deprecated and will be removed in a future version."
  114:         with tm.assert_produces_warning(FutureWarning, match=msg):
  115:             assert ival_A.asfreq("H", "s") == ival_A_to_H_start
  116:             assert ival_A.asfreq("H", "E") == ival_A_to_H_end
  117:         assert ival_A.asfreq("min", "s") == ival_A_to_T_start
  118:         assert ival_A.asfreq("min", "E") == ival_A_to_T_end
  119:         msg = "'T' is deprecated and will be removed in a future version."
  120:         with tm.assert_produces_warning(FutureWarning, match=msg):
  121:             assert ival_A.asfreq("T", "s") == ival_A_to_T_start
  122:             assert ival_A.asfreq("T", "E") == ival_A_to_T_end
  123:         msg = "'S' is deprecated and will be removed in a future version."
  124:         with tm.assert_produces_warning(FutureWarning, match=msg):
  125:             assert ival_A.asfreq("S", "S") == ival_A_to_S_start
  126:             assert ival_A.asfreq("S", "E") == ival_A_to_S_end
  127: 
  128:         assert ival_AJAN.asfreq("D", "s") == ival_AJAN_to_D_start
  129:         assert ival_AJAN.asfreq("D", "E") == ival_AJAN_to_D_end
  130: 
  131:         assert ival_AJUN.asfreq("D", "s") == ival_AJUN_to_D_start
  132:         assert ival_AJUN.asfreq("D", "E") == ival_AJUN_to_D_end
  133: 
  134:         assert ival_ANOV.asfreq("D", "s") == ival_ANOV_to_D_start
  135:         assert ival_ANOV.asfreq("D", "E") == ival_ANOV_to_D_end
  136: 
  137:         assert ival_A.asfreq("Y") == ival_A
  138: 
  139:     def test_conv_quarterly(self):
  140:         # frequency conversion tests: from Quarterly Frequency
  141: 
  142:         ival_Q = Period(freq="Q", year=2007, quarter=1)
  143:         ival_Q_end_of_year = Period(freq="Q", year=2007, quarter=4)
  144: 
  145:         ival_QEJAN = Period(freq="Q-JAN", year=2007, quarter=1)
  146:         ival_QEJUN = Period(freq="Q-JUN", year=2007, quarter=1)
  147: 
  148:         ival_Q_to_A = Period(freq="Y", year=2007)
  149:         ival_Q_to_M_start = Period(freq="M", year=2007, month=1)
  150:         ival_Q_to_M_end = Period(freq="M", year=2007, month=3)
  151:         ival_Q_to_W_start = Period(freq="W", year=2007, month=1, day=1)
  152:         ival_Q_to_W_end = Period(freq="W", year=2007, month=3, day=31)
  153:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  154:             ival_Q_to_B_start = Period(freq="B", year=2007, month=1, day=1)
  155:             ival_Q_to_B_end = Period(freq="B", year=2007, month=3, day=30)
  156:         ival_Q_to_D_start = Period(freq="D", year=2007, month=1, day=1)
  157:         ival_Q_to_D_end = Period(freq="D", year=2007, month=3, day=31)
  158:         ival_Q_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
  159:         ival_Q_to_H_end = Period(freq="h", year=2007, month=3, day=31, hour=23)
  160:         ival_Q_to_T_start = Period(
  161:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  162:         )
  163:         ival_Q_to_T_end = Period(
  164:             freq="Min", year=2007, month=3, day=31, hour=23, minute=59
  165:         )
  166:         ival_Q_to_S_start = Period(
  167:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  168:         )
  169:         ival_Q_to_S_end = Period(
  170:             freq="s", year=2007, month=3, day=31, hour=23, minute=59, second=59
  171:         )
  172: 
  173:         ival_QEJAN_to_D_start = Period(freq="D", year=2006, month=2, day=1)
  174:         ival_QEJAN_to_D_end = Period(freq="D", year=2006, month=4, day=30)
  175: 
  176:         ival_QEJUN_to_D_start = Period(freq="D", year=2006, month=7, day=1)
  177:         ival_QEJUN_to_D_end = Period(freq="D", year=2006, month=9, day=30)
  178: 
  179:         assert ival_Q.asfreq("Y") == ival_Q_to_A
  180:         assert ival_Q_end_of_year.asfreq("Y") == ival_Q_to_A
  181: 
  182:         assert ival_Q.asfreq("M", "s") == ival_Q_to_M_start
  183:         assert ival_Q.asfreq("M", "E") == ival_Q_to_M_end
  184:         assert ival_Q.asfreq("W", "s") == ival_Q_to_W_start
  185:         assert ival_Q.asfreq("W", "E") == ival_Q_to_W_end
  186:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  187:             assert ival_Q.asfreq("B", "s") == ival_Q_to_B_start
  188:             assert ival_Q.asfreq("B", "E") == ival_Q_to_B_end
  189:         assert ival_Q.asfreq("D", "s") == ival_Q_to_D_start
  190:         assert ival_Q.asfreq("D", "E") == ival_Q_to_D_end
  191:         assert ival_Q.asfreq("h", "s") == ival_Q_to_H_start
  192:         assert ival_Q.asfreq("h", "E") == ival_Q_to_H_end
  193:         assert ival_Q.asfreq("Min", "s") == ival_Q_to_T_start
  194:         assert ival_Q.asfreq("Min", "E") == ival_Q_to_T_end
  195:         assert ival_Q.asfreq("s", "s") == ival_Q_to_S_start
  196:         assert ival_Q.asfreq("s", "E") == ival_Q_to_S_end
  197: 
  198:         assert ival_QEJAN.asfreq("D", "s") == ival_QEJAN_to_D_start
  199:         assert ival_QEJAN.asfreq("D", "E") == ival_QEJAN_to_D_end
  200:         assert ival_QEJUN.asfreq("D", "s") == ival_QEJUN_to_D_start
  201:         assert ival_QEJUN.asfreq("D", "E") == ival_QEJUN_to_D_end
  202: 
  203:         assert ival_Q.asfreq("Q") == ival_Q
  204: 
  205:     def test_conv_monthly(self):
  206:         # frequency conversion tests: from Monthly Frequency
  207: 
  208:         ival_M = Period(freq="M", year=2007, month=1)
  209:         ival_M_end_of_year = Period(freq="M", year=2007, month=12)
  210:         ival_M_end_of_quarter = Period(freq="M", year=2007, month=3)
  211:         ival_M_to_A = Period(freq="Y", year=2007)
  212:         ival_M_to_Q = Period(freq="Q", year=2007, quarter=1)
  213:         ival_M_to_W_start = Period(freq="W", year=2007, month=1, day=1)
  214:         ival_M_to_W_end = Period(freq="W", year=2007, month=1, day=31)
  215:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  216:             ival_M_to_B_start = Period(freq="B", year=2007, month=1, day=1)
  217:             ival_M_to_B_end = Period(freq="B", year=2007, month=1, day=31)
  218:         ival_M_to_D_start = Period(freq="D", year=2007, month=1, day=1)
  219:         ival_M_to_D_end = Period(freq="D", year=2007, month=1, day=31)
  220:         ival_M_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
  221:         ival_M_to_H_end = Period(freq="h", year=2007, month=1, day=31, hour=23)
  222:         ival_M_to_T_start = Period(
  223:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  224:         )
  225:         ival_M_to_T_end = Period(
  226:             freq="Min", year=2007, month=1, day=31, hour=23, minute=59
  227:         )
  228:         ival_M_to_S_start = Period(
  229:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  230:         )
  231:         ival_M_to_S_end = Period(
  232:             freq="s", year=2007, month=1, day=31, hour=23, minute=59, second=59
  233:         )
  234: 
  235:         assert ival_M.asfreq("Y") == ival_M_to_A
  236:         assert ival_M_end_of_year.asfreq("Y") == ival_M_to_A
  237:         assert ival_M.asfreq("Q") == ival_M_to_Q
  238:         assert ival_M_end_of_quarter.asfreq("Q") == ival_M_to_Q
  239: 
  240:         assert ival_M.asfreq("W", "s") == ival_M_to_W_start
  241:         assert ival_M.asfreq("W", "E") == ival_M_to_W_end
  242:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  243:             assert ival_M.asfreq("B", "s") == ival_M_to_B_start
  244:             assert ival_M.asfreq("B", "E") == ival_M_to_B_end
  245:         assert ival_M.asfreq("D", "s") == ival_M_to_D_start
  246:         assert ival_M.asfreq("D", "E") == ival_M_to_D_end
  247:         assert ival_M.asfreq("h", "s") == ival_M_to_H_start
  248:         assert ival_M.asfreq("h", "E") == ival_M_to_H_end
  249:         assert ival_M.asfreq("Min", "s") == ival_M_to_T_start
  250:         assert ival_M.asfreq("Min", "E") == ival_M_to_T_end
  251:         assert ival_M.asfreq("s", "s") == ival_M_to_S_start
  252:         assert ival_M.asfreq("s", "E") == ival_M_to_S_end
  253: 
  254:         assert ival_M.asfreq("M") == ival_M
  255: 
  256:     def test_conv_weekly(self):
  257:         # frequency conversion tests: from Weekly Frequency
  258:         ival_W = Period(freq="W", year=2007, month=1, day=1)
  259: 
  260:         ival_WSUN = Period(freq="W", year=2007, month=1, day=7)
  261:         ival_WSAT = Period(freq="W-SAT", year=2007, month=1, day=6)
  262:         ival_WFRI = Period(freq="W-FRI", year=2007, month=1, day=5)
  263:         ival_WTHU = Period(freq="W-THU", year=2007, month=1, day=4)
  264:         ival_WWED = Period(freq="W-WED", year=2007, month=1, day=3)
  265:         ival_WTUE = Period(freq="W-TUE", year=2007, month=1, day=2)
  266:         ival_WMON = Period(freq="W-MON", year=2007, month=1, day=1)
  267: 
  268:         ival_WSUN_to_D_start = Period(freq="D", year=2007, month=1, day=1)
  269:         ival_WSUN_to_D_end = Period(freq="D", year=2007, month=1, day=7)
  270:         ival_WSAT_to_D_start = Period(freq="D", year=2006, month=12, day=31)
  271:         ival_WSAT_to_D_end = Period(freq="D", year=2007, month=1, day=6)
  272:         ival_WFRI_to_D_start = Period(freq="D", year=2006, month=12, day=30)
  273:         ival_WFRI_to_D_end = Period(freq="D", year=2007, month=1, day=5)
  274:         ival_WTHU_to_D_start = Period(freq="D", year=2006, month=12, day=29)
  275:         ival_WTHU_to_D_end = Period(freq="D", year=2007, month=1, day=4)
  276:         ival_WWED_to_D_start = Period(freq="D", year=2006, month=12, day=28)
  277:         ival_WWED_to_D_end = Period(freq="D", year=2007, month=1, day=3)
  278:         ival_WTUE_to_D_start = Period(freq="D", year=2006, month=12, day=27)
  279:         ival_WTUE_to_D_end = Period(freq="D", year=2007, month=1, day=2)
  280:         ival_WMON_to_D_start = Period(freq="D", year=2006, month=12, day=26)
  281:         ival_WMON_to_D_end = Period(freq="D", year=2007, month=1, day=1)
  282: 
  283:         ival_W_end_of_year = Period(freq="W", year=2007, month=12, day=31)
  284:         ival_W_end_of_quarter = Period(freq="W", year=2007, month=3, day=31)
  285:         ival_W_end_of_month = Period(freq="W", year=2007, month=1, day=31)
  286:         ival_W_to_A = Period(freq="Y", year=2007)
  287:         ival_W_to_Q = Period(freq="Q", year=2007, quarter=1)
  288:         ival_W_to_M = Period(freq="M", year=2007, month=1)
  289: 
  290:         if Period(freq="D", year=2007, month=12, day=31).weekday == 6:
  291:             ival_W_to_A_end_of_year = Period(freq="Y", year=2007)
  292:         else:
  293:             ival_W_to_A_end_of_year = Period(freq="Y", year=2008)
  294: 
  295:         if Period(freq="D", year=2007, month=3, day=31).weekday == 6:
  296:             ival_W_to_Q_end_of_quarter = Period(freq="Q", year=2007, quarter=1)
  297:         else:
  298:             ival_W_to_Q_end_of_quarter = Period(freq="Q", year=2007, quarter=2)
  299: 
  300:         if Period(freq="D", year=2007, month=1, day=31).weekday == 6:
  301:             ival_W_to_M_end_of_month = Period(freq="M", year=2007, month=1)
  302:         else:
  303:             ival_W_to_M_end_of_month = Period(freq="M", year=2007, month=2)
  304: 
  305:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  306:             ival_W_to_B_start = Period(freq="B", year=2007, month=1, day=1)
  307:             ival_W_to_B_end = Period(freq="B", year=2007, month=1, day=5)
  308:         ival_W_to_D_start = Period(freq="D", year=2007, month=1, day=1)
  309:         ival_W_to_D_end = Period(freq="D", year=2007, month=1, day=7)
  310:         ival_W_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
  311:         ival_W_to_H_end = Period(freq="h", year=2007, month=1, day=7, hour=23)
  312:         ival_W_to_T_start = Period(
  313:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  314:         )
  315:         ival_W_to_T_end = Period(
  316:             freq="Min", year=2007, month=1, day=7, hour=23, minute=59
  317:         )
  318:         ival_W_to_S_start = Period(
  319:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  320:         )
  321:         ival_W_to_S_end = Period(
  322:             freq="s", year=2007, month=1, day=7, hour=23, minute=59, second=59
  323:         )
  324: 
  325:         assert ival_W.asfreq("Y") == ival_W_to_A
  326:         assert ival_W_end_of_year.asfreq("Y") == ival_W_to_A_end_of_year
  327: 
  328:         assert ival_W.asfreq("Q") == ival_W_to_Q
  329:         assert ival_W_end_of_quarter.asfreq("Q") == ival_W_to_Q_end_of_quarter
  330: 
  331:         assert ival_W.asfreq("M") == ival_W_to_M
  332:         assert ival_W_end_of_month.asfreq("M") == ival_W_to_M_end_of_month
  333: 
  334:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  335:             assert ival_W.asfreq("B", "s") == ival_W_to_B_start
  336:             assert ival_W.asfreq("B", "E") == ival_W_to_B_end
  337: 
  338:         assert ival_W.asfreq("D", "s") == ival_W_to_D_start
  339:         assert ival_W.asfreq("D", "E") == ival_W_to_D_end
  340: 
  341:         assert ival_WSUN.asfreq("D", "s") == ival_WSUN_to_D_start
  342:         assert ival_WSUN.asfreq("D", "E") == ival_WSUN_to_D_end
  343:         assert ival_WSAT.asfreq("D", "s") == ival_WSAT_to_D_start
  344:         assert ival_WSAT.asfreq("D", "E") == ival_WSAT_to_D_end
  345:         assert ival_WFRI.asfreq("D", "s") == ival_WFRI_to_D_start
  346:         assert ival_WFRI.asfreq("D", "E") == ival_WFRI_to_D_end
  347:         assert ival_WTHU.asfreq("D", "s") == ival_WTHU_to_D_start
  348:         assert ival_WTHU.asfreq("D", "E") == ival_WTHU_to_D_end
  349:         assert ival_WWED.asfreq("D", "s") == ival_WWED_to_D_start
  350:         assert ival_WWED.asfreq("D", "E") == ival_WWED_to_D_end
  351:         assert ival_WTUE.asfreq("D", "s") == ival_WTUE_to_D_start
  352:         assert ival_WTUE.asfreq("D", "E") == ival_WTUE_to_D_end
  353:         assert ival_WMON.asfreq("D", "s") == ival_WMON_to_D_start
  354:         assert ival_WMON.asfreq("D", "E") == ival_WMON_to_D_end
  355: 
  356:         assert ival_W.asfreq("h", "s") == ival_W_to_H_start
  357:         assert ival_W.asfreq("h", "E") == ival_W_to_H_end
  358:         assert ival_W.asfreq("Min", "s") == ival_W_to_T_start
  359:         assert ival_W.asfreq("Min", "E") == ival_W_to_T_end
  360:         assert ival_W.asfreq("s", "s") == ival_W_to_S_start
  361:         assert ival_W.asfreq("s", "E") == ival_W_to_S_end
  362: 
  363:         assert ival_W.asfreq("W") == ival_W
  364: 
  365:         msg = INVALID_FREQ_ERR_MSG
  366:         with pytest.raises(ValueError, match=msg):
  367:             ival_W.asfreq("WK")
  368: 
  369:     def test_conv_weekly_legacy(self):
  370:         # frequency conversion tests: from Weekly Frequency
  371:         msg = INVALID_FREQ_ERR_MSG
  372:         with pytest.raises(ValueError, match=msg):
  373:             Period(freq="WK", year=2007, month=1, day=1)
  374: 
  375:         with pytest.raises(ValueError, match=msg):
  376:             Period(freq="WK-SAT", year=2007, month=1, day=6)
  377:         with pytest.raises(ValueError, match=msg):
  378:             Period(freq="WK-FRI", year=2007, month=1, day=5)
  379:         with pytest.raises(ValueError, match=msg):
  380:             Period(freq="WK-THU", year=2007, month=1, day=4)
  381:         with pytest.raises(ValueError, match=msg):
  382:             Period(freq="WK-WED", year=2007, month=1, day=3)
  383:         with pytest.raises(ValueError, match=msg):
  384:             Period(freq="WK-TUE", year=2007, month=1, day=2)
  385:         with pytest.raises(ValueError, match=msg):
  386:             Period(freq="WK-MON", year=2007, month=1, day=1)
  387: 
  388:     def test_conv_business(self):
  389:         # frequency conversion tests: from Business Frequency"
  390: 
  391:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  392:             ival_B = Period(freq="B", year=2007, month=1, day=1)
  393:             ival_B_end_of_year = Period(freq="B", year=2007, month=12, day=31)
  394:             ival_B_end_of_quarter = Period(freq="B", year=2007, month=3, day=30)
  395:             ival_B_end_of_month = Period(freq="B", year=2007, month=1, day=31)
  396:             ival_B_end_of_week = Period(freq="B", year=2007, month=1, day=5)
  397: 
  398:         ival_B_to_A = Period(freq="Y", year=2007)
  399:         ival_B_to_Q = Period(freq="Q", year=2007, quarter=1)
  400:         ival_B_to_M = Period(freq="M", year=2007, month=1)
  401:         ival_B_to_W = Period(freq="W", year=2007, month=1, day=7)
  402:         ival_B_to_D = Period(freq="D", year=2007, month=1, day=1)
  403:         ival_B_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
  404:         ival_B_to_H_end = Period(freq="h", year=2007, month=1, day=1, hour=23)
  405:         ival_B_to_T_start = Period(
  406:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  407:         )
  408:         ival_B_to_T_end = Period(
  409:             freq="Min", year=2007, month=1, day=1, hour=23, minute=59
  410:         )
  411:         ival_B_to_S_start = Period(
  412:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  413:         )
  414:         ival_B_to_S_end = Period(
  415:             freq="s", year=2007, month=1, day=1, hour=23, minute=59, second=59
  416:         )
  417: 
  418:         assert ival_B.asfreq("Y") == ival_B_to_A
  419:         assert ival_B_end_of_year.asfreq("Y") == ival_B_to_A
  420:         assert ival_B.asfreq("Q") == ival_B_to_Q
  421:         assert ival_B_end_of_quarter.asfreq("Q") == ival_B_to_Q
  422:         assert ival_B.asfreq("M") == ival_B_to_M
  423:         assert ival_B_end_of_month.asfreq("M") == ival_B_to_M
  424:         assert ival_B.asfreq("W") == ival_B_to_W
  425:         assert ival_B_end_of_week.asfreq("W") == ival_B_to_W
  426: 
  427:         assert ival_B.asfreq("D") == ival_B_to_D
  428: 
  429:         assert ival_B.asfreq("h", "s") == ival_B_to_H_start
  430:         assert ival_B.asfreq("h", "E") == ival_B_to_H_end
  431:         assert ival_B.asfreq("Min", "s") == ival_B_to_T_start
  432:         assert ival_B.asfreq("Min", "E") == ival_B_to_T_end
  433:         assert ival_B.asfreq("s", "s") == ival_B_to_S_start
  434:         assert ival_B.asfreq("s", "E") == ival_B_to_S_end
  435: 
  436:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  437:             assert ival_B.asfreq("B") == ival_B
  438: 
  439:     def test_conv_daily(self):
  440:         # frequency conversion tests: from Business Frequency"
  441: 
  442:         ival_D = Period(freq="D", year=2007, month=1, day=1)
  443:         ival_D_end_of_year = Period(freq="D", year=2007, month=12, day=31)
  444:         ival_D_end_of_quarter = Period(freq="D", year=2007, month=3, day=31)
  445:         ival_D_end_of_month = Period(freq="D", year=2007, month=1, day=31)
  446:         ival_D_end_of_week = Period(freq="D", year=2007, month=1, day=7)
  447: 
  448:         ival_D_friday = Period(freq="D", year=2007, month=1, day=5)
  449:         ival_D_saturday = Period(freq="D", year=2007, month=1, day=6)
  450:         ival_D_sunday = Period(freq="D", year=2007, month=1, day=7)
  451: 
  452:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  453:             ival_B_friday = Period(freq="B", year=2007, month=1, day=5)
  454:             ival_B_monday = Period(freq="B", year=2007, month=1, day=8)
  455: 
  456:         ival_D_to_A = Period(freq="Y", year=2007)
  457: 
  458:         ival_Deoq_to_AJAN = Period(freq="Y-JAN", year=2008)
  459:         ival_Deoq_to_AJUN = Period(freq="Y-JUN", year=2007)
  460:         ival_Deoq_to_ADEC = Period(freq="Y-DEC", year=2007)
  461: 
  462:         ival_D_to_QEJAN = Period(freq="Q-JAN", year=2007, quarter=4)
  463:         ival_D_to_QEJUN = Period(freq="Q-JUN", year=2007, quarter=3)
  464:         ival_D_to_QEDEC = Period(freq="Q-DEC", year=2007, quarter=1)
  465: 
  466:         ival_D_to_M = Period(freq="M", year=2007, month=1)
  467:         ival_D_to_W = Period(freq="W", year=2007, month=1, day=7)
  468: 
  469:         ival_D_to_H_start = Period(freq="h", year=2007, month=1, day=1, hour=0)
  470:         ival_D_to_H_end = Period(freq="h", year=2007, month=1, day=1, hour=23)
  471:         ival_D_to_T_start = Period(
  472:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  473:         )
  474:         ival_D_to_T_end = Period(
  475:             freq="Min", year=2007, month=1, day=1, hour=23, minute=59
  476:         )
  477:         ival_D_to_S_start = Period(
  478:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  479:         )
  480:         ival_D_to_S_end = Period(
  481:             freq="s", year=2007, month=1, day=1, hour=23, minute=59, second=59
  482:         )
  483: 
  484:         assert ival_D.asfreq("Y") == ival_D_to_A
  485: 
  486:         assert ival_D_end_of_quarter.asfreq("Y-JAN") == ival_Deoq_to_AJAN
  487:         assert ival_D_end_of_quarter.asfreq("Y-JUN") == ival_Deoq_to_AJUN
  488:         assert ival_D_end_of_quarter.asfreq("Y-DEC") == ival_Deoq_to_ADEC
  489: 
  490:         assert ival_D_end_of_year.asfreq("Y") == ival_D_to_A
  491:         assert ival_D_end_of_quarter.asfreq("Q") == ival_D_to_QEDEC
  492:         assert ival_D.asfreq("Q-JAN") == ival_D_to_QEJAN
  493:         assert ival_D.asfreq("Q-JUN") == ival_D_to_QEJUN
  494:         assert ival_D.asfreq("Q-DEC") == ival_D_to_QEDEC
  495:         assert ival_D.asfreq("M") == ival_D_to_M
  496:         assert ival_D_end_of_month.asfreq("M") == ival_D_to_M
  497:         assert ival_D.asfreq("W") == ival_D_to_W
  498:         assert ival_D_end_of_week.asfreq("W") == ival_D_to_W
  499: 
  500:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  501:             assert ival_D_friday.asfreq("B") == ival_B_friday
  502:             assert ival_D_saturday.asfreq("B", "s") == ival_B_friday
  503:             assert ival_D_saturday.asfreq("B", "E") == ival_B_monday
  504:             assert ival_D_sunday.asfreq("B", "s") == ival_B_friday
  505:             assert ival_D_sunday.asfreq("B", "E") == ival_B_monday
  506: 
  507:         assert ival_D.asfreq("h", "s") == ival_D_to_H_start
  508:         assert ival_D.asfreq("h", "E") == ival_D_to_H_end
  509:         assert ival_D.asfreq("Min", "s") == ival_D_to_T_start
  510:         assert ival_D.asfreq("Min", "E") == ival_D_to_T_end
  511:         assert ival_D.asfreq("s", "s") == ival_D_to_S_start
  512:         assert ival_D.asfreq("s", "E") == ival_D_to_S_end
  513: 
  514:         assert ival_D.asfreq("D") == ival_D
  515: 
  516:     def test_conv_hourly(self):
  517:         # frequency conversion tests: from Hourly Frequency"
  518: 
  519:         ival_H = Period(freq="h", year=2007, month=1, day=1, hour=0)
  520:         ival_H_end_of_year = Period(freq="h", year=2007, month=12, day=31, hour=23)
  521:         ival_H_end_of_quarter = Period(freq="h", year=2007, month=3, day=31, hour=23)
  522:         ival_H_end_of_month = Period(freq="h", year=2007, month=1, day=31, hour=23)
  523:         ival_H_end_of_week = Period(freq="h", year=2007, month=1, day=7, hour=23)
  524:         ival_H_end_of_day = Period(freq="h", year=2007, month=1, day=1, hour=23)
  525:         ival_H_end_of_bus = Period(freq="h", year=2007, month=1, day=1, hour=23)
  526: 
  527:         ival_H_to_A = Period(freq="Y", year=2007)
  528:         ival_H_to_Q = Period(freq="Q", year=2007, quarter=1)
  529:         ival_H_to_M = Period(freq="M", year=2007, month=1)
  530:         ival_H_to_W = Period(freq="W", year=2007, month=1, day=7)
  531:         ival_H_to_D = Period(freq="D", year=2007, month=1, day=1)
  532:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  533:             ival_H_to_B = Period(freq="B", year=2007, month=1, day=1)
  534: 
  535:         ival_H_to_T_start = Period(
  536:             freq="Min", year=2007, month=1, day=1, hour=0, minute=0
  537:         )
  538:         ival_H_to_T_end = Period(
  539:             freq="Min", year=2007, month=1, day=1, hour=0, minute=59
  540:         )
  541:         ival_H_to_S_start = Period(
  542:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  543:         )
  544:         ival_H_to_S_end = Period(
  545:             freq="s", year=2007, month=1, day=1, hour=0, minute=59, second=59
  546:         )
  547: 
  548:         assert ival_H.asfreq("Y") == ival_H_to_A
  549:         assert ival_H_end_of_year.asfreq("Y") == ival_H_to_A
  550:         assert ival_H.asfreq("Q") == ival_H_to_Q
  551:         assert ival_H_end_of_quarter.asfreq("Q") == ival_H_to_Q
  552:         assert ival_H.asfreq("M") == ival_H_to_M
  553:         assert ival_H_end_of_month.asfreq("M") == ival_H_to_M
  554:         assert ival_H.asfreq("W") == ival_H_to_W
  555:         assert ival_H_end_of_week.asfreq("W") == ival_H_to_W
  556:         assert ival_H.asfreq("D") == ival_H_to_D
  557:         assert ival_H_end_of_day.asfreq("D") == ival_H_to_D
  558:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  559:             assert ival_H.asfreq("B") == ival_H_to_B
  560:             assert ival_H_end_of_bus.asfreq("B") == ival_H_to_B
  561: 
  562:         assert ival_H.asfreq("Min", "s") == ival_H_to_T_start
  563:         assert ival_H.asfreq("Min", "E") == ival_H_to_T_end
  564:         assert ival_H.asfreq("s", "s") == ival_H_to_S_start
  565:         assert ival_H.asfreq("s", "E") == ival_H_to_S_end
  566: 
  567:         assert ival_H.asfreq("h") == ival_H
  568: 
  569:     def test_conv_minutely(self):
  570:         # frequency conversion tests: from Minutely Frequency"
  571: 
  572:         ival_T = Period(freq="Min", year=2007, month=1, day=1, hour=0, minute=0)
  573:         ival_T_end_of_year = Period(
  574:             freq="Min", year=2007, month=12, day=31, hour=23, minute=59
  575:         )
  576:         ival_T_end_of_quarter = Period(
  577:             freq="Min", year=2007, month=3, day=31, hour=23, minute=59
  578:         )
  579:         ival_T_end_of_month = Period(
  580:             freq="Min", year=2007, month=1, day=31, hour=23, minute=59
  581:         )
  582:         ival_T_end_of_week = Period(
  583:             freq="Min", year=2007, month=1, day=7, hour=23, minute=59
  584:         )
  585:         ival_T_end_of_day = Period(
  586:             freq="Min", year=2007, month=1, day=1, hour=23, minute=59
  587:         )
  588:         ival_T_end_of_bus = Period(
  589:             freq="Min", year=2007, month=1, day=1, hour=23, minute=59
  590:         )
  591:         ival_T_end_of_hour = Period(
  592:             freq="Min", year=2007, month=1, day=1, hour=0, minute=59
  593:         )
  594: 
  595:         ival_T_to_A = Period(freq="Y", year=2007)
  596:         ival_T_to_Q = Period(freq="Q", year=2007, quarter=1)
  597:         ival_T_to_M = Period(freq="M", year=2007, month=1)
  598:         ival_T_to_W = Period(freq="W", year=2007, month=1, day=7)
  599:         ival_T_to_D = Period(freq="D", year=2007, month=1, day=1)
  600:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  601:             ival_T_to_B = Period(freq="B", year=2007, month=1, day=1)
  602:         ival_T_to_H = Period(freq="h", year=2007, month=1, day=1, hour=0)
  603: 
  604:         ival_T_to_S_start = Period(
  605:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0
  606:         )
  607:         ival_T_to_S_end = Period(
  608:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=59
  609:         )
  610: 
  611:         assert ival_T.asfreq("Y") == ival_T_to_A
  612:         assert ival_T_end_of_year.asfreq("Y") == ival_T_to_A
  613:         assert ival_T.asfreq("Q") == ival_T_to_Q
  614:         assert ival_T_end_of_quarter.asfreq("Q") == ival_T_to_Q
  615:         assert ival_T.asfreq("M") == ival_T_to_M
  616:         assert ival_T_end_of_month.asfreq("M") == ival_T_to_M
  617:         assert ival_T.asfreq("W") == ival_T_to_W
  618:         assert ival_T_end_of_week.asfreq("W") == ival_T_to_W
  619:         assert ival_T.asfreq("D") == ival_T_to_D
  620:         assert ival_T_end_of_day.asfreq("D") == ival_T_to_D
  621:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  622:             assert ival_T.asfreq("B") == ival_T_to_B
  623:             assert ival_T_end_of_bus.asfreq("B") == ival_T_to_B
  624:         assert ival_T.asfreq("h") == ival_T_to_H
  625:         assert ival_T_end_of_hour.asfreq("h") == ival_T_to_H
  626: 
  627:         assert ival_T.asfreq("s", "s") == ival_T_to_S_start
  628:         assert ival_T.asfreq("s", "E") == ival_T_to_S_end
  629: 
  630:         assert ival_T.asfreq("Min") == ival_T
  631: 
  632:     def test_conv_secondly(self):
  633:         # frequency conversion tests: from Secondly Frequency"
  634: 
  635:         ival_S = Period(freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=0)
  636:         ival_S_end_of_year = Period(
  637:             freq="s", year=2007, month=12, day=31, hour=23, minute=59, second=59
  638:         )
  639:         ival_S_end_of_quarter = Period(
  640:             freq="s", year=2007, month=3, day=31, hour=23, minute=59, second=59
  641:         )
  642:         ival_S_end_of_month = Period(
  643:             freq="s", year=2007, month=1, day=31, hour=23, minute=59, second=59
  644:         )
  645:         ival_S_end_of_week = Period(
  646:             freq="s", year=2007, month=1, day=7, hour=23, minute=59, second=59
  647:         )
  648:         ival_S_end_of_day = Period(
  649:             freq="s", year=2007, month=1, day=1, hour=23, minute=59, second=59
  650:         )
  651:         ival_S_end_of_bus = Period(
  652:             freq="s", year=2007, month=1, day=1, hour=23, minute=59, second=59
  653:         )
  654:         ival_S_end_of_hour = Period(
  655:             freq="s", year=2007, month=1, day=1, hour=0, minute=59, second=59
  656:         )
  657:         ival_S_end_of_minute = Period(
  658:             freq="s", year=2007, month=1, day=1, hour=0, minute=0, second=59
  659:         )
  660: 
  661:         ival_S_to_A = Period(freq="Y", year=2007)
  662:         ival_S_to_Q = Period(freq="Q", year=2007, quarter=1)
  663:         ival_S_to_M = Period(freq="M", year=2007, month=1)
  664:         ival_S_to_W = Period(freq="W", year=2007, month=1, day=7)
  665:         ival_S_to_D = Period(freq="D", year=2007, month=1, day=1)
  666:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  667:             ival_S_to_B = Period(freq="B", year=2007, month=1, day=1)
  668:         ival_S_to_H = Period(freq="h", year=2007, month=1, day=1, hour=0)
  669:         ival_S_to_T = Period(freq="Min", year=2007, month=1, day=1, hour=0, minute=0)
  670: 
  671:         assert ival_S.asfreq("Y") == ival_S_to_A
  672:         assert ival_S_end_of_year.asfreq("Y") == ival_S_to_A
  673:         assert ival_S.asfreq("Q") == ival_S_to_Q
  674:         assert ival_S_end_of_quarter.asfreq("Q") == ival_S_to_Q
  675:         assert ival_S.asfreq("M") == ival_S_to_M
  676:         assert ival_S_end_of_month.asfreq("M") == ival_S_to_M
  677:         assert ival_S.asfreq("W") == ival_S_to_W
  678:         assert ival_S_end_of_week.asfreq("W") == ival_S_to_W
  679:         assert ival_S.asfreq("D") == ival_S_to_D
  680:         assert ival_S_end_of_day.asfreq("D") == ival_S_to_D
  681:         with tm.assert_produces_warning(FutureWarning, match=bday_msg):
  682:             assert ival_S.asfreq("B") == ival_S_to_B
  683:             assert ival_S_end_of_bus.asfreq("B") == ival_S_to_B
  684:         assert ival_S.asfreq("h") == ival_S_to_H
  685:         assert ival_S_end_of_hour.asfreq("h") == ival_S_to_H
  686:         assert ival_S.asfreq("Min") == ival_S_to_T
  687:         assert ival_S_end_of_minute.asfreq("Min") == ival_S_to_T
  688: 
  689:         assert ival_S.asfreq("s") == ival_S
  690: 
  691:     def test_conv_microsecond(self):
  692:         # GH#31475 Avoid floating point errors dropping the start_time to
  693:         #  before the beginning of the Period
  694:         per = Period("2020-01-30 15:57:27.576166", freq="us")
  695:         assert per.ordinal == 1580399847576166
  696: 
  697:         start = per.start_time
  698:         expected = Timestamp("2020-01-30 15:57:27.576166")
  699:         assert start == expected
  700:         assert start._value == per.ordinal * 1000
  701: 
  702:         per2 = Period("2300-01-01", "us")
  703:         msg = "2300-01-01"
  704:         with pytest.raises(OutOfBoundsDatetime, match=msg):
  705:             per2.start_time
  706:         with pytest.raises(OutOfBoundsDatetime, match=msg):
  707:             per2.end_time
  708: 
  709:     def test_asfreq_mult(self):
  710:         # normal freq to mult freq
  711:         p = Period(freq="Y", year=2007)
  712:         # ordinal will not change
  713:         for freq in ["3Y", offsets.YearEnd(3)]:
  714:             result = p.asfreq(freq)
  715:             expected = Period("2007", freq="3Y")
  716: 
  717:             assert result == expected
  718:             assert result.ordinal == expected.ordinal
  719:             assert result.freq == expected.freq
  720:         # ordinal will not change
  721:         for freq in ["3Y", offsets.YearEnd(3)]:
  722:             result = p.asfreq(freq, how="S")
  723:             expected = Period("2007", freq="3Y")
  724: 
  725:             assert result == expected
  726:             assert result.ordinal == expected.ordinal
  727:             assert result.freq == expected.freq
  728: 
  729:         # mult freq to normal freq
  730:         p = Period(freq="3Y", year=2007)
  731:         # ordinal will change because how=E is the default
  732:         for freq in ["Y", offsets.YearEnd()]:
  733:             result = p.asfreq(freq)
  734:             expected = Period("2009", freq="Y")
  735: 
  736:             assert result == expected
  737:             assert result.ordinal == expected.ordinal
  738:             assert result.freq == expected.freq
  739:         # ordinal will not change
  740:         for freq in ["Y", offsets.YearEnd()]:
  741:             result = p.asfreq(freq, how="s")
  742:             expected = Period("2007", freq="Y")
  743: 
  744:             assert result == expected
  745:             assert result.ordinal == expected.ordinal
  746:             assert result.freq == expected.freq
  747: 
  748:         p = Period(freq="Y", year=2007)
  749:         for freq in ["2M", offsets.MonthEnd(2)]:
  750:             result = p.asfreq(freq)
  751:             expected = Period("2007-12", freq="2M")
  752: 
  753:             assert result == expected
  754:             assert result.ordinal == expected.ordinal
  755:             assert result.freq == expected.freq
  756:         for freq in ["2M", offsets.MonthEnd(2)]:
  757:             result = p.asfreq(freq, how="s")
  758:             expected = Period("2007-01", freq="2M")
  759: 
  760:             assert result == expected
  761:             assert result.ordinal == expected.ordinal
  762:             assert result.freq == expected.freq
  763: 
  764:         p = Period(freq="3Y", year=2007)
  765:         for freq in ["2M", offsets.MonthEnd(2)]:
  766:             result = p.asfreq(freq)
  767:             expected = Period("2009-12", freq="2M")
  768: 
  769:             assert result == expected
  770:             assert result.ordinal == expected.ordinal
  771:             assert result.freq == expected.freq
  772:         for freq in ["2M", offsets.MonthEnd(2)]:
  773:             result = p.asfreq(freq, how="s")
  774:             expected = Period("2007-01", freq="2M")
  775: 
  776:             assert result == expected
  777:             assert result.ordinal == expected.ordinal
  778:             assert result.freq == expected.freq
  779: 
  780:     def test_asfreq_combined(self):
  781:         # normal freq to combined freq
  782:         p = Period("2007", freq="h")
  783: 
  784:         # ordinal will not change
  785:         expected = Period("2007", freq="25h")
  786:         for freq, how in zip(["1D1h", "1h1D"], ["E", "S"]):
  787:             result = p.asfreq(freq, how=how)
  788:             assert result == expected
  789:             assert result.ordinal == expected.ordinal
  790:             assert result.freq == expected.freq
  791: 
  792:         # combined freq to normal freq
  793:         p1 = Period(freq="1D1h", year=2007)
  794:         p2 = Period(freq="1h1D", year=2007)
  795: 
  796:         # ordinal will change because how=E is the default
  797:         result1 = p1.asfreq("h")
  798:         result2 = p2.asfreq("h")
  799:         expected = Period("2007-01-02", freq="h")
  800:         assert result1 == expected
  801:         assert result1.ordinal == expected.ordinal
  802:         assert result1.freq == expected.freq
  803:         assert result2 == expected
  804:         assert result2.ordinal == expected.ordinal
  805:         assert result2.freq == expected.freq
  806: 
  807:         # ordinal will not change
  808:         result1 = p1.asfreq("h", how="S")
  809:         result2 = p2.asfreq("h", how="S")
  810:         expected = Period("2007-01-01", freq="h")
  811:         assert result1 == expected
  812:         assert result1.ordinal == expected.ordinal
  813:         assert result1.freq == expected.freq
  814:         assert result2 == expected
  815:         assert result2.ordinal == expected.ordinal
  816:         assert result2.freq == expected.freq
  817: 
  818:     def test_asfreq_MS(self):
  819:         initial = Period("2013")
  820: 
  821:         assert initial.asfreq(freq="M", how="S") == Period("2013-01", "M")
  822: 
  823:         msg = "MS is not supported as period frequency"
  824:         with pytest.raises(ValueError, match=msg):
  825:             initial.asfreq(freq="MS", how="S")
  826: 
  827:         with pytest.raises(ValueError, match=msg):
  828:             Period("2013-01", "MS")
