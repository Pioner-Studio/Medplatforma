    1: import dateutil
    2: import pytest
    3: 
    4: from pandas._libs.tslibs import timezones
    5: import pandas.util._test_decorators as td
    6: 
    7: from pandas import Timestamp
    8: 
    9: 
   10: class TestTimestampTZConvert:
   11:     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
   12:     def test_astimezone(self, tzstr):
   13:         # astimezone is an alias for tz_convert, so keep it with
   14:         # the tz_convert tests
   15:         utcdate = Timestamp("3/11/2012 22:00", tz="UTC")
   16:         expected = utcdate.tz_convert(tzstr)
   17:         result = utcdate.astimezone(tzstr)
   18:         assert expected == result
   19:         assert isinstance(result, Timestamp)
   20: 
   21:     @pytest.mark.parametrize(
   22:         "stamp",
   23:         [
   24:             "2014-02-01 09:00",
   25:             "2014-07-08 09:00",
   26:             "2014-11-01 17:00",
   27:             "2014-11-05 00:00",
   28:         ],
   29:     )
   30:     def test_tz_convert_roundtrip(self, stamp, tz_aware_fixture):
   31:         tz = tz_aware_fixture
   32: 
   33:         ts = Timestamp(stamp, tz="UTC")
   34:         converted = ts.tz_convert(tz)
   35: 
   36:         reset = converted.tz_convert(None)
   37:         assert reset == Timestamp(stamp)
   38:         assert reset.tzinfo is None
   39:         assert reset == converted.tz_convert("UTC").tz_localize(None)
   40: 
   41:     @td.skip_if_windows
   42:     def test_tz_convert_utc_with_system_utc(self):
   43:         # from system utc to real utc
   44:         ts = Timestamp("2001-01-05 11:56", tz=timezones.maybe_get_tz("dateutil/UTC"))
   45:         # check that the time hasn't changed.
   46:         assert ts == ts.tz_convert(dateutil.tz.tzutc())
   47: 
   48:         # from system utc to real utc
   49:         ts = Timestamp("2001-01-05 11:56", tz=timezones.maybe_get_tz("dateutil/UTC"))
   50:         # check that the time hasn't changed.
   51:         assert ts == ts.tz_convert(dateutil.tz.tzutc())
