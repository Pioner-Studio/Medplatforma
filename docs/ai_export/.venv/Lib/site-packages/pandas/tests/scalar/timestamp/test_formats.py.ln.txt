    1: from datetime import datetime
    2: import pprint
    3: 
    4: import dateutil.tz
    5: import pytest
    6: import pytz  # a test below uses pytz but only inside a `eval` call
    7: 
    8: from pandas import Timestamp
    9: 
   10: ts_no_ns = Timestamp(
   11:     year=2019,
   12:     month=5,
   13:     day=18,
   14:     hour=15,
   15:     minute=17,
   16:     second=8,
   17:     microsecond=132263,
   18: )
   19: ts_no_ns_year1 = Timestamp(
   20:     year=1,
   21:     month=5,
   22:     day=18,
   23:     hour=15,
   24:     minute=17,
   25:     second=8,
   26:     microsecond=132263,
   27: )
   28: ts_ns = Timestamp(
   29:     year=2019,
   30:     month=5,
   31:     day=18,
   32:     hour=15,
   33:     minute=17,
   34:     second=8,
   35:     microsecond=132263,
   36:     nanosecond=123,
   37: )
   38: ts_ns_tz = Timestamp(
   39:     year=2019,
   40:     month=5,
   41:     day=18,
   42:     hour=15,
   43:     minute=17,
   44:     second=8,
   45:     microsecond=132263,
   46:     nanosecond=123,
   47:     tz="UTC",
   48: )
   49: ts_no_us = Timestamp(
   50:     year=2019,
   51:     month=5,
   52:     day=18,
   53:     hour=15,
   54:     minute=17,
   55:     second=8,
   56:     microsecond=0,
   57:     nanosecond=123,
   58: )
   59: 
   60: 
   61: @pytest.mark.parametrize(
   62:     "ts, timespec, expected_iso",
   63:     [
   64:         (ts_no_ns, "auto", "2019-05-18T15:17:08.132263"),
   65:         (ts_no_ns, "seconds", "2019-05-18T15:17:08"),
   66:         (ts_no_ns, "nanoseconds", "2019-05-18T15:17:08.132263000"),
   67:         (ts_no_ns_year1, "seconds", "0001-05-18T15:17:08"),
   68:         (ts_no_ns_year1, "nanoseconds", "0001-05-18T15:17:08.132263000"),
   69:         (ts_ns, "auto", "2019-05-18T15:17:08.132263123"),
   70:         (ts_ns, "hours", "2019-05-18T15"),
   71:         (ts_ns, "minutes", "2019-05-18T15:17"),
   72:         (ts_ns, "seconds", "2019-05-18T15:17:08"),
   73:         (ts_ns, "milliseconds", "2019-05-18T15:17:08.132"),
   74:         (ts_ns, "microseconds", "2019-05-18T15:17:08.132263"),
   75:         (ts_ns, "nanoseconds", "2019-05-18T15:17:08.132263123"),
   76:         (ts_ns_tz, "auto", "2019-05-18T15:17:08.132263123+00:00"),
   77:         (ts_ns_tz, "hours", "2019-05-18T15+00:00"),
   78:         (ts_ns_tz, "minutes", "2019-05-18T15:17+00:00"),
   79:         (ts_ns_tz, "seconds", "2019-05-18T15:17:08+00:00"),
   80:         (ts_ns_tz, "milliseconds", "2019-05-18T15:17:08.132+00:00"),
   81:         (ts_ns_tz, "microseconds", "2019-05-18T15:17:08.132263+00:00"),
   82:         (ts_ns_tz, "nanoseconds", "2019-05-18T15:17:08.132263123+00:00"),
   83:         (ts_no_us, "auto", "2019-05-18T15:17:08.000000123"),
   84:     ],
   85: )
   86: def test_isoformat(ts, timespec, expected_iso):
   87:     assert ts.isoformat(timespec=timespec) == expected_iso
   88: 
   89: 
   90: class TestTimestampRendering:
   91:     timezones = ["UTC", "Asia/Tokyo", "US/Eastern", "dateutil/America/Los_Angeles"]
   92: 
   93:     @pytest.mark.parametrize("tz", timezones)
   94:     @pytest.mark.parametrize("freq", ["D", "M", "S", "N"])
   95:     @pytest.mark.parametrize(
   96:         "date", ["2014-03-07", "2014-01-01 09:00", "2014-01-01 00:00:00.000000001"]
   97:     )
   98:     def test_repr(self, date, freq, tz):
   99:         # avoid to match with timezone name
  100:         freq_repr = f"'{freq}'"
  101:         if tz.startswith("dateutil"):
  102:             tz_repr = tz.replace("dateutil", "")
  103:         else:
  104:             tz_repr = tz
  105: 
  106:         date_only = Timestamp(date)
  107:         assert date in repr(date_only)
  108:         assert tz_repr not in repr(date_only)
  109:         assert freq_repr not in repr(date_only)
  110:         assert date_only == eval(repr(date_only))
  111: 
  112:         date_tz = Timestamp(date, tz=tz)
  113:         assert date in repr(date_tz)
  114:         assert tz_repr in repr(date_tz)
  115:         assert freq_repr not in repr(date_tz)
  116:         assert date_tz == eval(repr(date_tz))
  117: 
  118:     def test_repr_utcoffset(self):
  119:         # This can cause the tz field to be populated, but it's redundant to
  120:         # include this information in the date-string.
  121:         date_with_utc_offset = Timestamp("2014-03-13 00:00:00-0400", tz=None)
  122:         assert "2014-03-13 00:00:00-0400" in repr(date_with_utc_offset)
  123:         assert "tzoffset" not in repr(date_with_utc_offset)
  124:         assert "UTC-04:00" in repr(date_with_utc_offset)
  125:         expr = repr(date_with_utc_offset)
  126:         assert date_with_utc_offset == eval(expr)
  127: 
  128:     def test_timestamp_repr_pre1900(self):
  129:         # pre-1900
  130:         stamp = Timestamp("1850-01-01", tz="US/Eastern")
  131:         repr(stamp)
  132: 
  133:         iso8601 = "1850-01-01 01:23:45.012345"
  134:         stamp = Timestamp(iso8601, tz="US/Eastern")
  135:         result = repr(stamp)
  136:         assert iso8601 in result
  137: 
  138:     def test_pprint(self):
  139:         # GH#12622
  140:         nested_obj = {"foo": 1, "bar": [{"w": {"a": Timestamp("2011-01-01")}}] * 10}
  141:         result = pprint.pformat(nested_obj, width=50)
  142:         expected = r"""{'bar': [{'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  143:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  144:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  145:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  146:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  147:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  148:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  149:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  150:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}},
  151:          {'w': {'a': Timestamp('2011-01-01 00:00:00')}}],
  152:  'foo': 1}"""
  153:         assert result == expected
  154: 
  155:     def test_to_timestamp_repr_is_code(self):
  156:         zs = [
  157:             Timestamp("99-04-17 00:00:00", tz="UTC"),
  158:             Timestamp("2001-04-17 00:00:00", tz="UTC"),
  159:             Timestamp("2001-04-17 00:00:00", tz="America/Los_Angeles"),
  160:             Timestamp("2001-04-17 00:00:00", tz=None),
  161:         ]
  162:         for z in zs:
  163:             assert eval(repr(z)) == z
  164: 
  165:     def test_repr_matches_pydatetime_no_tz(self):
  166:         dt_date = datetime(2013, 1, 2)
  167:         assert str(dt_date) == str(Timestamp(dt_date))
  168: 
  169:         dt_datetime = datetime(2013, 1, 2, 12, 1, 3)
  170:         assert str(dt_datetime) == str(Timestamp(dt_datetime))
  171: 
  172:         dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45)
  173:         assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))
  174: 
  175:         ts_nanos_only = Timestamp(200)
  176:         assert str(ts_nanos_only) == "1970-01-01 00:00:00.000000200"
  177: 
  178:         ts_nanos_micros = Timestamp(1200)
  179:         assert str(ts_nanos_micros) == "1970-01-01 00:00:00.000001200"
  180: 
  181:     def test_repr_matches_pydatetime_tz_pytz(self):
  182:         dt_date = datetime(2013, 1, 2, tzinfo=pytz.utc)
  183:         assert str(dt_date) == str(Timestamp(dt_date))
  184: 
  185:         dt_datetime = datetime(2013, 1, 2, 12, 1, 3, tzinfo=pytz.utc)
  186:         assert str(dt_datetime) == str(Timestamp(dt_datetime))
  187: 
  188:         dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=pytz.utc)
  189:         assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))
  190: 
  191:     def test_repr_matches_pydatetime_tz_dateutil(self):
  192:         utc = dateutil.tz.tzutc()
  193: 
  194:         dt_date = datetime(2013, 1, 2, tzinfo=utc)
  195:         assert str(dt_date) == str(Timestamp(dt_date))
  196: 
  197:         dt_datetime = datetime(2013, 1, 2, 12, 1, 3, tzinfo=utc)
  198:         assert str(dt_datetime) == str(Timestamp(dt_datetime))
  199: 
  200:         dt_datetime_us = datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=utc)
  201:         assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))
