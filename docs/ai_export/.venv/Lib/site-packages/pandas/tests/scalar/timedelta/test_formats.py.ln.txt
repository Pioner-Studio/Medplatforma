    1: import pytest
    2: 
    3: from pandas import Timedelta
    4: 
    5: 
    6: @pytest.mark.parametrize(
    7:     "td, expected_repr",
    8:     [
    9:         (Timedelta(10, unit="d"), "Timedelta('10 days 00:00:00')"),
   10:         (Timedelta(10, unit="s"), "Timedelta('0 days 00:00:10')"),
   11:         (Timedelta(10, unit="ms"), "Timedelta('0 days 00:00:00.010000')"),
   12:         (Timedelta(-10, unit="ms"), "Timedelta('-1 days +23:59:59.990000')"),
   13:     ],
   14: )
   15: def test_repr(td, expected_repr):
   16:     assert repr(td) == expected_repr
   17: 
   18: 
   19: @pytest.mark.parametrize(
   20:     "td, expected_iso",
   21:     [
   22:         (
   23:             Timedelta(
   24:                 days=6,
   25:                 minutes=50,
   26:                 seconds=3,
   27:                 milliseconds=10,
   28:                 microseconds=10,
   29:                 nanoseconds=12,
   30:             ),
   31:             "P6DT0H50M3.010010012S",
   32:         ),
   33:         (Timedelta(days=4, hours=12, minutes=30, seconds=5), "P4DT12H30M5S"),
   34:         (Timedelta(nanoseconds=123), "P0DT0H0M0.000000123S"),
   35:         # trim nano
   36:         (Timedelta(microseconds=10), "P0DT0H0M0.00001S"),
   37:         # trim micro
   38:         (Timedelta(milliseconds=1), "P0DT0H0M0.001S"),
   39:         # don't strip every 0
   40:         (Timedelta(minutes=1), "P0DT0H1M0S"),
   41:     ],
   42: )
   43: def test_isoformat(td, expected_iso):
   44:     assert td.isoformat() == expected_iso
   45: 
   46: 
   47: class TestReprBase:
   48:     def test_none(self):
   49:         delta_1d = Timedelta(1, unit="D")
   50:         delta_0d = Timedelta(0, unit="D")
   51:         delta_1s = Timedelta(1, unit="s")
   52:         delta_500ms = Timedelta(500, unit="ms")
   53: 
   54:         drepr = lambda x: x._repr_base()
   55:         assert drepr(delta_1d) == "1 days"
   56:         assert drepr(-delta_1d) == "-1 days"
   57:         assert drepr(delta_0d) == "0 days"
   58:         assert drepr(delta_1s) == "0 days 00:00:01"
   59:         assert drepr(delta_500ms) == "0 days 00:00:00.500000"
   60:         assert drepr(delta_1d + delta_1s) == "1 days 00:00:01"
   61:         assert drepr(-delta_1d + delta_1s) == "-1 days +00:00:01"
   62:         assert drepr(delta_1d + delta_500ms) == "1 days 00:00:00.500000"
   63:         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
   64: 
   65:     def test_sub_day(self):
   66:         delta_1d = Timedelta(1, unit="D")
   67:         delta_0d = Timedelta(0, unit="D")
   68:         delta_1s = Timedelta(1, unit="s")
   69:         delta_500ms = Timedelta(500, unit="ms")
   70: 
   71:         drepr = lambda x: x._repr_base(format="sub_day")
   72:         assert drepr(delta_1d) == "1 days"
   73:         assert drepr(-delta_1d) == "-1 days"
   74:         assert drepr(delta_0d) == "00:00:00"
   75:         assert drepr(delta_1s) == "00:00:01"
   76:         assert drepr(delta_500ms) == "00:00:00.500000"
   77:         assert drepr(delta_1d + delta_1s) == "1 days 00:00:01"
   78:         assert drepr(-delta_1d + delta_1s) == "-1 days +00:00:01"
   79:         assert drepr(delta_1d + delta_500ms) == "1 days 00:00:00.500000"
   80:         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
   81: 
   82:     def test_long(self):
   83:         delta_1d = Timedelta(1, unit="D")
   84:         delta_0d = Timedelta(0, unit="D")
   85:         delta_1s = Timedelta(1, unit="s")
   86:         delta_500ms = Timedelta(500, unit="ms")
   87: 
   88:         drepr = lambda x: x._repr_base(format="long")
   89:         assert drepr(delta_1d) == "1 days 00:00:00"
   90:         assert drepr(-delta_1d) == "-1 days +00:00:00"
   91:         assert drepr(delta_0d) == "0 days 00:00:00"
   92:         assert drepr(delta_1s) == "0 days 00:00:01"
   93:         assert drepr(delta_500ms) == "0 days 00:00:00.500000"
   94:         assert drepr(delta_1d + delta_1s) == "1 days 00:00:01"
   95:         assert drepr(-delta_1d + delta_1s) == "-1 days +00:00:01"
   96:         assert drepr(delta_1d + delta_500ms) == "1 days 00:00:00.500000"
   97:         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
   98: 
   99:     def test_all(self):
  100:         delta_1d = Timedelta(1, unit="D")
  101:         delta_0d = Timedelta(0, unit="D")
  102:         delta_1ns = Timedelta(1, unit="ns")
  103: 
  104:         drepr = lambda x: x._repr_base(format="all")
  105:         assert drepr(delta_1d) == "1 days 00:00:00.000000000"
  106:         assert drepr(-delta_1d) == "-1 days +00:00:00.000000000"
  107:         assert drepr(delta_0d) == "0 days 00:00:00.000000000"
  108:         assert drepr(delta_1ns) == "0 days 00:00:00.000000001"
  109:         assert drepr(-delta_1d + delta_1ns) == "-1 days +00:00:00.000000001"
