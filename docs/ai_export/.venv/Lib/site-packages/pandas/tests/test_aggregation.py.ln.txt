    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas.core.apply import (
    5:     _make_unique_kwarg_list,
    6:     maybe_mangle_lambdas,
    7: )
    8: 
    9: 
   10: def test_maybe_mangle_lambdas_passthrough():
   11:     assert maybe_mangle_lambdas("mean") == "mean"
   12:     assert maybe_mangle_lambdas(lambda x: x).__name__ == "<lambda>"
   13:     # don't mangel single lambda.
   14:     assert maybe_mangle_lambdas([lambda x: x])[0].__name__ == "<lambda>"
   15: 
   16: 
   17: def test_maybe_mangle_lambdas_listlike():
   18:     aggfuncs = [lambda x: 1, lambda x: 2]
   19:     result = maybe_mangle_lambdas(aggfuncs)
   20:     assert result[0].__name__ == "<lambda_0>"
   21:     assert result[1].__name__ == "<lambda_1>"
   22:     assert aggfuncs[0](None) == result[0](None)
   23:     assert aggfuncs[1](None) == result[1](None)
   24: 
   25: 
   26: def test_maybe_mangle_lambdas():
   27:     func = {"A": [lambda x: 0, lambda x: 1]}
   28:     result = maybe_mangle_lambdas(func)
   29:     assert result["A"][0].__name__ == "<lambda_0>"
   30:     assert result["A"][1].__name__ == "<lambda_1>"
   31: 
   32: 
   33: def test_maybe_mangle_lambdas_args():
   34:     func = {"A": [lambda x, a, b=1: (0, a, b), lambda x: 1]}
   35:     result = maybe_mangle_lambdas(func)
   36:     assert result["A"][0].__name__ == "<lambda_0>"
   37:     assert result["A"][1].__name__ == "<lambda_1>"
   38: 
   39:     assert func["A"][0](0, 1) == (0, 1, 1)
   40:     assert func["A"][0](0, 1, 2) == (0, 1, 2)
   41:     assert func["A"][0](0, 2, b=3) == (0, 2, 3)
   42: 
   43: 
   44: def test_maybe_mangle_lambdas_named():
   45:     func = {"C": np.mean, "D": {"foo": np.mean, "bar": np.mean}}
   46:     result = maybe_mangle_lambdas(func)
   47:     assert result == func
   48: 
   49: 
   50: @pytest.mark.parametrize(
   51:     "order, expected_reorder",
   52:     [
   53:         (
   54:             [
   55:                 ("height", "<lambda>"),
   56:                 ("height", "max"),
   57:                 ("weight", "max"),
   58:                 ("height", "<lambda>"),
   59:                 ("weight", "<lambda>"),
   60:             ],
   61:             [
   62:                 ("height", "<lambda>_0"),
   63:                 ("height", "max"),
   64:                 ("weight", "max"),
   65:                 ("height", "<lambda>_1"),
   66:                 ("weight", "<lambda>"),
   67:             ],
   68:         ),
   69:         (
   70:             [
   71:                 ("col2", "min"),
   72:                 ("col1", "<lambda>"),
   73:                 ("col1", "<lambda>"),
   74:                 ("col1", "<lambda>"),
   75:             ],
   76:             [
   77:                 ("col2", "min"),
   78:                 ("col1", "<lambda>_0"),
   79:                 ("col1", "<lambda>_1"),
   80:                 ("col1", "<lambda>_2"),
   81:             ],
   82:         ),
   83:         (
   84:             [("col", "<lambda>"), ("col", "<lambda>"), ("col", "<lambda>")],
   85:             [("col", "<lambda>_0"), ("col", "<lambda>_1"), ("col", "<lambda>_2")],
   86:         ),
   87:     ],
   88: )
   89: def test_make_unique(order, expected_reorder):
   90:     # GH 27519, test if make_unique function reorders correctly
   91:     result = _make_unique_kwarg_list(order)
   92: 
   93:     assert result == expected_reorder
