    1: """
    2: Tests that work on both the Python and C engines but do not have a
    3: specific classification into the other test modules.
    4: """
    5: from io import StringIO
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas import (
   11:     DataFrame,
   12:     option_context,
   13: )
   14: import pandas._testing as tm
   15: 
   16: pytestmark = pytest.mark.filterwarnings(
   17:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   18: )
   19: 
   20: xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
   21: 
   22: 
   23: @xfail_pyarrow  # AssertionError: DataFrame.index are different
   24: @pytest.mark.parametrize("na_filter", [True, False])
   25: def test_inf_parsing(all_parsers, na_filter):
   26:     parser = all_parsers
   27:     data = """\
   28: ,A
   29: a,inf
   30: b,-inf
   31: c,+Inf
   32: d,-Inf
   33: e,INF
   34: f,-INF
   35: g,+INf
   36: h,-INf
   37: i,inF
   38: j,-inF"""
   39:     expected = DataFrame(
   40:         {"A": [float("inf"), float("-inf")] * 5},
   41:         index=["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"],
   42:     )
   43:     result = parser.read_csv(StringIO(data), index_col=0, na_filter=na_filter)
   44:     tm.assert_frame_equal(result, expected)
   45: 
   46: 
   47: @xfail_pyarrow  # AssertionError: DataFrame.index are different
   48: @pytest.mark.parametrize("na_filter", [True, False])
   49: def test_infinity_parsing(all_parsers, na_filter):
   50:     parser = all_parsers
   51:     data = """\
   52: ,A
   53: a,Infinity
   54: b,-Infinity
   55: c,+Infinity
   56: """
   57:     expected = DataFrame(
   58:         {"A": [float("infinity"), float("-infinity"), float("+infinity")]},
   59:         index=["a", "b", "c"],
   60:     )
   61:     result = parser.read_csv(StringIO(data), index_col=0, na_filter=na_filter)
   62:     tm.assert_frame_equal(result, expected)
   63: 
   64: 
   65: def test_read_csv_with_use_inf_as_na(all_parsers):
   66:     # https://github.com/pandas-dev/pandas/issues/35493
   67:     parser = all_parsers
   68:     data = "1.0\nNaN\n3.0"
   69:     msg = "use_inf_as_na option is deprecated"
   70:     warn = FutureWarning
   71:     if parser.engine == "pyarrow":
   72:         warn = (FutureWarning, DeprecationWarning)
   73: 
   74:     with tm.assert_produces_warning(warn, match=msg, check_stacklevel=False):
   75:         with option_context("use_inf_as_na", True):
   76:             result = parser.read_csv(StringIO(data), header=None)
   77:     expected = DataFrame([1.0, np.nan, 3.0])
   78:     tm.assert_frame_equal(result, expected)
