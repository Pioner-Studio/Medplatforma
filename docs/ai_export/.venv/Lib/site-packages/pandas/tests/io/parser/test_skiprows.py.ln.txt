    1: """
    2: Tests that skipped rows are properly handled during
    3: parsing for all of the parsers defined in parsers.py
    4: """
    5: 
    6: from datetime import datetime
    7: from io import StringIO
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: from pandas.errors import EmptyDataError
   13: 
   14: from pandas import (
   15:     DataFrame,
   16:     Index,
   17: )
   18: import pandas._testing as tm
   19: 
   20: xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
   21: pytestmark = pytest.mark.filterwarnings(
   22:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   23: )
   24: 
   25: 
   26: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
   27: @pytest.mark.parametrize("skiprows", [list(range(6)), 6])
   28: def test_skip_rows_bug(all_parsers, skiprows):
   29:     # see gh-505
   30:     parser = all_parsers
   31:     text = """#foo,a,b,c
   32: #foo,a,b,c
   33: #foo,a,b,c
   34: #foo,a,b,c
   35: #foo,a,b,c
   36: #foo,a,b,c
   37: 1/1/2000,1.,2.,3.
   38: 1/2/2000,4,5,6
   39: 1/3/2000,7,8,9
   40: """
   41:     result = parser.read_csv(
   42:         StringIO(text), skiprows=skiprows, header=None, index_col=0, parse_dates=True
   43:     )
   44:     index = Index(
   45:         [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)], name=0
   46:     )
   47: 
   48:     expected = DataFrame(
   49:         np.arange(1.0, 10.0).reshape((3, 3)), columns=[1, 2, 3], index=index
   50:     )
   51:     tm.assert_frame_equal(result, expected)
   52: 
   53: 
   54: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
   55: def test_deep_skip_rows(all_parsers):
   56:     # see gh-4382
   57:     parser = all_parsers
   58:     data = "a,b,c\n" + "\n".join(
   59:         [",".join([str(i), str(i + 1), str(i + 2)]) for i in range(10)]
   60:     )
   61:     condensed_data = "a,b,c\n" + "\n".join(
   62:         [",".join([str(i), str(i + 1), str(i + 2)]) for i in [0, 1, 2, 3, 4, 6, 8, 9]]
   63:     )
   64: 
   65:     result = parser.read_csv(StringIO(data), skiprows=[6, 8])
   66:     condensed_result = parser.read_csv(StringIO(condensed_data))
   67:     tm.assert_frame_equal(result, condensed_result)
   68: 
   69: 
   70: @xfail_pyarrow  # AssertionError: DataFrame are different
   71: def test_skip_rows_blank(all_parsers):
   72:     # see gh-9832
   73:     parser = all_parsers
   74:     text = """#foo,a,b,c
   75: #foo,a,b,c
   76: 
   77: #foo,a,b,c
   78: #foo,a,b,c
   79: 
   80: 1/1/2000,1.,2.,3.
   81: 1/2/2000,4,5,6
   82: 1/3/2000,7,8,9
   83: """
   84:     data = parser.read_csv(
   85:         StringIO(text), skiprows=6, header=None, index_col=0, parse_dates=True
   86:     )
   87:     index = Index(
   88:         [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)], name=0
   89:     )
   90: 
   91:     expected = DataFrame(
   92:         np.arange(1.0, 10.0).reshape((3, 3)), columns=[1, 2, 3], index=index
   93:     )
   94:     tm.assert_frame_equal(data, expected)
   95: 
   96: 
   97: @pytest.mark.parametrize(
   98:     "data,kwargs,expected",
   99:     [
  100:         (
  101:             """id,text,num_lines
  102: 1,"line 11
  103: line 12",2
  104: 2,"line 21
  105: line 22",2
  106: 3,"line 31",1""",
  107:             {"skiprows": [1]},
  108:             DataFrame(
  109:                 [[2, "line 21\nline 22", 2], [3, "line 31", 1]],
  110:                 columns=["id", "text", "num_lines"],
  111:             ),
  112:         ),
  113:         (
  114:             "a,b,c\n~a\n b~,~e\n d~,~f\n f~\n1,2,~12\n 13\n 14~",
  115:             {"quotechar": "~", "skiprows": [2]},
  116:             DataFrame([["a\n b", "e\n d", "f\n f"]], columns=["a", "b", "c"]),
  117:         ),
  118:         (
  119:             (
  120:                 "Text,url\n~example\n "
  121:                 "sentence\n one~,url1\n~"
  122:                 "example\n sentence\n two~,url2\n~"
  123:                 "example\n sentence\n three~,url3"
  124:             ),
  125:             {"quotechar": "~", "skiprows": [1, 3]},
  126:             DataFrame([["example\n sentence\n two", "url2"]], columns=["Text", "url"]),
  127:         ),
  128:     ],
  129: )
  130: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  131: def test_skip_row_with_newline(all_parsers, data, kwargs, expected):
  132:     # see gh-12775 and gh-10911
  133:     parser = all_parsers
  134:     result = parser.read_csv(StringIO(data), **kwargs)
  135:     tm.assert_frame_equal(result, expected)
  136: 
  137: 
  138: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  139: def test_skip_row_with_quote(all_parsers):
  140:     # see gh-12775 and gh-10911
  141:     parser = all_parsers
  142:     data = """id,text,num_lines
  143: 1,"line '11' line 12",2
  144: 2,"line '21' line 22",2
  145: 3,"line '31' line 32",1"""
  146: 
  147:     exp_data = [[2, "line '21' line 22", 2], [3, "line '31' line 32", 1]]
  148:     expected = DataFrame(exp_data, columns=["id", "text", "num_lines"])
  149: 
  150:     result = parser.read_csv(StringIO(data), skiprows=[1])
  151:     tm.assert_frame_equal(result, expected)
  152: 
  153: 
  154: @pytest.mark.parametrize(
  155:     "data,exp_data",
  156:     [
  157:         (
  158:             """id,text,num_lines
  159: 1,"line \n'11' line 12",2
  160: 2,"line \n'21' line 22",2
  161: 3,"line \n'31' line 32",1""",
  162:             [[2, "line \n'21' line 22", 2], [3, "line \n'31' line 32", 1]],
  163:         ),
  164:         (
  165:             """id,text,num_lines
  166: 1,"line '11\n' line 12",2
  167: 2,"line '21\n' line 22",2
  168: 3,"line '31\n' line 32",1""",
  169:             [[2, "line '21\n' line 22", 2], [3, "line '31\n' line 32", 1]],
  170:         ),
  171:         (
  172:             """id,text,num_lines
  173: 1,"line '11\n' \r\tline 12",2
  174: 2,"line '21\n' \r\tline 22",2
  175: 3,"line '31\n' \r\tline 32",1""",
  176:             [[2, "line '21\n' \r\tline 22", 2], [3, "line '31\n' \r\tline 32", 1]],
  177:         ),
  178:     ],
  179: )
  180: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  181: def test_skip_row_with_newline_and_quote(all_parsers, data, exp_data):
  182:     # see gh-12775 and gh-10911
  183:     parser = all_parsers
  184:     result = parser.read_csv(StringIO(data), skiprows=[1])
  185: 
  186:     expected = DataFrame(exp_data, columns=["id", "text", "num_lines"])
  187:     tm.assert_frame_equal(result, expected)
  188: 
  189: 
  190: @xfail_pyarrow  # ValueError: The 'delim_whitespace' option is not supported
  191: @pytest.mark.parametrize(
  192:     "lineterminator", ["\n", "\r\n", "\r"]  # "LF"  # "CRLF"  # "CR"
  193: )
  194: def test_skiprows_lineterminator(all_parsers, lineterminator, request):
  195:     # see gh-9079
  196:     parser = all_parsers
  197:     data = "\n".join(
  198:         [
  199:             "SMOSMANIA ThetaProbe-ML2X ",
  200:             "2007/01/01 01:00   0.2140 U M ",
  201:             "2007/01/01 02:00   0.2141 M O ",
  202:             "2007/01/01 04:00   0.2142 D M ",
  203:         ]
  204:     )
  205:     expected = DataFrame(
  206:         [
  207:             ["2007/01/01", "01:00", 0.2140, "U", "M"],
  208:             ["2007/01/01", "02:00", 0.2141, "M", "O"],
  209:             ["2007/01/01", "04:00", 0.2142, "D", "M"],
  210:         ],
  211:         columns=["date", "time", "var", "flag", "oflag"],
  212:     )
  213: 
  214:     if parser.engine == "python" and lineterminator == "\r":
  215:         mark = pytest.mark.xfail(reason="'CR' not respect with the Python parser yet")
  216:         request.applymarker(mark)
  217: 
  218:     data = data.replace("\n", lineterminator)
  219: 
  220:     depr_msg = "The 'delim_whitespace' keyword in pd.read_csv is deprecated"
  221:     with tm.assert_produces_warning(
  222:         FutureWarning, match=depr_msg, check_stacklevel=False
  223:     ):
  224:         result = parser.read_csv(
  225:             StringIO(data),
  226:             skiprows=1,
  227:             delim_whitespace=True,
  228:             names=["date", "time", "var", "flag", "oflag"],
  229:         )
  230:     tm.assert_frame_equal(result, expected)
  231: 
  232: 
  233: @xfail_pyarrow  # AssertionError: DataFrame are different
  234: def test_skiprows_infield_quote(all_parsers):
  235:     # see gh-14459
  236:     parser = all_parsers
  237:     data = 'a"\nb"\na\n1'
  238:     expected = DataFrame({"a": [1]})
  239: 
  240:     result = parser.read_csv(StringIO(data), skiprows=2)
  241:     tm.assert_frame_equal(result, expected)
  242: 
  243: 
  244: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  245: @pytest.mark.parametrize(
  246:     "kwargs,expected",
  247:     [
  248:         ({}, DataFrame({"1": [3, 5]})),
  249:         ({"header": 0, "names": ["foo"]}, DataFrame({"foo": [3, 5]})),
  250:     ],
  251: )
  252: def test_skip_rows_callable(all_parsers, kwargs, expected):
  253:     parser = all_parsers
  254:     data = "a\n1\n2\n3\n4\n5"
  255: 
  256:     result = parser.read_csv(StringIO(data), skiprows=lambda x: x % 2 == 0, **kwargs)
  257:     tm.assert_frame_equal(result, expected)
  258: 
  259: 
  260: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  261: def test_skip_rows_callable_not_in(all_parsers):
  262:     parser = all_parsers
  263:     data = "0,a\n1,b\n2,c\n3,d\n4,e"
  264:     expected = DataFrame([[1, "b"], [3, "d"]])
  265: 
  266:     result = parser.read_csv(
  267:         StringIO(data), header=None, skiprows=lambda x: x not in [1, 3]
  268:     )
  269:     tm.assert_frame_equal(result, expected)
  270: 
  271: 
  272: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  273: def test_skip_rows_skip_all(all_parsers):
  274:     parser = all_parsers
  275:     data = "a\n1\n2\n3\n4\n5"
  276:     msg = "No columns to parse from file"
  277: 
  278:     with pytest.raises(EmptyDataError, match=msg):
  279:         parser.read_csv(StringIO(data), skiprows=lambda x: True)
  280: 
  281: 
  282: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  283: def test_skip_rows_bad_callable(all_parsers):
  284:     msg = "by zero"
  285:     parser = all_parsers
  286:     data = "a\n1\n2\n3\n4\n5"
  287: 
  288:     with pytest.raises(ZeroDivisionError, match=msg):
  289:         parser.read_csv(StringIO(data), skiprows=lambda x: 1 / 0)
  290: 
  291: 
  292: @xfail_pyarrow  # ValueError: skiprows argument must be an integer
  293: def test_skip_rows_and_n_rows(all_parsers):
  294:     # GH#44021
  295:     data = """a,b
  296: 1,a
  297: 2,b
  298: 3,c
  299: 4,d
  300: 5,e
  301: 6,f
  302: 7,g
  303: 8,h
  304: """
  305:     parser = all_parsers
  306:     result = parser.read_csv(StringIO(data), nrows=5, skiprows=[2, 4, 6])
  307:     expected = DataFrame({"a": [1, 3, 5, 7, 8], "b": ["a", "c", "e", "g", "h"]})
  308:     tm.assert_frame_equal(result, expected)
  309: 
  310: 
  311: @xfail_pyarrow
  312: def test_skip_rows_with_chunks(all_parsers):
  313:     # GH 55677
  314:     data = """col_a
  315: 10
  316: 20
  317: 30
  318: 40
  319: 50
  320: 60
  321: 70
  322: 80
  323: 90
  324: 100
  325: """
  326:     parser = all_parsers
  327:     reader = parser.read_csv(
  328:         StringIO(data), engine=parser, skiprows=lambda x: x in [1, 4, 5], chunksize=4
  329:     )
  330:     df1 = next(reader)
  331:     df2 = next(reader)
  332: 
  333:     tm.assert_frame_equal(df1, DataFrame({"col_a": [20, 30, 60, 70]}))
  334:     tm.assert_frame_equal(df2, DataFrame({"col_a": [80, 90, 100]}, index=[4, 5, 6]))
