    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     reset_option,
    7:     set_eng_float_format,
    8: )
    9: 
   10: from pandas.io.formats.format import EngFormatter
   11: 
   12: 
   13: @pytest.fixture(autouse=True)
   14: def reset_float_format():
   15:     yield
   16:     reset_option("display.float_format")
   17: 
   18: 
   19: class TestEngFormatter:
   20:     def test_eng_float_formatter2(self, float_frame):
   21:         df = float_frame
   22:         df.loc[5] = 0
   23: 
   24:         set_eng_float_format()
   25:         repr(df)
   26: 
   27:         set_eng_float_format(use_eng_prefix=True)
   28:         repr(df)
   29: 
   30:         set_eng_float_format(accuracy=0)
   31:         repr(df)
   32: 
   33:     def test_eng_float_formatter(self):
   34:         df = DataFrame({"A": [1.41, 141.0, 14100, 1410000.0]})
   35: 
   36:         set_eng_float_format()
   37:         result = df.to_string()
   38:         expected = (
   39:             "             A\n"
   40:             "0    1.410E+00\n"
   41:             "1  141.000E+00\n"
   42:             "2   14.100E+03\n"
   43:             "3    1.410E+06"
   44:         )
   45:         assert result == expected
   46: 
   47:         set_eng_float_format(use_eng_prefix=True)
   48:         result = df.to_string()
   49:         expected = "         A\n0    1.410\n1  141.000\n2  14.100k\n3   1.410M"
   50:         assert result == expected
   51: 
   52:         set_eng_float_format(accuracy=0)
   53:         result = df.to_string()
   54:         expected = "         A\n0    1E+00\n1  141E+00\n2   14E+03\n3    1E+06"
   55:         assert result == expected
   56: 
   57:     def compare(self, formatter, input, output):
   58:         formatted_input = formatter(input)
   59:         assert formatted_input == output
   60: 
   61:     def compare_all(self, formatter, in_out):
   62:         """
   63:         Parameters:
   64:         -----------
   65:         formatter: EngFormatter under test
   66:         in_out: list of tuples. Each tuple = (number, expected_formatting)
   67: 
   68:         It is tested if 'formatter(number) == expected_formatting'.
   69:         *number* should be >= 0 because formatter(-number) == fmt is also
   70:         tested. *fmt* is derived from *expected_formatting*
   71:         """
   72:         for input, output in in_out:
   73:             self.compare(formatter, input, output)
   74:             self.compare(formatter, -input, "-" + output[1:])
   75: 
   76:     def test_exponents_with_eng_prefix(self):
   77:         formatter = EngFormatter(accuracy=3, use_eng_prefix=True)
   78:         f = np.sqrt(2)
   79:         in_out = [
   80:             (f * 10**-24, " 1.414y"),
   81:             (f * 10**-23, " 14.142y"),
   82:             (f * 10**-22, " 141.421y"),
   83:             (f * 10**-21, " 1.414z"),
   84:             (f * 10**-20, " 14.142z"),
   85:             (f * 10**-19, " 141.421z"),
   86:             (f * 10**-18, " 1.414a"),
   87:             (f * 10**-17, " 14.142a"),
   88:             (f * 10**-16, " 141.421a"),
   89:             (f * 10**-15, " 1.414f"),
   90:             (f * 10**-14, " 14.142f"),
   91:             (f * 10**-13, " 141.421f"),
   92:             (f * 10**-12, " 1.414p"),
   93:             (f * 10**-11, " 14.142p"),
   94:             (f * 10**-10, " 141.421p"),
   95:             (f * 10**-9, " 1.414n"),
   96:             (f * 10**-8, " 14.142n"),
   97:             (f * 10**-7, " 141.421n"),
   98:             (f * 10**-6, " 1.414u"),
   99:             (f * 10**-5, " 14.142u"),
  100:             (f * 10**-4, " 141.421u"),
  101:             (f * 10**-3, " 1.414m"),
  102:             (f * 10**-2, " 14.142m"),
  103:             (f * 10**-1, " 141.421m"),
  104:             (f * 10**0, " 1.414"),
  105:             (f * 10**1, " 14.142"),
  106:             (f * 10**2, " 141.421"),
  107:             (f * 10**3, " 1.414k"),
  108:             (f * 10**4, " 14.142k"),
  109:             (f * 10**5, " 141.421k"),
  110:             (f * 10**6, " 1.414M"),
  111:             (f * 10**7, " 14.142M"),
  112:             (f * 10**8, " 141.421M"),
  113:             (f * 10**9, " 1.414G"),
  114:             (f * 10**10, " 14.142G"),
  115:             (f * 10**11, " 141.421G"),
  116:             (f * 10**12, " 1.414T"),
  117:             (f * 10**13, " 14.142T"),
  118:             (f * 10**14, " 141.421T"),
  119:             (f * 10**15, " 1.414P"),
  120:             (f * 10**16, " 14.142P"),
  121:             (f * 10**17, " 141.421P"),
  122:             (f * 10**18, " 1.414E"),
  123:             (f * 10**19, " 14.142E"),
  124:             (f * 10**20, " 141.421E"),
  125:             (f * 10**21, " 1.414Z"),
  126:             (f * 10**22, " 14.142Z"),
  127:             (f * 10**23, " 141.421Z"),
  128:             (f * 10**24, " 1.414Y"),
  129:             (f * 10**25, " 14.142Y"),
  130:             (f * 10**26, " 141.421Y"),
  131:         ]
  132:         self.compare_all(formatter, in_out)
  133: 
  134:     def test_exponents_without_eng_prefix(self):
  135:         formatter = EngFormatter(accuracy=4, use_eng_prefix=False)
  136:         f = np.pi
  137:         in_out = [
  138:             (f * 10**-24, " 3.1416E-24"),
  139:             (f * 10**-23, " 31.4159E-24"),
  140:             (f * 10**-22, " 314.1593E-24"),
  141:             (f * 10**-21, " 3.1416E-21"),
  142:             (f * 10**-20, " 31.4159E-21"),
  143:             (f * 10**-19, " 314.1593E-21"),
  144:             (f * 10**-18, " 3.1416E-18"),
  145:             (f * 10**-17, " 31.4159E-18"),
  146:             (f * 10**-16, " 314.1593E-18"),
  147:             (f * 10**-15, " 3.1416E-15"),
  148:             (f * 10**-14, " 31.4159E-15"),
  149:             (f * 10**-13, " 314.1593E-15"),
  150:             (f * 10**-12, " 3.1416E-12"),
  151:             (f * 10**-11, " 31.4159E-12"),
  152:             (f * 10**-10, " 314.1593E-12"),
  153:             (f * 10**-9, " 3.1416E-09"),
  154:             (f * 10**-8, " 31.4159E-09"),
  155:             (f * 10**-7, " 314.1593E-09"),
  156:             (f * 10**-6, " 3.1416E-06"),
  157:             (f * 10**-5, " 31.4159E-06"),
  158:             (f * 10**-4, " 314.1593E-06"),
  159:             (f * 10**-3, " 3.1416E-03"),
  160:             (f * 10**-2, " 31.4159E-03"),
  161:             (f * 10**-1, " 314.1593E-03"),
  162:             (f * 10**0, " 3.1416E+00"),
  163:             (f * 10**1, " 31.4159E+00"),
  164:             (f * 10**2, " 314.1593E+00"),
  165:             (f * 10**3, " 3.1416E+03"),
  166:             (f * 10**4, " 31.4159E+03"),
  167:             (f * 10**5, " 314.1593E+03"),
  168:             (f * 10**6, " 3.1416E+06"),
  169:             (f * 10**7, " 31.4159E+06"),
  170:             (f * 10**8, " 314.1593E+06"),
  171:             (f * 10**9, " 3.1416E+09"),
  172:             (f * 10**10, " 31.4159E+09"),
  173:             (f * 10**11, " 314.1593E+09"),
  174:             (f * 10**12, " 3.1416E+12"),
  175:             (f * 10**13, " 31.4159E+12"),
  176:             (f * 10**14, " 314.1593E+12"),
  177:             (f * 10**15, " 3.1416E+15"),
  178:             (f * 10**16, " 31.4159E+15"),
  179:             (f * 10**17, " 314.1593E+15"),
  180:             (f * 10**18, " 3.1416E+18"),
  181:             (f * 10**19, " 31.4159E+18"),
  182:             (f * 10**20, " 314.1593E+18"),
  183:             (f * 10**21, " 3.1416E+21"),
  184:             (f * 10**22, " 31.4159E+21"),
  185:             (f * 10**23, " 314.1593E+21"),
  186:             (f * 10**24, " 3.1416E+24"),
  187:             (f * 10**25, " 31.4159E+24"),
  188:             (f * 10**26, " 314.1593E+24"),
  189:         ]
  190:         self.compare_all(formatter, in_out)
  191: 
  192:     def test_rounding(self):
  193:         formatter = EngFormatter(accuracy=3, use_eng_prefix=True)
  194:         in_out = [
  195:             (5.55555, " 5.556"),
  196:             (55.5555, " 55.556"),
  197:             (555.555, " 555.555"),
  198:             (5555.55, " 5.556k"),
  199:             (55555.5, " 55.556k"),
  200:             (555555, " 555.555k"),
  201:         ]
  202:         self.compare_all(formatter, in_out)
  203: 
  204:         formatter = EngFormatter(accuracy=1, use_eng_prefix=True)
  205:         in_out = [
  206:             (5.55555, " 5.6"),
  207:             (55.5555, " 55.6"),
  208:             (555.555, " 555.6"),
  209:             (5555.55, " 5.6k"),
  210:             (55555.5, " 55.6k"),
  211:             (555555, " 555.6k"),
  212:         ]
  213:         self.compare_all(formatter, in_out)
  214: 
  215:         formatter = EngFormatter(accuracy=0, use_eng_prefix=True)
  216:         in_out = [
  217:             (5.55555, " 6"),
  218:             (55.5555, " 56"),
  219:             (555.555, " 556"),
  220:             (5555.55, " 6k"),
  221:             (55555.5, " 56k"),
  222:             (555555, " 556k"),
  223:         ]
  224:         self.compare_all(formatter, in_out)
  225: 
  226:         formatter = EngFormatter(accuracy=3, use_eng_prefix=True)
  227:         result = formatter(0)
  228:         assert result == " 0.000"
  229: 
  230:     def test_nan(self):
  231:         # Issue #11981
  232: 
  233:         formatter = EngFormatter(accuracy=1, use_eng_prefix=True)
  234:         result = formatter(np.nan)
  235:         assert result == "NaN"
  236: 
  237:         df = DataFrame(
  238:             {
  239:                 "a": [1.5, 10.3, 20.5],
  240:                 "b": [50.3, 60.67, 70.12],
  241:                 "c": [100.2, 101.33, 120.33],
  242:             }
  243:         )
  244:         pt = df.pivot_table(values="a", index="b", columns="c")
  245:         set_eng_float_format(accuracy=1)
  246:         result = pt.to_string()
  247:         assert "NaN" in result
  248: 
  249:     def test_inf(self):
  250:         # Issue #11981
  251: 
  252:         formatter = EngFormatter(accuracy=1, use_eng_prefix=True)
  253:         result = formatter(np.inf)
  254:         assert result == "inf"
