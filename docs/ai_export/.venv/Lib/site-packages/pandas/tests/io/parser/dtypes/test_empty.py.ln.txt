    1: """
    2: Tests dtype specification during parsing
    3: for all of the parsers defined in parsers.py
    4: """
    5: from io import StringIO
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas import (
   11:     Categorical,
   12:     DataFrame,
   13:     Index,
   14:     MultiIndex,
   15:     Series,
   16:     concat,
   17: )
   18: import pandas._testing as tm
   19: 
   20: skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
   21: 
   22: 
   23: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   24: def test_dtype_all_columns_empty(all_parsers):
   25:     # see gh-12048
   26:     parser = all_parsers
   27:     result = parser.read_csv(StringIO("A,B"), dtype=str)
   28: 
   29:     expected = DataFrame({"A": [], "B": []}, dtype=str)
   30:     tm.assert_frame_equal(result, expected)
   31: 
   32: 
   33: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   34: def test_empty_pass_dtype(all_parsers):
   35:     parser = all_parsers
   36: 
   37:     data = "one,two"
   38:     result = parser.read_csv(StringIO(data), dtype={"one": "u1"})
   39: 
   40:     expected = DataFrame(
   41:         {"one": np.empty(0, dtype="u1"), "two": np.empty(0, dtype=object)},
   42:     )
   43:     tm.assert_frame_equal(result, expected)
   44: 
   45: 
   46: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   47: def test_empty_with_index_pass_dtype(all_parsers):
   48:     parser = all_parsers
   49: 
   50:     data = "one,two"
   51:     result = parser.read_csv(
   52:         StringIO(data), index_col=["one"], dtype={"one": "u1", 1: "f"}
   53:     )
   54: 
   55:     expected = DataFrame(
   56:         {"two": np.empty(0, dtype="f")}, index=Index([], dtype="u1", name="one")
   57:     )
   58:     tm.assert_frame_equal(result, expected)
   59: 
   60: 
   61: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   62: def test_empty_with_multi_index_pass_dtype(all_parsers):
   63:     parser = all_parsers
   64: 
   65:     data = "one,two,three"
   66:     result = parser.read_csv(
   67:         StringIO(data), index_col=["one", "two"], dtype={"one": "u1", 1: "f8"}
   68:     )
   69: 
   70:     exp_idx = MultiIndex.from_arrays(
   71:         [np.empty(0, dtype="u1"), np.empty(0, dtype=np.float64)],
   72:         names=["one", "two"],
   73:     )
   74:     expected = DataFrame({"three": np.empty(0, dtype=object)}, index=exp_idx)
   75:     tm.assert_frame_equal(result, expected)
   76: 
   77: 
   78: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   79: def test_empty_with_mangled_column_pass_dtype_by_names(all_parsers):
   80:     parser = all_parsers
   81: 
   82:     data = "one,one"
   83:     result = parser.read_csv(StringIO(data), dtype={"one": "u1", "one.1": "f"})
   84: 
   85:     expected = DataFrame(
   86:         {"one": np.empty(0, dtype="u1"), "one.1": np.empty(0, dtype="f")},
   87:     )
   88:     tm.assert_frame_equal(result, expected)
   89: 
   90: 
   91: @skip_pyarrow  # CSV parse error: Empty CSV file or block
   92: def test_empty_with_mangled_column_pass_dtype_by_indexes(all_parsers):
   93:     parser = all_parsers
   94: 
   95:     data = "one,one"
   96:     result = parser.read_csv(StringIO(data), dtype={0: "u1", 1: "f"})
   97: 
   98:     expected = DataFrame(
   99:         {"one": np.empty(0, dtype="u1"), "one.1": np.empty(0, dtype="f")},
  100:     )
  101:     tm.assert_frame_equal(result, expected)
  102: 
  103: 
  104: @skip_pyarrow  # CSV parse error: Empty CSV file or block
  105: def test_empty_with_dup_column_pass_dtype_by_indexes(all_parsers):
  106:     # see gh-9424
  107:     parser = all_parsers
  108:     expected = concat(
  109:         [Series([], name="one", dtype="u1"), Series([], name="one.1", dtype="f")],
  110:         axis=1,
  111:     )
  112: 
  113:     data = "one,one"
  114:     result = parser.read_csv(StringIO(data), dtype={0: "u1", 1: "f"})
  115:     tm.assert_frame_equal(result, expected)
  116: 
  117: 
  118: def test_empty_with_dup_column_pass_dtype_by_indexes_raises(all_parsers):
  119:     # see gh-9424
  120:     parser = all_parsers
  121:     expected = concat(
  122:         [Series([], name="one", dtype="u1"), Series([], name="one.1", dtype="f")],
  123:         axis=1,
  124:     )
  125:     expected.index = expected.index.astype(object)
  126: 
  127:     with pytest.raises(ValueError, match="Duplicate names"):
  128:         data = ""
  129:         parser.read_csv(StringIO(data), names=["one", "one"], dtype={0: "u1", 1: "f"})
  130: 
  131: 
  132: @pytest.mark.parametrize(
  133:     "dtype,expected",
  134:     [
  135:         (np.float64, DataFrame(columns=["a", "b"], dtype=np.float64)),
  136:         (
  137:             "category",
  138:             DataFrame({"a": Categorical([]), "b": Categorical([])}),
  139:         ),
  140:         (
  141:             {"a": "category", "b": "category"},
  142:             DataFrame({"a": Categorical([]), "b": Categorical([])}),
  143:         ),
  144:         ("datetime64[ns]", DataFrame(columns=["a", "b"], dtype="datetime64[ns]")),
  145:         (
  146:             "timedelta64[ns]",
  147:             DataFrame(
  148:                 {
  149:                     "a": Series([], dtype="timedelta64[ns]"),
  150:                     "b": Series([], dtype="timedelta64[ns]"),
  151:                 },
  152:             ),
  153:         ),
  154:         (
  155:             {"a": np.int64, "b": np.int32},
  156:             DataFrame(
  157:                 {"a": Series([], dtype=np.int64), "b": Series([], dtype=np.int32)},
  158:             ),
  159:         ),
  160:         (
  161:             {0: np.int64, 1: np.int32},
  162:             DataFrame(
  163:                 {"a": Series([], dtype=np.int64), "b": Series([], dtype=np.int32)},
  164:             ),
  165:         ),
  166:         (
  167:             {"a": np.int64, 1: np.int32},
  168:             DataFrame(
  169:                 {"a": Series([], dtype=np.int64), "b": Series([], dtype=np.int32)},
  170:             ),
  171:         ),
  172:     ],
  173: )
  174: @skip_pyarrow  # CSV parse error: Empty CSV file or block
  175: def test_empty_dtype(all_parsers, dtype, expected):
  176:     # see gh-14712
  177:     parser = all_parsers
  178:     data = "a,b"
  179: 
  180:     result = parser.read_csv(StringIO(data), header=0, dtype=dtype)
  181:     tm.assert_frame_equal(result, expected)
