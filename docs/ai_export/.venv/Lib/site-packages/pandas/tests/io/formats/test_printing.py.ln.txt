    1: # Note! This file is aimed specifically at pandas.io.formats.printing utility
    2: # functions, not the general printing of pandas objects.
    3: import string
    4: 
    5: import pandas._config.config as cf
    6: 
    7: from pandas.io.formats import printing
    8: 
    9: 
   10: def test_adjoin():
   11:     data = [["a", "b", "c"], ["dd", "ee", "ff"], ["ggg", "hhh", "iii"]]
   12:     expected = "a  dd  ggg\nb  ee  hhh\nc  ff  iii"
   13: 
   14:     adjoined = printing.adjoin(2, *data)
   15: 
   16:     assert adjoined == expected
   17: 
   18: 
   19: class TestPPrintThing:
   20:     def test_repr_binary_type(self):
   21:         letters = string.ascii_letters
   22:         try:
   23:             raw = bytes(letters, encoding=cf.get_option("display.encoding"))
   24:         except TypeError:
   25:             raw = bytes(letters)
   26:         b = str(raw.decode("utf-8"))
   27:         res = printing.pprint_thing(b, quote_strings=True)
   28:         assert res == repr(b)
   29:         res = printing.pprint_thing(b, quote_strings=False)
   30:         assert res == b
   31: 
   32:     def test_repr_obeys_max_seq_limit(self):
   33:         with cf.option_context("display.max_seq_items", 2000):
   34:             assert len(printing.pprint_thing(list(range(1000)))) > 1000
   35: 
   36:         with cf.option_context("display.max_seq_items", 5):
   37:             assert len(printing.pprint_thing(list(range(1000)))) < 100
   38: 
   39:         with cf.option_context("display.max_seq_items", 1):
   40:             assert len(printing.pprint_thing(list(range(1000)))) < 9
   41: 
   42:     def test_repr_set(self):
   43:         assert printing.pprint_thing({1}) == "{1}"
   44: 
   45: 
   46: class TestFormatBase:
   47:     def test_adjoin(self):
   48:         data = [["a", "b", "c"], ["dd", "ee", "ff"], ["ggg", "hhh", "iii"]]
   49:         expected = "a  dd  ggg\nb  ee  hhh\nc  ff  iii"
   50: 
   51:         adjoined = printing.adjoin(2, *data)
   52: 
   53:         assert adjoined == expected
   54: 
   55:     def test_adjoin_unicode(self):
   56:         data = [["гЃ‚", "b", "c"], ["dd", "гЃ€гЃ€", "ff"], ["ggg", "hhh", "гЃ„гЃ„гЃ„"]]
   57:         expected = "гЃ‚  dd  ggg\nb  гЃ€гЃ€  hhh\nc  ff  гЃ„гЃ„гЃ„"
   58:         adjoined = printing.adjoin(2, *data)
   59:         assert adjoined == expected
   60: 
   61:         adj = printing._EastAsianTextAdjustment()
   62: 
   63:         expected = """гЃ‚  dd    ggg
   64: b   гЃ€гЃ€  hhh
   65: c   ff    гЃ„гЃ„гЃ„"""
   66: 
   67:         adjoined = adj.adjoin(2, *data)
   68:         assert adjoined == expected
   69:         cols = adjoined.split("\n")
   70:         assert adj.len(cols[0]) == 13
   71:         assert adj.len(cols[1]) == 13
   72:         assert adj.len(cols[2]) == 16
   73: 
   74:         expected = """гЃ‚       dd         ggg
   75: b        гЃ€гЃ€       hhh
   76: c        ff         гЃ„гЃ„гЃ„"""
   77: 
   78:         adjoined = adj.adjoin(7, *data)
   79:         assert adjoined == expected
   80:         cols = adjoined.split("\n")
   81:         assert adj.len(cols[0]) == 23
   82:         assert adj.len(cols[1]) == 23
   83:         assert adj.len(cols[2]) == 26
   84: 
   85:     def test_justify(self):
   86:         adj = printing._EastAsianTextAdjustment()
   87: 
   88:         def just(x, *args, **kwargs):
   89:             # wrapper to test single str
   90:             return adj.justify([x], *args, **kwargs)[0]
   91: 
   92:         assert just("abc", 5, mode="left") == "abc  "
   93:         assert just("abc", 5, mode="center") == " abc "
   94:         assert just("abc", 5, mode="right") == "  abc"
   95:         assert just("abc", 5, mode="left") == "abc  "
   96:         assert just("abc", 5, mode="center") == " abc "
   97:         assert just("abc", 5, mode="right") == "  abc"
   98: 
   99:         assert just("гѓ‘гѓігѓЂ", 5, mode="left") == "гѓ‘гѓігѓЂ"
  100:         assert just("гѓ‘гѓігѓЂ", 5, mode="center") == "гѓ‘гѓігѓЂ"
  101:         assert just("гѓ‘гѓігѓЂ", 5, mode="right") == "гѓ‘гѓігѓЂ"
  102: 
  103:         assert just("гѓ‘гѓігѓЂ", 10, mode="left") == "гѓ‘гѓігѓЂ    "
  104:         assert just("гѓ‘гѓігѓЂ", 10, mode="center") == "  гѓ‘гѓігѓЂ  "
  105:         assert just("гѓ‘гѓігѓЂ", 10, mode="right") == "    гѓ‘гѓігѓЂ"
  106: 
  107:     def test_east_asian_len(self):
  108:         adj = printing._EastAsianTextAdjustment()
  109: 
  110:         assert adj.len("abc") == 3
  111:         assert adj.len("abc") == 3
  112: 
  113:         assert adj.len("гѓ‘гѓігѓЂ") == 6
  114:         assert adj.len("пѕЉпѕџпѕќпѕЂпѕћ") == 5
  115:         assert adj.len("гѓ‘гѓігѓЂpanda") == 11
  116:         assert adj.len("пѕЉпѕџпѕќпѕЂпѕћpanda") == 10
  117: 
  118:     def test_ambiguous_width(self):
  119:         adj = printing._EastAsianTextAdjustment()
  120:         assert adj.len("ВЎВЎab") == 4
  121: 
  122:         with cf.option_context("display.unicode.ambiguous_as_wide", True):
  123:             adj = printing._EastAsianTextAdjustment()
  124:             assert adj.len("ВЎВЎab") == 6
  125: 
  126:         data = [["гЃ‚", "b", "c"], ["dd", "гЃ€гЃ€", "ff"], ["ggg", "ВЎВЎab", "гЃ„гЃ„гЃ„"]]
  127:         expected = "гЃ‚  dd    ggg \nb   гЃ€гЃ€  ВЎВЎab\nc   ff    гЃ„гЃ„гЃ„"
  128:         adjoined = adj.adjoin(2, *data)
  129:         assert adjoined == expected
