    1: """
    2: Tests that work on both the Python and C engines but do not have a
    3: specific classification into the other test modules.
    4: """
    5: import csv
    6: from io import StringIO
    7: 
    8: import pytest
    9: 
   10: from pandas import DataFrame
   11: import pandas._testing as tm
   12: 
   13: from pandas.io.parsers import TextParser
   14: 
   15: pytestmark = pytest.mark.filterwarnings(
   16:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   17: )
   18: 
   19: xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
   20: 
   21: 
   22: @xfail_pyarrow
   23: def test_read_data_list(all_parsers):
   24:     parser = all_parsers
   25:     kwargs = {"index_col": 0}
   26:     data = "A,B,C\nfoo,1,2,3\nbar,4,5,6"
   27: 
   28:     data_list = [["A", "B", "C"], ["foo", "1", "2", "3"], ["bar", "4", "5", "6"]]
   29:     expected = parser.read_csv(StringIO(data), **kwargs)
   30: 
   31:     with TextParser(data_list, chunksize=2, **kwargs) as parser:
   32:         result = parser.read()
   33: 
   34:     tm.assert_frame_equal(result, expected)
   35: 
   36: 
   37: def test_reader_list(all_parsers):
   38:     data = """index,A,B,C,D
   39: foo,2,3,4,5
   40: bar,7,8,9,10
   41: baz,12,13,14,15
   42: qux,12,13,14,15
   43: foo2,12,13,14,15
   44: bar2,12,13,14,15
   45: """
   46:     parser = all_parsers
   47:     kwargs = {"index_col": 0}
   48: 
   49:     lines = list(csv.reader(StringIO(data)))
   50:     with TextParser(lines, chunksize=2, **kwargs) as reader:
   51:         chunks = list(reader)
   52: 
   53:     expected = parser.read_csv(StringIO(data), **kwargs)
   54: 
   55:     tm.assert_frame_equal(chunks[0], expected[:2])
   56:     tm.assert_frame_equal(chunks[1], expected[2:4])
   57:     tm.assert_frame_equal(chunks[2], expected[4:])
   58: 
   59: 
   60: def test_reader_list_skiprows(all_parsers):
   61:     data = """index,A,B,C,D
   62: foo,2,3,4,5
   63: bar,7,8,9,10
   64: baz,12,13,14,15
   65: qux,12,13,14,15
   66: foo2,12,13,14,15
   67: bar2,12,13,14,15
   68: """
   69:     parser = all_parsers
   70:     kwargs = {"index_col": 0}
   71: 
   72:     lines = list(csv.reader(StringIO(data)))
   73:     with TextParser(lines, chunksize=2, skiprows=[1], **kwargs) as reader:
   74:         chunks = list(reader)
   75: 
   76:     expected = parser.read_csv(StringIO(data), **kwargs)
   77: 
   78:     tm.assert_frame_equal(chunks[0], expected[1:3])
   79: 
   80: 
   81: def test_read_csv_parse_simple_list(all_parsers):
   82:     parser = all_parsers
   83:     data = """foo
   84: bar baz
   85: qux foo
   86: foo
   87: bar"""
   88: 
   89:     result = parser.read_csv(StringIO(data), header=None)
   90:     expected = DataFrame(["foo", "bar baz", "qux foo", "foo", "bar"])
   91:     tm.assert_frame_equal(result, expected)
