    1: from textwrap import dedent
    2: 
    3: import pytest
    4: 
    5: from pandas import (
    6:     DataFrame,
    7:     IndexSlice,
    8: )
    9: 
   10: pytest.importorskip("jinja2")
   11: 
   12: from pandas.io.formats.style import Styler
   13: 
   14: 
   15: @pytest.fixture
   16: def df():
   17:     return DataFrame(
   18:         [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
   19:         index=["i", "j", "j"],
   20:         columns=["c", "d", "d"],
   21:         dtype=float,
   22:     )
   23: 
   24: 
   25: @pytest.fixture
   26: def styler(df):
   27:     return Styler(df, uuid_len=0)
   28: 
   29: 
   30: def test_format_non_unique(df):
   31:     # GH 41269
   32: 
   33:     # test dict
   34:     html = df.style.format({"d": "{:.1f}"}).to_html()
   35:     for val in ["1.000000<", "4.000000<", "7.000000<"]:
   36:         assert val in html
   37:     for val in ["2.0<", "3.0<", "5.0<", "6.0<", "8.0<", "9.0<"]:
   38:         assert val in html
   39: 
   40:     # test subset
   41:     html = df.style.format(precision=1, subset=IndexSlice["j", "d"]).to_html()
   42:     for val in ["1.000000<", "4.000000<", "7.000000<", "2.000000<", "3.000000<"]:
   43:         assert val in html
   44:     for val in ["5.0<", "6.0<", "8.0<", "9.0<"]:
   45:         assert val in html
   46: 
   47: 
   48: @pytest.mark.parametrize("func", ["apply", "map"])
   49: def test_apply_map_non_unique_raises(df, func):
   50:     # GH 41269
   51:     if func == "apply":
   52:         op = lambda s: ["color: red;"] * len(s)
   53:     else:
   54:         op = lambda v: "color: red;"
   55: 
   56:     with pytest.raises(KeyError, match="`Styler.apply` and `.map` are not"):
   57:         getattr(df.style, func)(op)._compute()
   58: 
   59: 
   60: def test_table_styles_dict_non_unique_index(styler):
   61:     styles = styler.set_table_styles(
   62:         {"j": [{"selector": "td", "props": "a: v;"}]}, axis=1
   63:     ).table_styles
   64:     assert styles == [
   65:         {"selector": "td.row1", "props": [("a", "v")]},
   66:         {"selector": "td.row2", "props": [("a", "v")]},
   67:     ]
   68: 
   69: 
   70: def test_table_styles_dict_non_unique_columns(styler):
   71:     styles = styler.set_table_styles(
   72:         {"d": [{"selector": "td", "props": "a: v;"}]}, axis=0
   73:     ).table_styles
   74:     assert styles == [
   75:         {"selector": "td.col1", "props": [("a", "v")]},
   76:         {"selector": "td.col2", "props": [("a", "v")]},
   77:     ]
   78: 
   79: 
   80: def test_tooltips_non_unique_raises(styler):
   81:     # ttips has unique keys
   82:     ttips = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "d"], index=["a", "b"])
   83:     styler.set_tooltips(ttips=ttips)  # OK
   84: 
   85:     # ttips has non-unique columns
   86:     ttips = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "c"], index=["a", "b"])
   87:     with pytest.raises(KeyError, match="Tooltips render only if `ttips` has unique"):
   88:         styler.set_tooltips(ttips=ttips)
   89: 
   90:     # ttips has non-unique index
   91:     ttips = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "d"], index=["a", "a"])
   92:     with pytest.raises(KeyError, match="Tooltips render only if `ttips` has unique"):
   93:         styler.set_tooltips(ttips=ttips)
   94: 
   95: 
   96: def test_set_td_classes_non_unique_raises(styler):
   97:     # classes has unique keys
   98:     classes = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "d"], index=["a", "b"])
   99:     styler.set_td_classes(classes=classes)  # OK
  100: 
  101:     # classes has non-unique columns
  102:     classes = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "c"], index=["a", "b"])
  103:     with pytest.raises(KeyError, match="Classes render only if `classes` has unique"):
  104:         styler.set_td_classes(classes=classes)
  105: 
  106:     # classes has non-unique index
  107:     classes = DataFrame([["1", "2"], ["3", "4"]], columns=["c", "d"], index=["a", "a"])
  108:     with pytest.raises(KeyError, match="Classes render only if `classes` has unique"):
  109:         styler.set_td_classes(classes=classes)
  110: 
  111: 
  112: def test_hide_columns_non_unique(styler):
  113:     ctx = styler.hide(["d"], axis="columns")._translate(True, True)
  114: 
  115:     assert ctx["head"][0][1]["display_value"] == "c"
  116:     assert ctx["head"][0][1]["is_visible"] is True
  117: 
  118:     assert ctx["head"][0][2]["display_value"] == "d"
  119:     assert ctx["head"][0][2]["is_visible"] is False
  120: 
  121:     assert ctx["head"][0][3]["display_value"] == "d"
  122:     assert ctx["head"][0][3]["is_visible"] is False
  123: 
  124:     assert ctx["body"][0][1]["is_visible"] is True
  125:     assert ctx["body"][0][2]["is_visible"] is False
  126:     assert ctx["body"][0][3]["is_visible"] is False
  127: 
  128: 
  129: def test_latex_non_unique(styler):
  130:     result = styler.to_latex()
  131:     assert result == dedent(
  132:         """\
  133:         \\begin{tabular}{lrrr}
  134:          & c & d & d \\\\
  135:         i & 1.000000 & 2.000000 & 3.000000 \\\\
  136:         j & 4.000000 & 5.000000 & 6.000000 \\\\
  137:         j & 7.000000 & 8.000000 & 9.000000 \\\\
  138:         \\end{tabular}
  139:     """
  140:     )
