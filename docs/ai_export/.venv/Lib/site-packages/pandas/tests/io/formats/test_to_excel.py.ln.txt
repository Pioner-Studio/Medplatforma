    1: """Tests formatting as writer-agnostic ExcelCells
    2: 
    3: ExcelFormatter is tested implicitly in pandas/tests/io/excel
    4: """
    5: import string
    6: 
    7: import pytest
    8: 
    9: from pandas.errors import CSSWarning
   10: 
   11: import pandas._testing as tm
   12: 
   13: from pandas.io.formats.excel import (
   14:     CssExcelCell,
   15:     CSSToExcelConverter,
   16: )
   17: 
   18: 
   19: @pytest.mark.parametrize(
   20:     "css,expected",
   21:     [
   22:         # FONT
   23:         # - name
   24:         ("font-family: foo,bar", {"font": {"name": "foo"}}),
   25:         ('font-family: "foo bar",baz', {"font": {"name": "foo bar"}}),
   26:         ("font-family: foo,\nbar", {"font": {"name": "foo"}}),
   27:         ("font-family: foo, bar,    baz", {"font": {"name": "foo"}}),
   28:         ("font-family: bar, foo", {"font": {"name": "bar"}}),
   29:         ("font-family: 'foo bar', baz", {"font": {"name": "foo bar"}}),
   30:         ("font-family: 'foo \\'bar', baz", {"font": {"name": "foo 'bar"}}),
   31:         ('font-family: "foo \\"bar", baz', {"font": {"name": 'foo "bar'}}),
   32:         ('font-family: "foo ,bar", baz', {"font": {"name": "foo ,bar"}}),
   33:         # - family
   34:         ("font-family: serif", {"font": {"name": "serif", "family": 1}}),
   35:         ("font-family: Serif", {"font": {"name": "serif", "family": 1}}),
   36:         ("font-family: roman, serif", {"font": {"name": "roman", "family": 1}}),
   37:         ("font-family: roman, sans-serif", {"font": {"name": "roman", "family": 2}}),
   38:         ("font-family: roman, sans serif", {"font": {"name": "roman"}}),
   39:         ("font-family: roman, sansserif", {"font": {"name": "roman"}}),
   40:         ("font-family: roman, cursive", {"font": {"name": "roman", "family": 4}}),
   41:         ("font-family: roman, fantasy", {"font": {"name": "roman", "family": 5}}),
   42:         # - size
   43:         ("font-size: 1em", {"font": {"size": 12}}),
   44:         ("font-size: xx-small", {"font": {"size": 6}}),
   45:         ("font-size: x-small", {"font": {"size": 7.5}}),
   46:         ("font-size: small", {"font": {"size": 9.6}}),
   47:         ("font-size: medium", {"font": {"size": 12}}),
   48:         ("font-size: large", {"font": {"size": 13.5}}),
   49:         ("font-size: x-large", {"font": {"size": 18}}),
   50:         ("font-size: xx-large", {"font": {"size": 24}}),
   51:         ("font-size: 50%", {"font": {"size": 6}}),
   52:         # - bold
   53:         ("font-weight: 100", {"font": {"bold": False}}),
   54:         ("font-weight: 200", {"font": {"bold": False}}),
   55:         ("font-weight: 300", {"font": {"bold": False}}),
   56:         ("font-weight: 400", {"font": {"bold": False}}),
   57:         ("font-weight: normal", {"font": {"bold": False}}),
   58:         ("font-weight: lighter", {"font": {"bold": False}}),
   59:         ("font-weight: bold", {"font": {"bold": True}}),
   60:         ("font-weight: bolder", {"font": {"bold": True}}),
   61:         ("font-weight: 700", {"font": {"bold": True}}),
   62:         ("font-weight: 800", {"font": {"bold": True}}),
   63:         ("font-weight: 900", {"font": {"bold": True}}),
   64:         # - italic
   65:         ("font-style: italic", {"font": {"italic": True}}),
   66:         ("font-style: oblique", {"font": {"italic": True}}),
   67:         # - underline
   68:         ("text-decoration: underline", {"font": {"underline": "single"}}),
   69:         ("text-decoration: overline", {}),
   70:         ("text-decoration: none", {}),
   71:         # - strike
   72:         ("text-decoration: line-through", {"font": {"strike": True}}),
   73:         (
   74:             "text-decoration: underline line-through",
   75:             {"font": {"strike": True, "underline": "single"}},
   76:         ),
   77:         (
   78:             "text-decoration: underline; text-decoration: line-through",
   79:             {"font": {"strike": True}},
   80:         ),
   81:         # - color
   82:         ("color: red", {"font": {"color": "FF0000"}}),
   83:         ("color: #ff0000", {"font": {"color": "FF0000"}}),
   84:         ("color: #f0a", {"font": {"color": "FF00AA"}}),
   85:         # - shadow
   86:         ("text-shadow: none", {"font": {"shadow": False}}),
   87:         ("text-shadow: 0px -0em 0px #CCC", {"font": {"shadow": False}}),
   88:         ("text-shadow: 0px -0em 0px #999", {"font": {"shadow": False}}),
   89:         ("text-shadow: 0px -0em 0px", {"font": {"shadow": False}}),
   90:         ("text-shadow: 2px -0em 0px #CCC", {"font": {"shadow": True}}),
   91:         ("text-shadow: 0px -2em 0px #CCC", {"font": {"shadow": True}}),
   92:         ("text-shadow: 0px -0em 2px #CCC", {"font": {"shadow": True}}),
   93:         ("text-shadow: 0px -0em 2px", {"font": {"shadow": True}}),
   94:         ("text-shadow: 0px -2em", {"font": {"shadow": True}}),
   95:         # FILL
   96:         # - color, fillType
   97:         (
   98:             "background-color: red",
   99:             {"fill": {"fgColor": "FF0000", "patternType": "solid"}},
  100:         ),
  101:         (
  102:             "background-color: #ff0000",
  103:             {"fill": {"fgColor": "FF0000", "patternType": "solid"}},
  104:         ),
  105:         (
  106:             "background-color: #f0a",
  107:             {"fill": {"fgColor": "FF00AA", "patternType": "solid"}},
  108:         ),
  109:         # BORDER
  110:         # - style
  111:         (
  112:             "border-style: solid",
  113:             {
  114:                 "border": {
  115:                     "top": {"style": "medium"},
  116:                     "bottom": {"style": "medium"},
  117:                     "left": {"style": "medium"},
  118:                     "right": {"style": "medium"},
  119:                 }
  120:             },
  121:         ),
  122:         (
  123:             "border-style: solid; border-width: thin",
  124:             {
  125:                 "border": {
  126:                     "top": {"style": "thin"},
  127:                     "bottom": {"style": "thin"},
  128:                     "left": {"style": "thin"},
  129:                     "right": {"style": "thin"},
  130:                 }
  131:             },
  132:         ),
  133:         (
  134:             "border-top-style: solid; border-top-width: thin",
  135:             {"border": {"top": {"style": "thin"}}},
  136:         ),
  137:         (
  138:             "border-top-style: solid; border-top-width: 1pt",
  139:             {"border": {"top": {"style": "thin"}}},
  140:         ),
  141:         ("border-top-style: solid", {"border": {"top": {"style": "medium"}}}),
  142:         (
  143:             "border-top-style: solid; border-top-width: medium",
  144:             {"border": {"top": {"style": "medium"}}},
  145:         ),
  146:         (
  147:             "border-top-style: solid; border-top-width: 2pt",
  148:             {"border": {"top": {"style": "medium"}}},
  149:         ),
  150:         (
  151:             "border-top-style: solid; border-top-width: thick",
  152:             {"border": {"top": {"style": "thick"}}},
  153:         ),
  154:         (
  155:             "border-top-style: solid; border-top-width: 4pt",
  156:             {"border": {"top": {"style": "thick"}}},
  157:         ),
  158:         (
  159:             "border-top-style: dotted",
  160:             {"border": {"top": {"style": "mediumDashDotDot"}}},
  161:         ),
  162:         (
  163:             "border-top-style: dotted; border-top-width: thin",
  164:             {"border": {"top": {"style": "dotted"}}},
  165:         ),
  166:         ("border-top-style: dashed", {"border": {"top": {"style": "mediumDashed"}}}),
  167:         (
  168:             "border-top-style: dashed; border-top-width: thin",
  169:             {"border": {"top": {"style": "dashed"}}},
  170:         ),
  171:         ("border-top-style: double", {"border": {"top": {"style": "double"}}}),
  172:         # - color
  173:         (
  174:             "border-style: solid; border-color: #0000ff",
  175:             {
  176:                 "border": {
  177:                     "top": {"style": "medium", "color": "0000FF"},
  178:                     "right": {"style": "medium", "color": "0000FF"},
  179:                     "bottom": {"style": "medium", "color": "0000FF"},
  180:                     "left": {"style": "medium", "color": "0000FF"},
  181:                 }
  182:             },
  183:         ),
  184:         (
  185:             "border-top-style: double; border-top-color: blue",
  186:             {"border": {"top": {"style": "double", "color": "0000FF"}}},
  187:         ),
  188:         (
  189:             "border-top-style: solid; border-top-color: #06c",
  190:             {"border": {"top": {"style": "medium", "color": "0066CC"}}},
  191:         ),
  192:         (
  193:             "border-top-color: blue",
  194:             {"border": {"top": {"color": "0000FF", "style": "none"}}},
  195:         ),
  196:         # ALIGNMENT
  197:         # - horizontal
  198:         ("text-align: center", {"alignment": {"horizontal": "center"}}),
  199:         ("text-align: left", {"alignment": {"horizontal": "left"}}),
  200:         ("text-align: right", {"alignment": {"horizontal": "right"}}),
  201:         ("text-align: justify", {"alignment": {"horizontal": "justify"}}),
  202:         # - vertical
  203:         ("vertical-align: top", {"alignment": {"vertical": "top"}}),
  204:         ("vertical-align: text-top", {"alignment": {"vertical": "top"}}),
  205:         ("vertical-align: middle", {"alignment": {"vertical": "center"}}),
  206:         ("vertical-align: bottom", {"alignment": {"vertical": "bottom"}}),
  207:         ("vertical-align: text-bottom", {"alignment": {"vertical": "bottom"}}),
  208:         # - wrap_text
  209:         ("white-space: nowrap", {"alignment": {"wrap_text": False}}),
  210:         ("white-space: pre", {"alignment": {"wrap_text": False}}),
  211:         ("white-space: pre-line", {"alignment": {"wrap_text": False}}),
  212:         ("white-space: normal", {"alignment": {"wrap_text": True}}),
  213:         # NUMBER FORMAT
  214:         ("number-format: 0%", {"number_format": {"format_code": "0%"}}),
  215:         (
  216:             "number-format: 0В§[Red](0)В§-В§@;",
  217:             {"number_format": {"format_code": "0;[red](0);-;@"}},  # GH 46152
  218:         ),
  219:     ],
  220: )
  221: def test_css_to_excel(css, expected):
  222:     convert = CSSToExcelConverter()
  223:     assert expected == convert(css)
  224: 
  225: 
  226: def test_css_to_excel_multiple():
  227:     convert = CSSToExcelConverter()
  228:     actual = convert(
  229:         """
  230:         font-weight: bold;
  231:         text-decoration: underline;
  232:         color: red;
  233:         border-width: thin;
  234:         text-align: center;
  235:         vertical-align: top;
  236:         unused: something;
  237:     """
  238:     )
  239:     assert {
  240:         "font": {"bold": True, "underline": "single", "color": "FF0000"},
  241:         "border": {
  242:             "top": {"style": "thin"},
  243:             "right": {"style": "thin"},
  244:             "bottom": {"style": "thin"},
  245:             "left": {"style": "thin"},
  246:         },
  247:         "alignment": {"horizontal": "center", "vertical": "top"},
  248:     } == actual
  249: 
  250: 
  251: @pytest.mark.parametrize(
  252:     "css,inherited,expected",
  253:     [
  254:         ("font-weight: bold", "", {"font": {"bold": True}}),
  255:         ("", "font-weight: bold", {"font": {"bold": True}}),
  256:         (
  257:             "font-weight: bold",
  258:             "font-style: italic",
  259:             {"font": {"bold": True, "italic": True}},
  260:         ),
  261:         ("font-style: normal", "font-style: italic", {"font": {"italic": False}}),
  262:         ("font-style: inherit", "", {}),
  263:         (
  264:             "font-style: normal; font-style: inherit",
  265:             "font-style: italic",
  266:             {"font": {"italic": True}},
  267:         ),
  268:     ],
  269: )
  270: def test_css_to_excel_inherited(css, inherited, expected):
  271:     convert = CSSToExcelConverter(inherited)
  272:     assert expected == convert(css)
  273: 
  274: 
  275: @pytest.mark.parametrize(
  276:     "input_color,output_color",
  277:     (
  278:         list(CSSToExcelConverter.NAMED_COLORS.items())
  279:         + [("#" + rgb, rgb) for rgb in CSSToExcelConverter.NAMED_COLORS.values()]
  280:         + [("#F0F", "FF00FF"), ("#ABC", "AABBCC")]
  281:     ),
  282: )
  283: def test_css_to_excel_good_colors(input_color, output_color):
  284:     # see gh-18392
  285:     css = (
  286:         f"border-top-color: {input_color}; "
  287:         f"border-right-color: {input_color}; "
  288:         f"border-bottom-color: {input_color}; "
  289:         f"border-left-color: {input_color}; "
  290:         f"background-color: {input_color}; "
  291:         f"color: {input_color}"
  292:     )
  293: 
  294:     expected = {}
  295: 
  296:     expected["fill"] = {"patternType": "solid", "fgColor": output_color}
  297: 
  298:     expected["font"] = {"color": output_color}
  299: 
  300:     expected["border"] = {
  301:         k: {"color": output_color, "style": "none"}
  302:         for k in ("top", "right", "bottom", "left")
  303:     }
  304: 
  305:     with tm.assert_produces_warning(None):
  306:         convert = CSSToExcelConverter()
  307:         assert expected == convert(css)
  308: 
  309: 
  310: @pytest.mark.parametrize("input_color", [None, "not-a-color"])
  311: def test_css_to_excel_bad_colors(input_color):
  312:     # see gh-18392
  313:     css = (
  314:         f"border-top-color: {input_color}; "
  315:         f"border-right-color: {input_color}; "
  316:         f"border-bottom-color: {input_color}; "
  317:         f"border-left-color: {input_color}; "
  318:         f"background-color: {input_color}; "
  319:         f"color: {input_color}"
  320:     )
  321: 
  322:     expected = {}
  323: 
  324:     if input_color is not None:
  325:         expected["fill"] = {"patternType": "solid"}
  326: 
  327:     with tm.assert_produces_warning(CSSWarning):
  328:         convert = CSSToExcelConverter()
  329:         assert expected == convert(css)
  330: 
  331: 
  332: def tests_css_named_colors_valid():
  333:     upper_hexs = set(map(str.upper, string.hexdigits))
  334:     for color in CSSToExcelConverter.NAMED_COLORS.values():
  335:         assert len(color) == 6 and all(c in upper_hexs for c in color)
  336: 
  337: 
  338: def test_css_named_colors_from_mpl_present():
  339:     mpl_colors = pytest.importorskip("matplotlib.colors")
  340: 
  341:     pd_colors = CSSToExcelConverter.NAMED_COLORS
  342:     for name, color in mpl_colors.CSS4_COLORS.items():
  343:         assert name in pd_colors and pd_colors[name] == color[1:]
  344: 
  345: 
  346: @pytest.mark.parametrize(
  347:     "styles,expected",
  348:     [
  349:         ([("color", "green"), ("color", "red")], "color: red;"),
  350:         ([("font-weight", "bold"), ("font-weight", "normal")], "font-weight: normal;"),
  351:         ([("text-align", "center"), ("TEXT-ALIGN", "right")], "text-align: right;"),
  352:     ],
  353: )
  354: def test_css_excel_cell_precedence(styles, expected):
  355:     """It applies favors latter declarations over former declarations"""
  356:     # See GH 47371
  357:     converter = CSSToExcelConverter()
  358:     converter._call_cached.cache_clear()
  359:     css_styles = {(0, 0): styles}
  360:     cell = CssExcelCell(
  361:         row=0,
  362:         col=0,
  363:         val="",
  364:         style=None,
  365:         css_styles=css_styles,
  366:         css_row=0,
  367:         css_col=0,
  368:         css_converter=converter,
  369:     )
  370:     converter._call_cached.cache_clear()
  371: 
  372:     assert cell.style == converter(expected)
  373: 
  374: 
  375: @pytest.mark.parametrize(
  376:     "styles,cache_hits,cache_misses",
  377:     [
  378:         ([[("color", "green"), ("color", "red"), ("color", "green")]], 0, 1),
  379:         (
  380:             [
  381:                 [("font-weight", "bold")],
  382:                 [("font-weight", "normal"), ("font-weight", "bold")],
  383:             ],
  384:             1,
  385:             1,
  386:         ),
  387:         ([[("text-align", "center")], [("TEXT-ALIGN", "center")]], 1, 1),
  388:         (
  389:             [
  390:                 [("font-weight", "bold"), ("text-align", "center")],
  391:                 [("font-weight", "bold"), ("text-align", "left")],
  392:             ],
  393:             0,
  394:             2,
  395:         ),
  396:         (
  397:             [
  398:                 [("font-weight", "bold"), ("text-align", "center")],
  399:                 [("font-weight", "bold"), ("text-align", "left")],
  400:                 [("font-weight", "bold"), ("text-align", "center")],
  401:             ],
  402:             1,
  403:             2,
  404:         ),
  405:     ],
  406: )
  407: def test_css_excel_cell_cache(styles, cache_hits, cache_misses):
  408:     """It caches unique cell styles"""
  409:     # See GH 47371
  410:     converter = CSSToExcelConverter()
  411:     converter._call_cached.cache_clear()
  412: 
  413:     css_styles = {(0, i): _style for i, _style in enumerate(styles)}
  414:     for css_row, css_col in css_styles:
  415:         CssExcelCell(
  416:             row=0,
  417:             col=0,
  418:             val="",
  419:             style=None,
  420:             css_styles=css_styles,
  421:             css_row=css_row,
  422:             css_col=css_col,
  423:             css_converter=converter,
  424:         )
  425:     cache_info = converter._call_cached.cache_info()
  426:     converter._call_cached.cache_clear()
  427: 
  428:     assert cache_info.hits == cache_hits
  429:     assert cache_info.misses == cache_misses
