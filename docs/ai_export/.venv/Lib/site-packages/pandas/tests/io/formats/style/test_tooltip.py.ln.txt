    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import DataFrame
    5: 
    6: pytest.importorskip("jinja2")
    7: from pandas.io.formats.style import Styler
    8: 
    9: 
   10: @pytest.fixture
   11: def df():
   12:     return DataFrame(
   13:         data=[[0, 1, 2], [3, 4, 5], [6, 7, 8]],
   14:         columns=["A", "B", "C"],
   15:         index=["x", "y", "z"],
   16:     )
   17: 
   18: 
   19: @pytest.fixture
   20: def styler(df):
   21:     return Styler(df, uuid_len=0)
   22: 
   23: 
   24: @pytest.mark.parametrize(
   25:     "ttips",
   26:     [
   27:         DataFrame(  # Test basic reindex and ignoring blank
   28:             data=[["Min", "Max"], [np.nan, ""]],
   29:             columns=["A", "C"],
   30:             index=["x", "y"],
   31:         ),
   32:         DataFrame(  # Test non-referenced columns, reversed col names, short index
   33:             data=[["Max", "Min", "Bad-Col"]], columns=["C", "A", "D"], index=["x"]
   34:         ),
   35:     ],
   36: )
   37: def test_tooltip_render(ttips, styler):
   38:     # GH 21266
   39:     result = styler.set_tooltips(ttips).to_html()
   40: 
   41:     # test tooltip table level class
   42:     assert "#T_ .pd-t {\n  visibility: hidden;\n" in result
   43: 
   44:     # test 'Min' tooltip added
   45:     assert "#T_ #T__row0_col0:hover .pd-t {\n  visibility: visible;\n}" in result
   46:     assert '#T_ #T__row0_col0 .pd-t::after {\n  content: "Min";\n}' in result
   47:     assert 'class="data row0 col0" >0<span class="pd-t"></span></td>' in result
   48: 
   49:     # test 'Max' tooltip added
   50:     assert "#T_ #T__row0_col2:hover .pd-t {\n  visibility: visible;\n}" in result
   51:     assert '#T_ #T__row0_col2 .pd-t::after {\n  content: "Max";\n}' in result
   52:     assert 'class="data row0 col2" >2<span class="pd-t"></span></td>' in result
   53: 
   54:     # test Nan, empty string and bad column ignored
   55:     assert "#T_ #T__row1_col0:hover .pd-t {\n  visibility: visible;\n}" not in result
   56:     assert "#T_ #T__row1_col1:hover .pd-t {\n  visibility: visible;\n}" not in result
   57:     assert "#T_ #T__row0_col1:hover .pd-t {\n  visibility: visible;\n}" not in result
   58:     assert "#T_ #T__row1_col2:hover .pd-t {\n  visibility: visible;\n}" not in result
   59:     assert "Bad-Col" not in result
   60: 
   61: 
   62: def test_tooltip_ignored(styler):
   63:     # GH 21266
   64:     result = styler.to_html()  # no set_tooltips() creates no <span>
   65:     assert '<style type="text/css">\n</style>' in result
   66:     assert '<span class="pd-t"></span>' not in result
   67: 
   68: 
   69: def test_tooltip_css_class(styler):
   70:     # GH 21266
   71:     result = styler.set_tooltips(
   72:         DataFrame([["tooltip"]], index=["x"], columns=["A"]),
   73:         css_class="other-class",
   74:         props=[("color", "green")],
   75:     ).to_html()
   76:     assert "#T_ .other-class {\n  color: green;\n" in result
   77:     assert '#T_ #T__row0_col0 .other-class::after {\n  content: "tooltip";\n' in result
   78: 
   79:     # GH 39563
   80:     result = styler.set_tooltips(  # set_tooltips overwrites previous
   81:         DataFrame([["tooltip"]], index=["x"], columns=["A"]),
   82:         css_class="another-class",
   83:         props="color:green;color:red;",
   84:     ).to_html()
   85:     assert "#T_ .another-class {\n  color: green;\n  color: red;\n}" in result
