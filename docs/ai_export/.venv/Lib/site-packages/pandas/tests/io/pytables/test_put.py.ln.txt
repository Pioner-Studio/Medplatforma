    1: import re
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas._libs.tslibs import Timestamp
    7: 
    8: import pandas as pd
    9: from pandas import (
   10:     DataFrame,
   11:     HDFStore,
   12:     Index,
   13:     MultiIndex,
   14:     Series,
   15:     _testing as tm,
   16:     concat,
   17:     date_range,
   18: )
   19: from pandas.tests.io.pytables.common import (
   20:     _maybe_remove,
   21:     ensure_clean_store,
   22: )
   23: from pandas.util import _test_decorators as td
   24: 
   25: pytestmark = pytest.mark.single_cpu
   26: 
   27: 
   28: def test_format_type(tmp_path, setup_path):
   29:     df = DataFrame({"A": [1, 2]})
   30:     with HDFStore(tmp_path / setup_path) as store:
   31:         store.put("a", df, format="fixed")
   32:         store.put("b", df, format="table")
   33: 
   34:         assert store.get_storer("a").format_type == "fixed"
   35:         assert store.get_storer("b").format_type == "table"
   36: 
   37: 
   38: def test_format_kwarg_in_constructor(tmp_path, setup_path):
   39:     # GH 13291
   40: 
   41:     msg = "format is not a defined argument for HDFStore"
   42: 
   43:     with pytest.raises(ValueError, match=msg):
   44:         HDFStore(tmp_path / setup_path, format="table")
   45: 
   46: 
   47: def test_api_default_format(tmp_path, setup_path):
   48:     # default_format option
   49:     with ensure_clean_store(setup_path) as store:
   50:         df = DataFrame(
   51:             1.1 * np.arange(120).reshape((30, 4)),
   52:             columns=Index(list("ABCD"), dtype=object),
   53:             index=Index([f"i-{i}" for i in range(30)], dtype=object),
   54:         )
   55: 
   56:         with pd.option_context("io.hdf.default_format", "fixed"):
   57:             _maybe_remove(store, "df")
   58:             store.put("df", df)
   59:             assert not store.get_storer("df").is_table
   60: 
   61:             msg = "Can only append to Tables"
   62:             with pytest.raises(ValueError, match=msg):
   63:                 store.append("df2", df)
   64: 
   65:         with pd.option_context("io.hdf.default_format", "table"):
   66:             _maybe_remove(store, "df")
   67:             store.put("df", df)
   68:             assert store.get_storer("df").is_table
   69: 
   70:             _maybe_remove(store, "df2")
   71:             store.append("df2", df)
   72:             assert store.get_storer("df").is_table
   73: 
   74:     path = tmp_path / setup_path
   75:     df = DataFrame(
   76:         1.1 * np.arange(120).reshape((30, 4)),
   77:         columns=Index(list("ABCD"), dtype=object),
   78:         index=Index([f"i-{i}" for i in range(30)], dtype=object),
   79:     )
   80: 
   81:     with pd.option_context("io.hdf.default_format", "fixed"):
   82:         df.to_hdf(path, key="df")
   83:         with HDFStore(path) as store:
   84:             assert not store.get_storer("df").is_table
   85:         with pytest.raises(ValueError, match=msg):
   86:             df.to_hdf(path, key="df2", append=True)
   87: 
   88:     with pd.option_context("io.hdf.default_format", "table"):
   89:         df.to_hdf(path, key="df3")
   90:         with HDFStore(path) as store:
   91:             assert store.get_storer("df3").is_table
   92:         df.to_hdf(path, key="df4", append=True)
   93:         with HDFStore(path) as store:
   94:             assert store.get_storer("df4").is_table
   95: 
   96: 
   97: def test_put(setup_path):
   98:     with ensure_clean_store(setup_path) as store:
   99:         ts = Series(
  100:             np.arange(10, dtype=np.float64), index=date_range("2020-01-01", periods=10)
  101:         )
  102:         df = DataFrame(
  103:             np.random.default_rng(2).standard_normal((20, 4)),
  104:             columns=Index(list("ABCD"), dtype=object),
  105:             index=date_range("2000-01-01", periods=20, freq="B"),
  106:         )
  107:         store["a"] = ts
  108:         store["b"] = df[:10]
  109:         store["foo/bar/bah"] = df[:10]
  110:         store["foo"] = df[:10]
  111:         store["/foo"] = df[:10]
  112:         store.put("c", df[:10], format="table")
  113: 
  114:         # not OK, not a table
  115:         msg = "Can only append to Tables"
  116:         with pytest.raises(ValueError, match=msg):
  117:             store.put("b", df[10:], append=True)
  118: 
  119:         # node does not currently exist, test _is_table_type returns False
  120:         # in this case
  121:         _maybe_remove(store, "f")
  122:         with pytest.raises(ValueError, match=msg):
  123:             store.put("f", df[10:], append=True)
  124: 
  125:         # can't put to a table (use append instead)
  126:         with pytest.raises(ValueError, match=msg):
  127:             store.put("c", df[10:], append=True)
  128: 
  129:         # overwrite table
  130:         store.put("c", df[:10], format="table", append=False)
  131:         tm.assert_frame_equal(df[:10], store["c"])
  132: 
  133: 
  134: def test_put_string_index(setup_path):
  135:     with ensure_clean_store(setup_path) as store:
  136:         index = Index([f"I am a very long string index: {i}" for i in range(20)])
  137:         s = Series(np.arange(20), index=index)
  138:         df = DataFrame({"A": s, "B": s})
  139: 
  140:         store["a"] = s
  141:         tm.assert_series_equal(store["a"], s)
  142: 
  143:         store["b"] = df
  144:         tm.assert_frame_equal(store["b"], df)
  145: 
  146:         # mixed length
  147:         index = Index(
  148:             ["abcdefghijklmnopqrstuvwxyz1234567890"]
  149:             + [f"I am a very long string index: {i}" for i in range(20)]
  150:         )
  151:         s = Series(np.arange(21), index=index)
  152:         df = DataFrame({"A": s, "B": s})
  153:         store["a"] = s
  154:         tm.assert_series_equal(store["a"], s)
  155: 
  156:         store["b"] = df
  157:         tm.assert_frame_equal(store["b"], df)
  158: 
  159: 
  160: def test_put_compression(setup_path):
  161:     with ensure_clean_store(setup_path) as store:
  162:         df = DataFrame(
  163:             np.random.default_rng(2).standard_normal((10, 4)),
  164:             columns=Index(list("ABCD"), dtype=object),
  165:             index=date_range("2000-01-01", periods=10, freq="B"),
  166:         )
  167: 
  168:         store.put("c", df, format="table", complib="zlib")
  169:         tm.assert_frame_equal(store["c"], df)
  170: 
  171:         # can't compress if format='fixed'
  172:         msg = "Compression not supported on Fixed format stores"
  173:         with pytest.raises(ValueError, match=msg):
  174:             store.put("b", df, format="fixed", complib="zlib")
  175: 
  176: 
  177: @td.skip_if_windows
  178: def test_put_compression_blosc(setup_path):
  179:     df = DataFrame(
  180:         np.random.default_rng(2).standard_normal((10, 4)),
  181:         columns=Index(list("ABCD"), dtype=object),
  182:         index=date_range("2000-01-01", periods=10, freq="B"),
  183:     )
  184: 
  185:     with ensure_clean_store(setup_path) as store:
  186:         # can't compress if format='fixed'
  187:         msg = "Compression not supported on Fixed format stores"
  188:         with pytest.raises(ValueError, match=msg):
  189:             store.put("b", df, format="fixed", complib="blosc")
  190: 
  191:         store.put("c", df, format="table", complib="blosc")
  192:         tm.assert_frame_equal(store["c"], df)
  193: 
  194: 
  195: def test_put_mixed_type(setup_path):
  196:     df = DataFrame(
  197:         np.random.default_rng(2).standard_normal((10, 4)),
  198:         columns=Index(list("ABCD"), dtype=object),
  199:         index=date_range("2000-01-01", periods=10, freq="B"),
  200:     )
  201:     df["obj1"] = "foo"
  202:     df["obj2"] = "bar"
  203:     df["bool1"] = df["A"] > 0
  204:     df["bool2"] = df["B"] > 0
  205:     df["bool3"] = True
  206:     df["int1"] = 1
  207:     df["int2"] = 2
  208:     df["timestamp1"] = Timestamp("20010102").as_unit("ns")
  209:     df["timestamp2"] = Timestamp("20010103").as_unit("ns")
  210:     df["datetime1"] = Timestamp("20010102").as_unit("ns")
  211:     df["datetime2"] = Timestamp("20010103").as_unit("ns")
  212:     df.loc[df.index[3:6], ["obj1"]] = np.nan
  213:     df = df._consolidate()
  214: 
  215:     with ensure_clean_store(setup_path) as store:
  216:         _maybe_remove(store, "df")
  217: 
  218:         with tm.assert_produces_warning(pd.errors.PerformanceWarning):
  219:             store.put("df", df)
  220: 
  221:         expected = store.get("df")
  222:         tm.assert_frame_equal(expected, df)
  223: 
  224: 
  225: @pytest.mark.parametrize("format", ["table", "fixed"])
  226: @pytest.mark.parametrize(
  227:     "index",
  228:     [
  229:         Index([str(i) for i in range(10)]),
  230:         Index(np.arange(10, dtype=float)),
  231:         Index(np.arange(10)),
  232:         date_range("2020-01-01", periods=10),
  233:         pd.period_range("2020-01-01", periods=10),
  234:     ],
  235: )
  236: def test_store_index_types(setup_path, format, index):
  237:     # GH5386
  238:     # test storing various index types
  239: 
  240:     with ensure_clean_store(setup_path) as store:
  241:         df = DataFrame(
  242:             np.random.default_rng(2).standard_normal((10, 2)),
  243:             columns=list("AB"),
  244:             index=index,
  245:         )
  246:         _maybe_remove(store, "df")
  247:         store.put("df", df, format=format)
  248:         tm.assert_frame_equal(df, store["df"])
  249: 
  250: 
  251: def test_column_multiindex(setup_path):
  252:     # GH 4710
  253:     # recreate multi-indexes properly
  254: 
  255:     index = MultiIndex.from_tuples(
  256:         [("A", "a"), ("A", "b"), ("B", "a"), ("B", "b")], names=["first", "second"]
  257:     )
  258:     df = DataFrame(np.arange(12).reshape(3, 4), columns=index)
  259:     expected = df.set_axis(df.index.to_numpy())
  260: 
  261:     with ensure_clean_store(setup_path) as store:
  262:         store.put("df", df)
  263:         tm.assert_frame_equal(
  264:             store["df"], expected, check_index_type=True, check_column_type=True
  265:         )
  266: 
  267:         store.put("df1", df, format="table")
  268:         tm.assert_frame_equal(
  269:             store["df1"], expected, check_index_type=True, check_column_type=True
  270:         )
  271: 
  272:         msg = re.escape("cannot use a multi-index on axis [1] with data_columns ['A']")
  273:         with pytest.raises(ValueError, match=msg):
  274:             store.put("df2", df, format="table", data_columns=["A"])
  275:         msg = re.escape("cannot use a multi-index on axis [1] with data_columns True")
  276:         with pytest.raises(ValueError, match=msg):
  277:             store.put("df3", df, format="table", data_columns=True)
  278: 
  279:     # appending multi-column on existing table (see GH 6167)
  280:     with ensure_clean_store(setup_path) as store:
  281:         store.append("df2", df)
  282:         store.append("df2", df)
  283: 
  284:         tm.assert_frame_equal(store["df2"], concat((df, df)))
  285: 
  286:     # non_index_axes name
  287:     df = DataFrame(np.arange(12).reshape(3, 4), columns=Index(list("ABCD"), name="foo"))
  288:     expected = df.set_axis(df.index.to_numpy())
  289: 
  290:     with ensure_clean_store(setup_path) as store:
  291:         store.put("df1", df, format="table")
  292:         tm.assert_frame_equal(
  293:             store["df1"], expected, check_index_type=True, check_column_type=True
  294:         )
  295: 
  296: 
  297: def test_store_multiindex(setup_path):
  298:     # validate multi-index names
  299:     # GH 5527
  300:     with ensure_clean_store(setup_path) as store:
  301: 
  302:         def make_index(names=None):
  303:             dti = date_range("2013-12-01", "2013-12-02")
  304:             mi = MultiIndex.from_product([dti, range(2), range(3)], names=names)
  305:             return mi
  306: 
  307:         # no names
  308:         _maybe_remove(store, "df")
  309:         df = DataFrame(np.zeros((12, 2)), columns=["a", "b"], index=make_index())
  310:         store.append("df", df)
  311:         tm.assert_frame_equal(store.select("df"), df)
  312: 
  313:         # partial names
  314:         _maybe_remove(store, "df")
  315:         df = DataFrame(
  316:             np.zeros((12, 2)),
  317:             columns=["a", "b"],
  318:             index=make_index(["date", None, None]),
  319:         )
  320:         store.append("df", df)
  321:         tm.assert_frame_equal(store.select("df"), df)
  322: 
  323:         # series
  324:         _maybe_remove(store, "ser")
  325:         ser = Series(np.zeros(12), index=make_index(["date", None, None]))
  326:         store.append("ser", ser)
  327:         xp = Series(np.zeros(12), index=make_index(["date", "level_1", "level_2"]))
  328:         tm.assert_series_equal(store.select("ser"), xp)
  329: 
  330:         # dup with column
  331:         _maybe_remove(store, "df")
  332:         df = DataFrame(
  333:             np.zeros((12, 2)),
  334:             columns=["a", "b"],
  335:             index=make_index(["date", "a", "t"]),
  336:         )
  337:         msg = "duplicate names/columns in the multi-index when storing as a table"
  338:         with pytest.raises(ValueError, match=msg):
  339:             store.append("df", df)
  340: 
  341:         # dup within level
  342:         _maybe_remove(store, "df")
  343:         df = DataFrame(
  344:             np.zeros((12, 2)),
  345:             columns=["a", "b"],
  346:             index=make_index(["date", "date", "date"]),
  347:         )
  348:         with pytest.raises(ValueError, match=msg):
  349:             store.append("df", df)
  350: 
  351:         # fully names
  352:         _maybe_remove(store, "df")
  353:         df = DataFrame(
  354:             np.zeros((12, 2)),
  355:             columns=["a", "b"],
  356:             index=make_index(["date", "s", "t"]),
  357:         )
  358:         store.append("df", df)
  359:         tm.assert_frame_equal(store.select("df"), df)
  360: 
  361: 
  362: @pytest.mark.parametrize("format", ["fixed", "table"])
  363: def test_store_periodindex(tmp_path, setup_path, format):
  364:     # GH 7796
  365:     # test of PeriodIndex in HDFStore
  366:     df = DataFrame(
  367:         np.random.default_rng(2).standard_normal((5, 1)),
  368:         index=pd.period_range("20220101", freq="M", periods=5),
  369:     )
  370: 
  371:     path = tmp_path / setup_path
  372:     df.to_hdf(path, key="df", mode="w", format=format)
  373:     expected = pd.read_hdf(path, "df")
  374:     tm.assert_frame_equal(df, expected)
