    1: import contextlib
    2: 
    3: import pytest
    4: 
    5: from pandas.compat import is_platform_windows
    6: 
    7: from pandas import DataFrame
    8: import pandas._testing as tm
    9: 
   10: from pandas.io.excel import ExcelWriter
   11: 
   12: xlsxwriter = pytest.importorskip("xlsxwriter")
   13: 
   14: if is_platform_windows():
   15:     pytestmark = pytest.mark.single_cpu
   16: 
   17: 
   18: @pytest.fixture
   19: def ext():
   20:     return ".xlsx"
   21: 
   22: 
   23: def test_column_format(ext):
   24:     # Test that column formats are applied to cells. Test for issue #9167.
   25:     # Applicable to xlsxwriter only.
   26:     openpyxl = pytest.importorskip("openpyxl")
   27: 
   28:     with tm.ensure_clean(ext) as path:
   29:         frame = DataFrame({"A": [123456, 123456], "B": [123456, 123456]})
   30: 
   31:         with ExcelWriter(path) as writer:
   32:             frame.to_excel(writer)
   33: 
   34:             # Add a number format to col B and ensure it is applied to cells.
   35:             num_format = "#,##0"
   36:             write_workbook = writer.book
   37:             write_worksheet = write_workbook.worksheets()[0]
   38:             col_format = write_workbook.add_format({"num_format": num_format})
   39:             write_worksheet.set_column("B:B", None, col_format)
   40: 
   41:         with contextlib.closing(openpyxl.load_workbook(path)) as read_workbook:
   42:             try:
   43:                 read_worksheet = read_workbook["Sheet1"]
   44:             except TypeError:
   45:                 # compat
   46:                 read_worksheet = read_workbook.get_sheet_by_name(name="Sheet1")
   47: 
   48:         # Get the number format from the cell.
   49:         try:
   50:             cell = read_worksheet["B2"]
   51:         except TypeError:
   52:             # compat
   53:             cell = read_worksheet.cell("B2")
   54: 
   55:         try:
   56:             read_num_format = cell.number_format
   57:         except AttributeError:
   58:             read_num_format = cell.style.number_format._format_code
   59: 
   60:         assert read_num_format == num_format
   61: 
   62: 
   63: def test_write_append_mode_raises(ext):
   64:     msg = "Append mode is not supported with xlsxwriter!"
   65: 
   66:     with tm.ensure_clean(ext) as f:
   67:         with pytest.raises(ValueError, match=msg):
   68:             ExcelWriter(f, engine="xlsxwriter", mode="a")
   69: 
   70: 
   71: @pytest.mark.parametrize("nan_inf_to_errors", [True, False])
   72: def test_engine_kwargs(ext, nan_inf_to_errors):
   73:     # GH 42286
   74:     engine_kwargs = {"options": {"nan_inf_to_errors": nan_inf_to_errors}}
   75:     with tm.ensure_clean(ext) as f:
   76:         with ExcelWriter(f, engine="xlsxwriter", engine_kwargs=engine_kwargs) as writer:
   77:             assert writer.book.nan_inf_to_errors == nan_inf_to_errors
   78: 
   79: 
   80: def test_book_and_sheets_consistent(ext):
   81:     # GH#45687 - Ensure sheets is updated if user modifies book
   82:     with tm.ensure_clean(ext) as f:
   83:         with ExcelWriter(f, engine="xlsxwriter") as writer:
   84:             assert writer.sheets == {}
   85:             sheet = writer.book.add_worksheet("test_name")
   86:             assert writer.sheets == {"test_name": sheet}
