    1: from datetime import (
    2:     date,
    3:     datetime,
    4: )
    5: import re
    6: 
    7: import pytest
    8: 
    9: from pandas.compat import is_platform_windows
   10: 
   11: import pandas as pd
   12: import pandas._testing as tm
   13: 
   14: from pandas.io.excel import ExcelWriter
   15: 
   16: odf = pytest.importorskip("odf")
   17: 
   18: if is_platform_windows():
   19:     pytestmark = pytest.mark.single_cpu
   20: 
   21: 
   22: @pytest.fixture
   23: def ext():
   24:     return ".ods"
   25: 
   26: 
   27: def test_write_append_mode_raises(ext):
   28:     msg = "Append mode is not supported with odf!"
   29: 
   30:     with tm.ensure_clean(ext) as f:
   31:         with pytest.raises(ValueError, match=msg):
   32:             ExcelWriter(f, engine="odf", mode="a")
   33: 
   34: 
   35: @pytest.mark.parametrize("engine_kwargs", [None, {"kwarg": 1}])
   36: def test_engine_kwargs(ext, engine_kwargs):
   37:     # GH 42286
   38:     # GH 43445
   39:     # test for error: OpenDocumentSpreadsheet does not accept any arguments
   40:     with tm.ensure_clean(ext) as f:
   41:         if engine_kwargs is not None:
   42:             error = re.escape(
   43:                 "OpenDocumentSpreadsheet() got an unexpected keyword argument 'kwarg'"
   44:             )
   45:             with pytest.raises(
   46:                 TypeError,
   47:                 match=error,
   48:             ):
   49:                 ExcelWriter(f, engine="odf", engine_kwargs=engine_kwargs)
   50:         else:
   51:             with ExcelWriter(f, engine="odf", engine_kwargs=engine_kwargs) as _:
   52:                 pass
   53: 
   54: 
   55: def test_book_and_sheets_consistent(ext):
   56:     # GH#45687 - Ensure sheets is updated if user modifies book
   57:     with tm.ensure_clean(ext) as f:
   58:         with ExcelWriter(f) as writer:
   59:             assert writer.sheets == {}
   60:             table = odf.table.Table(name="test_name")
   61:             writer.book.spreadsheet.addElement(table)
   62:             assert writer.sheets == {"test_name": table}
   63: 
   64: 
   65: @pytest.mark.parametrize(
   66:     ["value", "cell_value_type", "cell_value_attribute", "cell_value"],
   67:     argvalues=[
   68:         (True, "boolean", "boolean-value", "true"),
   69:         ("test string", "string", "string-value", "test string"),
   70:         (1, "float", "value", "1"),
   71:         (1.5, "float", "value", "1.5"),
   72:         (
   73:             datetime(2010, 10, 10, 10, 10, 10),
   74:             "date",
   75:             "date-value",
   76:             "2010-10-10T10:10:10",
   77:         ),
   78:         (date(2010, 10, 10), "date", "date-value", "2010-10-10"),
   79:     ],
   80: )
   81: def test_cell_value_type(ext, value, cell_value_type, cell_value_attribute, cell_value):
   82:     # GH#54994 ODS: cell attributes should follow specification
   83:     # http://docs.oasis-open.org/office/v1.2/os/OpenDocument-v1.2-os-part1.html#refTable13
   84:     from odf.namespaces import OFFICENS
   85:     from odf.table import (
   86:         TableCell,
   87:         TableRow,
   88:     )
   89: 
   90:     table_cell_name = TableCell().qname
   91: 
   92:     with tm.ensure_clean(ext) as f:
   93:         pd.DataFrame([[value]]).to_excel(f, header=False, index=False)
   94: 
   95:         with pd.ExcelFile(f) as wb:
   96:             sheet = wb._reader.get_sheet_by_index(0)
   97:             sheet_rows = sheet.getElementsByType(TableRow)
   98:             sheet_cells = [
   99:                 x
  100:                 for x in sheet_rows[0].childNodes
  101:                 if hasattr(x, "qname") and x.qname == table_cell_name
  102:             ]
  103: 
  104:             cell = sheet_cells[0]
  105:             assert cell.attributes.get((OFFICENS, "value-type")) == cell_value_type
  106:             assert cell.attributes.get((OFFICENS, cell_value_attribute)) == cell_value
