    1: from __future__ import annotations
    2: 
    3: from io import (
    4:     BytesIO,
    5:     StringIO,
    6: )
    7: import os
    8: 
    9: import numpy as np
   10: import pytest
   11: 
   12: import pandas.util._test_decorators as td
   13: 
   14: from pandas import (
   15:     NA,
   16:     DataFrame,
   17:     Index,
   18: )
   19: import pandas._testing as tm
   20: 
   21: from pandas.io.common import get_handle
   22: from pandas.io.xml import read_xml
   23: 
   24: # CHECKLIST
   25: 
   26: # [x] - ValueError: "Values for parser can only be lxml or etree."
   27: 
   28: # etree
   29: # [x] - ImportError: "lxml not found, please install or use the etree parser."
   30: # [X] - TypeError: "...is not a valid type for attr_cols"
   31: # [X] - TypeError: "...is not a valid type for elem_cols"
   32: # [X] - LookupError: "unknown encoding"
   33: # [X] - KeyError: "...is not included in namespaces"
   34: # [X] - KeyError: "no valid column"
   35: # [X] - ValueError: "To use stylesheet, you need lxml installed..."
   36: # []  - OSError: (NEED PERMISSOIN ISSUE, DISK FULL, ETC.)
   37: # [X] - FileNotFoundError: "No such file or directory"
   38: # [X] - PermissionError: "Forbidden"
   39: 
   40: # lxml
   41: # [X] - TypeError: "...is not a valid type for attr_cols"
   42: # [X] - TypeError: "...is not a valid type for elem_cols"
   43: # [X] - LookupError: "unknown encoding"
   44: # []  - OSError: (NEED PERMISSOIN ISSUE, DISK FULL, ETC.)
   45: # [X] - FileNotFoundError: "No such file or directory"
   46: # [X] - KeyError: "...is not included in namespaces"
   47: # [X] - KeyError: "no valid column"
   48: # [X] - ValueError: "stylesheet is not a url, file, or xml string."
   49: # []  - LookupError: (NEED WRONG ENCODING FOR FILE OUTPUT)
   50: # []  - URLError: (USUALLY DUE TO NETWORKING)
   51: # []  - HTTPError: (NEED AN ONLINE STYLESHEET)
   52: # [X] - OSError: "failed to load external entity"
   53: # [X] - XMLSyntaxError: "Opening and ending tag mismatch"
   54: # [X] - XSLTApplyError: "Cannot resolve URI"
   55: # [X] - XSLTParseError: "failed to compile"
   56: # [X] - PermissionError: "Forbidden"
   57: 
   58: 
   59: @pytest.fixture
   60: def geom_df():
   61:     return DataFrame(
   62:         {
   63:             "shape": ["square", "circle", "triangle"],
   64:             "degrees": [360, 360, 180],
   65:             "sides": [4, np.nan, 3],
   66:         }
   67:     )
   68: 
   69: 
   70: @pytest.fixture
   71: def planet_df():
   72:     return DataFrame(
   73:         {
   74:             "planet": [
   75:                 "Mercury",
   76:                 "Venus",
   77:                 "Earth",
   78:                 "Mars",
   79:                 "Jupiter",
   80:                 "Saturn",
   81:                 "Uranus",
   82:                 "Neptune",
   83:             ],
   84:             "type": [
   85:                 "terrestrial",
   86:                 "terrestrial",
   87:                 "terrestrial",
   88:                 "terrestrial",
   89:                 "gas giant",
   90:                 "gas giant",
   91:                 "ice giant",
   92:                 "ice giant",
   93:             ],
   94:             "location": [
   95:                 "inner",
   96:                 "inner",
   97:                 "inner",
   98:                 "inner",
   99:                 "outer",
  100:                 "outer",
  101:                 "outer",
  102:                 "outer",
  103:             ],
  104:             "mass": [
  105:                 0.330114,
  106:                 4.86747,
  107:                 5.97237,
  108:                 0.641712,
  109:                 1898.187,
  110:                 568.3174,
  111:                 86.8127,
  112:                 102.4126,
  113:             ],
  114:         }
  115:     )
  116: 
  117: 
  118: @pytest.fixture
  119: def from_file_expected():
  120:     return """\
  121: <?xml version='1.0' encoding='utf-8'?>
  122: <data>
  123:   <row>
  124:     <index>0</index>
  125:     <category>cooking</category>
  126:     <title>Everyday Italian</title>
  127:     <author>Giada De Laurentiis</author>
  128:     <year>2005</year>
  129:     <price>30.0</price>
  130:   </row>
  131:   <row>
  132:     <index>1</index>
  133:     <category>children</category>
  134:     <title>Harry Potter</title>
  135:     <author>J K. Rowling</author>
  136:     <year>2005</year>
  137:     <price>29.99</price>
  138:   </row>
  139:   <row>
  140:     <index>2</index>
  141:     <category>web</category>
  142:     <title>Learning XML</title>
  143:     <author>Erik T. Ray</author>
  144:     <year>2003</year>
  145:     <price>39.95</price>
  146:   </row>
  147: </data>"""
  148: 
  149: 
  150: def equalize_decl(doc):
  151:     # etree and lxml differ on quotes and case in xml declaration
  152:     if doc is not None:
  153:         doc = doc.replace(
  154:             '<?xml version="1.0" encoding="utf-8"?',
  155:             "<?xml version='1.0' encoding='utf-8'?",
  156:         )
  157:     return doc
  158: 
  159: 
  160: @pytest.fixture(params=["rb", "r"])
  161: def mode(request):
  162:     return request.param
  163: 
  164: 
  165: @pytest.fixture(params=[pytest.param("lxml", marks=td.skip_if_no("lxml")), "etree"])
  166: def parser(request):
  167:     return request.param
  168: 
  169: 
  170: # FILE OUTPUT
  171: 
  172: 
  173: def test_file_output_str_read(xml_books, parser, from_file_expected):
  174:     df_file = read_xml(xml_books, parser=parser)
  175: 
  176:     with tm.ensure_clean("test.xml") as path:
  177:         df_file.to_xml(path, parser=parser)
  178:         with open(path, "rb") as f:
  179:             output = f.read().decode("utf-8").strip()
  180: 
  181:         output = equalize_decl(output)
  182: 
  183:         assert output == from_file_expected
  184: 
  185: 
  186: def test_file_output_bytes_read(xml_books, parser, from_file_expected):
  187:     df_file = read_xml(xml_books, parser=parser)
  188: 
  189:     with tm.ensure_clean("test.xml") as path:
  190:         df_file.to_xml(path, parser=parser)
  191:         with open(path, "rb") as f:
  192:             output = f.read().decode("utf-8").strip()
  193: 
  194:         output = equalize_decl(output)
  195: 
  196:         assert output == from_file_expected
  197: 
  198: 
  199: def test_str_output(xml_books, parser, from_file_expected):
  200:     df_file = read_xml(xml_books, parser=parser)
  201: 
  202:     output = df_file.to_xml(parser=parser)
  203:     output = equalize_decl(output)
  204: 
  205:     assert output == from_file_expected
  206: 
  207: 
  208: def test_wrong_file_path(parser, geom_df):
  209:     path = "/my/fake/path/output.xml"
  210: 
  211:     with pytest.raises(
  212:         OSError,
  213:         match=(r"Cannot save file into a non-existent directory: .*path"),
  214:     ):
  215:         geom_df.to_xml(path, parser=parser)
  216: 
  217: 
  218: # INDEX
  219: 
  220: 
  221: def test_index_false(xml_books, parser):
  222:     expected = """\
  223: <?xml version='1.0' encoding='utf-8'?>
  224: <data>
  225:   <row>
  226:     <category>cooking</category>
  227:     <title>Everyday Italian</title>
  228:     <author>Giada De Laurentiis</author>
  229:     <year>2005</year>
  230:     <price>30.0</price>
  231:   </row>
  232:   <row>
  233:     <category>children</category>
  234:     <title>Harry Potter</title>
  235:     <author>J K. Rowling</author>
  236:     <year>2005</year>
  237:     <price>29.99</price>
  238:   </row>
  239:   <row>
  240:     <category>web</category>
  241:     <title>Learning XML</title>
  242:     <author>Erik T. Ray</author>
  243:     <year>2003</year>
  244:     <price>39.95</price>
  245:   </row>
  246: </data>"""
  247: 
  248:     df_file = read_xml(xml_books, parser=parser)
  249: 
  250:     with tm.ensure_clean("test.xml") as path:
  251:         df_file.to_xml(path, index=False, parser=parser)
  252:         with open(path, "rb") as f:
  253:             output = f.read().decode("utf-8").strip()
  254: 
  255:         output = equalize_decl(output)
  256: 
  257:         assert output == expected
  258: 
  259: 
  260: def test_index_false_rename_row_root(xml_books, parser):
  261:     expected = """\
  262: <?xml version='1.0' encoding='utf-8'?>
  263: <books>
  264:   <book>
  265:     <category>cooking</category>
  266:     <title>Everyday Italian</title>
  267:     <author>Giada De Laurentiis</author>
  268:     <year>2005</year>
  269:     <price>30.0</price>
  270:   </book>
  271:   <book>
  272:     <category>children</category>
  273:     <title>Harry Potter</title>
  274:     <author>J K. Rowling</author>
  275:     <year>2005</year>
  276:     <price>29.99</price>
  277:   </book>
  278:   <book>
  279:     <category>web</category>
  280:     <title>Learning XML</title>
  281:     <author>Erik T. Ray</author>
  282:     <year>2003</year>
  283:     <price>39.95</price>
  284:   </book>
  285: </books>"""
  286: 
  287:     df_file = read_xml(xml_books, parser=parser)
  288: 
  289:     with tm.ensure_clean("test.xml") as path:
  290:         df_file.to_xml(
  291:             path, index=False, root_name="books", row_name="book", parser=parser
  292:         )
  293:         with open(path, "rb") as f:
  294:             output = f.read().decode("utf-8").strip()
  295: 
  296:         output = equalize_decl(output)
  297: 
  298:         assert output == expected
  299: 
  300: 
  301: @pytest.mark.parametrize(
  302:     "offset_index", [list(range(10, 13)), [str(i) for i in range(10, 13)]]
  303: )
  304: def test_index_false_with_offset_input_index(parser, offset_index, geom_df):
  305:     """
  306:     Tests that the output does not contain the `<index>` field when the index of the
  307:     input Dataframe has an offset.
  308: 
  309:     This is a regression test for issue #42458.
  310:     """
  311: 
  312:     expected = """\
  313: <?xml version='1.0' encoding='utf-8'?>
  314: <data>
  315:   <row>
  316:     <shape>square</shape>
  317:     <degrees>360</degrees>
  318:     <sides>4.0</sides>
  319:   </row>
  320:   <row>
  321:     <shape>circle</shape>
  322:     <degrees>360</degrees>
  323:     <sides/>
  324:   </row>
  325:   <row>
  326:     <shape>triangle</shape>
  327:     <degrees>180</degrees>
  328:     <sides>3.0</sides>
  329:   </row>
  330: </data>"""
  331: 
  332:     offset_geom_df = geom_df.copy()
  333:     offset_geom_df.index = Index(offset_index)
  334:     output = offset_geom_df.to_xml(index=False, parser=parser)
  335:     output = equalize_decl(output)
  336: 
  337:     assert output == expected
  338: 
  339: 
  340: # NA_REP
  341: 
  342: na_expected = """\
  343: <?xml version='1.0' encoding='utf-8'?>
  344: <data>
  345:   <row>
  346:     <index>0</index>
  347:     <shape>square</shape>
  348:     <degrees>360</degrees>
  349:     <sides>4.0</sides>
  350:   </row>
  351:   <row>
  352:     <index>1</index>
  353:     <shape>circle</shape>
  354:     <degrees>360</degrees>
  355:     <sides/>
  356:   </row>
  357:   <row>
  358:     <index>2</index>
  359:     <shape>triangle</shape>
  360:     <degrees>180</degrees>
  361:     <sides>3.0</sides>
  362:   </row>
  363: </data>"""
  364: 
  365: 
  366: def test_na_elem_output(parser, geom_df):
  367:     output = geom_df.to_xml(parser=parser)
  368:     output = equalize_decl(output)
  369: 
  370:     assert output == na_expected
  371: 
  372: 
  373: def test_na_empty_str_elem_option(parser, geom_df):
  374:     output = geom_df.to_xml(na_rep="", parser=parser)
  375:     output = equalize_decl(output)
  376: 
  377:     assert output == na_expected
  378: 
  379: 
  380: def test_na_empty_elem_option(parser, geom_df):
  381:     expected = """\
  382: <?xml version='1.0' encoding='utf-8'?>
  383: <data>
  384:   <row>
  385:     <index>0</index>
  386:     <shape>square</shape>
  387:     <degrees>360</degrees>
  388:     <sides>4.0</sides>
  389:   </row>
  390:   <row>
  391:     <index>1</index>
  392:     <shape>circle</shape>
  393:     <degrees>360</degrees>
  394:     <sides>0.0</sides>
  395:   </row>
  396:   <row>
  397:     <index>2</index>
  398:     <shape>triangle</shape>
  399:     <degrees>180</degrees>
  400:     <sides>3.0</sides>
  401:   </row>
  402: </data>"""
  403: 
  404:     output = geom_df.to_xml(na_rep="0.0", parser=parser)
  405:     output = equalize_decl(output)
  406: 
  407:     assert output == expected
  408: 
  409: 
  410: # ATTR_COLS
  411: 
  412: 
  413: def test_attrs_cols_nan_output(parser, geom_df):
  414:     expected = """\
  415: <?xml version='1.0' encoding='utf-8'?>
  416: <data>
  417:   <row index="0" shape="square" degrees="360" sides="4.0"/>
  418:   <row index="1" shape="circle" degrees="360"/>
  419:   <row index="2" shape="triangle" degrees="180" sides="3.0"/>
  420: </data>"""
  421: 
  422:     output = geom_df.to_xml(attr_cols=["shape", "degrees", "sides"], parser=parser)
  423:     output = equalize_decl(output)
  424: 
  425:     assert output == expected
  426: 
  427: 
  428: def test_attrs_cols_prefix(parser, geom_df):
  429:     expected = """\
  430: <?xml version='1.0' encoding='utf-8'?>
  431: <doc:data xmlns:doc="http://example.xom">
  432:   <doc:row doc:index="0" doc:shape="square" \
  433: doc:degrees="360" doc:sides="4.0"/>
  434:   <doc:row doc:index="1" doc:shape="circle" \
  435: doc:degrees="360"/>
  436:   <doc:row doc:index="2" doc:shape="triangle" \
  437: doc:degrees="180" doc:sides="3.0"/>
  438: </doc:data>"""
  439: 
  440:     output = geom_df.to_xml(
  441:         attr_cols=["index", "shape", "degrees", "sides"],
  442:         namespaces={"doc": "http://example.xom"},
  443:         prefix="doc",
  444:         parser=parser,
  445:     )
  446:     output = equalize_decl(output)
  447: 
  448:     assert output == expected
  449: 
  450: 
  451: def test_attrs_unknown_column(parser, geom_df):
  452:     with pytest.raises(KeyError, match=("no valid column")):
  453:         geom_df.to_xml(attr_cols=["shape", "degree", "sides"], parser=parser)
  454: 
  455: 
  456: def test_attrs_wrong_type(parser, geom_df):
  457:     with pytest.raises(TypeError, match=("is not a valid type for attr_cols")):
  458:         geom_df.to_xml(attr_cols='"shape", "degree", "sides"', parser=parser)
  459: 
  460: 
  461: # ELEM_COLS
  462: 
  463: 
  464: def test_elems_cols_nan_output(parser, geom_df):
  465:     elems_cols_expected = """\
  466: <?xml version='1.0' encoding='utf-8'?>
  467: <data>
  468:   <row>
  469:     <degrees>360</degrees>
  470:     <sides>4.0</sides>
  471:     <shape>square</shape>
  472:   </row>
  473:   <row>
  474:     <degrees>360</degrees>
  475:     <sides/>
  476:     <shape>circle</shape>
  477:   </row>
  478:   <row>
  479:     <degrees>180</degrees>
  480:     <sides>3.0</sides>
  481:     <shape>triangle</shape>
  482:   </row>
  483: </data>"""
  484: 
  485:     output = geom_df.to_xml(
  486:         index=False, elem_cols=["degrees", "sides", "shape"], parser=parser
  487:     )
  488:     output = equalize_decl(output)
  489: 
  490:     assert output == elems_cols_expected
  491: 
  492: 
  493: def test_elems_unknown_column(parser, geom_df):
  494:     with pytest.raises(KeyError, match=("no valid column")):
  495:         geom_df.to_xml(elem_cols=["shape", "degree", "sides"], parser=parser)
  496: 
  497: 
  498: def test_elems_wrong_type(parser, geom_df):
  499:     with pytest.raises(TypeError, match=("is not a valid type for elem_cols")):
  500:         geom_df.to_xml(elem_cols='"shape", "degree", "sides"', parser=parser)
  501: 
  502: 
  503: def test_elems_and_attrs_cols(parser, geom_df):
  504:     elems_cols_expected = """\
  505: <?xml version='1.0' encoding='utf-8'?>
  506: <data>
  507:   <row shape="square">
  508:     <degrees>360</degrees>
  509:     <sides>4.0</sides>
  510:   </row>
  511:   <row shape="circle">
  512:     <degrees>360</degrees>
  513:     <sides/>
  514:   </row>
  515:   <row shape="triangle">
  516:     <degrees>180</degrees>
  517:     <sides>3.0</sides>
  518:   </row>
  519: </data>"""
  520: 
  521:     output = geom_df.to_xml(
  522:         index=False,
  523:         elem_cols=["degrees", "sides"],
  524:         attr_cols=["shape"],
  525:         parser=parser,
  526:     )
  527:     output = equalize_decl(output)
  528: 
  529:     assert output == elems_cols_expected
  530: 
  531: 
  532: # HIERARCHICAL COLUMNS
  533: 
  534: 
  535: def test_hierarchical_columns(parser, planet_df):
  536:     expected = """\
  537: <?xml version='1.0' encoding='utf-8'?>
  538: <data>
  539:   <row>
  540:     <location>inner</location>
  541:     <type>terrestrial</type>
  542:     <count_mass>4</count_mass>
  543:     <sum_mass>11.81</sum_mass>
  544:     <mean_mass>2.95</mean_mass>
  545:   </row>
  546:   <row>
  547:     <location>outer</location>
  548:     <type>gas giant</type>
  549:     <count_mass>2</count_mass>
  550:     <sum_mass>2466.5</sum_mass>
  551:     <mean_mass>1233.25</mean_mass>
  552:   </row>
  553:   <row>
  554:     <location>outer</location>
  555:     <type>ice giant</type>
  556:     <count_mass>2</count_mass>
  557:     <sum_mass>189.23</sum_mass>
  558:     <mean_mass>94.61</mean_mass>
  559:   </row>
  560:   <row>
  561:     <location>All</location>
  562:     <type/>
  563:     <count_mass>8</count_mass>
  564:     <sum_mass>2667.54</sum_mass>
  565:     <mean_mass>333.44</mean_mass>
  566:   </row>
  567: </data>"""
  568: 
  569:     pvt = planet_df.pivot_table(
  570:         index=["location", "type"],
  571:         values="mass",
  572:         aggfunc=["count", "sum", "mean"],
  573:         margins=True,
  574:     ).round(2)
  575: 
  576:     output = pvt.to_xml(parser=parser)
  577:     output = equalize_decl(output)
  578: 
  579:     assert output == expected
  580: 
  581: 
  582: def test_hierarchical_attrs_columns(parser, planet_df):
  583:     expected = """\
  584: <?xml version='1.0' encoding='utf-8'?>
  585: <data>
  586:   <row location="inner" type="terrestrial" count_mass="4" \
  587: sum_mass="11.81" mean_mass="2.95"/>
  588:   <row location="outer" type="gas giant" count_mass="2" \
  589: sum_mass="2466.5" mean_mass="1233.25"/>
  590:   <row location="outer" type="ice giant" count_mass="2" \
  591: sum_mass="189.23" mean_mass="94.61"/>
  592:   <row location="All" type="" count_mass="8" \
  593: sum_mass="2667.54" mean_mass="333.44"/>
  594: </data>"""
  595: 
  596:     pvt = planet_df.pivot_table(
  597:         index=["location", "type"],
  598:         values="mass",
  599:         aggfunc=["count", "sum", "mean"],
  600:         margins=True,
  601:     ).round(2)
  602: 
  603:     output = pvt.to_xml(attr_cols=list(pvt.reset_index().columns.values), parser=parser)
  604:     output = equalize_decl(output)
  605: 
  606:     assert output == expected
  607: 
  608: 
  609: # MULTIINDEX
  610: 
  611: 
  612: def test_multi_index(parser, planet_df):
  613:     expected = """\
  614: <?xml version='1.0' encoding='utf-8'?>
  615: <data>
  616:   <row>
  617:     <location>inner</location>
  618:     <type>terrestrial</type>
  619:     <count>4</count>
  620:     <sum>11.81</sum>
  621:     <mean>2.95</mean>
  622:   </row>
  623:   <row>
  624:     <location>outer</location>
  625:     <type>gas giant</type>
  626:     <count>2</count>
  627:     <sum>2466.5</sum>
  628:     <mean>1233.25</mean>
  629:   </row>
  630:   <row>
  631:     <location>outer</location>
  632:     <type>ice giant</type>
  633:     <count>2</count>
  634:     <sum>189.23</sum>
  635:     <mean>94.61</mean>
  636:   </row>
  637: </data>"""
  638: 
  639:     agg = (
  640:         planet_df.groupby(["location", "type"])["mass"]
  641:         .agg(["count", "sum", "mean"])
  642:         .round(2)
  643:     )
  644: 
  645:     output = agg.to_xml(parser=parser)
  646:     output = equalize_decl(output)
  647: 
  648:     assert output == expected
  649: 
  650: 
  651: def test_multi_index_attrs_cols(parser, planet_df):
  652:     expected = """\
  653: <?xml version='1.0' encoding='utf-8'?>
  654: <data>
  655:   <row location="inner" type="terrestrial" count="4" \
  656: sum="11.81" mean="2.95"/>
  657:   <row location="outer" type="gas giant" count="2" \
  658: sum="2466.5" mean="1233.25"/>
  659:   <row location="outer" type="ice giant" count="2" \
  660: sum="189.23" mean="94.61"/>
  661: </data>"""
  662: 
  663:     agg = (
  664:         planet_df.groupby(["location", "type"])["mass"]
  665:         .agg(["count", "sum", "mean"])
  666:         .round(2)
  667:     )
  668:     output = agg.to_xml(attr_cols=list(agg.reset_index().columns.values), parser=parser)
  669:     output = equalize_decl(output)
  670: 
  671:     assert output == expected
  672: 
  673: 
  674: # NAMESPACE
  675: 
  676: 
  677: def test_default_namespace(parser, geom_df):
  678:     expected = """\
  679: <?xml version='1.0' encoding='utf-8'?>
  680: <data xmlns="http://example.com">
  681:   <row>
  682:     <index>0</index>
  683:     <shape>square</shape>
  684:     <degrees>360</degrees>
  685:     <sides>4.0</sides>
  686:   </row>
  687:   <row>
  688:     <index>1</index>
  689:     <shape>circle</shape>
  690:     <degrees>360</degrees>
  691:     <sides/>
  692:   </row>
  693:   <row>
  694:     <index>2</index>
  695:     <shape>triangle</shape>
  696:     <degrees>180</degrees>
  697:     <sides>3.0</sides>
  698:   </row>
  699: </data>"""
  700: 
  701:     output = geom_df.to_xml(namespaces={"": "http://example.com"}, parser=parser)
  702:     output = equalize_decl(output)
  703: 
  704:     assert output == expected
  705: 
  706: 
  707: def test_unused_namespaces(parser, geom_df):
  708:     expected = """\
  709: <?xml version='1.0' encoding='utf-8'?>
  710: <data xmlns:oth="http://other.org" xmlns:ex="http://example.com">
  711:   <row>
  712:     <index>0</index>
  713:     <shape>square</shape>
  714:     <degrees>360</degrees>
  715:     <sides>4.0</sides>
  716:   </row>
  717:   <row>
  718:     <index>1</index>
  719:     <shape>circle</shape>
  720:     <degrees>360</degrees>
  721:     <sides/>
  722:   </row>
  723:   <row>
  724:     <index>2</index>
  725:     <shape>triangle</shape>
  726:     <degrees>180</degrees>
  727:     <sides>3.0</sides>
  728:   </row>
  729: </data>"""
  730: 
  731:     output = geom_df.to_xml(
  732:         namespaces={"oth": "http://other.org", "ex": "http://example.com"},
  733:         parser=parser,
  734:     )
  735:     output = equalize_decl(output)
  736: 
  737:     assert output == expected
  738: 
  739: 
  740: # PREFIX
  741: 
  742: 
  743: def test_namespace_prefix(parser, geom_df):
  744:     expected = """\
  745: <?xml version='1.0' encoding='utf-8'?>
  746: <doc:data xmlns:doc="http://example.com">
  747:   <doc:row>
  748:     <doc:index>0</doc:index>
  749:     <doc:shape>square</doc:shape>
  750:     <doc:degrees>360</doc:degrees>
  751:     <doc:sides>4.0</doc:sides>
  752:   </doc:row>
  753:   <doc:row>
  754:     <doc:index>1</doc:index>
  755:     <doc:shape>circle</doc:shape>
  756:     <doc:degrees>360</doc:degrees>
  757:     <doc:sides/>
  758:   </doc:row>
  759:   <doc:row>
  760:     <doc:index>2</doc:index>
  761:     <doc:shape>triangle</doc:shape>
  762:     <doc:degrees>180</doc:degrees>
  763:     <doc:sides>3.0</doc:sides>
  764:   </doc:row>
  765: </doc:data>"""
  766: 
  767:     output = geom_df.to_xml(
  768:         namespaces={"doc": "http://example.com"}, prefix="doc", parser=parser
  769:     )
  770:     output = equalize_decl(output)
  771: 
  772:     assert output == expected
  773: 
  774: 
  775: def test_missing_prefix_in_nmsp(parser, geom_df):
  776:     with pytest.raises(KeyError, match=("doc is not included in namespaces")):
  777:         geom_df.to_xml(
  778:             namespaces={"": "http://example.com"}, prefix="doc", parser=parser
  779:         )
  780: 
  781: 
  782: def test_namespace_prefix_and_default(parser, geom_df):
  783:     expected = """\
  784: <?xml version='1.0' encoding='utf-8'?>
  785: <doc:data xmlns:doc="http://other.org" xmlns="http://example.com">
  786:   <doc:row>
  787:     <doc:index>0</doc:index>
  788:     <doc:shape>square</doc:shape>
  789:     <doc:degrees>360</doc:degrees>
  790:     <doc:sides>4.0</doc:sides>
  791:   </doc:row>
  792:   <doc:row>
  793:     <doc:index>1</doc:index>
  794:     <doc:shape>circle</doc:shape>
  795:     <doc:degrees>360</doc:degrees>
  796:     <doc:sides/>
  797:   </doc:row>
  798:   <doc:row>
  799:     <doc:index>2</doc:index>
  800:     <doc:shape>triangle</doc:shape>
  801:     <doc:degrees>180</doc:degrees>
  802:     <doc:sides>3.0</doc:sides>
  803:   </doc:row>
  804: </doc:data>"""
  805: 
  806:     output = geom_df.to_xml(
  807:         namespaces={"": "http://example.com", "doc": "http://other.org"},
  808:         prefix="doc",
  809:         parser=parser,
  810:     )
  811:     output = equalize_decl(output)
  812: 
  813:     assert output == expected
  814: 
  815: 
  816: # ENCODING
  817: 
  818: encoding_expected = """\
  819: <?xml version='1.0' encoding='ISO-8859-1'?>
  820: <data>
  821:   <row>
  822:     <index>0</index>
  823:     <rank>1</rank>
  824:     <malename>JosГ©</malename>
  825:     <femalename>SofГ­a</femalename>
  826:   </row>
  827:   <row>
  828:     <index>1</index>
  829:     <rank>2</rank>
  830:     <malename>Luis</malename>
  831:     <femalename>Valentina</femalename>
  832:   </row>
  833:   <row>
  834:     <index>2</index>
  835:     <rank>3</rank>
  836:     <malename>Carlos</malename>
  837:     <femalename>Isabella</femalename>
  838:   </row>
  839:   <row>
  840:     <index>3</index>
  841:     <rank>4</rank>
  842:     <malename>Juan</malename>
  843:     <femalename>Camila</femalename>
  844:   </row>
  845:   <row>
  846:     <index>4</index>
  847:     <rank>5</rank>
  848:     <malename>Jorge</malename>
  849:     <femalename>Valeria</femalename>
  850:   </row>
  851: </data>"""
  852: 
  853: 
  854: def test_encoding_option_str(xml_baby_names, parser):
  855:     df_file = read_xml(xml_baby_names, parser=parser, encoding="ISO-8859-1").head(5)
  856: 
  857:     output = df_file.to_xml(encoding="ISO-8859-1", parser=parser)
  858: 
  859:     if output is not None:
  860:         # etree and lxml differ on quotes and case in xml declaration
  861:         output = output.replace(
  862:             '<?xml version="1.0" encoding="ISO-8859-1"?',
  863:             "<?xml version='1.0' encoding='ISO-8859-1'?",
  864:         )
  865: 
  866:     assert output == encoding_expected
  867: 
  868: 
  869: def test_correct_encoding_file(xml_baby_names):
  870:     pytest.importorskip("lxml")
  871:     df_file = read_xml(xml_baby_names, encoding="ISO-8859-1", parser="lxml")
  872: 
  873:     with tm.ensure_clean("test.xml") as path:
  874:         df_file.to_xml(path, index=False, encoding="ISO-8859-1", parser="lxml")
  875: 
  876: 
  877: @pytest.mark.parametrize("encoding", ["UTF-8", "UTF-16", "ISO-8859-1"])
  878: def test_wrong_encoding_option_lxml(xml_baby_names, parser, encoding):
  879:     pytest.importorskip("lxml")
  880:     df_file = read_xml(xml_baby_names, encoding="ISO-8859-1", parser="lxml")
  881: 
  882:     with tm.ensure_clean("test.xml") as path:
  883:         df_file.to_xml(path, index=False, encoding=encoding, parser=parser)
  884: 
  885: 
  886: def test_misspelled_encoding(parser, geom_df):
  887:     with pytest.raises(LookupError, match=("unknown encoding")):
  888:         geom_df.to_xml(encoding="uft-8", parser=parser)
  889: 
  890: 
  891: # PRETTY PRINT
  892: 
  893: 
  894: def test_xml_declaration_pretty_print(geom_df):
  895:     pytest.importorskip("lxml")
  896:     expected = """\
  897: <data>
  898:   <row>
  899:     <index>0</index>
  900:     <shape>square</shape>
  901:     <degrees>360</degrees>
  902:     <sides>4.0</sides>
  903:   </row>
  904:   <row>
  905:     <index>1</index>
  906:     <shape>circle</shape>
  907:     <degrees>360</degrees>
  908:     <sides/>
  909:   </row>
  910:   <row>
  911:     <index>2</index>
  912:     <shape>triangle</shape>
  913:     <degrees>180</degrees>
  914:     <sides>3.0</sides>
  915:   </row>
  916: </data>"""
  917: 
  918:     output = geom_df.to_xml(xml_declaration=False)
  919: 
  920:     assert output == expected
  921: 
  922: 
  923: def test_no_pretty_print_with_decl(parser, geom_df):
  924:     expected = (
  925:         "<?xml version='1.0' encoding='utf-8'?>\n"
  926:         "<data><row><index>0</index><shape>square</shape>"
  927:         "<degrees>360</degrees><sides>4.0</sides></row><row>"
  928:         "<index>1</index><shape>circle</shape><degrees>360"
  929:         "</degrees><sides/></row><row><index>2</index><shape>"
  930:         "triangle</shape><degrees>180</degrees><sides>3.0</sides>"
  931:         "</row></data>"
  932:     )
  933: 
  934:     output = geom_df.to_xml(pretty_print=False, parser=parser)
  935:     output = equalize_decl(output)
  936: 
  937:     # etree adds space for closed tags
  938:     if output is not None:
  939:         output = output.replace(" />", "/>")
  940: 
  941:     assert output == expected
  942: 
  943: 
  944: def test_no_pretty_print_no_decl(parser, geom_df):
  945:     expected = (
  946:         "<data><row><index>0</index><shape>square</shape>"
  947:         "<degrees>360</degrees><sides>4.0</sides></row><row>"
  948:         "<index>1</index><shape>circle</shape><degrees>360"
  949:         "</degrees><sides/></row><row><index>2</index><shape>"
  950:         "triangle</shape><degrees>180</degrees><sides>3.0</sides>"
  951:         "</row></data>"
  952:     )
  953: 
  954:     output = geom_df.to_xml(xml_declaration=False, pretty_print=False, parser=parser)
  955: 
  956:     # etree adds space for closed tags
  957:     if output is not None:
  958:         output = output.replace(" />", "/>")
  959: 
  960:     assert output == expected
  961: 
  962: 
  963: # PARSER
  964: 
  965: 
  966: @td.skip_if_installed("lxml")
  967: def test_default_parser_no_lxml(geom_df):
  968:     with pytest.raises(
  969:         ImportError, match=("lxml not found, please install or use the etree parser.")
  970:     ):
  971:         geom_df.to_xml()
  972: 
  973: 
  974: def test_unknown_parser(geom_df):
  975:     with pytest.raises(
  976:         ValueError, match=("Values for parser can only be lxml or etree.")
  977:     ):
  978:         geom_df.to_xml(parser="bs4")
  979: 
  980: 
  981: # STYLESHEET
  982: 
  983: xsl_expected = """\
  984: <?xml version="1.0" encoding="utf-8"?>
  985: <data>
  986:   <row>
  987:     <field field="index">0</field>
  988:     <field field="shape">square</field>
  989:     <field field="degrees">360</field>
  990:     <field field="sides">4.0</field>
  991:   </row>
  992:   <row>
  993:     <field field="index">1</field>
  994:     <field field="shape">circle</field>
  995:     <field field="degrees">360</field>
  996:     <field field="sides"/>
  997:   </row>
  998:   <row>
  999:     <field field="index">2</field>
 1000:     <field field="shape">triangle</field>
 1001:     <field field="degrees">180</field>
 1002:     <field field="sides">3.0</field>
 1003:   </row>
 1004: </data>"""
 1005: 
 1006: 
 1007: def test_stylesheet_file_like(xsl_row_field_output, mode, geom_df):
 1008:     pytest.importorskip("lxml")
 1009:     with open(
 1010:         xsl_row_field_output, mode, encoding="utf-8" if mode == "r" else None
 1011:     ) as f:
 1012:         assert geom_df.to_xml(stylesheet=f) == xsl_expected
 1013: 
 1014: 
 1015: def test_stylesheet_io(xsl_row_field_output, mode, geom_df):
 1016:     # note: By default the bodies of untyped functions are not checked,
 1017:     # consider using --check-untyped-defs
 1018:     pytest.importorskip("lxml")
 1019:     xsl_obj: BytesIO | StringIO  # type: ignore[annotation-unchecked]
 1020: 
 1021:     with open(
 1022:         xsl_row_field_output, mode, encoding="utf-8" if mode == "r" else None
 1023:     ) as f:
 1024:         if mode == "rb":
 1025:             xsl_obj = BytesIO(f.read())
 1026:         else:
 1027:             xsl_obj = StringIO(f.read())
 1028: 
 1029:     output = geom_df.to_xml(stylesheet=xsl_obj)
 1030: 
 1031:     assert output == xsl_expected
 1032: 
 1033: 
 1034: def test_stylesheet_buffered_reader(xsl_row_field_output, mode, geom_df):
 1035:     pytest.importorskip("lxml")
 1036:     with open(
 1037:         xsl_row_field_output, mode, encoding="utf-8" if mode == "r" else None
 1038:     ) as f:
 1039:         xsl_obj = f.read()
 1040: 
 1041:     output = geom_df.to_xml(stylesheet=xsl_obj)
 1042: 
 1043:     assert output == xsl_expected
 1044: 
 1045: 
 1046: def test_stylesheet_wrong_path(geom_df):
 1047:     lxml_etree = pytest.importorskip("lxml.etree")
 1048: 
 1049:     xsl = os.path.join("data", "xml", "row_field_output.xslt")
 1050: 
 1051:     with pytest.raises(
 1052:         lxml_etree.XMLSyntaxError,
 1053:         match=("Start tag expected, '<' not found"),
 1054:     ):
 1055:         geom_df.to_xml(stylesheet=xsl)
 1056: 
 1057: 
 1058: @pytest.mark.parametrize("val", ["", b""])
 1059: def test_empty_string_stylesheet(val, geom_df):
 1060:     lxml_etree = pytest.importorskip("lxml.etree")
 1061: 
 1062:     msg = "|".join(
 1063:         [
 1064:             "Document is empty",
 1065:             "Start tag expected, '<' not found",
 1066:             # Seen on Mac with lxml 4.9.1
 1067:             r"None \(line 0\)",
 1068:         ]
 1069:     )
 1070: 
 1071:     with pytest.raises(lxml_etree.XMLSyntaxError, match=msg):
 1072:         geom_df.to_xml(stylesheet=val)
 1073: 
 1074: 
 1075: def test_incorrect_xsl_syntax(geom_df):
 1076:     lxml_etree = pytest.importorskip("lxml.etree")
 1077: 
 1078:     xsl = """\
 1079: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1080:     <xsl:output method="xml" encoding="utf-8" indent="yes" >
 1081:     <xsl:strip-space elements="*"/>
 1082: 
 1083:     <xsl:template match="@*|node()">
 1084:         <xsl:copy>
 1085:             <xsl:apply-templates select="@*|node()"/>
 1086:         </xsl:copy>
 1087:     </xsl:template>
 1088: 
 1089:     <xsl:template match="row/*">
 1090:         <field>
 1091:             <xsl:attribute name="field">
 1092:                 <xsl:value-of select="name()"/>
 1093:             </xsl:attribute>
 1094:             <xsl:value-of select="text()"/>
 1095:         </field>
 1096:     </xsl:template>
 1097: </xsl:stylesheet>"""
 1098: 
 1099:     with pytest.raises(
 1100:         lxml_etree.XMLSyntaxError, match=("Opening and ending tag mismatch")
 1101:     ):
 1102:         geom_df.to_xml(stylesheet=xsl)
 1103: 
 1104: 
 1105: def test_incorrect_xsl_eval(geom_df):
 1106:     lxml_etree = pytest.importorskip("lxml.etree")
 1107: 
 1108:     xsl = """\
 1109: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1110:     <xsl:output method="xml" encoding="utf-8" indent="yes" />
 1111:     <xsl:strip-space elements="*"/>
 1112: 
 1113:     <xsl:template match="@*|node(*)">
 1114:         <xsl:copy>
 1115:             <xsl:apply-templates select="@*|node()"/>
 1116:         </xsl:copy>
 1117:     </xsl:template>
 1118: 
 1119:     <xsl:template match="row/*">
 1120:         <field>
 1121:             <xsl:attribute name="field">
 1122:                 <xsl:value-of select="name()"/>
 1123:             </xsl:attribute>
 1124:             <xsl:value-of select="text()"/>
 1125:         </field>
 1126:     </xsl:template>
 1127: </xsl:stylesheet>"""
 1128: 
 1129:     with pytest.raises(lxml_etree.XSLTParseError, match=("failed to compile")):
 1130:         geom_df.to_xml(stylesheet=xsl)
 1131: 
 1132: 
 1133: def test_incorrect_xsl_apply(geom_df):
 1134:     lxml_etree = pytest.importorskip("lxml.etree")
 1135: 
 1136:     xsl = """\
 1137: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1138:     <xsl:output method="xml" encoding="utf-8" indent="yes" />
 1139:     <xsl:strip-space elements="*"/>
 1140: 
 1141:     <xsl:template match="@*|node()">
 1142:         <xsl:copy>
 1143:             <xsl:copy-of select="document('non_existent.xml')/*"/>
 1144:         </xsl:copy>
 1145:     </xsl:template>
 1146: </xsl:stylesheet>"""
 1147: 
 1148:     with pytest.raises(lxml_etree.XSLTApplyError, match=("Cannot resolve URI")):
 1149:         with tm.ensure_clean("test.xml") as path:
 1150:             geom_df.to_xml(path, stylesheet=xsl)
 1151: 
 1152: 
 1153: def test_stylesheet_with_etree(geom_df):
 1154:     xsl = """\
 1155: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1156:     <xsl:output method="xml" encoding="utf-8" indent="yes" />
 1157:     <xsl:strip-space elements="*"/>
 1158: 
 1159:     <xsl:template match="@*|node(*)">
 1160:         <xsl:copy>
 1161:             <xsl:apply-templates select="@*|node()"/>
 1162:         </xsl:copy>
 1163:     </xsl:template>"""
 1164: 
 1165:     with pytest.raises(
 1166:         ValueError, match=("To use stylesheet, you need lxml installed")
 1167:     ):
 1168:         geom_df.to_xml(parser="etree", stylesheet=xsl)
 1169: 
 1170: 
 1171: def test_style_to_csv(geom_df):
 1172:     pytest.importorskip("lxml")
 1173:     xsl = """\
 1174: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1175:     <xsl:output method="text" indent="yes" />
 1176:     <xsl:strip-space elements="*"/>
 1177: 
 1178:     <xsl:param name="delim">,</xsl:param>
 1179:     <xsl:template match="/data">
 1180:         <xsl:text>,shape,degrees,sides&#xa;</xsl:text>
 1181:         <xsl:apply-templates select="row"/>
 1182:     </xsl:template>
 1183: 
 1184:     <xsl:template match="row">
 1185:         <xsl:value-of select="concat(index, $delim, shape, $delim,
 1186:                                      degrees, $delim, sides)"/>
 1187:          <xsl:text>&#xa;</xsl:text>
 1188:     </xsl:template>
 1189: </xsl:stylesheet>"""
 1190: 
 1191:     out_csv = geom_df.to_csv(lineterminator="\n")
 1192: 
 1193:     if out_csv is not None:
 1194:         out_csv = out_csv.strip()
 1195:     out_xml = geom_df.to_xml(stylesheet=xsl)
 1196: 
 1197:     assert out_csv == out_xml
 1198: 
 1199: 
 1200: def test_style_to_string(geom_df):
 1201:     pytest.importorskip("lxml")
 1202:     xsl = """\
 1203: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1204:     <xsl:output method="text" indent="yes" />
 1205:     <xsl:strip-space elements="*"/>
 1206: 
 1207:     <xsl:param name="delim"><xsl:text>               </xsl:text></xsl:param>
 1208:     <xsl:template match="/data">
 1209:         <xsl:text>      shape  degrees  sides&#xa;</xsl:text>
 1210:         <xsl:apply-templates select="row"/>
 1211:     </xsl:template>
 1212: 
 1213:     <xsl:template match="row">
 1214:         <xsl:value-of select="concat(index, ' ',
 1215:                                      substring($delim, 1, string-length('triangle')
 1216:                                                - string-length(shape) + 1),
 1217:                                      shape,
 1218:                                      substring($delim, 1, string-length(name(degrees))
 1219:                                                - string-length(degrees) + 2),
 1220:                                      degrees,
 1221:                                      substring($delim, 1, string-length(name(sides))
 1222:                                                - string-length(sides) + 2),
 1223:                                      sides)"/>
 1224:          <xsl:text>&#xa;</xsl:text>
 1225:     </xsl:template>
 1226: </xsl:stylesheet>"""
 1227: 
 1228:     out_str = geom_df.to_string()
 1229:     out_xml = geom_df.to_xml(na_rep="NaN", stylesheet=xsl)
 1230: 
 1231:     assert out_xml == out_str
 1232: 
 1233: 
 1234: def test_style_to_json(geom_df):
 1235:     pytest.importorskip("lxml")
 1236:     xsl = """\
 1237: <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 1238:     <xsl:output method="text" indent="yes" />
 1239:     <xsl:strip-space elements="*"/>
 1240: 
 1241:     <xsl:param name="quot">"</xsl:param>
 1242: 
 1243:     <xsl:template match="/data">
 1244:         <xsl:text>{"shape":{</xsl:text>
 1245:         <xsl:apply-templates select="descendant::row/shape"/>
 1246:         <xsl:text>},"degrees":{</xsl:text>
 1247:         <xsl:apply-templates select="descendant::row/degrees"/>
 1248:         <xsl:text>},"sides":{</xsl:text>
 1249:         <xsl:apply-templates select="descendant::row/sides"/>
 1250:         <xsl:text>}}</xsl:text>
 1251:     </xsl:template>
 1252: 
 1253:     <xsl:template match="shape|degrees|sides">
 1254:         <xsl:variable name="val">
 1255:             <xsl:if test = ".=''">
 1256:                 <xsl:value-of select="'null'"/>
 1257:             </xsl:if>
 1258:             <xsl:if test = "number(text()) = text()">
 1259:                 <xsl:value-of select="text()"/>
 1260:             </xsl:if>
 1261:             <xsl:if test = "number(text()) != text()">
 1262:                 <xsl:value-of select="concat($quot, text(), $quot)"/>
 1263:             </xsl:if>
 1264:         </xsl:variable>
 1265:         <xsl:value-of select="concat($quot, preceding-sibling::index,
 1266:                                      $quot,':', $val)"/>
 1267:         <xsl:if test="preceding-sibling::index != //row[last()]/index">
 1268:             <xsl:text>,</xsl:text>
 1269:         </xsl:if>
 1270:     </xsl:template>
 1271: </xsl:stylesheet>"""
 1272: 
 1273:     out_json = geom_df.to_json()
 1274:     out_xml = geom_df.to_xml(stylesheet=xsl)
 1275: 
 1276:     assert out_json == out_xml
 1277: 
 1278: 
 1279: # COMPRESSION
 1280: 
 1281: 
 1282: geom_xml = """\
 1283: <?xml version='1.0' encoding='utf-8'?>
 1284: <data>
 1285:   <row>
 1286:     <index>0</index>
 1287:     <shape>square</shape>
 1288:     <degrees>360</degrees>
 1289:     <sides>4.0</sides>
 1290:   </row>
 1291:   <row>
 1292:     <index>1</index>
 1293:     <shape>circle</shape>
 1294:     <degrees>360</degrees>
 1295:     <sides/>
 1296:   </row>
 1297:   <row>
 1298:     <index>2</index>
 1299:     <shape>triangle</shape>
 1300:     <degrees>180</degrees>
 1301:     <sides>3.0</sides>
 1302:   </row>
 1303: </data>"""
 1304: 
 1305: 
 1306: def test_compression_output(parser, compression_only, geom_df):
 1307:     with tm.ensure_clean() as path:
 1308:         geom_df.to_xml(path, parser=parser, compression=compression_only)
 1309: 
 1310:         with get_handle(
 1311:             path,
 1312:             "r",
 1313:             compression=compression_only,
 1314:         ) as handle_obj:
 1315:             output = handle_obj.handle.read()
 1316: 
 1317:     output = equalize_decl(output)
 1318: 
 1319:     assert geom_xml == output.strip()
 1320: 
 1321: 
 1322: def test_filename_and_suffix_comp(
 1323:     parser, compression_only, geom_df, compression_to_extension
 1324: ):
 1325:     compfile = "xml." + compression_to_extension[compression_only]
 1326:     with tm.ensure_clean(filename=compfile) as path:
 1327:         geom_df.to_xml(path, parser=parser, compression=compression_only)
 1328: 
 1329:         with get_handle(
 1330:             path,
 1331:             "r",
 1332:             compression=compression_only,
 1333:         ) as handle_obj:
 1334:             output = handle_obj.handle.read()
 1335: 
 1336:     output = equalize_decl(output)
 1337: 
 1338:     assert geom_xml == output.strip()
 1339: 
 1340: 
 1341: def test_ea_dtypes(any_numeric_ea_dtype, parser):
 1342:     # GH#43903
 1343:     expected = """<?xml version='1.0' encoding='utf-8'?>
 1344: <data>
 1345:   <row>
 1346:     <index>0</index>
 1347:     <a/>
 1348:   </row>
 1349: </data>"""
 1350:     df = DataFrame({"a": [NA]}).astype(any_numeric_ea_dtype)
 1351:     result = df.to_xml(parser=parser)
 1352:     assert equalize_decl(result).strip() == expected
 1353: 
 1354: 
 1355: def test_unsuported_compression(parser, geom_df):
 1356:     with pytest.raises(ValueError, match="Unrecognized compression type"):
 1357:         with tm.ensure_clean() as path:
 1358:             geom_df.to_xml(path, parser=parser, compression="7z")
 1359: 
 1360: 
 1361: # STORAGE OPTIONS
 1362: 
 1363: 
 1364: @pytest.mark.single_cpu
 1365: def test_s3_permission_output(parser, s3_public_bucket, geom_df):
 1366:     s3fs = pytest.importorskip("s3fs")
 1367:     pytest.importorskip("lxml")
 1368: 
 1369:     with tm.external_error_raised((PermissionError, FileNotFoundError)):
 1370:         fs = s3fs.S3FileSystem(anon=True)
 1371:         fs.ls(s3_public_bucket.name)
 1372: 
 1373:         geom_df.to_xml(
 1374:             f"s3://{s3_public_bucket.name}/geom.xml", compression="zip", parser=parser
 1375:         )
