    1: """
    2: Tests column conversion functionality during parsing
    3: for all of the parsers defined in parsers.py
    4: """
    5: from io import StringIO
    6: 
    7: from dateutil.parser import parse
    8: import numpy as np
    9: import pytest
   10: 
   11: import pandas as pd
   12: from pandas import (
   13:     DataFrame,
   14:     Index,
   15: )
   16: import pandas._testing as tm
   17: 
   18: 
   19: def test_converters_type_must_be_dict(all_parsers):
   20:     parser = all_parsers
   21:     data = """index,A,B,C,D
   22: foo,2,3,4,5
   23: """
   24:     if parser.engine == "pyarrow":
   25:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
   26:         with pytest.raises(ValueError, match=msg):
   27:             parser.read_csv(StringIO(data), converters=0)
   28:         return
   29:     with pytest.raises(TypeError, match="Type converters.+"):
   30:         parser.read_csv(StringIO(data), converters=0)
   31: 
   32: 
   33: @pytest.mark.parametrize("column", [3, "D"])
   34: @pytest.mark.parametrize(
   35:     "converter", [parse, lambda x: int(x.split("/")[2])]  # Produce integer.
   36: )
   37: def test_converters(all_parsers, column, converter):
   38:     parser = all_parsers
   39:     data = """A,B,C,D
   40: a,1,2,01/01/2009
   41: b,3,4,01/02/2009
   42: c,4,5,01/03/2009
   43: """
   44:     if parser.engine == "pyarrow":
   45:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
   46:         with pytest.raises(ValueError, match=msg):
   47:             parser.read_csv(StringIO(data), converters={column: converter})
   48:         return
   49: 
   50:     result = parser.read_csv(StringIO(data), converters={column: converter})
   51: 
   52:     expected = parser.read_csv(StringIO(data))
   53:     expected["D"] = expected["D"].map(converter)
   54: 
   55:     tm.assert_frame_equal(result, expected)
   56: 
   57: 
   58: def test_converters_no_implicit_conv(all_parsers):
   59:     # see gh-2184
   60:     parser = all_parsers
   61:     data = """000102,1.2,A\n001245,2,B"""
   62: 
   63:     converters = {0: lambda x: x.strip()}
   64: 
   65:     if parser.engine == "pyarrow":
   66:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
   67:         with pytest.raises(ValueError, match=msg):
   68:             parser.read_csv(StringIO(data), header=None, converters=converters)
   69:         return
   70: 
   71:     result = parser.read_csv(StringIO(data), header=None, converters=converters)
   72: 
   73:     # Column 0 should not be casted to numeric and should remain as object.
   74:     expected = DataFrame([["000102", 1.2, "A"], ["001245", 2, "B"]])
   75:     tm.assert_frame_equal(result, expected)
   76: 
   77: 
   78: def test_converters_euro_decimal_format(all_parsers):
   79:     # see gh-583
   80:     converters = {}
   81:     parser = all_parsers
   82: 
   83:     data = """Id;Number1;Number2;Text1;Text2;Number3
   84: 1;1521,1541;187101,9543;ABC;poi;4,7387
   85: 2;121,12;14897,76;DEF;uyt;0,3773
   86: 3;878,158;108013,434;GHI;rez;2,7356"""
   87:     converters["Number1"] = converters["Number2"] = converters[
   88:         "Number3"
   89:     ] = lambda x: float(x.replace(",", "."))
   90: 
   91:     if parser.engine == "pyarrow":
   92:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
   93:         with pytest.raises(ValueError, match=msg):
   94:             parser.read_csv(StringIO(data), sep=";", converters=converters)
   95:         return
   96: 
   97:     result = parser.read_csv(StringIO(data), sep=";", converters=converters)
   98:     expected = DataFrame(
   99:         [
  100:             [1, 1521.1541, 187101.9543, "ABC", "poi", 4.7387],
  101:             [2, 121.12, 14897.76, "DEF", "uyt", 0.3773],
  102:             [3, 878.158, 108013.434, "GHI", "rez", 2.7356],
  103:         ],
  104:         columns=["Id", "Number1", "Number2", "Text1", "Text2", "Number3"],
  105:     )
  106:     tm.assert_frame_equal(result, expected)
  107: 
  108: 
  109: def test_converters_corner_with_nans(all_parsers):
  110:     parser = all_parsers
  111:     data = """id,score,days
  112: 1,2,12
  113: 2,2-5,
  114: 3,,14+
  115: 4,6-12,2"""
  116: 
  117:     # Example converters.
  118:     def convert_days(x):
  119:         x = x.strip()
  120: 
  121:         if not x:
  122:             return np.nan
  123: 
  124:         is_plus = x.endswith("+")
  125: 
  126:         if is_plus:
  127:             x = int(x[:-1]) + 1
  128:         else:
  129:             x = int(x)
  130: 
  131:         return x
  132: 
  133:     def convert_days_sentinel(x):
  134:         x = x.strip()
  135: 
  136:         if not x:
  137:             return np.nan
  138: 
  139:         is_plus = x.endswith("+")
  140: 
  141:         if is_plus:
  142:             x = int(x[:-1]) + 1
  143:         else:
  144:             x = int(x)
  145: 
  146:         return x
  147: 
  148:     def convert_score(x):
  149:         x = x.strip()
  150: 
  151:         if not x:
  152:             return np.nan
  153: 
  154:         if x.find("-") > 0:
  155:             val_min, val_max = map(int, x.split("-"))
  156:             val = 0.5 * (val_min + val_max)
  157:         else:
  158:             val = float(x)
  159: 
  160:         return val
  161: 
  162:     results = []
  163: 
  164:     for day_converter in [convert_days, convert_days_sentinel]:
  165:         if parser.engine == "pyarrow":
  166:             msg = "The 'converters' option is not supported with the 'pyarrow' engine"
  167:             with pytest.raises(ValueError, match=msg):
  168:                 parser.read_csv(
  169:                     StringIO(data),
  170:                     converters={"score": convert_score, "days": day_converter},
  171:                     na_values=["", None],
  172:                 )
  173:             continue
  174: 
  175:         result = parser.read_csv(
  176:             StringIO(data),
  177:             converters={"score": convert_score, "days": day_converter},
  178:             na_values=["", None],
  179:         )
  180:         assert pd.isna(result["days"][1])
  181:         results.append(result)
  182: 
  183:     if parser.engine != "pyarrow":
  184:         tm.assert_frame_equal(results[0], results[1])
  185: 
  186: 
  187: @pytest.mark.parametrize("conv_f", [lambda x: x, str])
  188: def test_converter_index_col_bug(all_parsers, conv_f):
  189:     # see gh-1835 , GH#40589
  190:     parser = all_parsers
  191:     data = "A;B\n1;2\n3;4"
  192: 
  193:     if parser.engine == "pyarrow":
  194:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
  195:         with pytest.raises(ValueError, match=msg):
  196:             parser.read_csv(
  197:                 StringIO(data), sep=";", index_col="A", converters={"A": conv_f}
  198:             )
  199:         return
  200: 
  201:     rs = parser.read_csv(
  202:         StringIO(data), sep=";", index_col="A", converters={"A": conv_f}
  203:     )
  204: 
  205:     xp = DataFrame({"B": [2, 4]}, index=Index(["1", "3"], name="A", dtype="object"))
  206:     tm.assert_frame_equal(rs, xp)
  207: 
  208: 
  209: def test_converter_identity_object(all_parsers):
  210:     # GH#40589
  211:     parser = all_parsers
  212:     data = "A,B\n1,2\n3,4"
  213: 
  214:     if parser.engine == "pyarrow":
  215:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
  216:         with pytest.raises(ValueError, match=msg):
  217:             parser.read_csv(StringIO(data), converters={"A": lambda x: x})
  218:         return
  219: 
  220:     rs = parser.read_csv(StringIO(data), converters={"A": lambda x: x})
  221: 
  222:     xp = DataFrame({"A": ["1", "3"], "B": [2, 4]})
  223:     tm.assert_frame_equal(rs, xp)
  224: 
  225: 
  226: def test_converter_multi_index(all_parsers):
  227:     # GH 42446
  228:     parser = all_parsers
  229:     data = "A,B,B\nX,Y,Z\n1,2,3"
  230: 
  231:     if parser.engine == "pyarrow":
  232:         msg = "The 'converters' option is not supported with the 'pyarrow' engine"
  233:         with pytest.raises(ValueError, match=msg):
  234:             parser.read_csv(
  235:                 StringIO(data),
  236:                 header=list(range(2)),
  237:                 converters={
  238:                     ("A", "X"): np.int32,
  239:                     ("B", "Y"): np.int32,
  240:                     ("B", "Z"): np.float32,
  241:                 },
  242:             )
  243:         return
  244: 
  245:     result = parser.read_csv(
  246:         StringIO(data),
  247:         header=list(range(2)),
  248:         converters={
  249:             ("A", "X"): np.int32,
  250:             ("B", "Y"): np.int32,
  251:             ("B", "Z"): np.float32,
  252:         },
  253:     )
  254: 
  255:     expected = DataFrame(
  256:         {
  257:             ("A", "X"): np.int32([1]),
  258:             ("B", "Y"): np.int32([2]),
  259:             ("B", "Z"): np.float32([3]),
  260:         }
  261:     )
  262: 
  263:     tm.assert_frame_equal(result, expected)
