    1: from textwrap import (
    2:     dedent,
    3:     indent,
    4: )
    5: 
    6: import numpy as np
    7: import pytest
    8: 
    9: from pandas import (
   10:     DataFrame,
   11:     MultiIndex,
   12:     option_context,
   13: )
   14: 
   15: jinja2 = pytest.importorskip("jinja2")
   16: from pandas.io.formats.style import Styler
   17: 
   18: 
   19: @pytest.fixture
   20: def env():
   21:     loader = jinja2.PackageLoader("pandas", "io/formats/templates")
   22:     env = jinja2.Environment(loader=loader, trim_blocks=True)
   23:     return env
   24: 
   25: 
   26: @pytest.fixture
   27: def styler():
   28:     return Styler(DataFrame([[2.61], [2.69]], index=["a", "b"], columns=["A"]))
   29: 
   30: 
   31: @pytest.fixture
   32: def styler_mi():
   33:     midx = MultiIndex.from_product([["a", "b"], ["c", "d"]])
   34:     return Styler(DataFrame(np.arange(16).reshape(4, 4), index=midx, columns=midx))
   35: 
   36: 
   37: @pytest.fixture
   38: def tpl_style(env):
   39:     return env.get_template("html_style.tpl")
   40: 
   41: 
   42: @pytest.fixture
   43: def tpl_table(env):
   44:     return env.get_template("html_table.tpl")
   45: 
   46: 
   47: def test_html_template_extends_options():
   48:     # make sure if templates are edited tests are updated as are setup fixtures
   49:     # to understand the dependency
   50:     with open("pandas/io/formats/templates/html.tpl", encoding="utf-8") as file:
   51:         result = file.read()
   52:     assert "{% include html_style_tpl %}" in result
   53:     assert "{% include html_table_tpl %}" in result
   54: 
   55: 
   56: def test_exclude_styles(styler):
   57:     result = styler.to_html(exclude_styles=True, doctype_html=True)
   58:     expected = dedent(
   59:         """\
   60:         <!DOCTYPE html>
   61:         <html>
   62:         <head>
   63:         <meta charset="utf-8">
   64:         </head>
   65:         <body>
   66:         <table>
   67:           <thead>
   68:             <tr>
   69:               <th >&nbsp;</th>
   70:               <th >A</th>
   71:             </tr>
   72:           </thead>
   73:           <tbody>
   74:             <tr>
   75:               <th >a</th>
   76:               <td >2.610000</td>
   77:             </tr>
   78:             <tr>
   79:               <th >b</th>
   80:               <td >2.690000</td>
   81:             </tr>
   82:           </tbody>
   83:         </table>
   84:         </body>
   85:         </html>
   86:         """
   87:     )
   88:     assert result == expected
   89: 
   90: 
   91: def test_w3_html_format(styler):
   92:     styler.set_uuid("").set_table_styles([{"selector": "th", "props": "att2:v2;"}]).map(
   93:         lambda x: "att1:v1;"
   94:     ).set_table_attributes('class="my-cls1" style="attr3:v3;"').set_td_classes(
   95:         DataFrame(["my-cls2"], index=["a"], columns=["A"])
   96:     ).format(
   97:         "{:.1f}"
   98:     ).set_caption(
   99:         "A comprehensive test"
  100:     )
  101:     expected = dedent(
  102:         """\
  103:         <style type="text/css">
  104:         #T_ th {
  105:           att2: v2;
  106:         }
  107:         #T__row0_col0, #T__row1_col0 {
  108:           att1: v1;
  109:         }
  110:         </style>
  111:         <table id="T_" class="my-cls1" style="attr3:v3;">
  112:           <caption>A comprehensive test</caption>
  113:           <thead>
  114:             <tr>
  115:               <th class="blank level0" >&nbsp;</th>
  116:               <th id="T__level0_col0" class="col_heading level0 col0" >A</th>
  117:             </tr>
  118:           </thead>
  119:           <tbody>
  120:             <tr>
  121:               <th id="T__level0_row0" class="row_heading level0 row0" >a</th>
  122:               <td id="T__row0_col0" class="data row0 col0 my-cls2" >2.6</td>
  123:             </tr>
  124:             <tr>
  125:               <th id="T__level0_row1" class="row_heading level0 row1" >b</th>
  126:               <td id="T__row1_col0" class="data row1 col0" >2.7</td>
  127:             </tr>
  128:           </tbody>
  129:         </table>
  130:         """
  131:     )
  132:     assert expected == styler.to_html()
  133: 
  134: 
  135: def test_colspan_w3():
  136:     # GH 36223
  137:     df = DataFrame(data=[[1, 2]], columns=[["l0", "l0"], ["l1a", "l1b"]])
  138:     styler = Styler(df, uuid="_", cell_ids=False)
  139:     assert '<th class="col_heading level0 col0" colspan="2">l0</th>' in styler.to_html()
  140: 
  141: 
  142: def test_rowspan_w3():
  143:     # GH 38533
  144:     df = DataFrame(data=[[1, 2]], index=[["l0", "l0"], ["l1a", "l1b"]])
  145:     styler = Styler(df, uuid="_", cell_ids=False)
  146:     assert '<th class="row_heading level0 row0" rowspan="2">l0</th>' in styler.to_html()
  147: 
  148: 
  149: def test_styles(styler):
  150:     styler.set_uuid("abc")
  151:     styler.set_table_styles([{"selector": "td", "props": "color: red;"}])
  152:     result = styler.to_html(doctype_html=True)
  153:     expected = dedent(
  154:         """\
  155:         <!DOCTYPE html>
  156:         <html>
  157:         <head>
  158:         <meta charset="utf-8">
  159:         <style type="text/css">
  160:         #T_abc td {
  161:           color: red;
  162:         }
  163:         </style>
  164:         </head>
  165:         <body>
  166:         <table id="T_abc">
  167:           <thead>
  168:             <tr>
  169:               <th class="blank level0" >&nbsp;</th>
  170:               <th id="T_abc_level0_col0" class="col_heading level0 col0" >A</th>
  171:             </tr>
  172:           </thead>
  173:           <tbody>
  174:             <tr>
  175:               <th id="T_abc_level0_row0" class="row_heading level0 row0" >a</th>
  176:               <td id="T_abc_row0_col0" class="data row0 col0" >2.610000</td>
  177:             </tr>
  178:             <tr>
  179:               <th id="T_abc_level0_row1" class="row_heading level0 row1" >b</th>
  180:               <td id="T_abc_row1_col0" class="data row1 col0" >2.690000</td>
  181:             </tr>
  182:           </tbody>
  183:         </table>
  184:         </body>
  185:         </html>
  186:         """
  187:     )
  188:     assert result == expected
  189: 
  190: 
  191: def test_doctype(styler):
  192:     result = styler.to_html(doctype_html=False)
  193:     assert "<html>" not in result
  194:     assert "<body>" not in result
  195:     assert "<!DOCTYPE html>" not in result
  196:     assert "<head>" not in result
  197: 
  198: 
  199: def test_doctype_encoding(styler):
  200:     with option_context("styler.render.encoding", "ASCII"):
  201:         result = styler.to_html(doctype_html=True)
  202:         assert '<meta charset="ASCII">' in result
  203:         result = styler.to_html(doctype_html=True, encoding="ANSI")
  204:         assert '<meta charset="ANSI">' in result
  205: 
  206: 
  207: def test_bold_headers_arg(styler):
  208:     result = styler.to_html(bold_headers=True)
  209:     assert "th {\n  font-weight: bold;\n}" in result
  210:     result = styler.to_html()
  211:     assert "th {\n  font-weight: bold;\n}" not in result
  212: 
  213: 
  214: def test_caption_arg(styler):
  215:     result = styler.to_html(caption="foo bar")
  216:     assert "<caption>foo bar</caption>" in result
  217:     result = styler.to_html()
  218:     assert "<caption>foo bar</caption>" not in result
  219: 
  220: 
  221: def test_block_names(tpl_style, tpl_table):
  222:     # catch accidental removal of a block
  223:     expected_style = {
  224:         "before_style",
  225:         "style",
  226:         "table_styles",
  227:         "before_cellstyle",
  228:         "cellstyle",
  229:     }
  230:     expected_table = {
  231:         "before_table",
  232:         "table",
  233:         "caption",
  234:         "thead",
  235:         "tbody",
  236:         "after_table",
  237:         "before_head_rows",
  238:         "head_tr",
  239:         "after_head_rows",
  240:         "before_rows",
  241:         "tr",
  242:         "after_rows",
  243:     }
  244:     result1 = set(tpl_style.blocks)
  245:     assert result1 == expected_style
  246: 
  247:     result2 = set(tpl_table.blocks)
  248:     assert result2 == expected_table
  249: 
  250: 
  251: def test_from_custom_template_table(tmpdir):
  252:     p = tmpdir.mkdir("tpl").join("myhtml_table.tpl")
  253:     p.write(
  254:         dedent(
  255:             """\
  256:             {% extends "html_table.tpl" %}
  257:             {% block table %}
  258:             <h1>{{custom_title}}</h1>
  259:             {{ super() }}
  260:             {% endblock table %}"""
  261:         )
  262:     )
  263:     result = Styler.from_custom_template(str(tmpdir.join("tpl")), "myhtml_table.tpl")
  264:     assert issubclass(result, Styler)
  265:     assert result.env is not Styler.env
  266:     assert result.template_html_table is not Styler.template_html_table
  267:     styler = result(DataFrame({"A": [1, 2]}))
  268:     assert "<h1>My Title</h1>\n\n\n<table" in styler.to_html(custom_title="My Title")
  269: 
  270: 
  271: def test_from_custom_template_style(tmpdir):
  272:     p = tmpdir.mkdir("tpl").join("myhtml_style.tpl")
  273:     p.write(
  274:         dedent(
  275:             """\
  276:             {% extends "html_style.tpl" %}
  277:             {% block style %}
  278:             <link rel="stylesheet" href="mystyle.css">
  279:             {{ super() }}
  280:             {% endblock style %}"""
  281:         )
  282:     )
  283:     result = Styler.from_custom_template(
  284:         str(tmpdir.join("tpl")), html_style="myhtml_style.tpl"
  285:     )
  286:     assert issubclass(result, Styler)
  287:     assert result.env is not Styler.env
  288:     assert result.template_html_style is not Styler.template_html_style
  289:     styler = result(DataFrame({"A": [1, 2]}))
  290:     assert '<link rel="stylesheet" href="mystyle.css">\n\n<style' in styler.to_html()
  291: 
  292: 
  293: def test_caption_as_sequence(styler):
  294:     styler.set_caption(("full cap", "short cap"))
  295:     assert "<caption>full cap</caption>" in styler.to_html()
  296: 
  297: 
  298: @pytest.mark.parametrize("index", [False, True])
  299: @pytest.mark.parametrize("columns", [False, True])
  300: @pytest.mark.parametrize("index_name", [True, False])
  301: def test_sticky_basic(styler, index, columns, index_name):
  302:     if index_name:
  303:         styler.index.name = "some text"
  304:     if index:
  305:         styler.set_sticky(axis=0)
  306:     if columns:
  307:         styler.set_sticky(axis=1)
  308: 
  309:     left_css = (
  310:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  311:         "  left: 0px;\n  z-index: {1};\n}}"
  312:     )
  313:     top_css = (
  314:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  315:         "  top: {1}px;\n  z-index: {2};\n{3}}}"
  316:     )
  317: 
  318:     res = styler.set_uuid("").to_html()
  319: 
  320:     # test index stickys over thead and tbody
  321:     assert (left_css.format("thead tr th:nth-child(1)", "3 !important") in res) is index
  322:     assert (left_css.format("tbody tr th:nth-child(1)", "1") in res) is index
  323: 
  324:     # test column stickys including if name row
  325:     assert (
  326:         top_css.format("thead tr:nth-child(1) th", "0", "2", "  height: 25px;\n") in res
  327:     ) is (columns and index_name)
  328:     assert (
  329:         top_css.format("thead tr:nth-child(2) th", "25", "2", "  height: 25px;\n")
  330:         in res
  331:     ) is (columns and index_name)
  332:     assert (top_css.format("thead tr:nth-child(1) th", "0", "2", "") in res) is (
  333:         columns and not index_name
  334:     )
  335: 
  336: 
  337: @pytest.mark.parametrize("index", [False, True])
  338: @pytest.mark.parametrize("columns", [False, True])
  339: def test_sticky_mi(styler_mi, index, columns):
  340:     if index:
  341:         styler_mi.set_sticky(axis=0)
  342:     if columns:
  343:         styler_mi.set_sticky(axis=1)
  344: 
  345:     left_css = (
  346:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  347:         "  left: {1}px;\n  min-width: 75px;\n  max-width: 75px;\n  z-index: {2};\n}}"
  348:     )
  349:     top_css = (
  350:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  351:         "  top: {1}px;\n  height: 25px;\n  z-index: {2};\n}}"
  352:     )
  353: 
  354:     res = styler_mi.set_uuid("").to_html()
  355: 
  356:     # test the index stickys for thead and tbody over both levels
  357:     assert (
  358:         left_css.format("thead tr th:nth-child(1)", "0", "3 !important") in res
  359:     ) is index
  360:     assert (left_css.format("tbody tr th.level0", "0", "1") in res) is index
  361:     assert (
  362:         left_css.format("thead tr th:nth-child(2)", "75", "3 !important") in res
  363:     ) is index
  364:     assert (left_css.format("tbody tr th.level1", "75", "1") in res) is index
  365: 
  366:     # test the column stickys for each level row
  367:     assert (top_css.format("thead tr:nth-child(1) th", "0", "2") in res) is columns
  368:     assert (top_css.format("thead tr:nth-child(2) th", "25", "2") in res) is columns
  369: 
  370: 
  371: @pytest.mark.parametrize("index", [False, True])
  372: @pytest.mark.parametrize("columns", [False, True])
  373: @pytest.mark.parametrize("levels", [[1], ["one"], "one"])
  374: def test_sticky_levels(styler_mi, index, columns, levels):
  375:     styler_mi.index.names, styler_mi.columns.names = ["zero", "one"], ["zero", "one"]
  376:     if index:
  377:         styler_mi.set_sticky(axis=0, levels=levels)
  378:     if columns:
  379:         styler_mi.set_sticky(axis=1, levels=levels)
  380: 
  381:     left_css = (
  382:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  383:         "  left: {1}px;\n  min-width: 75px;\n  max-width: 75px;\n  z-index: {2};\n}}"
  384:     )
  385:     top_css = (
  386:         "#T_ {0} {{\n  position: sticky;\n  background-color: inherit;\n"
  387:         "  top: {1}px;\n  height: 25px;\n  z-index: {2};\n}}"
  388:     )
  389: 
  390:     res = styler_mi.set_uuid("").to_html()
  391: 
  392:     # test no sticking of level0
  393:     assert "#T_ thead tr th:nth-child(1)" not in res
  394:     assert "#T_ tbody tr th.level0" not in res
  395:     assert "#T_ thead tr:nth-child(1) th" not in res
  396: 
  397:     # test sticking level1
  398:     assert (
  399:         left_css.format("thead tr th:nth-child(2)", "0", "3 !important") in res
  400:     ) is index
  401:     assert (left_css.format("tbody tr th.level1", "0", "1") in res) is index
  402:     assert (top_css.format("thead tr:nth-child(2) th", "0", "2") in res) is columns
  403: 
  404: 
  405: def test_sticky_raises(styler):
  406:     with pytest.raises(ValueError, match="No axis named bad for object type DataFrame"):
  407:         styler.set_sticky(axis="bad")
  408: 
  409: 
  410: @pytest.mark.parametrize(
  411:     "sparse_index, sparse_columns",
  412:     [(True, True), (True, False), (False, True), (False, False)],
  413: )
  414: def test_sparse_options(sparse_index, sparse_columns):
  415:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  416:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  417:     df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=ridx, columns=cidx)
  418:     styler = df.style
  419: 
  420:     default_html = styler.to_html()  # defaults under pd.options to (True , True)
  421: 
  422:     with option_context(
  423:         "styler.sparse.index", sparse_index, "styler.sparse.columns", sparse_columns
  424:     ):
  425:         html1 = styler.to_html()
  426:         assert (html1 == default_html) is (sparse_index and sparse_columns)
  427:     html2 = styler.to_html(sparse_index=sparse_index, sparse_columns=sparse_columns)
  428:     assert html1 == html2
  429: 
  430: 
  431: @pytest.mark.parametrize("index", [True, False])
  432: @pytest.mark.parametrize("columns", [True, False])
  433: def test_map_header_cell_ids(styler, index, columns):
  434:     # GH 41893
  435:     func = lambda v: "attr: val;"
  436:     styler.uuid, styler.cell_ids = "", False
  437:     if index:
  438:         styler.map_index(func, axis="index")
  439:     if columns:
  440:         styler.map_index(func, axis="columns")
  441: 
  442:     result = styler.to_html()
  443: 
  444:     # test no data cell ids
  445:     assert '<td class="data row0 col0" >2.610000</td>' in result
  446:     assert '<td class="data row1 col0" >2.690000</td>' in result
  447: 
  448:     # test index header ids where needed and css styles
  449:     assert (
  450:         '<th id="T__level0_row0" class="row_heading level0 row0" >a</th>' in result
  451:     ) is index
  452:     assert (
  453:         '<th id="T__level0_row1" class="row_heading level0 row1" >b</th>' in result
  454:     ) is index
  455:     assert ("#T__level0_row0, #T__level0_row1 {\n  attr: val;\n}" in result) is index
  456: 
  457:     # test column header ids where needed and css styles
  458:     assert (
  459:         '<th id="T__level0_col0" class="col_heading level0 col0" >A</th>' in result
  460:     ) is columns
  461:     assert ("#T__level0_col0 {\n  attr: val;\n}" in result) is columns
  462: 
  463: 
  464: @pytest.mark.parametrize("rows", [True, False])
  465: @pytest.mark.parametrize("cols", [True, False])
  466: def test_maximums(styler_mi, rows, cols):
  467:     result = styler_mi.to_html(
  468:         max_rows=2 if rows else None,
  469:         max_columns=2 if cols else None,
  470:     )
  471: 
  472:     assert ">5</td>" in result  # [[0,1], [4,5]] always visible
  473:     assert (">8</td>" in result) is not rows  # first trimmed vertical element
  474:     assert (">2</td>" in result) is not cols  # first trimmed horizontal element
  475: 
  476: 
  477: def test_replaced_css_class_names():
  478:     css = {
  479:         "row_heading": "ROWHEAD",
  480:         # "col_heading": "COLHEAD",
  481:         "index_name": "IDXNAME",
  482:         # "col": "COL",
  483:         "row": "ROW",
  484:         # "col_trim": "COLTRIM",
  485:         "row_trim": "ROWTRIM",
  486:         "level": "LEVEL",
  487:         "data": "DATA",
  488:         "blank": "BLANK",
  489:     }
  490:     midx = MultiIndex.from_product([["a", "b"], ["c", "d"]])
  491:     styler_mi = Styler(
  492:         DataFrame(np.arange(16).reshape(4, 4), index=midx, columns=midx),
  493:         uuid_len=0,
  494:     ).set_table_styles(css_class_names=css)
  495:     styler_mi.index.names = ["n1", "n2"]
  496:     styler_mi.hide(styler_mi.index[1:], axis=0)
  497:     styler_mi.hide(styler_mi.columns[1:], axis=1)
  498:     styler_mi.map_index(lambda v: "color: red;", axis=0)
  499:     styler_mi.map_index(lambda v: "color: green;", axis=1)
  500:     styler_mi.map(lambda v: "color: blue;")
  501:     expected = dedent(
  502:         """\
  503:     <style type="text/css">
  504:     #T__ROW0_col0 {
  505:       color: blue;
  506:     }
  507:     #T__LEVEL0_ROW0, #T__LEVEL1_ROW0 {
  508:       color: red;
  509:     }
  510:     #T__LEVEL0_col0, #T__LEVEL1_col0 {
  511:       color: green;
  512:     }
  513:     </style>
  514:     <table id="T_">
  515:       <thead>
  516:         <tr>
  517:           <th class="BLANK" >&nbsp;</th>
  518:           <th class="IDXNAME LEVEL0" >n1</th>
  519:           <th id="T__LEVEL0_col0" class="col_heading LEVEL0 col0" >a</th>
  520:         </tr>
  521:         <tr>
  522:           <th class="BLANK" >&nbsp;</th>
  523:           <th class="IDXNAME LEVEL1" >n2</th>
  524:           <th id="T__LEVEL1_col0" class="col_heading LEVEL1 col0" >c</th>
  525:         </tr>
  526:         <tr>
  527:           <th class="IDXNAME LEVEL0" >n1</th>
  528:           <th class="IDXNAME LEVEL1" >n2</th>
  529:           <th class="BLANK col0" >&nbsp;</th>
  530:         </tr>
  531:       </thead>
  532:       <tbody>
  533:         <tr>
  534:           <th id="T__LEVEL0_ROW0" class="ROWHEAD LEVEL0 ROW0" >a</th>
  535:           <th id="T__LEVEL1_ROW0" class="ROWHEAD LEVEL1 ROW0" >c</th>
  536:           <td id="T__ROW0_col0" class="DATA ROW0 col0" >0</td>
  537:         </tr>
  538:       </tbody>
  539:     </table>
  540:     """
  541:     )
  542:     result = styler_mi.to_html()
  543:     assert result == expected
  544: 
  545: 
  546: def test_include_css_style_rules_only_for_visible_cells(styler_mi):
  547:     # GH 43619
  548:     result = (
  549:         styler_mi.set_uuid("")
  550:         .map(lambda v: "color: blue;")
  551:         .hide(styler_mi.data.columns[1:], axis="columns")
  552:         .hide(styler_mi.data.index[1:], axis="index")
  553:         .to_html()
  554:     )
  555:     expected_styles = dedent(
  556:         """\
  557:         <style type="text/css">
  558:         #T__row0_col0 {
  559:           color: blue;
  560:         }
  561:         </style>
  562:         """
  563:     )
  564:     assert expected_styles in result
  565: 
  566: 
  567: def test_include_css_style_rules_only_for_visible_index_labels(styler_mi):
  568:     # GH 43619
  569:     result = (
  570:         styler_mi.set_uuid("")
  571:         .map_index(lambda v: "color: blue;", axis="index")
  572:         .hide(styler_mi.data.columns, axis="columns")
  573:         .hide(styler_mi.data.index[1:], axis="index")
  574:         .to_html()
  575:     )
  576:     expected_styles = dedent(
  577:         """\
  578:         <style type="text/css">
  579:         #T__level0_row0, #T__level1_row0 {
  580:           color: blue;
  581:         }
  582:         </style>
  583:         """
  584:     )
  585:     assert expected_styles in result
  586: 
  587: 
  588: def test_include_css_style_rules_only_for_visible_column_labels(styler_mi):
  589:     # GH 43619
  590:     result = (
  591:         styler_mi.set_uuid("")
  592:         .map_index(lambda v: "color: blue;", axis="columns")
  593:         .hide(styler_mi.data.columns[1:], axis="columns")
  594:         .hide(styler_mi.data.index, axis="index")
  595:         .to_html()
  596:     )
  597:     expected_styles = dedent(
  598:         """\
  599:         <style type="text/css">
  600:         #T__level0_col0, #T__level1_col0 {
  601:           color: blue;
  602:         }
  603:         </style>
  604:         """
  605:     )
  606:     assert expected_styles in result
  607: 
  608: 
  609: def test_hiding_index_columns_multiindex_alignment():
  610:     # gh 43644
  611:     midx = MultiIndex.from_product(
  612:         [["i0", "j0"], ["i1"], ["i2", "j2"]], names=["i-0", "i-1", "i-2"]
  613:     )
  614:     cidx = MultiIndex.from_product(
  615:         [["c0"], ["c1", "d1"], ["c2", "d2"]], names=["c-0", "c-1", "c-2"]
  616:     )
  617:     df = DataFrame(np.arange(16).reshape(4, 4), index=midx, columns=cidx)
  618:     styler = Styler(df, uuid_len=0)
  619:     styler.hide(level=1, axis=0).hide(level=0, axis=1)
  620:     styler.hide([("j0", "i1", "j2")], axis=0)
  621:     styler.hide([("c0", "d1", "d2")], axis=1)
  622:     result = styler.to_html()
  623:     expected = dedent(
  624:         """\
  625:     <style type="text/css">
  626:     </style>
  627:     <table id="T_">
  628:       <thead>
  629:         <tr>
  630:           <th class="blank" >&nbsp;</th>
  631:           <th class="index_name level1" >c-1</th>
  632:           <th id="T__level1_col0" class="col_heading level1 col0" colspan="2">c1</th>
  633:           <th id="T__level1_col2" class="col_heading level1 col2" >d1</th>
  634:         </tr>
  635:         <tr>
  636:           <th class="blank" >&nbsp;</th>
  637:           <th class="index_name level2" >c-2</th>
  638:           <th id="T__level2_col0" class="col_heading level2 col0" >c2</th>
  639:           <th id="T__level2_col1" class="col_heading level2 col1" >d2</th>
  640:           <th id="T__level2_col2" class="col_heading level2 col2" >c2</th>
  641:         </tr>
  642:         <tr>
  643:           <th class="index_name level0" >i-0</th>
  644:           <th class="index_name level2" >i-2</th>
  645:           <th class="blank col0" >&nbsp;</th>
  646:           <th class="blank col1" >&nbsp;</th>
  647:           <th class="blank col2" >&nbsp;</th>
  648:         </tr>
  649:       </thead>
  650:       <tbody>
  651:         <tr>
  652:           <th id="T__level0_row0" class="row_heading level0 row0" rowspan="2">i0</th>
  653:           <th id="T__level2_row0" class="row_heading level2 row0" >i2</th>
  654:           <td id="T__row0_col0" class="data row0 col0" >0</td>
  655:           <td id="T__row0_col1" class="data row0 col1" >1</td>
  656:           <td id="T__row0_col2" class="data row0 col2" >2</td>
  657:         </tr>
  658:         <tr>
  659:           <th id="T__level2_row1" class="row_heading level2 row1" >j2</th>
  660:           <td id="T__row1_col0" class="data row1 col0" >4</td>
  661:           <td id="T__row1_col1" class="data row1 col1" >5</td>
  662:           <td id="T__row1_col2" class="data row1 col2" >6</td>
  663:         </tr>
  664:         <tr>
  665:           <th id="T__level0_row2" class="row_heading level0 row2" >j0</th>
  666:           <th id="T__level2_row2" class="row_heading level2 row2" >i2</th>
  667:           <td id="T__row2_col0" class="data row2 col0" >8</td>
  668:           <td id="T__row2_col1" class="data row2 col1" >9</td>
  669:           <td id="T__row2_col2" class="data row2 col2" >10</td>
  670:         </tr>
  671:       </tbody>
  672:     </table>
  673:     """
  674:     )
  675:     assert result == expected
  676: 
  677: 
  678: def test_hiding_index_columns_multiindex_trimming():
  679:     # gh 44272
  680:     df = DataFrame(np.arange(64).reshape(8, 8))
  681:     df.columns = MultiIndex.from_product([[0, 1, 2, 3], [0, 1]])
  682:     df.index = MultiIndex.from_product([[0, 1, 2, 3], [0, 1]])
  683:     df.index.names, df.columns.names = ["a", "b"], ["c", "d"]
  684:     styler = Styler(df, cell_ids=False, uuid_len=0)
  685:     styler.hide([(0, 0), (0, 1), (1, 0)], axis=1).hide([(0, 0), (0, 1), (1, 0)], axis=0)
  686:     with option_context("styler.render.max_rows", 4, "styler.render.max_columns", 4):
  687:         result = styler.to_html()
  688: 
  689:     expected = dedent(
  690:         """\
  691:     <style type="text/css">
  692:     </style>
  693:     <table id="T_">
  694:       <thead>
  695:         <tr>
  696:           <th class="blank" >&nbsp;</th>
  697:           <th class="index_name level0" >c</th>
  698:           <th class="col_heading level0 col3" >1</th>
  699:           <th class="col_heading level0 col4" colspan="2">2</th>
  700:           <th class="col_heading level0 col6" >3</th>
  701:         </tr>
  702:         <tr>
  703:           <th class="blank" >&nbsp;</th>
  704:           <th class="index_name level1" >d</th>
  705:           <th class="col_heading level1 col3" >1</th>
  706:           <th class="col_heading level1 col4" >0</th>
  707:           <th class="col_heading level1 col5" >1</th>
  708:           <th class="col_heading level1 col6" >0</th>
  709:           <th class="col_heading level1 col_trim" >...</th>
  710:         </tr>
  711:         <tr>
  712:           <th class="index_name level0" >a</th>
  713:           <th class="index_name level1" >b</th>
  714:           <th class="blank col3" >&nbsp;</th>
  715:           <th class="blank col4" >&nbsp;</th>
  716:           <th class="blank col5" >&nbsp;</th>
  717:           <th class="blank col6" >&nbsp;</th>
  718:           <th class="blank col7 col_trim" >&nbsp;</th>
  719:         </tr>
  720:       </thead>
  721:       <tbody>
  722:         <tr>
  723:           <th class="row_heading level0 row3" >1</th>
  724:           <th class="row_heading level1 row3" >1</th>
  725:           <td class="data row3 col3" >27</td>
  726:           <td class="data row3 col4" >28</td>
  727:           <td class="data row3 col5" >29</td>
  728:           <td class="data row3 col6" >30</td>
  729:           <td class="data row3 col_trim" >...</td>
  730:         </tr>
  731:         <tr>
  732:           <th class="row_heading level0 row4" rowspan="2">2</th>
  733:           <th class="row_heading level1 row4" >0</th>
  734:           <td class="data row4 col3" >35</td>
  735:           <td class="data row4 col4" >36</td>
  736:           <td class="data row4 col5" >37</td>
  737:           <td class="data row4 col6" >38</td>
  738:           <td class="data row4 col_trim" >...</td>
  739:         </tr>
  740:         <tr>
  741:           <th class="row_heading level1 row5" >1</th>
  742:           <td class="data row5 col3" >43</td>
  743:           <td class="data row5 col4" >44</td>
  744:           <td class="data row5 col5" >45</td>
  745:           <td class="data row5 col6" >46</td>
  746:           <td class="data row5 col_trim" >...</td>
  747:         </tr>
  748:         <tr>
  749:           <th class="row_heading level0 row6" >3</th>
  750:           <th class="row_heading level1 row6" >0</th>
  751:           <td class="data row6 col3" >51</td>
  752:           <td class="data row6 col4" >52</td>
  753:           <td class="data row6 col5" >53</td>
  754:           <td class="data row6 col6" >54</td>
  755:           <td class="data row6 col_trim" >...</td>
  756:         </tr>
  757:         <tr>
  758:           <th class="row_heading level0 row_trim" >...</th>
  759:           <th class="row_heading level1 row_trim" >...</th>
  760:           <td class="data col3 row_trim" >...</td>
  761:           <td class="data col4 row_trim" >...</td>
  762:           <td class="data col5 row_trim" >...</td>
  763:           <td class="data col6 row_trim" >...</td>
  764:           <td class="data row_trim col_trim" >...</td>
  765:         </tr>
  766:       </tbody>
  767:     </table>
  768:     """
  769:     )
  770: 
  771:     assert result == expected
  772: 
  773: 
  774: @pytest.mark.parametrize("type", ["data", "index"])
  775: @pytest.mark.parametrize(
  776:     "text, exp, found",
  777:     [
  778:         ("no link, just text", False, ""),
  779:         ("subdomain not www: sub.web.com", False, ""),
  780:         ("www subdomain: www.web.com other", True, "www.web.com"),
  781:         ("scheme full structure: http://www.web.com", True, "http://www.web.com"),
  782:         ("scheme no top-level: http://www.web", True, "http://www.web"),
  783:         ("no scheme, no top-level: www.web", False, "www.web"),
  784:         ("https scheme: https://www.web.com", True, "https://www.web.com"),
  785:         ("ftp scheme: ftp://www.web", True, "ftp://www.web"),
  786:         ("ftps scheme: ftps://www.web", True, "ftps://www.web"),
  787:         ("subdirectories: www.web.com/directory", True, "www.web.com/directory"),
  788:         ("Multiple domains: www.1.2.3.4", True, "www.1.2.3.4"),
  789:         ("with port: http://web.com:80", True, "http://web.com:80"),
  790:         (
  791:             "full net_loc scheme: http://user:pass@web.com",
  792:             True,
  793:             "http://user:pass@web.com",
  794:         ),
  795:         (
  796:             "with valid special chars: http://web.com/,.':;~!@#$*()[]",
  797:             True,
  798:             "http://web.com/,.':;~!@#$*()[]",
  799:         ),
  800:     ],
  801: )
  802: def test_rendered_links(type, text, exp, found):
  803:     if type == "data":
  804:         df = DataFrame([text])
  805:         styler = df.style.format(hyperlinks="html")
  806:     else:
  807:         df = DataFrame([0], index=[text])
  808:         styler = df.style.format_index(hyperlinks="html")
  809: 
  810:     rendered = f'<a href="{found}" target="_blank">{found}</a>'
  811:     result = styler.to_html()
  812:     assert (rendered in result) is exp
  813:     assert (text in result) is not exp  # test conversion done when expected and not
  814: 
  815: 
  816: def test_multiple_rendered_links():
  817:     links = ("www.a.b", "http://a.c", "https://a.d", "ftp://a.e")
  818:     # pylint: disable-next=consider-using-f-string
  819:     df = DataFrame(["text {} {} text {} {}".format(*links)])
  820:     result = df.style.format(hyperlinks="html").to_html()
  821:     href = '<a href="{0}" target="_blank">{0}</a>'
  822:     for link in links:
  823:         assert href.format(link) in result
  824:     assert href.format("text") not in result
  825: 
  826: 
  827: def test_concat(styler):
  828:     other = styler.data.agg(["mean"]).style
  829:     styler.concat(other).set_uuid("X")
  830:     result = styler.to_html()
  831:     fp = "foot0_"
  832:     expected = dedent(
  833:         f"""\
  834:     <tr>
  835:       <th id="T_X_level0_row1" class="row_heading level0 row1" >b</th>
  836:       <td id="T_X_row1_col0" class="data row1 col0" >2.690000</td>
  837:     </tr>
  838:     <tr>
  839:       <th id="T_X_level0_{fp}row0" class="{fp}row_heading level0 {fp}row0" >mean</th>
  840:       <td id="T_X_{fp}row0_col0" class="{fp}data {fp}row0 col0" >2.650000</td>
  841:     </tr>
  842:   </tbody>
  843: </table>
  844:     """
  845:     )
  846:     assert expected in result
  847: 
  848: 
  849: def test_concat_recursion(styler):
  850:     df = styler.data
  851:     styler1 = styler
  852:     styler2 = Styler(df.agg(["mean"]), precision=3)
  853:     styler3 = Styler(df.agg(["mean"]), precision=4)
  854:     styler1.concat(styler2.concat(styler3)).set_uuid("X")
  855:     result = styler.to_html()
  856:     # notice that the second concat (last <tr> of the output html),
  857:     # there are two `foot_` in the id and class
  858:     fp1 = "foot0_"
  859:     fp2 = "foot0_foot0_"
  860:     expected = dedent(
  861:         f"""\
  862:     <tr>
  863:       <th id="T_X_level0_row1" class="row_heading level0 row1" >b</th>
  864:       <td id="T_X_row1_col0" class="data row1 col0" >2.690000</td>
  865:     </tr>
  866:     <tr>
  867:       <th id="T_X_level0_{fp1}row0" class="{fp1}row_heading level0 {fp1}row0" >mean</th>
  868:       <td id="T_X_{fp1}row0_col0" class="{fp1}data {fp1}row0 col0" >2.650</td>
  869:     </tr>
  870:     <tr>
  871:       <th id="T_X_level0_{fp2}row0" class="{fp2}row_heading level0 {fp2}row0" >mean</th>
  872:       <td id="T_X_{fp2}row0_col0" class="{fp2}data {fp2}row0 col0" >2.6500</td>
  873:     </tr>
  874:   </tbody>
  875: </table>
  876:     """
  877:     )
  878:     assert expected in result
  879: 
  880: 
  881: def test_concat_chain(styler):
  882:     df = styler.data
  883:     styler1 = styler
  884:     styler2 = Styler(df.agg(["mean"]), precision=3)
  885:     styler3 = Styler(df.agg(["mean"]), precision=4)
  886:     styler1.concat(styler2).concat(styler3).set_uuid("X")
  887:     result = styler.to_html()
  888:     fp1 = "foot0_"
  889:     fp2 = "foot1_"
  890:     expected = dedent(
  891:         f"""\
  892:     <tr>
  893:       <th id="T_X_level0_row1" class="row_heading level0 row1" >b</th>
  894:       <td id="T_X_row1_col0" class="data row1 col0" >2.690000</td>
  895:     </tr>
  896:     <tr>
  897:       <th id="T_X_level0_{fp1}row0" class="{fp1}row_heading level0 {fp1}row0" >mean</th>
  898:       <td id="T_X_{fp1}row0_col0" class="{fp1}data {fp1}row0 col0" >2.650</td>
  899:     </tr>
  900:     <tr>
  901:       <th id="T_X_level0_{fp2}row0" class="{fp2}row_heading level0 {fp2}row0" >mean</th>
  902:       <td id="T_X_{fp2}row0_col0" class="{fp2}data {fp2}row0 col0" >2.6500</td>
  903:     </tr>
  904:   </tbody>
  905: </table>
  906:     """
  907:     )
  908:     assert expected in result
  909: 
  910: 
  911: def test_concat_combined():
  912:     def html_lines(foot_prefix: str):
  913:         assert foot_prefix.endswith("_") or foot_prefix == ""
  914:         fp = foot_prefix
  915:         return indent(
  916:             dedent(
  917:                 f"""\
  918:         <tr>
  919:           <th id="T_X_level0_{fp}row0" class="{fp}row_heading level0 {fp}row0" >a</th>
  920:           <td id="T_X_{fp}row0_col0" class="{fp}data {fp}row0 col0" >2.610000</td>
  921:         </tr>
  922:         <tr>
  923:           <th id="T_X_level0_{fp}row1" class="{fp}row_heading level0 {fp}row1" >b</th>
  924:           <td id="T_X_{fp}row1_col0" class="{fp}data {fp}row1 col0" >2.690000</td>
  925:         </tr>
  926:         """
  927:             ),
  928:             prefix=" " * 4,
  929:         )
  930: 
  931:     df = DataFrame([[2.61], [2.69]], index=["a", "b"], columns=["A"])
  932:     s1 = df.style.highlight_max(color="red")
  933:     s2 = df.style.highlight_max(color="green")
  934:     s3 = df.style.highlight_max(color="blue")
  935:     s4 = df.style.highlight_max(color="yellow")
  936: 
  937:     result = s1.concat(s2).concat(s3.concat(s4)).set_uuid("X").to_html()
  938:     expected_css = dedent(
  939:         """\
  940:         <style type="text/css">
  941:         #T_X_row1_col0 {
  942:           background-color: red;
  943:         }
  944:         #T_X_foot0_row1_col0 {
  945:           background-color: green;
  946:         }
  947:         #T_X_foot1_row1_col0 {
  948:           background-color: blue;
  949:         }
  950:         #T_X_foot1_foot0_row1_col0 {
  951:           background-color: yellow;
  952:         }
  953:         </style>
  954:         """
  955:     )
  956:     expected_table = (
  957:         dedent(
  958:             """\
  959:             <table id="T_X">
  960:               <thead>
  961:                 <tr>
  962:                   <th class="blank level0" >&nbsp;</th>
  963:                   <th id="T_X_level0_col0" class="col_heading level0 col0" >A</th>
  964:                 </tr>
  965:               </thead>
  966:               <tbody>
  967:             """
  968:         )
  969:         + html_lines("")
  970:         + html_lines("foot0_")
  971:         + html_lines("foot1_")
  972:         + html_lines("foot1_foot0_")
  973:         + dedent(
  974:             """\
  975:               </tbody>
  976:             </table>
  977:             """
  978:         )
  979:     )
  980:     assert expected_css + expected_table == result
  981: 
  982: 
  983: def test_to_html_na_rep_non_scalar_data(datapath):
  984:     # GH47103
  985:     df = DataFrame([{"a": 1, "b": [1, 2, 3], "c": np.nan}])
  986:     result = df.style.format(na_rep="-").to_html(table_uuid="test")
  987:     expected = """\
  988: <style type="text/css">
  989: </style>
  990: <table id="T_test">
  991:   <thead>
  992:     <tr>
  993:       <th class="blank level0" >&nbsp;</th>
  994:       <th id="T_test_level0_col0" class="col_heading level0 col0" >a</th>
  995:       <th id="T_test_level0_col1" class="col_heading level0 col1" >b</th>
  996:       <th id="T_test_level0_col2" class="col_heading level0 col2" >c</th>
  997:     </tr>
  998:   </thead>
  999:   <tbody>
 1000:     <tr>
 1001:       <th id="T_test_level0_row0" class="row_heading level0 row0" >0</th>
 1002:       <td id="T_test_row0_col0" class="data row0 col0" >1</td>
 1003:       <td id="T_test_row0_col1" class="data row0 col1" >[1, 2, 3]</td>
 1004:       <td id="T_test_row0_col2" class="data row0 col2" >-</td>
 1005:     </tr>
 1006:   </tbody>
 1007: </table>
 1008: """
 1009:     assert result == expected
