    1: import numpy as np
    2: import pytest
    3: 
    4: import pandas as pd
    5: from pandas import (
    6:     DataFrame,
    7:     Series,
    8: )
    9: import pandas._testing as tm
   10: from pandas.tests.io.pytables.common import ensure_clean_store
   11: 
   12: from pandas.io.pytables import read_hdf
   13: 
   14: 
   15: def test_complex_fixed(tmp_path, setup_path):
   16:     df = DataFrame(
   17:         np.random.default_rng(2).random((4, 5)).astype(np.complex64),
   18:         index=list("abcd"),
   19:         columns=list("ABCDE"),
   20:     )
   21: 
   22:     path = tmp_path / setup_path
   23:     df.to_hdf(path, key="df")
   24:     reread = read_hdf(path, "df")
   25:     tm.assert_frame_equal(df, reread)
   26: 
   27:     df = DataFrame(
   28:         np.random.default_rng(2).random((4, 5)).astype(np.complex128),
   29:         index=list("abcd"),
   30:         columns=list("ABCDE"),
   31:     )
   32:     path = tmp_path / setup_path
   33:     df.to_hdf(path, key="df")
   34:     reread = read_hdf(path, "df")
   35:     tm.assert_frame_equal(df, reread)
   36: 
   37: 
   38: def test_complex_table(tmp_path, setup_path):
   39:     df = DataFrame(
   40:         np.random.default_rng(2).random((4, 5)).astype(np.complex64),
   41:         index=list("abcd"),
   42:         columns=list("ABCDE"),
   43:     )
   44: 
   45:     path = tmp_path / setup_path
   46:     df.to_hdf(path, key="df", format="table")
   47:     reread = read_hdf(path, key="df")
   48:     tm.assert_frame_equal(df, reread)
   49: 
   50:     df = DataFrame(
   51:         np.random.default_rng(2).random((4, 5)).astype(np.complex128),
   52:         index=list("abcd"),
   53:         columns=list("ABCDE"),
   54:     )
   55: 
   56:     path = tmp_path / setup_path
   57:     df.to_hdf(path, key="df", format="table", mode="w")
   58:     reread = read_hdf(path, "df")
   59:     tm.assert_frame_equal(df, reread)
   60: 
   61: 
   62: def test_complex_mixed_fixed(tmp_path, setup_path):
   63:     complex64 = np.array(
   64:         [1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j], dtype=np.complex64
   65:     )
   66:     complex128 = np.array(
   67:         [1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j], dtype=np.complex128
   68:     )
   69:     df = DataFrame(
   70:         {
   71:             "A": [1, 2, 3, 4],
   72:             "B": ["a", "b", "c", "d"],
   73:             "C": complex64,
   74:             "D": complex128,
   75:             "E": [1.0, 2.0, 3.0, 4.0],
   76:         },
   77:         index=list("abcd"),
   78:     )
   79:     path = tmp_path / setup_path
   80:     df.to_hdf(path, key="df")
   81:     reread = read_hdf(path, "df")
   82:     tm.assert_frame_equal(df, reread)
   83: 
   84: 
   85: def test_complex_mixed_table(tmp_path, setup_path):
   86:     complex64 = np.array(
   87:         [1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j], dtype=np.complex64
   88:     )
   89:     complex128 = np.array(
   90:         [1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j], dtype=np.complex128
   91:     )
   92:     df = DataFrame(
   93:         {
   94:             "A": [1, 2, 3, 4],
   95:             "B": ["a", "b", "c", "d"],
   96:             "C": complex64,
   97:             "D": complex128,
   98:             "E": [1.0, 2.0, 3.0, 4.0],
   99:         },
  100:         index=list("abcd"),
  101:     )
  102: 
  103:     with ensure_clean_store(setup_path) as store:
  104:         store.append("df", df, data_columns=["A", "B"])
  105:         result = store.select("df", where="A>2")
  106:         tm.assert_frame_equal(df.loc[df.A > 2], result)
  107: 
  108:     path = tmp_path / setup_path
  109:     df.to_hdf(path, key="df", format="table")
  110:     reread = read_hdf(path, "df")
  111:     tm.assert_frame_equal(df, reread)
  112: 
  113: 
  114: def test_complex_across_dimensions_fixed(tmp_path, setup_path):
  115:     complex128 = np.array([1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j])
  116:     s = Series(complex128, index=list("abcd"))
  117:     df = DataFrame({"A": s, "B": s})
  118: 
  119:     objs = [s, df]
  120:     comps = [tm.assert_series_equal, tm.assert_frame_equal]
  121:     for obj, comp in zip(objs, comps):
  122:         path = tmp_path / setup_path
  123:         obj.to_hdf(path, key="obj", format="fixed")
  124:         reread = read_hdf(path, "obj")
  125:         comp(obj, reread)
  126: 
  127: 
  128: def test_complex_across_dimensions(tmp_path, setup_path):
  129:     complex128 = np.array([1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j])
  130:     s = Series(complex128, index=list("abcd"))
  131:     df = DataFrame({"A": s, "B": s})
  132: 
  133:     path = tmp_path / setup_path
  134:     df.to_hdf(path, key="obj", format="table")
  135:     reread = read_hdf(path, "obj")
  136:     tm.assert_frame_equal(df, reread)
  137: 
  138: 
  139: def test_complex_indexing_error(setup_path):
  140:     complex128 = np.array(
  141:         [1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j], dtype=np.complex128
  142:     )
  143:     df = DataFrame(
  144:         {"A": [1, 2, 3, 4], "B": ["a", "b", "c", "d"], "C": complex128},
  145:         index=list("abcd"),
  146:     )
  147: 
  148:     msg = (
  149:         "Columns containing complex values can be stored "
  150:         "but cannot be indexed when using table format. "
  151:         "Either use fixed format, set index=False, "
  152:         "or do not include the columns containing complex "
  153:         "values to data_columns when initializing the table."
  154:     )
  155: 
  156:     with ensure_clean_store(setup_path) as store:
  157:         with pytest.raises(TypeError, match=msg):
  158:             store.append("df", df, data_columns=["C"])
  159: 
  160: 
  161: def test_complex_series_error(tmp_path, setup_path):
  162:     complex128 = np.array([1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j, 1.0 + 1.0j])
  163:     s = Series(complex128, index=list("abcd"))
  164: 
  165:     msg = (
  166:         "Columns containing complex values can be stored "
  167:         "but cannot be indexed when using table format. "
  168:         "Either use fixed format, set index=False, "
  169:         "or do not include the columns containing complex "
  170:         "values to data_columns when initializing the table."
  171:     )
  172: 
  173:     path = tmp_path / setup_path
  174:     with pytest.raises(TypeError, match=msg):
  175:         s.to_hdf(path, key="obj", format="t")
  176: 
  177:     path = tmp_path / setup_path
  178:     s.to_hdf(path, key="obj", format="t", index=False)
  179:     reread = read_hdf(path, "obj")
  180:     tm.assert_series_equal(s, reread)
  181: 
  182: 
  183: def test_complex_append(setup_path):
  184:     df = DataFrame(
  185:         {
  186:             "a": np.random.default_rng(2).standard_normal(100).astype(np.complex128),
  187:             "b": np.random.default_rng(2).standard_normal(100),
  188:         }
  189:     )
  190: 
  191:     with ensure_clean_store(setup_path) as store:
  192:         store.append("df", df, data_columns=["b"])
  193:         store.append("df", df)
  194:         result = store.select("df")
  195:         tm.assert_frame_equal(pd.concat([df, df], axis=0), result)
