    1: import codecs
    2: from datetime import datetime
    3: from textwrap import dedent
    4: 
    5: import pytest
    6: 
    7: import pandas as pd
    8: from pandas import (
    9:     DataFrame,
   10:     Series,
   11: )
   12: import pandas._testing as tm
   13: 
   14: pytest.importorskip("jinja2")
   15: 
   16: 
   17: def _dedent(string):
   18:     """Dedent without new line in the beginning.
   19: 
   20:     Built-in textwrap.dedent would keep new line character in the beginning
   21:     of multi-line string starting from the new line.
   22:     This version drops the leading new line character.
   23:     """
   24:     return dedent(string).lstrip()
   25: 
   26: 
   27: @pytest.fixture
   28: def df_short():
   29:     """Short dataframe for testing table/tabular/longtable LaTeX env."""
   30:     return DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
   31: 
   32: 
   33: class TestToLatex:
   34:     def test_to_latex_to_file(self, float_frame):
   35:         with tm.ensure_clean("test.tex") as path:
   36:             float_frame.to_latex(path)
   37:             with open(path, encoding="utf-8") as f:
   38:                 assert float_frame.to_latex() == f.read()
   39: 
   40:     def test_to_latex_to_file_utf8_with_encoding(self):
   41:         # test with utf-8 and encoding option (GH 7061)
   42:         df = DataFrame([["au\xdfgangen"]])
   43:         with tm.ensure_clean("test.tex") as path:
   44:             df.to_latex(path, encoding="utf-8")
   45:             with codecs.open(path, "r", encoding="utf-8") as f:
   46:                 assert df.to_latex() == f.read()
   47: 
   48:     def test_to_latex_to_file_utf8_without_encoding(self):
   49:         # test with utf-8 without encoding option
   50:         df = DataFrame([["au\xdfgangen"]])
   51:         with tm.ensure_clean("test.tex") as path:
   52:             df.to_latex(path)
   53:             with codecs.open(path, "r", encoding="utf-8") as f:
   54:                 assert df.to_latex() == f.read()
   55: 
   56:     def test_to_latex_tabular_with_index(self):
   57:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
   58:         result = df.to_latex()
   59:         expected = _dedent(
   60:             r"""
   61:             \begin{tabular}{lrl}
   62:             \toprule
   63:              & a & b \\
   64:             \midrule
   65:             0 & 1 & b1 \\
   66:             1 & 2 & b2 \\
   67:             \bottomrule
   68:             \end{tabular}
   69:             """
   70:         )
   71:         assert result == expected
   72: 
   73:     def test_to_latex_tabular_without_index(self):
   74:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
   75:         result = df.to_latex(index=False)
   76:         expected = _dedent(
   77:             r"""
   78:             \begin{tabular}{rl}
   79:             \toprule
   80:             a & b \\
   81:             \midrule
   82:             1 & b1 \\
   83:             2 & b2 \\
   84:             \bottomrule
   85:             \end{tabular}
   86:             """
   87:         )
   88:         assert result == expected
   89: 
   90:     @pytest.mark.parametrize(
   91:         "bad_column_format",
   92:         [5, 1.2, ["l", "r"], ("r", "c"), {"r", "c", "l"}, {"a": "r", "b": "l"}],
   93:     )
   94:     def test_to_latex_bad_column_format(self, bad_column_format):
   95:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
   96:         msg = r"`column_format` must be str or unicode"
   97:         with pytest.raises(ValueError, match=msg):
   98:             df.to_latex(column_format=bad_column_format)
   99: 
  100:     def test_to_latex_column_format_just_works(self, float_frame):
  101:         # GH Bug #9402
  102:         float_frame.to_latex(column_format="lcr")
  103: 
  104:     def test_to_latex_column_format(self):
  105:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  106:         result = df.to_latex(column_format="lcr")
  107:         expected = _dedent(
  108:             r"""
  109:             \begin{tabular}{lcr}
  110:             \toprule
  111:              & a & b \\
  112:             \midrule
  113:             0 & 1 & b1 \\
  114:             1 & 2 & b2 \\
  115:             \bottomrule
  116:             \end{tabular}
  117:             """
  118:         )
  119:         assert result == expected
  120: 
  121:     def test_to_latex_float_format_object_col(self):
  122:         # GH#40024
  123:         ser = Series([1000.0, "test"])
  124:         result = ser.to_latex(float_format="{:,.0f}".format)
  125:         expected = _dedent(
  126:             r"""
  127:             \begin{tabular}{ll}
  128:             \toprule
  129:              & 0 \\
  130:             \midrule
  131:             0 & 1,000 \\
  132:             1 & test \\
  133:             \bottomrule
  134:             \end{tabular}
  135:             """
  136:         )
  137:         assert result == expected
  138: 
  139:     def test_to_latex_empty_tabular(self):
  140:         df = DataFrame()
  141:         result = df.to_latex()
  142:         expected = _dedent(
  143:             r"""
  144:             \begin{tabular}{l}
  145:             \toprule
  146:             \midrule
  147:             \bottomrule
  148:             \end{tabular}
  149:             """
  150:         )
  151:         assert result == expected
  152: 
  153:     def test_to_latex_series(self):
  154:         s = Series(["a", "b", "c"])
  155:         result = s.to_latex()
  156:         expected = _dedent(
  157:             r"""
  158:             \begin{tabular}{ll}
  159:             \toprule
  160:              & 0 \\
  161:             \midrule
  162:             0 & a \\
  163:             1 & b \\
  164:             2 & c \\
  165:             \bottomrule
  166:             \end{tabular}
  167:             """
  168:         )
  169:         assert result == expected
  170: 
  171:     def test_to_latex_midrule_location(self):
  172:         # GH 18326
  173:         df = DataFrame({"a": [1, 2]})
  174:         df.index.name = "foo"
  175:         result = df.to_latex(index_names=False)
  176:         expected = _dedent(
  177:             r"""
  178:             \begin{tabular}{lr}
  179:             \toprule
  180:              & a \\
  181:             \midrule
  182:             0 & 1 \\
  183:             1 & 2 \\
  184:             \bottomrule
  185:             \end{tabular}
  186:             """
  187:         )
  188:         assert result == expected
  189: 
  190:     def test_to_latex_pos_args_deprecation(self):
  191:         # GH-54229
  192:         df = DataFrame(
  193:             {
  194:                 "name": ["Raphael", "Donatello"],
  195:                 "age": [26, 45],
  196:                 "height": [181.23, 177.65],
  197:             }
  198:         )
  199:         msg = (
  200:             r"Starting with pandas version 3.0 all arguments of to_latex except for "
  201:             r"the argument 'buf' will be keyword-only."
  202:         )
  203:         with tm.assert_produces_warning(FutureWarning, match=msg):
  204:             df.to_latex(None, None)
  205: 
  206: 
  207: class TestToLatexLongtable:
  208:     def test_to_latex_empty_longtable(self):
  209:         df = DataFrame()
  210:         result = df.to_latex(longtable=True)
  211:         expected = _dedent(
  212:             r"""
  213:             \begin{longtable}{l}
  214:             \toprule
  215:             \midrule
  216:             \endfirsthead
  217:             \toprule
  218:             \midrule
  219:             \endhead
  220:             \midrule
  221:             \multicolumn{0}{r}{Continued on next page} \\
  222:             \midrule
  223:             \endfoot
  224:             \bottomrule
  225:             \endlastfoot
  226:             \end{longtable}
  227:             """
  228:         )
  229:         assert result == expected
  230: 
  231:     def test_to_latex_longtable_with_index(self):
  232:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  233:         result = df.to_latex(longtable=True)
  234:         expected = _dedent(
  235:             r"""
  236:             \begin{longtable}{lrl}
  237:             \toprule
  238:              & a & b \\
  239:             \midrule
  240:             \endfirsthead
  241:             \toprule
  242:              & a & b \\
  243:             \midrule
  244:             \endhead
  245:             \midrule
  246:             \multicolumn{3}{r}{Continued on next page} \\
  247:             \midrule
  248:             \endfoot
  249:             \bottomrule
  250:             \endlastfoot
  251:             0 & 1 & b1 \\
  252:             1 & 2 & b2 \\
  253:             \end{longtable}
  254:             """
  255:         )
  256:         assert result == expected
  257: 
  258:     def test_to_latex_longtable_without_index(self):
  259:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  260:         result = df.to_latex(index=False, longtable=True)
  261:         expected = _dedent(
  262:             r"""
  263:             \begin{longtable}{rl}
  264:             \toprule
  265:             a & b \\
  266:             \midrule
  267:             \endfirsthead
  268:             \toprule
  269:             a & b \\
  270:             \midrule
  271:             \endhead
  272:             \midrule
  273:             \multicolumn{2}{r}{Continued on next page} \\
  274:             \midrule
  275:             \endfoot
  276:             \bottomrule
  277:             \endlastfoot
  278:             1 & b1 \\
  279:             2 & b2 \\
  280:             \end{longtable}
  281:             """
  282:         )
  283:         assert result == expected
  284: 
  285:     @pytest.mark.parametrize(
  286:         "df, expected_number",
  287:         [
  288:             (DataFrame({"a": [1, 2]}), 1),
  289:             (DataFrame({"a": [1, 2], "b": [3, 4]}), 2),
  290:             (DataFrame({"a": [1, 2], "b": [3, 4], "c": [5, 6]}), 3),
  291:         ],
  292:     )
  293:     def test_to_latex_longtable_continued_on_next_page(self, df, expected_number):
  294:         result = df.to_latex(index=False, longtable=True)
  295:         assert rf"\multicolumn{{{expected_number}}}" in result
  296: 
  297: 
  298: class TestToLatexHeader:
  299:     def test_to_latex_no_header_with_index(self):
  300:         # GH 7124
  301:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  302:         result = df.to_latex(header=False)
  303:         expected = _dedent(
  304:             r"""
  305:             \begin{tabular}{lrl}
  306:             \toprule
  307:             \midrule
  308:             0 & 1 & b1 \\
  309:             1 & 2 & b2 \\
  310:             \bottomrule
  311:             \end{tabular}
  312:             """
  313:         )
  314:         assert result == expected
  315: 
  316:     def test_to_latex_no_header_without_index(self):
  317:         # GH 7124
  318:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  319:         result = df.to_latex(index=False, header=False)
  320:         expected = _dedent(
  321:             r"""
  322:             \begin{tabular}{rl}
  323:             \toprule
  324:             \midrule
  325:             1 & b1 \\
  326:             2 & b2 \\
  327:             \bottomrule
  328:             \end{tabular}
  329:             """
  330:         )
  331:         assert result == expected
  332: 
  333:     def test_to_latex_specified_header_with_index(self):
  334:         # GH 7124
  335:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  336:         result = df.to_latex(header=["AA", "BB"])
  337:         expected = _dedent(
  338:             r"""
  339:             \begin{tabular}{lrl}
  340:             \toprule
  341:              & AA & BB \\
  342:             \midrule
  343:             0 & 1 & b1 \\
  344:             1 & 2 & b2 \\
  345:             \bottomrule
  346:             \end{tabular}
  347:             """
  348:         )
  349:         assert result == expected
  350: 
  351:     def test_to_latex_specified_header_without_index(self):
  352:         # GH 7124
  353:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  354:         result = df.to_latex(header=["AA", "BB"], index=False)
  355:         expected = _dedent(
  356:             r"""
  357:             \begin{tabular}{rl}
  358:             \toprule
  359:             AA & BB \\
  360:             \midrule
  361:             1 & b1 \\
  362:             2 & b2 \\
  363:             \bottomrule
  364:             \end{tabular}
  365:             """
  366:         )
  367:         assert result == expected
  368: 
  369:     @pytest.mark.parametrize(
  370:         "header, num_aliases",
  371:         [
  372:             (["A"], 1),
  373:             (("B",), 1),
  374:             (("Col1", "Col2", "Col3"), 3),
  375:             (("Col1", "Col2", "Col3", "Col4"), 4),
  376:         ],
  377:     )
  378:     def test_to_latex_number_of_items_in_header_missmatch_raises(
  379:         self,
  380:         header,
  381:         num_aliases,
  382:     ):
  383:         # GH 7124
  384:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  385:         msg = f"Writing 2 cols but got {num_aliases} aliases"
  386:         with pytest.raises(ValueError, match=msg):
  387:             df.to_latex(header=header)
  388: 
  389:     def test_to_latex_decimal(self):
  390:         # GH 12031
  391:         df = DataFrame({"a": [1.0, 2.1], "b": ["b1", "b2"]})
  392:         result = df.to_latex(decimal=",")
  393:         expected = _dedent(
  394:             r"""
  395:             \begin{tabular}{lrl}
  396:             \toprule
  397:              & a & b \\
  398:             \midrule
  399:             0 & 1,000000 & b1 \\
  400:             1 & 2,100000 & b2 \\
  401:             \bottomrule
  402:             \end{tabular}
  403:             """
  404:         )
  405:         assert result == expected
  406: 
  407: 
  408: class TestToLatexBold:
  409:     def test_to_latex_bold_rows(self):
  410:         # GH 16707
  411:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  412:         result = df.to_latex(bold_rows=True)
  413:         expected = _dedent(
  414:             r"""
  415:             \begin{tabular}{lrl}
  416:             \toprule
  417:              & a & b \\
  418:             \midrule
  419:             \textbf{0} & 1 & b1 \\
  420:             \textbf{1} & 2 & b2 \\
  421:             \bottomrule
  422:             \end{tabular}
  423:             """
  424:         )
  425:         assert result == expected
  426: 
  427:     def test_to_latex_no_bold_rows(self):
  428:         # GH 16707
  429:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  430:         result = df.to_latex(bold_rows=False)
  431:         expected = _dedent(
  432:             r"""
  433:             \begin{tabular}{lrl}
  434:             \toprule
  435:              & a & b \\
  436:             \midrule
  437:             0 & 1 & b1 \\
  438:             1 & 2 & b2 \\
  439:             \bottomrule
  440:             \end{tabular}
  441:             """
  442:         )
  443:         assert result == expected
  444: 
  445: 
  446: class TestToLatexCaptionLabel:
  447:     @pytest.fixture
  448:     def caption_table(self):
  449:         """Caption for table/tabular LaTeX environment."""
  450:         return "a table in a \\texttt{table/tabular} environment"
  451: 
  452:     @pytest.fixture
  453:     def short_caption(self):
  454:         """Short caption for testing \\caption[short_caption]{full_caption}."""
  455:         return "a table"
  456: 
  457:     @pytest.fixture
  458:     def label_table(self):
  459:         """Label for table/tabular LaTeX environment."""
  460:         return "tab:table_tabular"
  461: 
  462:     @pytest.fixture
  463:     def caption_longtable(self):
  464:         """Caption for longtable LaTeX environment."""
  465:         return "a table in a \\texttt{longtable} environment"
  466: 
  467:     @pytest.fixture
  468:     def label_longtable(self):
  469:         """Label for longtable LaTeX environment."""
  470:         return "tab:longtable"
  471: 
  472:     def test_to_latex_caption_only(self, df_short, caption_table):
  473:         # GH 25436
  474:         result = df_short.to_latex(caption=caption_table)
  475:         expected = _dedent(
  476:             r"""
  477:             \begin{table}
  478:             \caption{a table in a \texttt{table/tabular} environment}
  479:             \begin{tabular}{lrl}
  480:             \toprule
  481:              & a & b \\
  482:             \midrule
  483:             0 & 1 & b1 \\
  484:             1 & 2 & b2 \\
  485:             \bottomrule
  486:             \end{tabular}
  487:             \end{table}
  488:             """
  489:         )
  490:         assert result == expected
  491: 
  492:     def test_to_latex_label_only(self, df_short, label_table):
  493:         # GH 25436
  494:         result = df_short.to_latex(label=label_table)
  495:         expected = _dedent(
  496:             r"""
  497:             \begin{table}
  498:             \label{tab:table_tabular}
  499:             \begin{tabular}{lrl}
  500:             \toprule
  501:              & a & b \\
  502:             \midrule
  503:             0 & 1 & b1 \\
  504:             1 & 2 & b2 \\
  505:             \bottomrule
  506:             \end{tabular}
  507:             \end{table}
  508:             """
  509:         )
  510:         assert result == expected
  511: 
  512:     def test_to_latex_caption_and_label(self, df_short, caption_table, label_table):
  513:         # GH 25436
  514:         result = df_short.to_latex(caption=caption_table, label=label_table)
  515:         expected = _dedent(
  516:             r"""
  517:             \begin{table}
  518:             \caption{a table in a \texttt{table/tabular} environment}
  519:             \label{tab:table_tabular}
  520:             \begin{tabular}{lrl}
  521:             \toprule
  522:              & a & b \\
  523:             \midrule
  524:             0 & 1 & b1 \\
  525:             1 & 2 & b2 \\
  526:             \bottomrule
  527:             \end{tabular}
  528:             \end{table}
  529:             """
  530:         )
  531:         assert result == expected
  532: 
  533:     def test_to_latex_caption_and_shortcaption(
  534:         self,
  535:         df_short,
  536:         caption_table,
  537:         short_caption,
  538:     ):
  539:         result = df_short.to_latex(caption=(caption_table, short_caption))
  540:         expected = _dedent(
  541:             r"""
  542:             \begin{table}
  543:             \caption[a table]{a table in a \texttt{table/tabular} environment}
  544:             \begin{tabular}{lrl}
  545:             \toprule
  546:              & a & b \\
  547:             \midrule
  548:             0 & 1 & b1 \\
  549:             1 & 2 & b2 \\
  550:             \bottomrule
  551:             \end{tabular}
  552:             \end{table}
  553:             """
  554:         )
  555:         assert result == expected
  556: 
  557:     def test_to_latex_caption_and_shortcaption_list_is_ok(self, df_short):
  558:         caption = ("Long-long-caption", "Short")
  559:         result_tuple = df_short.to_latex(caption=caption)
  560:         result_list = df_short.to_latex(caption=list(caption))
  561:         assert result_tuple == result_list
  562: 
  563:     def test_to_latex_caption_shortcaption_and_label(
  564:         self,
  565:         df_short,
  566:         caption_table,
  567:         short_caption,
  568:         label_table,
  569:     ):
  570:         # test when the short_caption is provided alongside caption and label
  571:         result = df_short.to_latex(
  572:             caption=(caption_table, short_caption),
  573:             label=label_table,
  574:         )
  575:         expected = _dedent(
  576:             r"""
  577:             \begin{table}
  578:             \caption[a table]{a table in a \texttt{table/tabular} environment}
  579:             \label{tab:table_tabular}
  580:             \begin{tabular}{lrl}
  581:             \toprule
  582:              & a & b \\
  583:             \midrule
  584:             0 & 1 & b1 \\
  585:             1 & 2 & b2 \\
  586:             \bottomrule
  587:             \end{tabular}
  588:             \end{table}
  589:             """
  590:         )
  591:         assert result == expected
  592: 
  593:     @pytest.mark.parametrize(
  594:         "bad_caption",
  595:         [
  596:             ("full_caption", "short_caption", "extra_string"),
  597:             ("full_caption", "short_caption", 1),
  598:             ("full_caption", "short_caption", None),
  599:             ("full_caption",),
  600:             (None,),
  601:         ],
  602:     )
  603:     def test_to_latex_bad_caption_raises(self, bad_caption):
  604:         # test that wrong number of params is raised
  605:         df = DataFrame({"a": [1]})
  606:         msg = "`caption` must be either a string or 2-tuple of strings"
  607:         with pytest.raises(ValueError, match=msg):
  608:             df.to_latex(caption=bad_caption)
  609: 
  610:     def test_to_latex_two_chars_caption(self, df_short):
  611:         # test that two chars caption is handled correctly
  612:         # it must not be unpacked into long_caption, short_caption.
  613:         result = df_short.to_latex(caption="xy")
  614:         expected = _dedent(
  615:             r"""
  616:             \begin{table}
  617:             \caption{xy}
  618:             \begin{tabular}{lrl}
  619:             \toprule
  620:              & a & b \\
  621:             \midrule
  622:             0 & 1 & b1 \\
  623:             1 & 2 & b2 \\
  624:             \bottomrule
  625:             \end{tabular}
  626:             \end{table}
  627:             """
  628:         )
  629:         assert result == expected
  630: 
  631:     def test_to_latex_longtable_caption_only(self, df_short, caption_longtable):
  632:         # GH 25436
  633:         # test when no caption and no label is provided
  634:         # is performed by test_to_latex_longtable()
  635:         result = df_short.to_latex(longtable=True, caption=caption_longtable)
  636:         expected = _dedent(
  637:             r"""
  638:             \begin{longtable}{lrl}
  639:             \caption{a table in a \texttt{longtable} environment} \\
  640:             \toprule
  641:              & a & b \\
  642:             \midrule
  643:             \endfirsthead
  644:             \caption[]{a table in a \texttt{longtable} environment} \\
  645:             \toprule
  646:              & a & b \\
  647:             \midrule
  648:             \endhead
  649:             \midrule
  650:             \multicolumn{3}{r}{Continued on next page} \\
  651:             \midrule
  652:             \endfoot
  653:             \bottomrule
  654:             \endlastfoot
  655:             0 & 1 & b1 \\
  656:             1 & 2 & b2 \\
  657:             \end{longtable}
  658:             """
  659:         )
  660:         assert result == expected
  661: 
  662:     def test_to_latex_longtable_label_only(self, df_short, label_longtable):
  663:         # GH 25436
  664:         result = df_short.to_latex(longtable=True, label=label_longtable)
  665:         expected = _dedent(
  666:             r"""
  667:             \begin{longtable}{lrl}
  668:             \label{tab:longtable} \\
  669:             \toprule
  670:              & a & b \\
  671:             \midrule
  672:             \endfirsthead
  673:             \toprule
  674:              & a & b \\
  675:             \midrule
  676:             \endhead
  677:             \midrule
  678:             \multicolumn{3}{r}{Continued on next page} \\
  679:             \midrule
  680:             \endfoot
  681:             \bottomrule
  682:             \endlastfoot
  683:             0 & 1 & b1 \\
  684:             1 & 2 & b2 \\
  685:             \end{longtable}
  686:             """
  687:         )
  688:         assert result == expected
  689: 
  690:     def test_to_latex_longtable_caption_and_label(
  691:         self,
  692:         df_short,
  693:         caption_longtable,
  694:         label_longtable,
  695:     ):
  696:         # GH 25436
  697:         result = df_short.to_latex(
  698:             longtable=True,
  699:             caption=caption_longtable,
  700:             label=label_longtable,
  701:         )
  702:         expected = _dedent(
  703:             r"""
  704:         \begin{longtable}{lrl}
  705:         \caption{a table in a \texttt{longtable} environment} \label{tab:longtable} \\
  706:         \toprule
  707:          & a & b \\
  708:         \midrule
  709:         \endfirsthead
  710:         \caption[]{a table in a \texttt{longtable} environment} \\
  711:         \toprule
  712:          & a & b \\
  713:         \midrule
  714:         \endhead
  715:         \midrule
  716:         \multicolumn{3}{r}{Continued on next page} \\
  717:         \midrule
  718:         \endfoot
  719:         \bottomrule
  720:         \endlastfoot
  721:         0 & 1 & b1 \\
  722:         1 & 2 & b2 \\
  723:         \end{longtable}
  724:         """
  725:         )
  726:         assert result == expected
  727: 
  728:     def test_to_latex_longtable_caption_shortcaption_and_label(
  729:         self,
  730:         df_short,
  731:         caption_longtable,
  732:         short_caption,
  733:         label_longtable,
  734:     ):
  735:         # test when the caption, the short_caption and the label are provided
  736:         result = df_short.to_latex(
  737:             longtable=True,
  738:             caption=(caption_longtable, short_caption),
  739:             label=label_longtable,
  740:         )
  741:         expected = _dedent(
  742:             r"""
  743: \begin{longtable}{lrl}
  744: \caption[a table]{a table in a \texttt{longtable} environment} \label{tab:longtable} \\
  745: \toprule
  746:  & a & b \\
  747: \midrule
  748: \endfirsthead
  749: \caption[]{a table in a \texttt{longtable} environment} \\
  750: \toprule
  751:  & a & b \\
  752: \midrule
  753: \endhead
  754: \midrule
  755: \multicolumn{3}{r}{Continued on next page} \\
  756: \midrule
  757: \endfoot
  758: \bottomrule
  759: \endlastfoot
  760: 0 & 1 & b1 \\
  761: 1 & 2 & b2 \\
  762: \end{longtable}
  763: """
  764:         )
  765:         assert result == expected
  766: 
  767: 
  768: class TestToLatexEscape:
  769:     @pytest.fixture
  770:     def df_with_symbols(self):
  771:         """Dataframe with special characters for testing chars escaping."""
  772:         a = "a"
  773:         b = "b"
  774:         yield DataFrame({"co$e^x$": {a: "a", b: "b"}, "co^l1": {a: "a", b: "b"}})
  775: 
  776:     def test_to_latex_escape_false(self, df_with_symbols):
  777:         result = df_with_symbols.to_latex(escape=False)
  778:         expected = _dedent(
  779:             r"""
  780:             \begin{tabular}{lll}
  781:             \toprule
  782:              & co$e^x$ & co^l1 \\
  783:             \midrule
  784:             a & a & a \\
  785:             b & b & b \\
  786:             \bottomrule
  787:             \end{tabular}
  788:             """
  789:         )
  790:         assert result == expected
  791: 
  792:     def test_to_latex_escape_default(self, df_with_symbols):
  793:         # gh50871: in v2.0 escape is False by default (styler.format.escape=None)
  794:         default = df_with_symbols.to_latex()
  795:         specified_true = df_with_symbols.to_latex(escape=True)
  796:         assert default != specified_true
  797: 
  798:     def test_to_latex_special_escape(self):
  799:         df = DataFrame([r"a\b\c", r"^a^b^c", r"~a~b~c"])
  800:         result = df.to_latex(escape=True)
  801:         expected = _dedent(
  802:             r"""
  803:             \begin{tabular}{ll}
  804:             \toprule
  805:              & 0 \\
  806:             \midrule
  807:             0 & a\textbackslash b\textbackslash c \\
  808:             1 & \textasciicircum a\textasciicircum b\textasciicircum c \\
  809:             2 & \textasciitilde a\textasciitilde b\textasciitilde c \\
  810:             \bottomrule
  811:             \end{tabular}
  812:             """
  813:         )
  814:         assert result == expected
  815: 
  816:     def test_to_latex_escape_special_chars(self):
  817:         special_characters = ["&", "%", "$", "#", "_", "{", "}", "~", "^", "\\"]
  818:         df = DataFrame(data=special_characters)
  819:         result = df.to_latex(escape=True)
  820:         expected = _dedent(
  821:             r"""
  822:             \begin{tabular}{ll}
  823:             \toprule
  824:              & 0 \\
  825:             \midrule
  826:             0 & \& \\
  827:             1 & \% \\
  828:             2 & \$ \\
  829:             3 & \# \\
  830:             4 & \_ \\
  831:             5 & \{ \\
  832:             6 & \} \\
  833:             7 & \textasciitilde  \\
  834:             8 & \textasciicircum  \\
  835:             9 & \textbackslash  \\
  836:             \bottomrule
  837:             \end{tabular}
  838:             """
  839:         )
  840:         assert result == expected
  841: 
  842:     def test_to_latex_specified_header_special_chars_without_escape(self):
  843:         # GH 7124
  844:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  845:         result = df.to_latex(header=["$A$", "$B$"], escape=False)
  846:         expected = _dedent(
  847:             r"""
  848:             \begin{tabular}{lrl}
  849:             \toprule
  850:              & $A$ & $B$ \\
  851:             \midrule
  852:             0 & 1 & b1 \\
  853:             1 & 2 & b2 \\
  854:             \bottomrule
  855:             \end{tabular}
  856:             """
  857:         )
  858:         assert result == expected
  859: 
  860: 
  861: class TestToLatexPosition:
  862:     def test_to_latex_position(self):
  863:         the_position = "h"
  864:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  865:         result = df.to_latex(position=the_position)
  866:         expected = _dedent(
  867:             r"""
  868:             \begin{table}[h]
  869:             \begin{tabular}{lrl}
  870:             \toprule
  871:              & a & b \\
  872:             \midrule
  873:             0 & 1 & b1 \\
  874:             1 & 2 & b2 \\
  875:             \bottomrule
  876:             \end{tabular}
  877:             \end{table}
  878:             """
  879:         )
  880:         assert result == expected
  881: 
  882:     def test_to_latex_longtable_position(self):
  883:         the_position = "t"
  884:         df = DataFrame({"a": [1, 2], "b": ["b1", "b2"]})
  885:         result = df.to_latex(longtable=True, position=the_position)
  886:         expected = _dedent(
  887:             r"""
  888:             \begin{longtable}[t]{lrl}
  889:             \toprule
  890:              & a & b \\
  891:             \midrule
  892:             \endfirsthead
  893:             \toprule
  894:              & a & b \\
  895:             \midrule
  896:             \endhead
  897:             \midrule
  898:             \multicolumn{3}{r}{Continued on next page} \\
  899:             \midrule
  900:             \endfoot
  901:             \bottomrule
  902:             \endlastfoot
  903:             0 & 1 & b1 \\
  904:             1 & 2 & b2 \\
  905:             \end{longtable}
  906:             """
  907:         )
  908:         assert result == expected
  909: 
  910: 
  911: class TestToLatexFormatters:
  912:     def test_to_latex_with_formatters(self):
  913:         df = DataFrame(
  914:             {
  915:                 "datetime64": [
  916:                     datetime(2016, 1, 1),
  917:                     datetime(2016, 2, 5),
  918:                     datetime(2016, 3, 3),
  919:                 ],
  920:                 "float": [1.0, 2.0, 3.0],
  921:                 "int": [1, 2, 3],
  922:                 "object": [(1, 2), True, False],
  923:             }
  924:         )
  925: 
  926:         formatters = {
  927:             "datetime64": lambda x: x.strftime("%Y-%m"),
  928:             "float": lambda x: f"[{x: 4.1f}]",
  929:             "int": lambda x: f"0x{x:x}",
  930:             "object": lambda x: f"-{x!s}-",
  931:             "__index__": lambda x: f"index: {x}",
  932:         }
  933:         result = df.to_latex(formatters=dict(formatters))
  934: 
  935:         expected = _dedent(
  936:             r"""
  937:             \begin{tabular}{llrrl}
  938:             \toprule
  939:              & datetime64 & float & int & object \\
  940:             \midrule
  941:             index: 0 & 2016-01 & [ 1.0] & 0x1 & -(1, 2)- \\
  942:             index: 1 & 2016-02 & [ 2.0] & 0x2 & -True- \\
  943:             index: 2 & 2016-03 & [ 3.0] & 0x3 & -False- \\
  944:             \bottomrule
  945:             \end{tabular}
  946:             """
  947:         )
  948:         assert result == expected
  949: 
  950:     def test_to_latex_float_format_no_fixed_width_3decimals(self):
  951:         # GH 21625
  952:         df = DataFrame({"x": [0.19999]})
  953:         result = df.to_latex(float_format="%.3f")
  954:         expected = _dedent(
  955:             r"""
  956:             \begin{tabular}{lr}
  957:             \toprule
  958:              & x \\
  959:             \midrule
  960:             0 & 0.200 \\
  961:             \bottomrule
  962:             \end{tabular}
  963:             """
  964:         )
  965:         assert result == expected
  966: 
  967:     def test_to_latex_float_format_no_fixed_width_integer(self):
  968:         # GH 22270
  969:         df = DataFrame({"x": [100.0]})
  970:         result = df.to_latex(float_format="%.0f")
  971:         expected = _dedent(
  972:             r"""
  973:             \begin{tabular}{lr}
  974:             \toprule
  975:              & x \\
  976:             \midrule
  977:             0 & 100 \\
  978:             \bottomrule
  979:             \end{tabular}
  980:             """
  981:         )
  982:         assert result == expected
  983: 
  984:     @pytest.mark.parametrize("na_rep", ["NaN", "Ted"])
  985:     def test_to_latex_na_rep_and_float_format(self, na_rep):
  986:         df = DataFrame(
  987:             [
  988:                 ["A", 1.2225],
  989:                 ["A", None],
  990:             ],
  991:             columns=["Group", "Data"],
  992:         )
  993:         result = df.to_latex(na_rep=na_rep, float_format="{:.2f}".format)
  994:         expected = _dedent(
  995:             rf"""
  996:             \begin{{tabular}}{{llr}}
  997:             \toprule
  998:              & Group & Data \\
  999:             \midrule
 1000:             0 & A & 1.22 \\
 1001:             1 & A & {na_rep} \\
 1002:             \bottomrule
 1003:             \end{{tabular}}
 1004:             """
 1005:         )
 1006:         assert result == expected
 1007: 
 1008: 
 1009: class TestToLatexMultiindex:
 1010:     @pytest.fixture
 1011:     def multiindex_frame(self):
 1012:         """Multiindex dataframe for testing multirow LaTeX macros."""
 1013:         yield DataFrame.from_dict(
 1014:             {
 1015:                 ("c1", 0): Series({x: x for x in range(4)}),
 1016:                 ("c1", 1): Series({x: x + 4 for x in range(4)}),
 1017:                 ("c2", 0): Series({x: x for x in range(4)}),
 1018:                 ("c2", 1): Series({x: x + 4 for x in range(4)}),
 1019:                 ("c3", 0): Series({x: x for x in range(4)}),
 1020:             }
 1021:         ).T
 1022: 
 1023:     @pytest.fixture
 1024:     def multicolumn_frame(self):
 1025:         """Multicolumn dataframe for testing multicolumn LaTeX macros."""
 1026:         yield DataFrame(
 1027:             {
 1028:                 ("c1", 0): {x: x for x in range(5)},
 1029:                 ("c1", 1): {x: x + 5 for x in range(5)},
 1030:                 ("c2", 0): {x: x for x in range(5)},
 1031:                 ("c2", 1): {x: x + 5 for x in range(5)},
 1032:                 ("c3", 0): {x: x for x in range(5)},
 1033:             }
 1034:         )
 1035: 
 1036:     def test_to_latex_multindex_header(self):
 1037:         # GH 16718
 1038:         df = DataFrame({"a": [0], "b": [1], "c": [2], "d": [3]})
 1039:         df = df.set_index(["a", "b"])
 1040:         observed = df.to_latex(header=["r1", "r2"], multirow=False)
 1041:         expected = _dedent(
 1042:             r"""
 1043:             \begin{tabular}{llrr}
 1044:             \toprule
 1045:              &  & r1 & r2 \\
 1046:             a & b &  &  \\
 1047:             \midrule
 1048:             0 & 1 & 2 & 3 \\
 1049:             \bottomrule
 1050:             \end{tabular}
 1051:             """
 1052:         )
 1053:         assert observed == expected
 1054: 
 1055:     def test_to_latex_multiindex_empty_name(self):
 1056:         # GH 18669
 1057:         mi = pd.MultiIndex.from_product([[1, 2]], names=[""])
 1058:         df = DataFrame(-1, index=mi, columns=range(4))
 1059:         observed = df.to_latex()
 1060:         expected = _dedent(
 1061:             r"""
 1062:             \begin{tabular}{lrrrr}
 1063:             \toprule
 1064:              & 0 & 1 & 2 & 3 \\
 1065:              &  &  &  &  \\
 1066:             \midrule
 1067:             1 & -1 & -1 & -1 & -1 \\
 1068:             2 & -1 & -1 & -1 & -1 \\
 1069:             \bottomrule
 1070:             \end{tabular}
 1071:             """
 1072:         )
 1073:         assert observed == expected
 1074: 
 1075:     def test_to_latex_multiindex_column_tabular(self):
 1076:         df = DataFrame({("x", "y"): ["a"]})
 1077:         result = df.to_latex()
 1078:         expected = _dedent(
 1079:             r"""
 1080:             \begin{tabular}{ll}
 1081:             \toprule
 1082:              & x \\
 1083:              & y \\
 1084:             \midrule
 1085:             0 & a \\
 1086:             \bottomrule
 1087:             \end{tabular}
 1088:             """
 1089:         )
 1090:         assert result == expected
 1091: 
 1092:     def test_to_latex_multiindex_small_tabular(self):
 1093:         df = DataFrame({("x", "y"): ["a"]}).T
 1094:         result = df.to_latex(multirow=False)
 1095:         expected = _dedent(
 1096:             r"""
 1097:             \begin{tabular}{lll}
 1098:             \toprule
 1099:              &  & 0 \\
 1100:             \midrule
 1101:             x & y & a \\
 1102:             \bottomrule
 1103:             \end{tabular}
 1104:             """
 1105:         )
 1106:         assert result == expected
 1107: 
 1108:     def test_to_latex_multiindex_tabular(self, multiindex_frame):
 1109:         result = multiindex_frame.to_latex(multirow=False)
 1110:         expected = _dedent(
 1111:             r"""
 1112:             \begin{tabular}{llrrrr}
 1113:             \toprule
 1114:              &  & 0 & 1 & 2 & 3 \\
 1115:             \midrule
 1116:             c1 & 0 & 0 & 1 & 2 & 3 \\
 1117:              & 1 & 4 & 5 & 6 & 7 \\
 1118:             c2 & 0 & 0 & 1 & 2 & 3 \\
 1119:              & 1 & 4 & 5 & 6 & 7 \\
 1120:             c3 & 0 & 0 & 1 & 2 & 3 \\
 1121:             \bottomrule
 1122:             \end{tabular}
 1123:             """
 1124:         )
 1125:         assert result == expected
 1126: 
 1127:     def test_to_latex_multicolumn_tabular(self, multiindex_frame):
 1128:         # GH 14184
 1129:         df = multiindex_frame.T
 1130:         df.columns.names = ["a", "b"]
 1131:         result = df.to_latex(multirow=False)
 1132:         expected = _dedent(
 1133:             r"""
 1134:             \begin{tabular}{lrrrrr}
 1135:             \toprule
 1136:             a & \multicolumn{2}{r}{c1} & \multicolumn{2}{r}{c2} & c3 \\
 1137:             b & 0 & 1 & 0 & 1 & 0 \\
 1138:             \midrule
 1139:             0 & 0 & 4 & 0 & 4 & 0 \\
 1140:             1 & 1 & 5 & 1 & 5 & 1 \\
 1141:             2 & 2 & 6 & 2 & 6 & 2 \\
 1142:             3 & 3 & 7 & 3 & 7 & 3 \\
 1143:             \bottomrule
 1144:             \end{tabular}
 1145:             """
 1146:         )
 1147:         assert result == expected
 1148: 
 1149:     def test_to_latex_index_has_name_tabular(self):
 1150:         # GH 10660
 1151:         df = DataFrame({"a": [0, 0, 1, 1], "b": list("abab"), "c": [1, 2, 3, 4]})
 1152:         result = df.set_index(["a", "b"]).to_latex(multirow=False)
 1153:         expected = _dedent(
 1154:             r"""
 1155:             \begin{tabular}{llr}
 1156:             \toprule
 1157:              &  & c \\
 1158:             a & b &  \\
 1159:             \midrule
 1160:             0 & a & 1 \\
 1161:              & b & 2 \\
 1162:             1 & a & 3 \\
 1163:              & b & 4 \\
 1164:             \bottomrule
 1165:             \end{tabular}
 1166:             """
 1167:         )
 1168:         assert result == expected
 1169: 
 1170:     def test_to_latex_groupby_tabular(self):
 1171:         # GH 10660
 1172:         df = DataFrame({"a": [0, 0, 1, 1], "b": list("abab"), "c": [1, 2, 3, 4]})
 1173:         result = (
 1174:             df.groupby("a")
 1175:             .describe()
 1176:             .to_latex(float_format="{:.1f}".format, escape=True)
 1177:         )
 1178:         expected = _dedent(
 1179:             r"""
 1180:             \begin{tabular}{lrrrrrrrr}
 1181:             \toprule
 1182:              & \multicolumn{8}{r}{c} \\
 1183:              & count & mean & std & min & 25\% & 50\% & 75\% & max \\
 1184:             a &  &  &  &  &  &  &  &  \\
 1185:             \midrule
 1186:             0 & 2.0 & 1.5 & 0.7 & 1.0 & 1.2 & 1.5 & 1.8 & 2.0 \\
 1187:             1 & 2.0 & 3.5 & 0.7 & 3.0 & 3.2 & 3.5 & 3.8 & 4.0 \\
 1188:             \bottomrule
 1189:             \end{tabular}
 1190:             """
 1191:         )
 1192:         assert result == expected
 1193: 
 1194:     def test_to_latex_multiindex_dupe_level(self):
 1195:         # see gh-14484
 1196:         #
 1197:         # If an index is repeated in subsequent rows, it should be
 1198:         # replaced with a blank in the created table. This should
 1199:         # ONLY happen if all higher order indices (to the left) are
 1200:         # equal too. In this test, 'c' has to be printed both times
 1201:         # because the higher order index 'A' != 'B'.
 1202:         df = DataFrame(
 1203:             index=pd.MultiIndex.from_tuples([("A", "c"), ("B", "c")]), columns=["col"]
 1204:         )
 1205:         result = df.to_latex(multirow=False)
 1206:         expected = _dedent(
 1207:             r"""
 1208:             \begin{tabular}{lll}
 1209:             \toprule
 1210:              &  & col \\
 1211:             \midrule
 1212:             A & c & NaN \\
 1213:             B & c & NaN \\
 1214:             \bottomrule
 1215:             \end{tabular}
 1216:             """
 1217:         )
 1218:         assert result == expected
 1219: 
 1220:     def test_to_latex_multicolumn_default(self, multicolumn_frame):
 1221:         result = multicolumn_frame.to_latex()
 1222:         expected = _dedent(
 1223:             r"""
 1224:             \begin{tabular}{lrrrrr}
 1225:             \toprule
 1226:              & \multicolumn{2}{r}{c1} & \multicolumn{2}{r}{c2} & c3 \\
 1227:              & 0 & 1 & 0 & 1 & 0 \\
 1228:             \midrule
 1229:             0 & 0 & 5 & 0 & 5 & 0 \\
 1230:             1 & 1 & 6 & 1 & 6 & 1 \\
 1231:             2 & 2 & 7 & 2 & 7 & 2 \\
 1232:             3 & 3 & 8 & 3 & 8 & 3 \\
 1233:             4 & 4 & 9 & 4 & 9 & 4 \\
 1234:             \bottomrule
 1235:             \end{tabular}
 1236:             """
 1237:         )
 1238:         assert result == expected
 1239: 
 1240:     def test_to_latex_multicolumn_false(self, multicolumn_frame):
 1241:         result = multicolumn_frame.to_latex(multicolumn=False, multicolumn_format="l")
 1242:         expected = _dedent(
 1243:             r"""
 1244:             \begin{tabular}{lrrrrr}
 1245:             \toprule
 1246:              & c1 & & c2 & & c3 \\
 1247:              & 0 & 1 & 0 & 1 & 0 \\
 1248:             \midrule
 1249:             0 & 0 & 5 & 0 & 5 & 0 \\
 1250:             1 & 1 & 6 & 1 & 6 & 1 \\
 1251:             2 & 2 & 7 & 2 & 7 & 2 \\
 1252:             3 & 3 & 8 & 3 & 8 & 3 \\
 1253:             4 & 4 & 9 & 4 & 9 & 4 \\
 1254:             \bottomrule
 1255:             \end{tabular}
 1256:             """
 1257:         )
 1258:         assert result == expected
 1259: 
 1260:     def test_to_latex_multirow_true(self, multicolumn_frame):
 1261:         result = multicolumn_frame.T.to_latex(multirow=True)
 1262:         expected = _dedent(
 1263:             r"""
 1264:             \begin{tabular}{llrrrrr}
 1265:             \toprule
 1266:              &  & 0 & 1 & 2 & 3 & 4 \\
 1267:             \midrule
 1268:             \multirow[t]{2}{*}{c1} & 0 & 0 & 1 & 2 & 3 & 4 \\
 1269:              & 1 & 5 & 6 & 7 & 8 & 9 \\
 1270:             \cline{1-7}
 1271:             \multirow[t]{2}{*}{c2} & 0 & 0 & 1 & 2 & 3 & 4 \\
 1272:              & 1 & 5 & 6 & 7 & 8 & 9 \\
 1273:             \cline{1-7}
 1274:             c3 & 0 & 0 & 1 & 2 & 3 & 4 \\
 1275:             \cline{1-7}
 1276:             \bottomrule
 1277:             \end{tabular}
 1278:             """
 1279:         )
 1280:         assert result == expected
 1281: 
 1282:     def test_to_latex_multicolumnrow_with_multicol_format(self, multicolumn_frame):
 1283:         multicolumn_frame.index = multicolumn_frame.T.index
 1284:         result = multicolumn_frame.T.to_latex(
 1285:             multirow=True,
 1286:             multicolumn=True,
 1287:             multicolumn_format="c",
 1288:         )
 1289:         expected = _dedent(
 1290:             r"""
 1291:             \begin{tabular}{llrrrrr}
 1292:             \toprule
 1293:              &  & \multicolumn{2}{c}{c1} & \multicolumn{2}{c}{c2} & c3 \\
 1294:              &  & 0 & 1 & 0 & 1 & 0 \\
 1295:             \midrule
 1296:             \multirow[t]{2}{*}{c1} & 0 & 0 & 1 & 2 & 3 & 4 \\
 1297:              & 1 & 5 & 6 & 7 & 8 & 9 \\
 1298:             \cline{1-7}
 1299:             \multirow[t]{2}{*}{c2} & 0 & 0 & 1 & 2 & 3 & 4 \\
 1300:              & 1 & 5 & 6 & 7 & 8 & 9 \\
 1301:             \cline{1-7}
 1302:             c3 & 0 & 0 & 1 & 2 & 3 & 4 \\
 1303:             \cline{1-7}
 1304:             \bottomrule
 1305:             \end{tabular}
 1306:             """
 1307:         )
 1308:         assert result == expected
 1309: 
 1310:     @pytest.mark.parametrize("name0", [None, "named0"])
 1311:     @pytest.mark.parametrize("name1", [None, "named1"])
 1312:     @pytest.mark.parametrize("axes", [[0], [1], [0, 1]])
 1313:     def test_to_latex_multiindex_names(self, name0, name1, axes):
 1314:         # GH 18667
 1315:         names = [name0, name1]
 1316:         mi = pd.MultiIndex.from_product([[1, 2], [3, 4]])
 1317:         df = DataFrame(-1, index=mi.copy(), columns=mi.copy())
 1318:         for idx in axes:
 1319:             df.axes[idx].names = names
 1320: 
 1321:         idx_names = tuple(n or "" for n in names)
 1322:         idx_names_row = (
 1323:             f"{idx_names[0]} & {idx_names[1]} &  &  &  &  \\\\\n"
 1324:             if (0 in axes and any(names))
 1325:             else ""
 1326:         )
 1327:         col_names = [n if (bool(n) and 1 in axes) else "" for n in names]
 1328:         observed = df.to_latex(multirow=False)
 1329:         # pylint: disable-next=consider-using-f-string
 1330:         expected = r"""\begin{tabular}{llrrrr}
 1331: \toprule
 1332:  & %s & \multicolumn{2}{r}{1} & \multicolumn{2}{r}{2} \\
 1333:  & %s & 3 & 4 & 3 & 4 \\
 1334: %s\midrule
 1335: 1 & 3 & -1 & -1 & -1 & -1 \\
 1336:  & 4 & -1 & -1 & -1 & -1 \\
 1337: 2 & 3 & -1 & -1 & -1 & -1 \\
 1338:  & 4 & -1 & -1 & -1 & -1 \\
 1339: \bottomrule
 1340: \end{tabular}
 1341: """ % tuple(
 1342:             list(col_names) + [idx_names_row]
 1343:         )
 1344:         assert observed == expected
 1345: 
 1346:     @pytest.mark.parametrize("one_row", [True, False])
 1347:     def test_to_latex_multiindex_nans(self, one_row):
 1348:         # GH 14249
 1349:         df = DataFrame({"a": [None, 1], "b": [2, 3], "c": [4, 5]})
 1350:         if one_row:
 1351:             df = df.iloc[[0]]
 1352:         observed = df.set_index(["a", "b"]).to_latex(multirow=False)
 1353:         expected = _dedent(
 1354:             r"""
 1355:             \begin{tabular}{llr}
 1356:             \toprule
 1357:              &  & c \\
 1358:             a & b &  \\
 1359:             \midrule
 1360:             NaN & 2 & 4 \\
 1361:             """
 1362:         )
 1363:         if not one_row:
 1364:             expected += r"""1.000000 & 3 & 5 \\
 1365: """
 1366:         expected += r"""\bottomrule
 1367: \end{tabular}
 1368: """
 1369:         assert observed == expected
 1370: 
 1371:     def test_to_latex_non_string_index(self):
 1372:         # GH 19981
 1373:         df = DataFrame([[1, 2, 3]] * 2).set_index([0, 1])
 1374:         result = df.to_latex(multirow=False)
 1375:         expected = _dedent(
 1376:             r"""
 1377:             \begin{tabular}{llr}
 1378:             \toprule
 1379:              &  & 2 \\
 1380:             0 & 1 &  \\
 1381:             \midrule
 1382:             1 & 2 & 3 \\
 1383:              & 2 & 3 \\
 1384:             \bottomrule
 1385:             \end{tabular}
 1386:             """
 1387:         )
 1388:         assert result == expected
 1389: 
 1390:     def test_to_latex_multiindex_multirow(self):
 1391:         # GH 16719
 1392:         mi = pd.MultiIndex.from_product(
 1393:             [[0.0, 1.0], [3.0, 2.0, 1.0], ["0", "1"]], names=["i", "val0", "val1"]
 1394:         )
 1395:         df = DataFrame(index=mi)
 1396:         result = df.to_latex(multirow=True, escape=False)
 1397:         expected = _dedent(
 1398:             r"""
 1399:             \begin{tabular}{lll}
 1400:             \toprule
 1401:             i & val0 & val1 \\
 1402:             \midrule
 1403:             \multirow[t]{6}{*}{0.000000} & \multirow[t]{2}{*}{3.000000} & 0 \\
 1404:              &  & 1 \\
 1405:             \cline{2-3}
 1406:              & \multirow[t]{2}{*}{2.000000} & 0 \\
 1407:              &  & 1 \\
 1408:             \cline{2-3}
 1409:              & \multirow[t]{2}{*}{1.000000} & 0 \\
 1410:              &  & 1 \\
 1411:             \cline{1-3} \cline{2-3}
 1412:             \multirow[t]{6}{*}{1.000000} & \multirow[t]{2}{*}{3.000000} & 0 \\
 1413:              &  & 1 \\
 1414:             \cline{2-3}
 1415:              & \multirow[t]{2}{*}{2.000000} & 0 \\
 1416:              &  & 1 \\
 1417:             \cline{2-3}
 1418:              & \multirow[t]{2}{*}{1.000000} & 0 \\
 1419:              &  & 1 \\
 1420:             \cline{1-3} \cline{2-3}
 1421:             \bottomrule
 1422:             \end{tabular}
 1423:             """
 1424:         )
 1425:         assert result == expected
