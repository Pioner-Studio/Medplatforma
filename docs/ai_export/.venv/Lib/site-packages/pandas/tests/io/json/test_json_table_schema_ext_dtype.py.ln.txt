    1: """Tests for ExtensionDtype Table Schema integration."""
    2: 
    3: from collections import OrderedDict
    4: import datetime as dt
    5: import decimal
    6: from io import StringIO
    7: import json
    8: 
    9: import pytest
   10: 
   11: from pandas import (
   12:     NA,
   13:     DataFrame,
   14:     Index,
   15:     array,
   16:     read_json,
   17: )
   18: import pandas._testing as tm
   19: from pandas.core.arrays.integer import Int64Dtype
   20: from pandas.core.arrays.string_ import StringDtype
   21: from pandas.core.series import Series
   22: from pandas.tests.extension.date import (
   23:     DateArray,
   24:     DateDtype,
   25: )
   26: from pandas.tests.extension.decimal.array import (
   27:     DecimalArray,
   28:     DecimalDtype,
   29: )
   30: 
   31: from pandas.io.json._table_schema import (
   32:     as_json_table_type,
   33:     build_table_schema,
   34: )
   35: 
   36: 
   37: class TestBuildSchema:
   38:     def test_build_table_schema(self):
   39:         df = DataFrame(
   40:             {
   41:                 "A": DateArray([dt.date(2021, 10, 10)]),
   42:                 "B": DecimalArray([decimal.Decimal(10)]),
   43:                 "C": array(["pandas"], dtype="string"),
   44:                 "D": array([10], dtype="Int64"),
   45:             }
   46:         )
   47:         result = build_table_schema(df, version=False)
   48:         expected = {
   49:             "fields": [
   50:                 {"name": "index", "type": "integer"},
   51:                 {"name": "A", "type": "any", "extDtype": "DateDtype"},
   52:                 {"name": "B", "type": "number", "extDtype": "decimal"},
   53:                 {"name": "C", "type": "any", "extDtype": "string"},
   54:                 {"name": "D", "type": "integer", "extDtype": "Int64"},
   55:             ],
   56:             "primaryKey": ["index"],
   57:         }
   58:         assert result == expected
   59:         result = build_table_schema(df)
   60:         assert "pandas_version" in result
   61: 
   62: 
   63: class TestTableSchemaType:
   64:     @pytest.mark.parametrize(
   65:         "date_data",
   66:         [
   67:             DateArray([dt.date(2021, 10, 10)]),
   68:             DateArray(dt.date(2021, 10, 10)),
   69:             Series(DateArray(dt.date(2021, 10, 10))),
   70:         ],
   71:     )
   72:     def test_as_json_table_type_ext_date_array_dtype(self, date_data):
   73:         assert as_json_table_type(date_data.dtype) == "any"
   74: 
   75:     def test_as_json_table_type_ext_date_dtype(self):
   76:         assert as_json_table_type(DateDtype()) == "any"
   77: 
   78:     @pytest.mark.parametrize(
   79:         "decimal_data",
   80:         [
   81:             DecimalArray([decimal.Decimal(10)]),
   82:             Series(DecimalArray([decimal.Decimal(10)])),
   83:         ],
   84:     )
   85:     def test_as_json_table_type_ext_decimal_array_dtype(self, decimal_data):
   86:         assert as_json_table_type(decimal_data.dtype) == "number"
   87: 
   88:     def test_as_json_table_type_ext_decimal_dtype(self):
   89:         assert as_json_table_type(DecimalDtype()) == "number"
   90: 
   91:     @pytest.mark.parametrize(
   92:         "string_data",
   93:         [
   94:             array(["pandas"], dtype="string"),
   95:             Series(array(["pandas"], dtype="string")),
   96:         ],
   97:     )
   98:     def test_as_json_table_type_ext_string_array_dtype(self, string_data):
   99:         assert as_json_table_type(string_data.dtype) == "any"
  100: 
  101:     def test_as_json_table_type_ext_string_dtype(self):
  102:         assert as_json_table_type(StringDtype()) == "any"
  103: 
  104:     @pytest.mark.parametrize(
  105:         "integer_data",
  106:         [
  107:             array([10], dtype="Int64"),
  108:             Series(array([10], dtype="Int64")),
  109:         ],
  110:     )
  111:     def test_as_json_table_type_ext_integer_array_dtype(self, integer_data):
  112:         assert as_json_table_type(integer_data.dtype) == "integer"
  113: 
  114:     def test_as_json_table_type_ext_integer_dtype(self):
  115:         assert as_json_table_type(Int64Dtype()) == "integer"
  116: 
  117: 
  118: class TestTableOrient:
  119:     @pytest.fixture
  120:     def da(self):
  121:         return DateArray([dt.date(2021, 10, 10)])
  122: 
  123:     @pytest.fixture
  124:     def dc(self):
  125:         return DecimalArray([decimal.Decimal(10)])
  126: 
  127:     @pytest.fixture
  128:     def sa(self):
  129:         return array(["pandas"], dtype="string")
  130: 
  131:     @pytest.fixture
  132:     def ia(self):
  133:         return array([10], dtype="Int64")
  134: 
  135:     @pytest.fixture
  136:     def df(self, da, dc, sa, ia):
  137:         return DataFrame(
  138:             {
  139:                 "A": da,
  140:                 "B": dc,
  141:                 "C": sa,
  142:                 "D": ia,
  143:             }
  144:         )
  145: 
  146:     def test_build_date_series(self, da):
  147:         s = Series(da, name="a")
  148:         s.index.name = "id"
  149:         result = s.to_json(orient="table", date_format="iso")
  150:         result = json.loads(result, object_pairs_hook=OrderedDict)
  151: 
  152:         assert "pandas_version" in result["schema"]
  153:         result["schema"].pop("pandas_version")
  154: 
  155:         fields = [
  156:             {"name": "id", "type": "integer"},
  157:             {"name": "a", "type": "any", "extDtype": "DateDtype"},
  158:         ]
  159: 
  160:         schema = {"fields": fields, "primaryKey": ["id"]}
  161: 
  162:         expected = OrderedDict(
  163:             [
  164:                 ("schema", schema),
  165:                 ("data", [OrderedDict([("id", 0), ("a", "2021-10-10T00:00:00.000")])]),
  166:             ]
  167:         )
  168: 
  169:         assert result == expected
  170: 
  171:     def test_build_decimal_series(self, dc):
  172:         s = Series(dc, name="a")
  173:         s.index.name = "id"
  174:         result = s.to_json(orient="table", date_format="iso")
  175:         result = json.loads(result, object_pairs_hook=OrderedDict)
  176: 
  177:         assert "pandas_version" in result["schema"]
  178:         result["schema"].pop("pandas_version")
  179: 
  180:         fields = [
  181:             {"name": "id", "type": "integer"},
  182:             {"name": "a", "type": "number", "extDtype": "decimal"},
  183:         ]
  184: 
  185:         schema = {"fields": fields, "primaryKey": ["id"]}
  186: 
  187:         expected = OrderedDict(
  188:             [
  189:                 ("schema", schema),
  190:                 ("data", [OrderedDict([("id", 0), ("a", 10.0)])]),
  191:             ]
  192:         )
  193: 
  194:         assert result == expected
  195: 
  196:     def test_build_string_series(self, sa):
  197:         s = Series(sa, name="a")
  198:         s.index.name = "id"
  199:         result = s.to_json(orient="table", date_format="iso")
  200:         result = json.loads(result, object_pairs_hook=OrderedDict)
  201: 
  202:         assert "pandas_version" in result["schema"]
  203:         result["schema"].pop("pandas_version")
  204: 
  205:         fields = [
  206:             {"name": "id", "type": "integer"},
  207:             {"name": "a", "type": "any", "extDtype": "string"},
  208:         ]
  209: 
  210:         schema = {"fields": fields, "primaryKey": ["id"]}
  211: 
  212:         expected = OrderedDict(
  213:             [
  214:                 ("schema", schema),
  215:                 ("data", [OrderedDict([("id", 0), ("a", "pandas")])]),
  216:             ]
  217:         )
  218: 
  219:         assert result == expected
  220: 
  221:     def test_build_int64_series(self, ia):
  222:         s = Series(ia, name="a")
  223:         s.index.name = "id"
  224:         result = s.to_json(orient="table", date_format="iso")
  225:         result = json.loads(result, object_pairs_hook=OrderedDict)
  226: 
  227:         assert "pandas_version" in result["schema"]
  228:         result["schema"].pop("pandas_version")
  229: 
  230:         fields = [
  231:             {"name": "id", "type": "integer"},
  232:             {"name": "a", "type": "integer", "extDtype": "Int64"},
  233:         ]
  234: 
  235:         schema = {"fields": fields, "primaryKey": ["id"]}
  236: 
  237:         expected = OrderedDict(
  238:             [
  239:                 ("schema", schema),
  240:                 ("data", [OrderedDict([("id", 0), ("a", 10)])]),
  241:             ]
  242:         )
  243: 
  244:         assert result == expected
  245: 
  246:     def test_to_json(self, df):
  247:         df = df.copy()
  248:         df.index.name = "idx"
  249:         result = df.to_json(orient="table", date_format="iso")
  250:         result = json.loads(result, object_pairs_hook=OrderedDict)
  251: 
  252:         assert "pandas_version" in result["schema"]
  253:         result["schema"].pop("pandas_version")
  254: 
  255:         fields = [
  256:             OrderedDict({"name": "idx", "type": "integer"}),
  257:             OrderedDict({"name": "A", "type": "any", "extDtype": "DateDtype"}),
  258:             OrderedDict({"name": "B", "type": "number", "extDtype": "decimal"}),
  259:             OrderedDict({"name": "C", "type": "any", "extDtype": "string"}),
  260:             OrderedDict({"name": "D", "type": "integer", "extDtype": "Int64"}),
  261:         ]
  262: 
  263:         schema = OrderedDict({"fields": fields, "primaryKey": ["idx"]})
  264:         data = [
  265:             OrderedDict(
  266:                 [
  267:                     ("idx", 0),
  268:                     ("A", "2021-10-10T00:00:00.000"),
  269:                     ("B", 10.0),
  270:                     ("C", "pandas"),
  271:                     ("D", 10),
  272:                 ]
  273:             )
  274:         ]
  275:         expected = OrderedDict([("schema", schema), ("data", data)])
  276: 
  277:         assert result == expected
  278: 
  279:     def test_json_ext_dtype_reading_roundtrip(self):
  280:         # GH#40255
  281:         df = DataFrame(
  282:             {
  283:                 "a": Series([2, NA], dtype="Int64"),
  284:                 "b": Series([1.5, NA], dtype="Float64"),
  285:                 "c": Series([True, NA], dtype="boolean"),
  286:             },
  287:             index=Index([1, NA], dtype="Int64"),
  288:         )
  289:         expected = df.copy()
  290:         data_json = df.to_json(orient="table", indent=4)
  291:         result = read_json(StringIO(data_json), orient="table")
  292:         tm.assert_frame_equal(result, expected)
  293: 
  294:     def test_json_ext_dtype_reading(self):
  295:         # GH#40255
  296:         data_json = """{
  297:             "schema":{
  298:                 "fields":[
  299:                     {
  300:                         "name":"a",
  301:                         "type":"integer",
  302:                         "extDtype":"Int64"
  303:                     }
  304:                 ],
  305:             },
  306:             "data":[
  307:                 {
  308:                     "a":2
  309:                 },
  310:                 {
  311:                     "a":null
  312:                 }
  313:             ]
  314:         }"""
  315:         result = read_json(StringIO(data_json), orient="table")
  316:         expected = DataFrame({"a": Series([2, NA], dtype="Int64")})
  317:         tm.assert_frame_equal(result, expected)
