    1: from textwrap import dedent
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     MultiIndex,
    9:     Series,
   10:     option_context,
   11: )
   12: 
   13: pytest.importorskip("jinja2")
   14: from pandas.io.formats.style import Styler
   15: from pandas.io.formats.style_render import (
   16:     _parse_latex_cell_styles,
   17:     _parse_latex_css_conversion,
   18:     _parse_latex_header_span,
   19:     _parse_latex_table_styles,
   20:     _parse_latex_table_wrapping,
   21: )
   22: 
   23: 
   24: @pytest.fixture
   25: def df():
   26:     return DataFrame(
   27:         {"A": [0, 1], "B": [-0.61, -1.22], "C": Series(["ab", "cd"], dtype=object)}
   28:     )
   29: 
   30: 
   31: @pytest.fixture
   32: def df_ext():
   33:     return DataFrame(
   34:         {"A": [0, 1, 2], "B": [-0.61, -1.22, -2.22], "C": ["ab", "cd", "de"]}
   35:     )
   36: 
   37: 
   38: @pytest.fixture
   39: def styler(df):
   40:     return Styler(df, uuid_len=0, precision=2)
   41: 
   42: 
   43: def test_minimal_latex_tabular(styler):
   44:     expected = dedent(
   45:         """\
   46:         \\begin{tabular}{lrrl}
   47:          & A & B & C \\\\
   48:         0 & 0 & -0.61 & ab \\\\
   49:         1 & 1 & -1.22 & cd \\\\
   50:         \\end{tabular}
   51:         """
   52:     )
   53:     assert styler.to_latex() == expected
   54: 
   55: 
   56: def test_tabular_hrules(styler):
   57:     expected = dedent(
   58:         """\
   59:         \\begin{tabular}{lrrl}
   60:         \\toprule
   61:          & A & B & C \\\\
   62:         \\midrule
   63:         0 & 0 & -0.61 & ab \\\\
   64:         1 & 1 & -1.22 & cd \\\\
   65:         \\bottomrule
   66:         \\end{tabular}
   67:         """
   68:     )
   69:     assert styler.to_latex(hrules=True) == expected
   70: 
   71: 
   72: def test_tabular_custom_hrules(styler):
   73:     styler.set_table_styles(
   74:         [
   75:             {"selector": "toprule", "props": ":hline"},
   76:             {"selector": "bottomrule", "props": ":otherline"},
   77:         ]
   78:     )  # no midrule
   79:     expected = dedent(
   80:         """\
   81:         \\begin{tabular}{lrrl}
   82:         \\hline
   83:          & A & B & C \\\\
   84:         0 & 0 & -0.61 & ab \\\\
   85:         1 & 1 & -1.22 & cd \\\\
   86:         \\otherline
   87:         \\end{tabular}
   88:         """
   89:     )
   90:     assert styler.to_latex() == expected
   91: 
   92: 
   93: def test_column_format(styler):
   94:     # default setting is already tested in `test_latex_minimal_tabular`
   95:     styler.set_table_styles([{"selector": "column_format", "props": ":cccc"}])
   96: 
   97:     assert "\\begin{tabular}{rrrr}" in styler.to_latex(column_format="rrrr")
   98:     styler.set_table_styles([{"selector": "column_format", "props": ":r|r|cc"}])
   99:     assert "\\begin{tabular}{r|r|cc}" in styler.to_latex()
  100: 
  101: 
  102: def test_siunitx_cols(styler):
  103:     expected = dedent(
  104:         """\
  105:         \\begin{tabular}{lSSl}
  106:         {} & {A} & {B} & {C} \\\\
  107:         0 & 0 & -0.61 & ab \\\\
  108:         1 & 1 & -1.22 & cd \\\\
  109:         \\end{tabular}
  110:         """
  111:     )
  112:     assert styler.to_latex(siunitx=True) == expected
  113: 
  114: 
  115: def test_position(styler):
  116:     assert "\\begin{table}[h!]" in styler.to_latex(position="h!")
  117:     assert "\\end{table}" in styler.to_latex(position="h!")
  118:     styler.set_table_styles([{"selector": "position", "props": ":b!"}])
  119:     assert "\\begin{table}[b!]" in styler.to_latex()
  120:     assert "\\end{table}" in styler.to_latex()
  121: 
  122: 
  123: @pytest.mark.parametrize("env", [None, "longtable"])
  124: def test_label(styler, env):
  125:     assert "\n\\label{text}" in styler.to_latex(label="text", environment=env)
  126:     styler.set_table_styles([{"selector": "label", "props": ":{more В§text}"}])
  127:     assert "\n\\label{more :text}" in styler.to_latex(environment=env)
  128: 
  129: 
  130: def test_position_float_raises(styler):
  131:     msg = "`position_float` should be one of 'raggedright', 'raggedleft', 'centering',"
  132:     with pytest.raises(ValueError, match=msg):
  133:         styler.to_latex(position_float="bad_string")
  134: 
  135:     msg = "`position_float` cannot be used in 'longtable' `environment`"
  136:     with pytest.raises(ValueError, match=msg):
  137:         styler.to_latex(position_float="centering", environment="longtable")
  138: 
  139: 
  140: @pytest.mark.parametrize("label", [(None, ""), ("text", "\\label{text}")])
  141: @pytest.mark.parametrize("position", [(None, ""), ("h!", "{table}[h!]")])
  142: @pytest.mark.parametrize("caption", [(None, ""), ("text", "\\caption{text}")])
  143: @pytest.mark.parametrize("column_format", [(None, ""), ("rcrl", "{tabular}{rcrl}")])
  144: @pytest.mark.parametrize("position_float", [(None, ""), ("centering", "\\centering")])
  145: def test_kwargs_combinations(
  146:     styler, label, position, caption, column_format, position_float
  147: ):
  148:     result = styler.to_latex(
  149:         label=label[0],
  150:         position=position[0],
  151:         caption=caption[0],
  152:         column_format=column_format[0],
  153:         position_float=position_float[0],
  154:     )
  155:     assert label[1] in result
  156:     assert position[1] in result
  157:     assert caption[1] in result
  158:     assert column_format[1] in result
  159:     assert position_float[1] in result
  160: 
  161: 
  162: def test_custom_table_styles(styler):
  163:     styler.set_table_styles(
  164:         [
  165:             {"selector": "mycommand", "props": ":{myoptions}"},
  166:             {"selector": "mycommand2", "props": ":{myoptions2}"},
  167:         ]
  168:     )
  169:     expected = dedent(
  170:         """\
  171:         \\begin{table}
  172:         \\mycommand{myoptions}
  173:         \\mycommand2{myoptions2}
  174:         """
  175:     )
  176:     assert expected in styler.to_latex()
  177: 
  178: 
  179: def test_cell_styling(styler):
  180:     styler.highlight_max(props="itshape:;Huge:--wrap;")
  181:     expected = dedent(
  182:         """\
  183:         \\begin{tabular}{lrrl}
  184:          & A & B & C \\\\
  185:         0 & 0 & \\itshape {\\Huge -0.61} & ab \\\\
  186:         1 & \\itshape {\\Huge 1} & -1.22 & \\itshape {\\Huge cd} \\\\
  187:         \\end{tabular}
  188:         """
  189:     )
  190:     assert expected == styler.to_latex()
  191: 
  192: 
  193: def test_multiindex_columns(df):
  194:     cidx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  195:     df.columns = cidx
  196:     expected = dedent(
  197:         """\
  198:         \\begin{tabular}{lrrl}
  199:          & \\multicolumn{2}{r}{A} & B \\\\
  200:          & a & b & c \\\\
  201:         0 & 0 & -0.61 & ab \\\\
  202:         1 & 1 & -1.22 & cd \\\\
  203:         \\end{tabular}
  204:         """
  205:     )
  206:     s = df.style.format(precision=2)
  207:     assert expected == s.to_latex()
  208: 
  209:     # non-sparse
  210:     expected = dedent(
  211:         """\
  212:         \\begin{tabular}{lrrl}
  213:          & A & A & B \\\\
  214:          & a & b & c \\\\
  215:         0 & 0 & -0.61 & ab \\\\
  216:         1 & 1 & -1.22 & cd \\\\
  217:         \\end{tabular}
  218:         """
  219:     )
  220:     s = df.style.format(precision=2)
  221:     assert expected == s.to_latex(sparse_columns=False)
  222: 
  223: 
  224: def test_multiindex_row(df_ext):
  225:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  226:     df_ext.index = ridx
  227:     expected = dedent(
  228:         """\
  229:         \\begin{tabular}{llrrl}
  230:          &  & A & B & C \\\\
  231:         \\multirow[c]{2}{*}{A} & a & 0 & -0.61 & ab \\\\
  232:          & b & 1 & -1.22 & cd \\\\
  233:         B & c & 2 & -2.22 & de \\\\
  234:         \\end{tabular}
  235:         """
  236:     )
  237:     styler = df_ext.style.format(precision=2)
  238:     result = styler.to_latex()
  239:     assert expected == result
  240: 
  241:     # non-sparse
  242:     expected = dedent(
  243:         """\
  244:         \\begin{tabular}{llrrl}
  245:          &  & A & B & C \\\\
  246:         A & a & 0 & -0.61 & ab \\\\
  247:         A & b & 1 & -1.22 & cd \\\\
  248:         B & c & 2 & -2.22 & de \\\\
  249:         \\end{tabular}
  250:         """
  251:     )
  252:     result = styler.to_latex(sparse_index=False)
  253:     assert expected == result
  254: 
  255: 
  256: def test_multirow_naive(df_ext):
  257:     ridx = MultiIndex.from_tuples([("X", "x"), ("X", "y"), ("Y", "z")])
  258:     df_ext.index = ridx
  259:     expected = dedent(
  260:         """\
  261:         \\begin{tabular}{llrrl}
  262:          &  & A & B & C \\\\
  263:         X & x & 0 & -0.61 & ab \\\\
  264:          & y & 1 & -1.22 & cd \\\\
  265:         Y & z & 2 & -2.22 & de \\\\
  266:         \\end{tabular}
  267:         """
  268:     )
  269:     styler = df_ext.style.format(precision=2)
  270:     result = styler.to_latex(multirow_align="naive")
  271:     assert expected == result
  272: 
  273: 
  274: def test_multiindex_row_and_col(df_ext):
  275:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  276:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  277:     df_ext.index, df_ext.columns = ridx, cidx
  278:     expected = dedent(
  279:         """\
  280:         \\begin{tabular}{llrrl}
  281:          &  & \\multicolumn{2}{l}{Z} & Y \\\\
  282:          &  & a & b & c \\\\
  283:         \\multirow[b]{2}{*}{A} & a & 0 & -0.61 & ab \\\\
  284:          & b & 1 & -1.22 & cd \\\\
  285:         B & c & 2 & -2.22 & de \\\\
  286:         \\end{tabular}
  287:         """
  288:     )
  289:     styler = df_ext.style.format(precision=2)
  290:     result = styler.to_latex(multirow_align="b", multicol_align="l")
  291:     assert result == expected
  292: 
  293:     # non-sparse
  294:     expected = dedent(
  295:         """\
  296:         \\begin{tabular}{llrrl}
  297:          &  & Z & Z & Y \\\\
  298:          &  & a & b & c \\\\
  299:         A & a & 0 & -0.61 & ab \\\\
  300:         A & b & 1 & -1.22 & cd \\\\
  301:         B & c & 2 & -2.22 & de \\\\
  302:         \\end{tabular}
  303:         """
  304:     )
  305:     result = styler.to_latex(sparse_index=False, sparse_columns=False)
  306:     assert result == expected
  307: 
  308: 
  309: @pytest.mark.parametrize(
  310:     "multicol_align, siunitx, header",
  311:     [
  312:         ("naive-l", False, " & A & &"),
  313:         ("naive-r", False, " & & & A"),
  314:         ("naive-l", True, "{} & {A} & {} & {}"),
  315:         ("naive-r", True, "{} & {} & {} & {A}"),
  316:     ],
  317: )
  318: def test_multicol_naive(df, multicol_align, siunitx, header):
  319:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("A", "c")])
  320:     df.columns = ridx
  321:     level1 = " & a & b & c" if not siunitx else "{} & {a} & {b} & {c}"
  322:     col_format = "lrrl" if not siunitx else "lSSl"
  323:     expected = dedent(
  324:         f"""\
  325:         \\begin{{tabular}}{{{col_format}}}
  326:         {header} \\\\
  327:         {level1} \\\\
  328:         0 & 0 & -0.61 & ab \\\\
  329:         1 & 1 & -1.22 & cd \\\\
  330:         \\end{{tabular}}
  331:         """
  332:     )
  333:     styler = df.style.format(precision=2)
  334:     result = styler.to_latex(multicol_align=multicol_align, siunitx=siunitx)
  335:     assert expected == result
  336: 
  337: 
  338: def test_multi_options(df_ext):
  339:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  340:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  341:     df_ext.index, df_ext.columns = ridx, cidx
  342:     styler = df_ext.style.format(precision=2)
  343: 
  344:     expected = dedent(
  345:         """\
  346:      &  & \\multicolumn{2}{r}{Z} & Y \\\\
  347:      &  & a & b & c \\\\
  348:     \\multirow[c]{2}{*}{A} & a & 0 & -0.61 & ab \\\\
  349:     """
  350:     )
  351:     result = styler.to_latex()
  352:     assert expected in result
  353: 
  354:     with option_context("styler.latex.multicol_align", "l"):
  355:         assert " &  & \\multicolumn{2}{l}{Z} & Y \\\\" in styler.to_latex()
  356: 
  357:     with option_context("styler.latex.multirow_align", "b"):
  358:         assert "\\multirow[b]{2}{*}{A} & a & 0 & -0.61 & ab \\\\" in styler.to_latex()
  359: 
  360: 
  361: def test_multiindex_columns_hidden():
  362:     df = DataFrame([[1, 2, 3, 4]])
  363:     df.columns = MultiIndex.from_tuples([("A", 1), ("A", 2), ("A", 3), ("B", 1)])
  364:     s = df.style
  365:     assert "{tabular}{lrrrr}" in s.to_latex()
  366:     s.set_table_styles([])  # reset the position command
  367:     s.hide([("A", 2)], axis="columns")
  368:     assert "{tabular}{lrrr}" in s.to_latex()
  369: 
  370: 
  371: @pytest.mark.parametrize(
  372:     "option, value",
  373:     [
  374:         ("styler.sparse.index", True),
  375:         ("styler.sparse.index", False),
  376:         ("styler.sparse.columns", True),
  377:         ("styler.sparse.columns", False),
  378:     ],
  379: )
  380: def test_sparse_options(df_ext, option, value):
  381:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  382:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  383:     df_ext.index, df_ext.columns = ridx, cidx
  384:     styler = df_ext.style
  385: 
  386:     latex1 = styler.to_latex()
  387:     with option_context(option, value):
  388:         latex2 = styler.to_latex()
  389:     assert (latex1 == latex2) is value
  390: 
  391: 
  392: def test_hidden_index(styler):
  393:     styler.hide(axis="index")
  394:     expected = dedent(
  395:         """\
  396:         \\begin{tabular}{rrl}
  397:         A & B & C \\\\
  398:         0 & -0.61 & ab \\\\
  399:         1 & -1.22 & cd \\\\
  400:         \\end{tabular}
  401:         """
  402:     )
  403:     assert styler.to_latex() == expected
  404: 
  405: 
  406: @pytest.mark.parametrize("environment", ["table", "figure*", None])
  407: def test_comprehensive(df_ext, environment):
  408:     # test as many low level features simultaneously as possible
  409:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  410:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  411:     df_ext.index, df_ext.columns = ridx, cidx
  412:     stlr = df_ext.style
  413:     stlr.set_caption("mycap")
  414:     stlr.set_table_styles(
  415:         [
  416:             {"selector": "label", "props": ":{figВ§item}"},
  417:             {"selector": "position", "props": ":h!"},
  418:             {"selector": "position_float", "props": ":centering"},
  419:             {"selector": "column_format", "props": ":rlrlr"},
  420:             {"selector": "toprule", "props": ":toprule"},
  421:             {"selector": "midrule", "props": ":midrule"},
  422:             {"selector": "bottomrule", "props": ":bottomrule"},
  423:             {"selector": "rowcolors", "props": ":{3}{pink}{}"},  # custom command
  424:         ]
  425:     )
  426:     stlr.highlight_max(axis=0, props="textbf:--rwrap;cellcolor:[rgb]{1,1,0.6}--rwrap")
  427:     stlr.highlight_max(axis=None, props="Huge:--wrap;", subset=[("Z", "a"), ("Z", "b")])
  428: 
  429:     expected = (
  430:         """\
  431: \\begin{table}[h!]
  432: \\centering
  433: \\caption{mycap}
  434: \\label{fig:item}
  435: \\rowcolors{3}{pink}{}
  436: \\begin{tabular}{rlrlr}
  437: \\toprule
  438:  &  & \\multicolumn{2}{r}{Z} & Y \\\\
  439:  &  & a & b & c \\\\
  440: \\midrule
  441: \\multirow[c]{2}{*}{A} & a & 0 & \\textbf{\\cellcolor[rgb]{1,1,0.6}{-0.61}} & ab \\\\
  442:  & b & 1 & -1.22 & cd \\\\
  443: B & c & \\textbf{\\cellcolor[rgb]{1,1,0.6}{{\\Huge 2}}} & -2.22 & """
  444:         """\
  445: \\textbf{\\cellcolor[rgb]{1,1,0.6}{de}} \\\\
  446: \\bottomrule
  447: \\end{tabular}
  448: \\end{table}
  449: """
  450:     ).replace("table", environment if environment else "table")
  451:     result = stlr.format(precision=2).to_latex(environment=environment)
  452:     assert result == expected
  453: 
  454: 
  455: def test_environment_option(styler):
  456:     with option_context("styler.latex.environment", "bar-env"):
  457:         assert "\\begin{bar-env}" in styler.to_latex()
  458:         assert "\\begin{foo-env}" in styler.to_latex(environment="foo-env")
  459: 
  460: 
  461: def test_parse_latex_table_styles(styler):
  462:     styler.set_table_styles(
  463:         [
  464:             {"selector": "foo", "props": [("attr", "value")]},
  465:             {"selector": "bar", "props": [("attr", "overwritten")]},
  466:             {"selector": "bar", "props": [("attr", "baz"), ("attr2", "ignored")]},
  467:             {"selector": "label", "props": [("", "{figВ§item}")]},
  468:         ]
  469:     )
  470:     assert _parse_latex_table_styles(styler.table_styles, "bar") == "baz"
  471: 
  472:     # test 'В§' replaced by ':' [for CSS compatibility]
  473:     assert _parse_latex_table_styles(styler.table_styles, "label") == "{fig:item}"
  474: 
  475: 
  476: def test_parse_latex_cell_styles_basic():  # test nesting
  477:     cell_style = [("itshape", "--rwrap"), ("cellcolor", "[rgb]{0,1,1}--rwrap")]
  478:     expected = "\\itshape{\\cellcolor[rgb]{0,1,1}{text}}"
  479:     assert _parse_latex_cell_styles(cell_style, "text") == expected
  480: 
  481: 
  482: @pytest.mark.parametrize(
  483:     "wrap_arg, expected",
  484:     [  # test wrapping
  485:         ("", "\\<command><options> <display_value>"),
  486:         ("--wrap", "{\\<command><options> <display_value>}"),
  487:         ("--nowrap", "\\<command><options> <display_value>"),
  488:         ("--lwrap", "{\\<command><options>} <display_value>"),
  489:         ("--dwrap", "{\\<command><options>}{<display_value>}"),
  490:         ("--rwrap", "\\<command><options>{<display_value>}"),
  491:     ],
  492: )
  493: def test_parse_latex_cell_styles_braces(wrap_arg, expected):
  494:     cell_style = [("<command>", f"<options>{wrap_arg}")]
  495:     assert _parse_latex_cell_styles(cell_style, "<display_value>") == expected
  496: 
  497: 
  498: def test_parse_latex_header_span():
  499:     cell = {"attributes": 'colspan="3"', "display_value": "text", "cellstyle": []}
  500:     expected = "\\multicolumn{3}{Y}{text}"
  501:     assert _parse_latex_header_span(cell, "X", "Y") == expected
  502: 
  503:     cell = {"attributes": 'rowspan="5"', "display_value": "text", "cellstyle": []}
  504:     expected = "\\multirow[X]{5}{*}{text}"
  505:     assert _parse_latex_header_span(cell, "X", "Y") == expected
  506: 
  507:     cell = {"display_value": "text", "cellstyle": []}
  508:     assert _parse_latex_header_span(cell, "X", "Y") == "text"
  509: 
  510:     cell = {"display_value": "text", "cellstyle": [("bfseries", "--rwrap")]}
  511:     assert _parse_latex_header_span(cell, "X", "Y") == "\\bfseries{text}"
  512: 
  513: 
  514: def test_parse_latex_table_wrapping(styler):
  515:     styler.set_table_styles(
  516:         [
  517:             {"selector": "toprule", "props": ":value"},
  518:             {"selector": "bottomrule", "props": ":value"},
  519:             {"selector": "midrule", "props": ":value"},
  520:             {"selector": "column_format", "props": ":value"},
  521:         ]
  522:     )
  523:     assert _parse_latex_table_wrapping(styler.table_styles, styler.caption) is False
  524:     assert _parse_latex_table_wrapping(styler.table_styles, "some caption") is True
  525:     styler.set_table_styles(
  526:         [
  527:             {"selector": "not-ignored", "props": ":value"},
  528:         ],
  529:         overwrite=False,
  530:     )
  531:     assert _parse_latex_table_wrapping(styler.table_styles, None) is True
  532: 
  533: 
  534: def test_short_caption(styler):
  535:     result = styler.to_latex(caption=("full cap", "short cap"))
  536:     assert "\\caption[short cap]{full cap}" in result
  537: 
  538: 
  539: @pytest.mark.parametrize(
  540:     "css, expected",
  541:     [
  542:         ([("color", "red")], [("color", "{red}")]),  # test color and input format types
  543:         (
  544:             [("color", "rgb(128, 128, 128 )")],
  545:             [("color", "[rgb]{0.502, 0.502, 0.502}")],
  546:         ),
  547:         (
  548:             [("color", "rgb(128, 50%, 25% )")],
  549:             [("color", "[rgb]{0.502, 0.500, 0.250}")],
  550:         ),
  551:         (
  552:             [("color", "rgba(128,128,128,1)")],
  553:             [("color", "[rgb]{0.502, 0.502, 0.502}")],
  554:         ),
  555:         ([("color", "#FF00FF")], [("color", "[HTML]{FF00FF}")]),
  556:         ([("color", "#F0F")], [("color", "[HTML]{FF00FF}")]),
  557:         ([("font-weight", "bold")], [("bfseries", "")]),  # test font-weight and types
  558:         ([("font-weight", "bolder")], [("bfseries", "")]),
  559:         ([("font-weight", "normal")], []),
  560:         ([("background-color", "red")], [("cellcolor", "{red}--lwrap")]),
  561:         (
  562:             [("background-color", "#FF00FF")],  # test background-color command and wrap
  563:             [("cellcolor", "[HTML]{FF00FF}--lwrap")],
  564:         ),
  565:         ([("font-style", "italic")], [("itshape", "")]),  # test font-style and types
  566:         ([("font-style", "oblique")], [("slshape", "")]),
  567:         ([("font-style", "normal")], []),
  568:         ([("color", "red /*--dwrap*/")], [("color", "{red}--dwrap")]),  # css comments
  569:         ([("background-color", "red /* --dwrap */")], [("cellcolor", "{red}--dwrap")]),
  570:     ],
  571: )
  572: def test_parse_latex_css_conversion(css, expected):
  573:     result = _parse_latex_css_conversion(css)
  574:     assert result == expected
  575: 
  576: 
  577: @pytest.mark.parametrize(
  578:     "env, inner_env",
  579:     [
  580:         (None, "tabular"),
  581:         ("table", "tabular"),
  582:         ("longtable", "longtable"),
  583:     ],
  584: )
  585: @pytest.mark.parametrize(
  586:     "convert, exp", [(True, "bfseries"), (False, "font-weightbold")]
  587: )
  588: def test_parse_latex_css_convert_minimal(styler, env, inner_env, convert, exp):
  589:     # parameters ensure longtable template is also tested
  590:     styler.highlight_max(props="font-weight:bold;")
  591:     result = styler.to_latex(convert_css=convert, environment=env)
  592:     expected = dedent(
  593:         f"""\
  594:         0 & 0 & \\{exp} -0.61 & ab \\\\
  595:         1 & \\{exp} 1 & -1.22 & \\{exp} cd \\\\
  596:         \\end{{{inner_env}}}
  597:     """
  598:     )
  599:     assert expected in result
  600: 
  601: 
  602: def test_parse_latex_css_conversion_option():
  603:     css = [("command", "option--latex--wrap")]
  604:     expected = [("command", "option--wrap")]
  605:     result = _parse_latex_css_conversion(css)
  606:     assert result == expected
  607: 
  608: 
  609: def test_styler_object_after_render(styler):
  610:     # GH 42320
  611:     pre_render = styler._copy(deepcopy=True)
  612:     styler.to_latex(
  613:         column_format="rllr",
  614:         position="h",
  615:         position_float="centering",
  616:         hrules=True,
  617:         label="my lab",
  618:         caption="my cap",
  619:     )
  620: 
  621:     assert pre_render.table_styles == styler.table_styles
  622:     assert pre_render.caption == styler.caption
  623: 
  624: 
  625: def test_longtable_comprehensive(styler):
  626:     result = styler.to_latex(
  627:         environment="longtable", hrules=True, label="fig:A", caption=("full", "short")
  628:     )
  629:     expected = dedent(
  630:         """\
  631:         \\begin{longtable}{lrrl}
  632:         \\caption[short]{full} \\label{fig:A} \\\\
  633:         \\toprule
  634:          & A & B & C \\\\
  635:         \\midrule
  636:         \\endfirsthead
  637:         \\caption[]{full} \\\\
  638:         \\toprule
  639:          & A & B & C \\\\
  640:         \\midrule
  641:         \\endhead
  642:         \\midrule
  643:         \\multicolumn{4}{r}{Continued on next page} \\\\
  644:         \\midrule
  645:         \\endfoot
  646:         \\bottomrule
  647:         \\endlastfoot
  648:         0 & 0 & -0.61 & ab \\\\
  649:         1 & 1 & -1.22 & cd \\\\
  650:         \\end{longtable}
  651:     """
  652:     )
  653:     assert result == expected
  654: 
  655: 
  656: def test_longtable_minimal(styler):
  657:     result = styler.to_latex(environment="longtable")
  658:     expected = dedent(
  659:         """\
  660:         \\begin{longtable}{lrrl}
  661:          & A & B & C \\\\
  662:         \\endfirsthead
  663:          & A & B & C \\\\
  664:         \\endhead
  665:         \\multicolumn{4}{r}{Continued on next page} \\\\
  666:         \\endfoot
  667:         \\endlastfoot
  668:         0 & 0 & -0.61 & ab \\\\
  669:         1 & 1 & -1.22 & cd \\\\
  670:         \\end{longtable}
  671:     """
  672:     )
  673:     assert result == expected
  674: 
  675: 
  676: @pytest.mark.parametrize(
  677:     "sparse, exp, siunitx",
  678:     [
  679:         (True, "{} & \\multicolumn{2}{r}{A} & {B}", True),
  680:         (False, "{} & {A} & {A} & {B}", True),
  681:         (True, " & \\multicolumn{2}{r}{A} & B", False),
  682:         (False, " & A & A & B", False),
  683:     ],
  684: )
  685: def test_longtable_multiindex_columns(df, sparse, exp, siunitx):
  686:     cidx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  687:     df.columns = cidx
  688:     with_si = "{} & {a} & {b} & {c} \\\\"
  689:     without_si = " & a & b & c \\\\"
  690:     expected = dedent(
  691:         f"""\
  692:         \\begin{{longtable}}{{l{"SS" if siunitx else "rr"}l}}
  693:         {exp} \\\\
  694:         {with_si if siunitx else without_si}
  695:         \\endfirsthead
  696:         {exp} \\\\
  697:         {with_si if siunitx else without_si}
  698:         \\endhead
  699:         """
  700:     )
  701:     result = df.style.to_latex(
  702:         environment="longtable", sparse_columns=sparse, siunitx=siunitx
  703:     )
  704:     assert expected in result
  705: 
  706: 
  707: @pytest.mark.parametrize(
  708:     "caption, cap_exp",
  709:     [
  710:         ("full", ("{full}", "")),
  711:         (("full", "short"), ("{full}", "[short]")),
  712:     ],
  713: )
  714: @pytest.mark.parametrize("label, lab_exp", [(None, ""), ("tab:A", " \\label{tab:A}")])
  715: def test_longtable_caption_label(styler, caption, cap_exp, label, lab_exp):
  716:     cap_exp1 = f"\\caption{cap_exp[1]}{cap_exp[0]}"
  717:     cap_exp2 = f"\\caption[]{cap_exp[0]}"
  718: 
  719:     expected = dedent(
  720:         f"""\
  721:         {cap_exp1}{lab_exp} \\\\
  722:          & A & B & C \\\\
  723:         \\endfirsthead
  724:         {cap_exp2} \\\\
  725:         """
  726:     )
  727:     assert expected in styler.to_latex(
  728:         environment="longtable", caption=caption, label=label
  729:     )
  730: 
  731: 
  732: @pytest.mark.parametrize("index", [True, False])
  733: @pytest.mark.parametrize(
  734:     "columns, siunitx",
  735:     [
  736:         (True, True),
  737:         (True, False),
  738:         (False, False),
  739:     ],
  740: )
  741: def test_apply_map_header_render_mi(df_ext, index, columns, siunitx):
  742:     cidx = MultiIndex.from_tuples([("Z", "a"), ("Z", "b"), ("Y", "c")])
  743:     ridx = MultiIndex.from_tuples([("A", "a"), ("A", "b"), ("B", "c")])
  744:     df_ext.index, df_ext.columns = ridx, cidx
  745:     styler = df_ext.style
  746: 
  747:     func = lambda v: "bfseries: --rwrap" if "A" in v or "Z" in v or "c" in v else None
  748: 
  749:     if index:
  750:         styler.map_index(func, axis="index")
  751:     if columns:
  752:         styler.map_index(func, axis="columns")
  753: 
  754:     result = styler.to_latex(siunitx=siunitx)
  755: 
  756:     expected_index = dedent(
  757:         """\
  758:     \\multirow[c]{2}{*}{\\bfseries{A}} & a & 0 & -0.610000 & ab \\\\
  759:     \\bfseries{} & b & 1 & -1.220000 & cd \\\\
  760:     B & \\bfseries{c} & 2 & -2.220000 & de \\\\
  761:     """
  762:     )
  763:     assert (expected_index in result) is index
  764: 
  765:     exp_cols_si = dedent(
  766:         """\
  767:     {} & {} & \\multicolumn{2}{r}{\\bfseries{Z}} & {Y} \\\\
  768:     {} & {} & {a} & {b} & {\\bfseries{c}} \\\\
  769:     """
  770:     )
  771:     exp_cols_no_si = """\
  772:  &  & \\multicolumn{2}{r}{\\bfseries{Z}} & Y \\\\
  773:  &  & a & b & \\bfseries{c} \\\\
  774: """
  775:     assert ((exp_cols_si if siunitx else exp_cols_no_si) in result) is columns
  776: 
  777: 
  778: def test_repr_option(styler):
  779:     assert "<style" in styler._repr_html_()[:6]
  780:     assert styler._repr_latex_() is None
  781:     with option_context("styler.render.repr", "latex"):
  782:         assert "\\begin{tabular}" in styler._repr_latex_()[:15]
  783:         assert styler._repr_html_() is None
  784: 
  785: 
  786: @pytest.mark.parametrize("option", ["hrules"])
  787: def test_bool_options(styler, option):
  788:     with option_context(f"styler.latex.{option}", False):
  789:         latex_false = styler.to_latex()
  790:     with option_context(f"styler.latex.{option}", True):
  791:         latex_true = styler.to_latex()
  792:     assert latex_false != latex_true  # options are reactive under to_latex(*no_args)
  793: 
  794: 
  795: def test_siunitx_basic_headers(styler):
  796:     assert "{} & {A} & {B} & {C} \\\\" in styler.to_latex(siunitx=True)
  797:     assert " & A & B & C \\\\" in styler.to_latex()  # default siunitx=False
  798: 
  799: 
  800: @pytest.mark.parametrize("axis", ["index", "columns"])
  801: def test_css_convert_apply_index(styler, axis):
  802:     styler.map_index(lambda x: "font-weight: bold;", axis=axis)
  803:     for label in getattr(styler, axis):
  804:         assert f"\\bfseries {label}" in styler.to_latex(convert_css=True)
  805: 
  806: 
  807: def test_hide_index_latex(styler):
  808:     # GH 43637
  809:     styler.hide([0], axis=0)
  810:     result = styler.to_latex()
  811:     expected = dedent(
  812:         """\
  813:     \\begin{tabular}{lrrl}
  814:      & A & B & C \\\\
  815:     1 & 1 & -1.22 & cd \\\\
  816:     \\end{tabular}
  817:     """
  818:     )
  819:     assert expected == result
  820: 
  821: 
  822: def test_latex_hiding_index_columns_multiindex_alignment():
  823:     # gh 43644
  824:     midx = MultiIndex.from_product(
  825:         [["i0", "j0"], ["i1"], ["i2", "j2"]], names=["i-0", "i-1", "i-2"]
  826:     )
  827:     cidx = MultiIndex.from_product(
  828:         [["c0"], ["c1", "d1"], ["c2", "d2"]], names=["c-0", "c-1", "c-2"]
  829:     )
  830:     df = DataFrame(np.arange(16).reshape(4, 4), index=midx, columns=cidx)
  831:     styler = Styler(df, uuid_len=0)
  832:     styler.hide(level=1, axis=0).hide(level=0, axis=1)
  833:     styler.hide([("i0", "i1", "i2")], axis=0)
  834:     styler.hide([("c0", "c1", "c2")], axis=1)
  835:     styler.map(lambda x: "color:{red};" if x == 5 else "")
  836:     styler.map_index(lambda x: "color:{blue};" if "j" in x else "")
  837:     result = styler.to_latex()
  838:     expected = dedent(
  839:         """\
  840:         \\begin{tabular}{llrrr}
  841:          & c-1 & c1 & \\multicolumn{2}{r}{d1} \\\\
  842:          & c-2 & d2 & c2 & d2 \\\\
  843:         i-0 & i-2 &  &  &  \\\\
  844:         i0 & \\color{blue} j2 & \\color{red} 5 & 6 & 7 \\\\
  845:         \\multirow[c]{2}{*}{\\color{blue} j0} & i2 & 9 & 10 & 11 \\\\
  846:         \\color{blue}  & \\color{blue} j2 & 13 & 14 & 15 \\\\
  847:         \\end{tabular}
  848:         """
  849:     )
  850:     assert result == expected
  851: 
  852: 
  853: def test_rendered_links():
  854:     # note the majority of testing is done in test_html.py: test_rendered_links
  855:     # these test only the alternative latex format is functional
  856:     df = DataFrame(["text www.domain.com text"])
  857:     result = df.style.format(hyperlinks="latex").to_latex()
  858:     assert r"text \href{www.domain.com}{www.domain.com} text" in result
  859: 
  860: 
  861: def test_apply_index_hidden_levels():
  862:     # gh 45156
  863:     styler = DataFrame(
  864:         [[1]],
  865:         index=MultiIndex.from_tuples([(0, 1)], names=["l0", "l1"]),
  866:         columns=MultiIndex.from_tuples([(0, 1)], names=["c0", "c1"]),
  867:     ).style
  868:     styler.hide(level=1)
  869:     styler.map_index(lambda v: "color: red;", level=0, axis=1)
  870:     result = styler.to_latex(convert_css=True)
  871:     expected = dedent(
  872:         """\
  873:         \\begin{tabular}{lr}
  874:         c0 & \\color{red} 0 \\\\
  875:         c1 & 1 \\\\
  876:         l0 &  \\\\
  877:         0 & 1 \\\\
  878:         \\end{tabular}
  879:         """
  880:     )
  881:     assert result == expected
  882: 
  883: 
  884: @pytest.mark.parametrize("clines", ["bad", "index", "skip-last", "all", "data"])
  885: def test_clines_validation(clines, styler):
  886:     msg = f"`clines` value of {clines} is invalid."
  887:     with pytest.raises(ValueError, match=msg):
  888:         styler.to_latex(clines=clines)
  889: 
  890: 
  891: @pytest.mark.parametrize(
  892:     "clines, exp",
  893:     [
  894:         ("all;index", "\n\\cline{1-1}"),
  895:         ("all;data", "\n\\cline{1-2}"),
  896:         ("skip-last;index", ""),
  897:         ("skip-last;data", ""),
  898:         (None, ""),
  899:     ],
  900: )
  901: @pytest.mark.parametrize("env", ["table", "longtable"])
  902: def test_clines_index(clines, exp, env):
  903:     df = DataFrame([[1], [2], [3], [4]])
  904:     result = df.style.to_latex(clines=clines, environment=env)
  905:     expected = f"""\
  906: 0 & 1 \\\\{exp}
  907: 1 & 2 \\\\{exp}
  908: 2 & 3 \\\\{exp}
  909: 3 & 4 \\\\{exp}
  910: """
  911:     assert expected in result
  912: 
  913: 
  914: @pytest.mark.parametrize(
  915:     "clines, expected",
  916:     [
  917:         (
  918:             None,
  919:             dedent(
  920:                 """\
  921:             \\multirow[c]{2}{*}{A} & X & 1 \\\\
  922:              & Y & 2 \\\\
  923:             \\multirow[c]{2}{*}{B} & X & 3 \\\\
  924:              & Y & 4 \\\\
  925:             """
  926:             ),
  927:         ),
  928:         (
  929:             "skip-last;index",
  930:             dedent(
  931:                 """\
  932:             \\multirow[c]{2}{*}{A} & X & 1 \\\\
  933:              & Y & 2 \\\\
  934:             \\cline{1-2}
  935:             \\multirow[c]{2}{*}{B} & X & 3 \\\\
  936:              & Y & 4 \\\\
  937:             \\cline{1-2}
  938:             """
  939:             ),
  940:         ),
  941:         (
  942:             "skip-last;data",
  943:             dedent(
  944:                 """\
  945:             \\multirow[c]{2}{*}{A} & X & 1 \\\\
  946:              & Y & 2 \\\\
  947:             \\cline{1-3}
  948:             \\multirow[c]{2}{*}{B} & X & 3 \\\\
  949:              & Y & 4 \\\\
  950:             \\cline{1-3}
  951:             """
  952:             ),
  953:         ),
  954:         (
  955:             "all;index",
  956:             dedent(
  957:                 """\
  958:             \\multirow[c]{2}{*}{A} & X & 1 \\\\
  959:             \\cline{2-2}
  960:              & Y & 2 \\\\
  961:             \\cline{1-2} \\cline{2-2}
  962:             \\multirow[c]{2}{*}{B} & X & 3 \\\\
  963:             \\cline{2-2}
  964:              & Y & 4 \\\\
  965:             \\cline{1-2} \\cline{2-2}
  966:             """
  967:             ),
  968:         ),
  969:         (
  970:             "all;data",
  971:             dedent(
  972:                 """\
  973:             \\multirow[c]{2}{*}{A} & X & 1 \\\\
  974:             \\cline{2-3}
  975:              & Y & 2 \\\\
  976:             \\cline{1-3} \\cline{2-3}
  977:             \\multirow[c]{2}{*}{B} & X & 3 \\\\
  978:             \\cline{2-3}
  979:              & Y & 4 \\\\
  980:             \\cline{1-3} \\cline{2-3}
  981:             """
  982:             ),
  983:         ),
  984:     ],
  985: )
  986: @pytest.mark.parametrize("env", ["table"])
  987: def test_clines_multiindex(clines, expected, env):
  988:     # also tests simultaneously with hidden rows and a hidden multiindex level
  989:     midx = MultiIndex.from_product([["A", "-", "B"], [0], ["X", "Y"]])
  990:     df = DataFrame([[1], [2], [99], [99], [3], [4]], index=midx)
  991:     styler = df.style
  992:     styler.hide([("-", 0, "X"), ("-", 0, "Y")])
  993:     styler.hide(level=1)
  994:     result = styler.to_latex(clines=clines, environment=env)
  995:     assert expected in result
  996: 
  997: 
  998: def test_col_format_len(styler):
  999:     # gh 46037
 1000:     result = styler.to_latex(environment="longtable", column_format="lrr{10cm}")
 1001:     expected = r"\multicolumn{4}{r}{Continued on next page} \\"
 1002:     assert expected in result
 1003: 
 1004: 
 1005: def test_concat(styler):
 1006:     result = styler.concat(styler.data.agg(["sum"]).style).to_latex()
 1007:     expected = dedent(
 1008:         """\
 1009:     \\begin{tabular}{lrrl}
 1010:      & A & B & C \\\\
 1011:     0 & 0 & -0.61 & ab \\\\
 1012:     1 & 1 & -1.22 & cd \\\\
 1013:     sum & 1 & -1.830000 & abcd \\\\
 1014:     \\end{tabular}
 1015:     """
 1016:     )
 1017:     assert result == expected
 1018: 
 1019: 
 1020: def test_concat_recursion():
 1021:     # tests hidden row recursion and applied styles
 1022:     styler1 = DataFrame([[1], [9]]).style.hide([1]).highlight_min(color="red")
 1023:     styler2 = DataFrame([[9], [2]]).style.hide([0]).highlight_min(color="green")
 1024:     styler3 = DataFrame([[3], [9]]).style.hide([1]).highlight_min(color="blue")
 1025: 
 1026:     result = styler1.concat(styler2.concat(styler3)).to_latex(convert_css=True)
 1027:     expected = dedent(
 1028:         """\
 1029:     \\begin{tabular}{lr}
 1030:      & 0 \\\\
 1031:     0 & {\\cellcolor{red}} 1 \\\\
 1032:     1 & {\\cellcolor{green}} 2 \\\\
 1033:     0 & {\\cellcolor{blue}} 3 \\\\
 1034:     \\end{tabular}
 1035:     """
 1036:     )
 1037:     assert result == expected
 1038: 
 1039: 
 1040: def test_concat_chain():
 1041:     # tests hidden row recursion and applied styles
 1042:     styler1 = DataFrame([[1], [9]]).style.hide([1]).highlight_min(color="red")
 1043:     styler2 = DataFrame([[9], [2]]).style.hide([0]).highlight_min(color="green")
 1044:     styler3 = DataFrame([[3], [9]]).style.hide([1]).highlight_min(color="blue")
 1045: 
 1046:     result = styler1.concat(styler2).concat(styler3).to_latex(convert_css=True)
 1047:     expected = dedent(
 1048:         """\
 1049:     \\begin{tabular}{lr}
 1050:      & 0 \\\\
 1051:     0 & {\\cellcolor{red}} 1 \\\\
 1052:     1 & {\\cellcolor{green}} 2 \\\\
 1053:     0 & {\\cellcolor{blue}} 3 \\\\
 1054:     \\end{tabular}
 1055:     """
 1056:     )
 1057:     assert result == expected
 1058: 
 1059: 
 1060: @pytest.mark.parametrize(
 1061:     "df, expected",
 1062:     [
 1063:         (
 1064:             DataFrame(),
 1065:             dedent(
 1066:                 """\
 1067:             \\begin{tabular}{l}
 1068:             \\end{tabular}
 1069:             """
 1070:             ),
 1071:         ),
 1072:         (
 1073:             DataFrame(columns=["a", "b", "c"]),
 1074:             dedent(
 1075:                 """\
 1076:             \\begin{tabular}{llll}
 1077:              & a & b & c \\\\
 1078:             \\end{tabular}
 1079:             """
 1080:             ),
 1081:         ),
 1082:     ],
 1083: )
 1084: @pytest.mark.parametrize(
 1085:     "clines", [None, "all;data", "all;index", "skip-last;data", "skip-last;index"]
 1086: )
 1087: def test_empty_clines(df: DataFrame, expected: str, clines: str):
 1088:     # GH 47203
 1089:     result = df.style.to_latex(clines=clines)
 1090:     assert result == expected
