    1: import io
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas.compat import is_platform_windows
    7: 
    8: import pandas as pd
    9: import pandas._testing as tm
   10: 
   11: from pandas.io.excel import ExcelFile
   12: from pandas.io.excel._base import inspect_excel_format
   13: 
   14: xlrd = pytest.importorskip("xlrd")
   15: 
   16: if is_platform_windows():
   17:     pytestmark = pytest.mark.single_cpu
   18: 
   19: 
   20: @pytest.fixture(params=[".xls"])
   21: def read_ext_xlrd(request):
   22:     """
   23:     Valid extensions for reading Excel files with xlrd.
   24: 
   25:     Similar to read_ext, but excludes .ods, .xlsb, and for xlrd>2 .xlsx, .xlsm
   26:     """
   27:     return request.param
   28: 
   29: 
   30: def test_read_xlrd_book(read_ext_xlrd, datapath):
   31:     engine = "xlrd"
   32:     sheet_name = "Sheet1"
   33:     pth = datapath("io", "data", "excel", "test1.xls")
   34:     with xlrd.open_workbook(pth) as book:
   35:         with ExcelFile(book, engine=engine) as xl:
   36:             result = pd.read_excel(xl, sheet_name=sheet_name, index_col=0)
   37: 
   38:         expected = pd.read_excel(
   39:             book, sheet_name=sheet_name, engine=engine, index_col=0
   40:         )
   41:     tm.assert_frame_equal(result, expected)
   42: 
   43: 
   44: def test_read_xlsx_fails(datapath):
   45:     # GH 29375
   46:     from xlrd.biffh import XLRDError
   47: 
   48:     path = datapath("io", "data", "excel", "test1.xlsx")
   49:     with pytest.raises(XLRDError, match="Excel xlsx file; not supported"):
   50:         pd.read_excel(path, engine="xlrd")
   51: 
   52: 
   53: def test_nan_in_xls(datapath):
   54:     # GH 54564
   55:     path = datapath("io", "data", "excel", "test6.xls")
   56: 
   57:     expected = pd.DataFrame({0: np.r_[0, 2].astype("int64"), 1: np.r_[1, np.nan]})
   58: 
   59:     result = pd.read_excel(path, header=None)
   60: 
   61:     tm.assert_frame_equal(result, expected)
   62: 
   63: 
   64: @pytest.mark.parametrize(
   65:     "file_header",
   66:     [
   67:         b"\x09\x00\x04\x00\x07\x00\x10\x00",
   68:         b"\x09\x02\x06\x00\x00\x00\x10\x00",
   69:         b"\x09\x04\x06\x00\x00\x00\x10\x00",
   70:         b"\xd0\xcf\x11\xe0\xa1\xb1\x1a\xe1",
   71:     ],
   72: )
   73: def test_read_old_xls_files(file_header):
   74:     # GH 41226
   75:     f = io.BytesIO(file_header)
   76:     assert inspect_excel_format(f) == "xls"
