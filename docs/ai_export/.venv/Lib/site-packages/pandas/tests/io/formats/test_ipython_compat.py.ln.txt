    1: import numpy as np
    2: 
    3: import pandas._config.config as cf
    4: 
    5: from pandas import (
    6:     DataFrame,
    7:     MultiIndex,
    8: )
    9: 
   10: 
   11: class TestTableSchemaRepr:
   12:     def test_publishes(self, ip):
   13:         ipython = ip.instance(config=ip.config)
   14:         df = DataFrame({"A": [1, 2]})
   15:         objects = [df["A"], df]  # dataframe / series
   16:         expected_keys = [
   17:             {"text/plain", "application/vnd.dataresource+json"},
   18:             {"text/plain", "text/html", "application/vnd.dataresource+json"},
   19:         ]
   20: 
   21:         opt = cf.option_context("display.html.table_schema", True)
   22:         last_obj = None
   23:         for obj, expected in zip(objects, expected_keys):
   24:             last_obj = obj
   25:             with opt:
   26:                 formatted = ipython.display_formatter.format(obj)
   27:             assert set(formatted[0].keys()) == expected
   28: 
   29:         with_latex = cf.option_context("styler.render.repr", "latex")
   30: 
   31:         with opt, with_latex:
   32:             formatted = ipython.display_formatter.format(last_obj)
   33: 
   34:         expected = {
   35:             "text/plain",
   36:             "text/html",
   37:             "text/latex",
   38:             "application/vnd.dataresource+json",
   39:         }
   40:         assert set(formatted[0].keys()) == expected
   41: 
   42:     def test_publishes_not_implemented(self, ip):
   43:         # column MultiIndex
   44:         # GH#15996
   45:         midx = MultiIndex.from_product([["A", "B"], ["a", "b", "c"]])
   46:         df = DataFrame(
   47:             np.random.default_rng(2).standard_normal((5, len(midx))), columns=midx
   48:         )
   49: 
   50:         opt = cf.option_context("display.html.table_schema", True)
   51: 
   52:         with opt:
   53:             formatted = ip.instance(config=ip.config).display_formatter.format(df)
   54: 
   55:         expected = {"text/plain", "text/html"}
   56:         assert set(formatted[0].keys()) == expected
   57: 
   58:     def test_config_on(self):
   59:         df = DataFrame({"A": [1, 2]})
   60:         with cf.option_context("display.html.table_schema", True):
   61:             result = df._repr_data_resource_()
   62: 
   63:         assert result is not None
   64: 
   65:     def test_config_default_off(self):
   66:         df = DataFrame({"A": [1, 2]})
   67:         with cf.option_context("display.html.table_schema", False):
   68:             result = df._repr_data_resource_()
   69: 
   70:         assert result is None
   71: 
   72:     def test_enable_data_resource_formatter(self, ip):
   73:         # GH#10491
   74:         formatters = ip.instance(config=ip.config).display_formatter.formatters
   75:         mimetype = "application/vnd.dataresource+json"
   76: 
   77:         with cf.option_context("display.html.table_schema", True):
   78:             assert "application/vnd.dataresource+json" in formatters
   79:             assert formatters[mimetype].enabled
   80: 
   81:         # still there, just disabled
   82:         assert "application/vnd.dataresource+json" in formatters
   83:         assert not formatters[mimetype].enabled
   84: 
   85:         # able to re-set
   86:         with cf.option_context("display.html.table_schema", True):
   87:             assert "application/vnd.dataresource+json" in formatters
   88:             assert formatters[mimetype].enabled
   89:             # smoke test that it works
   90:             ip.instance(config=ip.config).display_formatter.format(cf)
