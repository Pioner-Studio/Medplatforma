    1: import shlex
    2: import subprocess
    3: import time
    4: import uuid
    5: 
    6: import pytest
    7: 
    8: from pandas.compat import (
    9:     is_ci_environment,
   10:     is_platform_arm,
   11:     is_platform_mac,
   12:     is_platform_windows,
   13: )
   14: import pandas.util._test_decorators as td
   15: 
   16: import pandas.io.common as icom
   17: from pandas.io.parsers import read_csv
   18: 
   19: 
   20: @pytest.fixture
   21: def compression_to_extension():
   22:     return {value: key for key, value in icom.extension_to_compression.items()}
   23: 
   24: 
   25: @pytest.fixture
   26: def tips_file(datapath):
   27:     """Path to the tips dataset"""
   28:     return datapath("io", "data", "csv", "tips.csv")
   29: 
   30: 
   31: @pytest.fixture
   32: def jsonl_file(datapath):
   33:     """Path to a JSONL dataset"""
   34:     return datapath("io", "parser", "data", "items.jsonl")
   35: 
   36: 
   37: @pytest.fixture
   38: def salaries_table(datapath):
   39:     """DataFrame with the salaries dataset"""
   40:     return read_csv(datapath("io", "parser", "data", "salaries.csv"), sep="\t")
   41: 
   42: 
   43: @pytest.fixture
   44: def feather_file(datapath):
   45:     return datapath("io", "data", "feather", "feather-0_3_1.feather")
   46: 
   47: 
   48: @pytest.fixture
   49: def xml_file(datapath):
   50:     return datapath("io", "data", "xml", "books.xml")
   51: 
   52: 
   53: @pytest.fixture
   54: def s3_base(worker_id, monkeypatch):
   55:     """
   56:     Fixture for mocking S3 interaction.
   57: 
   58:     Sets up moto server in separate process locally
   59:     Return url for motoserver/moto CI service
   60:     """
   61:     pytest.importorskip("s3fs")
   62:     pytest.importorskip("boto3")
   63: 
   64:     # temporary workaround as moto fails for botocore >= 1.11 otherwise,
   65:     # see https://github.com/spulec/moto/issues/1924 & 1952
   66:     monkeypatch.setenv("AWS_ACCESS_KEY_ID", "foobar_key")
   67:     monkeypatch.setenv("AWS_SECRET_ACCESS_KEY", "foobar_secret")
   68:     if is_ci_environment():
   69:         if is_platform_arm() or is_platform_mac() or is_platform_windows():
   70:             # NOT RUN on Windows/macOS/ARM, only Ubuntu
   71:             # - subprocess in CI can cause timeouts
   72:             # - GitHub Actions do not support
   73:             #   container services for the above OSs
   74:             # - CircleCI will probably hit the Docker rate pull limit
   75:             pytest.skip(
   76:                 "S3 tests do not have a corresponding service in "
   77:                 "Windows, macOS or ARM platforms"
   78:             )
   79:         else:
   80:             # set in .github/workflows/unit-tests.yml
   81:             yield "http://localhost:5000"
   82:     else:
   83:         requests = pytest.importorskip("requests")
   84:         pytest.importorskip("moto")
   85:         pytest.importorskip("flask")  # server mode needs flask too
   86: 
   87:         # Launching moto in server mode, i.e., as a separate process
   88:         # with an S3 endpoint on localhost
   89: 
   90:         worker_id = "5" if worker_id == "master" else worker_id.lstrip("gw")
   91:         endpoint_port = f"555{worker_id}"
   92:         endpoint_uri = f"http://127.0.0.1:{endpoint_port}/"
   93: 
   94:         # pipe to null to avoid logging in terminal
   95:         with subprocess.Popen(
   96:             shlex.split(f"moto_server s3 -p {endpoint_port}"),
   97:             stdout=subprocess.DEVNULL,
   98:             stderr=subprocess.DEVNULL,
   99:         ) as proc:
  100:             timeout = 5
  101:             while timeout > 0:
  102:                 try:
  103:                     # OK to go once server is accepting connections
  104:                     r = requests.get(endpoint_uri)
  105:                     if r.ok:
  106:                         break
  107:                 except Exception:
  108:                     pass
  109:                 timeout -= 0.1
  110:                 time.sleep(0.1)
  111:             yield endpoint_uri
  112: 
  113:             proc.terminate()
  114: 
  115: 
  116: @pytest.fixture
  117: def s3so(s3_base):
  118:     return {"client_kwargs": {"endpoint_url": s3_base}}
  119: 
  120: 
  121: @pytest.fixture
  122: def s3_resource(s3_base):
  123:     import boto3
  124: 
  125:     s3 = boto3.resource("s3", endpoint_url=s3_base)
  126:     return s3
  127: 
  128: 
  129: @pytest.fixture
  130: def s3_public_bucket(s3_resource):
  131:     bucket = s3_resource.Bucket(f"pandas-test-{uuid.uuid4()}")
  132:     bucket.create()
  133:     yield bucket
  134:     bucket.objects.delete()
  135:     bucket.delete()
  136: 
  137: 
  138: @pytest.fixture
  139: def s3_public_bucket_with_data(
  140:     s3_public_bucket, tips_file, jsonl_file, feather_file, xml_file
  141: ):
  142:     """
  143:     The following datasets
  144:     are loaded.
  145: 
  146:     - tips.csv
  147:     - tips.csv.gz
  148:     - tips.csv.bz2
  149:     - items.jsonl
  150:     """
  151:     test_s3_files = [
  152:         ("tips#1.csv", tips_file),
  153:         ("tips.csv", tips_file),
  154:         ("tips.csv.gz", tips_file + ".gz"),
  155:         ("tips.csv.bz2", tips_file + ".bz2"),
  156:         ("items.jsonl", jsonl_file),
  157:         ("simple_dataset.feather", feather_file),
  158:         ("books.xml", xml_file),
  159:     ]
  160:     for s3_key, file_name in test_s3_files:
  161:         with open(file_name, "rb") as f:
  162:             s3_public_bucket.put_object(Key=s3_key, Body=f)
  163:     return s3_public_bucket
  164: 
  165: 
  166: @pytest.fixture
  167: def s3_private_bucket(s3_resource):
  168:     bucket = s3_resource.Bucket(f"cant_get_it-{uuid.uuid4()}")
  169:     bucket.create(ACL="private")
  170:     yield bucket
  171:     bucket.objects.delete()
  172:     bucket.delete()
  173: 
  174: 
  175: @pytest.fixture
  176: def s3_private_bucket_with_data(
  177:     s3_private_bucket, tips_file, jsonl_file, feather_file, xml_file
  178: ):
  179:     """
  180:     The following datasets
  181:     are loaded.
  182: 
  183:     - tips.csv
  184:     - tips.csv.gz
  185:     - tips.csv.bz2
  186:     - items.jsonl
  187:     """
  188:     test_s3_files = [
  189:         ("tips#1.csv", tips_file),
  190:         ("tips.csv", tips_file),
  191:         ("tips.csv.gz", tips_file + ".gz"),
  192:         ("tips.csv.bz2", tips_file + ".bz2"),
  193:         ("items.jsonl", jsonl_file),
  194:         ("simple_dataset.feather", feather_file),
  195:         ("books.xml", xml_file),
  196:     ]
  197:     for s3_key, file_name in test_s3_files:
  198:         with open(file_name, "rb") as f:
  199:             s3_private_bucket.put_object(Key=s3_key, Body=f)
  200:     return s3_private_bucket
  201: 
  202: 
  203: _compression_formats_params = [
  204:     (".no_compress", None),
  205:     ("", None),
  206:     (".gz", "gzip"),
  207:     (".GZ", "gzip"),
  208:     (".bz2", "bz2"),
  209:     (".BZ2", "bz2"),
  210:     (".zip", "zip"),
  211:     (".ZIP", "zip"),
  212:     (".xz", "xz"),
  213:     (".XZ", "xz"),
  214:     pytest.param((".zst", "zstd"), marks=td.skip_if_no("zstandard")),
  215:     pytest.param((".ZST", "zstd"), marks=td.skip_if_no("zstandard")),
  216: ]
  217: 
  218: 
  219: @pytest.fixture(params=_compression_formats_params[1:])
  220: def compression_format(request):
  221:     return request.param
  222: 
  223: 
  224: @pytest.fixture(params=_compression_formats_params)
  225: def compression_ext(request):
  226:     return request.param[0]
  227: 
  228: 
  229: @pytest.fixture(
  230:     params=[
  231:         "python",
  232:         pytest.param("pyarrow", marks=td.skip_if_no("pyarrow")),
  233:     ]
  234: )
  235: def string_storage(request):
  236:     """
  237:     Parametrized fixture for pd.options.mode.string_storage.
  238: 
  239:     * 'python'
  240:     * 'pyarrow'
  241:     """
  242:     return request.param
