    1: """
    2: Tests that work on both the Python and C engines but do not have a
    3: specific classification into the other test modules.
    4: """
    5: from io import StringIO
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas.compat import is_platform_linux
   11: 
   12: from pandas import DataFrame
   13: import pandas._testing as tm
   14: 
   15: pytestmark = pytest.mark.filterwarnings(
   16:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   17: )
   18: xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
   19: skip_pyarrow = pytest.mark.usefixtures("pyarrow_skip")
   20: 
   21: 
   22: @skip_pyarrow  # ParserError: CSV parse error: Empty CSV file or block
   23: def test_float_parser(all_parsers):
   24:     # see gh-9565
   25:     parser = all_parsers
   26:     data = "45e-1,4.5,45.,inf,-inf"
   27:     result = parser.read_csv(StringIO(data), header=None)
   28: 
   29:     expected = DataFrame([[float(s) for s in data.split(",")]])
   30:     tm.assert_frame_equal(result, expected)
   31: 
   32: 
   33: def test_scientific_no_exponent(all_parsers_all_precisions):
   34:     # see gh-12215
   35:     df = DataFrame.from_dict({"w": ["2e"], "x": ["3E"], "y": ["42e"], "z": ["632E"]})
   36:     data = df.to_csv(index=False)
   37:     parser, precision = all_parsers_all_precisions
   38: 
   39:     df_roundtrip = parser.read_csv(StringIO(data), float_precision=precision)
   40:     tm.assert_frame_equal(df_roundtrip, df)
   41: 
   42: 
   43: @pytest.mark.parametrize(
   44:     "neg_exp",
   45:     [
   46:         -617,
   47:         -100000,
   48:         pytest.param(-99999999999999999, marks=pytest.mark.skip_ubsan),
   49:     ],
   50: )
   51: def test_very_negative_exponent(all_parsers_all_precisions, neg_exp):
   52:     # GH#38753
   53:     parser, precision = all_parsers_all_precisions
   54: 
   55:     data = f"data\n10E{neg_exp}"
   56:     result = parser.read_csv(StringIO(data), float_precision=precision)
   57:     expected = DataFrame({"data": [0.0]})
   58:     tm.assert_frame_equal(result, expected)
   59: 
   60: 
   61: @pytest.mark.skip_ubsan
   62: @xfail_pyarrow  # AssertionError: Attributes of DataFrame.iloc[:, 0] are different
   63: @pytest.mark.parametrize("exp", [999999999999999999, -999999999999999999])
   64: def test_too_many_exponent_digits(all_parsers_all_precisions, exp, request):
   65:     # GH#38753
   66:     parser, precision = all_parsers_all_precisions
   67:     data = f"data\n10E{exp}"
   68:     result = parser.read_csv(StringIO(data), float_precision=precision)
   69:     if precision == "round_trip":
   70:         if exp == 999999999999999999 and is_platform_linux():
   71:             mark = pytest.mark.xfail(reason="GH38794, on Linux gives object result")
   72:             request.applymarker(mark)
   73: 
   74:         value = np.inf if exp > 0 else 0.0
   75:         expected = DataFrame({"data": [value]})
   76:     else:
   77:         expected = DataFrame({"data": [f"10E{exp}"]})
   78: 
   79:     tm.assert_frame_equal(result, expected)
