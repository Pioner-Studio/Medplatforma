    1: import pytest
    2: 
    3: from pandas.errors import CSSWarning
    4: 
    5: import pandas._testing as tm
    6: 
    7: from pandas.io.formats.css import CSSResolver
    8: 
    9: 
   10: def assert_resolves(css, props, inherited=None):
   11:     resolve = CSSResolver()
   12:     actual = resolve(css, inherited=inherited)
   13:     assert props == actual
   14: 
   15: 
   16: def assert_same_resolution(css1, css2, inherited=None):
   17:     resolve = CSSResolver()
   18:     resolved1 = resolve(css1, inherited=inherited)
   19:     resolved2 = resolve(css2, inherited=inherited)
   20:     assert resolved1 == resolved2
   21: 
   22: 
   23: @pytest.mark.parametrize(
   24:     "name,norm,abnorm",
   25:     [
   26:         (
   27:             "whitespace",
   28:             "hello: world; foo: bar",
   29:             " \t hello \t :\n  world \n  ;  \n foo: \tbar\n\n",
   30:         ),
   31:         ("case", "hello: world; foo: bar", "Hello: WORLD; foO: bar"),
   32:         ("empty-decl", "hello: world; foo: bar", "; hello: world;; foo: bar;\n; ;"),
   33:         ("empty-list", "", ";"),
   34:     ],
   35: )
   36: def test_css_parse_normalisation(name, norm, abnorm):
   37:     assert_same_resolution(norm, abnorm)
   38: 
   39: 
   40: @pytest.mark.parametrize(
   41:     "invalid_css,remainder",
   42:     [
   43:         # No colon
   44:         ("hello-world", ""),
   45:         ("border-style: solid; hello-world", "border-style: solid"),
   46:         (
   47:             "border-style: solid; hello-world; font-weight: bold",
   48:             "border-style: solid; font-weight: bold",
   49:         ),
   50:         # Unclosed string fail
   51:         # Invalid size
   52:         ("font-size: blah", "font-size: 1em"),
   53:         ("font-size: 1a2b", "font-size: 1em"),
   54:         ("font-size: 1e5pt", "font-size: 1em"),
   55:         ("font-size: 1+6pt", "font-size: 1em"),
   56:         ("font-size: 1unknownunit", "font-size: 1em"),
   57:         ("font-size: 10", "font-size: 1em"),
   58:         ("font-size: 10 pt", "font-size: 1em"),
   59:         # Too many args
   60:         ("border-top: 1pt solid red green", "border-top: 1pt solid green"),
   61:     ],
   62: )
   63: def test_css_parse_invalid(invalid_css, remainder):
   64:     with tm.assert_produces_warning(CSSWarning):
   65:         assert_same_resolution(invalid_css, remainder)
   66: 
   67: 
   68: @pytest.mark.parametrize(
   69:     "shorthand,expansions",
   70:     [
   71:         ("margin", ["margin-top", "margin-right", "margin-bottom", "margin-left"]),
   72:         ("padding", ["padding-top", "padding-right", "padding-bottom", "padding-left"]),
   73:         (
   74:             "border-width",
   75:             [
   76:                 "border-top-width",
   77:                 "border-right-width",
   78:                 "border-bottom-width",
   79:                 "border-left-width",
   80:             ],
   81:         ),
   82:         (
   83:             "border-color",
   84:             [
   85:                 "border-top-color",
   86:                 "border-right-color",
   87:                 "border-bottom-color",
   88:                 "border-left-color",
   89:             ],
   90:         ),
   91:         (
   92:             "border-style",
   93:             [
   94:                 "border-top-style",
   95:                 "border-right-style",
   96:                 "border-bottom-style",
   97:                 "border-left-style",
   98:             ],
   99:         ),
  100:     ],
  101: )
  102: def test_css_side_shorthands(shorthand, expansions):
  103:     top, right, bottom, left = expansions
  104: 
  105:     assert_resolves(
  106:         f"{shorthand}: 1pt", {top: "1pt", right: "1pt", bottom: "1pt", left: "1pt"}
  107:     )
  108: 
  109:     assert_resolves(
  110:         f"{shorthand}: 1pt 4pt", {top: "1pt", right: "4pt", bottom: "1pt", left: "4pt"}
  111:     )
  112: 
  113:     assert_resolves(
  114:         f"{shorthand}: 1pt 4pt 2pt",
  115:         {top: "1pt", right: "4pt", bottom: "2pt", left: "4pt"},
  116:     )
  117: 
  118:     assert_resolves(
  119:         f"{shorthand}: 1pt 4pt 2pt 0pt",
  120:         {top: "1pt", right: "4pt", bottom: "2pt", left: "0pt"},
  121:     )
  122: 
  123:     with tm.assert_produces_warning(CSSWarning):
  124:         assert_resolves(f"{shorthand}: 1pt 1pt 1pt 1pt 1pt", {})
  125: 
  126: 
  127: @pytest.mark.parametrize(
  128:     "shorthand,sides",
  129:     [
  130:         ("border-top", ["top"]),
  131:         ("border-right", ["right"]),
  132:         ("border-bottom", ["bottom"]),
  133:         ("border-left", ["left"]),
  134:         ("border", ["top", "right", "bottom", "left"]),
  135:     ],
  136: )
  137: def test_css_border_shorthand_sides(shorthand, sides):
  138:     def create_border_dict(sides, color=None, style=None, width=None):
  139:         resolved = {}
  140:         for side in sides:
  141:             if color:
  142:                 resolved[f"border-{side}-color"] = color
  143:             if style:
  144:                 resolved[f"border-{side}-style"] = style
  145:             if width:
  146:                 resolved[f"border-{side}-width"] = width
  147:         return resolved
  148: 
  149:     assert_resolves(
  150:         f"{shorthand}: 1pt red solid", create_border_dict(sides, "red", "solid", "1pt")
  151:     )
  152: 
  153: 
  154: @pytest.mark.parametrize(
  155:     "prop, expected",
  156:     [
  157:         ("1pt red solid", ("red", "solid", "1pt")),
  158:         ("red 1pt solid", ("red", "solid", "1pt")),
  159:         ("red solid 1pt", ("red", "solid", "1pt")),
  160:         ("solid 1pt red", ("red", "solid", "1pt")),
  161:         ("red solid", ("red", "solid", "1.500000pt")),
  162:         # Note: color=black is not CSS conforming
  163:         # (See https://drafts.csswg.org/css-backgrounds/#border-shorthands)
  164:         ("1pt solid", ("black", "solid", "1pt")),
  165:         ("1pt red", ("red", "none", "1pt")),
  166:         ("red", ("red", "none", "1.500000pt")),
  167:         ("1pt", ("black", "none", "1pt")),
  168:         ("solid", ("black", "solid", "1.500000pt")),
  169:         # Sizes
  170:         ("1em", ("black", "none", "12pt")),
  171:     ],
  172: )
  173: def test_css_border_shorthands(prop, expected):
  174:     color, style, width = expected
  175: 
  176:     assert_resolves(
  177:         f"border-left: {prop}",
  178:         {
  179:             "border-left-color": color,
  180:             "border-left-style": style,
  181:             "border-left-width": width,
  182:         },
  183:     )
  184: 
  185: 
  186: @pytest.mark.parametrize(
  187:     "style,inherited,equiv",
  188:     [
  189:         ("margin: 1px; margin: 2px", "", "margin: 2px"),
  190:         ("margin: 1px", "margin: 2px", "margin: 1px"),
  191:         ("margin: 1px; margin: inherit", "margin: 2px", "margin: 2px"),
  192:         (
  193:             "margin: 1px; margin-top: 2px",
  194:             "",
  195:             "margin-left: 1px; margin-right: 1px; "
  196:             "margin-bottom: 1px; margin-top: 2px",
  197:         ),
  198:         ("margin-top: 2px", "margin: 1px", "margin: 1px; margin-top: 2px"),
  199:         ("margin: 1px", "margin-top: 2px", "margin: 1px"),
  200:         (
  201:             "margin: 1px; margin-top: inherit",
  202:             "margin: 2px",
  203:             "margin: 1px; margin-top: 2px",
  204:         ),
  205:     ],
  206: )
  207: def test_css_precedence(style, inherited, equiv):
  208:     resolve = CSSResolver()
  209:     inherited_props = resolve(inherited)
  210:     style_props = resolve(style, inherited=inherited_props)
  211:     equiv_props = resolve(equiv)
  212:     assert style_props == equiv_props
  213: 
  214: 
  215: @pytest.mark.parametrize(
  216:     "style,equiv",
  217:     [
  218:         (
  219:             "margin: 1px; margin-top: inherit",
  220:             "margin-bottom: 1px; margin-right: 1px; margin-left: 1px",
  221:         ),
  222:         ("margin-top: inherit", ""),
  223:         ("margin-top: initial", ""),
  224:     ],
  225: )
  226: def test_css_none_absent(style, equiv):
  227:     assert_same_resolution(style, equiv)
  228: 
  229: 
  230: @pytest.mark.parametrize(
  231:     "size,resolved",
  232:     [
  233:         ("xx-small", "6pt"),
  234:         ("x-small", f"{7.5:f}pt"),
  235:         ("small", f"{9.6:f}pt"),
  236:         ("medium", "12pt"),
  237:         ("large", f"{13.5:f}pt"),
  238:         ("x-large", "18pt"),
  239:         ("xx-large", "24pt"),
  240:         ("8px", "6pt"),
  241:         ("1.25pc", "15pt"),
  242:         (".25in", "18pt"),
  243:         ("02.54cm", "72pt"),
  244:         ("25.4mm", "72pt"),
  245:         ("101.6q", "72pt"),
  246:         ("101.6q", "72pt"),
  247:     ],
  248: )
  249: @pytest.mark.parametrize("relative_to", [None, "16pt"])  # invariant to inherited size
  250: def test_css_absolute_font_size(size, relative_to, resolved):
  251:     if relative_to is None:
  252:         inherited = None
  253:     else:
  254:         inherited = {"font-size": relative_to}
  255:     assert_resolves(f"font-size: {size}", {"font-size": resolved}, inherited=inherited)
  256: 
  257: 
  258: @pytest.mark.parametrize(
  259:     "size,relative_to,resolved",
  260:     [
  261:         ("1em", None, "12pt"),
  262:         ("1.0em", None, "12pt"),
  263:         ("1.25em", None, "15pt"),
  264:         ("1em", "16pt", "16pt"),
  265:         ("1.0em", "16pt", "16pt"),
  266:         ("1.25em", "16pt", "20pt"),
  267:         ("1rem", "16pt", "12pt"),
  268:         ("1.0rem", "16pt", "12pt"),
  269:         ("1.25rem", "16pt", "15pt"),
  270:         ("100%", None, "12pt"),
  271:         ("125%", None, "15pt"),
  272:         ("100%", "16pt", "16pt"),
  273:         ("125%", "16pt", "20pt"),
  274:         ("2ex", None, "12pt"),
  275:         ("2.0ex", None, "12pt"),
  276:         ("2.50ex", None, "15pt"),
  277:         ("inherit", "16pt", "16pt"),
  278:         ("smaller", None, "10pt"),
  279:         ("smaller", "18pt", "15pt"),
  280:         ("larger", None, f"{14.4:f}pt"),
  281:         ("larger", "15pt", "18pt"),
  282:     ],
  283: )
  284: def test_css_relative_font_size(size, relative_to, resolved):
  285:     if relative_to is None:
  286:         inherited = None
  287:     else:
  288:         inherited = {"font-size": relative_to}
  289:     assert_resolves(f"font-size: {size}", {"font-size": resolved}, inherited=inherited)
