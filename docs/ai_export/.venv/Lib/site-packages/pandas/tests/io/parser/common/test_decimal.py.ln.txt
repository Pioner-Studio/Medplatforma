    1: """
    2: Tests that work on both the Python and C engines but do not have a
    3: specific classification into the other test modules.
    4: """
    5: from io import StringIO
    6: 
    7: import pytest
    8: 
    9: from pandas import DataFrame
   10: import pandas._testing as tm
   11: 
   12: pytestmark = pytest.mark.filterwarnings(
   13:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   14: )
   15: 
   16: 
   17: @pytest.mark.parametrize(
   18:     "data,thousands,decimal",
   19:     [
   20:         (
   21:             """A|B|C
   22: 1|2,334.01|5
   23: 10|13|10.
   24: """,
   25:             ",",
   26:             ".",
   27:         ),
   28:         (
   29:             """A|B|C
   30: 1|2.334,01|5
   31: 10|13|10,
   32: """,
   33:             ".",
   34:             ",",
   35:         ),
   36:     ],
   37: )
   38: def test_1000_sep_with_decimal(all_parsers, data, thousands, decimal):
   39:     parser = all_parsers
   40:     expected = DataFrame({"A": [1, 10], "B": [2334.01, 13], "C": [5, 10.0]})
   41: 
   42:     if parser.engine == "pyarrow":
   43:         msg = "The 'thousands' option is not supported with the 'pyarrow' engine"
   44:         with pytest.raises(ValueError, match=msg):
   45:             parser.read_csv(
   46:                 StringIO(data), sep="|", thousands=thousands, decimal=decimal
   47:             )
   48:         return
   49: 
   50:     result = parser.read_csv(
   51:         StringIO(data), sep="|", thousands=thousands, decimal=decimal
   52:     )
   53:     tm.assert_frame_equal(result, expected)
   54: 
   55: 
   56: def test_euro_decimal_format(all_parsers):
   57:     parser = all_parsers
   58:     data = """Id;Number1;Number2;Text1;Text2;Number3
   59: 1;1521,1541;187101,9543;ABC;poi;4,738797819
   60: 2;121,12;14897,76;DEF;uyt;0,377320872
   61: 3;878,158;108013,434;GHI;rez;2,735694704"""
   62: 
   63:     result = parser.read_csv(StringIO(data), sep=";", decimal=",")
   64:     expected = DataFrame(
   65:         [
   66:             [1, 1521.1541, 187101.9543, "ABC", "poi", 4.738797819],
   67:             [2, 121.12, 14897.76, "DEF", "uyt", 0.377320872],
   68:             [3, 878.158, 108013.434, "GHI", "rez", 2.735694704],
   69:         ],
   70:         columns=["Id", "Number1", "Number2", "Text1", "Text2", "Number3"],
   71:     )
   72:     tm.assert_frame_equal(result, expected)
