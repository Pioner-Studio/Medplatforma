    1: """
    2: Tests that comments are properly handled during parsing
    3: for all of the parsers defined in parsers.py
    4: """
    5: from io import StringIO
    6: 
    7: import numpy as np
    8: import pytest
    9: 
   10: from pandas import DataFrame
   11: import pandas._testing as tm
   12: 
   13: 
   14: @pytest.mark.parametrize("na_values", [None, ["NaN"]])
   15: def test_comment(all_parsers, na_values):
   16:     parser = all_parsers
   17:     data = """A,B,C
   18: 1,2.,4.#hello world
   19: 5.,NaN,10.0
   20: """
   21:     expected = DataFrame(
   22:         [[1.0, 2.0, 4.0], [5.0, np.nan, 10.0]], columns=["A", "B", "C"]
   23:     )
   24:     if parser.engine == "pyarrow":
   25:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
   26:         with pytest.raises(ValueError, match=msg):
   27:             parser.read_csv(StringIO(data), comment="#", na_values=na_values)
   28:         return
   29:     result = parser.read_csv(StringIO(data), comment="#", na_values=na_values)
   30:     tm.assert_frame_equal(result, expected)
   31: 
   32: 
   33: @pytest.mark.parametrize(
   34:     "read_kwargs", [{}, {"lineterminator": "*"}, {"delim_whitespace": True}]
   35: )
   36: def test_line_comment(all_parsers, read_kwargs, request):
   37:     parser = all_parsers
   38:     data = """# empty
   39: A,B,C
   40: 1,2.,4.#hello world
   41: #ignore this line
   42: 5.,NaN,10.0
   43: """
   44:     warn = None
   45:     depr_msg = "The 'delim_whitespace' keyword in pd.read_csv is deprecated"
   46: 
   47:     if read_kwargs.get("delim_whitespace"):
   48:         data = data.replace(",", " ")
   49:         warn = FutureWarning
   50:     elif read_kwargs.get("lineterminator"):
   51:         data = data.replace("\n", read_kwargs.get("lineterminator"))
   52: 
   53:     read_kwargs["comment"] = "#"
   54:     if parser.engine == "pyarrow":
   55:         if "lineterminator" in read_kwargs:
   56:             msg = (
   57:                 "The 'lineterminator' option is not supported with the 'pyarrow' engine"
   58:             )
   59:         else:
   60:             msg = "The 'comment' option is not supported with the 'pyarrow' engine"
   61:         with pytest.raises(ValueError, match=msg):
   62:             with tm.assert_produces_warning(
   63:                 warn, match=depr_msg, check_stacklevel=False
   64:             ):
   65:                 parser.read_csv(StringIO(data), **read_kwargs)
   66:         return
   67:     elif parser.engine == "python" and read_kwargs.get("lineterminator"):
   68:         msg = r"Custom line terminators not supported in python parser \(yet\)"
   69:         with pytest.raises(ValueError, match=msg):
   70:             with tm.assert_produces_warning(
   71:                 warn, match=depr_msg, check_stacklevel=False
   72:             ):
   73:                 parser.read_csv(StringIO(data), **read_kwargs)
   74:         return
   75: 
   76:     with tm.assert_produces_warning(warn, match=depr_msg, check_stacklevel=False):
   77:         result = parser.read_csv(StringIO(data), **read_kwargs)
   78: 
   79:     expected = DataFrame(
   80:         [[1.0, 2.0, 4.0], [5.0, np.nan, 10.0]], columns=["A", "B", "C"]
   81:     )
   82:     tm.assert_frame_equal(result, expected)
   83: 
   84: 
   85: def test_comment_skiprows(all_parsers):
   86:     parser = all_parsers
   87:     data = """# empty
   88: random line
   89: # second empty line
   90: 1,2,3
   91: A,B,C
   92: 1,2.,4.
   93: 5.,NaN,10.0
   94: """
   95:     # This should ignore the first four lines (including comments).
   96:     expected = DataFrame(
   97:         [[1.0, 2.0, 4.0], [5.0, np.nan, 10.0]], columns=["A", "B", "C"]
   98:     )
   99:     if parser.engine == "pyarrow":
  100:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  101:         with pytest.raises(ValueError, match=msg):
  102:             parser.read_csv(StringIO(data), comment="#", skiprows=4)
  103:         return
  104: 
  105:     result = parser.read_csv(StringIO(data), comment="#", skiprows=4)
  106:     tm.assert_frame_equal(result, expected)
  107: 
  108: 
  109: def test_comment_header(all_parsers):
  110:     parser = all_parsers
  111:     data = """# empty
  112: # second empty line
  113: 1,2,3
  114: A,B,C
  115: 1,2.,4.
  116: 5.,NaN,10.0
  117: """
  118:     # Header should begin at the second non-comment line.
  119:     expected = DataFrame(
  120:         [[1.0, 2.0, 4.0], [5.0, np.nan, 10.0]], columns=["A", "B", "C"]
  121:     )
  122:     if parser.engine == "pyarrow":
  123:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  124:         with pytest.raises(ValueError, match=msg):
  125:             parser.read_csv(StringIO(data), comment="#", header=1)
  126:         return
  127:     result = parser.read_csv(StringIO(data), comment="#", header=1)
  128:     tm.assert_frame_equal(result, expected)
  129: 
  130: 
  131: def test_comment_skiprows_header(all_parsers):
  132:     parser = all_parsers
  133:     data = """# empty
  134: # second empty line
  135: # third empty line
  136: X,Y,Z
  137: 1,2,3
  138: A,B,C
  139: 1,2.,4.
  140: 5.,NaN,10.0
  141: """
  142:     # Skiprows should skip the first 4 lines (including comments),
  143:     # while header should start from the second non-commented line,
  144:     # starting with line 5.
  145:     expected = DataFrame(
  146:         [[1.0, 2.0, 4.0], [5.0, np.nan, 10.0]], columns=["A", "B", "C"]
  147:     )
  148:     if parser.engine == "pyarrow":
  149:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  150:         with pytest.raises(ValueError, match=msg):
  151:             parser.read_csv(StringIO(data), comment="#", skiprows=4, header=1)
  152:         return
  153: 
  154:     result = parser.read_csv(StringIO(data), comment="#", skiprows=4, header=1)
  155:     tm.assert_frame_equal(result, expected)
  156: 
  157: 
  158: @pytest.mark.parametrize("comment_char", ["#", "~", "&", "^", "*", "@"])
  159: def test_custom_comment_char(all_parsers, comment_char):
  160:     parser = all_parsers
  161:     data = "a,b,c\n1,2,3#ignore this!\n4,5,6#ignorethistoo"
  162: 
  163:     if parser.engine == "pyarrow":
  164:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  165:         with pytest.raises(ValueError, match=msg):
  166:             parser.read_csv(
  167:                 StringIO(data.replace("#", comment_char)), comment=comment_char
  168:             )
  169:         return
  170:     result = parser.read_csv(
  171:         StringIO(data.replace("#", comment_char)), comment=comment_char
  172:     )
  173: 
  174:     expected = DataFrame([[1, 2, 3], [4, 5, 6]], columns=["a", "b", "c"])
  175:     tm.assert_frame_equal(result, expected)
  176: 
  177: 
  178: @pytest.mark.parametrize("header", ["infer", None])
  179: def test_comment_first_line(all_parsers, header):
  180:     # see gh-4623
  181:     parser = all_parsers
  182:     data = "# notes\na,b,c\n# more notes\n1,2,3"
  183: 
  184:     if header is None:
  185:         expected = DataFrame({0: ["a", "1"], 1: ["b", "2"], 2: ["c", "3"]})
  186:     else:
  187:         expected = DataFrame([[1, 2, 3]], columns=["a", "b", "c"])
  188: 
  189:     if parser.engine == "pyarrow":
  190:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  191:         with pytest.raises(ValueError, match=msg):
  192:             parser.read_csv(StringIO(data), comment="#", header=header)
  193:         return
  194:     result = parser.read_csv(StringIO(data), comment="#", header=header)
  195:     tm.assert_frame_equal(result, expected)
  196: 
  197: 
  198: def test_comment_char_in_default_value(all_parsers, request):
  199:     # GH#34002
  200:     if all_parsers.engine == "c":
  201:         reason = "see gh-34002: works on the python engine but not the c engine"
  202:         # NA value containing comment char is interpreted as comment
  203:         request.applymarker(pytest.mark.xfail(reason=reason, raises=AssertionError))
  204:     parser = all_parsers
  205: 
  206:     data = (
  207:         "# this is a comment\n"
  208:         "col1,col2,col3,col4\n"
  209:         "1,2,3,4#inline comment\n"
  210:         "4,5#,6,10\n"
  211:         "7,8,#N/A,11\n"
  212:     )
  213:     if parser.engine == "pyarrow":
  214:         msg = "The 'comment' option is not supported with the 'pyarrow' engine"
  215:         with pytest.raises(ValueError, match=msg):
  216:             parser.read_csv(StringIO(data), comment="#", na_values="#N/A")
  217:         return
  218:     result = parser.read_csv(StringIO(data), comment="#", na_values="#N/A")
  219:     expected = DataFrame(
  220:         {
  221:             "col1": [1, 4, 7],
  222:             "col2": [2, 5, 8],
  223:             "col3": [3.0, np.nan, np.nan],
  224:             "col4": [4.0, np.nan, 11.0],
  225:         }
  226:     )
  227:     tm.assert_frame_equal(result, expected)
