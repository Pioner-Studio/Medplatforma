    1: """
    2: Tests that work on both the Python and C engines but do not have a
    3: specific classification into the other test modules.
    4: """
    5: from io import StringIO
    6: 
    7: import pytest
    8: 
    9: import pandas._testing as tm
   10: 
   11: depr_msg = "The 'verbose' keyword in pd.read_csv is deprecated"
   12: 
   13: 
   14: def test_verbose_read(all_parsers, capsys):
   15:     parser = all_parsers
   16:     data = """a,b,c,d
   17: one,1,2,3
   18: one,1,2,3
   19: ,1,2,3
   20: one,1,2,3
   21: ,1,2,3
   22: ,1,2,3
   23: one,1,2,3
   24: two,1,2,3"""
   25: 
   26:     if parser.engine == "pyarrow":
   27:         msg = "The 'verbose' option is not supported with the 'pyarrow' engine"
   28:         with pytest.raises(ValueError, match=msg):
   29:             with tm.assert_produces_warning(
   30:                 FutureWarning, match=depr_msg, check_stacklevel=False
   31:             ):
   32:                 parser.read_csv(StringIO(data), verbose=True)
   33:         return
   34: 
   35:     # Engines are verbose in different ways.
   36:     with tm.assert_produces_warning(
   37:         FutureWarning, match=depr_msg, check_stacklevel=False
   38:     ):
   39:         parser.read_csv(StringIO(data), verbose=True)
   40:     captured = capsys.readouterr()
   41: 
   42:     if parser.engine == "c":
   43:         assert "Tokenization took:" in captured.out
   44:         assert "Parser memory cleanup took:" in captured.out
   45:     else:  # Python engine
   46:         assert captured.out == "Filled 3 NA values in column a\n"
   47: 
   48: 
   49: def test_verbose_read2(all_parsers, capsys):
   50:     parser = all_parsers
   51:     data = """a,b,c,d
   52: one,1,2,3
   53: two,1,2,3
   54: three,1,2,3
   55: four,1,2,3
   56: five,1,2,3
   57: ,1,2,3
   58: seven,1,2,3
   59: eight,1,2,3"""
   60: 
   61:     if parser.engine == "pyarrow":
   62:         msg = "The 'verbose' option is not supported with the 'pyarrow' engine"
   63:         with pytest.raises(ValueError, match=msg):
   64:             with tm.assert_produces_warning(
   65:                 FutureWarning, match=depr_msg, check_stacklevel=False
   66:             ):
   67:                 parser.read_csv(StringIO(data), verbose=True, index_col=0)
   68:         return
   69: 
   70:     with tm.assert_produces_warning(
   71:         FutureWarning, match=depr_msg, check_stacklevel=False
   72:     ):
   73:         parser.read_csv(StringIO(data), verbose=True, index_col=0)
   74:     captured = capsys.readouterr()
   75: 
   76:     # Engines are verbose in different ways.
   77:     if parser.engine == "c":
   78:         assert "Tokenization took:" in captured.out
   79:         assert "Parser memory cleanup took:" in captured.out
   80:     else:  # Python engine
   81:         assert captured.out == "Filled 1 NA values in column a\n"
