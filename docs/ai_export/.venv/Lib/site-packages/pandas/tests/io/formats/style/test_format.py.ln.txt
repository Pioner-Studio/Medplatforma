    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     NA,
    6:     DataFrame,
    7:     IndexSlice,
    8:     MultiIndex,
    9:     NaT,
   10:     Timestamp,
   11:     option_context,
   12: )
   13: 
   14: pytest.importorskip("jinja2")
   15: from pandas.io.formats.style import Styler
   16: from pandas.io.formats.style_render import _str_escape
   17: 
   18: 
   19: @pytest.fixture
   20: def df():
   21:     return DataFrame(
   22:         data=[[0, -0.609], [1, -1.228]],
   23:         columns=["A", "B"],
   24:         index=["x", "y"],
   25:     )
   26: 
   27: 
   28: @pytest.fixture
   29: def styler(df):
   30:     return Styler(df, uuid_len=0)
   31: 
   32: 
   33: @pytest.fixture
   34: def df_multi():
   35:     return DataFrame(
   36:         data=np.arange(16).reshape(4, 4),
   37:         columns=MultiIndex.from_product([["A", "B"], ["a", "b"]]),
   38:         index=MultiIndex.from_product([["X", "Y"], ["x", "y"]]),
   39:     )
   40: 
   41: 
   42: @pytest.fixture
   43: def styler_multi(df_multi):
   44:     return Styler(df_multi, uuid_len=0)
   45: 
   46: 
   47: def test_display_format(styler):
   48:     ctx = styler.format("{:0.1f}")._translate(True, True)
   49:     assert all(["display_value" in c for c in row] for row in ctx["body"])
   50:     assert all([len(c["display_value"]) <= 3 for c in row[1:]] for row in ctx["body"])
   51:     assert len(ctx["body"][0][1]["display_value"].lstrip("-")) <= 3
   52: 
   53: 
   54: @pytest.mark.parametrize("index", [True, False])
   55: @pytest.mark.parametrize("columns", [True, False])
   56: def test_display_format_index(styler, index, columns):
   57:     exp_index = ["x", "y"]
   58:     if index:
   59:         styler.format_index(lambda v: v.upper(), axis=0)  # test callable
   60:         exp_index = ["X", "Y"]
   61: 
   62:     exp_columns = ["A", "B"]
   63:     if columns:
   64:         styler.format_index("*{}*", axis=1)  # test string
   65:         exp_columns = ["*A*", "*B*"]
   66: 
   67:     ctx = styler._translate(True, True)
   68: 
   69:     for r, row in enumerate(ctx["body"]):
   70:         assert row[0]["display_value"] == exp_index[r]
   71: 
   72:     for c, col in enumerate(ctx["head"][1:]):
   73:         assert col["display_value"] == exp_columns[c]
   74: 
   75: 
   76: def test_format_dict(styler):
   77:     ctx = styler.format({"A": "{:0.1f}", "B": "{0:.2%}"})._translate(True, True)
   78:     assert ctx["body"][0][1]["display_value"] == "0.0"
   79:     assert ctx["body"][0][2]["display_value"] == "-60.90%"
   80: 
   81: 
   82: def test_format_index_dict(styler):
   83:     ctx = styler.format_index({0: lambda v: v.upper()})._translate(True, True)
   84:     for i, val in enumerate(["X", "Y"]):
   85:         assert ctx["body"][i][0]["display_value"] == val
   86: 
   87: 
   88: def test_format_string(styler):
   89:     ctx = styler.format("{:.2f}")._translate(True, True)
   90:     assert ctx["body"][0][1]["display_value"] == "0.00"
   91:     assert ctx["body"][0][2]["display_value"] == "-0.61"
   92:     assert ctx["body"][1][1]["display_value"] == "1.00"
   93:     assert ctx["body"][1][2]["display_value"] == "-1.23"
   94: 
   95: 
   96: def test_format_callable(styler):
   97:     ctx = styler.format(lambda v: "neg" if v < 0 else "pos")._translate(True, True)
   98:     assert ctx["body"][0][1]["display_value"] == "pos"
   99:     assert ctx["body"][0][2]["display_value"] == "neg"
  100:     assert ctx["body"][1][1]["display_value"] == "pos"
  101:     assert ctx["body"][1][2]["display_value"] == "neg"
  102: 
  103: 
  104: def test_format_with_na_rep():
  105:     # GH 21527 28358
  106:     df = DataFrame([[None, None], [1.1, 1.2]], columns=["A", "B"])
  107: 
  108:     ctx = df.style.format(None, na_rep="-")._translate(True, True)
  109:     assert ctx["body"][0][1]["display_value"] == "-"
  110:     assert ctx["body"][0][2]["display_value"] == "-"
  111: 
  112:     ctx = df.style.format("{:.2%}", na_rep="-")._translate(True, True)
  113:     assert ctx["body"][0][1]["display_value"] == "-"
  114:     assert ctx["body"][0][2]["display_value"] == "-"
  115:     assert ctx["body"][1][1]["display_value"] == "110.00%"
  116:     assert ctx["body"][1][2]["display_value"] == "120.00%"
  117: 
  118:     ctx = df.style.format("{:.2%}", na_rep="-", subset=["B"])._translate(True, True)
  119:     assert ctx["body"][0][2]["display_value"] == "-"
  120:     assert ctx["body"][1][2]["display_value"] == "120.00%"
  121: 
  122: 
  123: def test_format_index_with_na_rep():
  124:     df = DataFrame([[1, 2, 3, 4, 5]], columns=["A", None, np.nan, NaT, NA])
  125:     ctx = df.style.format_index(None, na_rep="--", axis=1)._translate(True, True)
  126:     assert ctx["head"][0][1]["display_value"] == "A"
  127:     for i in [2, 3, 4, 5]:
  128:         assert ctx["head"][0][i]["display_value"] == "--"
  129: 
  130: 
  131: def test_format_non_numeric_na():
  132:     # GH 21527 28358
  133:     df = DataFrame(
  134:         {
  135:             "object": [None, np.nan, "foo"],
  136:             "datetime": [None, NaT, Timestamp("20120101")],
  137:         }
  138:     )
  139:     ctx = df.style.format(None, na_rep="-")._translate(True, True)
  140:     assert ctx["body"][0][1]["display_value"] == "-"
  141:     assert ctx["body"][0][2]["display_value"] == "-"
  142:     assert ctx["body"][1][1]["display_value"] == "-"
  143:     assert ctx["body"][1][2]["display_value"] == "-"
  144: 
  145: 
  146: @pytest.mark.parametrize(
  147:     "func, attr, kwargs",
  148:     [
  149:         ("format", "_display_funcs", {}),
  150:         ("format_index", "_display_funcs_index", {"axis": 0}),
  151:         ("format_index", "_display_funcs_columns", {"axis": 1}),
  152:     ],
  153: )
  154: def test_format_clear(styler, func, attr, kwargs):
  155:     assert (0, 0) not in getattr(styler, attr)  # using default
  156:     getattr(styler, func)("{:.2f}", **kwargs)
  157:     assert (0, 0) in getattr(styler, attr)  # formatter is specified
  158:     getattr(styler, func)(**kwargs)
  159:     assert (0, 0) not in getattr(styler, attr)  # formatter cleared to default
  160: 
  161: 
  162: @pytest.mark.parametrize(
  163:     "escape, exp",
  164:     [
  165:         ("html", "&lt;&gt;&amp;&#34;%$#_{}~^\\~ ^ \\ "),
  166:         (
  167:             "latex",
  168:             '<>\\&"\\%\\$\\#\\_\\{\\}\\textasciitilde \\textasciicircum '
  169:             "\\textbackslash \\textasciitilde \\space \\textasciicircum \\space "
  170:             "\\textbackslash \\space ",
  171:         ),
  172:     ],
  173: )
  174: def test_format_escape_html(escape, exp):
  175:     chars = '<>&"%$#_{}~^\\~ ^ \\ '
  176:     df = DataFrame([[chars]])
  177: 
  178:     s = Styler(df, uuid_len=0).format("&{0}&", escape=None)
  179:     expected = f'<td id="T__row0_col0" class="data row0 col0" >&{chars}&</td>'
  180:     assert expected in s.to_html()
  181: 
  182:     # only the value should be escaped before passing to the formatter
  183:     s = Styler(df, uuid_len=0).format("&{0}&", escape=escape)
  184:     expected = f'<td id="T__row0_col0" class="data row0 col0" >&{exp}&</td>'
  185:     assert expected in s.to_html()
  186: 
  187:     # also test format_index()
  188:     styler = Styler(DataFrame(columns=[chars]), uuid_len=0)
  189:     styler.format_index("&{0}&", escape=None, axis=1)
  190:     assert styler._translate(True, True)["head"][0][1]["display_value"] == f"&{chars}&"
  191:     styler.format_index("&{0}&", escape=escape, axis=1)
  192:     assert styler._translate(True, True)["head"][0][1]["display_value"] == f"&{exp}&"
  193: 
  194: 
  195: @pytest.mark.parametrize(
  196:     "chars, expected",
  197:     [
  198:         (
  199:             r"$ \$&%#_{}~^\ $ &%#_{}~^\ $",
  200:             "".join(
  201:                 [
  202:                     r"$ \$&%#_{}~^\ $ ",
  203:                     r"\&\%\#\_\{\}\textasciitilde \textasciicircum ",
  204:                     r"\textbackslash \space \$",
  205:                 ]
  206:             ),
  207:         ),
  208:         (
  209:             r"\( &%#_{}~^\ \) &%#_{}~^\ \(",
  210:             "".join(
  211:                 [
  212:                     r"\( &%#_{}~^\ \) ",
  213:                     r"\&\%\#\_\{\}\textasciitilde \textasciicircum ",
  214:                     r"\textbackslash \space \textbackslash (",
  215:                 ]
  216:             ),
  217:         ),
  218:         (
  219:             r"$\&%#_{}^\$",
  220:             r"\$\textbackslash \&\%\#\_\{\}\textasciicircum \textbackslash \$",
  221:         ),
  222:         (
  223:             r"$ \frac{1}{2} $ \( \frac{1}{2} \)",
  224:             "".join(
  225:                 [
  226:                     r"$ \frac{1}{2} $",
  227:                     r" \textbackslash ( \textbackslash frac\{1\}\{2\} \textbackslash )",
  228:                 ]
  229:             ),
  230:         ),
  231:     ],
  232: )
  233: def test_format_escape_latex_math(chars, expected):
  234:     # GH 51903
  235:     # latex-math escape works for each DataFrame cell separately. If we have
  236:     # a combination of dollar signs and brackets, the dollar sign would apply.
  237:     df = DataFrame([[chars]])
  238:     s = df.style.format("{0}", escape="latex-math")
  239:     assert s._translate(True, True)["body"][0][1]["display_value"] == expected
  240: 
  241: 
  242: def test_format_escape_na_rep():
  243:     # tests the na_rep is not escaped
  244:     df = DataFrame([['<>&"', None]])
  245:     s = Styler(df, uuid_len=0).format("X&{0}>X", escape="html", na_rep="&")
  246:     ex = '<td id="T__row0_col0" class="data row0 col0" >X&&lt;&gt;&amp;&#34;>X</td>'
  247:     expected2 = '<td id="T__row0_col1" class="data row0 col1" >&</td>'
  248:     assert ex in s.to_html()
  249:     assert expected2 in s.to_html()
  250: 
  251:     # also test for format_index()
  252:     df = DataFrame(columns=['<>&"', None])
  253:     styler = Styler(df, uuid_len=0)
  254:     styler.format_index("X&{0}>X", escape="html", na_rep="&", axis=1)
  255:     ctx = styler._translate(True, True)
  256:     assert ctx["head"][0][1]["display_value"] == "X&&lt;&gt;&amp;&#34;>X"
  257:     assert ctx["head"][0][2]["display_value"] == "&"
  258: 
  259: 
  260: def test_format_escape_floats(styler):
  261:     # test given formatter for number format is not impacted by escape
  262:     s = styler.format("{:.1f}", escape="html")
  263:     for expected in [">0.0<", ">1.0<", ">-1.2<", ">-0.6<"]:
  264:         assert expected in s.to_html()
  265:     # tests precision of floats is not impacted by escape
  266:     s = styler.format(precision=1, escape="html")
  267:     for expected in [">0<", ">1<", ">-1.2<", ">-0.6<"]:
  268:         assert expected in s.to_html()
  269: 
  270: 
  271: @pytest.mark.parametrize("formatter", [5, True, [2.0]])
  272: @pytest.mark.parametrize("func", ["format", "format_index"])
  273: def test_format_raises(styler, formatter, func):
  274:     with pytest.raises(TypeError, match="expected str or callable"):
  275:         getattr(styler, func)(formatter)
  276: 
  277: 
  278: @pytest.mark.parametrize(
  279:     "precision, expected",
  280:     [
  281:         (1, ["1.0", "2.0", "3.2", "4.6"]),
  282:         (2, ["1.00", "2.01", "3.21", "4.57"]),
  283:         (3, ["1.000", "2.009", "3.212", "4.566"]),
  284:     ],
  285: )
  286: def test_format_with_precision(precision, expected):
  287:     # Issue #13257
  288:     df = DataFrame([[1.0, 2.0090, 3.2121, 4.566]], columns=[1.0, 2.0090, 3.2121, 4.566])
  289:     styler = Styler(df)
  290:     styler.format(precision=precision)
  291:     styler.format_index(precision=precision, axis=1)
  292: 
  293:     ctx = styler._translate(True, True)
  294:     for col, exp in enumerate(expected):
  295:         assert ctx["body"][0][col + 1]["display_value"] == exp  # format test
  296:         assert ctx["head"][0][col + 1]["display_value"] == exp  # format_index test
  297: 
  298: 
  299: @pytest.mark.parametrize("axis", [0, 1])
  300: @pytest.mark.parametrize(
  301:     "level, expected",
  302:     [
  303:         (0, ["X", "X", "_", "_"]),  # level int
  304:         ("zero", ["X", "X", "_", "_"]),  # level name
  305:         (1, ["_", "_", "X", "X"]),  # other level int
  306:         ("one", ["_", "_", "X", "X"]),  # other level name
  307:         ([0, 1], ["X", "X", "X", "X"]),  # both levels
  308:         ([0, "zero"], ["X", "X", "_", "_"]),  # level int and name simultaneous
  309:         ([0, "one"], ["X", "X", "X", "X"]),  # both levels as int and name
  310:         (["one", "zero"], ["X", "X", "X", "X"]),  # both level names, reversed
  311:     ],
  312: )
  313: def test_format_index_level(axis, level, expected):
  314:     midx = MultiIndex.from_arrays([["_", "_"], ["_", "_"]], names=["zero", "one"])
  315:     df = DataFrame([[1, 2], [3, 4]])
  316:     if axis == 0:
  317:         df.index = midx
  318:     else:
  319:         df.columns = midx
  320: 
  321:     styler = df.style.format_index(lambda v: "X", level=level, axis=axis)
  322:     ctx = styler._translate(True, True)
  323: 
  324:     if axis == 0:  # compare index
  325:         result = [ctx["body"][s][0]["display_value"] for s in range(2)]
  326:         result += [ctx["body"][s][1]["display_value"] for s in range(2)]
  327:     else:  # compare columns
  328:         result = [ctx["head"][0][s + 1]["display_value"] for s in range(2)]
  329:         result += [ctx["head"][1][s + 1]["display_value"] for s in range(2)]
  330: 
  331:     assert expected == result
  332: 
  333: 
  334: def test_format_subset():
  335:     df = DataFrame([[0.1234, 0.1234], [1.1234, 1.1234]], columns=["a", "b"])
  336:     ctx = df.style.format(
  337:         {"a": "{:0.1f}", "b": "{0:.2%}"}, subset=IndexSlice[0, :]
  338:     )._translate(True, True)
  339:     expected = "0.1"
  340:     raw_11 = "1.123400"
  341:     assert ctx["body"][0][1]["display_value"] == expected
  342:     assert ctx["body"][1][1]["display_value"] == raw_11
  343:     assert ctx["body"][0][2]["display_value"] == "12.34%"
  344: 
  345:     ctx = df.style.format("{:0.1f}", subset=IndexSlice[0, :])._translate(True, True)
  346:     assert ctx["body"][0][1]["display_value"] == expected
  347:     assert ctx["body"][1][1]["display_value"] == raw_11
  348: 
  349:     ctx = df.style.format("{:0.1f}", subset=IndexSlice["a"])._translate(True, True)
  350:     assert ctx["body"][0][1]["display_value"] == expected
  351:     assert ctx["body"][0][2]["display_value"] == "0.123400"
  352: 
  353:     ctx = df.style.format("{:0.1f}", subset=IndexSlice[0, "a"])._translate(True, True)
  354:     assert ctx["body"][0][1]["display_value"] == expected
  355:     assert ctx["body"][1][1]["display_value"] == raw_11
  356: 
  357:     ctx = df.style.format("{:0.1f}", subset=IndexSlice[[0, 1], ["a"]])._translate(
  358:         True, True
  359:     )
  360:     assert ctx["body"][0][1]["display_value"] == expected
  361:     assert ctx["body"][1][1]["display_value"] == "1.1"
  362:     assert ctx["body"][0][2]["display_value"] == "0.123400"
  363:     assert ctx["body"][1][2]["display_value"] == raw_11
  364: 
  365: 
  366: @pytest.mark.parametrize("formatter", [None, "{:,.1f}"])
  367: @pytest.mark.parametrize("decimal", [".", "*"])
  368: @pytest.mark.parametrize("precision", [None, 2])
  369: @pytest.mark.parametrize("func, col", [("format", 1), ("format_index", 0)])
  370: def test_format_thousands(formatter, decimal, precision, func, col):
  371:     styler = DataFrame([[1000000.123456789]], index=[1000000.123456789]).style
  372:     result = getattr(styler, func)(  # testing float
  373:         thousands="_", formatter=formatter, decimal=decimal, precision=precision
  374:     )._translate(True, True)
  375:     assert "1_000_000" in result["body"][0][col]["display_value"]
  376: 
  377:     styler = DataFrame([[1000000]], index=[1000000]).style
  378:     result = getattr(styler, func)(  # testing int
  379:         thousands="_", formatter=formatter, decimal=decimal, precision=precision
  380:     )._translate(True, True)
  381:     assert "1_000_000" in result["body"][0][col]["display_value"]
  382: 
  383:     styler = DataFrame([[1 + 1000000.123456789j]], index=[1 + 1000000.123456789j]).style
  384:     result = getattr(styler, func)(  # testing complex
  385:         thousands="_", formatter=formatter, decimal=decimal, precision=precision
  386:     )._translate(True, True)
  387:     assert "1_000_000" in result["body"][0][col]["display_value"]
  388: 
  389: 
  390: @pytest.mark.parametrize("formatter", [None, "{:,.4f}"])
  391: @pytest.mark.parametrize("thousands", [None, ",", "*"])
  392: @pytest.mark.parametrize("precision", [None, 4])
  393: @pytest.mark.parametrize("func, col", [("format", 1), ("format_index", 0)])
  394: def test_format_decimal(formatter, thousands, precision, func, col):
  395:     styler = DataFrame([[1000000.123456789]], index=[1000000.123456789]).style
  396:     result = getattr(styler, func)(  # testing float
  397:         decimal="_", formatter=formatter, thousands=thousands, precision=precision
  398:     )._translate(True, True)
  399:     assert "000_123" in result["body"][0][col]["display_value"]
  400: 
  401:     styler = DataFrame([[1 + 1000000.123456789j]], index=[1 + 1000000.123456789j]).style
  402:     result = getattr(styler, func)(  # testing complex
  403:         decimal="_", formatter=formatter, thousands=thousands, precision=precision
  404:     )._translate(True, True)
  405:     assert "000_123" in result["body"][0][col]["display_value"]
  406: 
  407: 
  408: def test_str_escape_error():
  409:     msg = "`escape` only permitted in {'html', 'latex', 'latex-math'}, got "
  410:     with pytest.raises(ValueError, match=msg):
  411:         _str_escape("text", "bad_escape")
  412: 
  413:     with pytest.raises(ValueError, match=msg):
  414:         _str_escape("text", [])
  415: 
  416:     _str_escape(2.00, "bad_escape")  # OK since dtype is float
  417: 
  418: 
  419: def test_long_int_formatting():
  420:     df = DataFrame(data=[[1234567890123456789]], columns=["test"])
  421:     styler = df.style
  422:     ctx = styler._translate(True, True)
  423:     assert ctx["body"][0][1]["display_value"] == "1234567890123456789"
  424: 
  425:     styler = df.style.format(thousands="_")
  426:     ctx = styler._translate(True, True)
  427:     assert ctx["body"][0][1]["display_value"] == "1_234_567_890_123_456_789"
  428: 
  429: 
  430: def test_format_options():
  431:     df = DataFrame({"int": [2000, 1], "float": [1.009, None], "str": ["&<", "&~"]})
  432:     ctx = df.style._translate(True, True)
  433: 
  434:     # test option: na_rep
  435:     assert ctx["body"][1][2]["display_value"] == "nan"
  436:     with option_context("styler.format.na_rep", "MISSING"):
  437:         ctx_with_op = df.style._translate(True, True)
  438:         assert ctx_with_op["body"][1][2]["display_value"] == "MISSING"
  439: 
  440:     # test option: decimal and precision
  441:     assert ctx["body"][0][2]["display_value"] == "1.009000"
  442:     with option_context("styler.format.decimal", "_"):
  443:         ctx_with_op = df.style._translate(True, True)
  444:         assert ctx_with_op["body"][0][2]["display_value"] == "1_009000"
  445:     with option_context("styler.format.precision", 2):
  446:         ctx_with_op = df.style._translate(True, True)
  447:         assert ctx_with_op["body"][0][2]["display_value"] == "1.01"
  448: 
  449:     # test option: thousands
  450:     assert ctx["body"][0][1]["display_value"] == "2000"
  451:     with option_context("styler.format.thousands", "_"):
  452:         ctx_with_op = df.style._translate(True, True)
  453:         assert ctx_with_op["body"][0][1]["display_value"] == "2_000"
  454: 
  455:     # test option: escape
  456:     assert ctx["body"][0][3]["display_value"] == "&<"
  457:     assert ctx["body"][1][3]["display_value"] == "&~"
  458:     with option_context("styler.format.escape", "html"):
  459:         ctx_with_op = df.style._translate(True, True)
  460:         assert ctx_with_op["body"][0][3]["display_value"] == "&amp;&lt;"
  461:     with option_context("styler.format.escape", "latex"):
  462:         ctx_with_op = df.style._translate(True, True)
  463:         assert ctx_with_op["body"][1][3]["display_value"] == "\\&\\textasciitilde "
  464:     with option_context("styler.format.escape", "latex-math"):
  465:         ctx_with_op = df.style._translate(True, True)
  466:         assert ctx_with_op["body"][1][3]["display_value"] == "\\&\\textasciitilde "
  467: 
  468:     # test option: formatter
  469:     with option_context("styler.format.formatter", {"int": "{:,.2f}"}):
  470:         ctx_with_op = df.style._translate(True, True)
  471:         assert ctx_with_op["body"][0][1]["display_value"] == "2,000.00"
  472: 
  473: 
  474: def test_precision_zero(df):
  475:     styler = Styler(df, precision=0)
  476:     ctx = styler._translate(True, True)
  477:     assert ctx["body"][0][2]["display_value"] == "-1"
  478:     assert ctx["body"][1][2]["display_value"] == "-1"
  479: 
  480: 
  481: @pytest.mark.parametrize(
  482:     "formatter, exp",
  483:     [
  484:         (lambda x: f"{x:.3f}", "9.000"),
  485:         ("{:.2f}", "9.00"),
  486:         ({0: "{:.1f}"}, "9.0"),
  487:         (None, "9"),
  488:     ],
  489: )
  490: def test_formatter_options_validator(formatter, exp):
  491:     df = DataFrame([[9]])
  492:     with option_context("styler.format.formatter", formatter):
  493:         assert f" {exp} " in df.style.to_latex()
  494: 
  495: 
  496: def test_formatter_options_raises():
  497:     msg = "Value must be an instance of"
  498:     with pytest.raises(ValueError, match=msg):
  499:         with option_context("styler.format.formatter", ["bad", "type"]):
  500:             DataFrame().style.to_latex()
  501: 
  502: 
  503: def test_1level_multiindex():
  504:     # GH 43383
  505:     midx = MultiIndex.from_product([[1, 2]], names=[""])
  506:     df = DataFrame(-1, index=midx, columns=[0, 1])
  507:     ctx = df.style._translate(True, True)
  508:     assert ctx["body"][0][0]["display_value"] == "1"
  509:     assert ctx["body"][0][0]["is_visible"] is True
  510:     assert ctx["body"][1][0]["display_value"] == "2"
  511:     assert ctx["body"][1][0]["is_visible"] is True
  512: 
  513: 
  514: def test_boolean_format():
  515:     # gh 46384: booleans do not collapse to integer representation on display
  516:     df = DataFrame([[True, False]])
  517:     ctx = df.style._translate(True, True)
  518:     assert ctx["body"][0][1]["display_value"] is True
  519:     assert ctx["body"][0][2]["display_value"] is False
  520: 
  521: 
  522: @pytest.mark.parametrize(
  523:     "hide, labels",
  524:     [
  525:         (False, [1, 2]),
  526:         (True, [1, 2, 3, 4]),
  527:     ],
  528: )
  529: def test_relabel_raise_length(styler_multi, hide, labels):
  530:     if hide:
  531:         styler_multi.hide(axis=0, subset=[("X", "x"), ("Y", "y")])
  532:     with pytest.raises(ValueError, match="``labels`` must be of length equal"):
  533:         styler_multi.relabel_index(labels=labels)
  534: 
  535: 
  536: def test_relabel_index(styler_multi):
  537:     labels = [(1, 2), (3, 4)]
  538:     styler_multi.hide(axis=0, subset=[("X", "x"), ("Y", "y")])
  539:     styler_multi.relabel_index(labels=labels)
  540:     ctx = styler_multi._translate(True, True)
  541:     assert {"value": "X", "display_value": 1}.items() <= ctx["body"][0][0].items()
  542:     assert {"value": "y", "display_value": 2}.items() <= ctx["body"][0][1].items()
  543:     assert {"value": "Y", "display_value": 3}.items() <= ctx["body"][1][0].items()
  544:     assert {"value": "x", "display_value": 4}.items() <= ctx["body"][1][1].items()
  545: 
  546: 
  547: def test_relabel_columns(styler_multi):
  548:     labels = [(1, 2), (3, 4)]
  549:     styler_multi.hide(axis=1, subset=[("A", "a"), ("B", "b")])
  550:     styler_multi.relabel_index(axis=1, labels=labels)
  551:     ctx = styler_multi._translate(True, True)
  552:     assert {"value": "A", "display_value": 1}.items() <= ctx["head"][0][3].items()
  553:     assert {"value": "B", "display_value": 3}.items() <= ctx["head"][0][4].items()
  554:     assert {"value": "b", "display_value": 2}.items() <= ctx["head"][1][3].items()
  555:     assert {"value": "a", "display_value": 4}.items() <= ctx["head"][1][4].items()
  556: 
  557: 
  558: def test_relabel_roundtrip(styler):
  559:     styler.relabel_index(["{}", "{}"])
  560:     ctx = styler._translate(True, True)
  561:     assert {"value": "x", "display_value": "x"}.items() <= ctx["body"][0][0].items()
  562:     assert {"value": "y", "display_value": "y"}.items() <= ctx["body"][1][0].items()
