    1: import functools
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas.compat import is_platform_windows
    7: 
    8: import pandas as pd
    9: import pandas._testing as tm
   10: 
   11: pytest.importorskip("odf")
   12: 
   13: if is_platform_windows():
   14:     pytestmark = pytest.mark.single_cpu
   15: 
   16: 
   17: @pytest.fixture(autouse=True)
   18: def cd_and_set_engine(monkeypatch, datapath):
   19:     func = functools.partial(pd.read_excel, engine="odf")
   20:     monkeypatch.setattr(pd, "read_excel", func)
   21:     monkeypatch.chdir(datapath("io", "data", "excel"))
   22: 
   23: 
   24: def test_read_invalid_types_raises():
   25:     # the invalid_value_type.ods required manually editing
   26:     # of the included content.xml file
   27:     with pytest.raises(ValueError, match="Unrecognized type awesome_new_type"):
   28:         pd.read_excel("invalid_value_type.ods")
   29: 
   30: 
   31: def test_read_writer_table():
   32:     # Also test reading tables from an text OpenDocument file
   33:     # (.odt)
   34:     index = pd.Index(["Row 1", "Row 2", "Row 3"], name="Header")
   35:     expected = pd.DataFrame(
   36:         [[1, np.nan, 7], [2, np.nan, 8], [3, np.nan, 9]],
   37:         index=index,
   38:         columns=["Column 1", "Unnamed: 2", "Column 3"],
   39:     )
   40: 
   41:     result = pd.read_excel("writertable.odt", sheet_name="Table1", index_col=0)
   42: 
   43:     tm.assert_frame_equal(result, expected)
   44: 
   45: 
   46: def test_read_newlines_between_xml_elements_table():
   47:     # GH#45598
   48:     expected = pd.DataFrame(
   49:         [[1.0, 4.0, 7], [np.nan, np.nan, 8], [3.0, 6.0, 9]],
   50:         columns=["Column 1", "Column 2", "Column 3"],
   51:     )
   52: 
   53:     result = pd.read_excel("test_newlines.ods")
   54: 
   55:     tm.assert_frame_equal(result, expected)
   56: 
   57: 
   58: def test_read_unempty_cells():
   59:     expected = pd.DataFrame(
   60:         [1, np.nan, 3, np.nan, 5],
   61:         columns=["Column 1"],
   62:     )
   63: 
   64:     result = pd.read_excel("test_unempty_cells.ods")
   65: 
   66:     tm.assert_frame_equal(result, expected)
   67: 
   68: 
   69: def test_read_cell_annotation():
   70:     expected = pd.DataFrame(
   71:         ["test", np.nan, "test 3"],
   72:         columns=["Column 1"],
   73:     )
   74: 
   75:     result = pd.read_excel("test_cell_annotation.ods")
   76: 
   77:     tm.assert_frame_equal(result, expected)
