    1: import contextlib
    2: import time
    3: 
    4: import numpy as np
    5: import pytest
    6: 
    7: from pandas.compat import is_platform_windows
    8: import pandas.util._test_decorators as td
    9: 
   10: from pandas import (
   11:     DataFrame,
   12:     read_excel,
   13: )
   14: import pandas._testing as tm
   15: 
   16: from pandas.io.excel import ExcelWriter
   17: from pandas.io.formats.excel import ExcelFormatter
   18: 
   19: pytest.importorskip("jinja2")
   20: # jinja2 is currently required for Styler.__init__(). Technically Styler.to_excel
   21: # could compute styles and render to excel without jinja2, since there is no
   22: # 'template' file, but this needs the import error to delayed until render time.
   23: 
   24: if is_platform_windows():
   25:     pytestmark = pytest.mark.single_cpu
   26: 
   27: 
   28: def assert_equal_cell_styles(cell1, cell2):
   29:     # TODO: should find a better way to check equality
   30:     assert cell1.alignment.__dict__ == cell2.alignment.__dict__
   31:     assert cell1.border.__dict__ == cell2.border.__dict__
   32:     assert cell1.fill.__dict__ == cell2.fill.__dict__
   33:     assert cell1.font.__dict__ == cell2.font.__dict__
   34:     assert cell1.number_format == cell2.number_format
   35:     assert cell1.protection.__dict__ == cell2.protection.__dict__
   36: 
   37: 
   38: @pytest.mark.parametrize(
   39:     "engine",
   40:     ["xlsxwriter", "openpyxl"],
   41: )
   42: def test_styler_to_excel_unstyled(engine):
   43:     # compare DataFrame.to_excel and Styler.to_excel when no styles applied
   44:     pytest.importorskip(engine)
   45:     df = DataFrame(np.random.default_rng(2).standard_normal((2, 2)))
   46:     with tm.ensure_clean(".xlsx") as path:
   47:         with ExcelWriter(path, engine=engine) as writer:
   48:             df.to_excel(writer, sheet_name="dataframe")
   49:             df.style.to_excel(writer, sheet_name="unstyled")
   50: 
   51:         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
   52:         with contextlib.closing(openpyxl.load_workbook(path)) as wb:
   53:             for col1, col2 in zip(wb["dataframe"].columns, wb["unstyled"].columns):
   54:                 assert len(col1) == len(col2)
   55:                 for cell1, cell2 in zip(col1, col2):
   56:                     assert cell1.value == cell2.value
   57:                     assert_equal_cell_styles(cell1, cell2)
   58: 
   59: 
   60: shared_style_params = [
   61:     (
   62:         "background-color: #111222",
   63:         ["fill", "fgColor", "rgb"],
   64:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
   65:     ),
   66:     (
   67:         "color: #111222",
   68:         ["font", "color", "value"],
   69:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
   70:     ),
   71:     ("font-family: Arial;", ["font", "name"], "arial"),
   72:     ("font-weight: bold;", ["font", "b"], True),
   73:     ("font-style: italic;", ["font", "i"], True),
   74:     ("text-decoration: underline;", ["font", "u"], "single"),
   75:     ("number-format: $??,???.00;", ["number_format"], "$??,???.00"),
   76:     ("text-align: left;", ["alignment", "horizontal"], "left"),
   77:     (
   78:         "vertical-align: bottom;",
   79:         ["alignment", "vertical"],
   80:         {"xlsxwriter": None, "openpyxl": "bottom"},  # xlsxwriter Fails
   81:     ),
   82:     ("vertical-align: middle;", ["alignment", "vertical"], "center"),
   83:     # Border widths
   84:     ("border-left: 2pt solid red", ["border", "left", "style"], "medium"),
   85:     ("border-left: 1pt dotted red", ["border", "left", "style"], "dotted"),
   86:     ("border-left: 2pt dotted red", ["border", "left", "style"], "mediumDashDotDot"),
   87:     ("border-left: 1pt dashed red", ["border", "left", "style"], "dashed"),
   88:     ("border-left: 2pt dashed red", ["border", "left", "style"], "mediumDashed"),
   89:     ("border-left: 1pt solid red", ["border", "left", "style"], "thin"),
   90:     ("border-left: 3pt solid red", ["border", "left", "style"], "thick"),
   91:     # Border expansion
   92:     (
   93:         "border-left: 2pt solid #111222",
   94:         ["border", "left", "color", "rgb"],
   95:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
   96:     ),
   97:     ("border: 1pt solid red", ["border", "top", "style"], "thin"),
   98:     (
   99:         "border: 1pt solid #111222",
  100:         ["border", "top", "color", "rgb"],
  101:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
  102:     ),
  103:     ("border: 1pt solid red", ["border", "right", "style"], "thin"),
  104:     (
  105:         "border: 1pt solid #111222",
  106:         ["border", "right", "color", "rgb"],
  107:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
  108:     ),
  109:     ("border: 1pt solid red", ["border", "bottom", "style"], "thin"),
  110:     (
  111:         "border: 1pt solid #111222",
  112:         ["border", "bottom", "color", "rgb"],
  113:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
  114:     ),
  115:     ("border: 1pt solid red", ["border", "left", "style"], "thin"),
  116:     (
  117:         "border: 1pt solid #111222",
  118:         ["border", "left", "color", "rgb"],
  119:         {"xlsxwriter": "FF111222", "openpyxl": "00111222"},
  120:     ),
  121:     # Border styles
  122:     (
  123:         "border-left-style: hair; border-left-color: black",
  124:         ["border", "left", "style"],
  125:         "hair",
  126:     ),
  127: ]
  128: 
  129: 
  130: @pytest.mark.parametrize(
  131:     "engine",
  132:     ["xlsxwriter", "openpyxl"],
  133: )
  134: @pytest.mark.parametrize("css, attrs, expected", shared_style_params)
  135: def test_styler_to_excel_basic(engine, css, attrs, expected):
  136:     pytest.importorskip(engine)
  137:     df = DataFrame(np.random.default_rng(2).standard_normal((1, 1)))
  138:     styler = df.style.map(lambda x: css)
  139: 
  140:     with tm.ensure_clean(".xlsx") as path:
  141:         with ExcelWriter(path, engine=engine) as writer:
  142:             df.to_excel(writer, sheet_name="dataframe")
  143:             styler.to_excel(writer, sheet_name="styled")
  144: 
  145:         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
  146:         with contextlib.closing(openpyxl.load_workbook(path)) as wb:
  147:             # test unstyled data cell does not have expected styles
  148:             # test styled cell has expected styles
  149:             u_cell, s_cell = wb["dataframe"].cell(2, 2), wb["styled"].cell(2, 2)
  150:         for attr in attrs:
  151:             u_cell, s_cell = getattr(u_cell, attr, None), getattr(s_cell, attr)
  152: 
  153:         if isinstance(expected, dict):
  154:             assert u_cell is None or u_cell != expected[engine]
  155:             assert s_cell == expected[engine]
  156:         else:
  157:             assert u_cell is None or u_cell != expected
  158:             assert s_cell == expected
  159: 
  160: 
  161: @pytest.mark.parametrize(
  162:     "engine",
  163:     ["xlsxwriter", "openpyxl"],
  164: )
  165: @pytest.mark.parametrize("css, attrs, expected", shared_style_params)
  166: def test_styler_to_excel_basic_indexes(engine, css, attrs, expected):
  167:     pytest.importorskip(engine)
  168:     df = DataFrame(np.random.default_rng(2).standard_normal((1, 1)))
  169: 
  170:     styler = df.style
  171:     styler.map_index(lambda x: css, axis=0)
  172:     styler.map_index(lambda x: css, axis=1)
  173: 
  174:     null_styler = df.style
  175:     null_styler.map(lambda x: "null: css;")
  176:     null_styler.map_index(lambda x: "null: css;", axis=0)
  177:     null_styler.map_index(lambda x: "null: css;", axis=1)
  178: 
  179:     with tm.ensure_clean(".xlsx") as path:
  180:         with ExcelWriter(path, engine=engine) as writer:
  181:             null_styler.to_excel(writer, sheet_name="null_styled")
  182:             styler.to_excel(writer, sheet_name="styled")
  183: 
  184:         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
  185:         with contextlib.closing(openpyxl.load_workbook(path)) as wb:
  186:             # test null styled index cells does not have expected styles
  187:             # test styled cell has expected styles
  188:             ui_cell, si_cell = wb["null_styled"].cell(2, 1), wb["styled"].cell(2, 1)
  189:             uc_cell, sc_cell = wb["null_styled"].cell(1, 2), wb["styled"].cell(1, 2)
  190:         for attr in attrs:
  191:             ui_cell, si_cell = getattr(ui_cell, attr, None), getattr(si_cell, attr)
  192:             uc_cell, sc_cell = getattr(uc_cell, attr, None), getattr(sc_cell, attr)
  193: 
  194:         if isinstance(expected, dict):
  195:             assert ui_cell is None or ui_cell != expected[engine]
  196:             assert si_cell == expected[engine]
  197:             assert uc_cell is None or uc_cell != expected[engine]
  198:             assert sc_cell == expected[engine]
  199:         else:
  200:             assert ui_cell is None or ui_cell != expected
  201:             assert si_cell == expected
  202:             assert uc_cell is None or uc_cell != expected
  203:             assert sc_cell == expected
  204: 
  205: 
  206: # From https://openpyxl.readthedocs.io/en/stable/api/openpyxl.styles.borders.html
  207: # Note: Leaving behavior of "width"-type styles undefined; user should use border-width
  208: # instead
  209: excel_border_styles = [
  210:     # "thin",
  211:     "dashed",
  212:     "mediumDashDot",
  213:     "dashDotDot",
  214:     "hair",
  215:     "dotted",
  216:     "mediumDashDotDot",
  217:     # "medium",
  218:     "double",
  219:     "dashDot",
  220:     "slantDashDot",
  221:     # "thick",
  222:     "mediumDashed",
  223: ]
  224: 
  225: 
  226: @pytest.mark.parametrize(
  227:     "engine",
  228:     ["xlsxwriter", "openpyxl"],
  229: )
  230: @pytest.mark.parametrize("border_style", excel_border_styles)
  231: def test_styler_to_excel_border_style(engine, border_style):
  232:     css = f"border-left: {border_style} black thin"
  233:     attrs = ["border", "left", "style"]
  234:     expected = border_style
  235: 
  236:     pytest.importorskip(engine)
  237:     df = DataFrame(np.random.default_rng(2).standard_normal((1, 1)))
  238:     styler = df.style.map(lambda x: css)
  239: 
  240:     with tm.ensure_clean(".xlsx") as path:
  241:         with ExcelWriter(path, engine=engine) as writer:
  242:             df.to_excel(writer, sheet_name="dataframe")
  243:             styler.to_excel(writer, sheet_name="styled")
  244: 
  245:         openpyxl = pytest.importorskip("openpyxl")  # test loading only with openpyxl
  246:         with contextlib.closing(openpyxl.load_workbook(path)) as wb:
  247:             # test unstyled data cell does not have expected styles
  248:             # test styled cell has expected styles
  249:             u_cell, s_cell = wb["dataframe"].cell(2, 2), wb["styled"].cell(2, 2)
  250:         for attr in attrs:
  251:             u_cell, s_cell = getattr(u_cell, attr, None), getattr(s_cell, attr)
  252: 
  253:         if isinstance(expected, dict):
  254:             assert u_cell is None or u_cell != expected[engine]
  255:             assert s_cell == expected[engine]
  256:         else:
  257:             assert u_cell is None or u_cell != expected
  258:             assert s_cell == expected
  259: 
  260: 
  261: def test_styler_custom_converter():
  262:     openpyxl = pytest.importorskip("openpyxl")
  263: 
  264:     def custom_converter(css):
  265:         return {"font": {"color": {"rgb": "111222"}}}
  266: 
  267:     df = DataFrame(np.random.default_rng(2).standard_normal((1, 1)))
  268:     styler = df.style.map(lambda x: "color: #888999")
  269:     with tm.ensure_clean(".xlsx") as path:
  270:         with ExcelWriter(path, engine="openpyxl") as writer:
  271:             ExcelFormatter(styler, style_converter=custom_converter).write(
  272:                 writer, sheet_name="custom"
  273:             )
  274: 
  275:         with contextlib.closing(openpyxl.load_workbook(path)) as wb:
  276:             assert wb["custom"].cell(2, 2).font.color.value == "00111222"
  277: 
  278: 
  279: @pytest.mark.single_cpu
  280: @td.skip_if_not_us_locale
  281: def test_styler_to_s3(s3_public_bucket, s3so):
  282:     # GH#46381
  283: 
  284:     mock_bucket_name, target_file = s3_public_bucket.name, "test.xlsx"
  285:     df = DataFrame({"x": [1, 2, 3], "y": [2, 4, 6]})
  286:     styler = df.style.set_sticky(axis="index")
  287:     styler.to_excel(f"s3://{mock_bucket_name}/{target_file}", storage_options=s3so)
  288:     timeout = 5
  289:     while True:
  290:         if target_file in (obj.key for obj in s3_public_bucket.objects.all()):
  291:             break
  292:         time.sleep(0.1)
  293:         timeout -= 0.1
  294:         assert timeout > 0, "Timed out waiting for file to appear on moto"
  295:         result = read_excel(
  296:             f"s3://{mock_bucket_name}/{target_file}", index_col=0, storage_options=s3so
  297:         )
  298:         tm.assert_frame_equal(result, df)
