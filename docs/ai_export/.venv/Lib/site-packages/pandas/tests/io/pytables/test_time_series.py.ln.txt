    1: import datetime
    2: 
    3: import numpy as np
    4: import pytest
    5: 
    6: from pandas import (
    7:     DataFrame,
    8:     DatetimeIndex,
    9:     Series,
   10:     _testing as tm,
   11:     date_range,
   12:     period_range,
   13: )
   14: from pandas.tests.io.pytables.common import ensure_clean_store
   15: 
   16: pytestmark = pytest.mark.single_cpu
   17: 
   18: 
   19: @pytest.mark.parametrize("unit", ["us", "ns"])
   20: def test_store_datetime_fractional_secs(setup_path, unit):
   21:     dt = datetime.datetime(2012, 1, 2, 3, 4, 5, 123456)
   22:     dti = DatetimeIndex([dt], dtype=f"M8[{unit}]")
   23:     series = Series([0], index=dti)
   24:     with ensure_clean_store(setup_path) as store:
   25:         store["a"] = series
   26:         assert store["a"].index[0] == dt
   27: 
   28: 
   29: @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
   30: def test_tseries_indices_series(setup_path):
   31:     with ensure_clean_store(setup_path) as store:
   32:         idx = date_range("2020-01-01", periods=10)
   33:         ser = Series(np.random.default_rng(2).standard_normal(len(idx)), idx)
   34:         store["a"] = ser
   35:         result = store["a"]
   36: 
   37:         tm.assert_series_equal(result, ser)
   38:         assert result.index.freq == ser.index.freq
   39:         tm.assert_class_equal(result.index, ser.index, obj="series index")
   40: 
   41:         idx = period_range("2020-01-01", periods=10, freq="D")
   42:         ser = Series(np.random.default_rng(2).standard_normal(len(idx)), idx)
   43:         store["a"] = ser
   44:         result = store["a"]
   45: 
   46:         tm.assert_series_equal(result, ser)
   47:         assert result.index.freq == ser.index.freq
   48:         tm.assert_class_equal(result.index, ser.index, obj="series index")
   49: 
   50: 
   51: @pytest.mark.filterwarnings(r"ignore:PeriodDtype\[B\] is deprecated:FutureWarning")
   52: def test_tseries_indices_frame(setup_path):
   53:     with ensure_clean_store(setup_path) as store:
   54:         idx = date_range("2020-01-01", periods=10)
   55:         df = DataFrame(
   56:             np.random.default_rng(2).standard_normal((len(idx), 3)), index=idx
   57:         )
   58:         store["a"] = df
   59:         result = store["a"]
   60: 
   61:         tm.assert_frame_equal(result, df)
   62:         assert result.index.freq == df.index.freq
   63:         tm.assert_class_equal(result.index, df.index, obj="dataframe index")
   64: 
   65:         idx = period_range("2020-01-01", periods=10, freq="D")
   66:         df = DataFrame(np.random.default_rng(2).standard_normal((len(idx), 3)), idx)
   67:         store["a"] = df
   68:         result = store["a"]
   69: 
   70:         tm.assert_frame_equal(result, df)
   71:         assert result.index.freq == df.index.freq
   72:         tm.assert_class_equal(result.index, df.index, obj="dataframe index")
