    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     DataFrame,
    6:     HDFStore,
    7:     Index,
    8:     Series,
    9:     date_range,
   10: )
   11: from pandas.tests.io.pytables.common import (
   12:     ensure_clean_store,
   13:     tables,
   14: )
   15: 
   16: pytestmark = pytest.mark.single_cpu
   17: 
   18: 
   19: def test_keys(setup_path):
   20:     with ensure_clean_store(setup_path) as store:
   21:         store["a"] = Series(
   22:             np.arange(10, dtype=np.float64), index=date_range("2020-01-01", periods=10)
   23:         )
   24:         store["b"] = Series(
   25:             range(10), dtype="float64", index=[f"i_{i}" for i in range(10)]
   26:         )
   27:         store["c"] = DataFrame(
   28:             1.1 * np.arange(120).reshape((30, 4)),
   29:             columns=Index(list("ABCD"), dtype=object),
   30:             index=Index([f"i-{i}" for i in range(30)], dtype=object),
   31:         )
   32: 
   33:         assert len(store) == 3
   34:         expected = {"/a", "/b", "/c"}
   35:         assert set(store.keys()) == expected
   36:         assert set(store) == expected
   37: 
   38: 
   39: def test_non_pandas_keys(tmp_path, setup_path):
   40:     class Table1(tables.IsDescription):
   41:         value1 = tables.Float32Col()
   42: 
   43:     class Table2(tables.IsDescription):
   44:         value2 = tables.Float32Col()
   45: 
   46:     class Table3(tables.IsDescription):
   47:         value3 = tables.Float32Col()
   48: 
   49:     path = tmp_path / setup_path
   50:     with tables.open_file(path, mode="w") as h5file:
   51:         group = h5file.create_group("/", "group")
   52:         h5file.create_table(group, "table1", Table1, "Table 1")
   53:         h5file.create_table(group, "table2", Table2, "Table 2")
   54:         h5file.create_table(group, "table3", Table3, "Table 3")
   55:     with HDFStore(path) as store:
   56:         assert len(store.keys(include="native")) == 3
   57:         expected = {"/group/table1", "/group/table2", "/group/table3"}
   58:         assert set(store.keys(include="native")) == expected
   59:         assert set(store.keys(include="pandas")) == set()
   60:         for name in expected:
   61:             df = store.get(name)
   62:             assert len(df.columns) == 1
   63: 
   64: 
   65: def test_keys_illegal_include_keyword_value(setup_path):
   66:     with ensure_clean_store(setup_path) as store:
   67:         with pytest.raises(
   68:             ValueError,
   69:             match="`include` should be either 'pandas' or 'native' but is 'illegal'",
   70:         ):
   71:             store.keys(include="illegal")
   72: 
   73: 
   74: def test_keys_ignore_hdf_softlink(setup_path):
   75:     # GH 20523
   76:     # Puts a softlink into HDF file and rereads
   77: 
   78:     with ensure_clean_store(setup_path) as store:
   79:         df = DataFrame({"A": range(5), "B": range(5)})
   80:         store.put("df", df)
   81: 
   82:         assert store.keys() == ["/df"]
   83: 
   84:         store._handle.create_soft_link(store._handle.root, "symlink", "df")
   85: 
   86:         # Should ignore the softlink
   87:         assert store.keys() == ["/df"]
