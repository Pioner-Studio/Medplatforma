    1: import locale
    2: 
    3: import pytest
    4: 
    5: from pandas._config import detect_console_encoding
    6: 
    7: 
    8: class MockEncoding:
    9:     """
   10:     Used to add a side effect when accessing the 'encoding' property. If the
   11:     side effect is a str in nature, the value will be returned. Otherwise, the
   12:     side effect should be an exception that will be raised.
   13:     """
   14: 
   15:     def __init__(self, encoding) -> None:
   16:         super().__init__()
   17:         self.val = encoding
   18: 
   19:     @property
   20:     def encoding(self):
   21:         return self.raise_or_return(self.val)
   22: 
   23:     @staticmethod
   24:     def raise_or_return(val):
   25:         if isinstance(val, str):
   26:             return val
   27:         else:
   28:             raise val
   29: 
   30: 
   31: @pytest.mark.parametrize("empty,filled", [["stdin", "stdout"], ["stdout", "stdin"]])
   32: def test_detect_console_encoding_from_stdout_stdin(monkeypatch, empty, filled):
   33:     # Ensures that when sys.stdout.encoding or sys.stdin.encoding is used when
   34:     # they have values filled.
   35:     # GH 21552
   36:     with monkeypatch.context() as context:
   37:         context.setattr(f"sys.{empty}", MockEncoding(""))
   38:         context.setattr(f"sys.{filled}", MockEncoding(filled))
   39:         assert detect_console_encoding() == filled
   40: 
   41: 
   42: @pytest.mark.parametrize("encoding", [AttributeError, OSError, "ascii"])
   43: def test_detect_console_encoding_fallback_to_locale(monkeypatch, encoding):
   44:     # GH 21552
   45:     with monkeypatch.context() as context:
   46:         context.setattr("locale.getpreferredencoding", lambda: "foo")
   47:         context.setattr("sys.stdout", MockEncoding(encoding))
   48:         assert detect_console_encoding() == "foo"
   49: 
   50: 
   51: @pytest.mark.parametrize(
   52:     "std,locale",
   53:     [
   54:         ["ascii", "ascii"],
   55:         ["ascii", locale.Error],
   56:         [AttributeError, "ascii"],
   57:         [AttributeError, locale.Error],
   58:         [OSError, "ascii"],
   59:         [OSError, locale.Error],
   60:     ],
   61: )
   62: def test_detect_console_encoding_fallback_to_default(monkeypatch, std, locale):
   63:     # When both the stdout/stdin encoding and locale preferred encoding checks
   64:     # fail (or return 'ascii', we should default to the sys default encoding.
   65:     # GH 21552
   66:     with monkeypatch.context() as context:
   67:         context.setattr(
   68:             "locale.getpreferredencoding", lambda: MockEncoding.raise_or_return(locale)
   69:         )
   70:         context.setattr("sys.stdout", MockEncoding(std))
   71:         context.setattr("sys.getdefaultencoding", lambda: "sysDefaultEncoding")
   72:         assert detect_console_encoding() == "sysDefaultEncoding"
