    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas import (
    5:     NA,
    6:     DataFrame,
    7:     IndexSlice,
    8: )
    9: 
   10: pytest.importorskip("jinja2")
   11: 
   12: from pandas.io.formats.style import Styler
   13: 
   14: 
   15: @pytest.fixture(params=[(None, "float64"), (NA, "Int64")])
   16: def df(request):
   17:     # GH 45804
   18:     return DataFrame(
   19:         {"A": [0, np.nan, 10], "B": [1, request.param[0], 2]}, dtype=request.param[1]
   20:     )
   21: 
   22: 
   23: @pytest.fixture
   24: def styler(df):
   25:     return Styler(df, uuid_len=0)
   26: 
   27: 
   28: def test_highlight_null(styler):
   29:     result = styler.highlight_null()._compute().ctx
   30:     expected = {
   31:         (1, 0): [("background-color", "red")],
   32:         (1, 1): [("background-color", "red")],
   33:     }
   34:     assert result == expected
   35: 
   36: 
   37: def test_highlight_null_subset(styler):
   38:     # GH 31345
   39:     result = (
   40:         styler.highlight_null(color="red", subset=["A"])
   41:         .highlight_null(color="green", subset=["B"])
   42:         ._compute()
   43:         .ctx
   44:     )
   45:     expected = {
   46:         (1, 0): [("background-color", "red")],
   47:         (1, 1): [("background-color", "green")],
   48:     }
   49:     assert result == expected
   50: 
   51: 
   52: @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
   53: def test_highlight_minmax_basic(df, f):
   54:     expected = {
   55:         (0, 1): [("background-color", "red")],
   56:         # ignores NaN row,
   57:         (2, 0): [("background-color", "red")],
   58:     }
   59:     if f == "highlight_min":
   60:         df = -df
   61:     result = getattr(df.style, f)(axis=1, color="red")._compute().ctx
   62:     assert result == expected
   63: 
   64: 
   65: @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
   66: @pytest.mark.parametrize(
   67:     "kwargs",
   68:     [
   69:         {"axis": None, "color": "red"},  # test axis
   70:         {"axis": 0, "subset": ["A"], "color": "red"},  # test subset and ignores NaN
   71:         {"axis": None, "props": "background-color: red"},  # test props
   72:     ],
   73: )
   74: def test_highlight_minmax_ext(df, f, kwargs):
   75:     expected = {(2, 0): [("background-color", "red")]}
   76:     if f == "highlight_min":
   77:         df = -df
   78:     result = getattr(df.style, f)(**kwargs)._compute().ctx
   79:     assert result == expected
   80: 
   81: 
   82: @pytest.mark.parametrize("f", ["highlight_min", "highlight_max"])
   83: @pytest.mark.parametrize("axis", [None, 0, 1])
   84: def test_highlight_minmax_nulls(f, axis):
   85:     # GH 42750
   86:     expected = {
   87:         (1, 0): [("background-color", "yellow")],
   88:         (1, 1): [("background-color", "yellow")],
   89:     }
   90:     if axis == 1:
   91:         expected.update({(2, 1): [("background-color", "yellow")]})
   92: 
   93:     if f == "highlight_max":
   94:         df = DataFrame({"a": [NA, 1, None], "b": [np.nan, 1, -1]})
   95:     else:
   96:         df = DataFrame({"a": [NA, -1, None], "b": [np.nan, -1, 1]})
   97: 
   98:     result = getattr(df.style, f)(axis=axis)._compute().ctx
   99:     assert result == expected
  100: 
  101: 
  102: @pytest.mark.parametrize(
  103:     "kwargs",
  104:     [
  105:         {"left": 0, "right": 1},  # test basic range
  106:         {"left": 0, "right": 1, "props": "background-color: yellow"},  # test props
  107:         {"left": -100, "right": 100, "subset": IndexSlice[[0, 1], :]},  # test subset
  108:         {"left": 0, "subset": IndexSlice[[0, 1], :]},  # test no right
  109:         {"right": 1},  # test no left
  110:         {"left": [0, 0, 11], "axis": 0},  # test left as sequence
  111:         {"left": DataFrame({"A": [0, 0, 11], "B": [1, 1, 11]}), "axis": None},  # axis
  112:         {"left": 0, "right": [0, 1], "axis": 1},  # test sequence right
  113:     ],
  114: )
  115: def test_highlight_between(styler, kwargs):
  116:     expected = {
  117:         (0, 0): [("background-color", "yellow")],
  118:         (0, 1): [("background-color", "yellow")],
  119:     }
  120:     result = styler.highlight_between(**kwargs)._compute().ctx
  121:     assert result == expected
  122: 
  123: 
  124: @pytest.mark.parametrize(
  125:     "arg, map, axis",
  126:     [
  127:         ("left", [1, 2], 0),  # 0 axis has 3 elements not 2
  128:         ("left", [1, 2, 3], 1),  # 1 axis has 2 elements not 3
  129:         ("left", np.array([[1, 2], [1, 2]]), None),  # df is (2,3) not (2,2)
  130:         ("right", [1, 2], 0),  # same tests as above for 'right' not 'left'
  131:         ("right", [1, 2, 3], 1),  # ..
  132:         ("right", np.array([[1, 2], [1, 2]]), None),  # ..
  133:     ],
  134: )
  135: def test_highlight_between_raises(arg, styler, map, axis):
  136:     msg = f"supplied '{arg}' is not correct shape"
  137:     with pytest.raises(ValueError, match=msg):
  138:         styler.highlight_between(**{arg: map, "axis": axis})._compute()
  139: 
  140: 
  141: def test_highlight_between_raises2(styler):
  142:     msg = "values can be 'both', 'left', 'right', or 'neither'"
  143:     with pytest.raises(ValueError, match=msg):
  144:         styler.highlight_between(inclusive="badstring")._compute()
  145: 
  146:     with pytest.raises(ValueError, match=msg):
  147:         styler.highlight_between(inclusive=1)._compute()
  148: 
  149: 
  150: @pytest.mark.parametrize(
  151:     "inclusive, expected",
  152:     [
  153:         (
  154:             "both",
  155:             {
  156:                 (0, 0): [("background-color", "yellow")],
  157:                 (0, 1): [("background-color", "yellow")],
  158:             },
  159:         ),
  160:         ("neither", {}),
  161:         ("left", {(0, 0): [("background-color", "yellow")]}),
  162:         ("right", {(0, 1): [("background-color", "yellow")]}),
  163:     ],
  164: )
  165: def test_highlight_between_inclusive(styler, inclusive, expected):
  166:     kwargs = {"left": 0, "right": 1, "subset": IndexSlice[[0, 1], :]}
  167:     result = styler.highlight_between(**kwargs, inclusive=inclusive)._compute()
  168:     assert result.ctx == expected
  169: 
  170: 
  171: @pytest.mark.parametrize(
  172:     "kwargs",
  173:     [
  174:         {"q_left": 0.5, "q_right": 1, "axis": 0},  # base case
  175:         {"q_left": 0.5, "q_right": 1, "axis": None},  # test axis
  176:         {"q_left": 0, "q_right": 1, "subset": IndexSlice[2, :]},  # test subset
  177:         {"q_left": 0.5, "axis": 0},  # test no high
  178:         {"q_right": 1, "subset": IndexSlice[2, :], "axis": 1},  # test no low
  179:         {"q_left": 0.5, "axis": 0, "props": "background-color: yellow"},  # tst prop
  180:     ],
  181: )
  182: def test_highlight_quantile(styler, kwargs):
  183:     expected = {
  184:         (2, 0): [("background-color", "yellow")],
  185:         (2, 1): [("background-color", "yellow")],
  186:     }
  187:     result = styler.highlight_quantile(**kwargs)._compute().ctx
  188:     assert result == expected
  189: 
  190: 
  191: @pytest.mark.parametrize(
  192:     "f,kwargs",
  193:     [
  194:         ("highlight_min", {"axis": 1, "subset": IndexSlice[1, :]}),
  195:         ("highlight_max", {"axis": 0, "subset": [0]}),
  196:         ("highlight_quantile", {"axis": None, "q_left": 0.6, "q_right": 0.8}),
  197:         ("highlight_between", {"subset": [0]}),
  198:     ],
  199: )
  200: @pytest.mark.parametrize(
  201:     "df",
  202:     [
  203:         DataFrame([[0, 10], [20, 30]], dtype=int),
  204:         DataFrame([[0, 10], [20, 30]], dtype=float),
  205:         DataFrame([[0, 10], [20, 30]], dtype="datetime64[ns]"),
  206:         DataFrame([[0, 10], [20, 30]], dtype=str),
  207:         DataFrame([[0, 10], [20, 30]], dtype="timedelta64[ns]"),
  208:     ],
  209: )
  210: def test_all_highlight_dtypes(f, kwargs, df):
  211:     if f == "highlight_quantile" and isinstance(df.iloc[0, 0], (str)):
  212:         return None  # quantile incompatible with str
  213:     if f == "highlight_between":
  214:         kwargs["left"] = df.iloc[1, 0]  # set the range low for testing
  215: 
  216:     expected = {(1, 0): [("background-color", "yellow")]}
  217:     result = getattr(df.style, f)(**kwargs)._compute().ctx
  218:     assert result == expected
