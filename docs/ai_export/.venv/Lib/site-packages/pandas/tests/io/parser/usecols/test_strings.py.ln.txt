    1: """
    2: Tests the usecols functionality during parsing
    3: for all of the parsers defined in parsers.py
    4: """
    5: from io import StringIO
    6: 
    7: import pytest
    8: 
    9: from pandas import DataFrame
   10: import pandas._testing as tm
   11: 
   12: pytestmark = pytest.mark.filterwarnings(
   13:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   14: )
   15: 
   16: 
   17: def test_usecols_with_unicode_strings(all_parsers):
   18:     # see gh-13219
   19:     data = """AAA,BBB,CCC,DDD
   20: 0.056674973,8,True,a
   21: 2.613230982,2,False,b
   22: 3.568935038,7,False,a"""
   23:     parser = all_parsers
   24: 
   25:     exp_data = {
   26:         "AAA": {
   27:             0: 0.056674972999999997,
   28:             1: 2.6132309819999997,
   29:             2: 3.5689350380000002,
   30:         },
   31:         "BBB": {0: 8, 1: 2, 2: 7},
   32:     }
   33:     expected = DataFrame(exp_data)
   34: 
   35:     result = parser.read_csv(StringIO(data), usecols=["AAA", "BBB"])
   36:     tm.assert_frame_equal(result, expected)
   37: 
   38: 
   39: def test_usecols_with_single_byte_unicode_strings(all_parsers):
   40:     # see gh-13219
   41:     data = """A,B,C,D
   42: 0.056674973,8,True,a
   43: 2.613230982,2,False,b
   44: 3.568935038,7,False,a"""
   45:     parser = all_parsers
   46: 
   47:     exp_data = {
   48:         "A": {
   49:             0: 0.056674972999999997,
   50:             1: 2.6132309819999997,
   51:             2: 3.5689350380000002,
   52:         },
   53:         "B": {0: 8, 1: 2, 2: 7},
   54:     }
   55:     expected = DataFrame(exp_data)
   56: 
   57:     result = parser.read_csv(StringIO(data), usecols=["A", "B"])
   58:     tm.assert_frame_equal(result, expected)
   59: 
   60: 
   61: @pytest.mark.parametrize("usecols", [["AAA", b"BBB"], [b"AAA", "BBB"]])
   62: def test_usecols_with_mixed_encoding_strings(all_parsers, usecols):
   63:     data = """AAA,BBB,CCC,DDD
   64: 0.056674973,8,True,a
   65: 2.613230982,2,False,b
   66: 3.568935038,7,False,a"""
   67:     parser = all_parsers
   68:     _msg_validate_usecols_arg = (
   69:         "'usecols' must either be list-like "
   70:         "of all strings, all unicode, all "
   71:         "integers or a callable."
   72:     )
   73:     with pytest.raises(ValueError, match=_msg_validate_usecols_arg):
   74:         parser.read_csv(StringIO(data), usecols=usecols)
   75: 
   76: 
   77: @pytest.mark.parametrize("usecols", [["гЃ‚гЃ‚гЃ‚", "гЃ„гЃ„"], ["гЃ‚гЃ‚гЃ‚", "гЃ„гЃ„"]])
   78: def test_usecols_with_multi_byte_characters(all_parsers, usecols):
   79:     data = """гЃ‚гЃ‚гЃ‚,гЃ„гЃ„,гЃ†гЃ†гЃ†,гЃ€гЃ€гЃ€гЃ€
   80: 0.056674973,8,True,a
   81: 2.613230982,2,False,b
   82: 3.568935038,7,False,a"""
   83:     parser = all_parsers
   84: 
   85:     exp_data = {
   86:         "гЃ‚гЃ‚гЃ‚": {
   87:             0: 0.056674972999999997,
   88:             1: 2.6132309819999997,
   89:             2: 3.5689350380000002,
   90:         },
   91:         "гЃ„гЃ„": {0: 8, 1: 2, 2: 7},
   92:     }
   93:     expected = DataFrame(exp_data)
   94: 
   95:     result = parser.read_csv(StringIO(data), usecols=usecols)
   96:     tm.assert_frame_equal(result, expected)
