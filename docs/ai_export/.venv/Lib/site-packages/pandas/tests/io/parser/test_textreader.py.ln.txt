    1: """
    2: Tests the TextReader class in parsers.pyx, which
    3: is integral to the C engine in parsers.py
    4: """
    5: from io import (
    6:     BytesIO,
    7:     StringIO,
    8: )
    9: 
   10: import numpy as np
   11: import pytest
   12: 
   13: import pandas._libs.parsers as parser
   14: from pandas._libs.parsers import TextReader
   15: from pandas.errors import ParserWarning
   16: 
   17: from pandas import DataFrame
   18: import pandas._testing as tm
   19: 
   20: from pandas.io.parsers import (
   21:     TextFileReader,
   22:     read_csv,
   23: )
   24: from pandas.io.parsers.c_parser_wrapper import ensure_dtype_objs
   25: 
   26: 
   27: class TestTextReader:
   28:     @pytest.fixture
   29:     def csv_path(self, datapath):
   30:         return datapath("io", "data", "csv", "test1.csv")
   31: 
   32:     def test_file_handle(self, csv_path):
   33:         with open(csv_path, "rb") as f:
   34:             reader = TextReader(f)
   35:             reader.read()
   36: 
   37:     def test_file_handle_mmap(self, csv_path):
   38:         # this was never using memory_map=True
   39:         with open(csv_path, "rb") as f:
   40:             reader = TextReader(f, header=None)
   41:             reader.read()
   42: 
   43:     def test_StringIO(self, csv_path):
   44:         with open(csv_path, "rb") as f:
   45:             text = f.read()
   46:         src = BytesIO(text)
   47:         reader = TextReader(src, header=None)
   48:         reader.read()
   49: 
   50:     def test_string_factorize(self):
   51:         # should this be optional?
   52:         data = "a\nb\na\nb\na"
   53:         reader = TextReader(StringIO(data), header=None)
   54:         result = reader.read()
   55:         assert len(set(map(id, result[0]))) == 2
   56: 
   57:     def test_skipinitialspace(self):
   58:         data = "a,   b\na,   b\na,   b\na,   b"
   59: 
   60:         reader = TextReader(StringIO(data), skipinitialspace=True, header=None)
   61:         result = reader.read()
   62: 
   63:         tm.assert_numpy_array_equal(
   64:             result[0], np.array(["a", "a", "a", "a"], dtype=np.object_)
   65:         )
   66:         tm.assert_numpy_array_equal(
   67:             result[1], np.array(["b", "b", "b", "b"], dtype=np.object_)
   68:         )
   69: 
   70:     def test_parse_booleans(self):
   71:         data = "True\nFalse\nTrue\nTrue"
   72: 
   73:         reader = TextReader(StringIO(data), header=None)
   74:         result = reader.read()
   75: 
   76:         assert result[0].dtype == np.bool_
   77: 
   78:     def test_delimit_whitespace(self):
   79:         data = 'a  b\na\t\t "b"\n"a"\t \t b'
   80: 
   81:         reader = TextReader(StringIO(data), delim_whitespace=True, header=None)
   82:         result = reader.read()
   83: 
   84:         tm.assert_numpy_array_equal(
   85:             result[0], np.array(["a", "a", "a"], dtype=np.object_)
   86:         )
   87:         tm.assert_numpy_array_equal(
   88:             result[1], np.array(["b", "b", "b"], dtype=np.object_)
   89:         )
   90: 
   91:     def test_embedded_newline(self):
   92:         data = 'a\n"hello\nthere"\nthis'
   93: 
   94:         reader = TextReader(StringIO(data), header=None)
   95:         result = reader.read()
   96: 
   97:         expected = np.array(["a", "hello\nthere", "this"], dtype=np.object_)
   98:         tm.assert_numpy_array_equal(result[0], expected)
   99: 
  100:     def test_euro_decimal(self):
  101:         data = "12345,67\n345,678"
  102: 
  103:         reader = TextReader(StringIO(data), delimiter=":", decimal=",", header=None)
  104:         result = reader.read()
  105: 
  106:         expected = np.array([12345.67, 345.678])
  107:         tm.assert_almost_equal(result[0], expected)
  108: 
  109:     def test_integer_thousands(self):
  110:         data = "123,456\n12,500"
  111: 
  112:         reader = TextReader(StringIO(data), delimiter=":", thousands=",", header=None)
  113:         result = reader.read()
  114: 
  115:         expected = np.array([123456, 12500], dtype=np.int64)
  116:         tm.assert_almost_equal(result[0], expected)
  117: 
  118:     def test_integer_thousands_alt(self):
  119:         data = "123.456\n12.500"
  120: 
  121:         reader = TextFileReader(
  122:             StringIO(data), delimiter=":", thousands=".", header=None
  123:         )
  124:         result = reader.read()
  125: 
  126:         expected = DataFrame([123456, 12500])
  127:         tm.assert_frame_equal(result, expected)
  128: 
  129:     def test_skip_bad_lines(self):
  130:         # too many lines, see #2430 for why
  131:         data = "a:b:c\nd:e:f\ng:h:i\nj:k:l:m\nl:m:n\no:p:q:r"
  132: 
  133:         reader = TextReader(StringIO(data), delimiter=":", header=None)
  134:         msg = r"Error tokenizing data\. C error: Expected 3 fields in line 4, saw 4"
  135:         with pytest.raises(parser.ParserError, match=msg):
  136:             reader.read()
  137: 
  138:         reader = TextReader(
  139:             StringIO(data), delimiter=":", header=None, on_bad_lines=2  # Skip
  140:         )
  141:         result = reader.read()
  142:         expected = {
  143:             0: np.array(["a", "d", "g", "l"], dtype=object),
  144:             1: np.array(["b", "e", "h", "m"], dtype=object),
  145:             2: np.array(["c", "f", "i", "n"], dtype=object),
  146:         }
  147:         assert_array_dicts_equal(result, expected)
  148: 
  149:         with tm.assert_produces_warning(ParserWarning, match="Skipping line"):
  150:             reader = TextReader(
  151:                 StringIO(data), delimiter=":", header=None, on_bad_lines=1  # Warn
  152:             )
  153:             reader.read()
  154: 
  155:     def test_header_not_enough_lines(self):
  156:         data = "skip this\nskip this\na,b,c\n1,2,3\n4,5,6"
  157: 
  158:         reader = TextReader(StringIO(data), delimiter=",", header=2)
  159:         header = reader.header
  160:         expected = [["a", "b", "c"]]
  161:         assert header == expected
  162: 
  163:         recs = reader.read()
  164:         expected = {
  165:             0: np.array([1, 4], dtype=np.int64),
  166:             1: np.array([2, 5], dtype=np.int64),
  167:             2: np.array([3, 6], dtype=np.int64),
  168:         }
  169:         assert_array_dicts_equal(recs, expected)
  170: 
  171:     def test_escapechar(self):
  172:         data = '\\"hello world"\n\\"hello world"\n\\"hello world"'
  173: 
  174:         reader = TextReader(StringIO(data), delimiter=",", header=None, escapechar="\\")
  175:         result = reader.read()
  176:         expected = {0: np.array(['"hello world"'] * 3, dtype=object)}
  177:         assert_array_dicts_equal(result, expected)
  178: 
  179:     def test_eof_has_eol(self):
  180:         # handling of new line at EOF
  181:         pass
  182: 
  183:     def test_na_substitution(self):
  184:         pass
  185: 
  186:     def test_numpy_string_dtype(self):
  187:         data = """\
  188: a,1
  189: aa,2
  190: aaa,3
  191: aaaa,4
  192: aaaaa,5"""
  193: 
  194:         def _make_reader(**kwds):
  195:             if "dtype" in kwds:
  196:                 kwds["dtype"] = ensure_dtype_objs(kwds["dtype"])
  197:             return TextReader(StringIO(data), delimiter=",", header=None, **kwds)
  198: 
  199:         reader = _make_reader(dtype="S5,i4")
  200:         result = reader.read()
  201: 
  202:         assert result[0].dtype == "S5"
  203: 
  204:         ex_values = np.array(["a", "aa", "aaa", "aaaa", "aaaaa"], dtype="S5")
  205:         assert (result[0] == ex_values).all()
  206:         assert result[1].dtype == "i4"
  207: 
  208:         reader = _make_reader(dtype="S4")
  209:         result = reader.read()
  210:         assert result[0].dtype == "S4"
  211:         ex_values = np.array(["a", "aa", "aaa", "aaaa", "aaaa"], dtype="S4")
  212:         assert (result[0] == ex_values).all()
  213:         assert result[1].dtype == "S4"
  214: 
  215:     def test_pass_dtype(self):
  216:         data = """\
  217: one,two
  218: 1,a
  219: 2,b
  220: 3,c
  221: 4,d"""
  222: 
  223:         def _make_reader(**kwds):
  224:             if "dtype" in kwds:
  225:                 kwds["dtype"] = ensure_dtype_objs(kwds["dtype"])
  226:             return TextReader(StringIO(data), delimiter=",", **kwds)
  227: 
  228:         reader = _make_reader(dtype={"one": "u1", 1: "S1"})
  229:         result = reader.read()
  230:         assert result[0].dtype == "u1"
  231:         assert result[1].dtype == "S1"
  232: 
  233:         reader = _make_reader(dtype={"one": np.uint8, 1: object})
  234:         result = reader.read()
  235:         assert result[0].dtype == "u1"
  236:         assert result[1].dtype == "O"
  237: 
  238:         reader = _make_reader(dtype={"one": np.dtype("u1"), 1: np.dtype("O")})
  239:         result = reader.read()
  240:         assert result[0].dtype == "u1"
  241:         assert result[1].dtype == "O"
  242: 
  243:     def test_usecols(self):
  244:         data = """\
  245: a,b,c
  246: 1,2,3
  247: 4,5,6
  248: 7,8,9
  249: 10,11,12"""
  250: 
  251:         def _make_reader(**kwds):
  252:             return TextReader(StringIO(data), delimiter=",", **kwds)
  253: 
  254:         reader = _make_reader(usecols=(1, 2))
  255:         result = reader.read()
  256: 
  257:         exp = _make_reader().read()
  258:         assert len(result) == 2
  259:         assert (result[1] == exp[1]).all()
  260:         assert (result[2] == exp[2]).all()
  261: 
  262:     @pytest.mark.parametrize(
  263:         "text, kwargs",
  264:         [
  265:             ("a,b,c\r1,2,3\r4,5,6\r7,8,9\r10,11,12", {"delimiter": ","}),
  266:             (
  267:                 "a  b  c\r1  2  3\r4  5  6\r7  8  9\r10  11  12",
  268:                 {"delim_whitespace": True},
  269:             ),
  270:             ("a,b,c\r1,2,3\r4,5,6\r,88,9\r10,11,12", {"delimiter": ","}),
  271:             (
  272:                 (
  273:                     "A,B,C,D,E,F,G,H,I,J,K,L,M,N,O\r"
  274:                     "AAAAA,BBBBB,0,0,0,0,0,0,0,0,0,0,0,0,0\r"
  275:                     ",BBBBB,0,0,0,0,0,0,0,0,0,0,0,0,0"
  276:                 ),
  277:                 {"delimiter": ","},
  278:             ),
  279:             ("A  B  C\r  2  3\r4  5  6", {"delim_whitespace": True}),
  280:             ("A B C\r2 3\r4 5 6", {"delim_whitespace": True}),
  281:         ],
  282:     )
  283:     def test_cr_delimited(self, text, kwargs):
  284:         nice_text = text.replace("\r", "\r\n")
  285:         result = TextReader(StringIO(text), **kwargs).read()
  286:         expected = TextReader(StringIO(nice_text), **kwargs).read()
  287:         assert_array_dicts_equal(result, expected)
  288: 
  289:     def test_empty_field_eof(self):
  290:         data = "a,b,c\n1,2,3\n4,,"
  291: 
  292:         result = TextReader(StringIO(data), delimiter=",").read()
  293: 
  294:         expected = {
  295:             0: np.array([1, 4], dtype=np.int64),
  296:             1: np.array(["2", ""], dtype=object),
  297:             2: np.array(["3", ""], dtype=object),
  298:         }
  299:         assert_array_dicts_equal(result, expected)
  300: 
  301:     @pytest.mark.parametrize("repeat", range(10))
  302:     def test_empty_field_eof_mem_access_bug(self, repeat):
  303:         # GH5664
  304:         a = DataFrame([["b"], [np.nan]], columns=["a"], index=["a", "c"])
  305:         b = DataFrame([[1, 1, 1, 0], [1, 1, 1, 0]], columns=list("abcd"), index=[1, 1])
  306:         c = DataFrame(
  307:             [
  308:                 [1, 2, 3, 4],
  309:                 [6, np.nan, np.nan, np.nan],
  310:                 [8, 9, 10, 11],
  311:                 [13, 14, np.nan, np.nan],
  312:             ],
  313:             columns=list("abcd"),
  314:             index=[0, 5, 7, 12],
  315:         )
  316: 
  317:         df = read_csv(StringIO("a,b\nc\n"), skiprows=0, names=["a"], engine="c")
  318:         tm.assert_frame_equal(df, a)
  319: 
  320:         df = read_csv(
  321:             StringIO("1,1,1,1,0\n" * 2 + "\n" * 2), names=list("abcd"), engine="c"
  322:         )
  323:         tm.assert_frame_equal(df, b)
  324: 
  325:         df = read_csv(
  326:             StringIO("0,1,2,3,4\n5,6\n7,8,9,10,11\n12,13,14"),
  327:             names=list("abcd"),
  328:             engine="c",
  329:         )
  330:         tm.assert_frame_equal(df, c)
  331: 
  332:     def test_empty_csv_input(self):
  333:         # GH14867
  334:         with read_csv(
  335:             StringIO(), chunksize=20, header=None, names=["a", "b", "c"]
  336:         ) as df:
  337:             assert isinstance(df, TextFileReader)
  338: 
  339: 
  340: def assert_array_dicts_equal(left, right):
  341:     for k, v in left.items():
  342:         tm.assert_numpy_array_equal(np.asarray(v), np.asarray(right[k]))
