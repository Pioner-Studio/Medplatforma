    1: import numpy as np
    2: import pytest
    3: 
    4: from pandas._libs.parsers import (
    5:     _maybe_upcast,
    6:     na_values,
    7: )
    8: 
    9: import pandas as pd
   10: from pandas import NA
   11: import pandas._testing as tm
   12: from pandas.core.arrays import (
   13:     ArrowStringArray,
   14:     BooleanArray,
   15:     FloatingArray,
   16:     IntegerArray,
   17:     StringArray,
   18: )
   19: 
   20: 
   21: def test_maybe_upcast(any_real_numpy_dtype):
   22:     # GH#36712
   23: 
   24:     dtype = np.dtype(any_real_numpy_dtype)
   25:     na_value = na_values[dtype]
   26:     arr = np.array([1, 2, na_value], dtype=dtype)
   27:     result = _maybe_upcast(arr, use_dtype_backend=True)
   28: 
   29:     expected_mask = np.array([False, False, True])
   30:     if issubclass(dtype.type, np.integer):
   31:         expected = IntegerArray(arr, mask=expected_mask)
   32:     else:
   33:         expected = FloatingArray(arr, mask=expected_mask)
   34: 
   35:     tm.assert_extension_array_equal(result, expected)
   36: 
   37: 
   38: def test_maybe_upcast_no_na(any_real_numpy_dtype):
   39:     # GH#36712
   40:     arr = np.array([1, 2, 3], dtype=any_real_numpy_dtype)
   41:     result = _maybe_upcast(arr, use_dtype_backend=True)
   42: 
   43:     expected_mask = np.array([False, False, False])
   44:     if issubclass(np.dtype(any_real_numpy_dtype).type, np.integer):
   45:         expected = IntegerArray(arr, mask=expected_mask)
   46:     else:
   47:         expected = FloatingArray(arr, mask=expected_mask)
   48: 
   49:     tm.assert_extension_array_equal(result, expected)
   50: 
   51: 
   52: def test_maybe_upcaste_bool():
   53:     # GH#36712
   54:     dtype = np.bool_
   55:     na_value = na_values[dtype]
   56:     arr = np.array([True, False, na_value], dtype="uint8").view(dtype)
   57:     result = _maybe_upcast(arr, use_dtype_backend=True)
   58: 
   59:     expected_mask = np.array([False, False, True])
   60:     expected = BooleanArray(arr, mask=expected_mask)
   61:     tm.assert_extension_array_equal(result, expected)
   62: 
   63: 
   64: def test_maybe_upcaste_bool_no_nan():
   65:     # GH#36712
   66:     dtype = np.bool_
   67:     arr = np.array([True, False, False], dtype="uint8").view(dtype)
   68:     result = _maybe_upcast(arr, use_dtype_backend=True)
   69: 
   70:     expected_mask = np.array([False, False, False])
   71:     expected = BooleanArray(arr, mask=expected_mask)
   72:     tm.assert_extension_array_equal(result, expected)
   73: 
   74: 
   75: def test_maybe_upcaste_all_nan():
   76:     # GH#36712
   77:     dtype = np.int64
   78:     na_value = na_values[dtype]
   79:     arr = np.array([na_value, na_value], dtype=dtype)
   80:     result = _maybe_upcast(arr, use_dtype_backend=True)
   81: 
   82:     expected_mask = np.array([True, True])
   83:     expected = IntegerArray(arr, mask=expected_mask)
   84:     tm.assert_extension_array_equal(result, expected)
   85: 
   86: 
   87: @pytest.mark.parametrize("val", [na_values[np.object_], "c"])
   88: def test_maybe_upcast_object(val, string_storage):
   89:     # GH#36712
   90:     pa = pytest.importorskip("pyarrow")
   91: 
   92:     with pd.option_context("mode.string_storage", string_storage):
   93:         arr = np.array(["a", "b", val], dtype=np.object_)
   94:         result = _maybe_upcast(arr, use_dtype_backend=True)
   95: 
   96:         if string_storage == "python":
   97:             exp_val = "c" if val == "c" else NA
   98:             expected = StringArray(np.array(["a", "b", exp_val], dtype=np.object_))
   99:         else:
  100:             exp_val = "c" if val == "c" else None
  101:             expected = ArrowStringArray(pa.array(["a", "b", exp_val]))
  102:         tm.assert_extension_array_equal(result, expected)
