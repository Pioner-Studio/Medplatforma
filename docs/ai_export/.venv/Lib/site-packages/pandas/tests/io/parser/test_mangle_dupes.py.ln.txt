    1: """
    2: Tests that duplicate columns are handled appropriately when parsed by the
    3: CSV engine. In general, the expected result is that they are either thoroughly
    4: de-duplicated (if mangling requested) or ignored otherwise.
    5: """
    6: from io import StringIO
    7: 
    8: import pytest
    9: 
   10: from pandas import DataFrame
   11: import pandas._testing as tm
   12: 
   13: xfail_pyarrow = pytest.mark.usefixtures("pyarrow_xfail")
   14: 
   15: 
   16: pytestmark = pytest.mark.filterwarnings(
   17:     "ignore:Passing a BlockManager to DataFrame:DeprecationWarning"
   18: )
   19: 
   20: 
   21: @xfail_pyarrow  # ValueError: Found non-unique column index
   22: def test_basic(all_parsers):
   23:     parser = all_parsers
   24: 
   25:     data = "a,a,b,b,b\n1,2,3,4,5"
   26:     result = parser.read_csv(StringIO(data), sep=",")
   27: 
   28:     expected = DataFrame([[1, 2, 3, 4, 5]], columns=["a", "a.1", "b", "b.1", "b.2"])
   29:     tm.assert_frame_equal(result, expected)
   30: 
   31: 
   32: @xfail_pyarrow  # ValueError: Found non-unique column index
   33: def test_basic_names(all_parsers):
   34:     # See gh-7160
   35:     parser = all_parsers
   36: 
   37:     data = "a,b,a\n0,1,2\n3,4,5"
   38:     expected = DataFrame([[0, 1, 2], [3, 4, 5]], columns=["a", "b", "a.1"])
   39: 
   40:     result = parser.read_csv(StringIO(data))
   41:     tm.assert_frame_equal(result, expected)
   42: 
   43: 
   44: def test_basic_names_raise(all_parsers):
   45:     # See gh-7160
   46:     parser = all_parsers
   47: 
   48:     data = "0,1,2\n3,4,5"
   49:     with pytest.raises(ValueError, match="Duplicate names"):
   50:         parser.read_csv(StringIO(data), names=["a", "b", "a"])
   51: 
   52: 
   53: @xfail_pyarrow  # ValueError: Found non-unique column index
   54: @pytest.mark.parametrize(
   55:     "data,expected",
   56:     [
   57:         ("a,a,a.1\n1,2,3", DataFrame([[1, 2, 3]], columns=["a", "a.2", "a.1"])),
   58:         (
   59:             "a,a,a.1,a.1.1,a.1.1.1,a.1.1.1.1\n1,2,3,4,5,6",
   60:             DataFrame(
   61:                 [[1, 2, 3, 4, 5, 6]],
   62:                 columns=["a", "a.2", "a.1", "a.1.1", "a.1.1.1", "a.1.1.1.1"],
   63:             ),
   64:         ),
   65:         (
   66:             "a,a,a.3,a.1,a.2,a,a\n1,2,3,4,5,6,7",
   67:             DataFrame(
   68:                 [[1, 2, 3, 4, 5, 6, 7]],
   69:                 columns=["a", "a.4", "a.3", "a.1", "a.2", "a.5", "a.6"],
   70:             ),
   71:         ),
   72:     ],
   73: )
   74: def test_thorough_mangle_columns(all_parsers, data, expected):
   75:     # see gh-17060
   76:     parser = all_parsers
   77: 
   78:     result = parser.read_csv(StringIO(data))
   79:     tm.assert_frame_equal(result, expected)
   80: 
   81: 
   82: @pytest.mark.parametrize(
   83:     "data,names,expected",
   84:     [
   85:         (
   86:             "a,b,b\n1,2,3",
   87:             ["a.1", "a.1", "a.1.1"],
   88:             DataFrame(
   89:                 [["a", "b", "b"], ["1", "2", "3"]], columns=["a.1", "a.1.1", "a.1.1.1"]
   90:             ),
   91:         ),
   92:         (
   93:             "a,b,c,d,e,f\n1,2,3,4,5,6",
   94:             ["a", "a", "a.1", "a.1.1", "a.1.1.1", "a.1.1.1.1"],
   95:             DataFrame(
   96:                 [["a", "b", "c", "d", "e", "f"], ["1", "2", "3", "4", "5", "6"]],
   97:                 columns=["a", "a.1", "a.1.1", "a.1.1.1", "a.1.1.1.1", "a.1.1.1.1.1"],
   98:             ),
   99:         ),
  100:         (
  101:             "a,b,c,d,e,f,g\n1,2,3,4,5,6,7",
  102:             ["a", "a", "a.3", "a.1", "a.2", "a", "a"],
  103:             DataFrame(
  104:                 [
  105:                     ["a", "b", "c", "d", "e", "f", "g"],
  106:                     ["1", "2", "3", "4", "5", "6", "7"],
  107:                 ],
  108:                 columns=["a", "a.1", "a.3", "a.1.1", "a.2", "a.2.1", "a.3.1"],
  109:             ),
  110:         ),
  111:     ],
  112: )
  113: def test_thorough_mangle_names(all_parsers, data, names, expected):
  114:     # see gh-17095
  115:     parser = all_parsers
  116: 
  117:     with pytest.raises(ValueError, match="Duplicate names"):
  118:         parser.read_csv(StringIO(data), names=names)
  119: 
  120: 
  121: @xfail_pyarrow  # AssertionError: DataFrame.columns are different
  122: def test_mangled_unnamed_placeholders(all_parsers):
  123:     # xref gh-13017
  124:     orig_key = "0"
  125:     parser = all_parsers
  126: 
  127:     orig_value = [1, 2, 3]
  128:     df = DataFrame({orig_key: orig_value})
  129: 
  130:     # This test recursively updates `df`.
  131:     for i in range(3):
  132:         expected = DataFrame()
  133: 
  134:         for j in range(i + 1):
  135:             col_name = "Unnamed: 0" + f".{1*j}" * min(j, 1)
  136:             expected.insert(loc=0, column=col_name, value=[0, 1, 2])
  137: 
  138:         expected[orig_key] = orig_value
  139:         df = parser.read_csv(StringIO(df.to_csv()))
  140: 
  141:         tm.assert_frame_equal(df, expected)
  142: 
  143: 
  144: @xfail_pyarrow  # ValueError: Found non-unique column index
  145: def test_mangle_dupe_cols_already_exists(all_parsers):
  146:     # GH#14704
  147:     parser = all_parsers
  148: 
  149:     data = "a,a,a.1,a,a.3,a.1,a.1.1\n1,2,3,4,5,6,7"
  150:     result = parser.read_csv(StringIO(data))
  151:     expected = DataFrame(
  152:         [[1, 2, 3, 4, 5, 6, 7]],
  153:         columns=["a", "a.2", "a.1", "a.4", "a.3", "a.1.2", "a.1.1"],
  154:     )
  155:     tm.assert_frame_equal(result, expected)
  156: 
  157: 
  158: @xfail_pyarrow  # ValueError: Found non-unique column index
  159: def test_mangle_dupe_cols_already_exists_unnamed_col(all_parsers):
  160:     # GH#14704
  161:     parser = all_parsers
  162: 
  163:     data = ",Unnamed: 0,,Unnamed: 2\n1,2,3,4"
  164:     result = parser.read_csv(StringIO(data))
  165:     expected = DataFrame(
  166:         [[1, 2, 3, 4]],
  167:         columns=["Unnamed: 0.1", "Unnamed: 0", "Unnamed: 2.1", "Unnamed: 2"],
  168:     )
  169:     tm.assert_frame_equal(result, expected)
  170: 
  171: 
  172: @pytest.mark.parametrize("usecol, engine", [([0, 1, 1], "python"), ([0, 1, 1], "c")])
  173: def test_mangle_cols_names(all_parsers, usecol, engine):
  174:     # GH 11823
  175:     parser = all_parsers
  176:     data = "1,2,3"
  177:     names = ["A", "A", "B"]
  178:     with pytest.raises(ValueError, match="Duplicate names"):
  179:         parser.read_csv(StringIO(data), names=names, usecols=usecol, engine=engine)
