    1: from __future__ import annotations
    2: 
    3: import pytest
    4: 
    5: import pandas as pd
    6: from pandas import api
    7: import pandas._testing as tm
    8: from pandas.api import (
    9:     extensions as api_extensions,
   10:     indexers as api_indexers,
   11:     interchange as api_interchange,
   12:     types as api_types,
   13:     typing as api_typing,
   14: )
   15: 
   16: 
   17: class Base:
   18:     def check(self, namespace, expected, ignored=None):
   19:         # see which names are in the namespace, minus optional
   20:         # ignored ones
   21:         # compare vs the expected
   22: 
   23:         result = sorted(
   24:             f for f in dir(namespace) if not f.startswith("__") and f != "annotations"
   25:         )
   26:         if ignored is not None:
   27:             result = sorted(set(result) - set(ignored))
   28: 
   29:         expected = sorted(expected)
   30:         tm.assert_almost_equal(result, expected)
   31: 
   32: 
   33: class TestPDApi(Base):
   34:     # these are optionally imported based on testing
   35:     # & need to be ignored
   36:     ignored = ["tests", "locale", "conftest", "_version_meson"]
   37: 
   38:     # top-level sub-packages
   39:     public_lib = [
   40:         "api",
   41:         "arrays",
   42:         "options",
   43:         "test",
   44:         "testing",
   45:         "errors",
   46:         "plotting",
   47:         "io",
   48:         "tseries",
   49:     ]
   50:     private_lib = ["compat", "core", "pandas", "util", "_built_with_meson"]
   51: 
   52:     # misc
   53:     misc = ["IndexSlice", "NaT", "NA"]
   54: 
   55:     # top-level classes
   56:     classes = [
   57:         "ArrowDtype",
   58:         "Categorical",
   59:         "CategoricalIndex",
   60:         "DataFrame",
   61:         "DateOffset",
   62:         "DatetimeIndex",
   63:         "ExcelFile",
   64:         "ExcelWriter",
   65:         "Flags",
   66:         "Grouper",
   67:         "HDFStore",
   68:         "Index",
   69:         "MultiIndex",
   70:         "Period",
   71:         "PeriodIndex",
   72:         "RangeIndex",
   73:         "Series",
   74:         "SparseDtype",
   75:         "StringDtype",
   76:         "Timedelta",
   77:         "TimedeltaIndex",
   78:         "Timestamp",
   79:         "Interval",
   80:         "IntervalIndex",
   81:         "CategoricalDtype",
   82:         "PeriodDtype",
   83:         "IntervalDtype",
   84:         "DatetimeTZDtype",
   85:         "BooleanDtype",
   86:         "Int8Dtype",
   87:         "Int16Dtype",
   88:         "Int32Dtype",
   89:         "Int64Dtype",
   90:         "UInt8Dtype",
   91:         "UInt16Dtype",
   92:         "UInt32Dtype",
   93:         "UInt64Dtype",
   94:         "Float32Dtype",
   95:         "Float64Dtype",
   96:         "NamedAgg",
   97:     ]
   98: 
   99:     # these are already deprecated; awaiting removal
  100:     deprecated_classes: list[str] = []
  101: 
  102:     # external modules exposed in pandas namespace
  103:     modules: list[str] = []
  104: 
  105:     # top-level functions
  106:     funcs = [
  107:         "array",
  108:         "bdate_range",
  109:         "concat",
  110:         "crosstab",
  111:         "cut",
  112:         "date_range",
  113:         "interval_range",
  114:         "eval",
  115:         "factorize",
  116:         "get_dummies",
  117:         "from_dummies",
  118:         "infer_freq",
  119:         "isna",
  120:         "isnull",
  121:         "lreshape",
  122:         "melt",
  123:         "notna",
  124:         "notnull",
  125:         "offsets",
  126:         "merge",
  127:         "merge_ordered",
  128:         "merge_asof",
  129:         "period_range",
  130:         "pivot",
  131:         "pivot_table",
  132:         "qcut",
  133:         "show_versions",
  134:         "timedelta_range",
  135:         "unique",
  136:         "value_counts",
  137:         "wide_to_long",
  138:     ]
  139: 
  140:     # top-level option funcs
  141:     funcs_option = [
  142:         "reset_option",
  143:         "describe_option",
  144:         "get_option",
  145:         "option_context",
  146:         "set_option",
  147:         "set_eng_float_format",
  148:     ]
  149: 
  150:     # top-level read_* funcs
  151:     funcs_read = [
  152:         "read_clipboard",
  153:         "read_csv",
  154:         "read_excel",
  155:         "read_fwf",
  156:         "read_gbq",
  157:         "read_hdf",
  158:         "read_html",
  159:         "read_xml",
  160:         "read_json",
  161:         "read_pickle",
  162:         "read_sas",
  163:         "read_sql",
  164:         "read_sql_query",
  165:         "read_sql_table",
  166:         "read_stata",
  167:         "read_table",
  168:         "read_feather",
  169:         "read_parquet",
  170:         "read_orc",
  171:         "read_spss",
  172:     ]
  173: 
  174:     # top-level json funcs
  175:     funcs_json = ["json_normalize"]
  176: 
  177:     # top-level to_* funcs
  178:     funcs_to = ["to_datetime", "to_numeric", "to_pickle", "to_timedelta"]
  179: 
  180:     # top-level to deprecate in the future
  181:     deprecated_funcs_in_future: list[str] = []
  182: 
  183:     # these are already deprecated; awaiting removal
  184:     deprecated_funcs: list[str] = []
  185: 
  186:     # private modules in pandas namespace
  187:     private_modules = [
  188:         "_config",
  189:         "_libs",
  190:         "_is_numpy_dev",
  191:         "_pandas_datetime_CAPI",
  192:         "_pandas_parser_CAPI",
  193:         "_testing",
  194:         "_typing",
  195:     ]
  196:     if not pd._built_with_meson:
  197:         private_modules.append("_version")
  198: 
  199:     def test_api(self):
  200:         checkthese = (
  201:             self.public_lib
  202:             + self.private_lib
  203:             + self.misc
  204:             + self.modules
  205:             + self.classes
  206:             + self.funcs
  207:             + self.funcs_option
  208:             + self.funcs_read
  209:             + self.funcs_json
  210:             + self.funcs_to
  211:             + self.private_modules
  212:         )
  213:         self.check(namespace=pd, expected=checkthese, ignored=self.ignored)
  214: 
  215:     def test_api_all(self):
  216:         expected = set(
  217:             self.public_lib
  218:             + self.misc
  219:             + self.modules
  220:             + self.classes
  221:             + self.funcs
  222:             + self.funcs_option
  223:             + self.funcs_read
  224:             + self.funcs_json
  225:             + self.funcs_to
  226:         ) - set(self.deprecated_classes)
  227:         actual = set(pd.__all__)
  228: 
  229:         extraneous = actual - expected
  230:         assert not extraneous
  231: 
  232:         missing = expected - actual
  233:         assert not missing
  234: 
  235:     def test_depr(self):
  236:         deprecated_list = (
  237:             self.deprecated_classes
  238:             + self.deprecated_funcs
  239:             + self.deprecated_funcs_in_future
  240:         )
  241:         for depr in deprecated_list:
  242:             with tm.assert_produces_warning(FutureWarning):
  243:                 _ = getattr(pd, depr)
  244: 
  245: 
  246: class TestApi(Base):
  247:     allowed_api_dirs = [
  248:         "types",
  249:         "extensions",
  250:         "indexers",
  251:         "interchange",
  252:         "typing",
  253:     ]
  254:     allowed_typing = [
  255:         "DataFrameGroupBy",
  256:         "DatetimeIndexResamplerGroupby",
  257:         "Expanding",
  258:         "ExpandingGroupby",
  259:         "ExponentialMovingWindow",
  260:         "ExponentialMovingWindowGroupby",
  261:         "JsonReader",
  262:         "NaTType",
  263:         "NAType",
  264:         "PeriodIndexResamplerGroupby",
  265:         "Resampler",
  266:         "Rolling",
  267:         "RollingGroupby",
  268:         "SeriesGroupBy",
  269:         "StataReader",
  270:         "TimedeltaIndexResamplerGroupby",
  271:         "TimeGrouper",
  272:         "Window",
  273:     ]
  274:     allowed_api_types = [
  275:         "is_any_real_numeric_dtype",
  276:         "is_array_like",
  277:         "is_bool",
  278:         "is_bool_dtype",
  279:         "is_categorical_dtype",
  280:         "is_complex",
  281:         "is_complex_dtype",
  282:         "is_datetime64_any_dtype",
  283:         "is_datetime64_dtype",
  284:         "is_datetime64_ns_dtype",
  285:         "is_datetime64tz_dtype",
  286:         "is_dict_like",
  287:         "is_dtype_equal",
  288:         "is_extension_array_dtype",
  289:         "is_file_like",
  290:         "is_float",
  291:         "is_float_dtype",
  292:         "is_hashable",
  293:         "is_int64_dtype",
  294:         "is_integer",
  295:         "is_integer_dtype",
  296:         "is_interval",
  297:         "is_interval_dtype",
  298:         "is_iterator",
  299:         "is_list_like",
  300:         "is_named_tuple",
  301:         "is_number",
  302:         "is_numeric_dtype",
  303:         "is_object_dtype",
  304:         "is_period_dtype",
  305:         "is_re",
  306:         "is_re_compilable",
  307:         "is_scalar",
  308:         "is_signed_integer_dtype",
  309:         "is_sparse",
  310:         "is_string_dtype",
  311:         "is_timedelta64_dtype",
  312:         "is_timedelta64_ns_dtype",
  313:         "is_unsigned_integer_dtype",
  314:         "pandas_dtype",
  315:         "infer_dtype",
  316:         "union_categoricals",
  317:         "CategoricalDtype",
  318:         "DatetimeTZDtype",
  319:         "IntervalDtype",
  320:         "PeriodDtype",
  321:     ]
  322:     allowed_api_interchange = ["from_dataframe", "DataFrame"]
  323:     allowed_api_indexers = [
  324:         "check_array_indexer",
  325:         "BaseIndexer",
  326:         "FixedForwardWindowIndexer",
  327:         "VariableOffsetWindowIndexer",
  328:     ]
  329:     allowed_api_extensions = [
  330:         "no_default",
  331:         "ExtensionDtype",
  332:         "register_extension_dtype",
  333:         "register_dataframe_accessor",
  334:         "register_index_accessor",
  335:         "register_series_accessor",
  336:         "take",
  337:         "ExtensionArray",
  338:         "ExtensionScalarOpsMixin",
  339:     ]
  340: 
  341:     def test_api(self):
  342:         self.check(api, self.allowed_api_dirs)
  343: 
  344:     def test_api_typing(self):
  345:         self.check(api_typing, self.allowed_typing)
  346: 
  347:     def test_api_types(self):
  348:         self.check(api_types, self.allowed_api_types)
  349: 
  350:     def test_api_interchange(self):
  351:         self.check(api_interchange, self.allowed_api_interchange)
  352: 
  353:     def test_api_indexers(self):
  354:         self.check(api_indexers, self.allowed_api_indexers)
  355: 
  356:     def test_api_extensions(self):
  357:         self.check(api_extensions, self.allowed_api_extensions)
  358: 
  359: 
  360: class TestTesting(Base):
  361:     funcs = [
  362:         "assert_frame_equal",
  363:         "assert_series_equal",
  364:         "assert_index_equal",
  365:         "assert_extension_array_equal",
  366:     ]
  367: 
  368:     def test_testing(self):
  369:         from pandas import testing
  370: 
  371:         self.check(testing, self.funcs)
  372: 
  373:     def test_util_in_top_level(self):
  374:         with pytest.raises(AttributeError, match="foo"):
  375:             pd.util.foo
  376: 
  377: 
  378: def test_pandas_array_alias():
  379:     msg = "PandasArray has been renamed NumpyExtensionArray"
  380:     with tm.assert_produces_warning(FutureWarning, match=msg):
  381:         res = pd.arrays.PandasArray
  382: 
  383:     assert res is pd.arrays.NumpyExtensionArray
