    1: from __future__ import annotations
    2: 
    3: import pandas._testing as tm
    4: from pandas.api import types
    5: from pandas.tests.api.test_api import Base
    6: 
    7: 
    8: class TestTypes(Base):
    9:     allowed = [
   10:         "is_any_real_numeric_dtype",
   11:         "is_bool",
   12:         "is_bool_dtype",
   13:         "is_categorical_dtype",
   14:         "is_complex",
   15:         "is_complex_dtype",
   16:         "is_datetime64_any_dtype",
   17:         "is_datetime64_dtype",
   18:         "is_datetime64_ns_dtype",
   19:         "is_datetime64tz_dtype",
   20:         "is_dtype_equal",
   21:         "is_float",
   22:         "is_float_dtype",
   23:         "is_int64_dtype",
   24:         "is_integer",
   25:         "is_integer_dtype",
   26:         "is_number",
   27:         "is_numeric_dtype",
   28:         "is_object_dtype",
   29:         "is_scalar",
   30:         "is_sparse",
   31:         "is_string_dtype",
   32:         "is_signed_integer_dtype",
   33:         "is_timedelta64_dtype",
   34:         "is_timedelta64_ns_dtype",
   35:         "is_unsigned_integer_dtype",
   36:         "is_period_dtype",
   37:         "is_interval",
   38:         "is_interval_dtype",
   39:         "is_re",
   40:         "is_re_compilable",
   41:         "is_dict_like",
   42:         "is_iterator",
   43:         "is_file_like",
   44:         "is_list_like",
   45:         "is_hashable",
   46:         "is_array_like",
   47:         "is_named_tuple",
   48:         "pandas_dtype",
   49:         "union_categoricals",
   50:         "infer_dtype",
   51:         "is_extension_array_dtype",
   52:     ]
   53:     deprecated: list[str] = []
   54:     dtypes = ["CategoricalDtype", "DatetimeTZDtype", "PeriodDtype", "IntervalDtype"]
   55: 
   56:     def test_types(self):
   57:         self.check(types, self.allowed + self.dtypes + self.deprecated)
   58: 
   59:     def test_deprecated_from_api_types(self):
   60:         for t in self.deprecated:
   61:             with tm.assert_produces_warning(FutureWarning):
   62:                 getattr(types, t)(1)
