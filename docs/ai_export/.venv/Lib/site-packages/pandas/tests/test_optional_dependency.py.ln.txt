    1: import sys
    2: import types
    3: 
    4: import pytest
    5: 
    6: from pandas.compat._optional import (
    7:     VERSIONS,
    8:     import_optional_dependency,
    9: )
   10: 
   11: import pandas._testing as tm
   12: 
   13: 
   14: def test_import_optional():
   15:     match = "Missing .*notapackage.* pip .* conda .* notapackage"
   16:     with pytest.raises(ImportError, match=match) as exc_info:
   17:         import_optional_dependency("notapackage")
   18:     # The original exception should be there as context:
   19:     assert isinstance(exc_info.value.__context__, ImportError)
   20: 
   21:     result = import_optional_dependency("notapackage", errors="ignore")
   22:     assert result is None
   23: 
   24: 
   25: def test_xlrd_version_fallback():
   26:     pytest.importorskip("xlrd")
   27:     import_optional_dependency("xlrd")
   28: 
   29: 
   30: def test_bad_version(monkeypatch):
   31:     name = "fakemodule"
   32:     module = types.ModuleType(name)
   33:     module.__version__ = "0.9.0"
   34:     sys.modules[name] = module
   35:     monkeypatch.setitem(VERSIONS, name, "1.0.0")
   36: 
   37:     match = "Pandas requires .*1.0.0.* of .fakemodule.*'0.9.0'"
   38:     with pytest.raises(ImportError, match=match):
   39:         import_optional_dependency("fakemodule")
   40: 
   41:     # Test min_version parameter
   42:     result = import_optional_dependency("fakemodule", min_version="0.8")
   43:     assert result is module
   44: 
   45:     with tm.assert_produces_warning(UserWarning):
   46:         result = import_optional_dependency("fakemodule", errors="warn")
   47:     assert result is None
   48: 
   49:     module.__version__ = "1.0.0"  # exact match is OK
   50:     result = import_optional_dependency("fakemodule")
   51:     assert result is module
   52: 
   53:     with pytest.raises(ImportError, match="Pandas requires version '1.1.0'"):
   54:         import_optional_dependency("fakemodule", min_version="1.1.0")
   55: 
   56:     with tm.assert_produces_warning(UserWarning):
   57:         result = import_optional_dependency(
   58:             "fakemodule", errors="warn", min_version="1.1.0"
   59:         )
   60:     assert result is None
   61: 
   62:     result = import_optional_dependency(
   63:         "fakemodule", errors="ignore", min_version="1.1.0"
   64:     )
   65:     assert result is None
   66: 
   67: 
   68: def test_submodule(monkeypatch):
   69:     # Create a fake module with a submodule
   70:     name = "fakemodule"
   71:     module = types.ModuleType(name)
   72:     module.__version__ = "0.9.0"
   73:     sys.modules[name] = module
   74:     sub_name = "submodule"
   75:     submodule = types.ModuleType(sub_name)
   76:     setattr(module, sub_name, submodule)
   77:     sys.modules[f"{name}.{sub_name}"] = submodule
   78:     monkeypatch.setitem(VERSIONS, name, "1.0.0")
   79: 
   80:     match = "Pandas requires .*1.0.0.* of .fakemodule.*'0.9.0'"
   81:     with pytest.raises(ImportError, match=match):
   82:         import_optional_dependency("fakemodule.submodule")
   83: 
   84:     with tm.assert_produces_warning(UserWarning):
   85:         result = import_optional_dependency("fakemodule.submodule", errors="warn")
   86:     assert result is None
   87: 
   88:     module.__version__ = "1.0.0"  # exact match is OK
   89:     result = import_optional_dependency("fakemodule.submodule")
   90:     assert result is submodule
   91: 
   92: 
   93: def test_no_version_raises(monkeypatch):
   94:     name = "fakemodule"
   95:     module = types.ModuleType(name)
   96:     sys.modules[name] = module
   97:     monkeypatch.setitem(VERSIONS, name, "1.0.0")
   98: 
   99:     with pytest.raises(ImportError, match="Can't determine .* fakemodule"):
  100:         import_optional_dependency(name)
