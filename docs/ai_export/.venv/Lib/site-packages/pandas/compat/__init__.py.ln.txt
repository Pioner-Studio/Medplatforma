    1: """
    2: compat
    3: ======
    4: 
    5: Cross-compatible functions for different versions of Python.
    6: 
    7: Other items:
    8: * platform checker
    9: """
   10: from __future__ import annotations
   11: 
   12: import os
   13: import platform
   14: import sys
   15: from typing import TYPE_CHECKING
   16: 
   17: from pandas.compat._constants import (
   18:     IS64,
   19:     ISMUSL,
   20:     PY310,
   21:     PY311,
   22:     PY312,
   23:     PYPY,
   24: )
   25: import pandas.compat.compressors
   26: from pandas.compat.numpy import is_numpy_dev
   27: from pandas.compat.pyarrow import (
   28:     pa_version_under10p1,
   29:     pa_version_under11p0,
   30:     pa_version_under13p0,
   31:     pa_version_under14p0,
   32:     pa_version_under14p1,
   33:     pa_version_under16p0,
   34: )
   35: 
   36: if TYPE_CHECKING:
   37:     from pandas._typing import F
   38: 
   39: 
   40: def set_function_name(f: F, name: str, cls: type) -> F:
   41:     """
   42:     Bind the name/qualname attributes of the function.
   43:     """
   44:     f.__name__ = name
   45:     f.__qualname__ = f"{cls.__name__}.{name}"
   46:     f.__module__ = cls.__module__
   47:     return f
   48: 
   49: 
   50: def is_platform_little_endian() -> bool:
   51:     """
   52:     Checking if the running platform is little endian.
   53: 
   54:     Returns
   55:     -------
   56:     bool
   57:         True if the running platform is little endian.
   58:     """
   59:     return sys.byteorder == "little"
   60: 
   61: 
   62: def is_platform_windows() -> bool:
   63:     """
   64:     Checking if the running platform is windows.
   65: 
   66:     Returns
   67:     -------
   68:     bool
   69:         True if the running platform is windows.
   70:     """
   71:     return sys.platform in ["win32", "cygwin"]
   72: 
   73: 
   74: def is_platform_linux() -> bool:
   75:     """
   76:     Checking if the running platform is linux.
   77: 
   78:     Returns
   79:     -------
   80:     bool
   81:         True if the running platform is linux.
   82:     """
   83:     return sys.platform == "linux"
   84: 
   85: 
   86: def is_platform_mac() -> bool:
   87:     """
   88:     Checking if the running platform is mac.
   89: 
   90:     Returns
   91:     -------
   92:     bool
   93:         True if the running platform is mac.
   94:     """
   95:     return sys.platform == "darwin"
   96: 
   97: 
   98: def is_platform_arm() -> bool:
   99:     """
  100:     Checking if the running platform use ARM architecture.
  101: 
  102:     Returns
  103:     -------
  104:     bool
  105:         True if the running platform uses ARM architecture.
  106:     """
  107:     return platform.machine() in ("arm64", "aarch64") or platform.machine().startswith(
  108:         "armv"
  109:     )
  110: 
  111: 
  112: def is_platform_power() -> bool:
  113:     """
  114:     Checking if the running platform use Power architecture.
  115: 
  116:     Returns
  117:     -------
  118:     bool
  119:         True if the running platform uses ARM architecture.
  120:     """
  121:     return platform.machine() in ("ppc64", "ppc64le")
  122: 
  123: 
  124: def is_ci_environment() -> bool:
  125:     """
  126:     Checking if running in a continuous integration environment by checking
  127:     the PANDAS_CI environment variable.
  128: 
  129:     Returns
  130:     -------
  131:     bool
  132:         True if the running in a continuous integration environment.
  133:     """
  134:     return os.environ.get("PANDAS_CI", "0") == "1"
  135: 
  136: 
  137: def get_lzma_file() -> type[pandas.compat.compressors.LZMAFile]:
  138:     """
  139:     Importing the `LZMAFile` class from the `lzma` module.
  140: 
  141:     Returns
  142:     -------
  143:     class
  144:         The `LZMAFile` class from the `lzma` module.
  145: 
  146:     Raises
  147:     ------
  148:     RuntimeError
  149:         If the `lzma` module was not imported correctly, or didn't exist.
  150:     """
  151:     if not pandas.compat.compressors.has_lzma:
  152:         raise RuntimeError(
  153:             "lzma module not available. "
  154:             "A Python re-install with the proper dependencies, "
  155:             "might be required to solve this issue."
  156:         )
  157:     return pandas.compat.compressors.LZMAFile
  158: 
  159: 
  160: def get_bz2_file() -> type[pandas.compat.compressors.BZ2File]:
  161:     """
  162:     Importing the `BZ2File` class from the `bz2` module.
  163: 
  164:     Returns
  165:     -------
  166:     class
  167:         The `BZ2File` class from the `bz2` module.
  168: 
  169:     Raises
  170:     ------
  171:     RuntimeError
  172:         If the `bz2` module was not imported correctly, or didn't exist.
  173:     """
  174:     if not pandas.compat.compressors.has_bz2:
  175:         raise RuntimeError(
  176:             "bz2 module not available. "
  177:             "A Python re-install with the proper dependencies, "
  178:             "might be required to solve this issue."
  179:         )
  180:     return pandas.compat.compressors.BZ2File
  181: 
  182: 
  183: __all__ = [
  184:     "is_numpy_dev",
  185:     "pa_version_under10p1",
  186:     "pa_version_under11p0",
  187:     "pa_version_under13p0",
  188:     "pa_version_under14p0",
  189:     "pa_version_under14p1",
  190:     "pa_version_under16p0",
  191:     "IS64",
  192:     "ISMUSL",
  193:     "PY310",
  194:     "PY311",
  195:     "PY312",
  196:     "PYPY",
  197: ]
