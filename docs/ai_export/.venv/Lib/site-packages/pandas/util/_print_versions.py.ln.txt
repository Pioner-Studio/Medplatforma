    1: from __future__ import annotations
    2: 
    3: import codecs
    4: import json
    5: import locale
    6: import os
    7: import platform
    8: import struct
    9: import sys
   10: from typing import TYPE_CHECKING
   11: 
   12: if TYPE_CHECKING:
   13:     from pandas._typing import JSONSerializable
   14: 
   15: from pandas.compat._optional import (
   16:     VERSIONS,
   17:     get_version,
   18:     import_optional_dependency,
   19: )
   20: 
   21: 
   22: def _get_commit_hash() -> str | None:
   23:     """
   24:     Use vendored versioneer code to get git hash, which handles
   25:     git worktree correctly.
   26:     """
   27:     try:
   28:         from pandas._version_meson import (  # pyright: ignore [reportMissingImports]
   29:             __git_version__,
   30:         )
   31: 
   32:         return __git_version__
   33:     except ImportError:
   34:         from pandas._version import get_versions
   35: 
   36:         versions = get_versions()
   37:         return versions["full-revisionid"]
   38: 
   39: 
   40: def _get_sys_info() -> dict[str, JSONSerializable]:
   41:     """
   42:     Returns system information as a JSON serializable dictionary.
   43:     """
   44:     uname_result = platform.uname()
   45:     language_code, encoding = locale.getlocale()
   46:     return {
   47:         "commit": _get_commit_hash(),
   48:         "python": ".".join([str(i) for i in sys.version_info]),
   49:         "python-bits": struct.calcsize("P") * 8,
   50:         "OS": uname_result.system,
   51:         "OS-release": uname_result.release,
   52:         "Version": uname_result.version,
   53:         "machine": uname_result.machine,
   54:         "processor": uname_result.processor,
   55:         "byteorder": sys.byteorder,
   56:         "LC_ALL": os.environ.get("LC_ALL"),
   57:         "LANG": os.environ.get("LANG"),
   58:         "LOCALE": {"language-code": language_code, "encoding": encoding},
   59:     }
   60: 
   61: 
   62: def _get_dependency_info() -> dict[str, JSONSerializable]:
   63:     """
   64:     Returns dependency information as a JSON serializable dictionary.
   65:     """
   66:     deps = [
   67:         "pandas",
   68:         # required
   69:         "numpy",
   70:         "pytz",
   71:         "dateutil",
   72:         # install / build,
   73:         "setuptools",
   74:         "pip",
   75:         "Cython",
   76:         # test
   77:         "pytest",
   78:         "hypothesis",
   79:         # docs
   80:         "sphinx",
   81:         # Other, need a min version
   82:         "blosc",
   83:         "feather",
   84:         "xlsxwriter",
   85:         "lxml.etree",
   86:         "html5lib",
   87:         "pymysql",
   88:         "psycopg2",
   89:         "jinja2",
   90:         # Other, not imported.
   91:         "IPython",
   92:         "pandas_datareader",
   93:     ]
   94:     deps.extend(list(VERSIONS))
   95: 
   96:     result: dict[str, JSONSerializable] = {}
   97:     for modname in deps:
   98:         mod = import_optional_dependency(modname, errors="ignore")
   99:         result[modname] = get_version(mod) if mod else None
  100:     return result
  101: 
  102: 
  103: def show_versions(as_json: str | bool = False) -> None:
  104:     """
  105:     Provide useful information, important for bug reports.
  106: 
  107:     It comprises info about hosting operation system, pandas version,
  108:     and versions of other installed relative packages.
  109: 
  110:     Parameters
  111:     ----------
  112:     as_json : str or bool, default False
  113:         * If False, outputs info in a human readable form to the console.
  114:         * If str, it will be considered as a path to a file.
  115:           Info will be written to that file in JSON format.
  116:         * If True, outputs info in JSON format to the console.
  117: 
  118:     Examples
  119:     --------
  120:     >>> pd.show_versions()  # doctest: +SKIP
  121:     Your output may look something like this:
  122:     INSTALLED VERSIONS
  123:     ------------------
  124:     commit           : 37ea63d540fd27274cad6585082c91b1283f963d
  125:     python           : 3.10.6.final.0
  126:     python-bits      : 64
  127:     OS               : Linux
  128:     OS-release       : 5.10.102.1-microsoft-standard-WSL2
  129:     Version          : #1 SMP Wed Mar 2 00:30:59 UTC 2022
  130:     machine          : x86_64
  131:     processor        : x86_64
  132:     byteorder        : little
  133:     LC_ALL           : None
  134:     LANG             : en_GB.UTF-8
  135:     LOCALE           : en_GB.UTF-8
  136:     pandas           : 2.0.1
  137:     numpy            : 1.24.3
  138:     ...
  139:     """
  140:     sys_info = _get_sys_info()
  141:     deps = _get_dependency_info()
  142: 
  143:     if as_json:
  144:         j = {"system": sys_info, "dependencies": deps}
  145: 
  146:         if as_json is True:
  147:             sys.stdout.writelines(json.dumps(j, indent=2))
  148:         else:
  149:             assert isinstance(as_json, str)  # needed for mypy
  150:             with codecs.open(as_json, "wb", encoding="utf8") as f:
  151:                 json.dump(j, f, indent=2)
  152: 
  153:     else:
  154:         assert isinstance(sys_info["LOCALE"], dict)  # needed for mypy
  155:         language_code = sys_info["LOCALE"]["language-code"]
  156:         encoding = sys_info["LOCALE"]["encoding"]
  157:         sys_info["LOCALE"] = f"{language_code}.{encoding}"
  158: 
  159:         maxlen = max(len(x) for x in deps)
  160:         print("\nINSTALLED VERSIONS")
  161:         print("------------------")
  162:         for k, v in sys_info.items():
  163:             print(f"{k:<{maxlen}}: {v}")
  164:         print("")
  165:         for k, v in deps.items():
  166:             print(f"{k:<{maxlen}}: {v}")
