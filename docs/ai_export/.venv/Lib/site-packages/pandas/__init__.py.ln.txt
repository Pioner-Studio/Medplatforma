    1: from __future__ import annotations
    2: 
    3: 
    4: # start delvewheel patch
    5: def _delvewheel_patch_1_5_4():
    6:     import os
    7:     libs_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, 'pandas.libs'))
    8:     if os.path.isdir(libs_dir):
    9:         os.add_dll_directory(libs_dir)
   10: 
   11: 
   12: _delvewheel_patch_1_5_4()
   13: del _delvewheel_patch_1_5_4
   14: # end delvewheel patch
   15: 
   16: import os
   17: import warnings
   18: 
   19: __docformat__ = "restructuredtext"
   20: 
   21: # Let users know if they're missing any of our hard dependencies
   22: _hard_dependencies = ("numpy", "pytz", "dateutil")
   23: _missing_dependencies = []
   24: 
   25: for _dependency in _hard_dependencies:
   26:     try:
   27:         __import__(_dependency)
   28:     except ImportError as _e:  # pragma: no cover
   29:         _missing_dependencies.append(f"{_dependency}: {_e}")
   30: 
   31: if _missing_dependencies:  # pragma: no cover
   32:     raise ImportError(
   33:         "Unable to import required dependencies:\n" + "\n".join(_missing_dependencies)
   34:     )
   35: del _hard_dependencies, _dependency, _missing_dependencies
   36: 
   37: try:
   38:     # numpy compat
   39:     from pandas.compat import (
   40:         is_numpy_dev as _is_numpy_dev,  # pyright: ignore[reportUnusedImport] # noqa: F401
   41:     )
   42: except ImportError as _err:  # pragma: no cover
   43:     _module = _err.name
   44:     raise ImportError(
   45:         f"C extension: {_module} not built. If you want to import "
   46:         "pandas from the source directory, you may need to run "
   47:         "'python setup.py build_ext' to build the C extensions first."
   48:     ) from _err
   49: 
   50: from pandas._config import (
   51:     get_option,
   52:     set_option,
   53:     reset_option,
   54:     describe_option,
   55:     option_context,
   56:     options,
   57: )
   58: 
   59: # let init-time option registration happen
   60: import pandas.core.config_init  # pyright: ignore[reportUnusedImport] # noqa: F401
   61: 
   62: from pandas.core.api import (
   63:     # dtype
   64:     ArrowDtype,
   65:     Int8Dtype,
   66:     Int16Dtype,
   67:     Int32Dtype,
   68:     Int64Dtype,
   69:     UInt8Dtype,
   70:     UInt16Dtype,
   71:     UInt32Dtype,
   72:     UInt64Dtype,
   73:     Float32Dtype,
   74:     Float64Dtype,
   75:     CategoricalDtype,
   76:     PeriodDtype,
   77:     IntervalDtype,
   78:     DatetimeTZDtype,
   79:     StringDtype,
   80:     BooleanDtype,
   81:     # missing
   82:     NA,
   83:     isna,
   84:     isnull,
   85:     notna,
   86:     notnull,
   87:     # indexes
   88:     Index,
   89:     CategoricalIndex,
   90:     RangeIndex,
   91:     MultiIndex,
   92:     IntervalIndex,
   93:     TimedeltaIndex,
   94:     DatetimeIndex,
   95:     PeriodIndex,
   96:     IndexSlice,
   97:     # tseries
   98:     NaT,
   99:     Period,
  100:     period_range,
  101:     Timedelta,
  102:     timedelta_range,
  103:     Timestamp,
  104:     date_range,
  105:     bdate_range,
  106:     Interval,
  107:     interval_range,
  108:     DateOffset,
  109:     # conversion
  110:     to_numeric,
  111:     to_datetime,
  112:     to_timedelta,
  113:     # misc
  114:     Flags,
  115:     Grouper,
  116:     factorize,
  117:     unique,
  118:     value_counts,
  119:     NamedAgg,
  120:     array,
  121:     Categorical,
  122:     set_eng_float_format,
  123:     Series,
  124:     DataFrame,
  125: )
  126: 
  127: from pandas.core.dtypes.dtypes import SparseDtype
  128: 
  129: from pandas.tseries.api import infer_freq
  130: from pandas.tseries import offsets
  131: 
  132: from pandas.core.computation.api import eval
  133: 
  134: from pandas.core.reshape.api import (
  135:     concat,
  136:     lreshape,
  137:     melt,
  138:     wide_to_long,
  139:     merge,
  140:     merge_asof,
  141:     merge_ordered,
  142:     crosstab,
  143:     pivot,
  144:     pivot_table,
  145:     get_dummies,
  146:     from_dummies,
  147:     cut,
  148:     qcut,
  149: )
  150: 
  151: from pandas import api, arrays, errors, io, plotting, tseries
  152: from pandas import testing
  153: from pandas.util._print_versions import show_versions
  154: 
  155: from pandas.io.api import (
  156:     # excel
  157:     ExcelFile,
  158:     ExcelWriter,
  159:     read_excel,
  160:     # parsers
  161:     read_csv,
  162:     read_fwf,
  163:     read_table,
  164:     # pickle
  165:     read_pickle,
  166:     to_pickle,
  167:     # pytables
  168:     HDFStore,
  169:     read_hdf,
  170:     # sql
  171:     read_sql,
  172:     read_sql_query,
  173:     read_sql_table,
  174:     # misc
  175:     read_clipboard,
  176:     read_parquet,
  177:     read_orc,
  178:     read_feather,
  179:     read_gbq,
  180:     read_html,
  181:     read_xml,
  182:     read_json,
  183:     read_stata,
  184:     read_sas,
  185:     read_spss,
  186: )
  187: 
  188: from pandas.io.json._normalize import json_normalize
  189: 
  190: from pandas.util._tester import test
  191: 
  192: # use the closest tagged version if possible
  193: _built_with_meson = False
  194: try:
  195:     from pandas._version_meson import (  # pyright: ignore [reportMissingImports]
  196:         __version__,
  197:         __git_version__,
  198:     )
  199: 
  200:     _built_with_meson = True
  201: except ImportError:
  202:     from pandas._version import get_versions
  203: 
  204:     v = get_versions()
  205:     __version__ = v.get("closest-tag", v["version"])
  206:     __git_version__ = v.get("full-revisionid")
  207:     del get_versions, v
  208: 
  209: # GH#55043 - deprecation of the data_manager option
  210: if "PANDAS_DATA_MANAGER" in os.environ:
  211:     warnings.warn(
  212:         "The env variable PANDAS_DATA_MANAGER is set. The data_manager option is "
  213:         "deprecated and will be removed in a future version. Only the BlockManager "
  214:         "will be available. Unset this environment variable to silence this warning.",
  215:         FutureWarning,
  216:         stacklevel=2,
  217:     )
  218: 
  219: del warnings, os
  220: 
  221: # module level doc-string
  222: __doc__ = """
  223: pandas - a powerful data analysis and manipulation library for Python
  224: =====================================================================
  225: 
  226: **pandas** is a Python package providing fast, flexible, and expressive data
  227: structures designed to make working with "relational" or "labeled" data both
  228: easy and intuitive. It aims to be the fundamental high-level building block for
  229: doing practical, **real world** data analysis in Python. Additionally, it has
  230: the broader goal of becoming **the most powerful and flexible open source data
  231: analysis / manipulation tool available in any language**. It is already well on
  232: its way toward this goal.
  233: 
  234: Main Features
  235: -------------
  236: Here are just a few of the things that pandas does well:
  237: 
  238:   - Easy handling of missing data in floating point as well as non-floating
  239:     point data.
  240:   - Size mutability: columns can be inserted and deleted from DataFrame and
  241:     higher dimensional objects
  242:   - Automatic and explicit data alignment: objects can be explicitly aligned
  243:     to a set of labels, or the user can simply ignore the labels and let
  244:     `Series`, `DataFrame`, etc. automatically align the data for you in
  245:     computations.
  246:   - Powerful, flexible group by functionality to perform split-apply-combine
  247:     operations on data sets, for both aggregating and transforming data.
  248:   - Make it easy to convert ragged, differently-indexed data in other Python
  249:     and NumPy data structures into DataFrame objects.
  250:   - Intelligent label-based slicing, fancy indexing, and subsetting of large
  251:     data sets.
  252:   - Intuitive merging and joining data sets.
  253:   - Flexible reshaping and pivoting of data sets.
  254:   - Hierarchical labeling of axes (possible to have multiple labels per tick).
  255:   - Robust IO tools for loading data from flat files (CSV and delimited),
  256:     Excel files, databases, and saving/loading data from the ultrafast HDF5
  257:     format.
  258:   - Time series-specific functionality: date range generation and frequency
  259:     conversion, moving window statistics, date shifting and lagging.
  260: """
  261: 
  262: # Use __all__ to let type checkers know what is part of the public API.
  263: # Pandas is not (yet) a py.typed library: the public API is determined
  264: # based on the documentation.
  265: __all__ = [
  266:     "ArrowDtype",
  267:     "BooleanDtype",
  268:     "Categorical",
  269:     "CategoricalDtype",
  270:     "CategoricalIndex",
  271:     "DataFrame",
  272:     "DateOffset",
  273:     "DatetimeIndex",
  274:     "DatetimeTZDtype",
  275:     "ExcelFile",
  276:     "ExcelWriter",
  277:     "Flags",
  278:     "Float32Dtype",
  279:     "Float64Dtype",
  280:     "Grouper",
  281:     "HDFStore",
  282:     "Index",
  283:     "IndexSlice",
  284:     "Int16Dtype",
  285:     "Int32Dtype",
  286:     "Int64Dtype",
  287:     "Int8Dtype",
  288:     "Interval",
  289:     "IntervalDtype",
  290:     "IntervalIndex",
  291:     "MultiIndex",
  292:     "NA",
  293:     "NaT",
  294:     "NamedAgg",
  295:     "Period",
  296:     "PeriodDtype",
  297:     "PeriodIndex",
  298:     "RangeIndex",
  299:     "Series",
  300:     "SparseDtype",
  301:     "StringDtype",
  302:     "Timedelta",
  303:     "TimedeltaIndex",
  304:     "Timestamp",
  305:     "UInt16Dtype",
  306:     "UInt32Dtype",
  307:     "UInt64Dtype",
  308:     "UInt8Dtype",
  309:     "api",
  310:     "array",
  311:     "arrays",
  312:     "bdate_range",
  313:     "concat",
  314:     "crosstab",
  315:     "cut",
  316:     "date_range",
  317:     "describe_option",
  318:     "errors",
  319:     "eval",
  320:     "factorize",
  321:     "get_dummies",
  322:     "from_dummies",
  323:     "get_option",
  324:     "infer_freq",
  325:     "interval_range",
  326:     "io",
  327:     "isna",
  328:     "isnull",
  329:     "json_normalize",
  330:     "lreshape",
  331:     "melt",
  332:     "merge",
  333:     "merge_asof",
  334:     "merge_ordered",
  335:     "notna",
  336:     "notnull",
  337:     "offsets",
  338:     "option_context",
  339:     "options",
  340:     "period_range",
  341:     "pivot",
  342:     "pivot_table",
  343:     "plotting",
  344:     "qcut",
  345:     "read_clipboard",
  346:     "read_csv",
  347:     "read_excel",
  348:     "read_feather",
  349:     "read_fwf",
  350:     "read_gbq",
  351:     "read_hdf",
  352:     "read_html",
  353:     "read_json",
  354:     "read_orc",
  355:     "read_parquet",
  356:     "read_pickle",
  357:     "read_sas",
  358:     "read_spss",
  359:     "read_sql",
  360:     "read_sql_query",
  361:     "read_sql_table",
  362:     "read_stata",
  363:     "read_table",
  364:     "read_xml",
  365:     "reset_option",
  366:     "set_eng_float_format",
  367:     "set_option",
  368:     "show_versions",
  369:     "test",
  370:     "testing",
  371:     "timedelta_range",
  372:     "to_datetime",
  373:     "to_numeric",
  374:     "to_pickle",
  375:     "to_timedelta",
  376:     "tseries",
  377:     "unique",
  378:     "value_counts",
  379:     "wide_to_long",
  380: ]
