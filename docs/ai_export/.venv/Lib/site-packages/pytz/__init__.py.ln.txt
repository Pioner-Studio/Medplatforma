    1: '''
    2: datetime.tzinfo timezone definitions generated from the
    3: Olson timezone database:
    4: 
    5:     ftp://elsie.nci.nih.gov/pub/tz*.tar.gz
    6: 
    7: See the datetime section of the Python Library Reference for information
    8: on how to use these modules.
    9: '''
   10: 
   11: import sys
   12: import datetime
   13: import os.path
   14: 
   15: from pytz.exceptions import AmbiguousTimeError
   16: from pytz.exceptions import InvalidTimeError
   17: from pytz.exceptions import NonExistentTimeError
   18: from pytz.exceptions import UnknownTimeZoneError
   19: from pytz.lazy import LazyDict, LazyList, LazySet  # noqa
   20: from pytz.tzinfo import unpickler, BaseTzInfo
   21: from pytz.tzfile import build_tzinfo
   22: 
   23: 
   24: # The IANA (nee Olson) database is updated several times a year.
   25: OLSON_VERSION = '2025b'
   26: VERSION = '2025.2'  # pip compatible version number.
   27: __version__ = VERSION
   28: 
   29: OLSEN_VERSION = OLSON_VERSION  # Old releases had this misspelling
   30: 
   31: __all__ = [
   32:     'timezone', 'utc', 'country_timezones', 'country_names',
   33:     'AmbiguousTimeError', 'InvalidTimeError',
   34:     'NonExistentTimeError', 'UnknownTimeZoneError',
   35:     'all_timezones', 'all_timezones_set',
   36:     'common_timezones', 'common_timezones_set',
   37:     'BaseTzInfo', 'FixedOffset',
   38: ]
   39: 
   40: 
   41: if sys.version_info[0] > 2:  # Python 3.x
   42: 
   43:     # Python 3.x doesn't have unicode(), making writing code
   44:     # for Python 2.3 and Python 3.x a pain.
   45:     unicode = str
   46: 
   47:     def ascii(s):
   48:         r"""
   49:         >>> ascii('Hello')
   50:         'Hello'
   51:         >>> ascii('\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
   52:         Traceback (most recent call last):
   53:             ...
   54:         UnicodeEncodeError: ...
   55:         """
   56:         if type(s) == bytes:
   57:             s = s.decode('ASCII')
   58:         else:
   59:             s.encode('ASCII')  # Raise an exception if not ASCII
   60:         return s  # But the string - not a byte string.
   61: 
   62: else:  # Python 2.x
   63: 
   64:     def ascii(s):
   65:         r"""
   66:         >>> ascii('Hello')
   67:         'Hello'
   68:         >>> ascii(u'Hello')
   69:         'Hello'
   70:         >>> ascii(u'\N{TRADE MARK SIGN}') #doctest: +IGNORE_EXCEPTION_DETAIL
   71:         Traceback (most recent call last):
   72:             ...
   73:         UnicodeEncodeError: ...
   74:         """
   75:         return s.encode('ASCII')
   76: 
   77: 
   78: def open_resource(name):
   79:     """Open a resource from the zoneinfo subdir for reading.
   80: 
   81:     Uses the pkg_resources module if available and no standard file
   82:     found at the calculated location.
   83: 
   84:     It is possible to specify different location for zoneinfo
   85:     subdir by using the PYTZ_TZDATADIR environment variable.
   86:     """
   87:     name_parts = name.lstrip('/').split('/')
   88:     for part in name_parts:
   89:         if part == os.path.pardir or os.sep in part:
   90:             raise ValueError('Bad path segment: %r' % part)
   91:     zoneinfo_dir = os.environ.get('PYTZ_TZDATADIR', None)
   92:     if zoneinfo_dir is not None:
   93:         filename = os.path.join(zoneinfo_dir, *name_parts)
   94:     else:
   95:         filename = os.path.join(os.path.dirname(__file__),
   96:                                 'zoneinfo', *name_parts)
   97:         if not os.path.exists(filename):
   98:             # http://bugs.launchpad.net/bugs/383171 - we avoid using this
   99:             # unless absolutely necessary to help when a broken version of
  100:             # pkg_resources is installed.
  101:             try:
  102:                 from pkg_resources import resource_stream
  103:             except ImportError:
  104:                 resource_stream = None
  105: 
  106:             if resource_stream is not None:
  107:                 return resource_stream(__name__, 'zoneinfo/' + name)
  108:     return open(filename, 'rb')
  109: 
  110: 
  111: def resource_exists(name):
  112:     """Return true if the given resource exists"""
  113:     try:
  114:         if os.environ.get('PYTZ_SKIPEXISTSCHECK', ''):
  115:             # In "standard" distributions, we can assume that
  116:             # all the listed timezones are present. As an
  117:             # import-speed optimization, you can set the
  118:             # PYTZ_SKIPEXISTSCHECK flag to skip checking
  119:             # for the presence of the resource file on disk.
  120:             return True
  121:         open_resource(name).close()
  122:         return True
  123:     except IOError:
  124:         return False
  125: 
  126: 
  127: _tzinfo_cache = {}
  128: 
  129: 
  130: def timezone(zone):
  131:     r''' Return a datetime.tzinfo implementation for the given timezone
  132: 
  133:     >>> from datetime import datetime, timedelta
  134:     >>> utc = timezone('UTC')
  135:     >>> eastern = timezone('US/Eastern')
  136:     >>> eastern.zone
  137:     'US/Eastern'
  138:     >>> timezone(unicode('US/Eastern')) is eastern
  139:     True
  140:     >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
  141:     >>> loc_dt = utc_dt.astimezone(eastern)
  142:     >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
  143:     >>> loc_dt.strftime(fmt)
  144:     '2002-10-27 01:00:00 EST (-0500)'
  145:     >>> (loc_dt - timedelta(minutes=10)).strftime(fmt)
  146:     '2002-10-27 00:50:00 EST (-0500)'
  147:     >>> eastern.normalize(loc_dt - timedelta(minutes=10)).strftime(fmt)
  148:     '2002-10-27 01:50:00 EDT (-0400)'
  149:     >>> (loc_dt + timedelta(minutes=10)).strftime(fmt)
  150:     '2002-10-27 01:10:00 EST (-0500)'
  151: 
  152:     Raises UnknownTimeZoneError if passed an unknown zone.
  153: 
  154:     >>> try:
  155:     ...     timezone('Asia/Shangri-La')
  156:     ... except UnknownTimeZoneError:
  157:     ...     print('Unknown')
  158:     Unknown
  159: 
  160:     >>> try:
  161:     ...     timezone(unicode('\N{TRADE MARK SIGN}'))
  162:     ... except UnknownTimeZoneError:
  163:     ...     print('Unknown')
  164:     Unknown
  165: 
  166:     '''
  167:     if zone is None:
  168:         raise UnknownTimeZoneError(None)
  169: 
  170:     if zone.upper() == 'UTC':
  171:         return utc
  172: 
  173:     try:
  174:         zone = ascii(zone)
  175:     except UnicodeEncodeError:
  176:         # All valid timezones are ASCII
  177:         raise UnknownTimeZoneError(zone)
  178: 
  179:     zone = _case_insensitive_zone_lookup(_unmunge_zone(zone))
  180:     if zone not in _tzinfo_cache:
  181:         if zone in all_timezones_set:  # noqa
  182:             fp = open_resource(zone)
  183:             try:
  184:                 _tzinfo_cache[zone] = build_tzinfo(zone, fp)
  185:             finally:
  186:                 fp.close()
  187:         else:
  188:             raise UnknownTimeZoneError(zone)
  189: 
  190:     return _tzinfo_cache[zone]
  191: 
  192: 
  193: def _unmunge_zone(zone):
  194:     """Undo the time zone name munging done by older versions of pytz."""
  195:     return zone.replace('_plus_', '+').replace('_minus_', '-')
  196: 
  197: 
  198: _all_timezones_lower_to_standard = None
  199: 
  200: 
  201: def _case_insensitive_zone_lookup(zone):
  202:     """case-insensitively matching timezone, else return zone unchanged"""
  203:     global _all_timezones_lower_to_standard
  204:     if _all_timezones_lower_to_standard is None:
  205:         _all_timezones_lower_to_standard = dict((tz.lower(), tz) for tz in _all_timezones_unchecked)  # noqa
  206:     return _all_timezones_lower_to_standard.get(zone.lower()) or zone  # noqa
  207: 
  208: 
  209: ZERO = datetime.timedelta(0)
  210: HOUR = datetime.timedelta(hours=1)
  211: 
  212: 
  213: class UTC(BaseTzInfo):
  214:     """UTC
  215: 
  216:     Optimized UTC implementation. It unpickles using the single module global
  217:     instance defined beneath this class declaration.
  218:     """
  219:     zone = "UTC"
  220: 
  221:     _utcoffset = ZERO
  222:     _dst = ZERO
  223:     _tzname = zone
  224: 
  225:     def fromutc(self, dt):
  226:         if dt.tzinfo is None:
  227:             return self.localize(dt)
  228:         return super(utc.__class__, self).fromutc(dt)
  229: 
  230:     def utcoffset(self, dt):
  231:         return ZERO
  232: 
  233:     def tzname(self, dt):
  234:         return "UTC"
  235: 
  236:     def dst(self, dt):
  237:         return ZERO
  238: 
  239:     def __reduce__(self):
  240:         return _UTC, ()
  241: 
  242:     def localize(self, dt, is_dst=False):
  243:         '''Convert naive time to local time'''
  244:         if dt.tzinfo is not None:
  245:             raise ValueError('Not naive datetime (tzinfo is already set)')
  246:         return dt.replace(tzinfo=self)
  247: 
  248:     def normalize(self, dt, is_dst=False):
  249:         '''Correct the timezone information on the given datetime'''
  250:         if dt.tzinfo is self:
  251:             return dt
  252:         if dt.tzinfo is None:
  253:             raise ValueError('Naive time - no tzinfo set')
  254:         return dt.astimezone(self)
  255: 
  256:     def __repr__(self):
  257:         return "<UTC>"
  258: 
  259:     def __str__(self):
  260:         return "UTC"
  261: 
  262: 
  263: UTC = utc = UTC()  # UTC is a singleton
  264: 
  265: 
  266: def _UTC():
  267:     """Factory function for utc unpickling.
  268: 
  269:     Makes sure that unpickling a utc instance always returns the same
  270:     module global.
  271: 
  272:     These examples belong in the UTC class above, but it is obscured; or in
  273:     the README.rst, but we are not depending on Python 2.4 so integrating
  274:     the README.rst examples with the unit tests is not trivial.
  275: 
  276:     >>> import datetime, pickle
  277:     >>> dt = datetime.datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)
  278:     >>> naive = dt.replace(tzinfo=None)
  279:     >>> p = pickle.dumps(dt, 1)
  280:     >>> naive_p = pickle.dumps(naive, 1)
  281:     >>> len(p) - len(naive_p)
  282:     17
  283:     >>> new = pickle.loads(p)
  284:     >>> new == dt
  285:     True
  286:     >>> new is dt
  287:     False
  288:     >>> new.tzinfo is dt.tzinfo
  289:     True
  290:     >>> utc is UTC is timezone('UTC')
  291:     True
  292:     >>> utc is timezone('GMT')
  293:     False
  294:     """
  295:     return utc
  296: 
  297: 
  298: _UTC.__safe_for_unpickling__ = True
  299: 
  300: 
  301: def _p(*args):
  302:     """Factory function for unpickling pytz tzinfo instances.
  303: 
  304:     Just a wrapper around tzinfo.unpickler to save a few bytes in each pickle
  305:     by shortening the path.
  306:     """
  307:     return unpickler(*args)
  308: 
  309: 
  310: _p.__safe_for_unpickling__ = True
  311: 
  312: 
  313: class _CountryTimezoneDict(LazyDict):
  314:     """Map ISO 3166 country code to a list of timezone names commonly used
  315:     in that country.
  316: 
  317:     iso3166_code is the two letter code used to identify the country.
  318: 
  319:     >>> def print_list(list_of_strings):
  320:     ...     'We use a helper so doctests work under Python 2.3 -> 3.x'
  321:     ...     for s in list_of_strings:
  322:     ...         print(s)
  323: 
  324:     >>> print_list(country_timezones['nz'])
  325:     Pacific/Auckland
  326:     Pacific/Chatham
  327:     >>> print_list(country_timezones['ch'])
  328:     Europe/Zurich
  329:     >>> print_list(country_timezones['CH'])
  330:     Europe/Zurich
  331:     >>> print_list(country_timezones[unicode('ch')])
  332:     Europe/Zurich
  333:     >>> print_list(country_timezones['XXX'])
  334:     Traceback (most recent call last):
  335:     ...
  336:     KeyError: 'XXX'
  337: 
  338:     Previously, this information was exposed as a function rather than a
  339:     dictionary. This is still supported::
  340: 
  341:     >>> print_list(country_timezones('nz'))
  342:     Pacific/Auckland
  343:     Pacific/Chatham
  344:     """
  345:     def __call__(self, iso3166_code):
  346:         """Backwards compatibility."""
  347:         return self[iso3166_code]
  348: 
  349:     def _fill(self):
  350:         data = {}
  351:         zone_tab = open_resource('zone.tab')
  352:         try:
  353:             for line in zone_tab:
  354:                 line = line.decode('UTF-8')
  355:                 if line.startswith('#'):
  356:                     continue
  357:                 code, coordinates, zone = line.split(None, 4)[:3]
  358:                 if zone not in all_timezones_set:  # noqa
  359:                     continue
  360:                 try:
  361:                     data[code].append(zone)
  362:                 except KeyError:
  363:                     data[code] = [zone]
  364:             self.data = data
  365:         finally:
  366:             zone_tab.close()
  367: 
  368: 
  369: country_timezones = _CountryTimezoneDict()
  370: 
  371: 
  372: class _CountryNameDict(LazyDict):
  373:     '''Dictionary proving ISO3166 code -> English name.
  374: 
  375:     >>> print(country_names['au'])
  376:     Australia
  377:     '''
  378:     def _fill(self):
  379:         data = {}
  380:         zone_tab = open_resource('iso3166.tab')
  381:         try:
  382:             for line in zone_tab.readlines():
  383:                 line = line.decode('UTF-8')
  384:                 if line.startswith('#'):
  385:                     continue
  386:                 code, name = line.split(None, 1)
  387:                 data[code] = name.strip()
  388:             self.data = data
  389:         finally:
  390:             zone_tab.close()
  391: 
  392: 
  393: country_names = _CountryNameDict()
  394: 
  395: 
  396: # Time-zone info based solely on fixed offsets
  397: 
  398: class _FixedOffset(datetime.tzinfo):
  399: 
  400:     zone = None  # to match the standard pytz API
  401: 
  402:     def __init__(self, minutes):
  403:         if abs(minutes) >= 1440:
  404:             raise ValueError("absolute offset is too large", minutes)
  405:         self._minutes = minutes
  406:         self._offset = datetime.timedelta(minutes=minutes)
  407: 
  408:     def utcoffset(self, dt):
  409:         return self._offset
  410: 
  411:     def __reduce__(self):
  412:         return FixedOffset, (self._minutes, )
  413: 
  414:     def dst(self, dt):
  415:         return ZERO
  416: 
  417:     def tzname(self, dt):
  418:         return None
  419: 
  420:     def __repr__(self):
  421:         return 'pytz.FixedOffset(%d)' % self._minutes
  422: 
  423:     def localize(self, dt, is_dst=False):
  424:         '''Convert naive time to local time'''
  425:         if dt.tzinfo is not None:
  426:             raise ValueError('Not naive datetime (tzinfo is already set)')
  427:         return dt.replace(tzinfo=self)
  428: 
  429:     def normalize(self, dt, is_dst=False):
  430:         '''Correct the timezone information on the given datetime'''
  431:         if dt.tzinfo is self:
  432:             return dt
  433:         if dt.tzinfo is None:
  434:             raise ValueError('Naive time - no tzinfo set')
  435:         return dt.astimezone(self)
  436: 
  437: 
  438: def FixedOffset(offset, _tzinfos={}):
  439:     """return a fixed-offset timezone based off a number of minutes.
  440: 
  441:         >>> one = FixedOffset(-330)
  442:         >>> one
  443:         pytz.FixedOffset(-330)
  444:         >>> str(one.utcoffset(datetime.datetime.now()))
  445:         '-1 day, 18:30:00'
  446:         >>> str(one.dst(datetime.datetime.now()))
  447:         '0:00:00'
  448: 
  449:         >>> two = FixedOffset(1380)
  450:         >>> two
  451:         pytz.FixedOffset(1380)
  452:         >>> str(two.utcoffset(datetime.datetime.now()))
  453:         '23:00:00'
  454:         >>> str(two.dst(datetime.datetime.now()))
  455:         '0:00:00'
  456: 
  457:     The datetime.timedelta must be between the range of -1 and 1 day,
  458:     non-inclusive.
  459: 
  460:         >>> FixedOffset(1440)
  461:         Traceback (most recent call last):
  462:         ...
  463:         ValueError: ('absolute offset is too large', 1440)
  464: 
  465:         >>> FixedOffset(-1440)
  466:         Traceback (most recent call last):
  467:         ...
  468:         ValueError: ('absolute offset is too large', -1440)
  469: 
  470:     An offset of 0 is special-cased to return UTC.
  471: 
  472:         >>> FixedOffset(0) is UTC
  473:         True
  474: 
  475:     There should always be only one instance of a FixedOffset per timedelta.
  476:     This should be true for multiple creation calls.
  477: 
  478:         >>> FixedOffset(-330) is one
  479:         True
  480:         >>> FixedOffset(1380) is two
  481:         True
  482: 
  483:     It should also be true for pickling.
  484: 
  485:         >>> import pickle
  486:         >>> pickle.loads(pickle.dumps(one)) is one
  487:         True
  488:         >>> pickle.loads(pickle.dumps(two)) is two
  489:         True
  490:     """
  491:     if offset == 0:
  492:         return UTC
  493: 
  494:     info = _tzinfos.get(offset)
  495:     if info is None:
  496:         # We haven't seen this one before. we need to save it.
  497: 
  498:         # Use setdefault to avoid a race condition and make sure we have
  499:         # only one
  500:         info = _tzinfos.setdefault(offset, _FixedOffset(offset))
  501: 
  502:     return info
  503: 
  504: 
  505: FixedOffset.__safe_for_unpickling__ = True
  506: 
  507: 
  508: def _test():
  509:     import doctest
  510:     sys.path.insert(0, os.pardir)
  511:     import pytz
  512:     return doctest.testmod(pytz)
  513: 
  514: 
  515: if __name__ == '__main__':
  516:     _test()
  517: _all_timezones_unchecked = \
  518: ['Africa/Abidjan',
  519:  'Africa/Accra',
  520:  'Africa/Addis_Ababa',
  521:  'Africa/Algiers',
  522:  'Africa/Asmara',
  523:  'Africa/Asmera',
  524:  'Africa/Bamako',
  525:  'Africa/Bangui',
  526:  'Africa/Banjul',
  527:  'Africa/Bissau',
  528:  'Africa/Blantyre',
  529:  'Africa/Brazzaville',
  530:  'Africa/Bujumbura',
  531:  'Africa/Cairo',
  532:  'Africa/Casablanca',
  533:  'Africa/Ceuta',
  534:  'Africa/Conakry',
  535:  'Africa/Dakar',
  536:  'Africa/Dar_es_Salaam',
  537:  'Africa/Djibouti',
  538:  'Africa/Douala',
  539:  'Africa/El_Aaiun',
  540:  'Africa/Freetown',
  541:  'Africa/Gaborone',
  542:  'Africa/Harare',
  543:  'Africa/Johannesburg',
  544:  'Africa/Juba',
  545:  'Africa/Kampala',
  546:  'Africa/Khartoum',
  547:  'Africa/Kigali',
  548:  'Africa/Kinshasa',
  549:  'Africa/Lagos',
  550:  'Africa/Libreville',
  551:  'Africa/Lome',
  552:  'Africa/Luanda',
  553:  'Africa/Lubumbashi',
  554:  'Africa/Lusaka',
  555:  'Africa/Malabo',
  556:  'Africa/Maputo',
  557:  'Africa/Maseru',
  558:  'Africa/Mbabane',
  559:  'Africa/Mogadishu',
  560:  'Africa/Monrovia',
  561:  'Africa/Nairobi',
  562:  'Africa/Ndjamena',
  563:  'Africa/Niamey',
  564:  'Africa/Nouakchott',
  565:  'Africa/Ouagadougou',
  566:  'Africa/Porto-Novo',
  567:  'Africa/Sao_Tome',
  568:  'Africa/Timbuktu',
  569:  'Africa/Tripoli',
  570:  'Africa/Tunis',
  571:  'Africa/Windhoek',
  572:  'America/Adak',
  573:  'America/Anchorage',
  574:  'America/Anguilla',
  575:  'America/Antigua',
  576:  'America/Araguaina',
  577:  'America/Argentina/Buenos_Aires',
  578:  'America/Argentina/Catamarca',
  579:  'America/Argentina/ComodRivadavia',
  580:  'America/Argentina/Cordoba',
  581:  'America/Argentina/Jujuy',
  582:  'America/Argentina/La_Rioja',
  583:  'America/Argentina/Mendoza',
  584:  'America/Argentina/Rio_Gallegos',
  585:  'America/Argentina/Salta',
  586:  'America/Argentina/San_Juan',
  587:  'America/Argentina/San_Luis',
  588:  'America/Argentina/Tucuman',
  589:  'America/Argentina/Ushuaia',
  590:  'America/Aruba',
  591:  'America/Asuncion',
  592:  'America/Atikokan',
  593:  'America/Atka',
  594:  'America/Bahia',
  595:  'America/Bahia_Banderas',
  596:  'America/Barbados',
  597:  'America/Belem',
  598:  'America/Belize',
  599:  'America/Blanc-Sablon',
  600:  'America/Boa_Vista',
  601:  'America/Bogota',
  602:  'America/Boise',
  603:  'America/Buenos_Aires',
  604:  'America/Cambridge_Bay',
  605:  'America/Campo_Grande',
  606:  'America/Cancun',
  607:  'America/Caracas',
  608:  'America/Catamarca',
  609:  'America/Cayenne',
  610:  'America/Cayman',
  611:  'America/Chicago',
  612:  'America/Chihuahua',
  613:  'America/Ciudad_Juarez',
  614:  'America/Coral_Harbour',
  615:  'America/Cordoba',
  616:  'America/Costa_Rica',
  617:  'America/Coyhaique',
  618:  'America/Creston',
  619:  'America/Cuiaba',
  620:  'America/Curacao',
  621:  'America/Danmarkshavn',
  622:  'America/Dawson',
  623:  'America/Dawson_Creek',
  624:  'America/Denver',
  625:  'America/Detroit',
  626:  'America/Dominica',
  627:  'America/Edmonton',
  628:  'America/Eirunepe',
  629:  'America/El_Salvador',
  630:  'America/Ensenada',
  631:  'America/Fort_Nelson',
  632:  'America/Fort_Wayne',
  633:  'America/Fortaleza',
  634:  'America/Glace_Bay',
  635:  'America/Godthab',
  636:  'America/Goose_Bay',
  637:  'America/Grand_Turk',
  638:  'America/Grenada',
  639:  'America/Guadeloupe',
  640:  'America/Guatemala',
  641:  'America/Guayaquil',
  642:  'America/Guyana',
  643:  'America/Halifax',
  644:  'America/Havana',
  645:  'America/Hermosillo',
  646:  'America/Indiana/Indianapolis',
  647:  'America/Indiana/Knox',
  648:  'America/Indiana/Marengo',
  649:  'America/Indiana/Petersburg',
  650:  'America/Indiana/Tell_City',
  651:  'America/Indiana/Vevay',
  652:  'America/Indiana/Vincennes',
  653:  'America/Indiana/Winamac',
  654:  'America/Indianapolis',
  655:  'America/Inuvik',
  656:  'America/Iqaluit',
  657:  'America/Jamaica',
  658:  'America/Jujuy',
  659:  'America/Juneau',
  660:  'America/Kentucky/Louisville',
  661:  'America/Kentucky/Monticello',
  662:  'America/Knox_IN',
  663:  'America/Kralendijk',
  664:  'America/La_Paz',
  665:  'America/Lima',
  666:  'America/Los_Angeles',
  667:  'America/Louisville',
  668:  'America/Lower_Princes',
  669:  'America/Maceio',
  670:  'America/Managua',
  671:  'America/Manaus',
  672:  'America/Marigot',
  673:  'America/Martinique',
  674:  'America/Matamoros',
  675:  'America/Mazatlan',
  676:  'America/Mendoza',
  677:  'America/Menominee',
  678:  'America/Merida',
  679:  'America/Metlakatla',
  680:  'America/Mexico_City',
  681:  'America/Miquelon',
  682:  'America/Moncton',
  683:  'America/Monterrey',
  684:  'America/Montevideo',
  685:  'America/Montreal',
  686:  'America/Montserrat',
  687:  'America/Nassau',
  688:  'America/New_York',
  689:  'America/Nipigon',
  690:  'America/Nome',
  691:  'America/Noronha',
  692:  'America/North_Dakota/Beulah',
  693:  'America/North_Dakota/Center',
  694:  'America/North_Dakota/New_Salem',
  695:  'America/Nuuk',
  696:  'America/Ojinaga',
  697:  'America/Panama',
  698:  'America/Pangnirtung',
  699:  'America/Paramaribo',
  700:  'America/Phoenix',
  701:  'America/Port-au-Prince',
  702:  'America/Port_of_Spain',
  703:  'America/Porto_Acre',
  704:  'America/Porto_Velho',
  705:  'America/Puerto_Rico',
  706:  'America/Punta_Arenas',
  707:  'America/Rainy_River',
  708:  'America/Rankin_Inlet',
  709:  'America/Recife',
  710:  'America/Regina',
  711:  'America/Resolute',
  712:  'America/Rio_Branco',
  713:  'America/Rosario',
  714:  'America/Santa_Isabel',
  715:  'America/Santarem',
  716:  'America/Santiago',
  717:  'America/Santo_Domingo',
  718:  'America/Sao_Paulo',
  719:  'America/Scoresbysund',
  720:  'America/Shiprock',
  721:  'America/Sitka',
  722:  'America/St_Barthelemy',
  723:  'America/St_Johns',
  724:  'America/St_Kitts',
  725:  'America/St_Lucia',
  726:  'America/St_Thomas',
  727:  'America/St_Vincent',
  728:  'America/Swift_Current',
  729:  'America/Tegucigalpa',
  730:  'America/Thule',
  731:  'America/Thunder_Bay',
  732:  'America/Tijuana',
  733:  'America/Toronto',
  734:  'America/Tortola',
  735:  'America/Vancouver',
  736:  'America/Virgin',
  737:  'America/Whitehorse',
  738:  'America/Winnipeg',
  739:  'America/Yakutat',
  740:  'America/Yellowknife',
  741:  'Antarctica/Casey',
  742:  'Antarctica/Davis',
  743:  'Antarctica/DumontDUrville',
  744:  'Antarctica/Macquarie',
  745:  'Antarctica/Mawson',
  746:  'Antarctica/McMurdo',
  747:  'Antarctica/Palmer',
  748:  'Antarctica/Rothera',
  749:  'Antarctica/South_Pole',
  750:  'Antarctica/Syowa',
  751:  'Antarctica/Troll',
  752:  'Antarctica/Vostok',
  753:  'Arctic/Longyearbyen',
  754:  'Asia/Aden',
  755:  'Asia/Almaty',
  756:  'Asia/Amman',
  757:  'Asia/Anadyr',
  758:  'Asia/Aqtau',
  759:  'Asia/Aqtobe',
  760:  'Asia/Ashgabat',
  761:  'Asia/Ashkhabad',
  762:  'Asia/Atyrau',
  763:  'Asia/Baghdad',
  764:  'Asia/Bahrain',
  765:  'Asia/Baku',
  766:  'Asia/Bangkok',
  767:  'Asia/Barnaul',
  768:  'Asia/Beirut',
  769:  'Asia/Bishkek',
  770:  'Asia/Brunei',
  771:  'Asia/Calcutta',
  772:  'Asia/Chita',
  773:  'Asia/Choibalsan',
  774:  'Asia/Chongqing',
  775:  'Asia/Chungking',
  776:  'Asia/Colombo',
  777:  'Asia/Dacca',
  778:  'Asia/Damascus',
  779:  'Asia/Dhaka',
  780:  'Asia/Dili',
  781:  'Asia/Dubai',
  782:  'Asia/Dushanbe',
  783:  'Asia/Famagusta',
  784:  'Asia/Gaza',
  785:  'Asia/Harbin',
  786:  'Asia/Hebron',
  787:  'Asia/Ho_Chi_Minh',
  788:  'Asia/Hong_Kong',
  789:  'Asia/Hovd',
  790:  'Asia/Irkutsk',
  791:  'Asia/Istanbul',
  792:  'Asia/Jakarta',
  793:  'Asia/Jayapura',
  794:  'Asia/Jerusalem',
  795:  'Asia/Kabul',
  796:  'Asia/Kamchatka',
  797:  'Asia/Karachi',
  798:  'Asia/Kashgar',
  799:  'Asia/Kathmandu',
  800:  'Asia/Katmandu',
  801:  'Asia/Khandyga',
  802:  'Asia/Kolkata',
  803:  'Asia/Krasnoyarsk',
  804:  'Asia/Kuala_Lumpur',
  805:  'Asia/Kuching',
  806:  'Asia/Kuwait',
  807:  'Asia/Macao',
  808:  'Asia/Macau',
  809:  'Asia/Magadan',
  810:  'Asia/Makassar',
  811:  'Asia/Manila',
  812:  'Asia/Muscat',
  813:  'Asia/Nicosia',
  814:  'Asia/Novokuznetsk',
  815:  'Asia/Novosibirsk',
  816:  'Asia/Omsk',
  817:  'Asia/Oral',
  818:  'Asia/Phnom_Penh',
  819:  'Asia/Pontianak',
  820:  'Asia/Pyongyang',
  821:  'Asia/Qatar',
  822:  'Asia/Qostanay',
  823:  'Asia/Qyzylorda',
  824:  'Asia/Rangoon',
  825:  'Asia/Riyadh',
  826:  'Asia/Saigon',
  827:  'Asia/Sakhalin',
  828:  'Asia/Samarkand',
  829:  'Asia/Seoul',
  830:  'Asia/Shanghai',
  831:  'Asia/Singapore',
  832:  'Asia/Srednekolymsk',
  833:  'Asia/Taipei',
  834:  'Asia/Tashkent',
  835:  'Asia/Tbilisi',
  836:  'Asia/Tehran',
  837:  'Asia/Tel_Aviv',
  838:  'Asia/Thimbu',
  839:  'Asia/Thimphu',
  840:  'Asia/Tokyo',
  841:  'Asia/Tomsk',
  842:  'Asia/Ujung_Pandang',
  843:  'Asia/Ulaanbaatar',
  844:  'Asia/Ulan_Bator',
  845:  'Asia/Urumqi',
  846:  'Asia/Ust-Nera',
  847:  'Asia/Vientiane',
  848:  'Asia/Vladivostok',
  849:  'Asia/Yakutsk',
  850:  'Asia/Yangon',
  851:  'Asia/Yekaterinburg',
  852:  'Asia/Yerevan',
  853:  'Atlantic/Azores',
  854:  'Atlantic/Bermuda',
  855:  'Atlantic/Canary',
  856:  'Atlantic/Cape_Verde',
  857:  'Atlantic/Faeroe',
  858:  'Atlantic/Faroe',
  859:  'Atlantic/Jan_Mayen',
  860:  'Atlantic/Madeira',
  861:  'Atlantic/Reykjavik',
  862:  'Atlantic/South_Georgia',
  863:  'Atlantic/St_Helena',
  864:  'Atlantic/Stanley',
  865:  'Australia/ACT',
  866:  'Australia/Adelaide',
  867:  'Australia/Brisbane',
  868:  'Australia/Broken_Hill',
  869:  'Australia/Canberra',
  870:  'Australia/Currie',
  871:  'Australia/Darwin',
  872:  'Australia/Eucla',
  873:  'Australia/Hobart',
  874:  'Australia/LHI',
  875:  'Australia/Lindeman',
  876:  'Australia/Lord_Howe',
  877:  'Australia/Melbourne',
  878:  'Australia/NSW',
  879:  'Australia/North',
  880:  'Australia/Perth',
  881:  'Australia/Queensland',
  882:  'Australia/South',
  883:  'Australia/Sydney',
  884:  'Australia/Tasmania',
  885:  'Australia/Victoria',
  886:  'Australia/West',
  887:  'Australia/Yancowinna',
  888:  'Brazil/Acre',
  889:  'Brazil/DeNoronha',
  890:  'Brazil/East',
  891:  'Brazil/West',
  892:  'CET',
  893:  'CST6CDT',
  894:  'Canada/Atlantic',
  895:  'Canada/Central',
  896:  'Canada/Eastern',
  897:  'Canada/Mountain',
  898:  'Canada/Newfoundland',
  899:  'Canada/Pacific',
  900:  'Canada/Saskatchewan',
  901:  'Canada/Yukon',
  902:  'Chile/Continental',
  903:  'Chile/EasterIsland',
  904:  'Cuba',
  905:  'EET',
  906:  'EST',
  907:  'EST5EDT',
  908:  'Egypt',
  909:  'Eire',
  910:  'Etc/GMT',
  911:  'Etc/GMT+0',
  912:  'Etc/GMT+1',
  913:  'Etc/GMT+10',
  914:  'Etc/GMT+11',
  915:  'Etc/GMT+12',
  916:  'Etc/GMT+2',
  917:  'Etc/GMT+3',
  918:  'Etc/GMT+4',
  919:  'Etc/GMT+5',
  920:  'Etc/GMT+6',
  921:  'Etc/GMT+7',
  922:  'Etc/GMT+8',
  923:  'Etc/GMT+9',
  924:  'Etc/GMT-0',
  925:  'Etc/GMT-1',
  926:  'Etc/GMT-10',
  927:  'Etc/GMT-11',
  928:  'Etc/GMT-12',
  929:  'Etc/GMT-13',
  930:  'Etc/GMT-14',
  931:  'Etc/GMT-2',
  932:  'Etc/GMT-3',
  933:  'Etc/GMT-4',
  934:  'Etc/GMT-5',
  935:  'Etc/GMT-6',
  936:  'Etc/GMT-7',
  937:  'Etc/GMT-8',
  938:  'Etc/GMT-9',
  939:  'Etc/GMT0',
  940:  'Etc/Greenwich',
  941:  'Etc/UCT',
  942:  'Etc/UTC',
  943:  'Etc/Universal',
  944:  'Etc/Zulu',
  945:  'Europe/Amsterdam',
  946:  'Europe/Andorra',
  947:  'Europe/Astrakhan',
  948:  'Europe/Athens',
  949:  'Europe/Belfast',
  950:  'Europe/Belgrade',
  951:  'Europe/Berlin',
  952:  'Europe/Bratislava',
  953:  'Europe/Brussels',
  954:  'Europe/Bucharest',
  955:  'Europe/Budapest',
  956:  'Europe/Busingen',
  957:  'Europe/Chisinau',
  958:  'Europe/Copenhagen',
  959:  'Europe/Dublin',
  960:  'Europe/Gibraltar',
  961:  'Europe/Guernsey',
  962:  'Europe/Helsinki',
  963:  'Europe/Isle_of_Man',
  964:  'Europe/Istanbul',
  965:  'Europe/Jersey',
  966:  'Europe/Kaliningrad',
  967:  'Europe/Kiev',
  968:  'Europe/Kirov',
  969:  'Europe/Kyiv',
  970:  'Europe/Lisbon',
  971:  'Europe/Ljubljana',
  972:  'Europe/London',
  973:  'Europe/Luxembourg',
  974:  'Europe/Madrid',
  975:  'Europe/Malta',
  976:  'Europe/Mariehamn',
  977:  'Europe/Minsk',
  978:  'Europe/Monaco',
  979:  'Europe/Moscow',
  980:  'Europe/Nicosia',
  981:  'Europe/Oslo',
  982:  'Europe/Paris',
  983:  'Europe/Podgorica',
  984:  'Europe/Prague',
  985:  'Europe/Riga',
  986:  'Europe/Rome',
  987:  'Europe/Samara',
  988:  'Europe/San_Marino',
  989:  'Europe/Sarajevo',
  990:  'Europe/Saratov',
  991:  'Europe/Simferopol',
  992:  'Europe/Skopje',
  993:  'Europe/Sofia',
  994:  'Europe/Stockholm',
  995:  'Europe/Tallinn',
  996:  'Europe/Tirane',
  997:  'Europe/Tiraspol',
  998:  'Europe/Ulyanovsk',
  999:  'Europe/Uzhgorod',
 1000:  'Europe/Vaduz',
 1001:  'Europe/Vatican',
 1002:  'Europe/Vienna',
 1003:  'Europe/Vilnius',
 1004:  'Europe/Volgograd',
 1005:  'Europe/Warsaw',
 1006:  'Europe/Zagreb',
 1007:  'Europe/Zaporozhye',
 1008:  'Europe/Zurich',
 1009:  'GB',
 1010:  'GB-Eire',
 1011:  'GMT',
 1012:  'GMT+0',
 1013:  'GMT-0',
 1014:  'GMT0',
 1015:  'Greenwich',
 1016:  'HST',
 1017:  'Hongkong',
 1018:  'Iceland',
 1019:  'Indian/Antananarivo',
 1020:  'Indian/Chagos',
 1021:  'Indian/Christmas',
 1022:  'Indian/Cocos',
 1023:  'Indian/Comoro',
 1024:  'Indian/Kerguelen',
 1025:  'Indian/Mahe',
 1026:  'Indian/Maldives',
 1027:  'Indian/Mauritius',
 1028:  'Indian/Mayotte',
 1029:  'Indian/Reunion',
 1030:  'Iran',
 1031:  'Israel',
 1032:  'Jamaica',
 1033:  'Japan',
 1034:  'Kwajalein',
 1035:  'Libya',
 1036:  'MET',
 1037:  'MST',
 1038:  'MST7MDT',
 1039:  'Mexico/BajaNorte',
 1040:  'Mexico/BajaSur',
 1041:  'Mexico/General',
 1042:  'NZ',
 1043:  'NZ-CHAT',
 1044:  'Navajo',
 1045:  'PRC',
 1046:  'PST8PDT',
 1047:  'Pacific/Apia',
 1048:  'Pacific/Auckland',
 1049:  'Pacific/Bougainville',
 1050:  'Pacific/Chatham',
 1051:  'Pacific/Chuuk',
 1052:  'Pacific/Easter',
 1053:  'Pacific/Efate',
 1054:  'Pacific/Enderbury',
 1055:  'Pacific/Fakaofo',
 1056:  'Pacific/Fiji',
 1057:  'Pacific/Funafuti',
 1058:  'Pacific/Galapagos',
 1059:  'Pacific/Gambier',
 1060:  'Pacific/Guadalcanal',
 1061:  'Pacific/Guam',
 1062:  'Pacific/Honolulu',
 1063:  'Pacific/Johnston',
 1064:  'Pacific/Kanton',
 1065:  'Pacific/Kiritimati',
 1066:  'Pacific/Kosrae',
 1067:  'Pacific/Kwajalein',
 1068:  'Pacific/Majuro',
 1069:  'Pacific/Marquesas',
 1070:  'Pacific/Midway',
 1071:  'Pacific/Nauru',
 1072:  'Pacific/Niue',
 1073:  'Pacific/Norfolk',
 1074:  'Pacific/Noumea',
 1075:  'Pacific/Pago_Pago',
 1076:  'Pacific/Palau',
 1077:  'Pacific/Pitcairn',
 1078:  'Pacific/Pohnpei',
 1079:  'Pacific/Ponape',
 1080:  'Pacific/Port_Moresby',
 1081:  'Pacific/Rarotonga',
 1082:  'Pacific/Saipan',
 1083:  'Pacific/Samoa',
 1084:  'Pacific/Tahiti',
 1085:  'Pacific/Tarawa',
 1086:  'Pacific/Tongatapu',
 1087:  'Pacific/Truk',
 1088:  'Pacific/Wake',
 1089:  'Pacific/Wallis',
 1090:  'Pacific/Yap',
 1091:  'Poland',
 1092:  'Portugal',
 1093:  'ROC',
 1094:  'ROK',
 1095:  'Singapore',
 1096:  'Turkey',
 1097:  'UCT',
 1098:  'US/Alaska',
 1099:  'US/Aleutian',
 1100:  'US/Arizona',
 1101:  'US/Central',
 1102:  'US/East-Indiana',
 1103:  'US/Eastern',
 1104:  'US/Hawaii',
 1105:  'US/Indiana-Starke',
 1106:  'US/Michigan',
 1107:  'US/Mountain',
 1108:  'US/Pacific',
 1109:  'US/Samoa',
 1110:  'UTC',
 1111:  'Universal',
 1112:  'W-SU',
 1113:  'WET',
 1114:  'Zulu']
 1115: all_timezones = LazyList(
 1116:         tz for tz in _all_timezones_unchecked if resource_exists(tz))
 1117: 
 1118: all_timezones_set = LazySet(all_timezones)
 1119: common_timezones = \
 1120: ['Africa/Abidjan',
 1121:  'Africa/Accra',
 1122:  'Africa/Addis_Ababa',
 1123:  'Africa/Algiers',
 1124:  'Africa/Asmara',
 1125:  'Africa/Bamako',
 1126:  'Africa/Bangui',
 1127:  'Africa/Banjul',
 1128:  'Africa/Bissau',
 1129:  'Africa/Blantyre',
 1130:  'Africa/Brazzaville',
 1131:  'Africa/Bujumbura',
 1132:  'Africa/Cairo',
 1133:  'Africa/Casablanca',
 1134:  'Africa/Ceuta',
 1135:  'Africa/Conakry',
 1136:  'Africa/Dakar',
 1137:  'Africa/Dar_es_Salaam',
 1138:  'Africa/Djibouti',
 1139:  'Africa/Douala',
 1140:  'Africa/El_Aaiun',
 1141:  'Africa/Freetown',
 1142:  'Africa/Gaborone',
 1143:  'Africa/Harare',
 1144:  'Africa/Johannesburg',
 1145:  'Africa/Juba',
 1146:  'Africa/Kampala',
 1147:  'Africa/Khartoum',
 1148:  'Africa/Kigali',
 1149:  'Africa/Kinshasa',
 1150:  'Africa/Lagos',
 1151:  'Africa/Libreville',
 1152:  'Africa/Lome',
 1153:  'Africa/Luanda',
 1154:  'Africa/Lubumbashi',
 1155:  'Africa/Lusaka',
 1156:  'Africa/Malabo',
 1157:  'Africa/Maputo',
 1158:  'Africa/Maseru',
 1159:  'Africa/Mbabane',
 1160:  'Africa/Mogadishu',
 1161:  'Africa/Monrovia',
 1162:  'Africa/Nairobi',
 1163:  'Africa/Ndjamena',
 1164:  'Africa/Niamey',
 1165:  'Africa/Nouakchott',
 1166:  'Africa/Ouagadougou',
 1167:  'Africa/Porto-Novo',
 1168:  'Africa/Sao_Tome',
 1169:  'Africa/Tripoli',
 1170:  'Africa/Tunis',
 1171:  'Africa/Windhoek',
 1172:  'America/Adak',
 1173:  'America/Anchorage',
 1174:  'America/Anguilla',
 1175:  'America/Antigua',
 1176:  'America/Araguaina',
 1177:  'America/Argentina/Buenos_Aires',
 1178:  'America/Argentina/Catamarca',
 1179:  'America/Argentina/Cordoba',
 1180:  'America/Argentina/Jujuy',
 1181:  'America/Argentina/La_Rioja',
 1182:  'America/Argentina/Mendoza',
 1183:  'America/Argentina/Rio_Gallegos',
 1184:  'America/Argentina/Salta',
 1185:  'America/Argentina/San_Juan',
 1186:  'America/Argentina/San_Luis',
 1187:  'America/Argentina/Tucuman',
 1188:  'America/Argentina/Ushuaia',
 1189:  'America/Aruba',
 1190:  'America/Asuncion',
 1191:  'America/Atikokan',
 1192:  'America/Bahia',
 1193:  'America/Bahia_Banderas',
 1194:  'America/Barbados',
 1195:  'America/Belem',
 1196:  'America/Belize',
 1197:  'America/Blanc-Sablon',
 1198:  'America/Boa_Vista',
 1199:  'America/Bogota',
 1200:  'America/Boise',
 1201:  'America/Cambridge_Bay',
 1202:  'America/Campo_Grande',
 1203:  'America/Cancun',
 1204:  'America/Caracas',
 1205:  'America/Cayenne',
 1206:  'America/Cayman',
 1207:  'America/Chicago',
 1208:  'America/Chihuahua',
 1209:  'America/Ciudad_Juarez',
 1210:  'America/Costa_Rica',
 1211:  'America/Coyhaique',
 1212:  'America/Creston',
 1213:  'America/Cuiaba',
 1214:  'America/Curacao',
 1215:  'America/Danmarkshavn',
 1216:  'America/Dawson',
 1217:  'America/Dawson_Creek',
 1218:  'America/Denver',
 1219:  'America/Detroit',
 1220:  'America/Dominica',
 1221:  'America/Edmonton',
 1222:  'America/Eirunepe',
 1223:  'America/El_Salvador',
 1224:  'America/Fort_Nelson',
 1225:  'America/Fortaleza',
 1226:  'America/Glace_Bay',
 1227:  'America/Goose_Bay',
 1228:  'America/Grand_Turk',
 1229:  'America/Grenada',
 1230:  'America/Guadeloupe',
 1231:  'America/Guatemala',
 1232:  'America/Guayaquil',
 1233:  'America/Guyana',
 1234:  'America/Halifax',
 1235:  'America/Havana',
 1236:  'America/Hermosillo',
 1237:  'America/Indiana/Indianapolis',
 1238:  'America/Indiana/Knox',
 1239:  'America/Indiana/Marengo',
 1240:  'America/Indiana/Petersburg',
 1241:  'America/Indiana/Tell_City',
 1242:  'America/Indiana/Vevay',
 1243:  'America/Indiana/Vincennes',
 1244:  'America/Indiana/Winamac',
 1245:  'America/Inuvik',
 1246:  'America/Iqaluit',
 1247:  'America/Jamaica',
 1248:  'America/Juneau',
 1249:  'America/Kentucky/Louisville',
 1250:  'America/Kentucky/Monticello',
 1251:  'America/Kralendijk',
 1252:  'America/La_Paz',
 1253:  'America/Lima',
 1254:  'America/Los_Angeles',
 1255:  'America/Lower_Princes',
 1256:  'America/Maceio',
 1257:  'America/Managua',
 1258:  'America/Manaus',
 1259:  'America/Marigot',
 1260:  'America/Martinique',
 1261:  'America/Matamoros',
 1262:  'America/Mazatlan',
 1263:  'America/Menominee',
 1264:  'America/Merida',
 1265:  'America/Metlakatla',
 1266:  'America/Mexico_City',
 1267:  'America/Miquelon',
 1268:  'America/Moncton',
 1269:  'America/Monterrey',
 1270:  'America/Montevideo',
 1271:  'America/Montserrat',
 1272:  'America/Nassau',
 1273:  'America/New_York',
 1274:  'America/Nome',
 1275:  'America/Noronha',
 1276:  'America/North_Dakota/Beulah',
 1277:  'America/North_Dakota/Center',
 1278:  'America/North_Dakota/New_Salem',
 1279:  'America/Nuuk',
 1280:  'America/Ojinaga',
 1281:  'America/Panama',
 1282:  'America/Paramaribo',
 1283:  'America/Phoenix',
 1284:  'America/Port-au-Prince',
 1285:  'America/Port_of_Spain',
 1286:  'America/Porto_Velho',
 1287:  'America/Puerto_Rico',
 1288:  'America/Punta_Arenas',
 1289:  'America/Rankin_Inlet',
 1290:  'America/Recife',
 1291:  'America/Regina',
 1292:  'America/Resolute',
 1293:  'America/Rio_Branco',
 1294:  'America/Santarem',
 1295:  'America/Santiago',
 1296:  'America/Santo_Domingo',
 1297:  'America/Sao_Paulo',
 1298:  'America/Scoresbysund',
 1299:  'America/Sitka',
 1300:  'America/St_Barthelemy',
 1301:  'America/St_Johns',
 1302:  'America/St_Kitts',
 1303:  'America/St_Lucia',
 1304:  'America/St_Thomas',
 1305:  'America/St_Vincent',
 1306:  'America/Swift_Current',
 1307:  'America/Tegucigalpa',
 1308:  'America/Thule',
 1309:  'America/Tijuana',
 1310:  'America/Toronto',
 1311:  'America/Tortola',
 1312:  'America/Vancouver',
 1313:  'America/Whitehorse',
 1314:  'America/Winnipeg',
 1315:  'America/Yakutat',
 1316:  'Antarctica/Casey',
 1317:  'Antarctica/Davis',
 1318:  'Antarctica/DumontDUrville',
 1319:  'Antarctica/Macquarie',
 1320:  'Antarctica/Mawson',
 1321:  'Antarctica/McMurdo',
 1322:  'Antarctica/Palmer',
 1323:  'Antarctica/Rothera',
 1324:  'Antarctica/Syowa',
 1325:  'Antarctica/Troll',
 1326:  'Antarctica/Vostok',
 1327:  'Arctic/Longyearbyen',
 1328:  'Asia/Aden',
 1329:  'Asia/Almaty',
 1330:  'Asia/Amman',
 1331:  'Asia/Anadyr',
 1332:  'Asia/Aqtau',
 1333:  'Asia/Aqtobe',
 1334:  'Asia/Ashgabat',
 1335:  'Asia/Atyrau',
 1336:  'Asia/Baghdad',
 1337:  'Asia/Bahrain',
 1338:  'Asia/Baku',
 1339:  'Asia/Bangkok',
 1340:  'Asia/Barnaul',
 1341:  'Asia/Beirut',
 1342:  'Asia/Bishkek',
 1343:  'Asia/Brunei',
 1344:  'Asia/Chita',
 1345:  'Asia/Colombo',
 1346:  'Asia/Damascus',
 1347:  'Asia/Dhaka',
 1348:  'Asia/Dili',
 1349:  'Asia/Dubai',
 1350:  'Asia/Dushanbe',
 1351:  'Asia/Famagusta',
 1352:  'Asia/Gaza',
 1353:  'Asia/Hebron',
 1354:  'Asia/Ho_Chi_Minh',
 1355:  'Asia/Hong_Kong',
 1356:  'Asia/Hovd',
 1357:  'Asia/Irkutsk',
 1358:  'Asia/Jakarta',
 1359:  'Asia/Jayapura',
 1360:  'Asia/Jerusalem',
 1361:  'Asia/Kabul',
 1362:  'Asia/Kamchatka',
 1363:  'Asia/Karachi',
 1364:  'Asia/Kathmandu',
 1365:  'Asia/Khandyga',
 1366:  'Asia/Kolkata',
 1367:  'Asia/Krasnoyarsk',
 1368:  'Asia/Kuala_Lumpur',
 1369:  'Asia/Kuching',
 1370:  'Asia/Kuwait',
 1371:  'Asia/Macau',
 1372:  'Asia/Magadan',
 1373:  'Asia/Makassar',
 1374:  'Asia/Manila',
 1375:  'Asia/Muscat',
 1376:  'Asia/Nicosia',
 1377:  'Asia/Novokuznetsk',
 1378:  'Asia/Novosibirsk',
 1379:  'Asia/Omsk',
 1380:  'Asia/Oral',
 1381:  'Asia/Phnom_Penh',
 1382:  'Asia/Pontianak',
 1383:  'Asia/Pyongyang',
 1384:  'Asia/Qatar',
 1385:  'Asia/Qostanay',
 1386:  'Asia/Qyzylorda',
 1387:  'Asia/Riyadh',
 1388:  'Asia/Sakhalin',
 1389:  'Asia/Samarkand',
 1390:  'Asia/Seoul',
 1391:  'Asia/Shanghai',
 1392:  'Asia/Singapore',
 1393:  'Asia/Srednekolymsk',
 1394:  'Asia/Taipei',
 1395:  'Asia/Tashkent',
 1396:  'Asia/Tbilisi',
 1397:  'Asia/Tehran',
 1398:  'Asia/Thimphu',
 1399:  'Asia/Tokyo',
 1400:  'Asia/Tomsk',
 1401:  'Asia/Ulaanbaatar',
 1402:  'Asia/Urumqi',
 1403:  'Asia/Ust-Nera',
 1404:  'Asia/Vientiane',
 1405:  'Asia/Vladivostok',
 1406:  'Asia/Yakutsk',
 1407:  'Asia/Yangon',
 1408:  'Asia/Yekaterinburg',
 1409:  'Asia/Yerevan',
 1410:  'Atlantic/Azores',
 1411:  'Atlantic/Bermuda',
 1412:  'Atlantic/Canary',
 1413:  'Atlantic/Cape_Verde',
 1414:  'Atlantic/Faroe',
 1415:  'Atlantic/Madeira',
 1416:  'Atlantic/Reykjavik',
 1417:  'Atlantic/South_Georgia',
 1418:  'Atlantic/St_Helena',
 1419:  'Atlantic/Stanley',
 1420:  'Australia/Adelaide',
 1421:  'Australia/Brisbane',
 1422:  'Australia/Broken_Hill',
 1423:  'Australia/Darwin',
 1424:  'Australia/Eucla',
 1425:  'Australia/Hobart',
 1426:  'Australia/Lindeman',
 1427:  'Australia/Lord_Howe',
 1428:  'Australia/Melbourne',
 1429:  'Australia/Perth',
 1430:  'Australia/Sydney',
 1431:  'Canada/Atlantic',
 1432:  'Canada/Central',
 1433:  'Canada/Eastern',
 1434:  'Canada/Mountain',
 1435:  'Canada/Newfoundland',
 1436:  'Canada/Pacific',
 1437:  'Europe/Amsterdam',
 1438:  'Europe/Andorra',
 1439:  'Europe/Astrakhan',
 1440:  'Europe/Athens',
 1441:  'Europe/Belgrade',
 1442:  'Europe/Berlin',
 1443:  'Europe/Bratislava',
 1444:  'Europe/Brussels',
 1445:  'Europe/Bucharest',
 1446:  'Europe/Budapest',
 1447:  'Europe/Busingen',
 1448:  'Europe/Chisinau',
 1449:  'Europe/Copenhagen',
 1450:  'Europe/Dublin',
 1451:  'Europe/Gibraltar',
 1452:  'Europe/Guernsey',
 1453:  'Europe/Helsinki',
 1454:  'Europe/Isle_of_Man',
 1455:  'Europe/Istanbul',
 1456:  'Europe/Jersey',
 1457:  'Europe/Kaliningrad',
 1458:  'Europe/Kirov',
 1459:  'Europe/Kyiv',
 1460:  'Europe/Lisbon',
 1461:  'Europe/Ljubljana',
 1462:  'Europe/London',
 1463:  'Europe/Luxembourg',
 1464:  'Europe/Madrid',
 1465:  'Europe/Malta',
 1466:  'Europe/Mariehamn',
 1467:  'Europe/Minsk',
 1468:  'Europe/Monaco',
 1469:  'Europe/Moscow',
 1470:  'Europe/Oslo',
 1471:  'Europe/Paris',
 1472:  'Europe/Podgorica',
 1473:  'Europe/Prague',
 1474:  'Europe/Riga',
 1475:  'Europe/Rome',
 1476:  'Europe/Samara',
 1477:  'Europe/San_Marino',
 1478:  'Europe/Sarajevo',
 1479:  'Europe/Saratov',
 1480:  'Europe/Simferopol',
 1481:  'Europe/Skopje',
 1482:  'Europe/Sofia',
 1483:  'Europe/Stockholm',
 1484:  'Europe/Tallinn',
 1485:  'Europe/Tirane',
 1486:  'Europe/Ulyanovsk',
 1487:  'Europe/Vaduz',
 1488:  'Europe/Vatican',
 1489:  'Europe/Vienna',
 1490:  'Europe/Vilnius',
 1491:  'Europe/Volgograd',
 1492:  'Europe/Warsaw',
 1493:  'Europe/Zagreb',
 1494:  'Europe/Zurich',
 1495:  'GMT',
 1496:  'Indian/Antananarivo',
 1497:  'Indian/Chagos',
 1498:  'Indian/Christmas',
 1499:  'Indian/Cocos',
 1500:  'Indian/Comoro',
 1501:  'Indian/Kerguelen',
 1502:  'Indian/Mahe',
 1503:  'Indian/Maldives',
 1504:  'Indian/Mauritius',
 1505:  'Indian/Mayotte',
 1506:  'Indian/Reunion',
 1507:  'Pacific/Apia',
 1508:  'Pacific/Auckland',
 1509:  'Pacific/Bougainville',
 1510:  'Pacific/Chatham',
 1511:  'Pacific/Chuuk',
 1512:  'Pacific/Easter',
 1513:  'Pacific/Efate',
 1514:  'Pacific/Fakaofo',
 1515:  'Pacific/Fiji',
 1516:  'Pacific/Funafuti',
 1517:  'Pacific/Galapagos',
 1518:  'Pacific/Gambier',
 1519:  'Pacific/Guadalcanal',
 1520:  'Pacific/Guam',
 1521:  'Pacific/Honolulu',
 1522:  'Pacific/Kanton',
 1523:  'Pacific/Kiritimati',
 1524:  'Pacific/Kosrae',
 1525:  'Pacific/Kwajalein',
 1526:  'Pacific/Majuro',
 1527:  'Pacific/Marquesas',
 1528:  'Pacific/Midway',
 1529:  'Pacific/Nauru',
 1530:  'Pacific/Niue',
 1531:  'Pacific/Norfolk',
 1532:  'Pacific/Noumea',
 1533:  'Pacific/Pago_Pago',
 1534:  'Pacific/Palau',
 1535:  'Pacific/Pitcairn',
 1536:  'Pacific/Pohnpei',
 1537:  'Pacific/Port_Moresby',
 1538:  'Pacific/Rarotonga',
 1539:  'Pacific/Saipan',
 1540:  'Pacific/Tahiti',
 1541:  'Pacific/Tarawa',
 1542:  'Pacific/Tongatapu',
 1543:  'Pacific/Wake',
 1544:  'Pacific/Wallis',
 1545:  'US/Alaska',
 1546:  'US/Arizona',
 1547:  'US/Central',
 1548:  'US/Eastern',
 1549:  'US/Hawaii',
 1550:  'US/Mountain',
 1551:  'US/Pacific',
 1552:  'UTC']
 1553: common_timezones = LazyList(
 1554:             tz for tz in common_timezones if tz in all_timezones)
 1555: 
 1556: common_timezones_set = LazySet(common_timezones)
