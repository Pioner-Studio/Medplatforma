    1: # WikiLinks Extension for Python-Markdown
    2: # ======================================
    3: 
    4: # Converts [[WikiLinks]] to relative links.
    5: 
    6: # See https://Python-Markdown.github.io/extensions/wikilinks
    7: # for documentation.
    8: 
    9: # Original code Copyright [Waylan Limberg](http://achinghead.com/).
   10: 
   11: # All changes Copyright The Python Markdown Project
   12: 
   13: # License: [BSD](https://opensource.org/licenses/bsd-license.php)
   14: 
   15: """
   16: Converts `[[WikiLinks]]` to relative links.
   17: 
   18: See the [documentation](https://Python-Markdown.github.io/extensions/wikilinks)
   19: for details.
   20: """
   21: 
   22: from __future__ import annotations
   23: 
   24: from . import Extension
   25: from ..inlinepatterns import InlineProcessor
   26: import xml.etree.ElementTree as etree
   27: import re
   28: from typing import Any
   29: 
   30: 
   31: def build_url(label: str, base: str, end: str) -> str:
   32:     """ Build a URL from the label, a base, and an end. """
   33:     clean_label = re.sub(r'([ ]+_)|(_[ ]+)|([ ]+)', '_', label)
   34:     return '{}{}{}'.format(base, clean_label, end)
   35: 
   36: 
   37: class WikiLinkExtension(Extension):
   38:     """ Add inline processor to Markdown. """
   39: 
   40:     def __init__(self, **kwargs):
   41:         self.config = {
   42:             'base_url': ['/', 'String to append to beginning or URL.'],
   43:             'end_url': ['/', 'String to append to end of URL.'],
   44:             'html_class': ['wikilink', 'CSS hook. Leave blank for none.'],
   45:             'build_url': [build_url, 'Callable formats URL from label.'],
   46:         }
   47:         """ Default configuration options. """
   48:         super().__init__(**kwargs)
   49: 
   50:     def extendMarkdown(self, md):
   51:         self.md = md
   52: 
   53:         # append to end of inline patterns
   54:         WIKILINK_RE = r'\[\[([\w0-9_ -]+)\]\]'
   55:         wikilinkPattern = WikiLinksInlineProcessor(WIKILINK_RE, self.getConfigs())
   56:         wikilinkPattern.md = md
   57:         md.inlinePatterns.register(wikilinkPattern, 'wikilink', 75)
   58: 
   59: 
   60: class WikiLinksInlineProcessor(InlineProcessor):
   61:     """ Build link from `wikilink`. """
   62: 
   63:     def __init__(self, pattern: str, config: dict[str, Any]):
   64:         super().__init__(pattern)
   65:         self.config = config
   66: 
   67:     def handleMatch(self, m: re.Match[str], data: str) -> tuple[etree.Element | str, int, int]:
   68:         if m.group(1).strip():
   69:             base_url, end_url, html_class = self._getMeta()
   70:             label = m.group(1).strip()
   71:             url = self.config['build_url'](label, base_url, end_url)
   72:             a = etree.Element('a')
   73:             a.text = label
   74:             a.set('href', url)
   75:             if html_class:
   76:                 a.set('class', html_class)
   77:         else:
   78:             a = ''
   79:         return a, m.start(0), m.end(0)
   80: 
   81:     def _getMeta(self) -> tuple[str, str, str]:
   82:         """ Return meta data or `config` data. """
   83:         base_url = self.config['base_url']
   84:         end_url = self.config['end_url']
   85:         html_class = self.config['html_class']
   86:         if hasattr(self.md, 'Meta'):
   87:             if 'wiki_base_url' in self.md.Meta:
   88:                 base_url = self.md.Meta['wiki_base_url'][0]
   89:             if 'wiki_end_url' in self.md.Meta:
   90:                 end_url = self.md.Meta['wiki_end_url'][0]
   91:             if 'wiki_html_class' in self.md.Meta:
   92:                 html_class = self.md.Meta['wiki_html_class'][0]
   93:         return base_url, end_url, html_class
   94: 
   95: 
   96: def makeExtension(**kwargs):  # pragma: no cover
   97:     return WikiLinkExtension(**kwargs)
