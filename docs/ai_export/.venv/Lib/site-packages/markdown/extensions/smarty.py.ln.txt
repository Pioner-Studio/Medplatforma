    1: # Smarty extension for Python-Markdown
    2: # ====================================
    3: 
    4: # Adds conversion of ASCII dashes, quotes and ellipses to their HTML
    5: # entity equivalents.
    6: 
    7: # See https://Python-Markdown.github.io/extensions/smarty
    8: # for documentation.
    9: 
   10: # Author: 2013, Dmitry Shachnev <mitya57@gmail.com>
   11: 
   12: # All changes Copyright 2013-2014 The Python Markdown Project
   13: 
   14: # License: [BSD](https://opensource.org/licenses/bsd-license.php)
   15: 
   16: # SmartyPants license:
   17: 
   18: #    Copyright (c) 2003 John Gruber <https://daringfireball.net/>
   19: #    All rights reserved.
   20: 
   21: #    Redistribution and use in source and binary forms, with or without
   22: #    modification, are permitted provided that the following conditions are
   23: #    met:
   24: 
   25: #    *  Redistributions of source code must retain the above copyright
   26: #       notice, this list of conditions and the following disclaimer.
   27: 
   28: #    *  Redistributions in binary form must reproduce the above copyright
   29: #       notice, this list of conditions and the following disclaimer in
   30: #       the documentation and/or other materials provided with the
   31: #       distribution.
   32: 
   33: #    *  Neither the name "SmartyPants" nor the names of its contributors
   34: #       may be used to endorse or promote products derived from this
   35: #       software without specific prior written permission.
   36: 
   37: #    This software is provided by the copyright holders and contributors "as
   38: #    is" and any express or implied warranties, including, but not limited
   39: #    to, the implied warranties of merchantability and fitness for a
   40: #    particular purpose are disclaimed. In no event shall the copyright
   41: #    owner or contributors be liable for any direct, indirect, incidental,
   42: #    special, exemplary, or consequential damages (including, but not
   43: #    limited to, procurement of substitute goods or services; loss of use,
   44: #    data, or profits; or business interruption) however caused and on any
   45: #    theory of liability, whether in contract, strict liability, or tort
   46: #    (including negligence or otherwise) arising in any way out of the use
   47: #    of this software, even if advised of the possibility of such damage.
   48: 
   49: 
   50: # `smartypants.py` license:
   51: 
   52: #    `smartypants.py` is a derivative work of SmartyPants.
   53: #    Copyright (c) 2004, 2007 Chad Miller <http://web.chad.org/>
   54: 
   55: #    Redistribution and use in source and binary forms, with or without
   56: #    modification, are permitted provided that the following conditions are
   57: #    met:
   58: 
   59: #    *  Redistributions of source code must retain the above copyright
   60: #       notice, this list of conditions and the following disclaimer.
   61: 
   62: #    *  Redistributions in binary form must reproduce the above copyright
   63: #       notice, this list of conditions and the following disclaimer in
   64: #       the documentation and/or other materials provided with the
   65: #       distribution.
   66: 
   67: #    This software is provided by the copyright holders and contributors "as
   68: #    is" and any express or implied warranties, including, but not limited
   69: #    to, the implied warranties of merchantability and fitness for a
   70: #    particular purpose are disclaimed. In no event shall the copyright
   71: #    owner or contributors be liable for any direct, indirect, incidental,
   72: #    special, exemplary, or consequential damages (including, but not
   73: #    limited to, procurement of substitute goods or services; loss of use,
   74: #    data, or profits; or business interruption) however caused and on any
   75: #    theory of liability, whether in contract, strict liability, or tort
   76: #    (including negligence or otherwise) arising in any way out of the use
   77: #    of this software, even if advised of the possibility of such damage.
   78: 
   79: """
   80: Adds conversion of ASCII dashes, quotes and ellipses to their HTML
   81: entity equivalents.
   82: 
   83: See the [documentation](https://Python-Markdown.github.io/extensions/smarty)
   84: for details.
   85: """
   86: 
   87: from __future__ import annotations
   88: 
   89: from . import Extension
   90: from ..inlinepatterns import HtmlInlineProcessor, HTML_RE
   91: from ..treeprocessors import InlineProcessor
   92: from ..util import Registry
   93: from typing import TYPE_CHECKING, Sequence
   94: 
   95: if TYPE_CHECKING:  # pragma: no cover
   96:     from markdown import Markdown
   97:     from .. import inlinepatterns
   98:     import re
   99:     import xml.etree.ElementTree as etree
  100: 
  101: # Constants for quote education.
  102: punctClass = r"""[!"#\$\%'()*+,-.\/:;<=>?\@\[\\\]\^_`{|}~]"""
  103: endOfWordClass = r"[\s.,;:!?)]"
  104: closeClass = r"[^\ \t\r\n\[\{\(\-\u0002\u0003]"
  105: 
  106: openingQuotesBase = (
  107:     r'(\s'               # a  whitespace char
  108:     r'|&nbsp;'           # or a non-breaking space entity
  109:     r'|--'               # or dashes
  110:     r'|вЂ“|вЂ”'              # or Unicode
  111:     r'|&[mn]dash;'       # or named dash entities
  112:     r'|&#8211;|&#8212;'  # or decimal entities
  113:     r')'
  114: )
  115: 
  116: substitutions = {
  117:     'mdash': '&mdash;',
  118:     'ndash': '&ndash;',
  119:     'ellipsis': '&hellip;',
  120:     'left-angle-quote': '&laquo;',
  121:     'right-angle-quote': '&raquo;',
  122:     'left-single-quote': '&lsquo;',
  123:     'right-single-quote': '&rsquo;',
  124:     'left-double-quote': '&ldquo;',
  125:     'right-double-quote': '&rdquo;',
  126: }
  127: 
  128: 
  129: # Special case if the very first character is a quote
  130: # followed by punctuation at a non-word-break. Close the quotes by brute force:
  131: singleQuoteStartRe = r"^'(?=%s\B)" % punctClass
  132: doubleQuoteStartRe = r'^"(?=%s\B)' % punctClass
  133: 
  134: # Special case for double sets of quotes, e.g.:
  135: #   <p>He said, "'Quoted' words in a larger quote."</p>
  136: doubleQuoteSetsRe = r""""'(?=\w)"""
  137: singleQuoteSetsRe = r"""'"(?=\w)"""
  138: 
  139: # Special case for decade abbreviations (the '80s):
  140: decadeAbbrRe = r"(?<!\w)'(?=\d{2}s)"
  141: 
  142: # Get most opening double quotes:
  143: openingDoubleQuotesRegex = r'%s"(?=\w)' % openingQuotesBase
  144: 
  145: # Double closing quotes:
  146: closingDoubleQuotesRegex = r'"(?=\s)'
  147: closingDoubleQuotesRegex2 = '(?<=%s)"' % closeClass
  148: 
  149: # Get most opening single quotes:
  150: openingSingleQuotesRegex = r"%s'(?=\w)" % openingQuotesBase
  151: 
  152: # Single closing quotes:
  153: closingSingleQuotesRegex = r"(?<=%s)'(?!\s|s\b|\d)" % closeClass
  154: closingSingleQuotesRegex2 = r"'(\s|s\b)"
  155: 
  156: # All remaining quotes should be opening ones
  157: remainingSingleQuotesRegex = r"'"
  158: remainingDoubleQuotesRegex = r'"'
  159: 
  160: HTML_STRICT_RE = HTML_RE + r'(?!\>)'
  161: 
  162: 
  163: class SubstituteTextPattern(HtmlInlineProcessor):
  164:     def __init__(self, pattern: str, replace: Sequence[int | str | etree.Element], md: Markdown):
  165:         """ Replaces matches with some text. """
  166:         HtmlInlineProcessor.__init__(self, pattern)
  167:         self.replace = replace
  168:         self.md = md
  169: 
  170:     def handleMatch(self, m: re.Match[str], data: str) -> tuple[str, int, int]:
  171:         result = ''
  172:         for part in self.replace:
  173:             if isinstance(part, int):
  174:                 result += m.group(part)
  175:             else:
  176:                 result += self.md.htmlStash.store(part)
  177:         return result, m.start(0), m.end(0)
  178: 
  179: 
  180: class SmartyExtension(Extension):
  181:     """ Add Smarty to Markdown. """
  182:     def __init__(self, **kwargs):
  183:         self.config = {
  184:             'smart_quotes': [True, 'Educate quotes'],
  185:             'smart_angled_quotes': [False, 'Educate angled quotes'],
  186:             'smart_dashes': [True, 'Educate dashes'],
  187:             'smart_ellipses': [True, 'Educate ellipses'],
  188:             'substitutions': [{}, 'Overwrite default substitutions'],
  189:         }
  190:         """ Default configuration options. """
  191:         super().__init__(**kwargs)
  192:         self.substitutions: dict[str, str] = dict(substitutions)
  193:         self.substitutions.update(self.getConfig('substitutions', default={}))
  194: 
  195:     def _addPatterns(
  196:         self,
  197:         md: Markdown,
  198:         patterns: Sequence[tuple[str, Sequence[int | str | etree.Element]]],
  199:         serie: str,
  200:         priority: int,
  201:     ):
  202:         for ind, pattern in enumerate(patterns):
  203:             pattern += (md,)
  204:             pattern = SubstituteTextPattern(*pattern)
  205:             name = 'smarty-%s-%d' % (serie, ind)
  206:             self.inlinePatterns.register(pattern, name, priority-ind)
  207: 
  208:     def educateDashes(self, md: Markdown) -> None:
  209:         emDashesPattern = SubstituteTextPattern(
  210:             r'(?<!-)---(?!-)', (self.substitutions['mdash'],), md
  211:         )
  212:         enDashesPattern = SubstituteTextPattern(
  213:             r'(?<!-)--(?!-)', (self.substitutions['ndash'],), md
  214:         )
  215:         self.inlinePatterns.register(emDashesPattern, 'smarty-em-dashes', 50)
  216:         self.inlinePatterns.register(enDashesPattern, 'smarty-en-dashes', 45)
  217: 
  218:     def educateEllipses(self, md: Markdown) -> None:
  219:         ellipsesPattern = SubstituteTextPattern(
  220:             r'(?<!\.)\.{3}(?!\.)', (self.substitutions['ellipsis'],), md
  221:         )
  222:         self.inlinePatterns.register(ellipsesPattern, 'smarty-ellipses', 10)
  223: 
  224:     def educateAngledQuotes(self, md: Markdown) -> None:
  225:         leftAngledQuotePattern = SubstituteTextPattern(
  226:             r'\<\<', (self.substitutions['left-angle-quote'],), md
  227:         )
  228:         rightAngledQuotePattern = SubstituteTextPattern(
  229:             r'\>\>', (self.substitutions['right-angle-quote'],), md
  230:         )
  231:         self.inlinePatterns.register(leftAngledQuotePattern, 'smarty-left-angle-quotes', 40)
  232:         self.inlinePatterns.register(rightAngledQuotePattern, 'smarty-right-angle-quotes', 35)
  233: 
  234:     def educateQuotes(self, md: Markdown) -> None:
  235:         lsquo = self.substitutions['left-single-quote']
  236:         rsquo = self.substitutions['right-single-quote']
  237:         ldquo = self.substitutions['left-double-quote']
  238:         rdquo = self.substitutions['right-double-quote']
  239:         patterns = (
  240:             (singleQuoteStartRe, (rsquo,)),
  241:             (doubleQuoteStartRe, (rdquo,)),
  242:             (doubleQuoteSetsRe, (ldquo + lsquo,)),
  243:             (singleQuoteSetsRe, (lsquo + ldquo,)),
  244:             (decadeAbbrRe, (rsquo,)),
  245:             (openingSingleQuotesRegex, (1, lsquo)),
  246:             (closingSingleQuotesRegex, (rsquo,)),
  247:             (closingSingleQuotesRegex2, (rsquo, 1)),
  248:             (remainingSingleQuotesRegex, (lsquo,)),
  249:             (openingDoubleQuotesRegex, (1, ldquo)),
  250:             (closingDoubleQuotesRegex, (rdquo,)),
  251:             (closingDoubleQuotesRegex2, (rdquo,)),
  252:             (remainingDoubleQuotesRegex, (ldquo,))
  253:         )
  254:         self._addPatterns(md, patterns, 'quotes', 30)
  255: 
  256:     def extendMarkdown(self, md):
  257:         configs = self.getConfigs()
  258:         self.inlinePatterns: Registry[inlinepatterns.InlineProcessor] = Registry()
  259:         if configs['smart_ellipses']:
  260:             self.educateEllipses(md)
  261:         if configs['smart_quotes']:
  262:             self.educateQuotes(md)
  263:         if configs['smart_angled_quotes']:
  264:             self.educateAngledQuotes(md)
  265:             # Override `HTML_RE` from `inlinepatterns.py` so that it does not
  266:             # process tags with duplicate closing quotes.
  267:             md.inlinePatterns.register(HtmlInlineProcessor(HTML_STRICT_RE, md), 'html', 90)
  268:         if configs['smart_dashes']:
  269:             self.educateDashes(md)
  270:         inlineProcessor = InlineProcessor(md)
  271:         inlineProcessor.inlinePatterns = self.inlinePatterns
  272:         md.treeprocessors.register(inlineProcessor, 'smarty', 6)
  273:         md.ESCAPED_CHARS.extend(['"', "'"])
  274: 
  275: 
  276: def makeExtension(**kwargs):  # pragma: no cover
  277:     return SmartyExtension(**kwargs)
