    1: # Meta Data Extension for Python-Markdown
    2: # =======================================
    3: 
    4: # This extension adds Meta Data handling to markdown.
    5: 
    6: # See https://Python-Markdown.github.io/extensions/meta_data
    7: # for documentation.
    8: 
    9: # Original code Copyright 2007-2008 [Waylan Limberg](http://achinghead.com).
   10: 
   11: # All changes Copyright 2008-2014 The Python Markdown Project
   12: 
   13: # License: [BSD](https://opensource.org/licenses/bsd-license.php)
   14: 
   15: """
   16: This extension adds Meta Data handling to markdown.
   17: 
   18: See the [documentation](https://Python-Markdown.github.io/extensions/meta_data)
   19: for details.
   20: """
   21: 
   22: from __future__ import annotations
   23: 
   24: from . import Extension
   25: from ..preprocessors import Preprocessor
   26: import re
   27: import logging
   28: from typing import Any
   29: 
   30: log = logging.getLogger('MARKDOWN')
   31: 
   32: # Global Vars
   33: META_RE = re.compile(r'^[ ]{0,3}(?P<key>[A-Za-z0-9_-]+):\s*(?P<value>.*)')
   34: META_MORE_RE = re.compile(r'^[ ]{4,}(?P<value>.*)')
   35: BEGIN_RE = re.compile(r'^-{3}(\s.*)?')
   36: END_RE = re.compile(r'^(-{3}|\.{3})(\s.*)?')
   37: 
   38: 
   39: class MetaExtension (Extension):
   40:     """ Meta-Data extension for Python-Markdown. """
   41: 
   42:     def extendMarkdown(self, md):
   43:         """ Add `MetaPreprocessor` to Markdown instance. """
   44:         md.registerExtension(self)
   45:         self.md = md
   46:         md.preprocessors.register(MetaPreprocessor(md), 'meta', 27)
   47: 
   48:     def reset(self) -> None:
   49:         self.md.Meta = {}
   50: 
   51: 
   52: class MetaPreprocessor(Preprocessor):
   53:     """ Get Meta-Data. """
   54: 
   55:     def run(self, lines: list[str]) -> list[str]:
   56:         """ Parse Meta-Data and store in Markdown.Meta. """
   57:         meta: dict[str, Any] = {}
   58:         key = None
   59:         if lines and BEGIN_RE.match(lines[0]):
   60:             lines.pop(0)
   61:         while lines:
   62:             line = lines.pop(0)
   63:             m1 = META_RE.match(line)
   64:             if line.strip() == '' or END_RE.match(line):
   65:                 break  # blank line or end of YAML header - done
   66:             if m1:
   67:                 key = m1.group('key').lower().strip()
   68:                 value = m1.group('value').strip()
   69:                 try:
   70:                     meta[key].append(value)
   71:                 except KeyError:
   72:                     meta[key] = [value]
   73:             else:
   74:                 m2 = META_MORE_RE.match(line)
   75:                 if m2 and key:
   76:                     # Add another line to existing key
   77:                     meta[key].append(m2.group('value').strip())
   78:                 else:
   79:                     lines.insert(0, line)
   80:                     break  # no meta data - done
   81:         self.md.Meta = meta
   82:         return lines
   83: 
   84: 
   85: def makeExtension(**kwargs):  # pragma: no cover
   86:     return MetaExtension(**kwargs)
