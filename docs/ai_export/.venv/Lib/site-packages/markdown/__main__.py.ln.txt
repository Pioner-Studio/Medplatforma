    1: # Python Markdown
    2: 
    3: # A Python implementation of John Gruber's Markdown.
    4: 
    5: # Documentation: https://python-markdown.github.io/
    6: # GitHub: https://github.com/Python-Markdown/markdown/
    7: # PyPI: https://pypi.org/project/Markdown/
    8: 
    9: # Started by Manfred Stienstra (http://www.dwerg.net/).
   10: # Maintained for a few years by Yuri Takhteyev (http://www.freewisdom.org).
   11: # Currently maintained by Waylan Limberg (https://github.com/waylan),
   12: # Dmitry Shachnev (https://github.com/mitya57) and Isaac Muse (https://github.com/facelessuser).
   13: 
   14: # Copyright 2007-2023 The Python Markdown Project (v. 1.7 and later)
   15: # Copyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)
   16: # Copyright 2004 Manfred Stienstra (the original version)
   17: 
   18: # License: BSD (see LICENSE.md for details).
   19: 
   20: from __future__ import annotations
   21: 
   22: import sys
   23: import optparse
   24: import codecs
   25: import warnings
   26: import markdown
   27: try:
   28:     # We use `unsafe_load` because users may need to pass in actual Python
   29:     # objects. As this is only available from the CLI, the user has much
   30:     # worse problems if an attacker can use this as an attach vector.
   31:     from yaml import unsafe_load as yaml_load
   32: except ImportError:  # pragma: no cover
   33:     try:
   34:         # Fall back to PyYAML <5.1
   35:         from yaml import load as yaml_load
   36:     except ImportError:
   37:         # Fall back to JSON
   38:         from json import load as yaml_load
   39: 
   40: import logging
   41: from logging import DEBUG, WARNING, CRITICAL
   42: 
   43: logger = logging.getLogger('MARKDOWN')
   44: 
   45: 
   46: def parse_options(args=None, values=None):
   47:     """
   48:     Define and parse `optparse` options for command-line usage.
   49:     """
   50:     usage = """%prog [options] [INPUTFILE]
   51:        (STDIN is assumed if no INPUTFILE is given)"""
   52:     desc = "A Python implementation of John Gruber's Markdown. " \
   53:            "https://Python-Markdown.github.io/"
   54:     ver = "%%prog %s" % markdown.__version__
   55: 
   56:     parser = optparse.OptionParser(usage=usage, description=desc, version=ver)
   57:     parser.add_option("-f", "--file", dest="filename", default=None,
   58:                       help="Write output to OUTPUT_FILE. Defaults to STDOUT.",
   59:                       metavar="OUTPUT_FILE")
   60:     parser.add_option("-e", "--encoding", dest="encoding",
   61:                       help="Encoding for input and output files.",)
   62:     parser.add_option("-o", "--output_format", dest="output_format",
   63:                       default='xhtml', metavar="OUTPUT_FORMAT",
   64:                       help="Use output format 'xhtml' (default) or 'html'.")
   65:     parser.add_option("-n", "--no_lazy_ol", dest="lazy_ol",
   66:                       action='store_false', default=True,
   67:                       help="Observe number of first item of ordered lists.")
   68:     parser.add_option("-x", "--extension", action="append", dest="extensions",
   69:                       help="Load extension EXTENSION.", metavar="EXTENSION")
   70:     parser.add_option("-c", "--extension_configs",
   71:                       dest="configfile", default=None,
   72:                       help="Read extension configurations from CONFIG_FILE. "
   73:                       "CONFIG_FILE must be of JSON or YAML format. YAML "
   74:                       "format requires that a python YAML library be "
   75:                       "installed. The parsed JSON or YAML must result in a "
   76:                       "python dictionary which would be accepted by the "
   77:                       "'extension_configs' keyword on the markdown.Markdown "
   78:                       "class. The extensions must also be loaded with the "
   79:                       "`--extension` option.",
   80:                       metavar="CONFIG_FILE")
   81:     parser.add_option("-q", "--quiet", default=CRITICAL,
   82:                       action="store_const", const=CRITICAL+10, dest="verbose",
   83:                       help="Suppress all warnings.")
   84:     parser.add_option("-v", "--verbose",
   85:                       action="store_const", const=WARNING, dest="verbose",
   86:                       help="Print all warnings.")
   87:     parser.add_option("--noisy",
   88:                       action="store_const", const=DEBUG, dest="verbose",
   89:                       help="Print debug messages.")
   90: 
   91:     (options, args) = parser.parse_args(args, values)
   92: 
   93:     if len(args) == 0:
   94:         input_file = None
   95:     else:
   96:         input_file = args[0]
   97: 
   98:     if not options.extensions:
   99:         options.extensions = []
  100: 
  101:     extension_configs = {}
  102:     if options.configfile:
  103:         with codecs.open(
  104:             options.configfile, mode="r", encoding=options.encoding
  105:         ) as fp:
  106:             try:
  107:                 extension_configs = yaml_load(fp)
  108:             except Exception as e:
  109:                 message = "Failed parsing extension config file: %s" % \
  110:                           options.configfile
  111:                 e.args = (message,) + e.args[1:]
  112:                 raise
  113: 
  114:     opts = {
  115:         'input': input_file,
  116:         'output': options.filename,
  117:         'extensions': options.extensions,
  118:         'extension_configs': extension_configs,
  119:         'encoding': options.encoding,
  120:         'output_format': options.output_format,
  121:         'lazy_ol': options.lazy_ol
  122:     }
  123: 
  124:     return opts, options.verbose
  125: 
  126: 
  127: def run():  # pragma: no cover
  128:     """Run Markdown from the command line."""
  129: 
  130:     # Parse options and adjust logging level if necessary
  131:     options, logging_level = parse_options()
  132:     if not options:
  133:         sys.exit(2)
  134:     logger.setLevel(logging_level)
  135:     console_handler = logging.StreamHandler()
  136:     logger.addHandler(console_handler)
  137:     if logging_level <= WARNING:
  138:         # Ensure deprecation warnings get displayed
  139:         warnings.filterwarnings('default')
  140:         logging.captureWarnings(True)
  141:         warn_logger = logging.getLogger('py.warnings')
  142:         warn_logger.addHandler(console_handler)
  143: 
  144:     # Run
  145:     markdown.markdownFromFile(**options)
  146: 
  147: 
  148: if __name__ == '__main__':  # pragma: no cover
  149:     # Support running module as a command line command.
  150:     #     python -m markdown [options] [args]
  151:     run()
