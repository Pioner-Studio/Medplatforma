    1: # Copyright 2010-2015 MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for representing MongoDB internal Timestamps."""
   16: from __future__ import annotations
   17: 
   18: import calendar
   19: import datetime
   20: from typing import Any, Union
   21: 
   22: from bson._helpers import _getstate_slots, _setstate_slots
   23: from bson.tz_util import utc
   24: 
   25: UPPERBOUND = 4294967296
   26: 
   27: 
   28: class Timestamp:
   29:     """MongoDB internal timestamps used in the opLog."""
   30: 
   31:     __slots__ = ("__time", "__inc")
   32: 
   33:     __getstate__ = _getstate_slots
   34:     __setstate__ = _setstate_slots
   35: 
   36:     _type_marker = 17
   37: 
   38:     def __init__(self, time: Union[datetime.datetime, int], inc: int) -> None:
   39:         """Create a new :class:`Timestamp`.
   40: 
   41:         This class is only for use with the MongoDB opLog. If you need
   42:         to store a regular timestamp, please use a
   43:         :class:`~datetime.datetime`.
   44: 
   45:         Raises :class:`TypeError` if `time` is not an instance of
   46:         :class: `int` or :class:`~datetime.datetime`, or `inc` is not
   47:         an instance of :class:`int`. Raises :class:`ValueError` if
   48:         `time` or `inc` is not in [0, 2**32).
   49: 
   50:         :param time: time in seconds since epoch UTC, or a naive UTC
   51:             :class:`~datetime.datetime`, or an aware
   52:             :class:`~datetime.datetime`
   53:         :param inc: the incrementing counter
   54:         """
   55:         if isinstance(time, datetime.datetime):
   56:             offset = time.utcoffset()
   57:             if offset is not None:
   58:                 time = time - offset
   59:             time = int(calendar.timegm(time.timetuple()))
   60:         if not isinstance(time, int):
   61:             raise TypeError("time must be an instance of int")
   62:         if not isinstance(inc, int):
   63:             raise TypeError("inc must be an instance of int")
   64:         if not 0 <= time < UPPERBOUND:
   65:             raise ValueError("time must be contained in [0, 2**32)")
   66:         if not 0 <= inc < UPPERBOUND:
   67:             raise ValueError("inc must be contained in [0, 2**32)")
   68: 
   69:         self.__time = time
   70:         self.__inc = inc
   71: 
   72:     @property
   73:     def time(self) -> int:
   74:         """Get the time portion of this :class:`Timestamp`."""
   75:         return self.__time
   76: 
   77:     @property
   78:     def inc(self) -> int:
   79:         """Get the inc portion of this :class:`Timestamp`."""
   80:         return self.__inc
   81: 
   82:     def __eq__(self, other: Any) -> bool:
   83:         if isinstance(other, Timestamp):
   84:             return self.__time == other.time and self.__inc == other.inc
   85:         else:
   86:             return NotImplemented
   87: 
   88:     def __hash__(self) -> int:
   89:         return hash(self.time) ^ hash(self.inc)
   90: 
   91:     def __ne__(self, other: Any) -> bool:
   92:         return not self == other
   93: 
   94:     def __lt__(self, other: Any) -> bool:
   95:         if isinstance(other, Timestamp):
   96:             return (self.time, self.inc) < (other.time, other.inc)
   97:         return NotImplemented
   98: 
   99:     def __le__(self, other: Any) -> bool:
  100:         if isinstance(other, Timestamp):
  101:             return (self.time, self.inc) <= (other.time, other.inc)
  102:         return NotImplemented
  103: 
  104:     def __gt__(self, other: Any) -> bool:
  105:         if isinstance(other, Timestamp):
  106:             return (self.time, self.inc) > (other.time, other.inc)
  107:         return NotImplemented
  108: 
  109:     def __ge__(self, other: Any) -> bool:
  110:         if isinstance(other, Timestamp):
  111:             return (self.time, self.inc) >= (other.time, other.inc)
  112:         return NotImplemented
  113: 
  114:     def __repr__(self) -> str:
  115:         return f"Timestamp({self.__time}, {self.__inc})"
  116: 
  117:     def as_datetime(self) -> datetime.datetime:
  118:         """Return a :class:`~datetime.datetime` instance corresponding
  119:         to the time portion of this :class:`Timestamp`.
  120: 
  121:         The returned datetime's timezone is UTC.
  122:         """
  123:         return datetime.datetime.fromtimestamp(self.__time, utc)
