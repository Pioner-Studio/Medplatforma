    1: # Copyright 2009-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for representing JavaScript code in BSON."""
   16: from __future__ import annotations
   17: 
   18: from collections.abc import Mapping as _Mapping
   19: from typing import Any, Mapping, Optional, Type, Union
   20: 
   21: 
   22: class Code(str):
   23:     """BSON's JavaScript code type.
   24: 
   25:     Raises :class:`TypeError` if `code` is not an instance of
   26:     :class:`str` or `scope` is not ``None`` or an instance
   27:     of :class:`dict`.
   28: 
   29:     Scope variables can be set by passing a dictionary as the `scope`
   30:     argument or by using keyword arguments. If a variable is set as a
   31:     keyword argument it will override any setting for that variable in
   32:     the `scope` dictionary.
   33: 
   34:     :param code: A string containing JavaScript code to be evaluated or another
   35:         instance of Code. In the latter case, the scope of `code` becomes this
   36:         Code's :attr:`scope`.
   37:     :param scope: dictionary representing the scope in which
   38:         `code` should be evaluated - a mapping from identifiers (as
   39:         strings) to values. Defaults to ``None``. This is applied after any
   40:         scope associated with a given `code` above.
   41:     :param kwargs: scope variables can also be passed as
   42:         keyword arguments. These are applied after `scope` and `code`.
   43: 
   44:     .. versionchanged:: 3.4
   45:       The default value for :attr:`scope` is ``None`` instead of ``{}``.
   46: 
   47:     """
   48: 
   49:     _type_marker = 13
   50:     __scope: Union[Mapping[str, Any], None]
   51: 
   52:     def __new__(
   53:         cls: Type[Code],
   54:         code: Union[str, Code],
   55:         scope: Optional[Mapping[str, Any]] = None,
   56:         **kwargs: Any,
   57:     ) -> Code:
   58:         if not isinstance(code, str):
   59:             raise TypeError("code must be an instance of str")
   60: 
   61:         self = str.__new__(cls, code)
   62: 
   63:         try:
   64:             self.__scope = code.scope  # type: ignore
   65:         except AttributeError:
   66:             self.__scope = None
   67: 
   68:         if scope is not None:
   69:             if not isinstance(scope, _Mapping):
   70:                 raise TypeError("scope must be an instance of dict")
   71:             if self.__scope is not None:
   72:                 self.__scope.update(scope)  # type: ignore
   73:             else:
   74:                 self.__scope = scope
   75: 
   76:         if kwargs:
   77:             if self.__scope is not None:
   78:                 self.__scope.update(kwargs)  # type: ignore
   79:             else:
   80:                 self.__scope = kwargs
   81: 
   82:         return self
   83: 
   84:     @property
   85:     def scope(self) -> Optional[Mapping[str, Any]]:
   86:         """Scope dictionary for this instance or ``None``."""
   87:         return self.__scope
   88: 
   89:     def __repr__(self) -> str:
   90:         return f"Code({str.__repr__(self)}, {self.__scope!r})"
   91: 
   92:     def __eq__(self, other: Any) -> bool:
   93:         if isinstance(other, Code):
   94:             return (self.__scope, str(self)) == (other.__scope, str(other))
   95:         return False
   96: 
   97:     __hash__: Any = None
   98: 
   99:     def __ne__(self, other: Any) -> bool:
  100:         return not self == other
