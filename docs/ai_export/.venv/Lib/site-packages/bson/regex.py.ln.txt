    1: # Copyright 2013-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for representing MongoDB regular expressions."""
   16: from __future__ import annotations
   17: 
   18: import re
   19: from typing import Any, Generic, Pattern, Type, TypeVar, Union
   20: 
   21: from bson._helpers import _getstate_slots, _setstate_slots
   22: from bson.son import RE_TYPE
   23: 
   24: 
   25: def str_flags_to_int(str_flags: str) -> int:
   26:     flags = 0
   27:     if "i" in str_flags:
   28:         flags |= re.IGNORECASE
   29:     if "l" in str_flags:
   30:         flags |= re.LOCALE
   31:     if "m" in str_flags:
   32:         flags |= re.MULTILINE
   33:     if "s" in str_flags:
   34:         flags |= re.DOTALL
   35:     if "u" in str_flags:
   36:         flags |= re.UNICODE
   37:     if "x" in str_flags:
   38:         flags |= re.VERBOSE
   39: 
   40:     return flags
   41: 
   42: 
   43: _T = TypeVar("_T", str, bytes)
   44: 
   45: 
   46: class Regex(Generic[_T]):
   47:     """BSON regular expression data."""
   48: 
   49:     __slots__ = ("pattern", "flags")
   50: 
   51:     __getstate__ = _getstate_slots
   52:     __setstate__ = _setstate_slots
   53: 
   54:     _type_marker = 11
   55: 
   56:     @classmethod
   57:     def from_native(cls: Type[Regex[Any]], regex: Pattern[_T]) -> Regex[_T]:
   58:         """Convert a Python regular expression into a ``Regex`` instance.
   59: 
   60:         Note that in Python 3, a regular expression compiled from a
   61:         :class:`str` has the ``re.UNICODE`` flag set. If it is undesirable
   62:         to store this flag in a BSON regular expression, unset it first::
   63: 
   64:           >>> pattern = re.compile('.*')
   65:           >>> regex = Regex.from_native(pattern)
   66:           >>> regex.flags ^= re.UNICODE
   67:           >>> db.collection.insert_one({'pattern': regex})
   68: 
   69:         :param regex: A regular expression object from ``re.compile()``.
   70: 
   71:         .. warning::
   72:            Python regular expressions use a different syntax and different
   73:            set of flags than MongoDB, which uses `PCRE`_. A regular
   74:            expression retrieved from the server may not compile in
   75:            Python, or may match a different set of strings in Python than
   76:            when used in a MongoDB query.
   77: 
   78:         .. _PCRE: http://www.pcre.org/
   79:         """
   80:         if not isinstance(regex, RE_TYPE):
   81:             raise TypeError("regex must be a compiled regular expression, not %s" % type(regex))
   82: 
   83:         return Regex(regex.pattern, regex.flags)
   84: 
   85:     def __init__(self, pattern: _T, flags: Union[str, int] = 0) -> None:
   86:         """BSON regular expression data.
   87: 
   88:         This class is useful to store and retrieve regular expressions that are
   89:         incompatible with Python's regular expression dialect.
   90: 
   91:         :param pattern: string
   92:         :param flags: an integer bitmask, or a string of flag
   93:             characters like "im" for IGNORECASE and MULTILINE
   94:         """
   95:         if not isinstance(pattern, (str, bytes)):
   96:             raise TypeError("pattern must be a string, not %s" % type(pattern))
   97:         self.pattern: _T = pattern
   98: 
   99:         if isinstance(flags, str):
  100:             self.flags = str_flags_to_int(flags)
  101:         elif isinstance(flags, int):
  102:             self.flags = flags
  103:         else:
  104:             raise TypeError("flags must be a string or int, not %s" % type(flags))
  105: 
  106:     def __eq__(self, other: Any) -> bool:
  107:         if isinstance(other, Regex):
  108:             return self.pattern == other.pattern and self.flags == other.flags
  109:         else:
  110:             return NotImplemented
  111: 
  112:     __hash__ = None  # type: ignore
  113: 
  114:     def __ne__(self, other: Any) -> bool:
  115:         return not self == other
  116: 
  117:     def __repr__(self) -> str:
  118:         return f"Regex({self.pattern!r}, {self.flags!r})"
  119: 
  120:     def try_compile(self) -> Pattern[_T]:
  121:         """Compile this :class:`Regex` as a Python regular expression.
  122: 
  123:         .. warning::
  124:            Python regular expressions use a different syntax and different
  125:            set of flags than MongoDB, which uses `PCRE`_. A regular
  126:            expression retrieved from the server may not compile in
  127:            Python, or may match a different set of strings in Python than
  128:            when used in a MongoDB query. :meth:`try_compile()` may raise
  129:            :exc:`re.error`.
  130: 
  131:         .. _PCRE: http://www.pcre.org/
  132:         """
  133:         return re.compile(self.pattern, self.flags)
