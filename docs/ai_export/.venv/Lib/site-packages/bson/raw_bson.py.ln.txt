    1: # Copyright 2015-present MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for representing raw BSON documents.
   16: 
   17: Inserting and Retrieving RawBSONDocuments
   18: =========================================
   19: 
   20: Example: Moving a document between different databases/collections
   21: 
   22: .. doctest::
   23: 
   24:   >>> import bson
   25:   >>> from pymongo import MongoClient
   26:   >>> from bson.raw_bson import RawBSONDocument
   27:   >>> client = MongoClient(document_class=RawBSONDocument)
   28:   >>> client.drop_database("db")
   29:   >>> client.drop_database("replica_db")
   30:   >>> db = client.db
   31:   >>> result = db.test.insert_many(
   32:   ...     [{"_id": 1, "a": 1}, {"_id": 2, "b": 1}, {"_id": 3, "c": 1}, {"_id": 4, "d": 1}]
   33:   ... )
   34:   >>> replica_db = client.replica_db
   35:   >>> for doc in db.test.find():
   36:   ...     print(f"raw document: {doc.raw}")
   37:   ...     print(f"decoded document: {bson.decode(doc.raw)}")
   38:   ...     result = replica_db.test.insert_one(doc)
   39:   ...
   40:   raw document: b'...'
   41:   decoded document: {'_id': 1, 'a': 1}
   42:   raw document: b'...'
   43:   decoded document: {'_id': 2, 'b': 1}
   44:   raw document: b'...'
   45:   decoded document: {'_id': 3, 'c': 1}
   46:   raw document: b'...'
   47:   decoded document: {'_id': 4, 'd': 1}
   48: 
   49: For use cases like moving documents across different databases or writing binary
   50: blobs to disk, using raw BSON documents provides better speed and avoids the
   51: overhead of decoding or encoding BSON.
   52: """
   53: from __future__ import annotations
   54: 
   55: from typing import Any, ItemsView, Iterator, Mapping, Optional
   56: 
   57: from bson import _get_object_size, _raw_to_dict
   58: from bson.codec_options import _RAW_BSON_DOCUMENT_MARKER, CodecOptions
   59: from bson.codec_options import DEFAULT_CODEC_OPTIONS as DEFAULT
   60: 
   61: 
   62: def _inflate_bson(
   63:     bson_bytes: bytes, codec_options: CodecOptions[RawBSONDocument], raw_array: bool = False
   64: ) -> dict[str, Any]:
   65:     """Inflates the top level fields of a BSON document.
   66: 
   67:     :param bson_bytes: the BSON bytes that compose this document
   68:     :param codec_options: An instance of
   69:         :class:`~bson.codec_options.CodecOptions` whose ``document_class``
   70:         must be :class:`RawBSONDocument`.
   71:     """
   72:     return _raw_to_dict(bson_bytes, 4, len(bson_bytes) - 1, codec_options, {}, raw_array=raw_array)
   73: 
   74: 
   75: class RawBSONDocument(Mapping[str, Any]):
   76:     """Representation for a MongoDB document that provides access to the raw
   77:     BSON bytes that compose it.
   78: 
   79:     Only when a field is accessed or modified within the document does
   80:     RawBSONDocument decode its bytes.
   81:     """
   82: 
   83:     __slots__ = ("__raw", "__inflated_doc", "__codec_options")
   84:     _type_marker = _RAW_BSON_DOCUMENT_MARKER
   85:     __codec_options: CodecOptions[RawBSONDocument]
   86: 
   87:     def __init__(
   88:         self, bson_bytes: bytes, codec_options: Optional[CodecOptions[RawBSONDocument]] = None
   89:     ) -> None:
   90:         """Create a new :class:`RawBSONDocument`
   91: 
   92:         :class:`RawBSONDocument` is a representation of a BSON document that
   93:         provides access to the underlying raw BSON bytes. Only when a field is
   94:         accessed or modified within the document does RawBSONDocument decode
   95:         its bytes.
   96: 
   97:         :class:`RawBSONDocument` implements the ``Mapping`` abstract base
   98:         class from the standard library so it can be used like a read-only
   99:         ``dict``::
  100: 
  101:             >>> from bson import encode
  102:             >>> raw_doc = RawBSONDocument(encode({'_id': 'my_doc'}))
  103:             >>> raw_doc.raw
  104:             b'...'
  105:             >>> raw_doc['_id']
  106:             'my_doc'
  107: 
  108:         :param bson_bytes: the BSON bytes that compose this document
  109:         :param codec_options: An instance of
  110:             :class:`~bson.codec_options.CodecOptions` whose ``document_class``
  111:             must be :class:`RawBSONDocument`. The default is
  112:             :attr:`DEFAULT_RAW_BSON_OPTIONS`.
  113: 
  114:         .. versionchanged:: 3.8
  115:           :class:`RawBSONDocument` now validates that the ``bson_bytes``
  116:           passed in represent a single bson document.
  117: 
  118:         .. versionchanged:: 3.5
  119:           If a :class:`~bson.codec_options.CodecOptions` is passed in, its
  120:           `document_class` must be :class:`RawBSONDocument`.
  121:         """
  122:         self.__raw = bson_bytes
  123:         self.__inflated_doc: Optional[Mapping[str, Any]] = None
  124:         # Can't default codec_options to DEFAULT_RAW_BSON_OPTIONS in signature,
  125:         # it refers to this class RawBSONDocument.
  126:         if codec_options is None:
  127:             codec_options = DEFAULT_RAW_BSON_OPTIONS
  128:         elif not issubclass(codec_options.document_class, RawBSONDocument):
  129:             raise TypeError(
  130:                 "RawBSONDocument cannot use CodecOptions with document "
  131:                 f"class {codec_options.document_class}"
  132:             )
  133:         self.__codec_options = codec_options
  134:         # Validate the bson object size.
  135:         _get_object_size(bson_bytes, 0, len(bson_bytes))
  136: 
  137:     @property
  138:     def raw(self) -> bytes:
  139:         """The raw BSON bytes composing this document."""
  140:         return self.__raw
  141: 
  142:     def items(self) -> ItemsView[str, Any]:
  143:         """Lazily decode and iterate elements in this document."""
  144:         return self.__inflated.items()
  145: 
  146:     @property
  147:     def __inflated(self) -> Mapping[str, Any]:
  148:         if self.__inflated_doc is None:
  149:             # We already validated the object's size when this document was
  150:             # created, so no need to do that again.
  151:             self.__inflated_doc = self._inflate_bson(self.__raw, self.__codec_options)
  152:         return self.__inflated_doc
  153: 
  154:     @staticmethod
  155:     def _inflate_bson(
  156:         bson_bytes: bytes, codec_options: CodecOptions[RawBSONDocument]
  157:     ) -> Mapping[str, Any]:
  158:         return _inflate_bson(bson_bytes, codec_options)
  159: 
  160:     def __getitem__(self, item: str) -> Any:
  161:         return self.__inflated[item]
  162: 
  163:     def __iter__(self) -> Iterator[str]:
  164:         return iter(self.__inflated)
  165: 
  166:     def __len__(self) -> int:
  167:         return len(self.__inflated)
  168: 
  169:     def __eq__(self, other: Any) -> bool:
  170:         if isinstance(other, RawBSONDocument):
  171:             return self.__raw == other.raw
  172:         return NotImplemented
  173: 
  174:     def __repr__(self) -> str:
  175:         return f"{self.__class__.__name__}({self.raw!r}, codec_options={self.__codec_options!r})"
  176: 
  177: 
  178: class _RawArrayBSONDocument(RawBSONDocument):
  179:     """A RawBSONDocument that only expands sub-documents and arrays when accessed."""
  180: 
  181:     @staticmethod
  182:     def _inflate_bson(
  183:         bson_bytes: bytes, codec_options: CodecOptions[RawBSONDocument]
  184:     ) -> Mapping[str, Any]:
  185:         return _inflate_bson(bson_bytes, codec_options, raw_array=True)
  186: 
  187: 
  188: DEFAULT_RAW_BSON_OPTIONS: CodecOptions[RawBSONDocument] = DEFAULT.with_options(
  189:     document_class=RawBSONDocument
  190: )
  191: _RAW_ARRAY_BSON_OPTIONS: CodecOptions[_RawArrayBSONDocument] = DEFAULT.with_options(
  192:     document_class=_RawArrayBSONDocument
  193: )
  194: """The default :class:`~bson.codec_options.CodecOptions` for
  195: :class:`RawBSONDocument`.
  196: """
