    1: # Copyright 2009-2015 MongoDB, Inc.
    2: #
    3: # Licensed under the Apache License, Version 2.0 (the "License");
    4: # you may not use this file except in compliance with the License.
    5: # You may obtain a copy of the License at
    6: #
    7: # http://www.apache.org/licenses/LICENSE-2.0
    8: #
    9: # Unless required by applicable law or agreed to in writing, software
   10: # distributed under the License is distributed on an "AS IS" BASIS,
   11: # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   12: # See the License for the specific language governing permissions and
   13: # limitations under the License.
   14: 
   15: """Tools for manipulating DBRefs (references to MongoDB documents)."""
   16: from __future__ import annotations
   17: 
   18: from copy import deepcopy
   19: from typing import Any, Mapping, Optional
   20: 
   21: from bson._helpers import _getstate_slots, _setstate_slots
   22: from bson.son import SON
   23: 
   24: 
   25: class DBRef:
   26:     """A reference to a document stored in MongoDB."""
   27: 
   28:     __slots__ = "__collection", "__id", "__database", "__kwargs"
   29:     __getstate__ = _getstate_slots
   30:     __setstate__ = _setstate_slots
   31:     # DBRef isn't actually a BSON "type" so this number was arbitrarily chosen.
   32:     _type_marker = 100
   33: 
   34:     def __init__(
   35:         self,
   36:         collection: str,
   37:         id: Any,
   38:         database: Optional[str] = None,
   39:         _extra: Optional[Mapping[str, Any]] = None,
   40:         **kwargs: Any,
   41:     ) -> None:
   42:         """Initialize a new :class:`DBRef`.
   43: 
   44:         Raises :class:`TypeError` if `collection` or `database` is not
   45:         an instance of :class:`str`. `database` is optional and allows
   46:         references to documents to work across databases. Any additional
   47:         keyword arguments will create additional fields in the resultant
   48:         embedded document.
   49: 
   50:         :param collection: name of the collection the document is stored in
   51:         :param id: the value of the document's ``"_id"`` field
   52:         :param database: name of the database to reference
   53:         :param kwargs: additional keyword arguments will
   54:             create additional, custom fields
   55: 
   56:         .. seealso:: The MongoDB documentation on `dbrefs <https://dochub.mongodb.org/core/dbrefs>`_.
   57:         """
   58:         if not isinstance(collection, str):
   59:             raise TypeError("collection must be an instance of str")
   60:         if database is not None and not isinstance(database, str):
   61:             raise TypeError("database must be an instance of str")
   62: 
   63:         self.__collection = collection
   64:         self.__id = id
   65:         self.__database = database
   66:         kwargs.update(_extra or {})
   67:         self.__kwargs = kwargs
   68: 
   69:     @property
   70:     def collection(self) -> str:
   71:         """Get the name of this DBRef's collection."""
   72:         return self.__collection
   73: 
   74:     @property
   75:     def id(self) -> Any:
   76:         """Get this DBRef's _id."""
   77:         return self.__id
   78: 
   79:     @property
   80:     def database(self) -> Optional[str]:
   81:         """Get the name of this DBRef's database.
   82: 
   83:         Returns None if this DBRef doesn't specify a database.
   84:         """
   85:         return self.__database
   86: 
   87:     def __getattr__(self, key: Any) -> Any:
   88:         try:
   89:             return self.__kwargs[key]
   90:         except KeyError:
   91:             raise AttributeError(key) from None
   92: 
   93:     def as_doc(self) -> SON[str, Any]:
   94:         """Get the SON document representation of this DBRef.
   95: 
   96:         Generally not needed by application developers
   97:         """
   98:         doc = SON([("$ref", self.collection), ("$id", self.id)])
   99:         if self.database is not None:
  100:             doc["$db"] = self.database
  101:         doc.update(self.__kwargs)
  102:         return doc
  103: 
  104:     def __repr__(self) -> str:
  105:         extra = "".join([f", {k}={v!r}" for k, v in self.__kwargs.items()])
  106:         if self.database is None:
  107:             return f"DBRef({self.collection!r}, {self.id!r}{extra})"
  108:         return f"DBRef({self.collection!r}, {self.id!r}, {self.database!r}{extra})"
  109: 
  110:     def __eq__(self, other: Any) -> bool:
  111:         if isinstance(other, DBRef):
  112:             us = (self.__database, self.__collection, self.__id, self.__kwargs)
  113:             them = (other.__database, other.__collection, other.__id, other.__kwargs)
  114:             return us == them
  115:         return NotImplemented
  116: 
  117:     def __ne__(self, other: Any) -> bool:
  118:         return not self == other
  119: 
  120:     def __hash__(self) -> int:
  121:         """Get a hash value for this :class:`DBRef`."""
  122:         return hash(
  123:             (self.__collection, self.__id, self.__database, tuple(sorted(self.__kwargs.items())))
  124:         )
  125: 
  126:     def __deepcopy__(self, memo: Any) -> DBRef:
  127:         """Support function for `copy.deepcopy()`."""
  128:         return DBRef(
  129:             deepcopy(self.__collection, memo),
  130:             deepcopy(self.__id, memo),
  131:             deepcopy(self.__database, memo),
  132:             deepcopy(self.__kwargs, memo),
  133:         )
