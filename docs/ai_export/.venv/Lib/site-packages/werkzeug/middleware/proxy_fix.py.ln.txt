    1: """
    2: X-Forwarded-For Proxy Fix
    3: =========================
    4: 
    5: This module provides a middleware that adjusts the WSGI environ based on
    6: ``X-Forwarded-`` headers that proxies in front of an application may
    7: set.
    8: 
    9: When an application is running behind a proxy server, WSGI may see the
   10: request as coming from that server rather than the real client. Proxies
   11: set various headers to track where the request actually came from.
   12: 
   13: This middleware should only be used if the application is actually
   14: behind such a proxy, and should be configured with the number of proxies
   15: that are chained in front of it. Not all proxies set all the headers.
   16: Since incoming headers can be faked, you must set how many proxies are
   17: setting each header so the middleware knows what to trust.
   18: 
   19: .. autoclass:: ProxyFix
   20: 
   21: :copyright: 2007 Pallets
   22: :license: BSD-3-Clause
   23: """
   24: 
   25: from __future__ import annotations
   26: 
   27: import typing as t
   28: 
   29: from ..http import parse_list_header
   30: 
   31: if t.TYPE_CHECKING:
   32:     from _typeshed.wsgi import StartResponse
   33:     from _typeshed.wsgi import WSGIApplication
   34:     from _typeshed.wsgi import WSGIEnvironment
   35: 
   36: 
   37: class ProxyFix:
   38:     """Adjust the WSGI environ based on ``X-Forwarded-`` that proxies in
   39:     front of the application may set.
   40: 
   41:     -   ``X-Forwarded-For`` sets ``REMOTE_ADDR``.
   42:     -   ``X-Forwarded-Proto`` sets ``wsgi.url_scheme``.
   43:     -   ``X-Forwarded-Host`` sets ``HTTP_HOST``, ``SERVER_NAME``, and
   44:         ``SERVER_PORT``.
   45:     -   ``X-Forwarded-Port`` sets ``HTTP_HOST`` and ``SERVER_PORT``.
   46:     -   ``X-Forwarded-Prefix`` sets ``SCRIPT_NAME``.
   47: 
   48:     You must tell the middleware how many proxies set each header so it
   49:     knows what values to trust. It is a security issue to trust values
   50:     that came from the client rather than a proxy.
   51: 
   52:     The original values of the headers are stored in the WSGI
   53:     environ as ``werkzeug.proxy_fix.orig``, a dict.
   54: 
   55:     :param app: The WSGI application to wrap.
   56:     :param x_for: Number of values to trust for ``X-Forwarded-For``.
   57:     :param x_proto: Number of values to trust for ``X-Forwarded-Proto``.
   58:     :param x_host: Number of values to trust for ``X-Forwarded-Host``.
   59:     :param x_port: Number of values to trust for ``X-Forwarded-Port``.
   60:     :param x_prefix: Number of values to trust for
   61:         ``X-Forwarded-Prefix``.
   62: 
   63:     .. code-block:: python
   64: 
   65:         from werkzeug.middleware.proxy_fix import ProxyFix
   66:         # App is behind one proxy that sets the -For and -Host headers.
   67:         app = ProxyFix(app, x_for=1, x_host=1)
   68: 
   69:     .. versionchanged:: 1.0
   70:         The ``num_proxies`` argument and attribute; the ``get_remote_addr`` method; and
   71:         the environ keys ``orig_remote_addr``, ``orig_wsgi_url_scheme``, and
   72:         ``orig_http_host`` were removed.
   73: 
   74:     .. versionchanged:: 0.15
   75:         All headers support multiple values. Each header is configured with a separate
   76:         number of trusted proxies.
   77: 
   78:     .. versionchanged:: 0.15
   79:         Original WSGI environ values are stored in the ``werkzeug.proxy_fix.orig`` dict.
   80: 
   81:     .. versionchanged:: 0.15
   82:         Support ``X-Forwarded-Port`` and ``X-Forwarded-Prefix``.
   83: 
   84:     .. versionchanged:: 0.15
   85:         ``X-Forwarded-Host`` and ``X-Forwarded-Port`` modify
   86:         ``SERVER_NAME`` and ``SERVER_PORT``.
   87:     """
   88: 
   89:     def __init__(
   90:         self,
   91:         app: WSGIApplication,
   92:         x_for: int = 1,
   93:         x_proto: int = 1,
   94:         x_host: int = 0,
   95:         x_port: int = 0,
   96:         x_prefix: int = 0,
   97:     ) -> None:
   98:         self.app = app
   99:         self.x_for = x_for
  100:         self.x_proto = x_proto
  101:         self.x_host = x_host
  102:         self.x_port = x_port
  103:         self.x_prefix = x_prefix
  104: 
  105:     def _get_real_value(self, trusted: int, value: str | None) -> str | None:
  106:         """Get the real value from a list header based on the configured
  107:         number of trusted proxies.
  108: 
  109:         :param trusted: Number of values to trust in the header.
  110:         :param value: Comma separated list header value to parse.
  111:         :return: The real value, or ``None`` if there are fewer values
  112:             than the number of trusted proxies.
  113: 
  114:         .. versionchanged:: 1.0
  115:             Renamed from ``_get_trusted_comma``.
  116: 
  117:         .. versionadded:: 0.15
  118:         """
  119:         if not (trusted and value):
  120:             return None
  121:         values = parse_list_header(value)
  122:         if len(values) >= trusted:
  123:             return values[-trusted]
  124:         return None
  125: 
  126:     def __call__(
  127:         self, environ: WSGIEnvironment, start_response: StartResponse
  128:     ) -> t.Iterable[bytes]:
  129:         """Modify the WSGI environ based on the various ``Forwarded``
  130:         headers before calling the wrapped application. Store the
  131:         original environ values in ``werkzeug.proxy_fix.orig_{key}``.
  132:         """
  133:         environ_get = environ.get
  134:         orig_remote_addr = environ_get("REMOTE_ADDR")
  135:         orig_wsgi_url_scheme = environ_get("wsgi.url_scheme")
  136:         orig_http_host = environ_get("HTTP_HOST")
  137:         environ.update(
  138:             {
  139:                 "werkzeug.proxy_fix.orig": {
  140:                     "REMOTE_ADDR": orig_remote_addr,
  141:                     "wsgi.url_scheme": orig_wsgi_url_scheme,
  142:                     "HTTP_HOST": orig_http_host,
  143:                     "SERVER_NAME": environ_get("SERVER_NAME"),
  144:                     "SERVER_PORT": environ_get("SERVER_PORT"),
  145:                     "SCRIPT_NAME": environ_get("SCRIPT_NAME"),
  146:                 }
  147:             }
  148:         )
  149: 
  150:         x_for = self._get_real_value(self.x_for, environ_get("HTTP_X_FORWARDED_FOR"))
  151:         if x_for:
  152:             environ["REMOTE_ADDR"] = x_for
  153: 
  154:         x_proto = self._get_real_value(
  155:             self.x_proto, environ_get("HTTP_X_FORWARDED_PROTO")
  156:         )
  157:         if x_proto:
  158:             environ["wsgi.url_scheme"] = x_proto
  159: 
  160:         x_host = self._get_real_value(self.x_host, environ_get("HTTP_X_FORWARDED_HOST"))
  161:         if x_host:
  162:             environ["HTTP_HOST"] = environ["SERVER_NAME"] = x_host
  163:             # "]" to check for IPv6 address without port
  164:             if ":" in x_host and not x_host.endswith("]"):
  165:                 environ["SERVER_NAME"], environ["SERVER_PORT"] = x_host.rsplit(":", 1)
  166: 
  167:         x_port = self._get_real_value(self.x_port, environ_get("HTTP_X_FORWARDED_PORT"))
  168:         if x_port:
  169:             host = environ.get("HTTP_HOST")
  170:             if host:
  171:                 # "]" to check for IPv6 address without port
  172:                 if ":" in host and not host.endswith("]"):
  173:                     host = host.rsplit(":", 1)[0]
  174:                 environ["HTTP_HOST"] = f"{host}:{x_port}"
  175:             environ["SERVER_PORT"] = x_port
  176: 
  177:         x_prefix = self._get_real_value(
  178:             self.x_prefix, environ_get("HTTP_X_FORWARDED_PREFIX")
  179:         )
  180:         if x_prefix:
  181:             environ["SCRIPT_NAME"] = x_prefix
  182: 
  183:         return self.app(environ, start_response)
