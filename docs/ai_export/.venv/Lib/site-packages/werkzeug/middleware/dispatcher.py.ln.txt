    1: """
    2: Application Dispatcher
    3: ======================
    4: 
    5: This middleware creates a single WSGI application that dispatches to
    6: multiple other WSGI applications mounted at different URL paths.
    7: 
    8: A common example is writing a Single Page Application, where you have a
    9: backend API and a frontend written in JavaScript that does the routing
   10: in the browser rather than requesting different pages from the server.
   11: The frontend is a single HTML and JS file that should be served for any
   12: path besides "/api".
   13: 
   14: This example dispatches to an API app under "/api", an admin app
   15: under "/admin", and an app that serves frontend files for all other
   16: requests::
   17: 
   18:     app = DispatcherMiddleware(serve_frontend, {
   19:         '/api': api_app,
   20:         '/admin': admin_app,
   21:     })
   22: 
   23: In production, you might instead handle this at the HTTP server level,
   24: serving files or proxying to application servers based on location. The
   25: API and admin apps would each be deployed with a separate WSGI server,
   26: and the static files would be served directly by the HTTP server.
   27: 
   28: .. autoclass:: DispatcherMiddleware
   29: 
   30: :copyright: 2007 Pallets
   31: :license: BSD-3-Clause
   32: """
   33: 
   34: from __future__ import annotations
   35: 
   36: import typing as t
   37: 
   38: if t.TYPE_CHECKING:
   39:     from _typeshed.wsgi import StartResponse
   40:     from _typeshed.wsgi import WSGIApplication
   41:     from _typeshed.wsgi import WSGIEnvironment
   42: 
   43: 
   44: class DispatcherMiddleware:
   45:     """Combine multiple applications as a single WSGI application.
   46:     Requests are dispatched to an application based on the path it is
   47:     mounted under.
   48: 
   49:     :param app: The WSGI application to dispatch to if the request
   50:         doesn't match a mounted path.
   51:     :param mounts: Maps path prefixes to applications for dispatching.
   52:     """
   53: 
   54:     def __init__(
   55:         self,
   56:         app: WSGIApplication,
   57:         mounts: dict[str, WSGIApplication] | None = None,
   58:     ) -> None:
   59:         self.app = app
   60:         self.mounts = mounts or {}
   61: 
   62:     def __call__(
   63:         self, environ: WSGIEnvironment, start_response: StartResponse
   64:     ) -> t.Iterable[bytes]:
   65:         script = environ.get("PATH_INFO", "")
   66:         path_info = ""
   67: 
   68:         while "/" in script:
   69:             if script in self.mounts:
   70:                 app = self.mounts[script]
   71:                 break
   72: 
   73:             script, last_item = script.rsplit("/", 1)
   74:             path_info = f"/{last_item}{path_info}"
   75:         else:
   76:             app = self.mounts.get(script, self.app)
   77: 
   78:         original_script_name = environ.get("SCRIPT_NAME", "")
   79:         environ["SCRIPT_NAME"] = original_script_name + script
   80:         environ["PATH_INFO"] = path_info
   81:         return app(environ, start_response)
