    1: #!/usr/bin/env python
    2: # -*- coding: utf-8 -*-
    3: 
    4: """
    5:     nodeenv
    6:     ~~~~~~~
    7:     Node.js virtual environment
    8: 
    9:     :copyright: (c) 2014 by Eugene Kalinin
   10:     :license: BSD, see LICENSE for more details.
   11: """
   12: 
   13: import contextlib
   14: import io
   15: import json
   16: import sys
   17: import os
   18: import re
   19: import ssl
   20: import stat
   21: import logging
   22: import operator
   23: import argparse
   24: import subprocess
   25: import tarfile
   26: if sys.version_info < (3, 3):
   27:     from pipes import quote as _quote
   28: else:
   29:     from shlex import quote as _quote
   30: import platform
   31: import zipfile
   32: import shutil
   33: import sysconfig
   34: import glob
   35: 
   36: try:  # pragma: no cover (py2 only)
   37:     from ConfigParser import SafeConfigParser as ConfigParser
   38:     # noinspection PyCompatibility
   39:     import urllib2
   40:     iteritems = operator.methodcaller('iteritems')
   41:     import httplib
   42:     IncompleteRead = httplib.IncompleteRead
   43: except ImportError:  # pragma: no cover (py3 only)
   44:     from configparser import ConfigParser
   45:     # noinspection PyUnresolvedReferences
   46:     import urllib.request as urllib2
   47:     iteritems = operator.methodcaller('items')
   48:     import http
   49:     IncompleteRead = http.client.IncompleteRead
   50: 
   51: nodeenv_version = '1.9.1'
   52: 
   53: join = os.path.join
   54: abspath = os.path.abspath
   55: src_base_url = None
   56: 
   57: is_PY3 = sys.version_info[0] >= 3
   58: is_WIN = platform.system() == 'Windows'
   59: is_CYGWIN = platform.system().startswith(('CYGWIN', 'MSYS'))
   60: 
   61: ignore_ssl_certs = False
   62: 
   63: # ---------------------------------------------------------
   64: # Utils
   65: 
   66: 
   67: # https://github.com/jhermann/waif/blob/master/python/to_uft8.py
   68: def to_utf8(text):
   69:     """Convert given text to UTF-8 encoding (as far as possible)."""
   70:     if not text or is_PY3:
   71:         return text
   72: 
   73:     try:           # unicode or pure ascii
   74:         return text.encode("utf8")
   75:     except UnicodeDecodeError:
   76:         try:       # successful UTF-8 decode means it's pretty sure UTF-8
   77:             text.decode("utf8")
   78:             return text
   79:         except UnicodeDecodeError:
   80:             try:   # get desperate; and yes, this has a western hemisphere bias
   81:                 return text.decode("cp1252").encode("utf8")
   82:             except UnicodeDecodeError:
   83:                 pass
   84: 
   85:     return text    # return unchanged, hope for the best
   86: 
   87: 
   88: class Config(object):
   89:     """
   90:     Configuration namespace.
   91:     """
   92: 
   93:     # Defaults
   94:     node = 'latest'
   95:     npm = 'latest'
   96:     with_npm = False
   97:     jobs = '2'
   98:     without_ssl = False
   99:     debug = False
  100:     profile = False
  101:     make = 'make'
  102:     prebuilt = True
  103:     ignore_ssl_certs = False
  104:     mirror = None
  105: 
  106:     @classmethod
  107:     def _load(cls, configfiles, verbose=False):
  108:         """
  109:         Load configuration from the given files in reverse order,
  110:         if they exist and have a [nodeenv] section.
  111:         Additionally, load version from .node-version if file exists.
  112:         """
  113:         for configfile in reversed(configfiles):
  114:             configfile = os.path.expanduser(configfile)
  115:             if not os.path.exists(configfile):
  116:                 continue
  117: 
  118:             ini_file = ConfigParser()
  119:             ini_file.read(configfile)
  120:             section = "nodeenv"
  121:             if not ini_file.has_section(section):
  122:                 continue
  123: 
  124:             for attr, val in iteritems(vars(cls)):
  125:                 if attr.startswith('_') or not \
  126:                    ini_file.has_option(section, attr):
  127:                     continue
  128: 
  129:                 if isinstance(val, bool):
  130:                     val = ini_file.getboolean(section, attr)
  131:                 else:
  132:                     val = ini_file.get(section, attr)
  133: 
  134:                 if verbose:
  135:                     print('CONFIG {0}: {1} = {2}'.format(
  136:                         os.path.basename(configfile), attr, val))
  137:                 setattr(cls, attr, val)
  138: 
  139:         if os.path.exists(".node-version"):
  140:             with open(".node-version", "r") as v_file:
  141:                 setattr(cls, "node", v_file.readlines(1)[0].strip())
  142: 
  143:     @classmethod
  144:     def _dump(cls):
  145:         """
  146:         Print defaults for the README.
  147:         """
  148:         print("    [nodeenv]")
  149:         print("    " + "\n    ".join(
  150:             "%s = %s" % (k, v) for k, v in sorted(iteritems(vars(cls)))
  151:             if not k.startswith('_')))
  152: 
  153: 
  154: Config._default = dict(
  155:     (attr, val) for attr, val in iteritems(vars(Config))
  156:     if not attr.startswith('_')
  157: )
  158: 
  159: 
  160: def clear_output(out):
  161:     """
  162:     Remove new-lines and
  163:     """
  164:     return out.decode('utf-8').replace('\n', '')
  165: 
  166: 
  167: def remove_env_bin_from_path(env, env_bin_dir):
  168:     """
  169:     Remove bin directory of the current environment from PATH
  170:     """
  171:     return env.replace(env_bin_dir + ':', '')
  172: 
  173: 
  174: def parse_version(version_str):
  175:     """
  176:     Parse version string to a tuple of integer parts
  177:     """
  178:     v = version_str.replace('v', '').split('.')[:3]
  179:     # remove all after '+' in the PATCH part of the version
  180:     if len(v) >= 3:
  181:         v[2] = v[2].split('+')[0]
  182:     return tuple(map(int, v))
  183: 
  184: 
  185: def node_version_from_args(args):
  186:     """
  187:     Parse the node version from the argparse args
  188:     """
  189:     if args.node == 'system':
  190:         out, err = subprocess.Popen(
  191:             ["node", "--version"], stdout=subprocess.PIPE).communicate()
  192:         return parse_version(clear_output(out))
  193: 
  194:     return parse_version(args.node)
  195: 
  196: 
  197: def create_logger():
  198:     """
  199:     Create logger for diagnostic
  200:     """
  201:     # create logger
  202:     loggr = logging.getLogger("nodeenv")
  203:     loggr.setLevel(logging.INFO)
  204: 
  205:     # monkey patch
  206:     def emit(self, record):
  207:         msg = self.format(record)
  208:         fs = "%s" if getattr(record, "continued", False) else "%s\n"
  209:         self.stream.write(fs % to_utf8(msg))
  210:         self.flush()
  211:     logging.StreamHandler.emit = emit
  212: 
  213:     # create console handler and set level to debug
  214:     ch = logging.StreamHandler()
  215:     ch.setLevel(logging.DEBUG)
  216: 
  217:     # create formatter
  218:     formatter = logging.Formatter(fmt="%(message)s")
  219: 
  220:     # add formatter to ch
  221:     ch.setFormatter(formatter)
  222: 
  223:     # add ch to logger
  224:     loggr.addHandler(ch)
  225:     return loggr
  226: 
  227: 
  228: logger = create_logger()
  229: 
  230: 
  231: def make_parser():
  232:     """
  233:     Make a command line argument parser.
  234:     """
  235:     parser = argparse.ArgumentParser(
  236:         usage="%(prog)s [OPTIONS] DEST_DIR")
  237: 
  238:     parser.add_argument(
  239:         '--version', action='version', version=nodeenv_version)
  240: 
  241:     parser.add_argument(
  242:         '-n', '--node', dest='node', metavar='NODE_VER', default=Config.node,
  243:         help='The node.js version to use, e.g., '
  244:         '--node=0.4.3 will use the node-v0.4.3 '
  245:         'to create the new environment. '
  246:         'The default is last stable version (`latest`). '
  247:         'Use `lts` to use the latest LTS release. '
  248:         'Use `system` to use system-wide node.')
  249: 
  250:     parser.add_argument(
  251:         '--mirror',
  252:         action="store", dest='mirror', default=Config.mirror,
  253:         help='Set mirror server of nodejs.org to download from.')
  254: 
  255:     if not is_WIN:
  256:         parser.add_argument(
  257:             '-j', '--jobs', dest='jobs', default=Config.jobs,
  258:             help='Sets number of parallel commands at node.js compilation. '
  259:             'The default is 2 jobs.')
  260: 
  261:         parser.add_argument(
  262:             '--load-average', dest='load_average',
  263:             help='Sets maximum load average for executing parallel commands '
  264:             'at node.js compilation.')
  265: 
  266:         parser.add_argument(
  267:             '--without-ssl', dest='without_ssl',
  268:             action='store_true', default=Config.without_ssl,
  269:             help='Build node.js without SSL support')
  270: 
  271:         parser.add_argument(
  272:             '--debug', dest='debug',
  273:             action='store_true', default=Config.debug,
  274:             help='Build debug variant of the node.js')
  275: 
  276:         parser.add_argument(
  277:             '--profile', dest='profile',
  278:             action='store_true', default=Config.profile,
  279:             help='Enable profiling for node.js')
  280: 
  281:         parser.add_argument(
  282:             '--make', '-m', dest='make_path',
  283:             metavar='MAKE_PATH',
  284:             help='Path to make command',
  285:             default=Config.make)
  286: 
  287:         parser.add_argument(
  288:             '--source', dest='prebuilt',
  289:             action='store_false', default=Config.prebuilt,
  290:             help='Install node.js from the source')
  291: 
  292:     parser.add_argument(
  293:         '-v', '--verbose',
  294:         action='store_true', dest='verbose', default=False,
  295:         help="Verbose mode")
  296: 
  297:     parser.add_argument(
  298:         '-q', '--quiet',
  299:         action='store_true', dest='quiet', default=False,
  300:         help="Quiet mode")
  301: 
  302:     parser.add_argument(
  303:         '-C', '--config-file', dest='config_file', default=None,
  304:         help="Load a different file than '~/.nodeenvrc'. "
  305:         "Pass an empty string for no config (use built-in defaults).")
  306: 
  307:     parser.add_argument(
  308:         '-r', '--requirements',
  309:         dest='requirements', default='', metavar='FILENAME',
  310:         help='Install all the packages listed in the given requirements file.')
  311: 
  312:     parser.add_argument(
  313:         '--prompt', dest='prompt',
  314:         help='Provides an alternative prompt prefix for this environment')
  315: 
  316:     parser.add_argument(
  317:         '-l', '--list', dest='list',
  318:         action='store_true', default=False,
  319:         help='Lists available node.js versions')
  320: 
  321:     parser.add_argument(
  322:         '--update', dest='update',
  323:         action='store_true', default=False,
  324:         help='Install npm packages from file without node')
  325: 
  326:     parser.add_argument(
  327:         '--with-npm', dest='with_npm',
  328:         action='store_true', default=Config.with_npm,
  329:         help='Build without installing npm into the new virtual environment. '
  330:         'Required for node.js < 0.6.3. By default, the npm included with '
  331:         'node.js is used. Under Windows, this defaults to true.')
  332: 
  333:     parser.add_argument(
  334:         '--npm', dest='npm',
  335:         metavar='NPM_VER', default=Config.npm,
  336:         help='The npm version to use, e.g., '
  337:         '--npm=0.3.18 will use the npm-0.3.18.tgz '
  338:         'tarball to install. '
  339:         'The default is last available version (`latest`).')
  340: 
  341:     parser.add_argument(
  342:         '--no-npm-clean', dest='no_npm_clean',
  343:         action='store_true', default=False,
  344:         help='Skip the npm 0.x cleanup.  Cleanup is enabled by default.')
  345: 
  346:     parser.add_argument(
  347:         '--python-virtualenv', '-p', dest='python_virtualenv',
  348:         action='store_true', default=False,
  349:         help='Use current python virtualenv')
  350: 
  351:     parser.add_argument(
  352:         '--clean-src', '-c', dest='clean_src',
  353:         action='store_true', default=False,
  354:         help='Remove "src" directory after installation')
  355: 
  356:     parser.add_argument(
  357:         '--force', dest='force',
  358:         action='store_true', default=False,
  359:         help='Force installation in a pre-existing directory')
  360: 
  361:     parser.add_argument(
  362:         '--prebuilt', dest='prebuilt',
  363:         action='store_true', default=Config.prebuilt,
  364:         help='Install node.js from prebuilt package (default)')
  365: 
  366:     parser.add_argument(
  367:         '--ignore_ssl_certs', dest='ignore_ssl_certs',
  368:         action='store_true', default=Config.ignore_ssl_certs,
  369:         help='Ignore certificates for package downloads. - UNSAFE -')
  370: 
  371:     parser.add_argument(
  372:         metavar='DEST_DIR', dest='env_dir', nargs='?',
  373:         help='Destination directory')
  374: 
  375:     return parser
  376: 
  377: 
  378: def parse_args(check=True):
  379:     """
  380:     Parses command line arguments.
  381: 
  382:     Set `check` to False to skip validation checks.
  383:     """
  384:     parser = make_parser()
  385:     args = parser.parse_args()
  386: 
  387:     if args.config_file is None:
  388:         args.config_file = ["./tox.ini", "./setup.cfg", "~/.nodeenvrc"]
  389:     elif not args.config_file:
  390:         args.config_file = []
  391:     else:
  392:         # Make sure that explicitly provided files exist
  393:         if not os.path.exists(args.config_file):
  394:             parser.error("Config file '{0}' doesn't exist!".format(
  395:                 args.config_file))
  396:         args.config_file = [args.config_file]
  397: 
  398:     if not check:
  399:         return args
  400: 
  401:     if not args.list:
  402:         if not args.python_virtualenv and not args.env_dir:
  403:             parser.error('You must provide a DEST_DIR or '
  404:                          'use current python virtualenv')
  405: 
  406:     return args
  407: 
  408: 
  409: def mkdir(path):
  410:     """
  411:     Create directory
  412:     """
  413:     if not os.path.exists(path):
  414:         logger.debug(' * Creating: %s ... ', path, extra=dict(continued=True))
  415:         os.makedirs(path)
  416:         logger.debug('done.')
  417:     else:
  418:         logger.debug(' * Directory %s already exists', path)
  419: 
  420: 
  421: def make_executable(filename):
  422:     mode_0755 = (stat.S_IRWXU | stat.S_IXGRP |
  423:                  stat.S_IRGRP | stat.S_IROTH | stat.S_IXOTH)
  424:     os.chmod(filename, mode_0755)
  425: 
  426: 
  427: # noinspection PyArgumentList
  428: def writefile(dest, content, overwrite=True, append=False):
  429:     """
  430:     Create file and write content in it
  431:     """
  432:     content = to_utf8(content)
  433:     if is_PY3 and not isinstance(content, bytes):
  434:         content = bytes(content, 'utf-8')
  435:     if not os.path.exists(dest):
  436:         logger.debug(' * Writing %s ... ', dest, extra=dict(continued=True))
  437:         with open(dest, 'wb') as f:
  438:             f.write(content)
  439:         make_executable(dest)
  440:         logger.debug('done.')
  441:         return
  442:     else:
  443:         with open(dest, 'rb') as f:
  444:             c = f.read()
  445:         if content in c:
  446:             logger.debug(' * Content %s already in place', dest)
  447:             return
  448: 
  449:         if not overwrite:
  450:             logger.info(' * File %s exists with different content; '
  451:                         ' not overwriting', dest)
  452:             return
  453: 
  454:         if append:
  455:             logger.info(' * Appending data to %s', dest)
  456:             with open(dest, 'ab') as f:
  457:                 f.write(content)
  458:             return
  459: 
  460:         logger.info(' * Overwriting %s with new content', dest)
  461:         with open(dest, 'wb') as f:
  462:             f.write(content)
  463: 
  464: 
  465: def callit(cmd, show_stdout=True, in_shell=False,
  466:            cwd=None, extra_env=None):
  467:     """
  468:     Execute cmd line in sub-shell
  469:     """
  470:     all_output = []
  471:     cmd_parts = []
  472: 
  473:     for part in cmd:
  474:         if len(part) > 45:
  475:             part = part[:20] + "..." + part[-20:]
  476:         if ' ' in part or '\n' in part or '"' in part or "'" in part:
  477:             part = '"%s"' % part.replace('"', '\\"')
  478:         cmd_parts.append(part)
  479:     cmd_desc = ' '.join(cmd_parts)
  480:     logger.debug(" ** Running command %s" % cmd_desc)
  481: 
  482:     if in_shell:
  483:         cmd = ' '.join(cmd)
  484: 
  485:     # output
  486:     stdout = subprocess.PIPE
  487: 
  488:     # env
  489:     if extra_env:
  490:         env = os.environ.copy()
  491:         if extra_env:
  492:             env.update(extra_env)
  493:     else:
  494:         env = None
  495: 
  496:     # execute
  497:     try:
  498:         proc = subprocess.Popen(
  499:             cmd, stderr=subprocess.STDOUT, stdin=None, stdout=stdout,
  500:             cwd=cwd, env=env, shell=in_shell)
  501:     except Exception:
  502:         e = sys.exc_info()[1]
  503:         logger.error("Error %s while executing command %s" % (e, cmd_desc))
  504:         raise
  505: 
  506:     stdout = proc.stdout
  507:     while stdout:
  508:         line = stdout.readline()
  509:         if not line:
  510:             break
  511:         try:
  512:             if is_WIN:
  513:                 line = line.decode('mbcs').rstrip()
  514:             else:
  515:                 line = line.decode('utf8').rstrip()
  516:         except UnicodeDecodeError:
  517:             line = line.decode('cp866').rstrip()
  518:         all_output.append(line)
  519:         if show_stdout:
  520:             logger.info(line)
  521:     proc.wait()
  522: 
  523:     # error handler
  524:     if proc.returncode:
  525:         if show_stdout:
  526:             for s in all_output:
  527:                 logger.critical(s)
  528:         raise OSError("Command %s failed with error code %s"
  529:                       % (cmd_desc, proc.returncode))
  530: 
  531:     return proc.returncode, all_output
  532: 
  533: 
  534: def get_root_url(version_str):
  535:     if parse_version(version_str) > (0, 5):
  536:         return '%s/v%s/' % (src_base_url, version_str)
  537:     else:
  538:         return src_base_url
  539: 
  540: 
  541: def is_x86_64_musl():
  542:     return sysconfig.get_config_var('HOST_GNU_TYPE') == 'x86_64-pc-linux-musl'
  543: 
  544: 
  545: def is_riscv64():
  546:     return platform.machine() == 'riscv64'
  547: 
  548: 
  549: def get_node_bin_url(version):
  550:     archmap = {
  551:         'x86':    'x86',  # Windows Vista 32
  552:         'i686':   'x86',
  553:         'x86_64': 'x64',  # Linux Ubuntu 64
  554:         'amd64':  'x64',  # FreeBSD 64bits
  555:         'AMD64':  'x64',  # Windows Server 2012 R2 (x64)
  556:         'armv6l': 'armv6l',     # arm
  557:         'armv7l': 'armv7l',
  558:         'armv8l': 'armv7l',
  559:         'aarch64': 'arm64',
  560:         'arm64': 'arm64',
  561:         'arm64/v8': 'arm64',
  562:         'armv8': 'arm64',
  563:         'armv8.4': 'arm64',
  564:         'ppc64le': 'ppc64le',   # Power PC
  565:         's390x': 's390x',       # IBM S390x
  566:         'riscv64': 'riscv64',   # RISCV 64
  567:     }
  568:     sysinfo = {
  569:         'system': platform.system().lower(),
  570:         'arch': archmap[platform.machine()],
  571:     }
  572:     if is_WIN or is_CYGWIN:
  573:         postfix = '-win-%(arch)s.zip' % sysinfo
  574:     elif is_x86_64_musl():
  575:         postfix = '-linux-x64-musl.tar.gz'
  576:     else:
  577:         postfix = '-%(system)s-%(arch)s.tar.gz' % sysinfo
  578:     filename = 'node-v%s%s' % (version, postfix)
  579:     return get_root_url(version) + filename
  580: 
  581: 
  582: def get_node_src_url(version):
  583:     tar_name = 'node-v%s.tar.gz' % version
  584:     return get_root_url(version) + tar_name
  585: 
  586: 
  587: @contextlib.contextmanager
  588: def tarfile_open(*args, **kwargs):
  589:     """Compatibility layer because py26."""
  590:     tf = tarfile.open(*args, **kwargs)
  591:     try:
  592:         yield tf
  593:     finally:
  594:         tf.close()
  595: 
  596: 
  597: def _download_node_file(node_url, n_attempt=3):
  598:     """Do multiple attempts to avoid incomplete data in case
  599:     of unstable network"""
  600:     while n_attempt > 0:
  601:         try:
  602:             return io.BytesIO(urlopen(node_url).read())
  603:         except IncompleteRead as e:
  604:             logger.warning(
  605:                 'Incomplete read while reading '
  606:                 'from {} - {}'.format(node_url, e)
  607:             )
  608:             n_attempt -= 1
  609:             if n_attempt == 0:
  610:                 raise e
  611: 
  612: 
  613: def download_node_src(node_url, src_dir, args):
  614:     """
  615:     Download source code
  616:     """
  617:     logger.info('.', extra=dict(continued=True))
  618:     dl_contents = _download_node_file(node_url)
  619:     logger.info('.', extra=dict(continued=True))
  620: 
  621:     if is_WIN or is_CYGWIN:
  622:         ctx = zipfile.ZipFile(dl_contents)
  623:         members = operator.methodcaller('namelist')
  624:         member_name = lambda s: s  # noqa: E731
  625:     else:
  626:         ctx = tarfile_open(fileobj=dl_contents)
  627:         members = operator.methodcaller('getmembers')
  628:         member_name = operator.attrgetter('name')
  629: 
  630:     with ctx as archive:
  631:         node_ver = re.escape(args.node)
  632:         rexp_string = r"node-v%s[^/]*/(README\.md|CHANGELOG\.md|LICENSE)"\
  633:             % node_ver
  634:         extract_list = [
  635:             member
  636:             for member in members(archive)
  637:             if re.match(rexp_string, member_name(member)) is None
  638:         ]
  639:         archive.extractall(src_dir, extract_list)
  640: 
  641: 
  642: def urlopen(url):
  643:     home_url = "https://github.com/ekalinin/nodeenv/"
  644:     headers = {'User-Agent': 'nodeenv/%s (%s)' % (nodeenv_version, home_url)}
  645:     req = urllib2.Request(url, None, headers)
  646:     if ignore_ssl_certs:
  647:         # py27: protocol required, py3: optional
  648:         # https://github.com/ekalinin/nodeenv/issues/296
  649:         context = ssl.SSLContext(ssl.PROTOCOL_TLS)
  650:         context.verify_mode = ssl.CERT_NONE
  651:         return urllib2.urlopen(req, context=context)
  652:     return urllib2.urlopen(req)
  653: 
  654: # ---------------------------------------------------------
  655: # Virtual environment functions
  656: 
  657: 
  658: def copytree(src, dst, symlinks=False, ignore=None):
  659:     for item in os.listdir(src):
  660:         s = os.path.join(src, item)
  661:         d = os.path.join(dst, item)
  662:         if os.path.isdir(s):
  663:             try:
  664:                 shutil.copytree(s, d, symlinks, ignore)
  665:             except OSError:
  666:                 copytree(s, d, symlinks, ignore)
  667:         else:
  668:             if os.path.islink(s):
  669:                 # copy link only if it not exists. #189
  670:                 if not os.path.islink(d):
  671:                     os.symlink(os.readlink(s), d)
  672:             else:
  673:                 shutil.copy2(s, d)
  674: 
  675: 
  676: def copy_node_from_prebuilt(env_dir, src_dir, node_version):
  677:     """
  678:     Copy prebuilt binaries into environment
  679:     """
  680:     logger.info('.', extra=dict(continued=True))
  681:     if is_WIN:
  682:         dest = join(env_dir, 'Scripts')
  683:         mkdir(dest)
  684:     elif is_CYGWIN:
  685:         dest = join(env_dir, 'bin')
  686:         mkdir(dest)
  687:         # write here to avoid https://bugs.python.org/issue35650
  688:         writefile(join(env_dir, 'bin', 'node'), CYGWIN_NODE)
  689:     else:
  690:         dest = env_dir
  691: 
  692:     src_folder_tpl = src_dir + to_utf8('/node-v%s*' % node_version)
  693:     src_folder, = glob.glob(src_folder_tpl)
  694:     copytree(src_folder, dest, True)
  695: 
  696:     if is_CYGWIN:
  697:         for filename in ('npm', 'npx', 'node.exe'):
  698:             filename = join(env_dir, 'bin', filename)
  699:             if os.path.exists(filename):
  700:                 make_executable(filename)
  701: 
  702:     logger.info('.', extra=dict(continued=True))
  703: 
  704: 
  705: def build_node_from_src(env_dir, src_dir, node_src_dir, args):
  706:     env = {}
  707:     make_param_names = ['load-average', 'jobs']
  708:     make_param_values = map(
  709:         lambda x: getattr(args, x.replace('-', '_')),
  710:         make_param_names)
  711:     make_opts = [
  712:         '--{0}={1}'.format(name, value)
  713:         if len(value) > 0 else '--{0}'.format(name)
  714:         for name, value in zip(make_param_names, make_param_values)
  715:         if value is not None
  716:     ]
  717: 
  718:     if getattr(sys.version_info, 'major', sys.version_info[0]) > 2:
  719:         # Currently, the node.js build scripts are using python2.*,
  720:         # therefore we need to temporarily point python exec to the
  721:         # python 2.* version in this case.
  722:         python2_path = shutil.which('python2')
  723:         if not python2_path:
  724:             raise OSError(
  725:                 'Python >=3.0 virtualenv detected, but no python2 '
  726:                 'command (required for building node.js) was found'
  727:             )
  728:         logger.debug(' * Temporarily pointing python to %s', python2_path)
  729:         node_tmpbin_dir = join(src_dir, 'tmpbin')
  730:         node_tmpbin_link = join(node_tmpbin_dir, 'python')
  731:         mkdir(node_tmpbin_dir)
  732:         if not os.path.exists(node_tmpbin_link):
  733:             callit(['ln', '-s', python2_path, node_tmpbin_link])
  734:         env['PATH'] = '{}:{}'.format(node_tmpbin_dir,
  735:                                      os.environ.get('PATH', ''))
  736: 
  737:     conf_cmd = [
  738:         './configure',
  739:         '--prefix=%s' % _quote(env_dir)
  740:     ]
  741:     if args.without_ssl:
  742:         conf_cmd.append('--without-ssl')
  743:     if args.debug:
  744:         conf_cmd.append('--debug')
  745:     if args.profile:
  746:         conf_cmd.append('--profile')
  747: 
  748:     make_cmd = args.make_path
  749: 
  750:     callit(conf_cmd, args.verbose, True, node_src_dir, env)
  751:     logger.info('.', extra=dict(continued=True))
  752:     callit([make_cmd] + make_opts, args.verbose, True, node_src_dir, env)
  753:     logger.info('.', extra=dict(continued=True))
  754:     callit([make_cmd + ' install'], args.verbose, True, node_src_dir, env)
  755: 
  756: 
  757: def install_node(env_dir, src_dir, args):
  758:     """
  759:     Download source code for node.js, unpack it
  760:     and install it in virtual environment.
  761:     """
  762:     try:
  763:         install_node_wrapped(env_dir, src_dir, args)
  764:     except BaseException:
  765:         # this restores the newline suppressed by continued=True
  766:         logger.info('')
  767:         raise
  768: 
  769: 
  770: def install_node_wrapped(env_dir, src_dir, args):
  771:     env_dir = abspath(env_dir)
  772:     node_src_dir = join(src_dir, to_utf8('node-v%s' % args.node))
  773:     src_type = "prebuilt" if args.prebuilt else "source"
  774: 
  775:     logger.info(' * Install %s node (%s) ' % (src_type, args.node),
  776:                 extra=dict(continued=True))
  777: 
  778:     if args.prebuilt:
  779:         node_url = get_node_bin_url(args.node)
  780:     else:
  781:         node_url = get_node_src_url(args.node)
  782: 
  783:     # get src if not downloaded yet
  784:     if not os.path.exists(node_src_dir):
  785:         try:
  786:             download_node_src(node_url, src_dir, args)
  787:         except urllib2.HTTPError:
  788:             if "arm64" in node_url:
  789:                 # if arm64 not found, try x64
  790:                 download_node_src(node_url.replace('arm64', 'x64'),
  791:                                   src_dir, args)
  792:             else:
  793:                 logger.warning('Failed to download from %s' % node_url)
  794: 
  795:     logger.info('.', extra=dict(continued=True))
  796: 
  797:     if args.prebuilt:
  798:         copy_node_from_prebuilt(env_dir, src_dir, args.node)
  799:     else:
  800:         build_node_from_src(env_dir, src_dir, node_src_dir, args)
  801: 
  802:     logger.info(' done.')
  803: 
  804: 
  805: def install_npm(env_dir, _src_dir, args):
  806:     """
  807:     Download source code for npm, unpack it
  808:     and install it in virtual environment.
  809:     """
  810:     logger.info(' * Install npm.js (%s) ... ' % args.npm,
  811:                 extra=dict(continued=True))
  812:     env = dict(
  813:         os.environ,
  814:         clean='no' if args.no_npm_clean else 'yes',
  815:         npm_install=args.npm,
  816:     )
  817:     proc = subprocess.Popen(
  818:         (
  819:             'bash', '-c',
  820:             '. {0} && npm install -g npm@{1}'.format(
  821:                 _quote(join(env_dir, 'bin', 'activate')),
  822:                 args.npm,
  823:             )
  824:         ),
  825:         env=env,
  826:         stdin=subprocess.PIPE,
  827:         stdout=subprocess.PIPE,
  828:         stderr=subprocess.STDOUT,
  829:     )
  830:     out, _ = proc.communicate()
  831:     if args.verbose:
  832:         logger.info(out)
  833:     logger.info('done.')
  834: 
  835: 
  836: def install_npm_win(env_dir, src_dir, args):
  837:     """
  838:     Download source code for npm, unpack it
  839:     and install it in virtual environment.
  840:     """
  841:     logger.info(' * Install npm.js (%s) ... ' % args.npm,
  842:                 extra=dict(continued=True))
  843:     npm_url = 'https://github.com/npm/cli/archive/v%s.zip' % args.npm
  844:     npm_contents = io.BytesIO(urlopen(npm_url).read())
  845: 
  846:     bin_path = join(env_dir, 'Scripts')
  847:     node_modules_path = join(bin_path, 'node_modules', 'npm')
  848: 
  849:     if os.path.exists(node_modules_path):
  850:         shutil.rmtree(node_modules_path)
  851: 
  852:     if os.path.exists(join(bin_path, 'npm.cmd')):
  853:         os.remove(join(bin_path, 'npm.cmd'))
  854: 
  855:     if os.path.exists(join(bin_path, 'npm-cli.js')):
  856:         os.remove(join(bin_path, 'npm-cli.js'))
  857: 
  858:     with zipfile.ZipFile(npm_contents, 'r') as zipf:
  859:         zipf.extractall(src_dir)
  860: 
  861:     npm_ver = 'cli-%s' % args.npm
  862:     shutil.copytree(join(src_dir, npm_ver), node_modules_path)
  863:     shutil.copy(join(src_dir, npm_ver, 'bin', 'npm.cmd'),
  864:                 join(bin_path, 'npm.cmd'))
  865:     shutil.copy(join(src_dir, npm_ver, 'bin', 'npm-cli.js'),
  866:                 join(bin_path, 'npm-cli.js'))
  867: 
  868:     if is_CYGWIN:
  869:         shutil.copy(join(bin_path, 'npm-cli.js'),
  870:                     join(env_dir, 'bin', 'npm-cli.js'))
  871:         shutil.copytree(join(bin_path, 'node_modules'),
  872:                         join(env_dir, 'bin', 'node_modules'))
  873:         npm_gh_url = 'https://raw.githubusercontent.com/npm/cli'
  874:         npm_bin_url = '{}/{}/bin/npm'.format(npm_gh_url, args.npm)
  875:         writefile(join(env_dir, 'bin', 'npm'), urlopen(npm_bin_url).read())
  876: 
  877: 
  878: def install_packages(env_dir, args):
  879:     """
  880:     Install node.js packages via npm
  881:     """
  882:     logger.info(' * Install node.js packages ... ',
  883:                 extra=dict(continued=True))
  884:     packages = [package.strip() for package in
  885:                 open(args.requirements).readlines()]
  886:     activate_path = join(env_dir, 'bin', 'activate')
  887:     real_npm_ver = args.npm if args.npm.count(".") == 2 else args.npm + ".0"
  888:     if args.npm == "latest" or real_npm_ver >= "1.0.0":
  889:         cmd = '. ' + _quote(activate_path) + \
  890:               ' && npm install -g %(pack)s'
  891:     else:
  892:         cmd = '. ' + _quote(activate_path) + \
  893:               ' && npm install %(pack)s' + \
  894:               ' && npm activate %(pack)s'
  895: 
  896:     for package in packages:
  897:         if not package:
  898:             continue
  899:         callit(cmd=[
  900:             cmd % {"pack": package}], show_stdout=args.verbose, in_shell=True)
  901: 
  902:     logger.info('done.')
  903: 
  904: 
  905: def install_activate(env_dir, args):
  906:     """
  907:     Install virtual environment activation script
  908:     """
  909:     if is_WIN:
  910:         files = {
  911:             'activate.bat': ACTIVATE_BAT,
  912:             "deactivate.bat": DEACTIVATE_BAT,
  913:             "Activate.ps1": ACTIVATE_PS1
  914:         }
  915:         bin_dir = join(env_dir, 'Scripts')
  916:         shim_node = join(bin_dir, "node.exe")
  917:         shim_nodejs = join(bin_dir, "nodejs.exe")
  918:     else:
  919:         files = {
  920:             'activate': ACTIVATE_SH,
  921:             'activate.fish': ACTIVATE_FISH,
  922:             'shim': SHIM
  923:         }
  924:         bin_dir = join(env_dir, 'bin')
  925:         shim_node = join(bin_dir, "node")
  926:         shim_nodejs = join(bin_dir, "nodejs")
  927:     if is_CYGWIN:
  928:         mkdir(bin_dir)
  929: 
  930:     if args.node == "system":
  931:         files["node"] = SHIM
  932: 
  933:     mod_dir = join('lib', 'node_modules')
  934:     prompt = args.prompt or '(%s)' % os.path.basename(os.path.abspath(env_dir))
  935: 
  936:     if args.node == "system":
  937:         env = os.environ.copy()
  938:         env.update({'PATH': remove_env_bin_from_path(env['PATH'], bin_dir)})
  939:         for candidate in ("nodejs", "node"):
  940:             which_node_output, _ = subprocess.Popen(
  941:                 ["which", candidate],
  942:                 stdout=subprocess.PIPE, env=env).communicate()
  943:             shim_node = clear_output(which_node_output)
  944:             if shim_node:
  945:                 break
  946:         assert shim_node, "Did not find nodejs or node system executable"
  947: 
  948:     for name, content in files.items():
  949:         file_path = join(bin_dir, name)
  950:         content = content.replace('__NODE_VIRTUAL_PROMPT__', prompt)
  951:         content = content.replace('__NODE_VIRTUAL_ENV__',
  952:                                   os.path.abspath(env_dir))
  953:         content = content.replace('__SHIM_NODE__', shim_node)
  954:         content = content.replace('__BIN_NAME__', os.path.basename(bin_dir))
  955:         content = content.replace('__MOD_NAME__', mod_dir)
  956:         if is_CYGWIN:
  957:             _, cyg_bin_dir = callit(
  958:                 ['cygpath', '-w', os.path.abspath(bin_dir)],
  959:                 show_stdout=False, in_shell=False)
  960:             content = content.replace('__NPM_CONFIG_PREFIX__', cyg_bin_dir[0])
  961:         else:
  962:             content = content.replace('__NPM_CONFIG_PREFIX__',
  963:                                       '$NODE_VIRTUAL_ENV')
  964:         # if we call in the same environment:
  965:         #   $ nodeenv -p --prebuilt
  966:         #   $ nodeenv -p --node=system
  967:         # we should get `bin/node` not as binary+string.
  968:         # `bin/activate` should be appended if we're inside
  969:         # existing python's virtual environment
  970:         need_append = False
  971:         if args.python_virtualenv:
  972:             disable_prompt = DISABLE_PROMPT.get(name, '')
  973:             enable_prompt = ENABLE_PROMPT.get(name, '')
  974:             content = disable_prompt + content + enable_prompt
  975:             need_append = bool(disable_prompt)
  976:         writefile(file_path, content, append=need_append)
  977: 
  978:     if not os.path.exists(shim_nodejs):
  979:         if is_WIN:
  980:             try:
  981:                 callit(['mklink', shim_nodejs, 'node.exe'], True, True)
  982:             except OSError:
  983:                 logger.error('Error: Failed to create nodejs.exe link')
  984:         else:
  985:             os.symlink("node", shim_nodejs)
  986: 
  987: 
  988: def set_predeactivate_hook(env_dir):
  989:     if not is_WIN:
  990:         with open(join(env_dir, 'bin', 'predeactivate'), 'a') as hook:
  991:             hook.write(PREDEACTIVATE_SH)
  992: 
  993: 
  994: def create_environment(env_dir, args):
  995:     """
  996:     Creates a new environment in ``env_dir``.
  997:     """
  998:     if os.path.exists(env_dir) and not args.python_virtualenv:
  999:         logger.info(' * Environment already exists: %s', env_dir)
 1000:         if not args.force:
 1001:             sys.exit(2)
 1002:     src_dir = to_utf8(abspath(join(env_dir, 'src')))
 1003:     mkdir(src_dir)
 1004: 
 1005:     if args.node != "system":
 1006:         install_node(env_dir, src_dir, args)
 1007:     else:
 1008:         mkdir(join(env_dir, 'bin'))
 1009:         mkdir(join(env_dir, 'lib'))
 1010:         mkdir(join(env_dir, 'lib', 'node_modules'))
 1011:     # activate script install must be
 1012:     # before npm install, npm use activate
 1013:     # for install
 1014:     install_activate(env_dir, args)
 1015:     if node_version_from_args(args) < (0, 6, 3) or args.with_npm:
 1016:         instfunc = install_npm_win if is_WIN or is_CYGWIN else install_npm
 1017:         instfunc(env_dir, src_dir, args)
 1018:     if args.requirements:
 1019:         install_packages(env_dir, args)
 1020:     if args.python_virtualenv:
 1021:         set_predeactivate_hook(env_dir)
 1022:     # Cleanup
 1023:     if args.clean_src:
 1024:         shutil.rmtree(src_dir)
 1025: 
 1026: 
 1027: def _get_versions_json():
 1028:     response = urlopen('%s/index.json' % src_base_url)
 1029:     return json.loads(response.read().decode('UTF-8'))
 1030: 
 1031: 
 1032: def get_node_versions():
 1033:     return [dct['version'].lstrip('v') for dct in _get_versions_json()][::-1]
 1034: 
 1035: 
 1036: def print_node_versions():
 1037:     """
 1038:     Prints into stdout all available node.js versions
 1039:     """
 1040:     versions = get_node_versions()
 1041:     chunks_of_8 = [
 1042:         versions[pos:pos + 8] for pos in range(0, len(versions), 8)
 1043:     ]
 1044:     for chunk in chunks_of_8:
 1045:         logger.info('\t'.join(chunk))
 1046: 
 1047: 
 1048: def get_last_stable_node_version():
 1049:     """
 1050:     Return last stable node.js version
 1051:     """
 1052:     return _get_versions_json()[0]['version'].lstrip('v')
 1053: 
 1054: 
 1055: def get_last_lts_node_version():
 1056:     """
 1057:     Return the last node.js version marked as LTS
 1058:     """
 1059:     return next((v['version'].lstrip('v')
 1060:                  for v in _get_versions_json() if v['lts']), None)
 1061: 
 1062: 
 1063: def get_env_dir(args):
 1064:     if args.python_virtualenv:
 1065:         if hasattr(sys, 'real_prefix'):
 1066:             res = sys.prefix
 1067:         elif hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix:
 1068:             res = sys.prefix
 1069:         elif 'CONDA_PREFIX' in os.environ:
 1070:             res = sys.prefix
 1071:         else:
 1072:             logger.error('No python virtualenv is available')
 1073:             sys.exit(2)
 1074:     else:
 1075:         res = args.env_dir
 1076:     return to_utf8(res)
 1077: 
 1078: 
 1079: # noinspection PyProtectedMember
 1080: def main():
 1081:     """
 1082:     Entry point
 1083:     """
 1084:     # quick&dirty way to help update the README
 1085:     if "--dump-config-defaults" in sys.argv:
 1086:         Config._dump()
 1087:         return
 1088: 
 1089:     args = parse_args(check=False)
 1090:     # noinspection PyProtectedMember
 1091:     Config._load(args.config_file, args.verbose)
 1092: 
 1093:     args = parse_args()
 1094: 
 1095:     if args.node.lower() == 'system' and is_WIN:
 1096:         logger.error('Installing system node.js on win32 is not supported!')
 1097:         exit(1)
 1098: 
 1099:     global src_base_url
 1100:     global ignore_ssl_certs
 1101: 
 1102:     ignore_ssl_certs = args.ignore_ssl_certs
 1103: 
 1104:     src_domain = None
 1105:     if args.mirror:
 1106:         if '://' in args.mirror:
 1107:             src_base_url = args.mirror
 1108:         else:
 1109:             src_domain = args.mirror
 1110:     # use unofficial builds only if musl and no explicitly chosen mirror
 1111:     elif is_x86_64_musl() or is_riscv64():
 1112:         src_domain = 'unofficial-builds.nodejs.org'
 1113:     else:
 1114:         src_domain = 'nodejs.org'
 1115:     if src_base_url is None:
 1116:         src_base_url = 'https://%s/download/release' % src_domain
 1117: 
 1118:     if not args.node or args.node.lower() == 'latest':
 1119:         args.node = get_last_stable_node_version()
 1120:     elif args.node.lower() == 'lts':
 1121:         args.node = get_last_lts_node_version()
 1122: 
 1123:     if args.list:
 1124:         print_node_versions()
 1125:     elif args.update:
 1126:         env_dir = get_env_dir(args)
 1127:         install_packages(env_dir, args)
 1128:     else:
 1129:         env_dir = get_env_dir(args)
 1130:         create_environment(env_dir, args)
 1131: 
 1132: 
 1133: # ---------------------------------------------------------
 1134: # Shell scripts content
 1135: 
 1136: DISABLE_PROMPT = {
 1137:     'activate': """
 1138: # disable nodeenv's prompt
 1139: # (prompt already changed by original virtualenv's script)
 1140: # https://github.com/ekalinin/nodeenv/issues/26
 1141: NODE_VIRTUAL_ENV_DISABLE_PROMPT=1
 1142: """,
 1143:     'activate.fish': """
 1144: # disable nodeenv's prompt
 1145: # (prompt already changed by original virtualenv's script)
 1146: # https://github.com/ekalinin/nodeenv/issues/26
 1147: set NODE_VIRTUAL_ENV_DISABLE_PROMPT 1
 1148: """,
 1149: }
 1150: 
 1151: ENABLE_PROMPT = {
 1152:     'activate': """
 1153: unset NODE_VIRTUAL_ENV_DISABLE_PROMPT
 1154: """,
 1155:     'activate.fish': """
 1156: set -e NODE_VIRTUAL_ENV_DISABLE_PROMPT
 1157: """,
 1158: }
 1159: 
 1160: SHIM = """#!/usr/bin/env bash
 1161: export NODE_PATH='__NODE_VIRTUAL_ENV__/lib/node_modules'
 1162: export NPM_CONFIG_PREFIX='__NODE_VIRTUAL_ENV__'
 1163: export npm_config_prefix='__NODE_VIRTUAL_ENV__'
 1164: exec '__SHIM_NODE__' "$@"
 1165: """
 1166: 
 1167: ACTIVATE_BAT = r"""
 1168: @echo off
 1169: set "NODE_VIRTUAL_ENV=__NODE_VIRTUAL_ENV__"
 1170: if not defined PROMPT (
 1171:     set "PROMPT=$P$G"
 1172: )
 1173: if defined _OLD_VIRTUAL_PROMPT (
 1174:     set "PROMPT=%_OLD_VIRTUAL_PROMPT%"
 1175: )
 1176: if defined _OLD_VIRTUAL_NODE_PATH (
 1177:     set "NODE_PATH=%_OLD_VIRTUAL_NODE_PATH%"
 1178: )
 1179: set "_OLD_VIRTUAL_PROMPT=%PROMPT%"
 1180: set "PROMPT=__NODE_VIRTUAL_PROMPT__ %PROMPT%"
 1181: if defined NODE_PATH (
 1182:     set "_OLD_VIRTUAL_NODE_PATH=%NODE_PATH%"
 1183:     set NODE_PATH=
 1184: )
 1185: if defined _OLD_VIRTUAL_PATH (
 1186:     set "PATH=%_OLD_VIRTUAL_PATH%"
 1187: ) else (
 1188:     set "_OLD_VIRTUAL_PATH=%PATH%"
 1189: )
 1190: set "PATH=%NODE_VIRTUAL_ENV%\Scripts;%PATH%"
 1191: :END
 1192: 
 1193: """
 1194: 
 1195: DEACTIVATE_BAT = """\
 1196: @echo off
 1197: if defined _OLD_VIRTUAL_PROMPT (
 1198:     set "PROMPT=%_OLD_VIRTUAL_PROMPT%"
 1199: )
 1200: set _OLD_VIRTUAL_PROMPT=
 1201: if defined _OLD_VIRTUAL_NODE_PATH (
 1202:     set "NODE_PATH=%_OLD_VIRTUAL_NODE_PATH%"
 1203:     set _OLD_VIRTUAL_NODE_PATH=
 1204: )
 1205: if defined _OLD_VIRTUAL_PATH (
 1206:     set "PATH=%_OLD_VIRTUAL_PATH%"
 1207: )
 1208: set _OLD_VIRTUAL_PATH=
 1209: set NODE_VIRTUAL_ENV=
 1210: :END
 1211: """
 1212: 
 1213: ACTIVATE_PS1 = r"""
 1214: function global:deactivate ([switch]$NonDestructive) {
 1215:     # Revert to original values
 1216:     if (Test-Path function:_OLD_VIRTUAL_PROMPT) {
 1217:         copy-item function:_OLD_VIRTUAL_PROMPT function:prompt
 1218:         remove-item function:_OLD_VIRTUAL_PROMPT
 1219:     }
 1220:     if (Test-Path env:_OLD_VIRTUAL_NODE_PATH) {
 1221:         copy-item env:_OLD_VIRTUAL_NODE_PATH env:NODE_PATH
 1222:         remove-item env:_OLD_VIRTUAL_NODE_PATH
 1223:     }
 1224:     if (Test-Path env:_OLD_VIRTUAL_PATH) {
 1225:         copy-item env:_OLD_VIRTUAL_PATH env:PATH
 1226:         remove-item env:_OLD_VIRTUAL_PATH
 1227:     }
 1228:     if (Test-Path env:NODE_VIRTUAL_ENV) {
 1229:         remove-item env:NODE_VIRTUAL_ENV
 1230:     }
 1231:     if (!$NonDestructive) {
 1232:         # Self destruct!
 1233:         remove-item function:deactivate
 1234:     }
 1235: }
 1236: 
 1237: deactivate -nondestructive
 1238: $env:NODE_VIRTUAL_ENV="__NODE_VIRTUAL_ENV__"
 1239: 
 1240: # Set the prompt to include the env name
 1241: # Make sure _OLD_VIRTUAL_PROMPT is global
 1242: function global:_OLD_VIRTUAL_PROMPT {""}
 1243: copy-item function:prompt function:_OLD_VIRTUAL_PROMPT
 1244: function global:prompt {
 1245:     Write-Host -NoNewline -ForegroundColor Green '__NODE_VIRTUAL_PROMPT__ '
 1246:     _OLD_VIRTUAL_PROMPT
 1247: }
 1248: 
 1249: # Clear NODE_PATH
 1250: if (Test-Path env:NODE_PATH) {
 1251:     copy-item env:NODE_PATH env:_OLD_VIRTUAL_NODE_PATH
 1252:     remove-item env:NODE_PATH
 1253: }
 1254: 
 1255: # Add the venv to the PATH
 1256: copy-item env:PATH env:_OLD_VIRTUAL_PATH
 1257: $env:PATH = "$env:NODE_VIRTUAL_ENV\Scripts;$env:PATH"
 1258: """
 1259: 
 1260: ACTIVATE_SH = r"""
 1261: 
 1262: # This file must be used with "source bin/activate" *from bash*
 1263: # you cannot run it directly
 1264: 
 1265: deactivate_node () {
 1266:     # reset old environment variables
 1267:     if [ -n "${_OLD_NODE_VIRTUAL_PATH:-}" ] ; then
 1268:         PATH="${_OLD_NODE_VIRTUAL_PATH:-}"
 1269:         export PATH
 1270:         unset _OLD_NODE_VIRTUAL_PATH
 1271: 
 1272:         NODE_PATH="${_OLD_NODE_PATH:-}"
 1273:         export NODE_PATH
 1274:         unset _OLD_NODE_PATH
 1275: 
 1276:         NPM_CONFIG_PREFIX="${_OLD_NPM_CONFIG_PREFIX:-}"
 1277:         npm_config_prefix="${_OLD_npm_config_prefix:-}"
 1278:         export NPM_CONFIG_PREFIX
 1279:         export npm_config_prefix
 1280:         unset _OLD_NPM_CONFIG_PREFIX
 1281:         unset _OLD_npm_config_prefix
 1282:     fi
 1283: 
 1284:     # This should detect bash and zsh, which have a hash command that must
 1285:     # be called to get it to forget past commands.  Without forgetting
 1286:     # past commands the $PATH changes we made may not be respected
 1287:     if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
 1288:         hash -r
 1289:     fi
 1290: 
 1291:     if [ -n "${_OLD_NODE_VIRTUAL_PS1:-}" ] ; then
 1292:         PS1="${_OLD_NODE_VIRTUAL_PS1:-}"
 1293:         export PS1
 1294:         unset _OLD_NODE_VIRTUAL_PS1
 1295:     fi
 1296: 
 1297:     unset NODE_VIRTUAL_ENV
 1298:     if [ ! "${1:-}" = "nondestructive" ] ; then
 1299:     # Self destruct!
 1300:         unset -f deactivate_node
 1301:     fi
 1302: }
 1303: 
 1304: freeze () {
 1305:     local NPM_VER=`npm -v | cut -d '.' -f 1`
 1306:     local re="[a-zA-Z0-9\.\-]+@[0-9]+\.[0-9]+\.[0-9]+([\+\-][a-zA-Z0-9\.\-]+)*"
 1307:     if [ "$NPM_VER" = '0' ]; then
 1308:         NPM_LIST=`npm list installed active 2>/dev/null | \
 1309:                   cut -d ' ' -f 1 | grep -v npm`
 1310:     else
 1311:         local npmls="npm ls -g"
 1312:         if [ "${1:-}" = "-l" ]; then
 1313:             npmls="npm ls"
 1314:             shift
 1315:         fi
 1316:         NPM_LIST=$(eval ${npmls} | grep -E '^.{4}\w{1}'| \
 1317:                                    grep -o -E "$re"| grep -v npm)
 1318:     fi
 1319: 
 1320:     if [ -z "$@" ]; then
 1321:         echo "$NPM_LIST"
 1322:     else
 1323:         echo "$NPM_LIST" > $@
 1324:     fi
 1325: }
 1326: 
 1327: # unset irrelevant variables
 1328: deactivate_node nondestructive
 1329: 
 1330: # find the directory of this script
 1331: # http://stackoverflow.com/a/246128
 1332: if [ "${BASH_SOURCE:-}" ] ; then
 1333:     SOURCE="${BASH_SOURCE[0]}"
 1334: 
 1335:     while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done
 1336:     DIR="$( command cd -P "$( dirname "$SOURCE" )" > /dev/null && pwd )"
 1337: 
 1338:     NODE_VIRTUAL_ENV="$(dirname "$DIR")"
 1339: else
 1340:     # dash not movable. fix use case:
 1341:     #   dash -c " . node-env/bin/activate && node -v"
 1342:     NODE_VIRTUAL_ENV="__NODE_VIRTUAL_ENV__"
 1343: fi
 1344: 
 1345: # NODE_VIRTUAL_ENV is the parent of the directory where this script is
 1346: export NODE_VIRTUAL_ENV
 1347: 
 1348: _OLD_NODE_VIRTUAL_PATH="$PATH"
 1349: PATH="$NODE_VIRTUAL_ENV/lib/node_modules/.bin:$NODE_VIRTUAL_ENV/__BIN_NAME__:$PATH"
 1350: export PATH
 1351: 
 1352: _OLD_NODE_PATH="${NODE_PATH:-}"
 1353: NODE_PATH="$NODE_VIRTUAL_ENV/__MOD_NAME__"
 1354: export NODE_PATH
 1355: 
 1356: _OLD_NPM_CONFIG_PREFIX="${NPM_CONFIG_PREFIX:-}"
 1357: _OLD_npm_config_prefix="${npm_config_prefix:-}"
 1358: NPM_CONFIG_PREFIX="__NPM_CONFIG_PREFIX__"
 1359: npm_config_prefix="__NPM_CONFIG_PREFIX__"
 1360: export NPM_CONFIG_PREFIX
 1361: export npm_config_prefix
 1362: 
 1363: if [ -z "${NODE_VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
 1364:     _OLD_NODE_VIRTUAL_PS1="${PS1:-}"
 1365:     if [ "x__NODE_VIRTUAL_PROMPT__" != x ] ; then
 1366:         PS1="__NODE_VIRTUAL_PROMPT__ ${PS1:-}"
 1367:     else
 1368:     if [ "`basename \"$NODE_VIRTUAL_ENV\"`" = "__" ] ; then
 1369:         # special case for Aspen magic directories
 1370:         # see http://www.zetadev.com/software/aspen/
 1371:         PS1="[`basename \`dirname \"$NODE_VIRTUAL_ENV\"\``] ${PS1:-}"
 1372:     else
 1373:         PS1="(`basename \"$NODE_VIRTUAL_ENV\"`) ${PS1:-}"
 1374:     fi
 1375:     fi
 1376:     export PS1
 1377: fi
 1378: 
 1379: # This should detect bash and zsh, which have a hash command that must
 1380: # be called to get it to forget past commands.  Without forgetting
 1381: # past commands the $PATH changes we made may not be respected
 1382: if [ -n "${BASH:-}" -o -n "${ZSH_VERSION:-}" ] ; then
 1383:     hash -r
 1384: fi
 1385: """
 1386: 
 1387: 
 1388: ACTIVATE_FISH = """
 1389: 
 1390: # This file must be used with "source bin/activate.fish" *from fish*
 1391: # you cannot run it directly
 1392: 
 1393: function deactivate_node -d 'Exit nodeenv and return to normal environment.'
 1394:     # reset old environment variables
 1395:     if test -n "$_OLD_NODE_VIRTUAL_PATH"
 1396:         set -gx PATH $_OLD_NODE_VIRTUAL_PATH
 1397:         set -e _OLD_NODE_VIRTUAL_PATH
 1398:     end
 1399: 
 1400:     if test -n "$_OLD_NODE_PATH"
 1401:         set -gx NODE_PATH $_OLD_NODE_PATH
 1402:         set -e _OLD_NODE_PATH
 1403:     else
 1404:         set -e NODE_PATH
 1405:     end
 1406: 
 1407:     if test -n "$_OLD_NPM_CONFIG_PREFIX"
 1408:         set -gx NPM_CONFIG_PREFIX $_OLD_NPM_CONFIG_PREFIX
 1409:         set -e _OLD_NPM_CONFIG_PREFIX
 1410:     else
 1411:         set -e NPM_CONFIG_PREFIX
 1412:     end
 1413: 
 1414:     if test -n "$_OLD_npm_config_prefix"
 1415:         set -gx npm_config_prefix $_OLD_npm_config_prefix
 1416:         set -e _OLD_npm_config_prefix
 1417:     else
 1418:         set -e npm_config_prefix
 1419:     end
 1420: 
 1421:     if test -n "$_OLD_NODE_FISH_PROMPT_OVERRIDE"
 1422:         # Set an empty local `$fish_function_path` to allow the removal of
 1423:         # `fish_prompt` using `functions -e`.
 1424:         set -l fish_function_path
 1425: 
 1426:         # Prevents error when using nested fish instances
 1427:         if functions -q _node_old_fish_prompt
 1428:             # Erase virtualenv's `fish_prompt` and restore the original.
 1429:             functions -e fish_prompt
 1430:             functions -c _node_old_fish_prompt fish_prompt
 1431:             functions -e _node_old_fish_prompt
 1432:         end
 1433:         set -e _OLD_NODE_FISH_PROMPT_OVERRIDE
 1434:     end
 1435: 
 1436:     set -e NODE_VIRTUAL_ENV
 1437: 
 1438:     if test (count $argv) = 0 -o "$argv[1]" != "nondestructive"
 1439:         # Self destruct!
 1440:         functions -e deactivate_node
 1441:     end
 1442: end
 1443: 
 1444: function freeze -d 'Show a list of installed packages - like `pip freeze`'
 1445:     set -l NPM_VER (npm -v | cut -d '.' -f 1)
 1446:     set -l RE "[a-zA-Z0-9\\.\\-]+@[0-9]+\\.[0-9]+\\.[0-9]+([\\+\\-][a-zA-Z0-9\\.\\-]+)*"
 1447: 
 1448:     if test "$NPM_VER" = "0"
 1449:         set -g NPM_LIST (npm list installed active >/dev/null ^/dev/null | \
 1450:                          cut -d ' ' -f 1 | grep -v npm)
 1451:     else
 1452:         set -l NPM_LS "npm ls -g"
 1453:         if test (count $argv) -gt 0 -a "$argv[1]" = "-l"
 1454:             set NPM_LS "npm ls"
 1455:             set -e argv[1]
 1456:         end
 1457:         set -l NPM_LIST (eval $NPM_LS | grep -E '^.{4}\\w{1}' | \
 1458:                                         grep -o -E "$re" | \
 1459:                                         grep -v npm)
 1460:     end
 1461: 
 1462:     if test (count $argv) = 0
 1463:         echo $NPM_LIST
 1464:     else
 1465:         echo $NPM_LIST > $argv[1]
 1466:     end
 1467: end
 1468: 
 1469: # unset irrelevant variables
 1470: deactivate_node nondestructive
 1471: 
 1472: # find the directory of this script
 1473: begin
 1474:     set -l SOURCE (status filename)
 1475:     while test -L "$SOURCE"
 1476:         set SOURCE (readlink "$SOURCE")
 1477:     end
 1478:     set -l DIR (dirname (realpath "$SOURCE"))
 1479: 
 1480:     # NODE_VIRTUAL_ENV is the parent of the directory where this script is
 1481:     set -gx NODE_VIRTUAL_ENV (dirname "$DIR")
 1482: end
 1483: 
 1484: set -gx _OLD_NODE_VIRTUAL_PATH $PATH
 1485: # The node_modules/.bin path doesn't exists and it will print a warning, and
 1486: # that's why we redirect stderr to /dev/null :)
 1487: set -gx PATH "$NODE_VIRTUAL_ENV/lib/node_modules/.bin" "$NODE_VIRTUAL_ENV/__BIN_NAME__" $PATH ^/dev/null
 1488: 
 1489: if set -q NODE_PATH
 1490:     set -gx _OLD_NODE_PATH $NODE_PATH
 1491:     set -gx NODE_PATH "$NODE_VIRTUAL_ENV/__MOD_NAME__" $NODE_PATH
 1492: else
 1493:     set -gx NODE_PATH "$NODE_VIRTUAL_ENV/__MOD_NAME__"
 1494: end
 1495: 
 1496: if set -q NPM_CONFIG_PREFIX
 1497:     set -gx _OLD_NPM_CONFIG_PREFIX $NPM_CONFIG_PREFIX
 1498: end
 1499: set -gx NPM_CONFIG_PREFIX "__NPM_CONFIG_PREFIX__"
 1500: 
 1501: if set -q npm_config_prefix
 1502:     set -gx _OLD_npm_config_prefix $npm_config_prefix
 1503: end
 1504: set -gx npm_config_prefix "__NPM_CONFIG_PREFIX__"
 1505: 
 1506: if test -z "$NODE_VIRTUAL_ENV_DISABLE_PROMPT"
 1507:     # Copy the current `fish_prompt` function as `_node_old_fish_prompt`.
 1508:     functions -c fish_prompt _node_old_fish_prompt
 1509: 
 1510:     function fish_prompt
 1511:         # Save the current $status, for fish_prompts that display it.
 1512:         set -l old_status $status
 1513: 
 1514:         # Prompt override provided?
 1515:         # If not, just prepend the environment name.
 1516:         if test -n "__NODE_VIRTUAL_PROMPT__"
 1517:             printf '%s%s ' "__NODE_VIRTUAL_PROMPT__" (set_color normal)
 1518:         else
 1519:             printf '%s(%s) ' (set_color normal) (basename "$NODE_VIRTUAL_ENV")
 1520:         end
 1521: 
 1522:         # Restore the original $status
 1523:         echo "exit $old_status" | source
 1524:         _node_old_fish_prompt
 1525:     end
 1526: 
 1527:     set -gx _OLD_NODE_FISH_PROMPT_OVERRIDE "$NODE_VIRTUAL_ENV"
 1528: end
 1529: """  # noqa: E501
 1530: 
 1531: PREDEACTIVATE_SH = """
 1532: if type -p deactivate_node > /dev/null; then deactivate_node;fi
 1533: """
 1534: 
 1535: CYGWIN_NODE = """#!/bin/sh
 1536: 
 1537: if [ -r "$1" ]; then
 1538:     SCRIPT_PATH=$(cygpath -w "$1")
 1539:     shift
 1540:     set - $SCRIPT_PATH $@
 1541:     unset SCRIPT_PATH
 1542: fi
 1543: 
 1544: exec $(dirname "$0")/node.exe "$@"
 1545: """
 1546: 
 1547: if __name__ == '__main__':
 1548:     main()
