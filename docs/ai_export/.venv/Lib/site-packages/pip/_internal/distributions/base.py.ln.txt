    1: from __future__ import annotations
    2: 
    3: import abc
    4: from typing import TYPE_CHECKING
    5: 
    6: from pip._internal.metadata.base import BaseDistribution
    7: from pip._internal.req import InstallRequirement
    8: 
    9: if TYPE_CHECKING:
   10:     from pip._internal.build_env import BuildEnvironmentInstaller
   11: 
   12: 
   13: class AbstractDistribution(metaclass=abc.ABCMeta):
   14:     """A base class for handling installable artifacts.
   15: 
   16:     The requirements for anything installable are as follows:
   17: 
   18:      - we must be able to determine the requirement name
   19:        (or we can't correctly handle the non-upgrade case).
   20: 
   21:      - for packages with setup requirements, we must also be able
   22:        to determine their requirements without installing additional
   23:        packages (for the same reason as run-time dependencies)
   24: 
   25:      - we must be able to create a Distribution object exposing the
   26:        above metadata.
   27: 
   28:      - if we need to do work in the build tracker, we must be able to generate a unique
   29:        string to identify the requirement in the build tracker.
   30:     """
   31: 
   32:     def __init__(self, req: InstallRequirement) -> None:
   33:         super().__init__()
   34:         self.req = req
   35: 
   36:     @abc.abstractproperty
   37:     def build_tracker_id(self) -> str | None:
   38:         """A string that uniquely identifies this requirement to the build tracker.
   39: 
   40:         If None, then this dist has no work to do in the build tracker, and
   41:         ``.prepare_distribution_metadata()`` will not be called."""
   42:         raise NotImplementedError()
   43: 
   44:     @abc.abstractmethod
   45:     def get_metadata_distribution(self) -> BaseDistribution:
   46:         raise NotImplementedError()
   47: 
   48:     @abc.abstractmethod
   49:     def prepare_distribution_metadata(
   50:         self,
   51:         build_env_installer: BuildEnvironmentInstaller,
   52:         build_isolation: bool,
   53:         check_build_deps: bool,
   54:     ) -> None:
   55:         raise NotImplementedError()
