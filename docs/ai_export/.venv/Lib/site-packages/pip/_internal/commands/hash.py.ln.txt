    1: import hashlib
    2: import logging
    3: import sys
    4: from optparse import Values
    5: 
    6: from pip._internal.cli.base_command import Command
    7: from pip._internal.cli.status_codes import ERROR, SUCCESS
    8: from pip._internal.utils.hashes import FAVORITE_HASH, STRONG_HASHES
    9: from pip._internal.utils.misc import read_chunks, write_output
   10: 
   11: logger = logging.getLogger(__name__)
   12: 
   13: 
   14: class HashCommand(Command):
   15:     """
   16:     Compute a hash of a local package archive.
   17: 
   18:     These can be used with --hash in a requirements file to do repeatable
   19:     installs.
   20:     """
   21: 
   22:     usage = "%prog [options] <file> ..."
   23:     ignore_require_venv = True
   24: 
   25:     def add_options(self) -> None:
   26:         self.cmd_opts.add_option(
   27:             "-a",
   28:             "--algorithm",
   29:             dest="algorithm",
   30:             choices=STRONG_HASHES,
   31:             action="store",
   32:             default=FAVORITE_HASH,
   33:             help="The hash algorithm to use: one of {}".format(
   34:                 ", ".join(STRONG_HASHES)
   35:             ),
   36:         )
   37:         self.parser.insert_option_group(0, self.cmd_opts)
   38: 
   39:     def run(self, options: Values, args: list[str]) -> int:
   40:         if not args:
   41:             self.parser.print_usage(sys.stderr)
   42:             return ERROR
   43: 
   44:         algorithm = options.algorithm
   45:         for path in args:
   46:             write_output(
   47:                 "%s:\n--hash=%s:%s", path, algorithm, _hash_of_file(path, algorithm)
   48:             )
   49:         return SUCCESS
   50: 
   51: 
   52: def _hash_of_file(path: str, algorithm: str) -> str:
   53:     """Return the hash digest of a file."""
   54:     with open(path, "rb") as archive:
   55:         hash = hashlib.new(algorithm)
   56:         for chunk in read_chunks(archive):
   57:             hash.update(chunk)
   58:     return hash.hexdigest()
