    1: import sys
    2: from optparse import Values
    3: 
    4: from pip._internal.cli import cmdoptions
    5: from pip._internal.cli.base_command import Command
    6: from pip._internal.cli.status_codes import SUCCESS
    7: from pip._internal.operations.freeze import freeze
    8: from pip._internal.utils.compat import stdlib_pkgs
    9: 
   10: 
   11: def _should_suppress_build_backends() -> bool:
   12:     return sys.version_info < (3, 12)
   13: 
   14: 
   15: def _dev_pkgs() -> set[str]:
   16:     pkgs = {"pip"}
   17: 
   18:     if _should_suppress_build_backends():
   19:         pkgs |= {"setuptools", "distribute", "wheel"}
   20: 
   21:     return pkgs
   22: 
   23: 
   24: class FreezeCommand(Command):
   25:     """
   26:     Output installed packages in requirements format.
   27: 
   28:     packages are listed in a case-insensitive sorted order.
   29:     """
   30: 
   31:     ignore_require_venv = True
   32:     usage = """
   33:       %prog [options]"""
   34: 
   35:     def add_options(self) -> None:
   36:         self.cmd_opts.add_option(
   37:             "-r",
   38:             "--requirement",
   39:             dest="requirements",
   40:             action="append",
   41:             default=[],
   42:             metavar="file",
   43:             help=(
   44:                 "Use the order in the given requirements file and its "
   45:                 "comments when generating output. This option can be "
   46:                 "used multiple times."
   47:             ),
   48:         )
   49:         self.cmd_opts.add_option(
   50:             "-l",
   51:             "--local",
   52:             dest="local",
   53:             action="store_true",
   54:             default=False,
   55:             help=(
   56:                 "If in a virtualenv that has global access, do not output "
   57:                 "globally-installed packages."
   58:             ),
   59:         )
   60:         self.cmd_opts.add_option(
   61:             "--user",
   62:             dest="user",
   63:             action="store_true",
   64:             default=False,
   65:             help="Only output packages installed in user-site.",
   66:         )
   67:         self.cmd_opts.add_option(cmdoptions.list_path())
   68:         self.cmd_opts.add_option(
   69:             "--all",
   70:             dest="freeze_all",
   71:             action="store_true",
   72:             help=(
   73:                 "Do not skip these packages in the output:"
   74:                 " {}".format(", ".join(_dev_pkgs()))
   75:             ),
   76:         )
   77:         self.cmd_opts.add_option(
   78:             "--exclude-editable",
   79:             dest="exclude_editable",
   80:             action="store_true",
   81:             help="Exclude editable package from output.",
   82:         )
   83:         self.cmd_opts.add_option(cmdoptions.list_exclude())
   84: 
   85:         self.parser.insert_option_group(0, self.cmd_opts)
   86: 
   87:     def run(self, options: Values, args: list[str]) -> int:
   88:         skip = set(stdlib_pkgs)
   89:         if not options.freeze_all:
   90:             skip.update(_dev_pkgs())
   91: 
   92:         if options.excludes:
   93:             skip.update(options.excludes)
   94: 
   95:         cmdoptions.check_list_path_option(options)
   96: 
   97:         for line in freeze(
   98:             requirement=options.requirements,
   99:             local_only=options.local,
  100:             user_only=options.user,
  101:             paths=options.path,
  102:             isolated=options.isolated_mode,
  103:             skip=skip,
  104:             exclude_editable=options.exclude_editable,
  105:         ):
  106:             sys.stdout.write(line + "\n")
  107:         return SUCCESS
