    1: import logging
    2: from optparse import Values
    3: 
    4: from pip._internal.cli.base_command import Command
    5: from pip._internal.cli.status_codes import ERROR, SUCCESS
    6: from pip._internal.metadata import get_default_environment
    7: from pip._internal.operations.check import (
    8:     check_package_set,
    9:     check_unsupported,
   10:     create_package_set_from_installed,
   11: )
   12: from pip._internal.utils.compatibility_tags import get_supported
   13: from pip._internal.utils.misc import write_output
   14: 
   15: logger = logging.getLogger(__name__)
   16: 
   17: 
   18: class CheckCommand(Command):
   19:     """Verify installed packages have compatible dependencies."""
   20: 
   21:     ignore_require_venv = True
   22:     usage = """
   23:       %prog [options]"""
   24: 
   25:     def run(self, options: Values, args: list[str]) -> int:
   26:         package_set, parsing_probs = create_package_set_from_installed()
   27:         missing, conflicting = check_package_set(package_set)
   28:         unsupported = list(
   29:             check_unsupported(
   30:                 get_default_environment().iter_installed_distributions(),
   31:                 get_supported(),
   32:             )
   33:         )
   34: 
   35:         for project_name in missing:
   36:             version = package_set[project_name].version
   37:             for dependency in missing[project_name]:
   38:                 write_output(
   39:                     "%s %s requires %s, which is not installed.",
   40:                     project_name,
   41:                     version,
   42:                     dependency[0],
   43:                 )
   44: 
   45:         for project_name in conflicting:
   46:             version = package_set[project_name].version
   47:             for dep_name, dep_version, req in conflicting[project_name]:
   48:                 write_output(
   49:                     "%s %s has requirement %s, but you have %s %s.",
   50:                     project_name,
   51:                     version,
   52:                     req,
   53:                     dep_name,
   54:                     dep_version,
   55:                 )
   56:         for package in unsupported:
   57:             write_output(
   58:                 "%s %s is not supported on this platform",
   59:                 package.raw_name,
   60:                 package.version,
   61:             )
   62:         if missing or conflicting or parsing_probs or unsupported:
   63:             return ERROR
   64:         else:
   65:             write_output("No broken requirements found.")
   66:             return SUCCESS
