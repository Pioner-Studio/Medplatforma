    1: """
    2: Package containing all pip commands
    3: """
    4: 
    5: from __future__ import annotations
    6: 
    7: import importlib
    8: from collections import namedtuple
    9: from typing import Any
   10: 
   11: from pip._internal.cli.base_command import Command
   12: 
   13: CommandInfo = namedtuple("CommandInfo", "module_path, class_name, summary")
   14: 
   15: # This dictionary does a bunch of heavy lifting for help output:
   16: # - Enables avoiding additional (costly) imports for presenting `--help`.
   17: # - The ordering matters for help display.
   18: #
   19: # Even though the module path starts with the same "pip._internal.commands"
   20: # prefix, the full path makes testing easier (specifically when modifying
   21: # `commands_dict` in test setup / teardown).
   22: commands_dict: dict[str, CommandInfo] = {
   23:     "install": CommandInfo(
   24:         "pip._internal.commands.install",
   25:         "InstallCommand",
   26:         "Install packages.",
   27:     ),
   28:     "lock": CommandInfo(
   29:         "pip._internal.commands.lock",
   30:         "LockCommand",
   31:         "Generate a lock file.",
   32:     ),
   33:     "download": CommandInfo(
   34:         "pip._internal.commands.download",
   35:         "DownloadCommand",
   36:         "Download packages.",
   37:     ),
   38:     "uninstall": CommandInfo(
   39:         "pip._internal.commands.uninstall",
   40:         "UninstallCommand",
   41:         "Uninstall packages.",
   42:     ),
   43:     "freeze": CommandInfo(
   44:         "pip._internal.commands.freeze",
   45:         "FreezeCommand",
   46:         "Output installed packages in requirements format.",
   47:     ),
   48:     "inspect": CommandInfo(
   49:         "pip._internal.commands.inspect",
   50:         "InspectCommand",
   51:         "Inspect the python environment.",
   52:     ),
   53:     "list": CommandInfo(
   54:         "pip._internal.commands.list",
   55:         "ListCommand",
   56:         "List installed packages.",
   57:     ),
   58:     "show": CommandInfo(
   59:         "pip._internal.commands.show",
   60:         "ShowCommand",
   61:         "Show information about installed packages.",
   62:     ),
   63:     "check": CommandInfo(
   64:         "pip._internal.commands.check",
   65:         "CheckCommand",
   66:         "Verify installed packages have compatible dependencies.",
   67:     ),
   68:     "config": CommandInfo(
   69:         "pip._internal.commands.configuration",
   70:         "ConfigurationCommand",
   71:         "Manage local and global configuration.",
   72:     ),
   73:     "search": CommandInfo(
   74:         "pip._internal.commands.search",
   75:         "SearchCommand",
   76:         "Search PyPI for packages.",
   77:     ),
   78:     "cache": CommandInfo(
   79:         "pip._internal.commands.cache",
   80:         "CacheCommand",
   81:         "Inspect and manage pip's wheel cache.",
   82:     ),
   83:     "index": CommandInfo(
   84:         "pip._internal.commands.index",
   85:         "IndexCommand",
   86:         "Inspect information available from package indexes.",
   87:     ),
   88:     "wheel": CommandInfo(
   89:         "pip._internal.commands.wheel",
   90:         "WheelCommand",
   91:         "Build wheels from your requirements.",
   92:     ),
   93:     "hash": CommandInfo(
   94:         "pip._internal.commands.hash",
   95:         "HashCommand",
   96:         "Compute hashes of package archives.",
   97:     ),
   98:     "completion": CommandInfo(
   99:         "pip._internal.commands.completion",
  100:         "CompletionCommand",
  101:         "A helper command used for command completion.",
  102:     ),
  103:     "debug": CommandInfo(
  104:         "pip._internal.commands.debug",
  105:         "DebugCommand",
  106:         "Show information useful for debugging.",
  107:     ),
  108:     "help": CommandInfo(
  109:         "pip._internal.commands.help",
  110:         "HelpCommand",
  111:         "Show help for commands.",
  112:     ),
  113: }
  114: 
  115: 
  116: def create_command(name: str, **kwargs: Any) -> Command:
  117:     """
  118:     Create an instance of the Command class with the given name.
  119:     """
  120:     module_path, class_name, summary = commands_dict[name]
  121:     module = importlib.import_module(module_path)
  122:     command_class = getattr(module, class_name)
  123:     command = command_class(name=name, summary=summary, **kwargs)
  124: 
  125:     return command
  126: 
  127: 
  128: def get_similar_commands(name: str) -> str | None:
  129:     """Command name auto-correct."""
  130:     from difflib import get_close_matches
  131: 
  132:     name = name.lower()
  133: 
  134:     close_commands = get_close_matches(name, commands_dict.keys())
  135: 
  136:     if close_commands:
  137:         return close_commands[0]
  138:     else:
  139:         return None
