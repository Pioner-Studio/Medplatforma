    1: import logging
    2: import os
    3: import shutil
    4: from optparse import Values
    5: 
    6: from pip._internal.cache import WheelCache
    7: from pip._internal.cli import cmdoptions
    8: from pip._internal.cli.req_command import RequirementCommand, with_cleanup
    9: from pip._internal.cli.status_codes import SUCCESS
   10: from pip._internal.exceptions import CommandError
   11: from pip._internal.operations.build.build_tracker import get_build_tracker
   12: from pip._internal.req.req_install import (
   13:     InstallRequirement,
   14:     check_legacy_setup_py_options,
   15: )
   16: from pip._internal.utils.misc import ensure_dir, normalize_path
   17: from pip._internal.utils.temp_dir import TempDirectory
   18: from pip._internal.wheel_builder import build
   19: 
   20: logger = logging.getLogger(__name__)
   21: 
   22: 
   23: class WheelCommand(RequirementCommand):
   24:     """
   25:     Build Wheel archives for your requirements and dependencies.
   26: 
   27:     Wheel is a built-package format, and offers the advantage of not
   28:     recompiling your software during every install. For more details, see the
   29:     wheel docs: https://wheel.readthedocs.io/en/latest/
   30: 
   31:     'pip wheel' uses the build system interface as described here:
   32:     https://pip.pypa.io/en/stable/reference/build-system/
   33: 
   34:     """
   35: 
   36:     usage = """
   37:       %prog [options] <requirement specifier> ...
   38:       %prog [options] -r <requirements file> ...
   39:       %prog [options] [-e] <vcs project url> ...
   40:       %prog [options] [-e] <local project path> ...
   41:       %prog [options] <archive url/path> ..."""
   42: 
   43:     def add_options(self) -> None:
   44:         self.cmd_opts.add_option(
   45:             "-w",
   46:             "--wheel-dir",
   47:             dest="wheel_dir",
   48:             metavar="dir",
   49:             default=os.curdir,
   50:             help=(
   51:                 "Build wheels into <dir>, where the default is the "
   52:                 "current working directory."
   53:             ),
   54:         )
   55:         self.cmd_opts.add_option(cmdoptions.no_binary())
   56:         self.cmd_opts.add_option(cmdoptions.only_binary())
   57:         self.cmd_opts.add_option(cmdoptions.prefer_binary())
   58:         self.cmd_opts.add_option(cmdoptions.no_build_isolation())
   59:         self.cmd_opts.add_option(cmdoptions.use_pep517())
   60:         self.cmd_opts.add_option(cmdoptions.no_use_pep517())
   61:         self.cmd_opts.add_option(cmdoptions.check_build_deps())
   62:         self.cmd_opts.add_option(cmdoptions.constraints())
   63:         self.cmd_opts.add_option(cmdoptions.editable())
   64:         self.cmd_opts.add_option(cmdoptions.requirements())
   65:         self.cmd_opts.add_option(cmdoptions.src())
   66:         self.cmd_opts.add_option(cmdoptions.ignore_requires_python())
   67:         self.cmd_opts.add_option(cmdoptions.no_deps())
   68:         self.cmd_opts.add_option(cmdoptions.progress_bar())
   69: 
   70:         self.cmd_opts.add_option(
   71:             "--no-verify",
   72:             dest="no_verify",
   73:             action="store_true",
   74:             default=False,
   75:             help="Don't verify if built wheel is valid.",
   76:         )
   77: 
   78:         self.cmd_opts.add_option(cmdoptions.config_settings())
   79:         self.cmd_opts.add_option(cmdoptions.build_options())
   80:         self.cmd_opts.add_option(cmdoptions.global_options())
   81: 
   82:         self.cmd_opts.add_option(
   83:             "--pre",
   84:             action="store_true",
   85:             default=False,
   86:             help=(
   87:                 "Include pre-release and development versions. By default, "
   88:                 "pip only finds stable versions."
   89:             ),
   90:         )
   91: 
   92:         self.cmd_opts.add_option(cmdoptions.require_hashes())
   93: 
   94:         index_opts = cmdoptions.make_option_group(
   95:             cmdoptions.index_group,
   96:             self.parser,
   97:         )
   98: 
   99:         self.parser.insert_option_group(0, index_opts)
  100:         self.parser.insert_option_group(0, self.cmd_opts)
  101: 
  102:     @with_cleanup
  103:     def run(self, options: Values, args: list[str]) -> int:
  104:         session = self.get_default_session(options)
  105: 
  106:         finder = self._build_package_finder(options, session)
  107: 
  108:         options.wheel_dir = normalize_path(options.wheel_dir)
  109:         ensure_dir(options.wheel_dir)
  110: 
  111:         build_tracker = self.enter_context(get_build_tracker())
  112: 
  113:         directory = TempDirectory(
  114:             delete=not options.no_clean,
  115:             kind="wheel",
  116:             globally_managed=True,
  117:         )
  118: 
  119:         reqs = self.get_requirements(args, options, finder, session)
  120:         check_legacy_setup_py_options(options, reqs)
  121: 
  122:         wheel_cache = WheelCache(options.cache_dir)
  123: 
  124:         preparer = self.make_requirement_preparer(
  125:             temp_build_dir=directory,
  126:             options=options,
  127:             build_tracker=build_tracker,
  128:             session=session,
  129:             finder=finder,
  130:             download_dir=options.wheel_dir,
  131:             use_user_site=False,
  132:             verbosity=self.verbosity,
  133:         )
  134: 
  135:         resolver = self.make_resolver(
  136:             preparer=preparer,
  137:             finder=finder,
  138:             options=options,
  139:             wheel_cache=wheel_cache,
  140:             ignore_requires_python=options.ignore_requires_python,
  141:             use_pep517=options.use_pep517,
  142:         )
  143: 
  144:         self.trace_basic_info(finder)
  145: 
  146:         requirement_set = resolver.resolve(reqs, check_supported_wheels=True)
  147: 
  148:         reqs_to_build: list[InstallRequirement] = []
  149:         for req in requirement_set.requirements.values():
  150:             if req.is_wheel:
  151:                 preparer.save_linked_requirement(req)
  152:             else:
  153:                 reqs_to_build.append(req)
  154: 
  155:         preparer.prepare_linked_requirements_more(requirement_set.requirements.values())
  156: 
  157:         # build wheels
  158:         build_successes, build_failures = build(
  159:             reqs_to_build,
  160:             wheel_cache=wheel_cache,
  161:             verify=(not options.no_verify),
  162:             build_options=options.build_options or [],
  163:             global_options=options.global_options or [],
  164:         )
  165:         for req in build_successes:
  166:             assert req.link and req.link.is_wheel
  167:             assert req.local_file_path
  168:             # copy from cache to target directory
  169:             try:
  170:                 shutil.copy(req.local_file_path, options.wheel_dir)
  171:             except OSError as e:
  172:                 logger.warning(
  173:                     "Building wheel for %s failed: %s",
  174:                     req.name,
  175:                     e,
  176:                 )
  177:                 build_failures.append(req)
  178:         if len(build_failures) != 0:
  179:             raise CommandError("Failed to build one or more wheels")
  180: 
  181:         return SUCCESS
