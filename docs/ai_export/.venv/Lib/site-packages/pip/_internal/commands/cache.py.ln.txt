    1: import os
    2: import textwrap
    3: from optparse import Values
    4: from typing import Callable
    5: 
    6: from pip._internal.cli.base_command import Command
    7: from pip._internal.cli.status_codes import ERROR, SUCCESS
    8: from pip._internal.exceptions import CommandError, PipError
    9: from pip._internal.utils import filesystem
   10: from pip._internal.utils.logging import getLogger
   11: from pip._internal.utils.misc import format_size
   12: 
   13: logger = getLogger(__name__)
   14: 
   15: 
   16: class CacheCommand(Command):
   17:     """
   18:     Inspect and manage pip's wheel cache.
   19: 
   20:     Subcommands:
   21: 
   22:     - dir: Show the cache directory.
   23:     - info: Show information about the cache.
   24:     - list: List filenames of packages stored in the cache.
   25:     - remove: Remove one or more package from the cache.
   26:     - purge: Remove all items from the cache.
   27: 
   28:     ``<pattern>`` can be a glob expression or a package name.
   29:     """
   30: 
   31:     ignore_require_venv = True
   32:     usage = """
   33:         %prog dir
   34:         %prog info
   35:         %prog list [<pattern>] [--format=[human, abspath]]
   36:         %prog remove <pattern>
   37:         %prog purge
   38:     """
   39: 
   40:     def add_options(self) -> None:
   41:         self.cmd_opts.add_option(
   42:             "--format",
   43:             action="store",
   44:             dest="list_format",
   45:             default="human",
   46:             choices=("human", "abspath"),
   47:             help="Select the output format among: human (default) or abspath",
   48:         )
   49: 
   50:         self.parser.insert_option_group(0, self.cmd_opts)
   51: 
   52:     def handler_map(self) -> dict[str, Callable[[Values, list[str]], None]]:
   53:         return {
   54:             "dir": self.get_cache_dir,
   55:             "info": self.get_cache_info,
   56:             "list": self.list_cache_items,
   57:             "remove": self.remove_cache_items,
   58:             "purge": self.purge_cache,
   59:         }
   60: 
   61:     def run(self, options: Values, args: list[str]) -> int:
   62:         handler_map = self.handler_map()
   63: 
   64:         if not options.cache_dir:
   65:             logger.error("pip cache commands can not function since cache is disabled.")
   66:             return ERROR
   67: 
   68:         # Determine action
   69:         if not args or args[0] not in handler_map:
   70:             logger.error(
   71:                 "Need an action (%s) to perform.",
   72:                 ", ".join(sorted(handler_map)),
   73:             )
   74:             return ERROR
   75: 
   76:         action = args[0]
   77: 
   78:         # Error handling happens here, not in the action-handlers.
   79:         try:
   80:             handler_map[action](options, args[1:])
   81:         except PipError as e:
   82:             logger.error(e.args[0])
   83:             return ERROR
   84: 
   85:         return SUCCESS
   86: 
   87:     def get_cache_dir(self, options: Values, args: list[str]) -> None:
   88:         if args:
   89:             raise CommandError("Too many arguments")
   90: 
   91:         logger.info(options.cache_dir)
   92: 
   93:     def get_cache_info(self, options: Values, args: list[str]) -> None:
   94:         if args:
   95:             raise CommandError("Too many arguments")
   96: 
   97:         num_http_files = len(self._find_http_files(options))
   98:         num_packages = len(self._find_wheels(options, "*"))
   99: 
  100:         http_cache_location = self._cache_dir(options, "http-v2")
  101:         old_http_cache_location = self._cache_dir(options, "http")
  102:         wheels_cache_location = self._cache_dir(options, "wheels")
  103:         http_cache_size = filesystem.format_size(
  104:             filesystem.directory_size(http_cache_location)
  105:             + filesystem.directory_size(old_http_cache_location)
  106:         )
  107:         wheels_cache_size = filesystem.format_directory_size(wheels_cache_location)
  108: 
  109:         message = (
  110:             textwrap.dedent(
  111:                 """
  112:                     Package index page cache location (pip v23.3+): {http_cache_location}
  113:                     Package index page cache location (older pips): {old_http_cache_location}
  114:                     Package index page cache size: {http_cache_size}
  115:                     Number of HTTP files: {num_http_files}
  116:                     Locally built wheels location: {wheels_cache_location}
  117:                     Locally built wheels size: {wheels_cache_size}
  118:                     Number of locally built wheels: {package_count}
  119:                 """  # noqa: E501
  120:             )
  121:             .format(
  122:                 http_cache_location=http_cache_location,
  123:                 old_http_cache_location=old_http_cache_location,
  124:                 http_cache_size=http_cache_size,
  125:                 num_http_files=num_http_files,
  126:                 wheels_cache_location=wheels_cache_location,
  127:                 package_count=num_packages,
  128:                 wheels_cache_size=wheels_cache_size,
  129:             )
  130:             .strip()
  131:         )
  132: 
  133:         logger.info(message)
  134: 
  135:     def list_cache_items(self, options: Values, args: list[str]) -> None:
  136:         if len(args) > 1:
  137:             raise CommandError("Too many arguments")
  138: 
  139:         if args:
  140:             pattern = args[0]
  141:         else:
  142:             pattern = "*"
  143: 
  144:         files = self._find_wheels(options, pattern)
  145:         if options.list_format == "human":
  146:             self.format_for_human(files)
  147:         else:
  148:             self.format_for_abspath(files)
  149: 
  150:     def format_for_human(self, files: list[str]) -> None:
  151:         if not files:
  152:             logger.info("No locally built wheels cached.")
  153:             return
  154: 
  155:         results = []
  156:         for filename in files:
  157:             wheel = os.path.basename(filename)
  158:             size = filesystem.format_file_size(filename)
  159:             results.append(f" - {wheel} ({size})")
  160:         logger.info("Cache contents:\n")
  161:         logger.info("\n".join(sorted(results)))
  162: 
  163:     def format_for_abspath(self, files: list[str]) -> None:
  164:         if files:
  165:             logger.info("\n".join(sorted(files)))
  166: 
  167:     def remove_cache_items(self, options: Values, args: list[str]) -> None:
  168:         if len(args) > 1:
  169:             raise CommandError("Too many arguments")
  170: 
  171:         if not args:
  172:             raise CommandError("Please provide a pattern")
  173: 
  174:         files = self._find_wheels(options, args[0])
  175: 
  176:         no_matching_msg = "No matching packages"
  177:         if args[0] == "*":
  178:             # Only fetch http files if no specific pattern given
  179:             files += self._find_http_files(options)
  180:         else:
  181:             # Add the pattern to the log message
  182:             no_matching_msg += f' for pattern "{args[0]}"'
  183: 
  184:         if not files:
  185:             logger.warning(no_matching_msg)
  186: 
  187:         bytes_removed = 0
  188:         for filename in files:
  189:             bytes_removed += os.stat(filename).st_size
  190:             os.unlink(filename)
  191:             logger.verbose("Removed %s", filename)
  192:         logger.info("Files removed: %s (%s)", len(files), format_size(bytes_removed))
  193: 
  194:     def purge_cache(self, options: Values, args: list[str]) -> None:
  195:         if args:
  196:             raise CommandError("Too many arguments")
  197: 
  198:         return self.remove_cache_items(options, ["*"])
  199: 
  200:     def _cache_dir(self, options: Values, subdir: str) -> str:
  201:         return os.path.join(options.cache_dir, subdir)
  202: 
  203:     def _find_http_files(self, options: Values) -> list[str]:
  204:         old_http_dir = self._cache_dir(options, "http")
  205:         new_http_dir = self._cache_dir(options, "http-v2")
  206:         return filesystem.find_files(old_http_dir, "*") + filesystem.find_files(
  207:             new_http_dir, "*"
  208:         )
  209: 
  210:     def _find_wheels(self, options: Values, pattern: str) -> list[str]:
  211:         wheel_dir = self._cache_dir(options, "wheels")
  212: 
  213:         # The wheel filename format, as specified in PEP 427, is:
  214:         #     {distribution}-{version}(-{build})?-{python}-{abi}-{platform}.whl
  215:         #
  216:         # Additionally, non-alphanumeric values in the distribution are
  217:         # normalized to underscores (_), meaning hyphens can never occur
  218:         # before `-{version}`.
  219:         #
  220:         # Given that information:
  221:         # - If the pattern we're given contains a hyphen (-), the user is
  222:         #   providing at least the version. Thus, we can just append `*.whl`
  223:         #   to match the rest of it.
  224:         # - If the pattern we're given doesn't contain a hyphen (-), the
  225:         #   user is only providing the name. Thus, we append `-*.whl` to
  226:         #   match the hyphen before the version, followed by anything else.
  227:         #
  228:         # PEP 427: https://www.python.org/dev/peps/pep-0427/
  229:         pattern = pattern + ("*.whl" if "-" in pattern else "-*.whl")
  230: 
  231:         return filesystem.find_files(wheel_dir, pattern)
