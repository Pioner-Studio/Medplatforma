    1: import sys
    2: import textwrap
    3: from optparse import Values
    4: 
    5: from pip._internal.cli.base_command import Command
    6: from pip._internal.cli.status_codes import SUCCESS
    7: from pip._internal.utils.misc import get_prog
    8: 
    9: BASE_COMPLETION = """
   10: # pip {shell} completion start{script}# pip {shell} completion end
   11: """
   12: 
   13: COMPLETION_SCRIPTS = {
   14:     "bash": """
   15:         _pip_completion()
   16:         {{
   17:             COMPREPLY=( $( COMP_WORDS="${{COMP_WORDS[*]}}" \\
   18:                            COMP_CWORD=$COMP_CWORD \\
   19:                            PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )
   20:         }}
   21:         complete -o default -F _pip_completion {prog}
   22:     """,
   23:     "zsh": """
   24:         #compdef -P pip[0-9.]#
   25:         __pip() {{
   26:           compadd $( COMP_WORDS="$words[*]" \\
   27:                      COMP_CWORD=$((CURRENT-1)) \\
   28:                      PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null )
   29:         }}
   30:         if [[ $zsh_eval_context[-1] == loadautofunc ]]; then
   31:           # autoload from fpath, call function directly
   32:           __pip "$@"
   33:         else
   34:           # eval/source/. command, register function for later
   35:           compdef __pip -P 'pip[0-9.]#'
   36:         fi
   37:     """,
   38:     "fish": """
   39:         function __fish_complete_pip
   40:             set -lx COMP_WORDS \\
   41:                 (commandline --current-process --tokenize --cut-at-cursor) \\
   42:                 (commandline --current-token --cut-at-cursor)
   43:             set -lx COMP_CWORD (math (count $COMP_WORDS) - 1)
   44:             set -lx PIP_AUTO_COMPLETE 1
   45:             set -l completions
   46:             if string match -q '2.*' $version
   47:                 set completions (eval $COMP_WORDS[1])
   48:             else
   49:                 set completions ($COMP_WORDS[1])
   50:             end
   51:             string split \\  -- $completions
   52:         end
   53:         complete -fa "(__fish_complete_pip)" -c {prog}
   54:     """,
   55:     "powershell": """
   56:         if ((Test-Path Function:\\TabExpansion) -and -not `
   57:             (Test-Path Function:\\_pip_completeBackup)) {{
   58:             Rename-Item Function:\\TabExpansion _pip_completeBackup
   59:         }}
   60:         function TabExpansion($line, $lastWord) {{
   61:             $lastBlock = [regex]::Split($line, '[|;]')[-1].TrimStart()
   62:             if ($lastBlock.StartsWith("{prog} ")) {{
   63:                 $Env:COMP_WORDS=$lastBlock
   64:                 $Env:COMP_CWORD=$lastBlock.Split().Length - 1
   65:                 $Env:PIP_AUTO_COMPLETE=1
   66:                 (& {prog}).Split()
   67:                 Remove-Item Env:COMP_WORDS
   68:                 Remove-Item Env:COMP_CWORD
   69:                 Remove-Item Env:PIP_AUTO_COMPLETE
   70:             }}
   71:             elseif (Test-Path Function:\\_pip_completeBackup) {{
   72:                 # Fall back on existing tab expansion
   73:                 _pip_completeBackup $line $lastWord
   74:             }}
   75:         }}
   76:     """,
   77: }
   78: 
   79: 
   80: class CompletionCommand(Command):
   81:     """A helper command to be used for command completion."""
   82: 
   83:     ignore_require_venv = True
   84: 
   85:     def add_options(self) -> None:
   86:         self.cmd_opts.add_option(
   87:             "--bash",
   88:             "-b",
   89:             action="store_const",
   90:             const="bash",
   91:             dest="shell",
   92:             help="Emit completion code for bash",
   93:         )
   94:         self.cmd_opts.add_option(
   95:             "--zsh",
   96:             "-z",
   97:             action="store_const",
   98:             const="zsh",
   99:             dest="shell",
  100:             help="Emit completion code for zsh",
  101:         )
  102:         self.cmd_opts.add_option(
  103:             "--fish",
  104:             "-f",
  105:             action="store_const",
  106:             const="fish",
  107:             dest="shell",
  108:             help="Emit completion code for fish",
  109:         )
  110:         self.cmd_opts.add_option(
  111:             "--powershell",
  112:             "-p",
  113:             action="store_const",
  114:             const="powershell",
  115:             dest="shell",
  116:             help="Emit completion code for powershell",
  117:         )
  118: 
  119:         self.parser.insert_option_group(0, self.cmd_opts)
  120: 
  121:     def run(self, options: Values, args: list[str]) -> int:
  122:         """Prints the completion code of the given shell"""
  123:         shells = COMPLETION_SCRIPTS.keys()
  124:         shell_options = ["--" + shell for shell in sorted(shells)]
  125:         if options.shell in shells:
  126:             script = textwrap.dedent(
  127:                 COMPLETION_SCRIPTS.get(options.shell, "").format(prog=get_prog())
  128:             )
  129:             print(BASE_COMPLETION.format(script=script, shell=options.shell))
  130:             return SUCCESS
  131:         else:
  132:             sys.stderr.write(
  133:                 "ERROR: You must pass {}\n".format(" or ".join(shell_options))
  134:             )
  135:             return SUCCESS
