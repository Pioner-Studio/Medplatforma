    1: """Primary application entrypoint."""
    2: 
    3: from __future__ import annotations
    4: 
    5: import locale
    6: import logging
    7: import os
    8: import sys
    9: import warnings
   10: 
   11: from pip._internal.cli.autocompletion import autocomplete
   12: from pip._internal.cli.main_parser import parse_command
   13: from pip._internal.commands import create_command
   14: from pip._internal.exceptions import PipError
   15: from pip._internal.utils import deprecation
   16: 
   17: logger = logging.getLogger(__name__)
   18: 
   19: 
   20: # Do not import and use main() directly! Using it directly is actively
   21: # discouraged by pip's maintainers. The name, location and behavior of
   22: # this function is subject to change, so calling it directly is not
   23: # portable across different pip versions.
   24: 
   25: # In addition, running pip in-process is unsupported and unsafe. This is
   26: # elaborated in detail at
   27: # https://pip.pypa.io/en/stable/user_guide/#using-pip-from-your-program.
   28: # That document also provides suggestions that should work for nearly
   29: # all users that are considering importing and using main() directly.
   30: 
   31: # However, we know that certain users will still want to invoke pip
   32: # in-process. If you understand and accept the implications of using pip
   33: # in an unsupported manner, the best approach is to use runpy to avoid
   34: # depending on the exact location of this entry point.
   35: 
   36: # The following example shows how to use runpy to invoke pip in that
   37: # case:
   38: #
   39: #     sys.argv = ["pip", your, args, here]
   40: #     runpy.run_module("pip", run_name="__main__")
   41: #
   42: # Note that this will exit the process after running, unlike a direct
   43: # call to main. As it is not safe to do any processing after calling
   44: # main, this should not be an issue in practice.
   45: 
   46: 
   47: def main(args: list[str] | None = None) -> int:
   48:     if args is None:
   49:         args = sys.argv[1:]
   50: 
   51:     # Suppress the pkg_resources deprecation warning
   52:     # Note - we use a module of .*pkg_resources to cover
   53:     # the normal case (pip._vendor.pkg_resources) and the
   54:     # devendored case (a bare pkg_resources)
   55:     warnings.filterwarnings(
   56:         action="ignore", category=DeprecationWarning, module=".*pkg_resources"
   57:     )
   58: 
   59:     # Configure our deprecation warnings to be sent through loggers
   60:     deprecation.install_warning_logger()
   61: 
   62:     autocomplete()
   63: 
   64:     try:
   65:         cmd_name, cmd_args = parse_command(args)
   66:     except PipError as exc:
   67:         sys.stderr.write(f"ERROR: {exc}")
   68:         sys.stderr.write(os.linesep)
   69:         sys.exit(1)
   70: 
   71:     # Needed for locale.getpreferredencoding(False) to work
   72:     # in pip._internal.utils.encoding.auto_decode
   73:     try:
   74:         locale.setlocale(locale.LC_ALL, "")
   75:     except locale.Error as e:
   76:         # setlocale can apparently crash if locale are uninitialized
   77:         logger.debug("Ignoring error %s when setting locale", e)
   78:     command = create_command(cmd_name, isolated=("--isolated" in cmd_args))
   79: 
   80:     return command.main(cmd_args)
