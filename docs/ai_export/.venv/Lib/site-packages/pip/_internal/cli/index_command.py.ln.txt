    1: """
    2: Contains command classes which may interact with an index / the network.
    3: 
    4: Unlike its sister module, req_command, this module still uses lazy imports
    5: so commands which don't always hit the network (e.g. list w/o --outdated or
    6: --uptodate) don't need waste time importing PipSession and friends.
    7: """
    8: 
    9: from __future__ import annotations
   10: 
   11: import logging
   12: import os
   13: import sys
   14: from functools import lru_cache
   15: from optparse import Values
   16: from typing import TYPE_CHECKING
   17: 
   18: from pip._vendor import certifi
   19: 
   20: from pip._internal.cli.base_command import Command
   21: from pip._internal.cli.command_context import CommandContextMixIn
   22: 
   23: if TYPE_CHECKING:
   24:     from ssl import SSLContext
   25: 
   26:     from pip._internal.network.session import PipSession
   27: 
   28: logger = logging.getLogger(__name__)
   29: 
   30: 
   31: @lru_cache
   32: def _create_truststore_ssl_context() -> SSLContext | None:
   33:     if sys.version_info < (3, 10):
   34:         logger.debug("Disabling truststore because Python version isn't 3.10+")
   35:         return None
   36: 
   37:     try:
   38:         import ssl
   39:     except ImportError:
   40:         logger.warning("Disabling truststore since ssl support is missing")
   41:         return None
   42: 
   43:     try:
   44:         from pip._vendor import truststore
   45:     except ImportError:
   46:         logger.warning("Disabling truststore because platform isn't supported")
   47:         return None
   48: 
   49:     ctx = truststore.SSLContext(ssl.PROTOCOL_TLS_CLIENT)
   50:     ctx.load_verify_locations(certifi.where())
   51:     return ctx
   52: 
   53: 
   54: class SessionCommandMixin(CommandContextMixIn):
   55:     """
   56:     A class mixin for command classes needing _build_session().
   57:     """
   58: 
   59:     def __init__(self) -> None:
   60:         super().__init__()
   61:         self._session: PipSession | None = None
   62: 
   63:     @classmethod
   64:     def _get_index_urls(cls, options: Values) -> list[str] | None:
   65:         """Return a list of index urls from user-provided options."""
   66:         index_urls = []
   67:         if not getattr(options, "no_index", False):
   68:             url = getattr(options, "index_url", None)
   69:             if url:
   70:                 index_urls.append(url)
   71:         urls = getattr(options, "extra_index_urls", None)
   72:         if urls:
   73:             index_urls.extend(urls)
   74:         # Return None rather than an empty list
   75:         return index_urls or None
   76: 
   77:     def get_default_session(self, options: Values) -> PipSession:
   78:         """Get a default-managed session."""
   79:         if self._session is None:
   80:             self._session = self.enter_context(self._build_session(options))
   81:             # there's no type annotation on requests.Session, so it's
   82:             # automatically ContextManager[Any] and self._session becomes Any,
   83:             # then https://github.com/python/mypy/issues/7696 kicks in
   84:             assert self._session is not None
   85:         return self._session
   86: 
   87:     def _build_session(
   88:         self,
   89:         options: Values,
   90:         retries: int | None = None,
   91:         timeout: int | None = None,
   92:     ) -> PipSession:
   93:         from pip._internal.network.session import PipSession
   94: 
   95:         cache_dir = options.cache_dir
   96:         assert not cache_dir or os.path.isabs(cache_dir)
   97: 
   98:         if "legacy-certs" not in options.deprecated_features_enabled:
   99:             ssl_context = _create_truststore_ssl_context()
  100:         else:
  101:             ssl_context = None
  102: 
  103:         session = PipSession(
  104:             cache=os.path.join(cache_dir, "http-v2") if cache_dir else None,
  105:             retries=retries if retries is not None else options.retries,
  106:             trusted_hosts=options.trusted_hosts,
  107:             index_urls=self._get_index_urls(options),
  108:             ssl_context=ssl_context,
  109:         )
  110: 
  111:         # Handle custom ca-bundles from the user
  112:         if options.cert:
  113:             session.verify = options.cert
  114: 
  115:         # Handle SSL client certificate
  116:         if options.client_cert:
  117:             session.cert = options.client_cert
  118: 
  119:         # Handle timeouts
  120:         if options.timeout or timeout:
  121:             session.timeout = timeout if timeout is not None else options.timeout
  122: 
  123:         # Handle configured proxies
  124:         if options.proxy:
  125:             session.proxies = {
  126:                 "http": options.proxy,
  127:                 "https": options.proxy,
  128:             }
  129:             session.trust_env = False
  130:             session.pip_proxy = options.proxy
  131: 
  132:         # Determine if we can prompt the user for authentication or not
  133:         session.auth.prompting = not options.no_input
  134:         session.auth.keyring_provider = options.keyring_provider
  135: 
  136:         return session
  137: 
  138: 
  139: def _pip_self_version_check(session: PipSession, options: Values) -> None:
  140:     from pip._internal.self_outdated_check import pip_self_version_check as check
  141: 
  142:     check(session, options)
  143: 
  144: 
  145: class IndexGroupCommand(Command, SessionCommandMixin):
  146:     """
  147:     Abstract base class for commands with the index_group options.
  148: 
  149:     This also corresponds to the commands that permit the pip version check.
  150:     """
  151: 
  152:     def handle_pip_version_check(self, options: Values) -> None:
  153:         """
  154:         Do the pip version check if not disabled.
  155: 
  156:         This overrides the default behavior of not doing the check.
  157:         """
  158:         # Make sure the index_group options are present.
  159:         assert hasattr(options, "no_index")
  160: 
  161:         if options.disable_pip_version_check or options.no_index:
  162:             return
  163: 
  164:         try:
  165:             # Otherwise, check if we're using the latest version of pip available.
  166:             session = self._build_session(
  167:                 options,
  168:                 retries=0,
  169:                 timeout=min(5, options.timeout),
  170:             )
  171:             with session:
  172:                 _pip_self_version_check(session, options)
  173:         except Exception:
  174:             logger.warning("There was an error checking the latest version of pip.")
  175:             logger.debug("See below for error", exc_info=True)
