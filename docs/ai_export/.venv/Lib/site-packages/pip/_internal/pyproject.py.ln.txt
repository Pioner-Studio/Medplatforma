    1: from __future__ import annotations
    2: 
    3: import importlib.util
    4: import os
    5: from collections import namedtuple
    6: from typing import Any
    7: 
    8: from pip._vendor.packaging.requirements import InvalidRequirement
    9: 
   10: from pip._internal.exceptions import (
   11:     InstallationError,
   12:     InvalidPyProjectBuildRequires,
   13:     MissingPyProjectBuildRequires,
   14: )
   15: from pip._internal.utils.compat import tomllib
   16: from pip._internal.utils.packaging import get_requirement
   17: 
   18: 
   19: def _is_list_of_str(obj: Any) -> bool:
   20:     return isinstance(obj, list) and all(isinstance(item, str) for item in obj)
   21: 
   22: 
   23: def make_pyproject_path(unpacked_source_directory: str) -> str:
   24:     return os.path.join(unpacked_source_directory, "pyproject.toml")
   25: 
   26: 
   27: BuildSystemDetails = namedtuple(
   28:     "BuildSystemDetails", ["requires", "backend", "check", "backend_path"]
   29: )
   30: 
   31: 
   32: def load_pyproject_toml(
   33:     use_pep517: bool | None, pyproject_toml: str, setup_py: str, req_name: str
   34: ) -> BuildSystemDetails | None:
   35:     """Load the pyproject.toml file.
   36: 
   37:     Parameters:
   38:         use_pep517 - Has the user requested PEP 517 processing? None
   39:                      means the user hasn't explicitly specified.
   40:         pyproject_toml - Location of the project's pyproject.toml file
   41:         setup_py - Location of the project's setup.py file
   42:         req_name - The name of the requirement we're processing (for
   43:                    error reporting)
   44: 
   45:     Returns:
   46:         None if we should use the legacy code path, otherwise a tuple
   47:         (
   48:             requirements from pyproject.toml,
   49:             name of PEP 517 backend,
   50:             requirements we should check are installed after setting
   51:                 up the build environment
   52:             directory paths to import the backend from (backend-path),
   53:                 relative to the project root.
   54:         )
   55:     """
   56:     has_pyproject = os.path.isfile(pyproject_toml)
   57:     has_setup = os.path.isfile(setup_py)
   58: 
   59:     if not has_pyproject and not has_setup:
   60:         raise InstallationError(
   61:             f"{req_name} does not appear to be a Python project: "
   62:             f"neither 'setup.py' nor 'pyproject.toml' found."
   63:         )
   64: 
   65:     if has_pyproject:
   66:         with open(pyproject_toml, encoding="utf-8") as f:
   67:             pp_toml = tomllib.loads(f.read())
   68:         build_system = pp_toml.get("build-system")
   69:     else:
   70:         build_system = None
   71: 
   72:     # The following cases must use PEP 517
   73:     # We check for use_pep517 being non-None and falsy because that means
   74:     # the user explicitly requested --no-use-pep517.  The value 0 as
   75:     # opposed to False can occur when the value is provided via an
   76:     # environment variable or config file option (due to the quirk of
   77:     # strtobool() returning an integer in pip's configuration code).
   78:     if has_pyproject and not has_setup:
   79:         if use_pep517 is not None and not use_pep517:
   80:             raise InstallationError(
   81:                 "Disabling PEP 517 processing is invalid: "
   82:                 "project does not have a setup.py"
   83:             )
   84:         use_pep517 = True
   85:     elif build_system and "build-backend" in build_system:
   86:         if use_pep517 is not None and not use_pep517:
   87:             raise InstallationError(
   88:                 "Disabling PEP 517 processing is invalid: "
   89:                 "project specifies a build backend of {} "
   90:                 "in pyproject.toml".format(build_system["build-backend"])
   91:             )
   92:         use_pep517 = True
   93: 
   94:     # If we haven't worked out whether to use PEP 517 yet,
   95:     # and the user hasn't explicitly stated a preference,
   96:     # we do so if the project has a pyproject.toml file
   97:     # or if we cannot import setuptools or wheels.
   98: 
   99:     # We fallback to PEP 517 when without setuptools or without the wheel package,
  100:     # so setuptools can be installed as a default build backend.
  101:     # For more info see:
  102:     # https://discuss.python.org/t/pip-without-setuptools-could-the-experience-be-improved/11810/9
  103:     # https://github.com/pypa/pip/issues/8559
  104:     elif use_pep517 is None:
  105:         use_pep517 = (
  106:             has_pyproject
  107:             or not importlib.util.find_spec("setuptools")
  108:             or not importlib.util.find_spec("wheel")
  109:         )
  110: 
  111:     # At this point, we know whether we're going to use PEP 517.
  112:     assert use_pep517 is not None
  113: 
  114:     # If we're using the legacy code path, there is nothing further
  115:     # for us to do here.
  116:     if not use_pep517:
  117:         return None
  118: 
  119:     if build_system is None:
  120:         # Either the user has a pyproject.toml with no build-system
  121:         # section, or the user has no pyproject.toml, but has opted in
  122:         # explicitly via --use-pep517.
  123:         # In the absence of any explicit backend specification, we
  124:         # assume the setuptools backend that most closely emulates the
  125:         # traditional direct setup.py execution, and require wheel and
  126:         # a version of setuptools that supports that backend.
  127: 
  128:         build_system = {
  129:             "requires": ["setuptools>=40.8.0"],
  130:             "build-backend": "setuptools.build_meta:__legacy__",
  131:         }
  132: 
  133:     # If we're using PEP 517, we have build system information (either
  134:     # from pyproject.toml, or defaulted by the code above).
  135:     # Note that at this point, we do not know if the user has actually
  136:     # specified a backend, though.
  137:     assert build_system is not None
  138: 
  139:     # Ensure that the build-system section in pyproject.toml conforms
  140:     # to PEP 518.
  141: 
  142:     # Specifying the build-system table but not the requires key is invalid
  143:     if "requires" not in build_system:
  144:         raise MissingPyProjectBuildRequires(package=req_name)
  145: 
  146:     # Error out if requires is not a list of strings
  147:     requires = build_system["requires"]
  148:     if not _is_list_of_str(requires):
  149:         raise InvalidPyProjectBuildRequires(
  150:             package=req_name,
  151:             reason="It is not a list of strings.",
  152:         )
  153: 
  154:     # Each requirement must be valid as per PEP 508
  155:     for requirement in requires:
  156:         try:
  157:             get_requirement(requirement)
  158:         except InvalidRequirement as error:
  159:             raise InvalidPyProjectBuildRequires(
  160:                 package=req_name,
  161:                 reason=f"It contains an invalid requirement: {requirement!r}",
  162:             ) from error
  163: 
  164:     backend = build_system.get("build-backend")
  165:     backend_path = build_system.get("backend-path", [])
  166:     check: list[str] = []
  167:     if backend is None:
  168:         # If the user didn't specify a backend, we assume they want to use
  169:         # the setuptools backend. But we can't be sure they have included
  170:         # a version of setuptools which supplies the backend. So we
  171:         # make a note to check that this requirement is present once
  172:         # we have set up the environment.
  173:         # This is quite a lot of work to check for a very specific case. But
  174:         # the problem is, that case is potentially quite common - projects that
  175:         # adopted PEP 518 early for the ability to specify requirements to
  176:         # execute setup.py, but never considered needing to mention the build
  177:         # tools themselves. The original PEP 518 code had a similar check (but
  178:         # implemented in a different way).
  179:         backend = "setuptools.build_meta:__legacy__"
  180:         check = ["setuptools>=40.8.0"]
  181: 
  182:     return BuildSystemDetails(requires, backend, check, backend_path)
