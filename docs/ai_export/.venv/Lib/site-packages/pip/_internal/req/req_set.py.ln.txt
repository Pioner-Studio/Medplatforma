    1: import logging
    2: from collections import OrderedDict
    3: 
    4: from pip._vendor.packaging.utils import canonicalize_name
    5: 
    6: from pip._internal.req.req_install import InstallRequirement
    7: 
    8: logger = logging.getLogger(__name__)
    9: 
   10: 
   11: class RequirementSet:
   12:     def __init__(self, check_supported_wheels: bool = True) -> None:
   13:         """Create a RequirementSet."""
   14: 
   15:         self.requirements: dict[str, InstallRequirement] = OrderedDict()
   16:         self.check_supported_wheels = check_supported_wheels
   17: 
   18:         self.unnamed_requirements: list[InstallRequirement] = []
   19: 
   20:     def __str__(self) -> str:
   21:         requirements = sorted(
   22:             (req for req in self.requirements.values() if not req.comes_from),
   23:             key=lambda req: canonicalize_name(req.name or ""),
   24:         )
   25:         return " ".join(str(req.req) for req in requirements)
   26: 
   27:     def __repr__(self) -> str:
   28:         requirements = sorted(
   29:             self.requirements.values(),
   30:             key=lambda req: canonicalize_name(req.name or ""),
   31:         )
   32: 
   33:         format_string = "<{classname} object; {count} requirement(s): {reqs}>"
   34:         return format_string.format(
   35:             classname=self.__class__.__name__,
   36:             count=len(requirements),
   37:             reqs=", ".join(str(req.req) for req in requirements),
   38:         )
   39: 
   40:     def add_unnamed_requirement(self, install_req: InstallRequirement) -> None:
   41:         assert not install_req.name
   42:         self.unnamed_requirements.append(install_req)
   43: 
   44:     def add_named_requirement(self, install_req: InstallRequirement) -> None:
   45:         assert install_req.name
   46: 
   47:         project_name = canonicalize_name(install_req.name)
   48:         self.requirements[project_name] = install_req
   49: 
   50:     def has_requirement(self, name: str) -> bool:
   51:         project_name = canonicalize_name(name)
   52: 
   53:         return (
   54:             project_name in self.requirements
   55:             and not self.requirements[project_name].constraint
   56:         )
   57: 
   58:     def get_requirement(self, name: str) -> InstallRequirement:
   59:         project_name = canonicalize_name(name)
   60: 
   61:         if project_name in self.requirements:
   62:             return self.requirements[project_name]
   63: 
   64:         raise KeyError(f"No project with the name {name!r}")
   65: 
   66:     @property
   67:     def all_requirements(self) -> list[InstallRequirement]:
   68:         return self.unnamed_requirements + list(self.requirements.values())
   69: 
   70:     @property
   71:     def requirements_to_install(self) -> list[InstallRequirement]:
   72:         """Return the list of requirements that need to be installed.
   73: 
   74:         TODO remove this property together with the legacy resolver, since the new
   75:              resolver only returns requirements that need to be installed.
   76:         """
   77:         return [
   78:             install_req
   79:             for install_req in self.all_requirements
   80:             if not install_req.constraint and not install_req.satisfied_by
   81:         ]
