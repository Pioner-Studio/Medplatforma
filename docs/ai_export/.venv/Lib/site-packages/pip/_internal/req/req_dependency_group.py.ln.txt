    1: from collections.abc import Iterable, Iterator
    2: from typing import Any
    3: 
    4: from pip._vendor.dependency_groups import DependencyGroupResolver
    5: 
    6: from pip._internal.exceptions import InstallationError
    7: from pip._internal.utils.compat import tomllib
    8: 
    9: 
   10: def parse_dependency_groups(groups: list[tuple[str, str]]) -> list[str]:
   11:     """
   12:     Parse dependency groups data as provided via the CLI, in a `[path:]group` syntax.
   13: 
   14:     Raises InstallationErrors if anything goes wrong.
   15:     """
   16:     resolvers = _build_resolvers(path for (path, _) in groups)
   17:     return list(_resolve_all_groups(resolvers, groups))
   18: 
   19: 
   20: def _resolve_all_groups(
   21:     resolvers: dict[str, DependencyGroupResolver], groups: list[tuple[str, str]]
   22: ) -> Iterator[str]:
   23:     """
   24:     Run all resolution, converting any error from `DependencyGroupResolver` into
   25:     an InstallationError.
   26:     """
   27:     for path, groupname in groups:
   28:         resolver = resolvers[path]
   29:         try:
   30:             yield from (str(req) for req in resolver.resolve(groupname))
   31:         except (ValueError, TypeError, LookupError) as e:
   32:             raise InstallationError(
   33:                 f"[dependency-groups] resolution failed for '{groupname}' "
   34:                 f"from '{path}': {e}"
   35:             ) from e
   36: 
   37: 
   38: def _build_resolvers(paths: Iterable[str]) -> dict[str, Any]:
   39:     resolvers = {}
   40:     for path in paths:
   41:         if path in resolvers:
   42:             continue
   43: 
   44:         pyproject = _load_pyproject(path)
   45:         if "dependency-groups" not in pyproject:
   46:             raise InstallationError(
   47:                 f"[dependency-groups] table was missing from '{path}'. "
   48:                 "Cannot resolve '--group' option."
   49:             )
   50:         raw_dependency_groups = pyproject["dependency-groups"]
   51:         if not isinstance(raw_dependency_groups, dict):
   52:             raise InstallationError(
   53:                 f"[dependency-groups] table was malformed in {path}. "
   54:                 "Cannot resolve '--group' option."
   55:             )
   56: 
   57:         resolvers[path] = DependencyGroupResolver(raw_dependency_groups)
   58:     return resolvers
   59: 
   60: 
   61: def _load_pyproject(path: str) -> dict[str, Any]:
   62:     """
   63:     This helper loads a pyproject.toml as TOML.
   64: 
   65:     It raises an InstallationError if the operation fails.
   66:     """
   67:     try:
   68:         with open(path, "rb") as fp:
   69:             return tomllib.load(fp)
   70:     except FileNotFoundError:
   71:         raise InstallationError(f"{path} not found. Cannot resolve '--group' option.")
   72:     except tomllib.TOMLDecodeError as e:
   73:         raise InstallationError(f"Error parsing {path}: {e}") from e
   74:     except OSError as e:
   75:         raise InstallationError(f"Error reading {path}: {e}") from e
