    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import functools
    5: import os
    6: import sys
    7: from typing import Literal, Protocol, cast
    8: 
    9: from pip._internal.utils.deprecation import deprecated
   10: from pip._internal.utils.misc import strtobool
   11: 
   12: from .base import BaseDistribution, BaseEnvironment, FilesystemWheel, MemoryWheel, Wheel
   13: 
   14: __all__ = [
   15:     "BaseDistribution",
   16:     "BaseEnvironment",
   17:     "FilesystemWheel",
   18:     "MemoryWheel",
   19:     "Wheel",
   20:     "get_default_environment",
   21:     "get_environment",
   22:     "get_wheel_distribution",
   23:     "select_backend",
   24: ]
   25: 
   26: 
   27: def _should_use_importlib_metadata() -> bool:
   28:     """Whether to use the ``importlib.metadata`` or ``pkg_resources`` backend.
   29: 
   30:     By default, pip uses ``importlib.metadata`` on Python 3.11+, and
   31:     ``pkg_resources`` otherwise. Up to Python 3.13, This can be
   32:     overridden by a couple of ways:
   33: 
   34:     * If environment variable ``_PIP_USE_IMPORTLIB_METADATA`` is set, it
   35:       dictates whether ``importlib.metadata`` is used, for Python <3.14.
   36:     * On Python 3.11, 3.12 and 3.13, Python distributors can patch
   37:       ``importlib.metadata`` to add a global constant
   38:       ``_PIP_USE_IMPORTLIB_METADATA = False``. This makes pip use
   39:       ``pkg_resources`` (unless the user set the aforementioned environment
   40:       variable to *True*).
   41: 
   42:     On Python 3.14+, the ``pkg_resources`` backend cannot be used.
   43:     """
   44:     if sys.version_info >= (3, 14):
   45:         # On Python >=3.14 we only support importlib.metadata.
   46:         return True
   47:     with contextlib.suppress(KeyError, ValueError):
   48:         # On Python <3.14, if the environment variable is set, we obey what it says.
   49:         return bool(strtobool(os.environ["_PIP_USE_IMPORTLIB_METADATA"]))
   50:     if sys.version_info < (3, 11):
   51:         # On Python <3.11, we always use pkg_resources, unless the environment
   52:         # variable was set.
   53:         return False
   54:     # On Python 3.11, 3.12 and 3.13, we check if the global constant is set.
   55:     import importlib.metadata
   56: 
   57:     return bool(getattr(importlib.metadata, "_PIP_USE_IMPORTLIB_METADATA", True))
   58: 
   59: 
   60: def _emit_pkg_resources_deprecation_if_needed() -> None:
   61:     if sys.version_info < (3, 11):
   62:         # All pip versions supporting Python<=3.11 will support pkg_resources,
   63:         # and pkg_resources is the default for these, so let's not bother users.
   64:         return
   65: 
   66:     import importlib.metadata
   67: 
   68:     if hasattr(importlib.metadata, "_PIP_USE_IMPORTLIB_METADATA"):
   69:         # The Python distributor has set the global constant, so we don't
   70:         # warn, since it is not a user decision.
   71:         return
   72: 
   73:     # The user has decided to use pkg_resources, so we warn.
   74:     deprecated(
   75:         reason="Using the pkg_resources metadata backend is deprecated.",
   76:         replacement=(
   77:             "to use the default importlib.metadata backend, "
   78:             "by unsetting the _PIP_USE_IMPORTLIB_METADATA environment variable"
   79:         ),
   80:         gone_in="26.3",
   81:         issue=13317,
   82:     )
   83: 
   84: 
   85: class Backend(Protocol):
   86:     NAME: Literal["importlib", "pkg_resources"]
   87:     Distribution: type[BaseDistribution]
   88:     Environment: type[BaseEnvironment]
   89: 
   90: 
   91: @functools.cache
   92: def select_backend() -> Backend:
   93:     if _should_use_importlib_metadata():
   94:         from . import importlib
   95: 
   96:         return cast(Backend, importlib)
   97: 
   98:     _emit_pkg_resources_deprecation_if_needed()
   99: 
  100:     from . import pkg_resources
  101: 
  102:     return cast(Backend, pkg_resources)
  103: 
  104: 
  105: def get_default_environment() -> BaseEnvironment:
  106:     """Get the default representation for the current environment.
  107: 
  108:     This returns an Environment instance from the chosen backend. The default
  109:     Environment instance should be built from ``sys.path`` and may use caching
  110:     to share instance state across calls.
  111:     """
  112:     return select_backend().Environment.default()
  113: 
  114: 
  115: def get_environment(paths: list[str] | None) -> BaseEnvironment:
  116:     """Get a representation of the environment specified by ``paths``.
  117: 
  118:     This returns an Environment instance from the chosen backend based on the
  119:     given import paths. The backend must build a fresh instance representing
  120:     the state of installed distributions when this function is called.
  121:     """
  122:     return select_backend().Environment.from_paths(paths)
  123: 
  124: 
  125: def get_directory_distribution(directory: str) -> BaseDistribution:
  126:     """Get the distribution metadata representation in the specified directory.
  127: 
  128:     This returns a Distribution instance from the chosen backend based on
  129:     the given on-disk ``.dist-info`` directory.
  130:     """
  131:     return select_backend().Distribution.from_directory(directory)
  132: 
  133: 
  134: def get_wheel_distribution(wheel: Wheel, canonical_name: str) -> BaseDistribution:
  135:     """Get the representation of the specified wheel's distribution metadata.
  136: 
  137:     This returns a Distribution instance from the chosen backend based on
  138:     the given wheel's ``.dist-info`` directory.
  139: 
  140:     :param canonical_name: Normalized project name of the given wheel.
  141:     """
  142:     return select_backend().Distribution.from_wheel(wheel, canonical_name)
  143: 
  144: 
  145: def get_metadata_distribution(
  146:     metadata_contents: bytes,
  147:     filename: str,
  148:     canonical_name: str,
  149: ) -> BaseDistribution:
  150:     """Get the dist representation of the specified METADATA file contents.
  151: 
  152:     This returns a Distribution instance from the chosen backend sourced from the data
  153:     in `metadata_contents`.
  154: 
  155:     :param metadata_contents: Contents of a METADATA file within a dist, or one served
  156:                               via PEP 658.
  157:     :param filename: Filename for the dist this metadata represents.
  158:     :param canonical_name: Normalized project name of the given dist.
  159:     """
  160:     return select_backend().Distribution.from_metadata_file_contents(
  161:         metadata_contents,
  162:         filename,
  163:         canonical_name,
  164:     )
