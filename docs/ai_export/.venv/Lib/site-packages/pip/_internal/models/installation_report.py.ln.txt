    1: from collections.abc import Sequence
    2: from typing import Any
    3: 
    4: from pip._vendor.packaging.markers import default_environment
    5: 
    6: from pip import __version__
    7: from pip._internal.req.req_install import InstallRequirement
    8: 
    9: 
   10: class InstallationReport:
   11:     def __init__(self, install_requirements: Sequence[InstallRequirement]):
   12:         self._install_requirements = install_requirements
   13: 
   14:     @classmethod
   15:     def _install_req_to_dict(cls, ireq: InstallRequirement) -> dict[str, Any]:
   16:         assert ireq.download_info, f"No download_info for {ireq}"
   17:         res = {
   18:             # PEP 610 json for the download URL. download_info.archive_info.hashes may
   19:             # be absent when the requirement was installed from the wheel cache
   20:             # and the cache entry was populated by an older pip version that did not
   21:             # record origin.json.
   22:             "download_info": ireq.download_info.to_dict(),
   23:             # is_direct is true if the requirement was a direct URL reference (which
   24:             # includes editable requirements), and false if the requirement was
   25:             # downloaded from a PEP 503 index or --find-links.
   26:             "is_direct": ireq.is_direct,
   27:             # is_yanked is true if the requirement was yanked from the index, but
   28:             # was still selected by pip to conform to PEP 592.
   29:             "is_yanked": ireq.link.is_yanked if ireq.link else False,
   30:             # requested is true if the requirement was specified by the user (aka
   31:             # top level requirement), and false if it was installed as a dependency of a
   32:             # requirement. https://peps.python.org/pep-0376/#requested
   33:             "requested": ireq.user_supplied,
   34:             # PEP 566 json encoding for metadata
   35:             # https://www.python.org/dev/peps/pep-0566/#json-compatible-metadata
   36:             "metadata": ireq.get_dist().metadata_dict,
   37:         }
   38:         if ireq.user_supplied and ireq.extras:
   39:             # For top level requirements, the list of requested extras, if any.
   40:             res["requested_extras"] = sorted(ireq.extras)
   41:         return res
   42: 
   43:     def to_dict(self) -> dict[str, Any]:
   44:         return {
   45:             "version": "1",
   46:             "pip_version": __version__,
   47:             "install": [
   48:                 self._install_req_to_dict(ireq) for ireq in self._install_requirements
   49:             ],
   50:             # https://peps.python.org/pep-0508/#environment-markers
   51:             # TODO: currently, the resolver uses the default environment to evaluate
   52:             # environment markers, so that is what we report here. In the future, it
   53:             # should also take into account options such as --python-version or
   54:             # --platform, perhaps under the form of an environment_override field?
   55:             # https://github.com/pypa/pip/issues/11198
   56:             "environment": default_environment(),
   57:         }
