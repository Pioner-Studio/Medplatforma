    1: """Metadata generation logic for source distributions."""
    2: 
    3: import os
    4: 
    5: from pip._vendor.pyproject_hooks import BuildBackendHookCaller
    6: 
    7: from pip._internal.build_env import BuildEnvironment
    8: from pip._internal.exceptions import (
    9:     InstallationSubprocessError,
   10:     MetadataGenerationFailed,
   11: )
   12: from pip._internal.utils.subprocess import runner_with_spinner_message
   13: from pip._internal.utils.temp_dir import TempDirectory
   14: 
   15: 
   16: def generate_metadata(
   17:     build_env: BuildEnvironment, backend: BuildBackendHookCaller, details: str
   18: ) -> str:
   19:     """Generate metadata using mechanisms described in PEP 517.
   20: 
   21:     Returns the generated metadata directory.
   22:     """
   23:     metadata_tmpdir = TempDirectory(kind="modern-metadata", globally_managed=True)
   24: 
   25:     metadata_dir = metadata_tmpdir.path
   26: 
   27:     with build_env:
   28:         # Note that BuildBackendHookCaller implements a fallback for
   29:         # prepare_metadata_for_build_wheel, so we don't have to
   30:         # consider the possibility that this hook doesn't exist.
   31:         runner = runner_with_spinner_message("Preparing metadata (pyproject.toml)")
   32:         with backend.subprocess_runner(runner):
   33:             try:
   34:                 distinfo_dir = backend.prepare_metadata_for_build_wheel(metadata_dir)
   35:             except InstallationSubprocessError as error:
   36:                 raise MetadataGenerationFailed(package_details=details) from error
   37: 
   38:     return os.path.join(metadata_dir, distinfo_dir)
