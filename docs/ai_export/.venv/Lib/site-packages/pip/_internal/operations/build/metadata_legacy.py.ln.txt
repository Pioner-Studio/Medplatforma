    1: """Metadata generation logic for legacy source distributions."""
    2: 
    3: import logging
    4: import os
    5: 
    6: from pip._internal.build_env import BuildEnvironment
    7: from pip._internal.cli.spinners import open_spinner
    8: from pip._internal.exceptions import (
    9:     InstallationError,
   10:     InstallationSubprocessError,
   11:     MetadataGenerationFailed,
   12: )
   13: from pip._internal.utils.setuptools_build import make_setuptools_egg_info_args
   14: from pip._internal.utils.subprocess import call_subprocess
   15: from pip._internal.utils.temp_dir import TempDirectory
   16: 
   17: logger = logging.getLogger(__name__)
   18: 
   19: 
   20: def _find_egg_info(directory: str) -> str:
   21:     """Find an .egg-info subdirectory in `directory`."""
   22:     filenames = [f for f in os.listdir(directory) if f.endswith(".egg-info")]
   23: 
   24:     if not filenames:
   25:         raise InstallationError(f"No .egg-info directory found in {directory}")
   26: 
   27:     if len(filenames) > 1:
   28:         raise InstallationError(
   29:             f"More than one .egg-info directory found in {directory}"
   30:         )
   31: 
   32:     return os.path.join(directory, filenames[0])
   33: 
   34: 
   35: def generate_metadata(
   36:     build_env: BuildEnvironment,
   37:     setup_py_path: str,
   38:     source_dir: str,
   39:     isolated: bool,
   40:     details: str,
   41: ) -> str:
   42:     """Generate metadata using setup.py-based defacto mechanisms.
   43: 
   44:     Returns the generated metadata directory.
   45:     """
   46:     logger.debug(
   47:         "Running setup.py (path:%s) egg_info for package %s",
   48:         setup_py_path,
   49:         details,
   50:     )
   51: 
   52:     egg_info_dir = TempDirectory(kind="pip-egg-info", globally_managed=True).path
   53: 
   54:     args = make_setuptools_egg_info_args(
   55:         setup_py_path,
   56:         egg_info_dir=egg_info_dir,
   57:         no_user_config=isolated,
   58:     )
   59: 
   60:     with build_env:
   61:         with open_spinner("Preparing metadata (setup.py)") as spinner:
   62:             try:
   63:                 call_subprocess(
   64:                     args,
   65:                     cwd=source_dir,
   66:                     command_desc="python setup.py egg_info",
   67:                     spinner=spinner,
   68:                 )
   69:             except InstallationSubprocessError as error:
   70:                 raise MetadataGenerationFailed(package_details=details) from error
   71: 
   72:     # Return the .egg-info directory.
   73:     return _find_egg_info(egg_info_dir)
