    1: from __future__ import annotations
    2: 
    3: import logging
    4: import os.path
    5: 
    6: from pip._internal.cli.spinners import open_spinner
    7: from pip._internal.utils.deprecation import deprecated
    8: from pip._internal.utils.setuptools_build import make_setuptools_bdist_wheel_args
    9: from pip._internal.utils.subprocess import call_subprocess, format_command_args
   10: 
   11: logger = logging.getLogger(__name__)
   12: 
   13: 
   14: def format_command_result(
   15:     command_args: list[str],
   16:     command_output: str,
   17: ) -> str:
   18:     """Format command information for logging."""
   19:     command_desc = format_command_args(command_args)
   20:     text = f"Command arguments: {command_desc}\n"
   21: 
   22:     if not command_output:
   23:         text += "Command output: None"
   24:     elif logger.getEffectiveLevel() > logging.DEBUG:
   25:         text += "Command output: [use --verbose to show]"
   26:     else:
   27:         if not command_output.endswith("\n"):
   28:             command_output += "\n"
   29:         text += f"Command output:\n{command_output}"
   30: 
   31:     return text
   32: 
   33: 
   34: def get_legacy_build_wheel_path(
   35:     names: list[str],
   36:     temp_dir: str,
   37:     name: str,
   38:     command_args: list[str],
   39:     command_output: str,
   40: ) -> str | None:
   41:     """Return the path to the wheel in the temporary build directory."""
   42:     # Sort for determinism.
   43:     names = sorted(names)
   44:     if not names:
   45:         msg = f"Legacy build of wheel for {name!r} created no files.\n"
   46:         msg += format_command_result(command_args, command_output)
   47:         logger.warning(msg)
   48:         return None
   49: 
   50:     if len(names) > 1:
   51:         msg = (
   52:             f"Legacy build of wheel for {name!r} created more than one file.\n"
   53:             f"Filenames (choosing first): {names}\n"
   54:         )
   55:         msg += format_command_result(command_args, command_output)
   56:         logger.warning(msg)
   57: 
   58:     return os.path.join(temp_dir, names[0])
   59: 
   60: 
   61: def build_wheel_legacy(
   62:     name: str,
   63:     setup_py_path: str,
   64:     source_dir: str,
   65:     global_options: list[str],
   66:     build_options: list[str],
   67:     tempd: str,
   68: ) -> str | None:
   69:     """Build one unpacked package using the "legacy" build process.
   70: 
   71:     Returns path to wheel if successfully built. Otherwise, returns None.
   72:     """
   73:     deprecated(
   74:         reason=(
   75:             f"Building {name!r} using the legacy setup.py bdist_wheel mechanism, "
   76:             "which will be removed in a future version."
   77:         ),
   78:         replacement=(
   79:             "to use the standardized build interface by "
   80:             "setting the `--use-pep517` option, "
   81:             "(possibly combined with `--no-build-isolation`), "
   82:             f"or adding a `pyproject.toml` file to the source tree of {name!r}"
   83:         ),
   84:         gone_in="25.3",
   85:         issue=6334,
   86:     )
   87: 
   88:     wheel_args = make_setuptools_bdist_wheel_args(
   89:         setup_py_path,
   90:         global_options=global_options,
   91:         build_options=build_options,
   92:         destination_dir=tempd,
   93:     )
   94: 
   95:     spin_message = f"Building wheel for {name} (setup.py)"
   96:     with open_spinner(spin_message) as spinner:
   97:         logger.debug("Destination directory: %s", tempd)
   98: 
   99:         try:
  100:             output = call_subprocess(
  101:                 wheel_args,
  102:                 command_desc="python setup.py bdist_wheel",
  103:                 cwd=source_dir,
  104:                 spinner=spinner,
  105:             )
  106:         except Exception:
  107:             spinner.finish("error")
  108:             logger.error("Failed building wheel for %s", name)
  109:             return None
  110: 
  111:         names = os.listdir(tempd)
  112:         wheel_path = get_legacy_build_wheel_path(
  113:             names=names,
  114:             temp_dir=tempd,
  115:             name=name,
  116:             command_args=wheel_args,
  117:             command_output=output,
  118:         )
  119:         return wheel_path
