    1: from __future__ import annotations
    2: 
    3: import sys
    4: import textwrap
    5: from collections.abc import Sequence
    6: 
    7: # Shim to wrap setup.py invocation with setuptools
    8: # Note that __file__ is handled via two {!r} *and* %r, to ensure that paths on
    9: # Windows are correctly handled (it should be "C:\\Users" not "C:\Users").
   10: _SETUPTOOLS_SHIM = textwrap.dedent(
   11:     """
   12:     exec(compile('''
   13:     # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py
   14:     #
   15:     # - It imports setuptools before invoking setup.py, to enable projects that directly
   16:     #   import from `distutils.core` to work with newer packaging standards.
   17:     # - It provides a clear error message when setuptools is not installed.
   18:     # - It sets `sys.argv[0]` to the underlying `setup.py`, when invoking `setup.py` so
   19:     #   setuptools doesn't think the script is `-c`. This avoids the following warning:
   20:     #     manifest_maker: standard file '-c' not found".
   21:     # - It generates a shim setup.py, for handling setup.cfg-only projects.
   22:     import os, sys, tokenize, traceback
   23: 
   24:     try:
   25:         import setuptools
   26:     except ImportError:
   27:         print(
   28:             "ERROR: Can not execute `setup.py` since setuptools failed to import in "
   29:             "the build environment with exception:",
   30:             file=sys.stderr,
   31:         )
   32:         traceback.print_exc()
   33:         sys.exit(1)
   34: 
   35:     __file__ = %r
   36:     sys.argv[0] = __file__
   37: 
   38:     if os.path.exists(__file__):
   39:         filename = __file__
   40:         with tokenize.open(__file__) as f:
   41:             setup_py_code = f.read()
   42:     else:
   43:         filename = "<auto-generated setuptools caller>"
   44:         setup_py_code = "from setuptools import setup; setup()"
   45: 
   46:     exec(compile(setup_py_code, filename, "exec"))
   47:     ''' % ({!r},), "<pip-setuptools-caller>", "exec"))
   48:     """
   49: ).rstrip()
   50: 
   51: 
   52: def make_setuptools_shim_args(
   53:     setup_py_path: str,
   54:     global_options: Sequence[str] | None = None,
   55:     no_user_config: bool = False,
   56:     unbuffered_output: bool = False,
   57: ) -> list[str]:
   58:     """
   59:     Get setuptools command arguments with shim wrapped setup file invocation.
   60: 
   61:     :param setup_py_path: The path to setup.py to be wrapped.
   62:     :param global_options: Additional global options.
   63:     :param no_user_config: If True, disables personal user configuration.
   64:     :param unbuffered_output: If True, adds the unbuffered switch to the
   65:      argument list.
   66:     """
   67:     args = [sys.executable]
   68:     if unbuffered_output:
   69:         args += ["-u"]
   70:     args += ["-c", _SETUPTOOLS_SHIM.format(setup_py_path)]
   71:     if global_options:
   72:         args += global_options
   73:     if no_user_config:
   74:         args += ["--no-user-cfg"]
   75:     return args
   76: 
   77: 
   78: def make_setuptools_bdist_wheel_args(
   79:     setup_py_path: str,
   80:     global_options: Sequence[str],
   81:     build_options: Sequence[str],
   82:     destination_dir: str,
   83: ) -> list[str]:
   84:     # NOTE: Eventually, we'd want to also -S to the flags here, when we're
   85:     # isolating. Currently, it breaks Python in virtualenvs, because it
   86:     # relies on site.py to find parts of the standard library outside the
   87:     # virtualenv.
   88:     args = make_setuptools_shim_args(
   89:         setup_py_path, global_options=global_options, unbuffered_output=True
   90:     )
   91:     args += ["bdist_wheel", "-d", destination_dir]
   92:     args += build_options
   93:     return args
   94: 
   95: 
   96: def make_setuptools_clean_args(
   97:     setup_py_path: str,
   98:     global_options: Sequence[str],
   99: ) -> list[str]:
  100:     args = make_setuptools_shim_args(
  101:         setup_py_path, global_options=global_options, unbuffered_output=True
  102:     )
  103:     args += ["clean", "--all"]
  104:     return args
  105: 
  106: 
  107: def make_setuptools_develop_args(
  108:     setup_py_path: str,
  109:     *,
  110:     global_options: Sequence[str],
  111:     no_user_config: bool,
  112:     prefix: str | None,
  113:     home: str | None,
  114:     use_user_site: bool,
  115: ) -> list[str]:
  116:     assert not (use_user_site and prefix)
  117: 
  118:     args = make_setuptools_shim_args(
  119:         setup_py_path,
  120:         global_options=global_options,
  121:         no_user_config=no_user_config,
  122:     )
  123: 
  124:     args += ["develop", "--no-deps"]
  125: 
  126:     if prefix:
  127:         args += ["--prefix", prefix]
  128:     if home is not None:
  129:         args += ["--install-dir", home]
  130: 
  131:     if use_user_site:
  132:         args += ["--user", "--prefix="]
  133: 
  134:     return args
  135: 
  136: 
  137: def make_setuptools_egg_info_args(
  138:     setup_py_path: str,
  139:     egg_info_dir: str | None,
  140:     no_user_config: bool,
  141: ) -> list[str]:
  142:     args = make_setuptools_shim_args(setup_py_path, no_user_config=no_user_config)
  143: 
  144:     args += ["egg_info"]
  145: 
  146:     if egg_info_dir:
  147:         args += ["--egg-base", egg_info_dir]
  148: 
  149:     return args
