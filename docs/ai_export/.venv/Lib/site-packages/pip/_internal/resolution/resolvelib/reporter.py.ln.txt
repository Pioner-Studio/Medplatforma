    1: from __future__ import annotations
    2: 
    3: from collections import defaultdict
    4: from logging import getLogger
    5: from typing import Any
    6: 
    7: from pip._vendor.resolvelib.reporters import BaseReporter
    8: 
    9: from .base import Candidate, Requirement
   10: 
   11: logger = getLogger(__name__)
   12: 
   13: 
   14: class PipReporter(BaseReporter[Requirement, Candidate, str]):
   15:     def __init__(self) -> None:
   16:         self.reject_count_by_package: defaultdict[str, int] = defaultdict(int)
   17: 
   18:         self._messages_at_reject_count = {
   19:             1: (
   20:                 "pip is looking at multiple versions of {package_name} to "
   21:                 "determine which version is compatible with other "
   22:                 "requirements. This could take a while."
   23:             ),
   24:             8: (
   25:                 "pip is still looking at multiple versions of {package_name} to "
   26:                 "determine which version is compatible with other "
   27:                 "requirements. This could take a while."
   28:             ),
   29:             13: (
   30:                 "This is taking longer than usual. You might need to provide "
   31:                 "the dependency resolver with stricter constraints to reduce "
   32:                 "runtime. See https://pip.pypa.io/warnings/backtracking for "
   33:                 "guidance. If you want to abort this run, press Ctrl + C."
   34:             ),
   35:         }
   36: 
   37:     def rejecting_candidate(self, criterion: Any, candidate: Candidate) -> None:
   38:         self.reject_count_by_package[candidate.name] += 1
   39: 
   40:         count = self.reject_count_by_package[candidate.name]
   41:         if count not in self._messages_at_reject_count:
   42:             return
   43: 
   44:         message = self._messages_at_reject_count[count]
   45:         logger.info("INFO: %s", message.format(package_name=candidate.name))
   46: 
   47:         msg = "Will try a different candidate, due to conflict:"
   48:         for req_info in criterion.information:
   49:             req, parent = req_info.requirement, req_info.parent
   50:             # Inspired by Factory.get_installation_error
   51:             msg += "\n    "
   52:             if parent:
   53:                 msg += f"{parent.name} {parent.version} depends on "
   54:             else:
   55:                 msg += "The user requested "
   56:             msg += req.format_for_error()
   57:         logger.debug(msg)
   58: 
   59: 
   60: class PipDebuggingReporter(BaseReporter[Requirement, Candidate, str]):
   61:     """A reporter that does an info log for every event it sees."""
   62: 
   63:     def starting(self) -> None:
   64:         logger.info("Reporter.starting()")
   65: 
   66:     def starting_round(self, index: int) -> None:
   67:         logger.info("Reporter.starting_round(%r)", index)
   68: 
   69:     def ending_round(self, index: int, state: Any) -> None:
   70:         logger.info("Reporter.ending_round(%r, state)", index)
   71:         logger.debug("Reporter.ending_round(%r, %r)", index, state)
   72: 
   73:     def ending(self, state: Any) -> None:
   74:         logger.info("Reporter.ending(%r)", state)
   75: 
   76:     def adding_requirement(
   77:         self, requirement: Requirement, parent: Candidate | None
   78:     ) -> None:
   79:         logger.info("Reporter.adding_requirement(%r, %r)", requirement, parent)
   80: 
   81:     def rejecting_candidate(self, criterion: Any, candidate: Candidate) -> None:
   82:         logger.info("Reporter.rejecting_candidate(%r, %r)", criterion, candidate)
   83: 
   84:     def pinning(self, candidate: Candidate) -> None:
   85:         logger.info("Reporter.pinning(%r)", candidate)
