    1: """xmlrpclib.Transport implementation"""
    2: 
    3: import logging
    4: import urllib.parse
    5: import xmlrpc.client
    6: from typing import TYPE_CHECKING
    7: 
    8: from pip._internal.exceptions import NetworkConnectionError
    9: from pip._internal.network.session import PipSession
   10: from pip._internal.network.utils import raise_for_status
   11: 
   12: if TYPE_CHECKING:
   13:     from xmlrpc.client import _HostType, _Marshallable
   14: 
   15:     from _typeshed import SizedBuffer
   16: 
   17: logger = logging.getLogger(__name__)
   18: 
   19: 
   20: class PipXmlrpcTransport(xmlrpc.client.Transport):
   21:     """Provide a `xmlrpclib.Transport` implementation via a `PipSession`
   22:     object.
   23:     """
   24: 
   25:     def __init__(
   26:         self, index_url: str, session: PipSession, use_datetime: bool = False
   27:     ) -> None:
   28:         super().__init__(use_datetime)
   29:         index_parts = urllib.parse.urlparse(index_url)
   30:         self._scheme = index_parts.scheme
   31:         self._session = session
   32: 
   33:     def request(
   34:         self,
   35:         host: "_HostType",
   36:         handler: str,
   37:         request_body: "SizedBuffer",
   38:         verbose: bool = False,
   39:     ) -> tuple["_Marshallable", ...]:
   40:         assert isinstance(host, str)
   41:         parts = (self._scheme, host, handler, None, None, None)
   42:         url = urllib.parse.urlunparse(parts)
   43:         try:
   44:             headers = {"Content-Type": "text/xml"}
   45:             response = self._session.post(
   46:                 url,
   47:                 data=request_body,
   48:                 headers=headers,
   49:                 stream=True,
   50:             )
   51:             raise_for_status(response)
   52:             self.verbose = verbose
   53:             return self.parse_response(response.raw)
   54:         except NetworkConnectionError as exc:
   55:             assert exc.response
   56:             logger.critical(
   57:                 "HTTP error %s while getting %s",
   58:                 exc.response.status_code,
   59:                 url,
   60:             )
   61:             raise
