    1: import ssl
    2: import sys
    3: import typing
    4: 
    5: # Hold on to the original class so we can create it consistently
    6: # even if we inject our own SSLContext into the ssl module.
    7: _original_SSLContext = ssl.SSLContext
    8: _original_super_SSLContext = super(_original_SSLContext, _original_SSLContext)
    9: 
   10: # CPython is known to be good, but non-CPython implementations
   11: # may implement SSLContext differently so to be safe we don't
   12: # subclass the SSLContext.
   13: 
   14: # This is returned by truststore.SSLContext.__class__()
   15: _truststore_SSLContext_dunder_class: typing.Optional[type]
   16: 
   17: # This value is the superclass of truststore.SSLContext.
   18: _truststore_SSLContext_super_class: type
   19: 
   20: if sys.implementation.name == "cpython":
   21:     _truststore_SSLContext_super_class = _original_SSLContext
   22:     _truststore_SSLContext_dunder_class = None
   23: else:
   24:     _truststore_SSLContext_super_class = object
   25:     _truststore_SSLContext_dunder_class = _original_SSLContext
   26: 
   27: 
   28: def _set_ssl_context_verify_mode(
   29:     ssl_context: ssl.SSLContext, verify_mode: ssl.VerifyMode
   30: ) -> None:
   31:     _original_super_SSLContext.verify_mode.__set__(ssl_context, verify_mode)  # type: ignore[attr-defined]
