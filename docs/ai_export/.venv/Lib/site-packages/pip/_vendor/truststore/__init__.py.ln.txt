    1: """Verify certificates using native system trust stores"""
    2: 
    3: import sys as _sys
    4: 
    5: if _sys.version_info < (3, 10):
    6:     raise ImportError("truststore requires Python 3.10 or later")
    7: 
    8: # Detect Python runtimes which don't implement SSLObject.get_unverified_chain() API
    9: # This API only became public in Python 3.13 but was available in CPython and PyPy since 3.10.
   10: if _sys.version_info < (3, 13) and _sys.implementation.name not in ("cpython", "pypy"):
   11:     try:
   12:         import ssl as _ssl
   13:     except ImportError:
   14:         raise ImportError("truststore requires the 'ssl' module")
   15:     else:
   16:         _sslmem = _ssl.MemoryBIO()
   17:         _sslobj = _ssl.create_default_context().wrap_bio(
   18:             _sslmem,
   19:             _sslmem,
   20:         )
   21:         try:
   22:             while not hasattr(_sslobj, "get_unverified_chain"):
   23:                 _sslobj = _sslobj._sslobj  # type: ignore[attr-defined]
   24:         except AttributeError:
   25:             raise ImportError(
   26:                 "truststore requires peer certificate chain APIs to be available"
   27:             ) from None
   28: 
   29:         del _ssl, _sslobj, _sslmem  # noqa: F821
   30: 
   31: from ._api import SSLContext, extract_from_ssl, inject_into_ssl  # noqa: E402
   32: 
   33: del _api, _sys  # type: ignore[name-defined] # noqa: F821
   34: 
   35: __all__ = ["SSLContext", "inject_into_ssl", "extract_from_ssl"]
   36: __version__ = "0.10.1"
