    1: """Light wrapper around the Win32 Console API - this module should only be imported on Windows
    2: 
    3: The API that this module wraps is documented at https://docs.microsoft.com/en-us/windows/console/console-functions
    4: """
    5: 
    6: import ctypes
    7: import sys
    8: from typing import Any
    9: 
   10: windll: Any = None
   11: if sys.platform == "win32":
   12:     windll = ctypes.LibraryLoader(ctypes.WinDLL)
   13: else:
   14:     raise ImportError(f"{__name__} can only be imported on Windows")
   15: 
   16: import time
   17: from ctypes import Structure, byref, wintypes
   18: from typing import IO, NamedTuple, Type, cast
   19: 
   20: from pip._vendor.rich.color import ColorSystem
   21: from pip._vendor.rich.style import Style
   22: 
   23: STDOUT = -11
   24: ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4
   25: 
   26: COORD = wintypes._COORD
   27: 
   28: 
   29: class LegacyWindowsError(Exception):
   30:     pass
   31: 
   32: 
   33: class WindowsCoordinates(NamedTuple):
   34:     """Coordinates in the Windows Console API are (y, x), not (x, y).
   35:     This class is intended to prevent that confusion.
   36:     Rows and columns are indexed from 0.
   37:     This class can be used in place of wintypes._COORD in arguments and argtypes.
   38:     """
   39: 
   40:     row: int
   41:     col: int
   42: 
   43:     @classmethod
   44:     def from_param(cls, value: "WindowsCoordinates") -> COORD:
   45:         """Converts a WindowsCoordinates into a wintypes _COORD structure.
   46:         This classmethod is internally called by ctypes to perform the conversion.
   47: 
   48:         Args:
   49:             value (WindowsCoordinates): The input coordinates to convert.
   50: 
   51:         Returns:
   52:             wintypes._COORD: The converted coordinates struct.
   53:         """
   54:         return COORD(value.col, value.row)
   55: 
   56: 
   57: class CONSOLE_SCREEN_BUFFER_INFO(Structure):
   58:     _fields_ = [
   59:         ("dwSize", COORD),
   60:         ("dwCursorPosition", COORD),
   61:         ("wAttributes", wintypes.WORD),
   62:         ("srWindow", wintypes.SMALL_RECT),
   63:         ("dwMaximumWindowSize", COORD),
   64:     ]
   65: 
   66: 
   67: class CONSOLE_CURSOR_INFO(ctypes.Structure):
   68:     _fields_ = [("dwSize", wintypes.DWORD), ("bVisible", wintypes.BOOL)]
   69: 
   70: 
   71: _GetStdHandle = windll.kernel32.GetStdHandle
   72: _GetStdHandle.argtypes = [
   73:     wintypes.DWORD,
   74: ]
   75: _GetStdHandle.restype = wintypes.HANDLE
   76: 
   77: 
   78: def GetStdHandle(handle: int = STDOUT) -> wintypes.HANDLE:
   79:     """Retrieves a handle to the specified standard device (standard input, standard output, or standard error).
   80: 
   81:     Args:
   82:         handle (int): Integer identifier for the handle. Defaults to -11 (stdout).
   83: 
   84:     Returns:
   85:         wintypes.HANDLE: The handle
   86:     """
   87:     return cast(wintypes.HANDLE, _GetStdHandle(handle))
   88: 
   89: 
   90: _GetConsoleMode = windll.kernel32.GetConsoleMode
   91: _GetConsoleMode.argtypes = [wintypes.HANDLE, wintypes.LPDWORD]
   92: _GetConsoleMode.restype = wintypes.BOOL
   93: 
   94: 
   95: def GetConsoleMode(std_handle: wintypes.HANDLE) -> int:
   96:     """Retrieves the current input mode of a console's input buffer
   97:     or the current output mode of a console screen buffer.
   98: 
   99:     Args:
  100:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  101: 
  102:     Raises:
  103:         LegacyWindowsError: If any error occurs while calling the Windows console API.
  104: 
  105:     Returns:
  106:         int: Value representing the current console mode as documented at
  107:             https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters
  108:     """
  109: 
  110:     console_mode = wintypes.DWORD()
  111:     success = bool(_GetConsoleMode(std_handle, console_mode))
  112:     if not success:
  113:         raise LegacyWindowsError("Unable to get legacy Windows Console Mode")
  114:     return console_mode.value
  115: 
  116: 
  117: _FillConsoleOutputCharacterW = windll.kernel32.FillConsoleOutputCharacterW
  118: _FillConsoleOutputCharacterW.argtypes = [
  119:     wintypes.HANDLE,
  120:     ctypes.c_char,
  121:     wintypes.DWORD,
  122:     cast(Type[COORD], WindowsCoordinates),
  123:     ctypes.POINTER(wintypes.DWORD),
  124: ]
  125: _FillConsoleOutputCharacterW.restype = wintypes.BOOL
  126: 
  127: 
  128: def FillConsoleOutputCharacter(
  129:     std_handle: wintypes.HANDLE,
  130:     char: str,
  131:     length: int,
  132:     start: WindowsCoordinates,
  133: ) -> int:
  134:     """Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.
  135: 
  136:     Args:
  137:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  138:         char (str): The character to write. Must be a string of length 1.
  139:         length (int): The number of times to write the character.
  140:         start (WindowsCoordinates): The coordinates to start writing at.
  141: 
  142:     Returns:
  143:         int: The number of characters written.
  144:     """
  145:     character = ctypes.c_char(char.encode())
  146:     num_characters = wintypes.DWORD(length)
  147:     num_written = wintypes.DWORD(0)
  148:     _FillConsoleOutputCharacterW(
  149:         std_handle,
  150:         character,
  151:         num_characters,
  152:         start,
  153:         byref(num_written),
  154:     )
  155:     return num_written.value
  156: 
  157: 
  158: _FillConsoleOutputAttribute = windll.kernel32.FillConsoleOutputAttribute
  159: _FillConsoleOutputAttribute.argtypes = [
  160:     wintypes.HANDLE,
  161:     wintypes.WORD,
  162:     wintypes.DWORD,
  163:     cast(Type[COORD], WindowsCoordinates),
  164:     ctypes.POINTER(wintypes.DWORD),
  165: ]
  166: _FillConsoleOutputAttribute.restype = wintypes.BOOL
  167: 
  168: 
  169: def FillConsoleOutputAttribute(
  170:     std_handle: wintypes.HANDLE,
  171:     attributes: int,
  172:     length: int,
  173:     start: WindowsCoordinates,
  174: ) -> int:
  175:     """Sets the character attributes for a specified number of character cells,
  176:     beginning at the specified coordinates in a screen buffer.
  177: 
  178:     Args:
  179:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  180:         attributes (int): Integer value representing the foreground and background colours of the cells.
  181:         length (int): The number of cells to set the output attribute of.
  182:         start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.
  183: 
  184:     Returns:
  185:         int: The number of cells whose attributes were actually set.
  186:     """
  187:     num_cells = wintypes.DWORD(length)
  188:     style_attrs = wintypes.WORD(attributes)
  189:     num_written = wintypes.DWORD(0)
  190:     _FillConsoleOutputAttribute(
  191:         std_handle, style_attrs, num_cells, start, byref(num_written)
  192:     )
  193:     return num_written.value
  194: 
  195: 
  196: _SetConsoleTextAttribute = windll.kernel32.SetConsoleTextAttribute
  197: _SetConsoleTextAttribute.argtypes = [
  198:     wintypes.HANDLE,
  199:     wintypes.WORD,
  200: ]
  201: _SetConsoleTextAttribute.restype = wintypes.BOOL
  202: 
  203: 
  204: def SetConsoleTextAttribute(
  205:     std_handle: wintypes.HANDLE, attributes: wintypes.WORD
  206: ) -> bool:
  207:     """Set the colour attributes for all text written after this function is called.
  208: 
  209:     Args:
  210:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  211:         attributes (int): Integer value representing the foreground and background colours.
  212: 
  213: 
  214:     Returns:
  215:         bool: True if the attribute was set successfully, otherwise False.
  216:     """
  217:     return bool(_SetConsoleTextAttribute(std_handle, attributes))
  218: 
  219: 
  220: _GetConsoleScreenBufferInfo = windll.kernel32.GetConsoleScreenBufferInfo
  221: _GetConsoleScreenBufferInfo.argtypes = [
  222:     wintypes.HANDLE,
  223:     ctypes.POINTER(CONSOLE_SCREEN_BUFFER_INFO),
  224: ]
  225: _GetConsoleScreenBufferInfo.restype = wintypes.BOOL
  226: 
  227: 
  228: def GetConsoleScreenBufferInfo(
  229:     std_handle: wintypes.HANDLE,
  230: ) -> CONSOLE_SCREEN_BUFFER_INFO:
  231:     """Retrieves information about the specified console screen buffer.
  232: 
  233:     Args:
  234:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  235: 
  236:     Returns:
  237:         CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about
  238:             screen size, cursor position, colour attributes, and more."""
  239:     console_screen_buffer_info = CONSOLE_SCREEN_BUFFER_INFO()
  240:     _GetConsoleScreenBufferInfo(std_handle, byref(console_screen_buffer_info))
  241:     return console_screen_buffer_info
  242: 
  243: 
  244: _SetConsoleCursorPosition = windll.kernel32.SetConsoleCursorPosition
  245: _SetConsoleCursorPosition.argtypes = [
  246:     wintypes.HANDLE,
  247:     cast(Type[COORD], WindowsCoordinates),
  248: ]
  249: _SetConsoleCursorPosition.restype = wintypes.BOOL
  250: 
  251: 
  252: def SetConsoleCursorPosition(
  253:     std_handle: wintypes.HANDLE, coords: WindowsCoordinates
  254: ) -> bool:
  255:     """Set the position of the cursor in the console screen
  256: 
  257:     Args:
  258:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  259:         coords (WindowsCoordinates): The coordinates to move the cursor to.
  260: 
  261:     Returns:
  262:         bool: True if the function succeeds, otherwise False.
  263:     """
  264:     return bool(_SetConsoleCursorPosition(std_handle, coords))
  265: 
  266: 
  267: _GetConsoleCursorInfo = windll.kernel32.GetConsoleCursorInfo
  268: _GetConsoleCursorInfo.argtypes = [
  269:     wintypes.HANDLE,
  270:     ctypes.POINTER(CONSOLE_CURSOR_INFO),
  271: ]
  272: _GetConsoleCursorInfo.restype = wintypes.BOOL
  273: 
  274: 
  275: def GetConsoleCursorInfo(
  276:     std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO
  277: ) -> bool:
  278:     """Get the cursor info - used to get cursor visibility and width
  279: 
  280:     Args:
  281:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  282:         cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information
  283:             about the console's cursor.
  284: 
  285:     Returns:
  286:           bool: True if the function succeeds, otherwise False.
  287:     """
  288:     return bool(_GetConsoleCursorInfo(std_handle, byref(cursor_info)))
  289: 
  290: 
  291: _SetConsoleCursorInfo = windll.kernel32.SetConsoleCursorInfo
  292: _SetConsoleCursorInfo.argtypes = [
  293:     wintypes.HANDLE,
  294:     ctypes.POINTER(CONSOLE_CURSOR_INFO),
  295: ]
  296: _SetConsoleCursorInfo.restype = wintypes.BOOL
  297: 
  298: 
  299: def SetConsoleCursorInfo(
  300:     std_handle: wintypes.HANDLE, cursor_info: CONSOLE_CURSOR_INFO
  301: ) -> bool:
  302:     """Set the cursor info - used for adjusting cursor visibility and width
  303: 
  304:     Args:
  305:         std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.
  306:         cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.
  307: 
  308:     Returns:
  309:           bool: True if the function succeeds, otherwise False.
  310:     """
  311:     return bool(_SetConsoleCursorInfo(std_handle, byref(cursor_info)))
  312: 
  313: 
  314: _SetConsoleTitle = windll.kernel32.SetConsoleTitleW
  315: _SetConsoleTitle.argtypes = [wintypes.LPCWSTR]
  316: _SetConsoleTitle.restype = wintypes.BOOL
  317: 
  318: 
  319: def SetConsoleTitle(title: str) -> bool:
  320:     """Sets the title of the current console window
  321: 
  322:     Args:
  323:         title (str): The new title of the console window.
  324: 
  325:     Returns:
  326:         bool: True if the function succeeds, otherwise False.
  327:     """
  328:     return bool(_SetConsoleTitle(title))
  329: 
  330: 
  331: class LegacyWindowsTerm:
  332:     """This class allows interaction with the legacy Windows Console API. It should only be used in the context
  333:     of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,
  334:     the entire API should work.
  335: 
  336:     Args:
  337:         file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.
  338:     """
  339: 
  340:     BRIGHT_BIT = 8
  341: 
  342:     # Indices are ANSI color numbers, values are the corresponding Windows Console API color numbers
  343:     ANSI_TO_WINDOWS = [
  344:         0,  # black                      The Windows colours are defined in wincon.h as follows:
  345:         4,  # red                         define FOREGROUND_BLUE            0x0001 -- 0000 0001
  346:         2,  # green                       define FOREGROUND_GREEN           0x0002 -- 0000 0010
  347:         6,  # yellow                      define FOREGROUND_RED             0x0004 -- 0000 0100
  348:         1,  # blue                        define FOREGROUND_INTENSITY       0x0008 -- 0000 1000
  349:         5,  # magenta                     define BACKGROUND_BLUE            0x0010 -- 0001 0000
  350:         3,  # cyan                        define BACKGROUND_GREEN           0x0020 -- 0010 0000
  351:         7,  # white                       define BACKGROUND_RED             0x0040 -- 0100 0000
  352:         8,  # bright black (grey)         define BACKGROUND_INTENSITY       0x0080 -- 1000 0000
  353:         12,  # bright red
  354:         10,  # bright green
  355:         14,  # bright yellow
  356:         9,  # bright blue
  357:         13,  # bright magenta
  358:         11,  # bright cyan
  359:         15,  # bright white
  360:     ]
  361: 
  362:     def __init__(self, file: "IO[str]") -> None:
  363:         handle = GetStdHandle(STDOUT)
  364:         self._handle = handle
  365:         default_text = GetConsoleScreenBufferInfo(handle).wAttributes
  366:         self._default_text = default_text
  367: 
  368:         self._default_fore = default_text & 7
  369:         self._default_back = (default_text >> 4) & 7
  370:         self._default_attrs = self._default_fore | (self._default_back << 4)
  371: 
  372:         self._file = file
  373:         self.write = file.write
  374:         self.flush = file.flush
  375: 
  376:     @property
  377:     def cursor_position(self) -> WindowsCoordinates:
  378:         """Returns the current position of the cursor (0-based)
  379: 
  380:         Returns:
  381:             WindowsCoordinates: The current cursor position.
  382:         """
  383:         coord: COORD = GetConsoleScreenBufferInfo(self._handle).dwCursorPosition
  384:         return WindowsCoordinates(row=coord.Y, col=coord.X)
  385: 
  386:     @property
  387:     def screen_size(self) -> WindowsCoordinates:
  388:         """Returns the current size of the console screen buffer, in character columns and rows
  389: 
  390:         Returns:
  391:             WindowsCoordinates: The width and height of the screen as WindowsCoordinates.
  392:         """
  393:         screen_size: COORD = GetConsoleScreenBufferInfo(self._handle).dwSize
  394:         return WindowsCoordinates(row=screen_size.Y, col=screen_size.X)
  395: 
  396:     def write_text(self, text: str) -> None:
  397:         """Write text directly to the terminal without any modification of styles
  398: 
  399:         Args:
  400:             text (str): The text to write to the console
  401:         """
  402:         self.write(text)
  403:         self.flush()
  404: 
  405:     def write_styled(self, text: str, style: Style) -> None:
  406:         """Write styled text to the terminal.
  407: 
  408:         Args:
  409:             text (str): The text to write
  410:             style (Style): The style of the text
  411:         """
  412:         color = style.color
  413:         bgcolor = style.bgcolor
  414:         if style.reverse:
  415:             color, bgcolor = bgcolor, color
  416: 
  417:         if color:
  418:             fore = color.downgrade(ColorSystem.WINDOWS).number
  419:             fore = fore if fore is not None else 7  # Default to ANSI 7: White
  420:             if style.bold:
  421:                 fore = fore | self.BRIGHT_BIT
  422:             if style.dim:
  423:                 fore = fore & ~self.BRIGHT_BIT
  424:             fore = self.ANSI_TO_WINDOWS[fore]
  425:         else:
  426:             fore = self._default_fore
  427: 
  428:         if bgcolor:
  429:             back = bgcolor.downgrade(ColorSystem.WINDOWS).number
  430:             back = back if back is not None else 0  # Default to ANSI 0: Black
  431:             back = self.ANSI_TO_WINDOWS[back]
  432:         else:
  433:             back = self._default_back
  434: 
  435:         assert fore is not None
  436:         assert back is not None
  437: 
  438:         SetConsoleTextAttribute(
  439:             self._handle, attributes=ctypes.c_ushort(fore | (back << 4))
  440:         )
  441:         self.write_text(text)
  442:         SetConsoleTextAttribute(self._handle, attributes=self._default_text)
  443: 
  444:     def move_cursor_to(self, new_position: WindowsCoordinates) -> None:
  445:         """Set the position of the cursor
  446: 
  447:         Args:
  448:             new_position (WindowsCoordinates): The WindowsCoordinates representing the new position of the cursor.
  449:         """
  450:         if new_position.col < 0 or new_position.row < 0:
  451:             return
  452:         SetConsoleCursorPosition(self._handle, coords=new_position)
  453: 
  454:     def erase_line(self) -> None:
  455:         """Erase all content on the line the cursor is currently located at"""
  456:         screen_size = self.screen_size
  457:         cursor_position = self.cursor_position
  458:         cells_to_erase = screen_size.col
  459:         start_coordinates = WindowsCoordinates(row=cursor_position.row, col=0)
  460:         FillConsoleOutputCharacter(
  461:             self._handle, " ", length=cells_to_erase, start=start_coordinates
  462:         )
  463:         FillConsoleOutputAttribute(
  464:             self._handle,
  465:             self._default_attrs,
  466:             length=cells_to_erase,
  467:             start=start_coordinates,
  468:         )
  469: 
  470:     def erase_end_of_line(self) -> None:
  471:         """Erase all content from the cursor position to the end of that line"""
  472:         cursor_position = self.cursor_position
  473:         cells_to_erase = self.screen_size.col - cursor_position.col
  474:         FillConsoleOutputCharacter(
  475:             self._handle, " ", length=cells_to_erase, start=cursor_position
  476:         )
  477:         FillConsoleOutputAttribute(
  478:             self._handle,
  479:             self._default_attrs,
  480:             length=cells_to_erase,
  481:             start=cursor_position,
  482:         )
  483: 
  484:     def erase_start_of_line(self) -> None:
  485:         """Erase all content from the cursor position to the start of that line"""
  486:         row, col = self.cursor_position
  487:         start = WindowsCoordinates(row, 0)
  488:         FillConsoleOutputCharacter(self._handle, " ", length=col, start=start)
  489:         FillConsoleOutputAttribute(
  490:             self._handle, self._default_attrs, length=col, start=start
  491:         )
  492: 
  493:     def move_cursor_up(self) -> None:
  494:         """Move the cursor up a single cell"""
  495:         cursor_position = self.cursor_position
  496:         SetConsoleCursorPosition(
  497:             self._handle,
  498:             coords=WindowsCoordinates(
  499:                 row=cursor_position.row - 1, col=cursor_position.col
  500:             ),
  501:         )
  502: 
  503:     def move_cursor_down(self) -> None:
  504:         """Move the cursor down a single cell"""
  505:         cursor_position = self.cursor_position
  506:         SetConsoleCursorPosition(
  507:             self._handle,
  508:             coords=WindowsCoordinates(
  509:                 row=cursor_position.row + 1,
  510:                 col=cursor_position.col,
  511:             ),
  512:         )
  513: 
  514:     def move_cursor_forward(self) -> None:
  515:         """Move the cursor forward a single cell. Wrap to the next line if required."""
  516:         row, col = self.cursor_position
  517:         if col == self.screen_size.col - 1:
  518:             row += 1
  519:             col = 0
  520:         else:
  521:             col += 1
  522:         SetConsoleCursorPosition(
  523:             self._handle, coords=WindowsCoordinates(row=row, col=col)
  524:         )
  525: 
  526:     def move_cursor_to_column(self, column: int) -> None:
  527:         """Move cursor to the column specified by the zero-based column index, staying on the same row
  528: 
  529:         Args:
  530:             column (int): The zero-based column index to move the cursor to.
  531:         """
  532:         row, _ = self.cursor_position
  533:         SetConsoleCursorPosition(self._handle, coords=WindowsCoordinates(row, column))
  534: 
  535:     def move_cursor_backward(self) -> None:
  536:         """Move the cursor backward a single cell. Wrap to the previous line if required."""
  537:         row, col = self.cursor_position
  538:         if col == 0:
  539:             row -= 1
  540:             col = self.screen_size.col - 1
  541:         else:
  542:             col -= 1
  543:         SetConsoleCursorPosition(
  544:             self._handle, coords=WindowsCoordinates(row=row, col=col)
  545:         )
  546: 
  547:     def hide_cursor(self) -> None:
  548:         """Hide the cursor"""
  549:         current_cursor_size = self._get_cursor_size()
  550:         invisible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=0)
  551:         SetConsoleCursorInfo(self._handle, cursor_info=invisible_cursor)
  552: 
  553:     def show_cursor(self) -> None:
  554:         """Show the cursor"""
  555:         current_cursor_size = self._get_cursor_size()
  556:         visible_cursor = CONSOLE_CURSOR_INFO(dwSize=current_cursor_size, bVisible=1)
  557:         SetConsoleCursorInfo(self._handle, cursor_info=visible_cursor)
  558: 
  559:     def set_title(self, title: str) -> None:
  560:         """Set the title of the terminal window
  561: 
  562:         Args:
  563:             title (str): The new title of the console window
  564:         """
  565:         assert len(title) < 255, "Console title must be less than 255 characters"
  566:         SetConsoleTitle(title)
  567: 
  568:     def _get_cursor_size(self) -> int:
  569:         """Get the percentage of the character cell that is filled by the cursor"""
  570:         cursor_info = CONSOLE_CURSOR_INFO()
  571:         GetConsoleCursorInfo(self._handle, cursor_info=cursor_info)
  572:         return int(cursor_info.dwSize)
  573: 
  574: 
  575: if __name__ == "__main__":
  576:     handle = GetStdHandle()
  577: 
  578:     from pip._vendor.rich.console import Console
  579: 
  580:     console = Console()
  581: 
  582:     term = LegacyWindowsTerm(sys.stdout)
  583:     term.set_title("Win32 Console Examples")
  584: 
  585:     style = Style(color="black", bgcolor="red")
  586: 
  587:     heading = Style.parse("black on green")
  588: 
  589:     # Check colour output
  590:     console.rule("Checking colour output")
  591:     console.print("[on red]on red!")
  592:     console.print("[blue]blue!")
  593:     console.print("[yellow]yellow!")
  594:     console.print("[bold yellow]bold yellow!")
  595:     console.print("[bright_yellow]bright_yellow!")
  596:     console.print("[dim bright_yellow]dim bright_yellow!")
  597:     console.print("[italic cyan]italic cyan!")
  598:     console.print("[bold white on blue]bold white on blue!")
  599:     console.print("[reverse bold white on blue]reverse bold white on blue!")
  600:     console.print("[bold black on cyan]bold black on cyan!")
  601:     console.print("[black on green]black on green!")
  602:     console.print("[blue on green]blue on green!")
  603:     console.print("[white on black]white on black!")
  604:     console.print("[black on white]black on white!")
  605:     console.print("[#1BB152 on #DA812D]#1BB152 on #DA812D!")
  606: 
  607:     # Check cursor movement
  608:     console.rule("Checking cursor movement")
  609:     console.print()
  610:     term.move_cursor_backward()
  611:     term.move_cursor_backward()
  612:     term.write_text("went back and wrapped to prev line")
  613:     time.sleep(1)
  614:     term.move_cursor_up()
  615:     term.write_text("we go up")
  616:     time.sleep(1)
  617:     term.move_cursor_down()
  618:     term.write_text("and down")
  619:     time.sleep(1)
  620:     term.move_cursor_up()
  621:     term.move_cursor_backward()
  622:     term.move_cursor_backward()
  623:     term.write_text("we went up and back 2")
  624:     time.sleep(1)
  625:     term.move_cursor_down()
  626:     term.move_cursor_backward()
  627:     term.move_cursor_backward()
  628:     term.write_text("we went down and back 2")
  629:     time.sleep(1)
  630: 
  631:     # Check erasing of lines
  632:     term.hide_cursor()
  633:     console.print()
  634:     console.rule("Checking line erasing")
  635:     console.print("\n...Deleting to the start of the line...")
  636:     term.write_text("The red arrow shows the cursor location, and direction of erase")
  637:     time.sleep(1)
  638:     term.move_cursor_to_column(16)
  639:     term.write_styled("<", Style.parse("black on red"))
  640:     term.move_cursor_backward()
  641:     time.sleep(1)
  642:     term.erase_start_of_line()
  643:     time.sleep(1)
  644: 
  645:     console.print("\n\n...And to the end of the line...")
  646:     term.write_text("The red arrow shows the cursor location, and direction of erase")
  647:     time.sleep(1)
  648: 
  649:     term.move_cursor_to_column(16)
  650:     term.write_styled(">", Style.parse("black on red"))
  651:     time.sleep(1)
  652:     term.erase_end_of_line()
  653:     time.sleep(1)
  654: 
  655:     console.print("\n\n...Now the whole line will be erased...")
  656:     term.write_styled("I'm going to disappear!", style=Style.parse("black on cyan"))
  657:     time.sleep(1)
  658:     term.erase_line()
  659: 
  660:     term.show_cursor()
  661:     print("\n")
