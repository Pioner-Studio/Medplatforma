    1: from __future__ import annotations
    2: 
    3: from typing import TYPE_CHECKING, Collection, Generic
    4: 
    5: from ..structs import CT, RT, RequirementInformation
    6: 
    7: if TYPE_CHECKING:
    8:     from .criterion import Criterion
    9: 
   10: 
   11: class ResolverException(Exception):
   12:     """A base class for all exceptions raised by this module.
   13: 
   14:     Exceptions derived by this class should all be handled in this module. Any
   15:     bubbling pass the resolver should be treated as a bug.
   16:     """
   17: 
   18: 
   19: class RequirementsConflicted(ResolverException, Generic[RT, CT]):
   20:     def __init__(self, criterion: Criterion[RT, CT]) -> None:
   21:         super().__init__(criterion)
   22:         self.criterion = criterion
   23: 
   24:     def __str__(self) -> str:
   25:         return "Requirements conflict: {}".format(
   26:             ", ".join(repr(r) for r in self.criterion.iter_requirement()),
   27:         )
   28: 
   29: 
   30: class InconsistentCandidate(ResolverException, Generic[RT, CT]):
   31:     def __init__(self, candidate: CT, criterion: Criterion[RT, CT]):
   32:         super().__init__(candidate, criterion)
   33:         self.candidate = candidate
   34:         self.criterion = criterion
   35: 
   36:     def __str__(self) -> str:
   37:         return "Provided candidate {!r} does not satisfy {}".format(
   38:             self.candidate,
   39:             ", ".join(repr(r) for r in self.criterion.iter_requirement()),
   40:         )
   41: 
   42: 
   43: class ResolutionError(ResolverException):
   44:     pass
   45: 
   46: 
   47: class ResolutionImpossible(ResolutionError, Generic[RT, CT]):
   48:     def __init__(self, causes: Collection[RequirementInformation[RT, CT]]):
   49:         super().__init__(causes)
   50:         # causes is a list of RequirementInformation objects
   51:         self.causes = causes
   52: 
   53: 
   54: class ResolutionTooDeep(ResolutionError):
   55:     def __init__(self, round_count: int) -> None:
   56:         super().__init__(round_count)
   57:         self.round_count = round_count
