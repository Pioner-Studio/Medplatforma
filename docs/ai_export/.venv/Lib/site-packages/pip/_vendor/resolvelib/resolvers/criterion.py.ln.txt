    1: from __future__ import annotations
    2: 
    3: from typing import Collection, Generic, Iterable, Iterator
    4: 
    5: from ..structs import CT, RT, RequirementInformation
    6: 
    7: 
    8: class Criterion(Generic[RT, CT]):
    9:     """Representation of possible resolution results of a package.
   10: 
   11:     This holds three attributes:
   12: 
   13:     * `information` is a collection of `RequirementInformation` pairs.
   14:       Each pair is a requirement contributing to this criterion, and the
   15:       candidate that provides the requirement.
   16:     * `incompatibilities` is a collection of all known not-to-work candidates
   17:       to exclude from consideration.
   18:     * `candidates` is a collection containing all possible candidates deducted
   19:       from the union of contributing requirements and known incompatibilities.
   20:       It should never be empty, except when the criterion is an attribute of a
   21:       raised `RequirementsConflicted` (in which case it is always empty).
   22: 
   23:     .. note::
   24:         This class is intended to be externally immutable. **Do not** mutate
   25:         any of its attribute containers.
   26:     """
   27: 
   28:     def __init__(
   29:         self,
   30:         candidates: Iterable[CT],
   31:         information: Collection[RequirementInformation[RT, CT]],
   32:         incompatibilities: Collection[CT],
   33:     ) -> None:
   34:         self.candidates = candidates
   35:         self.information = information
   36:         self.incompatibilities = incompatibilities
   37: 
   38:     def __repr__(self) -> str:
   39:         requirements = ", ".join(
   40:             f"({req!r}, via={parent!r})" for req, parent in self.information
   41:         )
   42:         return f"Criterion({requirements})"
   43: 
   44:     def iter_requirement(self) -> Iterator[RT]:
   45:         return (i.requirement for i in self.information)
   46: 
   47:     def iter_parent(self) -> Iterator[CT | None]:
   48:         return (i.parent for i in self.information)
