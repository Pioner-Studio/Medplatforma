    1: """
    2: Python HTTP library with thread-safe connection pooling, file post support, user friendly, and more
    3: """
    4: from __future__ import absolute_import
    5: 
    6: # Set default logging handler to avoid "No handler found" warnings.
    7: import logging
    8: import warnings
    9: from logging import NullHandler
   10: 
   11: from . import exceptions
   12: from ._version import __version__
   13: from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, connection_from_url
   14: from .filepost import encode_multipart_formdata
   15: from .poolmanager import PoolManager, ProxyManager, proxy_from_url
   16: from .response import HTTPResponse
   17: from .util.request import make_headers
   18: from .util.retry import Retry
   19: from .util.timeout import Timeout
   20: from .util.url import get_host
   21: 
   22: # === NOTE TO REPACKAGERS AND VENDORS ===
   23: # Please delete this block, this logic is only
   24: # for urllib3 being distributed via PyPI.
   25: # See: https://github.com/urllib3/urllib3/issues/2680
   26: try:
   27:     import urllib3_secure_extra  # type: ignore # noqa: F401
   28: except ImportError:
   29:     pass
   30: else:
   31:     warnings.warn(
   32:         "'urllib3[secure]' extra is deprecated and will be removed "
   33:         "in a future release of urllib3 2.x. Read more in this issue: "
   34:         "https://github.com/urllib3/urllib3/issues/2680",
   35:         category=DeprecationWarning,
   36:         stacklevel=2,
   37:     )
   38: 
   39: __author__ = "Andrey Petrov (andrey.petrov@shazow.net)"
   40: __license__ = "MIT"
   41: __version__ = __version__
   42: 
   43: __all__ = (
   44:     "HTTPConnectionPool",
   45:     "HTTPSConnectionPool",
   46:     "PoolManager",
   47:     "ProxyManager",
   48:     "HTTPResponse",
   49:     "Retry",
   50:     "Timeout",
   51:     "add_stderr_logger",
   52:     "connection_from_url",
   53:     "disable_warnings",
   54:     "encode_multipart_formdata",
   55:     "get_host",
   56:     "make_headers",
   57:     "proxy_from_url",
   58: )
   59: 
   60: logging.getLogger(__name__).addHandler(NullHandler())
   61: 
   62: 
   63: def add_stderr_logger(level=logging.DEBUG):
   64:     """
   65:     Helper for quickly adding a StreamHandler to the logger. Useful for
   66:     debugging.
   67: 
   68:     Returns the handler after adding it.
   69:     """
   70:     # This method needs to be in this __init__.py to get the __name__ correct
   71:     # even if urllib3 is vendored within another package.
   72:     logger = logging.getLogger(__name__)
   73:     handler = logging.StreamHandler()
   74:     handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
   75:     logger.addHandler(handler)
   76:     logger.setLevel(level)
   77:     logger.debug("Added a stderr logging handler to logger: %s", __name__)
   78:     return handler
   79: 
   80: 
   81: # ... Clean up.
   82: del NullHandler
   83: 
   84: 
   85: # All warning filters *must* be appended unless you're really certain that they
   86: # shouldn't be: otherwise, it's very hard for users to use most Python
   87: # mechanisms to silence them.
   88: # SecurityWarning's always go off by default.
   89: warnings.simplefilter("always", exceptions.SecurityWarning, append=True)
   90: # SubjectAltNameWarning's should go off once per host
   91: warnings.simplefilter("default", exceptions.SubjectAltNameWarning, append=True)
   92: # InsecurePlatformWarning's don't vary between requests, so we keep it default.
   93: warnings.simplefilter("default", exceptions.InsecurePlatformWarning, append=True)
   94: # SNIMissingWarnings should go off only once.
   95: warnings.simplefilter("default", exceptions.SNIMissingWarning, append=True)
   96: 
   97: 
   98: def disable_warnings(category=exceptions.HTTPWarning):
   99:     """
  100:     Helper for quickly disabling all urllib3 warnings.
  101:     """
  102:     warnings.simplefilter("ignore", category)
