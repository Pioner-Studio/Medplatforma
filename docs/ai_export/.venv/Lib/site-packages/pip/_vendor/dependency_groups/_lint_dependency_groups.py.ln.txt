    1: from __future__ import annotations
    2: 
    3: import argparse
    4: import sys
    5: 
    6: from ._implementation import DependencyGroupResolver
    7: from ._toml_compat import tomllib
    8: 
    9: 
   10: def main(*, argv: list[str] | None = None) -> None:
   11:     if tomllib is None:
   12:         print(
   13:             "Usage error: dependency-groups CLI requires tomli or Python 3.11+",
   14:             file=sys.stderr,
   15:         )
   16:         raise SystemExit(2)
   17: 
   18:     parser = argparse.ArgumentParser(
   19:         description=(
   20:             "Lint Dependency Groups for validity. "
   21:             "This will eagerly load and check all of your Dependency Groups."
   22:         )
   23:     )
   24:     parser.add_argument(
   25:         "-f",
   26:         "--pyproject-file",
   27:         default="pyproject.toml",
   28:         help="The pyproject.toml file. Defaults to trying in the current directory.",
   29:     )
   30:     args = parser.parse_args(argv if argv is not None else sys.argv[1:])
   31: 
   32:     with open(args.pyproject_file, "rb") as fp:
   33:         pyproject = tomllib.load(fp)
   34:     dependency_groups_raw = pyproject.get("dependency-groups", {})
   35: 
   36:     errors: list[str] = []
   37:     try:
   38:         resolver = DependencyGroupResolver(dependency_groups_raw)
   39:     except (ValueError, TypeError) as e:
   40:         errors.append(f"{type(e).__name__}: {e}")
   41:     else:
   42:         for groupname in resolver.dependency_groups:
   43:             try:
   44:                 resolver.resolve(groupname)
   45:             except (LookupError, ValueError, TypeError) as e:
   46:                 errors.append(f"{type(e).__name__}: {e}")
   47: 
   48:     if errors:
   49:         print("errors encountered while examining dependency groups:")
   50:         for msg in errors:
   51:             print(f"  {msg}")
   52:         sys.exit(1)
   53:     else:
   54:         print("ok")
   55:         sys.exit(0)
   56: 
   57: 
   58: if __name__ == "__main__":
   59:     main()
