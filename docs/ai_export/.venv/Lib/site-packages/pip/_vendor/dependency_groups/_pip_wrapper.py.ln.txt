    1: from __future__ import annotations
    2: 
    3: import argparse
    4: import subprocess
    5: import sys
    6: 
    7: from ._implementation import DependencyGroupResolver
    8: from ._toml_compat import tomllib
    9: 
   10: 
   11: def _invoke_pip(deps: list[str]) -> None:
   12:     subprocess.check_call([sys.executable, "-m", "pip", "install", *deps])
   13: 
   14: 
   15: def main(*, argv: list[str] | None = None) -> None:
   16:     if tomllib is None:
   17:         print(
   18:             "Usage error: dependency-groups CLI requires tomli or Python 3.11+",
   19:             file=sys.stderr,
   20:         )
   21:         raise SystemExit(2)
   22: 
   23:     parser = argparse.ArgumentParser(description="Install Dependency Groups.")
   24:     parser.add_argument(
   25:         "DEPENDENCY_GROUP", nargs="+", help="The dependency groups to install."
   26:     )
   27:     parser.add_argument(
   28:         "-f",
   29:         "--pyproject-file",
   30:         default="pyproject.toml",
   31:         help="The pyproject.toml file. Defaults to trying in the current directory.",
   32:     )
   33:     args = parser.parse_args(argv if argv is not None else sys.argv[1:])
   34: 
   35:     with open(args.pyproject_file, "rb") as fp:
   36:         pyproject = tomllib.load(fp)
   37:     dependency_groups_raw = pyproject.get("dependency-groups", {})
   38: 
   39:     errors: list[str] = []
   40:     resolved: list[str] = []
   41:     try:
   42:         resolver = DependencyGroupResolver(dependency_groups_raw)
   43:     except (ValueError, TypeError) as e:
   44:         errors.append(f"{type(e).__name__}: {e}")
   45:     else:
   46:         for groupname in args.DEPENDENCY_GROUP:
   47:             try:
   48:                 resolved.extend(str(r) for r in resolver.resolve(groupname))
   49:             except (LookupError, ValueError, TypeError) as e:
   50:                 errors.append(f"{type(e).__name__}: {e}")
   51: 
   52:     if errors:
   53:         print("errors encountered while examining dependency groups:")
   54:         for msg in errors:
   55:             print(f"  {msg}")
   56:         sys.exit(1)
   57: 
   58:     _invoke_pip(resolved)
   59: 
   60: 
   61: if __name__ == "__main__":
   62:     main()
