    1: import argparse
    2: import sys
    3: 
    4: from ._implementation import resolve
    5: from ._toml_compat import tomllib
    6: 
    7: 
    8: def main() -> None:
    9:     if tomllib is None:
   10:         print(
   11:             "Usage error: dependency-groups CLI requires tomli or Python 3.11+",
   12:             file=sys.stderr,
   13:         )
   14:         raise SystemExit(2)
   15: 
   16:     parser = argparse.ArgumentParser(
   17:         description=(
   18:             "A dependency-groups CLI. Prints out a resolved group, newline-delimited."
   19:         )
   20:     )
   21:     parser.add_argument(
   22:         "GROUP_NAME", nargs="*", help="The dependency group(s) to resolve."
   23:     )
   24:     parser.add_argument(
   25:         "-f",
   26:         "--pyproject-file",
   27:         default="pyproject.toml",
   28:         help="The pyproject.toml file. Defaults to trying in the current directory.",
   29:     )
   30:     parser.add_argument(
   31:         "-o",
   32:         "--output",
   33:         help="An output file. Defaults to stdout.",
   34:     )
   35:     parser.add_argument(
   36:         "-l",
   37:         "--list",
   38:         action="store_true",
   39:         help="List the available dependency groups",
   40:     )
   41:     args = parser.parse_args()
   42: 
   43:     with open(args.pyproject_file, "rb") as fp:
   44:         pyproject = tomllib.load(fp)
   45: 
   46:     dependency_groups_raw = pyproject.get("dependency-groups", {})
   47: 
   48:     if args.list:
   49:         print(*dependency_groups_raw.keys())
   50:         return
   51:     if not args.GROUP_NAME:
   52:         print("A GROUP_NAME is required", file=sys.stderr)
   53:         raise SystemExit(3)
   54: 
   55:     content = "\n".join(resolve(dependency_groups_raw, *args.GROUP_NAME))
   56: 
   57:     if args.output is None or args.output == "-":
   58:         print(content)
   59:     else:
   60:         with open(args.output, "w", encoding="utf-8") as fp:
   61:             print(content, file=fp)
   62: 
   63: 
   64: if __name__ == "__main__":
   65:     main()
