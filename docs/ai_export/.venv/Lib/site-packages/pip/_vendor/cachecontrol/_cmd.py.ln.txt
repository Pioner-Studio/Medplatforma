    1: # SPDX-FileCopyrightText: 2015 Eric Larson
    2: #
    3: # SPDX-License-Identifier: Apache-2.0
    4: from __future__ import annotations
    5: 
    6: import logging
    7: from argparse import ArgumentParser
    8: from typing import TYPE_CHECKING
    9: 
   10: from pip._vendor import requests
   11: 
   12: from pip._vendor.cachecontrol.adapter import CacheControlAdapter
   13: from pip._vendor.cachecontrol.cache import DictCache
   14: from pip._vendor.cachecontrol.controller import logger
   15: 
   16: if TYPE_CHECKING:
   17:     from argparse import Namespace
   18: 
   19:     from pip._vendor.cachecontrol.controller import CacheController
   20: 
   21: 
   22: def setup_logging() -> None:
   23:     logger.setLevel(logging.DEBUG)
   24:     handler = logging.StreamHandler()
   25:     logger.addHandler(handler)
   26: 
   27: 
   28: def get_session() -> requests.Session:
   29:     adapter = CacheControlAdapter(
   30:         DictCache(), cache_etags=True, serializer=None, heuristic=None
   31:     )
   32:     sess = requests.Session()
   33:     sess.mount("http://", adapter)
   34:     sess.mount("https://", adapter)
   35: 
   36:     sess.cache_controller = adapter.controller  # type: ignore[attr-defined]
   37:     return sess
   38: 
   39: 
   40: def get_args() -> Namespace:
   41:     parser = ArgumentParser()
   42:     parser.add_argument("url", help="The URL to try and cache")
   43:     return parser.parse_args()
   44: 
   45: 
   46: def main() -> None:
   47:     args = get_args()
   48:     sess = get_session()
   49: 
   50:     # Make a request to get a response
   51:     resp = sess.get(args.url)
   52: 
   53:     # Turn on logging
   54:     setup_logging()
   55: 
   56:     # try setting the cache
   57:     cache_controller: CacheController = (
   58:         sess.cache_controller  # type: ignore[attr-defined]
   59:     )
   60:     cache_controller.cache_response(resp.request, resp.raw)
   61: 
   62:     # Now try to get it
   63:     if cache_controller.cached_request(resp.request):
   64:         print("Cached!")
   65:     else:
   66:         print("Not cached :(")
   67: 
   68: 
   69: if __name__ == "__main__":
   70:     main()
