    1: """Android."""
    2: 
    3: from __future__ import annotations
    4: 
    5: import os
    6: import re
    7: import sys
    8: from functools import lru_cache
    9: from typing import TYPE_CHECKING, cast
   10: 
   11: from .api import PlatformDirsABC
   12: 
   13: 
   14: class Android(PlatformDirsABC):
   15:     """
   16:     Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.
   17: 
   18:     Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version
   19:     <platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.
   20: 
   21:     """
   22: 
   23:     @property
   24:     def user_data_dir(self) -> str:
   25:         """:return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``"""
   26:         return self._append_app_name_and_version(cast("str", _android_folder()), "files")
   27: 
   28:     @property
   29:     def site_data_dir(self) -> str:
   30:         """:return: data directory shared by users, same as `user_data_dir`"""
   31:         return self.user_data_dir
   32: 
   33:     @property
   34:     def user_config_dir(self) -> str:
   35:         """
   36:         :return: config directory tied to the user, e.g. \
   37:         ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``
   38:         """
   39:         return self._append_app_name_and_version(cast("str", _android_folder()), "shared_prefs")
   40: 
   41:     @property
   42:     def site_config_dir(self) -> str:
   43:         """:return: config directory shared by the users, same as `user_config_dir`"""
   44:         return self.user_config_dir
   45: 
   46:     @property
   47:     def user_cache_dir(self) -> str:
   48:         """:return: cache directory tied to the user, e.g.,``/data/user/<userid>/<packagename>/cache/<AppName>``"""
   49:         return self._append_app_name_and_version(cast("str", _android_folder()), "cache")
   50: 
   51:     @property
   52:     def site_cache_dir(self) -> str:
   53:         """:return: cache directory shared by users, same as `user_cache_dir`"""
   54:         return self.user_cache_dir
   55: 
   56:     @property
   57:     def user_state_dir(self) -> str:
   58:         """:return: state directory tied to the user, same as `user_data_dir`"""
   59:         return self.user_data_dir
   60: 
   61:     @property
   62:     def user_log_dir(self) -> str:
   63:         """
   64:         :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,
   65:           e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``
   66:         """
   67:         path = self.user_cache_dir
   68:         if self.opinion:
   69:             path = os.path.join(path, "log")  # noqa: PTH118
   70:         return path
   71: 
   72:     @property
   73:     def user_documents_dir(self) -> str:
   74:         """:return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``"""
   75:         return _android_documents_folder()
   76: 
   77:     @property
   78:     def user_downloads_dir(self) -> str:
   79:         """:return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``"""
   80:         return _android_downloads_folder()
   81: 
   82:     @property
   83:     def user_pictures_dir(self) -> str:
   84:         """:return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``"""
   85:         return _android_pictures_folder()
   86: 
   87:     @property
   88:     def user_videos_dir(self) -> str:
   89:         """:return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``"""
   90:         return _android_videos_folder()
   91: 
   92:     @property
   93:     def user_music_dir(self) -> str:
   94:         """:return: music directory tied to the user e.g. ``/storage/emulated/0/Music``"""
   95:         return _android_music_folder()
   96: 
   97:     @property
   98:     def user_desktop_dir(self) -> str:
   99:         """:return: desktop directory tied to the user e.g. ``/storage/emulated/0/Desktop``"""
  100:         return "/storage/emulated/0/Desktop"
  101: 
  102:     @property
  103:     def user_runtime_dir(self) -> str:
  104:         """
  105:         :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,
  106:           e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``
  107:         """
  108:         path = self.user_cache_dir
  109:         if self.opinion:
  110:             path = os.path.join(path, "tmp")  # noqa: PTH118
  111:         return path
  112: 
  113:     @property
  114:     def site_runtime_dir(self) -> str:
  115:         """:return: runtime directory shared by users, same as `user_runtime_dir`"""
  116:         return self.user_runtime_dir
  117: 
  118: 
  119: @lru_cache(maxsize=1)
  120: def _android_folder() -> str | None:  # noqa: C901
  121:     """:return: base folder for the Android OS or None if it cannot be found"""
  122:     result: str | None = None
  123:     # type checker isn't happy with our "import android", just don't do this when type checking see
  124:     # https://stackoverflow.com/a/61394121
  125:     if not TYPE_CHECKING:
  126:         try:
  127:             # First try to get a path to android app using python4android (if available)...
  128:             from android import mActivity  # noqa: PLC0415
  129: 
  130:             context = cast("android.content.Context", mActivity.getApplicationContext())  # noqa: F821
  131:             result = context.getFilesDir().getParentFile().getAbsolutePath()
  132:         except Exception:  # noqa: BLE001
  133:             result = None
  134:     if result is None:
  135:         try:
  136:             # ...and fall back to using plain pyjnius, if python4android isn't available or doesn't deliver any useful
  137:             # result...
  138:             from jnius import autoclass  # noqa: PLC0415
  139: 
  140:             context = autoclass("android.content.Context")
  141:             result = context.getFilesDir().getParentFile().getAbsolutePath()
  142:         except Exception:  # noqa: BLE001
  143:             result = None
  144:     if result is None:
  145:         # and if that fails, too, find an android folder looking at path on the sys.path
  146:         # warning: only works for apps installed under /data, not adopted storage etc.
  147:         pattern = re.compile(r"/data/(data|user/\d+)/(.+)/files")
  148:         for path in sys.path:
  149:             if pattern.match(path):
  150:                 result = path.split("/files")[0]
  151:                 break
  152:         else:
  153:             result = None
  154:     if result is None:
  155:         # one last try: find an android folder looking at path on the sys.path taking adopted storage paths into
  156:         # account
  157:         pattern = re.compile(r"/mnt/expand/[a-fA-F0-9-]{36}/(data|user/\d+)/(.+)/files")
  158:         for path in sys.path:
  159:             if pattern.match(path):
  160:                 result = path.split("/files")[0]
  161:                 break
  162:         else:
  163:             result = None
  164:     return result
  165: 
  166: 
  167: @lru_cache(maxsize=1)
  168: def _android_documents_folder() -> str:
  169:     """:return: documents folder for the Android OS"""
  170:     # Get directories with pyjnius
  171:     try:
  172:         from jnius import autoclass  # noqa: PLC0415
  173: 
  174:         context = autoclass("android.content.Context")
  175:         environment = autoclass("android.os.Environment")
  176:         documents_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOCUMENTS).getAbsolutePath()
  177:     except Exception:  # noqa: BLE001
  178:         documents_dir = "/storage/emulated/0/Documents"
  179: 
  180:     return documents_dir
  181: 
  182: 
  183: @lru_cache(maxsize=1)
  184: def _android_downloads_folder() -> str:
  185:     """:return: downloads folder for the Android OS"""
  186:     # Get directories with pyjnius
  187:     try:
  188:         from jnius import autoclass  # noqa: PLC0415
  189: 
  190:         context = autoclass("android.content.Context")
  191:         environment = autoclass("android.os.Environment")
  192:         downloads_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOWNLOADS).getAbsolutePath()
  193:     except Exception:  # noqa: BLE001
  194:         downloads_dir = "/storage/emulated/0/Downloads"
  195: 
  196:     return downloads_dir
  197: 
  198: 
  199: @lru_cache(maxsize=1)
  200: def _android_pictures_folder() -> str:
  201:     """:return: pictures folder for the Android OS"""
  202:     # Get directories with pyjnius
  203:     try:
  204:         from jnius import autoclass  # noqa: PLC0415
  205: 
  206:         context = autoclass("android.content.Context")
  207:         environment = autoclass("android.os.Environment")
  208:         pictures_dir: str = context.getExternalFilesDir(environment.DIRECTORY_PICTURES).getAbsolutePath()
  209:     except Exception:  # noqa: BLE001
  210:         pictures_dir = "/storage/emulated/0/Pictures"
  211: 
  212:     return pictures_dir
  213: 
  214: 
  215: @lru_cache(maxsize=1)
  216: def _android_videos_folder() -> str:
  217:     """:return: videos folder for the Android OS"""
  218:     # Get directories with pyjnius
  219:     try:
  220:         from jnius import autoclass  # noqa: PLC0415
  221: 
  222:         context = autoclass("android.content.Context")
  223:         environment = autoclass("android.os.Environment")
  224:         videos_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DCIM).getAbsolutePath()
  225:     except Exception:  # noqa: BLE001
  226:         videos_dir = "/storage/emulated/0/DCIM/Camera"
  227: 
  228:     return videos_dir
  229: 
  230: 
  231: @lru_cache(maxsize=1)
  232: def _android_music_folder() -> str:
  233:     """:return: music folder for the Android OS"""
  234:     # Get directories with pyjnius
  235:     try:
  236:         from jnius import autoclass  # noqa: PLC0415
  237: 
  238:         context = autoclass("android.content.Context")
  239:         environment = autoclass("android.os.Environment")
  240:         music_dir: str = context.getExternalFilesDir(environment.DIRECTORY_MUSIC).getAbsolutePath()
  241:     except Exception:  # noqa: BLE001
  242:         music_dir = "/storage/emulated/0/Music"
  243: 
  244:     return music_dir
  245: 
  246: 
  247: __all__ = [
  248:     "Android",
  249: ]
