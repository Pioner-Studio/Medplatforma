    1: """Module containing bug report helper(s)."""
    2: 
    3: import json
    4: import platform
    5: import ssl
    6: import sys
    7: 
    8: from pip._vendor import idna
    9: from pip._vendor import urllib3
   10: 
   11: from . import __version__ as requests_version
   12: 
   13: charset_normalizer = None
   14: chardet = None
   15: 
   16: try:
   17:     from pip._vendor.urllib3.contrib import pyopenssl
   18: except ImportError:
   19:     pyopenssl = None
   20:     OpenSSL = None
   21:     cryptography = None
   22: else:
   23:     import cryptography
   24:     import OpenSSL
   25: 
   26: 
   27: def _implementation():
   28:     """Return a dict with the Python implementation and version.
   29: 
   30:     Provide both the name and the version of the Python implementation
   31:     currently running. For example, on CPython 3.10.3 it will return
   32:     {'name': 'CPython', 'version': '3.10.3'}.
   33: 
   34:     This function works best on CPython and PyPy: in particular, it probably
   35:     doesn't work for Jython or IronPython. Future investigation should be done
   36:     to work out the correct shape of the code for those platforms.
   37:     """
   38:     implementation = platform.python_implementation()
   39: 
   40:     if implementation == "CPython":
   41:         implementation_version = platform.python_version()
   42:     elif implementation == "PyPy":
   43:         implementation_version = "{}.{}.{}".format(
   44:             sys.pypy_version_info.major,
   45:             sys.pypy_version_info.minor,
   46:             sys.pypy_version_info.micro,
   47:         )
   48:         if sys.pypy_version_info.releaselevel != "final":
   49:             implementation_version = "".join(
   50:                 [implementation_version, sys.pypy_version_info.releaselevel]
   51:             )
   52:     elif implementation == "Jython":
   53:         implementation_version = platform.python_version()  # Complete Guess
   54:     elif implementation == "IronPython":
   55:         implementation_version = platform.python_version()  # Complete Guess
   56:     else:
   57:         implementation_version = "Unknown"
   58: 
   59:     return {"name": implementation, "version": implementation_version}
   60: 
   61: 
   62: def info():
   63:     """Generate information for a bug report."""
   64:     try:
   65:         platform_info = {
   66:             "system": platform.system(),
   67:             "release": platform.release(),
   68:         }
   69:     except OSError:
   70:         platform_info = {
   71:             "system": "Unknown",
   72:             "release": "Unknown",
   73:         }
   74: 
   75:     implementation_info = _implementation()
   76:     urllib3_info = {"version": urllib3.__version__}
   77:     charset_normalizer_info = {"version": None}
   78:     chardet_info = {"version": None}
   79:     if charset_normalizer:
   80:         charset_normalizer_info = {"version": charset_normalizer.__version__}
   81:     if chardet:
   82:         chardet_info = {"version": chardet.__version__}
   83: 
   84:     pyopenssl_info = {
   85:         "version": None,
   86:         "openssl_version": "",
   87:     }
   88:     if OpenSSL:
   89:         pyopenssl_info = {
   90:             "version": OpenSSL.__version__,
   91:             "openssl_version": f"{OpenSSL.SSL.OPENSSL_VERSION_NUMBER:x}",
   92:         }
   93:     cryptography_info = {
   94:         "version": getattr(cryptography, "__version__", ""),
   95:     }
   96:     idna_info = {
   97:         "version": getattr(idna, "__version__", ""),
   98:     }
   99: 
  100:     system_ssl = ssl.OPENSSL_VERSION_NUMBER
  101:     system_ssl_info = {"version": f"{system_ssl:x}" if system_ssl is not None else ""}
  102: 
  103:     return {
  104:         "platform": platform_info,
  105:         "implementation": implementation_info,
  106:         "system_ssl": system_ssl_info,
  107:         "using_pyopenssl": pyopenssl is not None,
  108:         "using_charset_normalizer": chardet is None,
  109:         "pyOpenSSL": pyopenssl_info,
  110:         "urllib3": urllib3_info,
  111:         "chardet": chardet_info,
  112:         "charset_normalizer": charset_normalizer_info,
  113:         "cryptography": cryptography_info,
  114:         "idna": idna_info,
  115:         "requests": {
  116:             "version": requests_version,
  117:         },
  118:     }
  119: 
  120: 
  121: def main():
  122:     """Pretty-print the bug information as JSON."""
  123:     print(json.dumps(info(), sort_keys=True, indent=2))
  124: 
  125: 
  126: if __name__ == "__main__":
  127:     main()
