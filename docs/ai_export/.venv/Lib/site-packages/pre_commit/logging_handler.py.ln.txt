    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import logging
    5: from collections.abc import Generator
    6: 
    7: from pre_commit import color
    8: from pre_commit import output
    9: 
   10: logger = logging.getLogger('pre_commit')
   11: 
   12: LOG_LEVEL_COLORS = {
   13:     'DEBUG': '',
   14:     'INFO': '',
   15:     'WARNING': color.YELLOW,
   16:     'ERROR': color.RED,
   17: }
   18: 
   19: 
   20: class LoggingHandler(logging.Handler):
   21:     def __init__(self, use_color: bool) -> None:
   22:         super().__init__()
   23:         self.use_color = use_color
   24: 
   25:     def emit(self, record: logging.LogRecord) -> None:
   26:         level_msg = color.format_color(
   27:             f'[{record.levelname}]',
   28:             LOG_LEVEL_COLORS[record.levelname],
   29:             self.use_color,
   30:         )
   31:         output.write_line(f'{level_msg} {record.getMessage()}')
   32: 
   33: 
   34: @contextlib.contextmanager
   35: def logging_handler(use_color: bool) -> Generator[None]:
   36:     handler = LoggingHandler(use_color)
   37:     logger.addHandler(handler)
   38:     logger.setLevel(logging.INFO)
   39:     try:
   40:         yield
   41:     finally:
   42:         logger.removeHandler(handler)
