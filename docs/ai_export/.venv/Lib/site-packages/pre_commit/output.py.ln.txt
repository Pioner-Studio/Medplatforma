    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import sys
    5: from typing import Any
    6: from typing import IO
    7: 
    8: 
    9: def write(s: str, stream: IO[bytes] = sys.stdout.buffer) -> None:
   10:     stream.write(s.encode())
   11:     stream.flush()
   12: 
   13: 
   14: def write_line_b(
   15:         s: bytes | None = None,
   16:         stream: IO[bytes] = sys.stdout.buffer,
   17:         logfile_name: str | None = None,
   18: ) -> None:
   19:     with contextlib.ExitStack() as exit_stack:
   20:         output_streams = [stream]
   21:         if logfile_name:
   22:             stream = exit_stack.enter_context(open(logfile_name, 'ab'))
   23:             output_streams.append(stream)
   24: 
   25:         for output_stream in output_streams:
   26:             if s is not None:
   27:                 output_stream.write(s)
   28:             output_stream.write(b'\n')
   29:             output_stream.flush()
   30: 
   31: 
   32: def write_line(s: str | None = None, **kwargs: Any) -> None:
   33:     write_line_b(s.encode() if s is not None else s, **kwargs)
