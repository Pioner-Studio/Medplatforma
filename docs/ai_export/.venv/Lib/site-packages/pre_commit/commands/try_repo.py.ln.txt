    1: from __future__ import annotations
    2: 
    3: import argparse
    4: import logging
    5: import os.path
    6: import tempfile
    7: 
    8: import pre_commit.constants as C
    9: from pre_commit import git
   10: from pre_commit import output
   11: from pre_commit.clientlib import load_manifest
   12: from pre_commit.commands.run import run
   13: from pre_commit.store import Store
   14: from pre_commit.util import cmd_output_b
   15: from pre_commit.xargs import xargs
   16: from pre_commit.yaml import yaml_dump
   17: 
   18: logger = logging.getLogger(__name__)
   19: 
   20: 
   21: def _repo_ref(tmpdir: str, repo: str, ref: str | None) -> tuple[str, str]:
   22:     # if `ref` is explicitly passed, use it
   23:     if ref is not None:
   24:         return repo, ref
   25: 
   26:     ref = git.head_rev(repo)
   27:     # if it exists on disk, we'll try and clone it with the local changes
   28:     if os.path.exists(repo) and git.has_diff('HEAD', repo=repo):
   29:         logger.warning('Creating temporary repo with uncommitted changes...')
   30: 
   31:         shadow = os.path.join(tmpdir, 'shadow-repo')
   32:         cmd_output_b('git', 'clone', repo, shadow)
   33:         cmd_output_b('git', 'checkout', ref, '-b', '_pc_tmp', cwd=shadow)
   34: 
   35:         idx = git.git_path('index', repo=shadow)
   36:         objs = git.git_path('objects', repo=shadow)
   37:         env = dict(os.environ, GIT_INDEX_FILE=idx, GIT_OBJECT_DIRECTORY=objs)
   38: 
   39:         staged_files = git.get_staged_files(cwd=repo)
   40:         if staged_files:
   41:             xargs(('git', 'add', '--'), staged_files, cwd=repo, env=env)
   42: 
   43:         cmd_output_b('git', 'add', '-u', cwd=repo, env=env)
   44:         git.commit(repo=shadow)
   45: 
   46:         return shadow, git.head_rev(shadow)
   47:     else:
   48:         return repo, ref
   49: 
   50: 
   51: def try_repo(args: argparse.Namespace) -> int:
   52:     with tempfile.TemporaryDirectory() as tempdir:
   53:         repo, ref = _repo_ref(tempdir, args.repo, args.ref)
   54: 
   55:         store = Store(tempdir)
   56:         if args.hook:
   57:             hooks = [{'id': args.hook}]
   58:         else:
   59:             repo_path = store.clone(repo, ref)
   60:             manifest = load_manifest(os.path.join(repo_path, C.MANIFEST_FILE))
   61:             manifest = sorted(manifest, key=lambda hook: hook['id'])
   62:             hooks = [{'id': hook['id']} for hook in manifest]
   63: 
   64:         config = {'repos': [{'repo': repo, 'rev': ref, 'hooks': hooks}]}
   65:         config_s = yaml_dump(config)
   66: 
   67:         config_filename = os.path.join(tempdir, C.CONFIG_FILE)
   68:         with open(config_filename, 'w') as cfg:
   69:             cfg.write(config_s)
   70: 
   71:         output.write_line('=' * 79)
   72:         output.write_line('Using config:')
   73:         output.write_line('=' * 79)
   74:         output.write(config_s)
   75:         output.write_line('=' * 79)
   76: 
   77:         return run(config_filename, store, args)
