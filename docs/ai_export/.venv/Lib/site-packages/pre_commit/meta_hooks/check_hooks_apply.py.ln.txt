    1: from __future__ import annotations
    2: 
    3: import argparse
    4: from collections.abc import Sequence
    5: 
    6: import pre_commit.constants as C
    7: from pre_commit import git
    8: from pre_commit.clientlib import load_config
    9: from pre_commit.commands.run import Classifier
   10: from pre_commit.repository import all_hooks
   11: from pre_commit.store import Store
   12: 
   13: 
   14: def check_all_hooks_match_files(config_file: str) -> int:
   15:     config = load_config(config_file)
   16:     classifier = Classifier.from_config(
   17:         git.get_all_files(), config['files'], config['exclude'],
   18:     )
   19:     retv = 0
   20: 
   21:     for hook in all_hooks(config, Store()):
   22:         if hook.always_run or hook.language == 'fail':
   23:             continue
   24:         elif not any(classifier.filenames_for_hook(hook)):
   25:             print(f'{hook.id} does not apply to this repository')
   26:             retv = 1
   27: 
   28:     return retv
   29: 
   30: 
   31: def main(argv: Sequence[str] | None = None) -> int:
   32:     parser = argparse.ArgumentParser()
   33:     parser.add_argument('filenames', nargs='*', default=[C.CONFIG_FILE])
   34:     args = parser.parse_args(argv)
   35: 
   36:     retv = 0
   37:     for filename in args.filenames:
   38:         retv |= check_all_hooks_match_files(filename)
   39:     return retv
   40: 
   41: 
   42: if __name__ == '__main__':
   43:     raise SystemExit(main())
