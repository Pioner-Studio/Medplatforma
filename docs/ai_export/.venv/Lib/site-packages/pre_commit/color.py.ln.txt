    1: from __future__ import annotations
    2: 
    3: import argparse
    4: import os
    5: import sys
    6: 
    7: if sys.platform == 'win32':  # pragma: no cover (windows)
    8:     def _enable() -> None:
    9:         from ctypes import POINTER
   10:         from ctypes import windll
   11:         from ctypes import WinError
   12:         from ctypes import WINFUNCTYPE
   13:         from ctypes.wintypes import BOOL
   14:         from ctypes.wintypes import DWORD
   15:         from ctypes.wintypes import HANDLE
   16: 
   17:         STD_ERROR_HANDLE = -12
   18:         ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4
   19: 
   20:         def bool_errcheck(result, func, args):
   21:             if not result:
   22:                 raise WinError()
   23:             return args
   24: 
   25:         GetStdHandle = WINFUNCTYPE(HANDLE, DWORD)(
   26:             ('GetStdHandle', windll.kernel32), ((1, 'nStdHandle'),),
   27:         )
   28: 
   29:         GetConsoleMode = WINFUNCTYPE(BOOL, HANDLE, POINTER(DWORD))(
   30:             ('GetConsoleMode', windll.kernel32),
   31:             ((1, 'hConsoleHandle'), (2, 'lpMode')),
   32:         )
   33:         GetConsoleMode.errcheck = bool_errcheck
   34: 
   35:         SetConsoleMode = WINFUNCTYPE(BOOL, HANDLE, DWORD)(
   36:             ('SetConsoleMode', windll.kernel32),
   37:             ((1, 'hConsoleHandle'), (1, 'dwMode')),
   38:         )
   39:         SetConsoleMode.errcheck = bool_errcheck
   40: 
   41:         # As of Windows 10, the Windows console supports (some) ANSI escape
   42:         # sequences, but it needs to be enabled using `SetConsoleMode` first.
   43:         #
   44:         # More info on the escape sequences supported:
   45:         # https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx
   46:         stderr = GetStdHandle(STD_ERROR_HANDLE)
   47:         flags = GetConsoleMode(stderr)
   48:         SetConsoleMode(stderr, flags | ENABLE_VIRTUAL_TERMINAL_PROCESSING)
   49: 
   50:     try:
   51:         _enable()
   52:     except OSError:
   53:         terminal_supports_color = False
   54:     else:
   55:         terminal_supports_color = True
   56: else:  # pragma: win32 no cover
   57:     terminal_supports_color = True
   58: 
   59: RED = '\033[41m'
   60: GREEN = '\033[42m'
   61: YELLOW = '\033[43;30m'
   62: TURQUOISE = '\033[46;30m'
   63: SUBTLE = '\033[2m'
   64: NORMAL = '\033[m'
   65: 
   66: 
   67: def format_color(text: str, color: str, use_color_setting: bool) -> str:
   68:     """Format text with color.
   69: 
   70:     Args:
   71:         text - Text to be formatted with color if `use_color`
   72:         color - The color start string
   73:         use_color_setting - Whether or not to color
   74:     """
   75:     if use_color_setting:
   76:         return f'{color}{text}{NORMAL}'
   77:     else:
   78:         return text
   79: 
   80: 
   81: COLOR_CHOICES = ('auto', 'always', 'never')
   82: 
   83: 
   84: def use_color(setting: str) -> bool:
   85:     """Choose whether to use color based on the command argument.
   86: 
   87:     Args:
   88:         setting - Either `auto`, `always`, or `never`
   89:     """
   90:     if setting not in COLOR_CHOICES:
   91:         raise ValueError(setting)
   92: 
   93:     return (
   94:         setting == 'always' or (
   95:             setting == 'auto' and
   96:             sys.stderr.isatty() and
   97:             terminal_supports_color and
   98:             os.getenv('TERM') != 'dumb'
   99:         )
  100:     )
  101: 
  102: 
  103: def add_color_option(parser: argparse.ArgumentParser) -> None:
  104:     parser.add_argument(
  105:         '--color', default=os.environ.get('PRE_COMMIT_COLOR', 'auto'),
  106:         type=use_color,
  107:         metavar='{' + ','.join(COLOR_CHOICES) + '}',
  108:         help='Whether to use color in output.  Defaults to `%(default)s`.',
  109:     )
