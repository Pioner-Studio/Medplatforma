    1: from __future__ import annotations
    2: 
    3: import argparse
    4: import logging
    5: import os
    6: import sys
    7: from collections.abc import Sequence
    8: 
    9: import pre_commit.constants as C
   10: from pre_commit import clientlib
   11: from pre_commit import git
   12: from pre_commit.color import add_color_option
   13: from pre_commit.commands.autoupdate import autoupdate
   14: from pre_commit.commands.clean import clean
   15: from pre_commit.commands.gc import gc
   16: from pre_commit.commands.hook_impl import hook_impl
   17: from pre_commit.commands.init_templatedir import init_templatedir
   18: from pre_commit.commands.install_uninstall import install
   19: from pre_commit.commands.install_uninstall import install_hooks
   20: from pre_commit.commands.install_uninstall import uninstall
   21: from pre_commit.commands.migrate_config import migrate_config
   22: from pre_commit.commands.run import run
   23: from pre_commit.commands.sample_config import sample_config
   24: from pre_commit.commands.try_repo import try_repo
   25: from pre_commit.commands.validate_config import validate_config
   26: from pre_commit.commands.validate_manifest import validate_manifest
   27: from pre_commit.error_handler import error_handler
   28: from pre_commit.logging_handler import logging_handler
   29: from pre_commit.store import Store
   30: 
   31: 
   32: logger = logging.getLogger('pre_commit')
   33: 
   34: # https://github.com/pre-commit/pre-commit/issues/217
   35: # On OSX, making a virtualenv using pyvenv at . causes `virtualenv` and `pip`
   36: # to install packages to the wrong place.  We don't want anything to deal with
   37: # pyvenv
   38: os.environ.pop('__PYVENV_LAUNCHER__', None)
   39: 
   40: # https://github.com/getsentry/snuba/pull/5388
   41: os.environ.pop('PYTHONEXECUTABLE', None)
   42: 
   43: COMMANDS_NO_GIT = {
   44:     'clean', 'gc', 'init-templatedir', 'sample-config',
   45:     'validate-config', 'validate-manifest',
   46: }
   47: 
   48: 
   49: def _add_config_option(parser: argparse.ArgumentParser) -> None:
   50:     parser.add_argument(
   51:         '-c', '--config', default=C.CONFIG_FILE,
   52:         help='Path to alternate config file',
   53:     )
   54: 
   55: 
   56: def _add_hook_type_option(parser: argparse.ArgumentParser) -> None:
   57:     parser.add_argument(
   58:         '-t', '--hook-type',
   59:         choices=clientlib.HOOK_TYPES, action='append', dest='hook_types',
   60:     )
   61: 
   62: 
   63: def _add_run_options(parser: argparse.ArgumentParser) -> None:
   64:     parser.add_argument('hook', nargs='?', help='A single hook-id to run')
   65:     parser.add_argument('--verbose', '-v', action='store_true', default=False)
   66:     mutex_group = parser.add_mutually_exclusive_group(required=False)
   67:     mutex_group.add_argument(
   68:         '--all-files', '-a', action='store_true', default=False,
   69:         help='Run on all the files in the repo.',
   70:     )
   71:     mutex_group.add_argument(
   72:         '--files', nargs='*', default=[],
   73:         help='Specific filenames to run hooks on.',
   74:     )
   75:     parser.add_argument(
   76:         '--show-diff-on-failure', action='store_true',
   77:         help='When hooks fail, run `git diff` directly afterward.',
   78:     )
   79:     parser.add_argument(
   80:         '--hook-stage',
   81:         choices=clientlib.STAGES,
   82:         type=clientlib.transform_stage,
   83:         default='pre-commit',
   84:         help='The stage during which the hook is fired.  One of %(choices)s',
   85:     )
   86:     parser.add_argument(
   87:         '--remote-branch', help='Remote branch ref used by `git push`.',
   88:     )
   89:     parser.add_argument(
   90:         '--local-branch', help='Local branch ref used by `git push`.',
   91:     )
   92:     parser.add_argument(
   93:         '--from-ref', '--source', '-s',
   94:         help=(
   95:             '(for usage with `--to-ref`) -- this option represents the '
   96:             'original ref in a `from_ref...to_ref` diff expression.  '
   97:             'For `pre-push` hooks, this represents the branch you are pushing '
   98:             'to.  '
   99:             'For `post-checkout` hooks, this represents the branch that was '
  100:             'previously checked out.'
  101:         ),
  102:     )
  103:     parser.add_argument(
  104:         '--to-ref', '--origin', '-o',
  105:         help=(
  106:             '(for usage with `--from-ref`) -- this option represents the '
  107:             'destination ref in a `from_ref...to_ref` diff expression.  '
  108:             'For `pre-push` hooks, this represents the branch being pushed.  '
  109:             'For `post-checkout` hooks, this represents the branch that is '
  110:             'now checked out.'
  111:         ),
  112:     )
  113:     parser.add_argument(
  114:         '--pre-rebase-upstream', help=(
  115:             'The upstream from which the series was forked.'
  116:         ),
  117:     )
  118:     parser.add_argument(
  119:         '--pre-rebase-branch', help=(
  120:             'The branch being rebased, and is not set when  '
  121:             'rebasing the current branch.'
  122:         ),
  123:     )
  124:     parser.add_argument(
  125:         '--commit-msg-filename',
  126:         help='Filename to check when running during `commit-msg`',
  127:     )
  128:     parser.add_argument(
  129:         '--prepare-commit-message-source',
  130:         help=(
  131:             'Source of the commit message '
  132:             '(typically the second argument to .git/hooks/prepare-commit-msg)'
  133:         ),
  134:     )
  135:     parser.add_argument(
  136:         '--commit-object-name',
  137:         help=(
  138:             'Commit object name '
  139:             '(typically the third argument to .git/hooks/prepare-commit-msg)'
  140:         ),
  141:     )
  142:     parser.add_argument(
  143:         '--remote-name', help='Remote name used by `git push`.',
  144:     )
  145:     parser.add_argument('--remote-url', help='Remote url used by `git push`.')
  146:     parser.add_argument(
  147:         '--checkout-type',
  148:         help=(
  149:             'Indicates whether the checkout was a branch checkout '
  150:             '(changing branches, flag=1) or a file checkout (retrieving a '
  151:             'file from the index, flag=0).'
  152:         ),
  153:     )
  154:     parser.add_argument(
  155:         '--is-squash-merge',
  156:         help=(
  157:             'During a post-merge hook, indicates whether the merge was a '
  158:             'squash merge'
  159:         ),
  160:     )
  161:     parser.add_argument(
  162:         '--rewrite-command',
  163:         help=(
  164:             'During a post-rewrite hook, specifies the command that invoked '
  165:             'the rewrite'
  166:         ),
  167:     )
  168: 
  169: 
  170: def _adjust_args_and_chdir(args: argparse.Namespace) -> None:
  171:     # `--config` was specified relative to the non-root working directory
  172:     if os.path.exists(args.config):
  173:         args.config = os.path.abspath(args.config)
  174:     if args.command in {'run', 'try-repo'}:
  175:         args.files = [os.path.abspath(filename) for filename in args.files]
  176:         if args.commit_msg_filename is not None:
  177:             args.commit_msg_filename = os.path.abspath(
  178:                 args.commit_msg_filename,
  179:             )
  180:     if args.command == 'try-repo' and os.path.exists(args.repo):
  181:         args.repo = os.path.abspath(args.repo)
  182: 
  183:     toplevel = git.get_root()
  184:     os.chdir(toplevel)
  185: 
  186:     args.config = os.path.relpath(args.config)
  187:     if args.command in {'run', 'try-repo'}:
  188:         args.files = [os.path.relpath(filename) for filename in args.files]
  189:         if args.commit_msg_filename is not None:
  190:             args.commit_msg_filename = os.path.relpath(
  191:                 args.commit_msg_filename,
  192:             )
  193:     if args.command == 'try-repo' and os.path.exists(args.repo):
  194:         args.repo = os.path.relpath(args.repo)
  195: 
  196: 
  197: def main(argv: Sequence[str] | None = None) -> int:
  198:     argv = argv if argv is not None else sys.argv[1:]
  199:     parser = argparse.ArgumentParser(prog='pre-commit')
  200: 
  201:     # https://stackoverflow.com/a/8521644/812183
  202:     parser.add_argument(
  203:         '-V', '--version',
  204:         action='version',
  205:         version=f'%(prog)s {C.VERSION}',
  206:     )
  207: 
  208:     subparsers = parser.add_subparsers(dest='command')
  209: 
  210:     def _add_cmd(name: str, *, help: str) -> argparse.ArgumentParser:
  211:         parser = subparsers.add_parser(name, help=help)
  212:         add_color_option(parser)
  213:         return parser
  214: 
  215:     autoupdate_parser = _add_cmd(
  216:         'autoupdate',
  217:         help="Auto-update pre-commit config to the latest repos' versions.",
  218:     )
  219:     _add_config_option(autoupdate_parser)
  220:     autoupdate_parser.add_argument(
  221:         '--bleeding-edge', action='store_true',
  222:         help=(
  223:             'Update to the bleeding edge of `HEAD` instead of the latest '
  224:             'tagged version (the default behavior).'
  225:         ),
  226:     )
  227:     autoupdate_parser.add_argument(
  228:         '--freeze', action='store_true',
  229:         help='Store "frozen" hashes in `rev` instead of tag names',
  230:     )
  231:     autoupdate_parser.add_argument(
  232:         '--repo', dest='repos', action='append', metavar='REPO', default=[],
  233:         help='Only update this repository -- may be specified multiple times.',
  234:     )
  235:     autoupdate_parser.add_argument(
  236:         '-j', '--jobs', type=int, default=1,
  237:         help='Number of threads to use.  (default %(default)s).',
  238:     )
  239: 
  240:     _add_cmd('clean', help='Clean out pre-commit files.')
  241: 
  242:     _add_cmd('gc', help='Clean unused cached repos.')
  243: 
  244:     init_templatedir_parser = _add_cmd(
  245:         'init-templatedir',
  246:         help=(
  247:             'Install hook script in a directory intended for use with '
  248:             '`git config init.templateDir`.'
  249:         ),
  250:     )
  251:     _add_config_option(init_templatedir_parser)
  252:     init_templatedir_parser.add_argument(
  253:         'directory', help='The directory in which to write the hook script.',
  254:     )
  255:     init_templatedir_parser.add_argument(
  256:         '--no-allow-missing-config',
  257:         action='store_false',
  258:         dest='allow_missing_config',
  259:         help='Assume cloned repos should have a `pre-commit` config.',
  260:     )
  261:     _add_hook_type_option(init_templatedir_parser)
  262: 
  263:     install_parser = _add_cmd('install', help='Install the pre-commit script.')
  264:     _add_config_option(install_parser)
  265:     install_parser.add_argument(
  266:         '-f', '--overwrite', action='store_true',
  267:         help='Overwrite existing hooks / remove migration mode.',
  268:     )
  269:     install_parser.add_argument(
  270:         '--install-hooks', action='store_true',
  271:         help=(
  272:             'Whether to install hook environments for all environments '
  273:             'in the config file.'
  274:         ),
  275:     )
  276:     _add_hook_type_option(install_parser)
  277:     install_parser.add_argument(
  278:         '--allow-missing-config', action='store_true', default=False,
  279:         help=(
  280:             'Whether to allow a missing `pre-commit` configuration file '
  281:             'or exit with a failure code.'
  282:         ),
  283:     )
  284: 
  285:     install_hooks_parser = _add_cmd(
  286:         'install-hooks',
  287:         help=(
  288:             'Install hook environments for all environments in the config '
  289:             'file.  You may find `pre-commit install --install-hooks` more '
  290:             'useful.'
  291:         ),
  292:     )
  293:     _add_config_option(install_hooks_parser)
  294: 
  295:     migrate_config_parser = _add_cmd(
  296:         'migrate-config',
  297:         help='Migrate list configuration to new map configuration.',
  298:     )
  299:     _add_config_option(migrate_config_parser)
  300: 
  301:     run_parser = _add_cmd('run', help='Run hooks.')
  302:     _add_config_option(run_parser)
  303:     _add_run_options(run_parser)
  304: 
  305:     _add_cmd('sample-config', help=f'Produce a sample {C.CONFIG_FILE} file')
  306: 
  307:     try_repo_parser = _add_cmd(
  308:         'try-repo',
  309:         help='Try the hooks in a repository, useful for developing new hooks.',
  310:     )
  311:     _add_config_option(try_repo_parser)
  312:     try_repo_parser.add_argument(
  313:         'repo', help='Repository to source hooks from.',
  314:     )
  315:     try_repo_parser.add_argument(
  316:         '--ref', '--rev',
  317:         help=(
  318:             'Manually select a rev to run against, otherwise the `HEAD` '
  319:             'revision will be used.'
  320:         ),
  321:     )
  322:     _add_run_options(try_repo_parser)
  323: 
  324:     uninstall_parser = _add_cmd(
  325:         'uninstall', help='Uninstall the pre-commit script.',
  326:     )
  327:     _add_config_option(uninstall_parser)
  328:     _add_hook_type_option(uninstall_parser)
  329: 
  330:     validate_config_parser = _add_cmd(
  331:         'validate-config', help='Validate .pre-commit-config.yaml files',
  332:     )
  333:     validate_config_parser.add_argument('filenames', nargs='*')
  334: 
  335:     validate_manifest_parser = _add_cmd(
  336:         'validate-manifest', help='Validate .pre-commit-hooks.yaml files',
  337:     )
  338:     validate_manifest_parser.add_argument('filenames', nargs='*')
  339: 
  340:     # does not use `_add_cmd` because it doesn't use `--color`
  341:     help = subparsers.add_parser(
  342:         'help', help='Show help for a specific command.',
  343:     )
  344:     help.add_argument('help_cmd', nargs='?', help='Command to show help for.')
  345: 
  346:     # not intended for users to call this directly
  347:     hook_impl_parser = subparsers.add_parser('hook-impl')
  348:     add_color_option(hook_impl_parser)
  349:     _add_config_option(hook_impl_parser)
  350:     hook_impl_parser.add_argument('--hook-type')
  351:     hook_impl_parser.add_argument('--hook-dir')
  352:     hook_impl_parser.add_argument(
  353:         '--skip-on-missing-config', action='store_true',
  354:     )
  355:     hook_impl_parser.add_argument(dest='rest', nargs=argparse.REMAINDER)
  356: 
  357:     # argparse doesn't really provide a way to use a `default` subparser
  358:     if len(argv) == 0:
  359:         argv = ['run']
  360:     args = parser.parse_args(argv)
  361: 
  362:     if args.command == 'help' and args.help_cmd:
  363:         parser.parse_args([args.help_cmd, '--help'])
  364:     elif args.command == 'help':
  365:         parser.parse_args(['--help'])
  366: 
  367:     with error_handler(), logging_handler(args.color):
  368:         git.check_for_cygwin_mismatch()
  369: 
  370:         store = Store()
  371: 
  372:         if args.command not in COMMANDS_NO_GIT:
  373:             _adjust_args_and_chdir(args)
  374:             store.mark_config_used(args.config)
  375: 
  376:         if args.command == 'autoupdate':
  377:             return autoupdate(
  378:                 args.config,
  379:                 tags_only=not args.bleeding_edge,
  380:                 freeze=args.freeze,
  381:                 repos=args.repos,
  382:                 jobs=args.jobs,
  383:             )
  384:         elif args.command == 'clean':
  385:             return clean(store)
  386:         elif args.command == 'gc':
  387:             return gc(store)
  388:         elif args.command == 'hook-impl':
  389:             return hook_impl(
  390:                 store,
  391:                 config=args.config,
  392:                 color=args.color,
  393:                 hook_type=args.hook_type,
  394:                 hook_dir=args.hook_dir,
  395:                 skip_on_missing_config=args.skip_on_missing_config,
  396:                 args=args.rest[1:],
  397:             )
  398:         elif args.command == 'install':
  399:             return install(
  400:                 args.config, store,
  401:                 hook_types=args.hook_types,
  402:                 overwrite=args.overwrite,
  403:                 hooks=args.install_hooks,
  404:                 skip_on_missing_config=args.allow_missing_config,
  405:             )
  406:         elif args.command == 'init-templatedir':
  407:             return init_templatedir(
  408:                 args.config, store, args.directory,
  409:                 hook_types=args.hook_types,
  410:                 skip_on_missing_config=args.allow_missing_config,
  411:             )
  412:         elif args.command == 'install-hooks':
  413:             return install_hooks(args.config, store)
  414:         elif args.command == 'migrate-config':
  415:             return migrate_config(args.config)
  416:         elif args.command == 'run':
  417:             return run(args.config, store, args)
  418:         elif args.command == 'sample-config':
  419:             return sample_config()
  420:         elif args.command == 'try-repo':
  421:             return try_repo(args)
  422:         elif args.command == 'uninstall':
  423:             return uninstall(
  424:                 config_file=args.config,
  425:                 hook_types=args.hook_types,
  426:             )
  427:         elif args.command == 'validate-config':
  428:             return validate_config(args.filenames)
  429:         elif args.command == 'validate-manifest':
  430:             return validate_manifest(args.filenames)
  431:         else:
  432:             raise NotImplementedError(
  433:                 f'Command {args.command} not implemented.',
  434:             )
  435: 
  436:         raise AssertionError(
  437:             f'Command {args.command} failed to exit with a returncode',
  438:         )
  439: 
  440: 
  441: if __name__ == '__main__':
  442:     raise SystemExit(main())
