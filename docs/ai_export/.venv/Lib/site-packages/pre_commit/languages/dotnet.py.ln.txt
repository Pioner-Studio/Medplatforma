    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import os.path
    5: import re
    6: import tempfile
    7: import xml.etree.ElementTree
    8: import zipfile
    9: from collections.abc import Generator
   10: from collections.abc import Sequence
   11: 
   12: from pre_commit import lang_base
   13: from pre_commit.envcontext import envcontext
   14: from pre_commit.envcontext import PatchesT
   15: from pre_commit.envcontext import Var
   16: from pre_commit.prefix import Prefix
   17: 
   18: ENVIRONMENT_DIR = 'dotnetenv'
   19: BIN_DIR = 'bin'
   20: 
   21: get_default_version = lang_base.basic_get_default_version
   22: health_check = lang_base.basic_health_check
   23: run_hook = lang_base.basic_run_hook
   24: 
   25: 
   26: def get_env_patch(venv: str) -> PatchesT:
   27:     return (
   28:         ('PATH', (os.path.join(venv, BIN_DIR), os.pathsep, Var('PATH'))),
   29:     )
   30: 
   31: 
   32: @contextlib.contextmanager
   33: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   34:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   35:     with envcontext(get_env_patch(envdir)):
   36:         yield
   37: 
   38: 
   39: @contextlib.contextmanager
   40: def _nuget_config_no_sources() -> Generator[str]:
   41:     with tempfile.TemporaryDirectory() as tmpdir:
   42:         nuget_config = os.path.join(tmpdir, 'nuget.config')
   43:         with open(nuget_config, 'w') as f:
   44:             f.write(
   45:                 '<?xml version="1.0" encoding="utf-8"?>'
   46:                 '<configuration>'
   47:                 '  <packageSources>'
   48:                 '    <clear />'
   49:                 '  </packageSources>'
   50:                 '</configuration>',
   51:             )
   52:         yield nuget_config
   53: 
   54: 
   55: def install_environment(
   56:         prefix: Prefix,
   57:         version: str,
   58:         additional_dependencies: Sequence[str],
   59: ) -> None:
   60:     lang_base.assert_version_default('dotnet', version)
   61:     lang_base.assert_no_additional_deps('dotnet', additional_dependencies)
   62: 
   63:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   64:     build_dir = prefix.path('pre-commit-build')
   65: 
   66:     # Build & pack nupkg file
   67:     lang_base.setup_cmd(
   68:         prefix,
   69:         (
   70:             'dotnet', 'pack',
   71:             '--configuration', 'Release',
   72:             '--property', f'PackageOutputPath={build_dir}',
   73:         ),
   74:     )
   75: 
   76:     nupkg_dir = prefix.path(build_dir)
   77:     nupkgs = [x for x in os.listdir(nupkg_dir) if x.endswith('.nupkg')]
   78: 
   79:     if not nupkgs:
   80:         raise AssertionError('could not find any build outputs to install')
   81: 
   82:     for nupkg in nupkgs:
   83:         with zipfile.ZipFile(os.path.join(nupkg_dir, nupkg)) as f:
   84:             nuspec, = (x for x in f.namelist() if x.endswith('.nuspec'))
   85:             with f.open(nuspec) as spec:
   86:                 tree = xml.etree.ElementTree.parse(spec)
   87: 
   88:         namespace = re.match(r'{.*}', tree.getroot().tag)
   89:         if not namespace:
   90:             raise AssertionError('could not parse namespace from nuspec')
   91: 
   92:         tool_id_element = tree.find(f'.//{namespace[0]}id')
   93:         if tool_id_element is None:
   94:             raise AssertionError('expected to find an "id" element')
   95: 
   96:         tool_id = tool_id_element.text
   97:         if not tool_id:
   98:             raise AssertionError('"id" element missing tool name')
   99: 
  100:         # Install to bin dir
  101:         with _nuget_config_no_sources() as nuget_config:
  102:             lang_base.setup_cmd(
  103:                 prefix,
  104:                 (
  105:                     'dotnet', 'tool', 'install',
  106:                     '--configfile', nuget_config,
  107:                     '--tool-path', os.path.join(envdir, BIN_DIR),
  108:                     '--add-source', build_dir,
  109:                     tool_id,
  110:                 ),
  111:             )
