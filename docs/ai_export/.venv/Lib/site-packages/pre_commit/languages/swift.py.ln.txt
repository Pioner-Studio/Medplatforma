    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import os
    5: from collections.abc import Generator
    6: from collections.abc import Sequence
    7: 
    8: from pre_commit import lang_base
    9: from pre_commit.envcontext import envcontext
   10: from pre_commit.envcontext import PatchesT
   11: from pre_commit.envcontext import Var
   12: from pre_commit.prefix import Prefix
   13: from pre_commit.util import cmd_output_b
   14: 
   15: BUILD_DIR = '.build'
   16: BUILD_CONFIG = 'release'
   17: 
   18: ENVIRONMENT_DIR = 'swift_env'
   19: get_default_version = lang_base.basic_get_default_version
   20: health_check = lang_base.basic_health_check
   21: run_hook = lang_base.basic_run_hook
   22: 
   23: 
   24: def get_env_patch(venv: str) -> PatchesT:  # pragma: win32 no cover
   25:     bin_path = os.path.join(venv, BUILD_DIR, BUILD_CONFIG)
   26:     return (('PATH', (bin_path, os.pathsep, Var('PATH'))),)
   27: 
   28: 
   29: @contextlib.contextmanager  # pragma: win32 no cover
   30: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   31:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   32:     with envcontext(get_env_patch(envdir)):
   33:         yield
   34: 
   35: 
   36: def install_environment(
   37:         prefix: Prefix, version: str, additional_dependencies: Sequence[str],
   38: ) -> None:  # pragma: win32 no cover
   39:     lang_base.assert_version_default('swift', version)
   40:     lang_base.assert_no_additional_deps('swift', additional_dependencies)
   41:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   42: 
   43:     # Build the swift package
   44:     os.mkdir(envdir)
   45:     cmd_output_b(
   46:         'swift', 'build',
   47:         '--package-path', prefix.prefix_dir,
   48:         '-c', BUILD_CONFIG,
   49:         '--build-path', os.path.join(envdir, BUILD_DIR),
   50:     )
