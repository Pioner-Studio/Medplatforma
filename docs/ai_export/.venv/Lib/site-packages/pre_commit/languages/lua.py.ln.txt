    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import os
    5: import sys
    6: from collections.abc import Generator
    7: from collections.abc import Sequence
    8: 
    9: from pre_commit import lang_base
   10: from pre_commit.envcontext import envcontext
   11: from pre_commit.envcontext import PatchesT
   12: from pre_commit.envcontext import Var
   13: from pre_commit.prefix import Prefix
   14: from pre_commit.util import cmd_output
   15: 
   16: ENVIRONMENT_DIR = 'lua_env'
   17: get_default_version = lang_base.basic_get_default_version
   18: health_check = lang_base.basic_health_check
   19: run_hook = lang_base.basic_run_hook
   20: 
   21: 
   22: def _get_lua_version() -> str:  # pragma: win32 no cover
   23:     """Get the Lua version used in file paths."""
   24:     _, stdout, _ = cmd_output('luarocks', 'config', '--lua-ver')
   25:     return stdout.strip()
   26: 
   27: 
   28: def get_env_patch(d: str) -> PatchesT:  # pragma: win32 no cover
   29:     version = _get_lua_version()
   30:     so_ext = 'dll' if sys.platform == 'win32' else 'so'
   31:     return (
   32:         ('PATH', (os.path.join(d, 'bin'), os.pathsep, Var('PATH'))),
   33:         (
   34:             'LUA_PATH', (
   35:                 os.path.join(d, 'share', 'lua', version, '?.lua;'),
   36:                 os.path.join(d, 'share', 'lua', version, '?', 'init.lua;;'),
   37:             ),
   38:         ),
   39:         (
   40:             'LUA_CPATH',
   41:             (os.path.join(d, 'lib', 'lua', version, f'?.{so_ext};;'),),
   42:         ),
   43:     )
   44: 
   45: 
   46: @contextlib.contextmanager  # pragma: win32 no cover
   47: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   48:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   49:     with envcontext(get_env_patch(envdir)):
   50:         yield
   51: 
   52: 
   53: def install_environment(
   54:     prefix: Prefix,
   55:     version: str,
   56:     additional_dependencies: Sequence[str],
   57: ) -> None:  # pragma: win32 no cover
   58:     lang_base.assert_version_default('lua', version)
   59: 
   60:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   61:     with in_env(prefix, version):
   62:         # luarocks doesn't bootstrap a tree prior to installing
   63:         # so ensure the directory exists.
   64:         os.makedirs(envdir, exist_ok=True)
   65: 
   66:         # Older luarocks (e.g., 2.4.2) expect the rockspec as an arg
   67:         for rockspec in prefix.star('.rockspec'):
   68:             make_cmd = ('luarocks', '--tree', envdir, 'make', rockspec)
   69:             lang_base.setup_cmd(prefix, make_cmd)
   70: 
   71:         # luarocks can't install multiple packages at once
   72:         # so install them individually.
   73:         for dependency in additional_dependencies:
   74:             cmd = ('luarocks', '--tree', envdir, 'install', dependency)
   75:             lang_base.setup_cmd(prefix, cmd)
