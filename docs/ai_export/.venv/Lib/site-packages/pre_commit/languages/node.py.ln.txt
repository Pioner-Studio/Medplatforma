    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import functools
    5: import os
    6: import sys
    7: from collections.abc import Generator
    8: from collections.abc import Sequence
    9: 
   10: import pre_commit.constants as C
   11: from pre_commit import lang_base
   12: from pre_commit.envcontext import envcontext
   13: from pre_commit.envcontext import PatchesT
   14: from pre_commit.envcontext import UNSET
   15: from pre_commit.envcontext import Var
   16: from pre_commit.languages.python import bin_dir
   17: from pre_commit.prefix import Prefix
   18: from pre_commit.util import cmd_output
   19: from pre_commit.util import cmd_output_b
   20: from pre_commit.util import rmtree
   21: 
   22: ENVIRONMENT_DIR = 'node_env'
   23: run_hook = lang_base.basic_run_hook
   24: 
   25: 
   26: @functools.lru_cache(maxsize=1)
   27: def get_default_version() -> str:
   28:     # nodeenv does not yet support `-n system` on windows
   29:     if sys.platform == 'win32':
   30:         return C.DEFAULT
   31:     # if node is already installed, we can save a bunch of setup time by
   32:     # using the installed version
   33:     elif all(lang_base.exe_exists(exe) for exe in ('node', 'npm')):
   34:         return 'system'
   35:     else:
   36:         return C.DEFAULT
   37: 
   38: 
   39: def get_env_patch(venv: str) -> PatchesT:
   40:     if sys.platform == 'cygwin':  # pragma: no cover
   41:         _, win_venv, _ = cmd_output('cygpath', '-w', venv)
   42:         install_prefix = fr'{win_venv.strip()}\bin'
   43:         lib_dir = 'lib'
   44:     elif sys.platform == 'win32':  # pragma: no cover
   45:         install_prefix = bin_dir(venv)
   46:         lib_dir = 'Scripts'
   47:     else:  # pragma: win32 no cover
   48:         install_prefix = venv
   49:         lib_dir = 'lib'
   50:     return (
   51:         ('NODE_VIRTUAL_ENV', venv),
   52:         ('NPM_CONFIG_PREFIX', install_prefix),
   53:         ('npm_config_prefix', install_prefix),
   54:         ('NPM_CONFIG_USERCONFIG', UNSET),
   55:         ('npm_config_userconfig', UNSET),
   56:         ('NODE_PATH', os.path.join(venv, lib_dir, 'node_modules')),
   57:         ('PATH', (bin_dir(venv), os.pathsep, Var('PATH'))),
   58:     )
   59: 
   60: 
   61: @contextlib.contextmanager
   62: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   63:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   64:     with envcontext(get_env_patch(envdir)):
   65:         yield
   66: 
   67: 
   68: def health_check(prefix: Prefix, version: str) -> str | None:
   69:     with in_env(prefix, version):
   70:         retcode, _, _ = cmd_output_b('node', '--version', check=False)
   71:         if retcode != 0:  # pragma: win32 no cover
   72:             return f'`node --version` returned {retcode}'
   73:         else:
   74:             return None
   75: 
   76: 
   77: def install_environment(
   78:         prefix: Prefix, version: str, additional_dependencies: Sequence[str],
   79: ) -> None:
   80:     assert prefix.exists('package.json')
   81:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   82: 
   83:     # https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx?f=255&MSPPError=-2147217396#maxpath
   84:     if sys.platform == 'win32':  # pragma: no cover
   85:         envdir = fr'\\?\{os.path.normpath(envdir)}'
   86:     cmd = [sys.executable, '-mnodeenv', '--prebuilt', '--clean-src', envdir]
   87:     if version != C.DEFAULT:
   88:         cmd.extend(['-n', version])
   89:     cmd_output_b(*cmd)
   90: 
   91:     with in_env(prefix, version):
   92:         # https://npm.community/t/npm-install-g-git-vs-git-clone-cd-npm-install-g/5449
   93:         # install as if we installed from git
   94: 
   95:         local_install_cmd = (
   96:             'npm', 'install', '--include=dev', '--include=prod',
   97:             '--ignore-prepublish', '--no-progress', '--no-save',
   98:         )
   99:         lang_base.setup_cmd(prefix, local_install_cmd)
  100: 
  101:         _, pkg, _ = cmd_output('npm', 'pack', cwd=prefix.prefix_dir)
  102:         pkg = prefix.path(pkg.strip())
  103: 
  104:         install = ('npm', 'install', '-g', pkg, *additional_dependencies)
  105:         lang_base.setup_cmd(prefix, install)
  106: 
  107:         # clean these up after installation
  108:         if prefix.exists('node_modules'):  # pragma: win32 no cover
  109:             rmtree(prefix.path('node_modules'))
  110:         os.remove(pkg)
