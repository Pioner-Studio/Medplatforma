    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import functools
    5: import importlib.resources
    6: import os.path
    7: import shutil
    8: import tarfile
    9: from collections.abc import Generator
   10: from collections.abc import Sequence
   11: from typing import IO
   12: 
   13: import pre_commit.constants as C
   14: from pre_commit import lang_base
   15: from pre_commit.envcontext import envcontext
   16: from pre_commit.envcontext import PatchesT
   17: from pre_commit.envcontext import UNSET
   18: from pre_commit.envcontext import Var
   19: from pre_commit.prefix import Prefix
   20: from pre_commit.util import CalledProcessError
   21: 
   22: ENVIRONMENT_DIR = 'rbenv'
   23: health_check = lang_base.basic_health_check
   24: run_hook = lang_base.basic_run_hook
   25: 
   26: 
   27: def _resource_bytesio(filename: str) -> IO[bytes]:
   28:     files = importlib.resources.files('pre_commit.resources')
   29:     return files.joinpath(filename).open('rb')
   30: 
   31: 
   32: @functools.lru_cache(maxsize=1)
   33: def get_default_version() -> str:
   34:     if all(lang_base.exe_exists(exe) for exe in ('ruby', 'gem')):
   35:         return 'system'
   36:     else:
   37:         return C.DEFAULT
   38: 
   39: 
   40: def get_env_patch(
   41:         venv: str,
   42:         language_version: str,
   43: ) -> PatchesT:
   44:     patches: PatchesT = (
   45:         ('GEM_HOME', os.path.join(venv, 'gems')),
   46:         ('GEM_PATH', UNSET),
   47:         ('BUNDLE_IGNORE_CONFIG', '1'),
   48:     )
   49:     if language_version == 'system':
   50:         patches += (
   51:             (
   52:                 'PATH', (
   53:                     os.path.join(venv, 'gems', 'bin'), os.pathsep,
   54:                     Var('PATH'),
   55:                 ),
   56:             ),
   57:         )
   58:     else:  # pragma: win32 no cover
   59:         patches += (
   60:             ('RBENV_ROOT', venv),
   61:             (
   62:                 'PATH', (
   63:                     os.path.join(venv, 'gems', 'bin'), os.pathsep,
   64:                     os.path.join(venv, 'shims'), os.pathsep,
   65:                     os.path.join(venv, 'bin'), os.pathsep, Var('PATH'),
   66:                 ),
   67:             ),
   68:         )
   69:     if language_version not in {'system', 'default'}:  # pragma: win32 no cover
   70:         patches += (('RBENV_VERSION', language_version),)
   71: 
   72:     return patches
   73: 
   74: 
   75: @contextlib.contextmanager
   76: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   77:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   78:     with envcontext(get_env_patch(envdir, version)):
   79:         yield
   80: 
   81: 
   82: def _extract_resource(filename: str, dest: str) -> None:
   83:     with _resource_bytesio(filename) as bio:
   84:         with tarfile.open(fileobj=bio) as tf:
   85:             tf.extractall(dest)
   86: 
   87: 
   88: def _install_rbenv(
   89:         prefix: Prefix,
   90:         version: str,
   91: ) -> None:  # pragma: win32 no cover
   92:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   93: 
   94:     _extract_resource('rbenv.tar.gz', prefix.path('.'))
   95:     shutil.move(prefix.path('rbenv'), envdir)
   96: 
   97:     # Only install ruby-build if the version is specified
   98:     if version != C.DEFAULT:
   99:         plugins_dir = os.path.join(envdir, 'plugins')
  100:         _extract_resource('ruby-download.tar.gz', plugins_dir)
  101:         _extract_resource('ruby-build.tar.gz', plugins_dir)
  102: 
  103: 
  104: def _install_ruby(
  105:         prefix: Prefix,
  106:         version: str,
  107: ) -> None:  # pragma: win32 no cover
  108:     try:
  109:         lang_base.setup_cmd(prefix, ('rbenv', 'download', version))
  110:     except CalledProcessError:  # pragma: no cover (usually find with download)
  111:         # Failed to download from mirror for some reason, build it instead
  112:         lang_base.setup_cmd(prefix, ('rbenv', 'install', version))
  113: 
  114: 
  115: def install_environment(
  116:         prefix: Prefix, version: str, additional_dependencies: Sequence[str],
  117: ) -> None:
  118:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
  119: 
  120:     if version != 'system':  # pragma: win32 no cover
  121:         _install_rbenv(prefix, version)
  122:         with in_env(prefix, version):
  123:             # Need to call this before installing so rbenv's directories
  124:             # are set up
  125:             lang_base.setup_cmd(prefix, ('rbenv', 'init', '-'))
  126:             if version != C.DEFAULT:
  127:                 _install_ruby(prefix, version)
  128:             # Need to call this after installing to set up the shims
  129:             lang_base.setup_cmd(prefix, ('rbenv', 'rehash'))
  130: 
  131:     with in_env(prefix, version):
  132:         lang_base.setup_cmd(
  133:             prefix, ('gem', 'build', *prefix.star('.gemspec')),
  134:         )
  135:         lang_base.setup_cmd(
  136:             prefix,
  137:             (
  138:                 'gem', 'install',
  139:                 '--no-document', '--no-format-executable',
  140:                 '--no-user-install',
  141:                 '--install-dir', os.path.join(envdir, 'gems'),
  142:                 '--bindir', os.path.join(envdir, 'gems', 'bin'),
  143:                 *prefix.star('.gem'), *additional_dependencies,
  144:             ),
  145:         )
