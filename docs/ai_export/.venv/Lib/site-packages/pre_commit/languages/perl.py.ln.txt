    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import os
    5: import shlex
    6: from collections.abc import Generator
    7: from collections.abc import Sequence
    8: 
    9: from pre_commit import lang_base
   10: from pre_commit.envcontext import envcontext
   11: from pre_commit.envcontext import PatchesT
   12: from pre_commit.envcontext import Var
   13: from pre_commit.prefix import Prefix
   14: 
   15: ENVIRONMENT_DIR = 'perl_env'
   16: get_default_version = lang_base.basic_get_default_version
   17: health_check = lang_base.basic_health_check
   18: run_hook = lang_base.basic_run_hook
   19: 
   20: 
   21: def get_env_patch(venv: str) -> PatchesT:
   22:     return (
   23:         ('PATH', (os.path.join(venv, 'bin'), os.pathsep, Var('PATH'))),
   24:         ('PERL5LIB', os.path.join(venv, 'lib', 'perl5')),
   25:         ('PERL_MB_OPT', f'--install_base {shlex.quote(venv)}'),
   26:         (
   27:             'PERL_MM_OPT', (
   28:                 f'INSTALL_BASE={shlex.quote(venv)} '
   29:                 f'INSTALLSITEMAN1DIR=none INSTALLSITEMAN3DIR=none'
   30:             ),
   31:         ),
   32:     )
   33: 
   34: 
   35: @contextlib.contextmanager
   36: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   37:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   38:     with envcontext(get_env_patch(envdir)):
   39:         yield
   40: 
   41: 
   42: def install_environment(
   43:         prefix: Prefix, version: str, additional_dependencies: Sequence[str],
   44: ) -> None:
   45:     lang_base.assert_version_default('perl', version)
   46: 
   47:     with in_env(prefix, version):
   48:         lang_base.setup_cmd(
   49:             prefix, ('cpan', '-T', '.', *additional_dependencies),
   50:         )
