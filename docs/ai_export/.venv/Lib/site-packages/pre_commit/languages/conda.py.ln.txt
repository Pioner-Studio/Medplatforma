    1: from __future__ import annotations
    2: 
    3: import contextlib
    4: import os
    5: import sys
    6: from collections.abc import Generator
    7: from collections.abc import Sequence
    8: 
    9: from pre_commit import lang_base
   10: from pre_commit.envcontext import envcontext
   11: from pre_commit.envcontext import PatchesT
   12: from pre_commit.envcontext import SubstitutionT
   13: from pre_commit.envcontext import UNSET
   14: from pre_commit.envcontext import Var
   15: from pre_commit.prefix import Prefix
   16: from pre_commit.util import cmd_output_b
   17: 
   18: ENVIRONMENT_DIR = 'conda'
   19: get_default_version = lang_base.basic_get_default_version
   20: health_check = lang_base.basic_health_check
   21: run_hook = lang_base.basic_run_hook
   22: 
   23: 
   24: def get_env_patch(env: str) -> PatchesT:
   25:     # On non-windows systems executable live in $CONDA_PREFIX/bin, on Windows
   26:     # they can be in $CONDA_PREFIX/bin, $CONDA_PREFIX/Library/bin,
   27:     # $CONDA_PREFIX/Scripts and $CONDA_PREFIX. Whereas the latter only
   28:     # seems to be used for python.exe.
   29:     path: SubstitutionT = (os.path.join(env, 'bin'), os.pathsep, Var('PATH'))
   30:     if sys.platform == 'win32':  # pragma: win32 cover
   31:         path = (env, os.pathsep, *path)
   32:         path = (os.path.join(env, 'Scripts'), os.pathsep, *path)
   33:         path = (os.path.join(env, 'Library', 'bin'), os.pathsep, *path)
   34: 
   35:     return (
   36:         ('PYTHONHOME', UNSET),
   37:         ('VIRTUAL_ENV', UNSET),
   38:         ('CONDA_PREFIX', env),
   39:         ('PATH', path),
   40:     )
   41: 
   42: 
   43: @contextlib.contextmanager
   44: def in_env(prefix: Prefix, version: str) -> Generator[None]:
   45:     envdir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   46:     with envcontext(get_env_patch(envdir)):
   47:         yield
   48: 
   49: 
   50: def _conda_exe() -> str:
   51:     if os.environ.get('PRE_COMMIT_USE_MICROMAMBA'):
   52:         return 'micromamba'
   53:     elif os.environ.get('PRE_COMMIT_USE_MAMBA'):
   54:         return 'mamba'
   55:     else:
   56:         return 'conda'
   57: 
   58: 
   59: def install_environment(
   60:         prefix: Prefix,
   61:         version: str,
   62:         additional_dependencies: Sequence[str],
   63: ) -> None:
   64:     lang_base.assert_version_default('conda', version)
   65: 
   66:     conda_exe = _conda_exe()
   67: 
   68:     env_dir = lang_base.environment_dir(prefix, ENVIRONMENT_DIR, version)
   69:     cmd_output_b(
   70:         conda_exe, 'env', 'create', '-p', env_dir, '--file',
   71:         'environment.yml', cwd=prefix.prefix_dir,
   72:     )
   73:     if additional_dependencies:
   74:         cmd_output_b(
   75:             conda_exe, 'install', '-p', env_dir, *additional_dependencies,
   76:             cwd=prefix.prefix_dir,
   77:         )
