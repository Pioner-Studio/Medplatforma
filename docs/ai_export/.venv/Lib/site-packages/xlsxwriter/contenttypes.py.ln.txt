    1: ###############################################################################
    2: #
    3: # ContentTypes - A class for writing the Excel XLSX ContentTypes file.
    4: #
    5: # SPDX-License-Identifier: BSD-2-Clause
    6: # Copyright 2013-2024, John McNamara, jmcnamara@cpan.org
    7: #
    8: 
    9: import copy
   10: from . import xmlwriter
   11: 
   12: # Long namespace strings used in the class.
   13: app_package = "application/vnd.openxmlformats-package."
   14: app_document = "application/vnd.openxmlformats-officedocument."
   15: 
   16: defaults = [
   17:     ["rels", app_package + "relationships+xml"],
   18:     ["xml", "application/xml"],
   19: ]
   20: 
   21: overrides = [
   22:     ["/docProps/app.xml", app_document + "extended-properties+xml"],
   23:     ["/docProps/core.xml", app_package + "core-properties+xml"],
   24:     ["/xl/styles.xml", app_document + "spreadsheetml.styles+xml"],
   25:     ["/xl/theme/theme1.xml", app_document + "theme+xml"],
   26:     ["/xl/workbook.xml", app_document + "spreadsheetml.sheet.main+xml"],
   27: ]
   28: 
   29: 
   30: class ContentTypes(xmlwriter.XMLwriter):
   31:     """
   32:     A class for writing the Excel XLSX ContentTypes file.
   33: 
   34: 
   35:     """
   36: 
   37:     ###########################################################################
   38:     #
   39:     # Public API.
   40:     #
   41:     ###########################################################################
   42: 
   43:     def __init__(self):
   44:         """
   45:         Constructor.
   46: 
   47:         """
   48: 
   49:         super(ContentTypes, self).__init__()
   50: 
   51:         # Copy the defaults in case we need to change them.
   52:         self.defaults = copy.deepcopy(defaults)
   53:         self.overrides = copy.deepcopy(overrides)
   54: 
   55:     ###########################################################################
   56:     #
   57:     # Private API.
   58:     #
   59:     ###########################################################################
   60: 
   61:     def _assemble_xml_file(self):
   62:         # Assemble and write the XML file.
   63: 
   64:         # Write the XML declaration.
   65:         self._xml_declaration()
   66: 
   67:         self._write_types()
   68:         self._write_defaults()
   69:         self._write_overrides()
   70: 
   71:         self._xml_end_tag("Types")
   72: 
   73:         # Close the file.
   74:         self._xml_close()
   75: 
   76:     def _add_default(self, default):
   77:         # Add elements to the ContentTypes defaults.
   78:         self.defaults.append(default)
   79: 
   80:     def _add_override(self, override):
   81:         # Add elements to the ContentTypes overrides.
   82:         self.overrides.append(override)
   83: 
   84:     def _add_worksheet_name(self, worksheet_name):
   85:         # Add the name of a worksheet to the ContentTypes overrides.
   86:         worksheet_name = "/xl/worksheets/" + worksheet_name + ".xml"
   87: 
   88:         self._add_override(
   89:             (worksheet_name, app_document + "spreadsheetml.worksheet+xml")
   90:         )
   91: 
   92:     def _add_chartsheet_name(self, chartsheet_name):
   93:         # Add the name of a chartsheet to the ContentTypes overrides.
   94:         chartsheet_name = "/xl/chartsheets/" + chartsheet_name + ".xml"
   95: 
   96:         self._add_override(
   97:             (chartsheet_name, app_document + "spreadsheetml.chartsheet+xml")
   98:         )
   99: 
  100:     def _add_chart_name(self, chart_name):
  101:         # Add the name of a chart to the ContentTypes overrides.
  102:         chart_name = "/xl/charts/" + chart_name + ".xml"
  103: 
  104:         self._add_override((chart_name, app_document + "drawingml.chart+xml"))
  105: 
  106:     def _add_drawing_name(self, drawing_name):
  107:         # Add the name of a drawing to the ContentTypes overrides.
  108:         drawing_name = "/xl/drawings/" + drawing_name + ".xml"
  109: 
  110:         self._add_override((drawing_name, app_document + "drawing+xml"))
  111: 
  112:     def _add_vml_name(self):
  113:         # Add the name of a VML drawing to the ContentTypes defaults.
  114:         self._add_default(("vml", app_document + "vmlDrawing"))
  115: 
  116:     def _add_comment_name(self, comment_name):
  117:         # Add the name of a comment to the ContentTypes overrides.
  118:         comment_name = "/xl/" + comment_name + ".xml"
  119: 
  120:         self._add_override((comment_name, app_document + "spreadsheetml.comments+xml"))
  121: 
  122:     def _add_shared_strings(self):
  123:         # Add the sharedStrings link to the ContentTypes overrides.
  124:         self._add_override(
  125:             ("/xl/sharedStrings.xml", app_document + "spreadsheetml.sharedStrings+xml")
  126:         )
  127: 
  128:     def _add_calc_chain(self):
  129:         # Add the calcChain link to the ContentTypes overrides.
  130:         self._add_override(
  131:             ("/xl/calcChain.xml", app_document + "spreadsheetml.calcChain+xml")
  132:         )
  133: 
  134:     def _add_image_types(self, image_types):
  135:         # Add the image default types.
  136:         for image_type in image_types:
  137:             extension = image_type
  138: 
  139:             if image_type in ("wmf", "emf"):
  140:                 image_type = "x-" + image_type
  141: 
  142:             self._add_default((extension, "image/" + image_type))
  143: 
  144:     def _add_table_name(self, table_name):
  145:         # Add the name of a table to the ContentTypes overrides.
  146:         table_name = "/xl/tables/" + table_name + ".xml"
  147: 
  148:         self._add_override((table_name, app_document + "spreadsheetml.table+xml"))
  149: 
  150:     def _add_vba_project(self):
  151:         # Add a vbaProject to the ContentTypes defaults.
  152: 
  153:         # Change the workbook.xml content-type from xlsx to xlsm.
  154:         for i, override in enumerate(self.overrides):
  155:             if override[0] == "/xl/workbook.xml":
  156:                 xlsm = "application/vnd.ms-excel.sheet.macroEnabled.main+xml"
  157:                 self.overrides[i][1] = xlsm
  158: 
  159:         self._add_default(("bin", "application/vnd.ms-office.vbaProject"))
  160: 
  161:     def _add_vba_project_signature(self):
  162:         # Add a vbaProjectSignature to the ContentTypes overrides.
  163:         self._add_override(
  164:             (
  165:                 "/xl/vbaProjectSignature.bin",
  166:                 "application/vnd.ms-office.vbaProjectSignature",
  167:             )
  168:         )
  169: 
  170:     def _add_custom_properties(self):
  171:         # Add the custom properties to the ContentTypes overrides.
  172:         self._add_override(
  173:             ("/docProps/custom.xml", app_document + "custom-properties+xml")
  174:         )
  175: 
  176:     def _add_metadata(self):
  177:         # Add the metadata file to the ContentTypes overrides.
  178:         self._add_override(
  179:             ("/xl/metadata.xml", app_document + "spreadsheetml.sheetMetadata+xml")
  180:         )
  181: 
  182:     def _add_rich_value(self):
  183:         # Add the richValue files to the ContentTypes overrides.
  184:         self._add_override(
  185:             (
  186:                 "/xl/richData/rdRichValueTypes.xml",
  187:                 "application/vnd.ms-excel.rdrichvaluetypes+xml",
  188:             )
  189:         )
  190: 
  191:         self._add_override(
  192:             ("/xl/richData/rdrichvalue.xml", "application/vnd.ms-excel.rdrichvalue+xml")
  193:         )
  194: 
  195:         self._add_override(
  196:             (
  197:                 "/xl/richData/rdrichvaluestructure.xml",
  198:                 "application/vnd.ms-excel.rdrichvaluestructure+xml",
  199:             )
  200:         )
  201: 
  202:         self._add_override(
  203:             (
  204:                 "/xl/richData/richValueRel.xml",
  205:                 "application/vnd.ms-excel.richvaluerel+xml",
  206:             )
  207:         )
  208: 
  209:     ###########################################################################
  210:     #
  211:     # XML methods.
  212:     #
  213:     ###########################################################################
  214: 
  215:     def _write_defaults(self):
  216:         # Write out all of the <Default> types.
  217: 
  218:         for extension, content_type in self.defaults:
  219:             self._xml_empty_tag(
  220:                 "Default", [("Extension", extension), ("ContentType", content_type)]
  221:             )
  222: 
  223:     def _write_overrides(self):
  224:         # Write out all of the <Override> types.
  225:         for part_name, content_type in self.overrides:
  226:             self._xml_empty_tag(
  227:                 "Override", [("PartName", part_name), ("ContentType", content_type)]
  228:             )
  229: 
  230:     def _write_types(self):
  231:         # Write the <Types> element.
  232:         xmlns = "http://schemas.openxmlformats.org/package/2006/content-types"
  233: 
  234:         attributes = [
  235:             (
  236:                 "xmlns",
  237:                 xmlns,
  238:             )
  239:         ]
  240:         self._xml_start_tag("Types", attributes)
  241: 
  242:     def _write_default(self, extension, content_type):
  243:         # Write the <Default> element.
  244:         attributes = [
  245:             ("Extension", extension),
  246:             ("ContentType", content_type),
  247:         ]
  248: 
  249:         self._xml_empty_tag("Default", attributes)
  250: 
  251:     def _write_override(self, part_name, content_type):
  252:         # Write the <Override> element.
  253:         attributes = [
  254:             ("PartName", part_name),
  255:             ("ContentType", content_type),
  256:         ]
  257: 
  258:         self._xml_empty_tag("Override", attributes)
