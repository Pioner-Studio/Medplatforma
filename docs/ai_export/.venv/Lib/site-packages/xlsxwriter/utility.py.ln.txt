    1: ###############################################################################
    2: #
    3: # Worksheet - A class for writing Excel Worksheets.
    4: #
    5: # SPDX-License-Identifier: BSD-2-Clause
    6: # Copyright 2013-2024, John McNamara, jmcnamara@cpan.org
    7: #
    8: import datetime
    9: import hashlib
   10: import os
   11: import re
   12: from struct import unpack
   13: from warnings import warn
   14: from .exceptions import UndefinedImageSize
   15: from .exceptions import UnsupportedImageFormat
   16: 
   17: COL_NAMES = {}
   18: 
   19: CHAR_WIDTHS = {
   20:     " ": 3,
   21:     "!": 5,
   22:     '"': 6,
   23:     "#": 7,
   24:     "$": 7,
   25:     "%": 11,
   26:     "&": 10,
   27:     "'": 3,
   28:     "(": 5,
   29:     ")": 5,
   30:     "*": 7,
   31:     "+": 7,
   32:     ",": 4,
   33:     "-": 5,
   34:     ".": 4,
   35:     "/": 6,
   36:     "0": 7,
   37:     "1": 7,
   38:     "2": 7,
   39:     "3": 7,
   40:     "4": 7,
   41:     "5": 7,
   42:     "6": 7,
   43:     "7": 7,
   44:     "8": 7,
   45:     "9": 7,
   46:     ":": 4,
   47:     ";": 4,
   48:     "<": 7,
   49:     "=": 7,
   50:     ">": 7,
   51:     "?": 7,
   52:     "@": 13,
   53:     "A": 9,
   54:     "B": 8,
   55:     "C": 8,
   56:     "D": 9,
   57:     "E": 7,
   58:     "F": 7,
   59:     "G": 9,
   60:     "H": 9,
   61:     "I": 4,
   62:     "J": 5,
   63:     "K": 8,
   64:     "L": 6,
   65:     "M": 12,
   66:     "N": 10,
   67:     "O": 10,
   68:     "P": 8,
   69:     "Q": 10,
   70:     "R": 8,
   71:     "S": 7,
   72:     "T": 7,
   73:     "U": 9,
   74:     "V": 9,
   75:     "W": 13,
   76:     "X": 8,
   77:     "Y": 7,
   78:     "Z": 7,
   79:     "[": 5,
   80:     "\\": 6,
   81:     "]": 5,
   82:     "^": 7,
   83:     "_": 7,
   84:     "`": 4,
   85:     "a": 7,
   86:     "b": 8,
   87:     "c": 6,
   88:     "d": 8,
   89:     "e": 8,
   90:     "f": 5,
   91:     "g": 7,
   92:     "h": 8,
   93:     "i": 4,
   94:     "j": 4,
   95:     "k": 7,
   96:     "l": 4,
   97:     "m": 12,
   98:     "n": 8,
   99:     "o": 8,
  100:     "p": 8,
  101:     "q": 8,
  102:     "r": 5,
  103:     "s": 6,
  104:     "t": 5,
  105:     "u": 8,
  106:     "v": 7,
  107:     "w": 11,
  108:     "x": 7,
  109:     "y": 7,
  110:     "z": 6,
  111:     "{": 5,
  112:     "|": 7,
  113:     "}": 5,
  114:     "~": 7,
  115: }
  116: 
  117: # Compile performance critical regular expressions.
  118: re_leading = re.compile(r"^\s")
  119: re_trailing = re.compile(r"\s$")
  120: re_range_parts = re.compile(r"(\$?)([A-Z]{1,3})(\$?)(\d+)")
  121: 
  122: 
  123: def xl_rowcol_to_cell(row, col, row_abs=False, col_abs=False):
  124:     """
  125:     Convert a zero indexed row and column cell reference to a A1 style string.
  126: 
  127:     Args:
  128:        row:     The cell row.    Int.
  129:        col:     The cell column. Int.
  130:        row_abs: Optional flag to make the row absolute.    Bool.
  131:        col_abs: Optional flag to make the column absolute. Bool.
  132: 
  133:     Returns:
  134:         A1 style string.
  135: 
  136:     """
  137:     if row < 0:
  138:         warn("Row number %d must be >= 0" % row)
  139:         return None
  140: 
  141:     if col < 0:
  142:         warn("Col number %d must be >= 0" % col)
  143:         return None
  144: 
  145:     row += 1  # Change to 1-index.
  146:     row_abs = "$" if row_abs else ""
  147: 
  148:     col_str = xl_col_to_name(col, col_abs)
  149: 
  150:     return col_str + row_abs + str(row)
  151: 
  152: 
  153: def xl_rowcol_to_cell_fast(row, col):
  154:     """
  155:     Optimized version of the xl_rowcol_to_cell function. Only used internally.
  156: 
  157:     Args:
  158:        row: The cell row.    Int.
  159:        col: The cell column. Int.
  160: 
  161:     Returns:
  162:         A1 style string.
  163: 
  164:     """
  165:     if col in COL_NAMES:
  166:         col_str = COL_NAMES[col]
  167:     else:
  168:         col_str = xl_col_to_name(col)
  169:         COL_NAMES[col] = col_str
  170: 
  171:     return col_str + str(row + 1)
  172: 
  173: 
  174: def xl_col_to_name(col, col_abs=False):
  175:     """
  176:     Convert a zero indexed column cell reference to a string.
  177: 
  178:     Args:
  179:        col:     The cell column. Int.
  180:        col_abs: Optional flag to make the column absolute. Bool.
  181: 
  182:     Returns:
  183:         Column style string.
  184: 
  185:     """
  186:     col_num = col
  187:     if col_num < 0:
  188:         warn("Col number %d must be >= 0" % col_num)
  189:         return None
  190: 
  191:     col_num += 1  # Change to 1-index.
  192:     col_str = ""
  193:     col_abs = "$" if col_abs else ""
  194: 
  195:     while col_num:
  196:         # Set remainder from 1 .. 26
  197:         remainder = col_num % 26
  198: 
  199:         if remainder == 0:
  200:             remainder = 26
  201: 
  202:         # Convert the remainder to a character.
  203:         col_letter = chr(ord("A") + remainder - 1)
  204: 
  205:         # Accumulate the column letters, right to left.
  206:         col_str = col_letter + col_str
  207: 
  208:         # Get the next order of magnitude.
  209:         col_num = int((col_num - 1) / 26)
  210: 
  211:     return col_abs + col_str
  212: 
  213: 
  214: def xl_cell_to_rowcol(cell_str):
  215:     """
  216:     Convert a cell reference in A1 notation to a zero indexed row and column.
  217: 
  218:     Args:
  219:        cell_str:  A1 style string.
  220: 
  221:     Returns:
  222:         row, col: Zero indexed cell row and column indices.
  223: 
  224:     """
  225:     if not cell_str:
  226:         return 0, 0
  227: 
  228:     match = re_range_parts.match(cell_str)
  229:     col_str = match.group(2)
  230:     row_str = match.group(4)
  231: 
  232:     # Convert base26 column string to number.
  233:     expn = 0
  234:     col = 0
  235:     for char in reversed(col_str):
  236:         col += (ord(char) - ord("A") + 1) * (26**expn)
  237:         expn += 1
  238: 
  239:     # Convert 1-index to zero-index
  240:     row = int(row_str) - 1
  241:     col -= 1
  242: 
  243:     return row, col
  244: 
  245: 
  246: def xl_cell_to_rowcol_abs(cell_str):
  247:     """
  248:     Convert an absolute cell reference in A1 notation to a zero indexed
  249:     row and column, with True/False values for absolute rows or columns.
  250: 
  251:     Args:
  252:        cell_str: A1 style string.
  253: 
  254:     Returns:
  255:         row, col, row_abs, col_abs:  Zero indexed cell row and column indices.
  256: 
  257:     """
  258:     if not cell_str:
  259:         return 0, 0, False, False
  260: 
  261:     match = re_range_parts.match(cell_str)
  262: 
  263:     col_abs = match.group(1)
  264:     col_str = match.group(2)
  265:     row_abs = match.group(3)
  266:     row_str = match.group(4)
  267: 
  268:     if col_abs:
  269:         col_abs = True
  270:     else:
  271:         col_abs = False
  272: 
  273:     if row_abs:
  274:         row_abs = True
  275:     else:
  276:         row_abs = False
  277: 
  278:     # Convert base26 column string to number.
  279:     expn = 0
  280:     col = 0
  281:     for char in reversed(col_str):
  282:         col += (ord(char) - ord("A") + 1) * (26**expn)
  283:         expn += 1
  284: 
  285:     # Convert 1-index to zero-index
  286:     row = int(row_str) - 1
  287:     col -= 1
  288: 
  289:     return row, col, row_abs, col_abs
  290: 
  291: 
  292: def xl_range(first_row, first_col, last_row, last_col):
  293:     """
  294:     Convert zero indexed row and col cell references to a A1:B1 range string.
  295: 
  296:     Args:
  297:        first_row: The first cell row.    Int.
  298:        first_col: The first cell column. Int.
  299:        last_row:  The last cell row.     Int.
  300:        last_col:  The last cell column.  Int.
  301: 
  302:     Returns:
  303:         A1:B1 style range string.
  304: 
  305:     """
  306:     range1 = xl_rowcol_to_cell(first_row, first_col)
  307:     range2 = xl_rowcol_to_cell(last_row, last_col)
  308: 
  309:     if range1 is None or range2 is None:
  310:         warn("Row and column numbers must be >= 0")
  311:         return None
  312: 
  313:     if range1 == range2:
  314:         return range1
  315:     else:
  316:         return range1 + ":" + range2
  317: 
  318: 
  319: def xl_range_abs(first_row, first_col, last_row, last_col):
  320:     """
  321:     Convert zero indexed row and col cell references to a $A$1:$B$1 absolute
  322:     range string.
  323: 
  324:     Args:
  325:        first_row: The first cell row.    Int.
  326:        first_col: The first cell column. Int.
  327:        last_row:  The last cell row.     Int.
  328:        last_col:  The last cell column.  Int.
  329: 
  330:     Returns:
  331:         $A$1:$B$1 style range string.
  332: 
  333:     """
  334:     range1 = xl_rowcol_to_cell(first_row, first_col, True, True)
  335:     range2 = xl_rowcol_to_cell(last_row, last_col, True, True)
  336: 
  337:     if range1 is None or range2 is None:
  338:         warn("Row and column numbers must be >= 0")
  339:         return None
  340: 
  341:     if range1 == range2:
  342:         return range1
  343:     else:
  344:         return range1 + ":" + range2
  345: 
  346: 
  347: def xl_range_formula(sheetname, first_row, first_col, last_row, last_col):
  348:     """
  349:     Convert worksheet name and zero indexed row and col cell references to
  350:     a Sheet1!A1:B1 range formula string.
  351: 
  352:     Args:
  353:        sheetname: The worksheet name.    String.
  354:        first_row: The first cell row.    Int.
  355:        first_col: The first cell column. Int.
  356:        last_row:  The last cell row.     Int.
  357:        last_col:  The last cell column.  Int.
  358: 
  359:     Returns:
  360:         A1:B1 style range string.
  361: 
  362:     """
  363:     cell_range = xl_range_abs(first_row, first_col, last_row, last_col)
  364:     sheetname = quote_sheetname(sheetname)
  365: 
  366:     return sheetname + "!" + cell_range
  367: 
  368: 
  369: def quote_sheetname(sheetname):
  370:     """
  371:     Convert a worksheet name to a quoted  name if it contains spaces or
  372:     special characters.
  373: 
  374:     Args:
  375:        sheetname: The worksheet name. String.
  376: 
  377:     Returns:
  378:         A quoted worksheet string.
  379: 
  380:     """
  381: 
  382:     if not sheetname.isalnum() and not sheetname.startswith("'"):
  383:         # Double quote any single quotes.
  384:         sheetname = sheetname.replace("'", "''")
  385: 
  386:         # Single quote the sheet name.
  387:         sheetname = "'%s'" % sheetname
  388: 
  389:     return sheetname
  390: 
  391: 
  392: def xl_pixel_width(string):
  393:     """
  394:     Get the pixel width of a string based on individual character widths taken
  395:     from Excel. UTF8 characters, and other unhandled characters, are given a
  396:     default width of 8.
  397: 
  398:     Args:
  399:        string: The string to calculate the width for. String.
  400: 
  401:     Returns:
  402:         The string width in pixels. Note, Excel adds an additional 7 pixels of
  403:         padding in the cell.
  404: 
  405:     """
  406:     length = 0
  407:     for char in string:
  408:         length += CHAR_WIDTHS.get(char, 8)
  409: 
  410:     return length
  411: 
  412: 
  413: def xl_color(color):
  414:     # Used in conjunction with the XlsxWriter *color() methods to convert
  415:     # a color name into an RGB formatted string. These colors are for
  416:     # backward compatibility with older versions of Excel.
  417:     named_colors = {
  418:         "black": "#000000",
  419:         "blue": "#0000FF",
  420:         "brown": "#800000",
  421:         "cyan": "#00FFFF",
  422:         "gray": "#808080",
  423:         "green": "#008000",
  424:         "lime": "#00FF00",
  425:         "magenta": "#FF00FF",
  426:         "navy": "#000080",
  427:         "orange": "#FF6600",
  428:         "pink": "#FF00FF",
  429:         "purple": "#800080",
  430:         "red": "#FF0000",
  431:         "silver": "#C0C0C0",
  432:         "white": "#FFFFFF",
  433:         "yellow": "#FFFF00",
  434:     }
  435: 
  436:     if color in named_colors:
  437:         color = named_colors[color]
  438: 
  439:     if not re.match("#[0-9a-fA-F]{6}", color):
  440:         warn("Color '%s' isn't a valid Excel color" % color)
  441: 
  442:     # Convert the RGB color to the Excel ARGB format.
  443:     return "FF" + color.lstrip("#").upper()
  444: 
  445: 
  446: def get_rgb_color(color):
  447:     # Convert the user specified color to an RGB color.
  448:     rgb_color = xl_color(color)
  449: 
  450:     # Remove leading FF from RGB color for charts.
  451:     rgb_color = re.sub(r"^FF", "", rgb_color)
  452: 
  453:     return rgb_color
  454: 
  455: 
  456: def get_sparkline_style(style_id):
  457:     styles = [
  458:         {
  459:             "series": {"theme": "4", "tint": "-0.499984740745262"},
  460:             "negative": {"theme": "5"},
  461:             "markers": {"theme": "4", "tint": "-0.499984740745262"},
  462:             "first": {"theme": "4", "tint": "0.39997558519241921"},
  463:             "last": {"theme": "4", "tint": "0.39997558519241921"},
  464:             "high": {"theme": "4"},
  465:             "low": {"theme": "4"},
  466:         },  # 0
  467:         {
  468:             "series": {"theme": "4", "tint": "-0.499984740745262"},
  469:             "negative": {"theme": "5"},
  470:             "markers": {"theme": "4", "tint": "-0.499984740745262"},
  471:             "first": {"theme": "4", "tint": "0.39997558519241921"},
  472:             "last": {"theme": "4", "tint": "0.39997558519241921"},
  473:             "high": {"theme": "4"},
  474:             "low": {"theme": "4"},
  475:         },  # 1
  476:         {
  477:             "series": {"theme": "5", "tint": "-0.499984740745262"},
  478:             "negative": {"theme": "6"},
  479:             "markers": {"theme": "5", "tint": "-0.499984740745262"},
  480:             "first": {"theme": "5", "tint": "0.39997558519241921"},
  481:             "last": {"theme": "5", "tint": "0.39997558519241921"},
  482:             "high": {"theme": "5"},
  483:             "low": {"theme": "5"},
  484:         },  # 2
  485:         {
  486:             "series": {"theme": "6", "tint": "-0.499984740745262"},
  487:             "negative": {"theme": "7"},
  488:             "markers": {"theme": "6", "tint": "-0.499984740745262"},
  489:             "first": {"theme": "6", "tint": "0.39997558519241921"},
  490:             "last": {"theme": "6", "tint": "0.39997558519241921"},
  491:             "high": {"theme": "6"},
  492:             "low": {"theme": "6"},
  493:         },  # 3
  494:         {
  495:             "series": {"theme": "7", "tint": "-0.499984740745262"},
  496:             "negative": {"theme": "8"},
  497:             "markers": {"theme": "7", "tint": "-0.499984740745262"},
  498:             "first": {"theme": "7", "tint": "0.39997558519241921"},
  499:             "last": {"theme": "7", "tint": "0.39997558519241921"},
  500:             "high": {"theme": "7"},
  501:             "low": {"theme": "7"},
  502:         },  # 4
  503:         {
  504:             "series": {"theme": "8", "tint": "-0.499984740745262"},
  505:             "negative": {"theme": "9"},
  506:             "markers": {"theme": "8", "tint": "-0.499984740745262"},
  507:             "first": {"theme": "8", "tint": "0.39997558519241921"},
  508:             "last": {"theme": "8", "tint": "0.39997558519241921"},
  509:             "high": {"theme": "8"},
  510:             "low": {"theme": "8"},
  511:         },  # 5
  512:         {
  513:             "series": {"theme": "9", "tint": "-0.499984740745262"},
  514:             "negative": {"theme": "4"},
  515:             "markers": {"theme": "9", "tint": "-0.499984740745262"},
  516:             "first": {"theme": "9", "tint": "0.39997558519241921"},
  517:             "last": {"theme": "9", "tint": "0.39997558519241921"},
  518:             "high": {"theme": "9"},
  519:             "low": {"theme": "9"},
  520:         },  # 6
  521:         {
  522:             "series": {"theme": "4", "tint": "-0.249977111117893"},
  523:             "negative": {"theme": "5"},
  524:             "markers": {"theme": "5", "tint": "-0.249977111117893"},
  525:             "first": {"theme": "5", "tint": "-0.249977111117893"},
  526:             "last": {"theme": "5", "tint": "-0.249977111117893"},
  527:             "high": {"theme": "5", "tint": "-0.249977111117893"},
  528:             "low": {"theme": "5", "tint": "-0.249977111117893"},
  529:         },  # 7
  530:         {
  531:             "series": {"theme": "5", "tint": "-0.249977111117893"},
  532:             "negative": {"theme": "6"},
  533:             "markers": {"theme": "6", "tint": "-0.249977111117893"},
  534:             "first": {"theme": "6", "tint": "-0.249977111117893"},
  535:             "last": {"theme": "6", "tint": "-0.249977111117893"},
  536:             "high": {"theme": "6", "tint": "-0.249977111117893"},
  537:             "low": {"theme": "6", "tint": "-0.249977111117893"},
  538:         },  # 8
  539:         {
  540:             "series": {"theme": "6", "tint": "-0.249977111117893"},
  541:             "negative": {"theme": "7"},
  542:             "markers": {"theme": "7", "tint": "-0.249977111117893"},
  543:             "first": {"theme": "7", "tint": "-0.249977111117893"},
  544:             "last": {"theme": "7", "tint": "-0.249977111117893"},
  545:             "high": {"theme": "7", "tint": "-0.249977111117893"},
  546:             "low": {"theme": "7", "tint": "-0.249977111117893"},
  547:         },  # 9
  548:         {
  549:             "series": {"theme": "7", "tint": "-0.249977111117893"},
  550:             "negative": {"theme": "8"},
  551:             "markers": {"theme": "8", "tint": "-0.249977111117893"},
  552:             "first": {"theme": "8", "tint": "-0.249977111117893"},
  553:             "last": {"theme": "8", "tint": "-0.249977111117893"},
  554:             "high": {"theme": "8", "tint": "-0.249977111117893"},
  555:             "low": {"theme": "8", "tint": "-0.249977111117893"},
  556:         },  # 10
  557:         {
  558:             "series": {"theme": "8", "tint": "-0.249977111117893"},
  559:             "negative": {"theme": "9"},
  560:             "markers": {"theme": "9", "tint": "-0.249977111117893"},
  561:             "first": {"theme": "9", "tint": "-0.249977111117893"},
  562:             "last": {"theme": "9", "tint": "-0.249977111117893"},
  563:             "high": {"theme": "9", "tint": "-0.249977111117893"},
  564:             "low": {"theme": "9", "tint": "-0.249977111117893"},
  565:         },  # 11
  566:         {
  567:             "series": {"theme": "9", "tint": "-0.249977111117893"},
  568:             "negative": {"theme": "4"},
  569:             "markers": {"theme": "4", "tint": "-0.249977111117893"},
  570:             "first": {"theme": "4", "tint": "-0.249977111117893"},
  571:             "last": {"theme": "4", "tint": "-0.249977111117893"},
  572:             "high": {"theme": "4", "tint": "-0.249977111117893"},
  573:             "low": {"theme": "4", "tint": "-0.249977111117893"},
  574:         },  # 12
  575:         {
  576:             "series": {"theme": "4"},
  577:             "negative": {"theme": "5"},
  578:             "markers": {"theme": "4", "tint": "-0.249977111117893"},
  579:             "first": {"theme": "4", "tint": "-0.249977111117893"},
  580:             "last": {"theme": "4", "tint": "-0.249977111117893"},
  581:             "high": {"theme": "4", "tint": "-0.249977111117893"},
  582:             "low": {"theme": "4", "tint": "-0.249977111117893"},
  583:         },  # 13
  584:         {
  585:             "series": {"theme": "5"},
  586:             "negative": {"theme": "6"},
  587:             "markers": {"theme": "5", "tint": "-0.249977111117893"},
  588:             "first": {"theme": "5", "tint": "-0.249977111117893"},
  589:             "last": {"theme": "5", "tint": "-0.249977111117893"},
  590:             "high": {"theme": "5", "tint": "-0.249977111117893"},
  591:             "low": {"theme": "5", "tint": "-0.249977111117893"},
  592:         },  # 14
  593:         {
  594:             "series": {"theme": "6"},
  595:             "negative": {"theme": "7"},
  596:             "markers": {"theme": "6", "tint": "-0.249977111117893"},
  597:             "first": {"theme": "6", "tint": "-0.249977111117893"},
  598:             "last": {"theme": "6", "tint": "-0.249977111117893"},
  599:             "high": {"theme": "6", "tint": "-0.249977111117893"},
  600:             "low": {"theme": "6", "tint": "-0.249977111117893"},
  601:         },  # 15
  602:         {
  603:             "series": {"theme": "7"},
  604:             "negative": {"theme": "8"},
  605:             "markers": {"theme": "7", "tint": "-0.249977111117893"},
  606:             "first": {"theme": "7", "tint": "-0.249977111117893"},
  607:             "last": {"theme": "7", "tint": "-0.249977111117893"},
  608:             "high": {"theme": "7", "tint": "-0.249977111117893"},
  609:             "low": {"theme": "7", "tint": "-0.249977111117893"},
  610:         },  # 16
  611:         {
  612:             "series": {"theme": "8"},
  613:             "negative": {"theme": "9"},
  614:             "markers": {"theme": "8", "tint": "-0.249977111117893"},
  615:             "first": {"theme": "8", "tint": "-0.249977111117893"},
  616:             "last": {"theme": "8", "tint": "-0.249977111117893"},
  617:             "high": {"theme": "8", "tint": "-0.249977111117893"},
  618:             "low": {"theme": "8", "tint": "-0.249977111117893"},
  619:         },  # 17
  620:         {
  621:             "series": {"theme": "9"},
  622:             "negative": {"theme": "4"},
  623:             "markers": {"theme": "9", "tint": "-0.249977111117893"},
  624:             "first": {"theme": "9", "tint": "-0.249977111117893"},
  625:             "last": {"theme": "9", "tint": "-0.249977111117893"},
  626:             "high": {"theme": "9", "tint": "-0.249977111117893"},
  627:             "low": {"theme": "9", "tint": "-0.249977111117893"},
  628:         },  # 18
  629:         {
  630:             "series": {"theme": "4", "tint": "0.39997558519241921"},
  631:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  632:             "markers": {"theme": "4", "tint": "0.79998168889431442"},
  633:             "first": {"theme": "4", "tint": "-0.249977111117893"},
  634:             "last": {"theme": "4", "tint": "-0.249977111117893"},
  635:             "high": {"theme": "4", "tint": "-0.499984740745262"},
  636:             "low": {"theme": "4", "tint": "-0.499984740745262"},
  637:         },  # 19
  638:         {
  639:             "series": {"theme": "5", "tint": "0.39997558519241921"},
  640:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  641:             "markers": {"theme": "5", "tint": "0.79998168889431442"},
  642:             "first": {"theme": "5", "tint": "-0.249977111117893"},
  643:             "last": {"theme": "5", "tint": "-0.249977111117893"},
  644:             "high": {"theme": "5", "tint": "-0.499984740745262"},
  645:             "low": {"theme": "5", "tint": "-0.499984740745262"},
  646:         },  # 20
  647:         {
  648:             "series": {"theme": "6", "tint": "0.39997558519241921"},
  649:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  650:             "markers": {"theme": "6", "tint": "0.79998168889431442"},
  651:             "first": {"theme": "6", "tint": "-0.249977111117893"},
  652:             "last": {"theme": "6", "tint": "-0.249977111117893"},
  653:             "high": {"theme": "6", "tint": "-0.499984740745262"},
  654:             "low": {"theme": "6", "tint": "-0.499984740745262"},
  655:         },  # 21
  656:         {
  657:             "series": {"theme": "7", "tint": "0.39997558519241921"},
  658:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  659:             "markers": {"theme": "7", "tint": "0.79998168889431442"},
  660:             "first": {"theme": "7", "tint": "-0.249977111117893"},
  661:             "last": {"theme": "7", "tint": "-0.249977111117893"},
  662:             "high": {"theme": "7", "tint": "-0.499984740745262"},
  663:             "low": {"theme": "7", "tint": "-0.499984740745262"},
  664:         },  # 22
  665:         {
  666:             "series": {"theme": "8", "tint": "0.39997558519241921"},
  667:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  668:             "markers": {"theme": "8", "tint": "0.79998168889431442"},
  669:             "first": {"theme": "8", "tint": "-0.249977111117893"},
  670:             "last": {"theme": "8", "tint": "-0.249977111117893"},
  671:             "high": {"theme": "8", "tint": "-0.499984740745262"},
  672:             "low": {"theme": "8", "tint": "-0.499984740745262"},
  673:         },  # 23
  674:         {
  675:             "series": {"theme": "9", "tint": "0.39997558519241921"},
  676:             "negative": {"theme": "0", "tint": "-0.499984740745262"},
  677:             "markers": {"theme": "9", "tint": "0.79998168889431442"},
  678:             "first": {"theme": "9", "tint": "-0.249977111117893"},
  679:             "last": {"theme": "9", "tint": "-0.249977111117893"},
  680:             "high": {"theme": "9", "tint": "-0.499984740745262"},
  681:             "low": {"theme": "9", "tint": "-0.499984740745262"},
  682:         },  # 24
  683:         {
  684:             "series": {"theme": "1", "tint": "0.499984740745262"},
  685:             "negative": {"theme": "1", "tint": "0.249977111117893"},
  686:             "markers": {"theme": "1", "tint": "0.249977111117893"},
  687:             "first": {"theme": "1", "tint": "0.249977111117893"},
  688:             "last": {"theme": "1", "tint": "0.249977111117893"},
  689:             "high": {"theme": "1", "tint": "0.249977111117893"},
  690:             "low": {"theme": "1", "tint": "0.249977111117893"},
  691:         },  # 25
  692:         {
  693:             "series": {"theme": "1", "tint": "0.34998626667073579"},
  694:             "negative": {"theme": "0", "tint": "-0.249977111117893"},
  695:             "markers": {"theme": "0", "tint": "-0.249977111117893"},
  696:             "first": {"theme": "0", "tint": "-0.249977111117893"},
  697:             "last": {"theme": "0", "tint": "-0.249977111117893"},
  698:             "high": {"theme": "0", "tint": "-0.249977111117893"},
  699:             "low": {"theme": "0", "tint": "-0.249977111117893"},
  700:         },  # 26
  701:         {
  702:             "series": {"rgb": "FF323232"},
  703:             "negative": {"rgb": "FFD00000"},
  704:             "markers": {"rgb": "FFD00000"},
  705:             "first": {"rgb": "FFD00000"},
  706:             "last": {"rgb": "FFD00000"},
  707:             "high": {"rgb": "FFD00000"},
  708:             "low": {"rgb": "FFD00000"},
  709:         },  # 27
  710:         {
  711:             "series": {"rgb": "FF000000"},
  712:             "negative": {"rgb": "FF0070C0"},
  713:             "markers": {"rgb": "FF0070C0"},
  714:             "first": {"rgb": "FF0070C0"},
  715:             "last": {"rgb": "FF0070C0"},
  716:             "high": {"rgb": "FF0070C0"},
  717:             "low": {"rgb": "FF0070C0"},
  718:         },  # 28
  719:         {
  720:             "series": {"rgb": "FF376092"},
  721:             "negative": {"rgb": "FFD00000"},
  722:             "markers": {"rgb": "FFD00000"},
  723:             "first": {"rgb": "FFD00000"},
  724:             "last": {"rgb": "FFD00000"},
  725:             "high": {"rgb": "FFD00000"},
  726:             "low": {"rgb": "FFD00000"},
  727:         },  # 29
  728:         {
  729:             "series": {"rgb": "FF0070C0"},
  730:             "negative": {"rgb": "FF000000"},
  731:             "markers": {"rgb": "FF000000"},
  732:             "first": {"rgb": "FF000000"},
  733:             "last": {"rgb": "FF000000"},
  734:             "high": {"rgb": "FF000000"},
  735:             "low": {"rgb": "FF000000"},
  736:         },  # 30
  737:         {
  738:             "series": {"rgb": "FF5F5F5F"},
  739:             "negative": {"rgb": "FFFFB620"},
  740:             "markers": {"rgb": "FFD70077"},
  741:             "first": {"rgb": "FF5687C2"},
  742:             "last": {"rgb": "FF359CEB"},
  743:             "high": {"rgb": "FF56BE79"},
  744:             "low": {"rgb": "FFFF5055"},
  745:         },  # 31
  746:         {
  747:             "series": {"rgb": "FF5687C2"},
  748:             "negative": {"rgb": "FFFFB620"},
  749:             "markers": {"rgb": "FFD70077"},
  750:             "first": {"rgb": "FF777777"},
  751:             "last": {"rgb": "FF359CEB"},
  752:             "high": {"rgb": "FF56BE79"},
  753:             "low": {"rgb": "FFFF5055"},
  754:         },  # 32
  755:         {
  756:             "series": {"rgb": "FFC6EFCE"},
  757:             "negative": {"rgb": "FFFFC7CE"},
  758:             "markers": {"rgb": "FF8CADD6"},
  759:             "first": {"rgb": "FFFFDC47"},
  760:             "last": {"rgb": "FFFFEB9C"},
  761:             "high": {"rgb": "FF60D276"},
  762:             "low": {"rgb": "FFFF5367"},
  763:         },  # 33
  764:         {
  765:             "series": {"rgb": "FF00B050"},
  766:             "negative": {"rgb": "FFFF0000"},
  767:             "markers": {"rgb": "FF0070C0"},
  768:             "first": {"rgb": "FFFFC000"},
  769:             "last": {"rgb": "FFFFC000"},
  770:             "high": {"rgb": "FF00B050"},
  771:             "low": {"rgb": "FFFF0000"},
  772:         },  # 34
  773:         {
  774:             "series": {"theme": "3"},
  775:             "negative": {"theme": "9"},
  776:             "markers": {"theme": "8"},
  777:             "first": {"theme": "4"},
  778:             "last": {"theme": "5"},
  779:             "high": {"theme": "6"},
  780:             "low": {"theme": "7"},
  781:         },  # 35
  782:         {
  783:             "series": {"theme": "1"},
  784:             "negative": {"theme": "9"},
  785:             "markers": {"theme": "8"},
  786:             "first": {"theme": "4"},
  787:             "last": {"theme": "5"},
  788:             "high": {"theme": "6"},
  789:             "low": {"theme": "7"},
  790:         },  # 36
  791:     ]
  792: 
  793:     return styles[style_id]
  794: 
  795: 
  796: def supported_datetime(dt):
  797:     # Determine is an argument is a supported datetime object.
  798:     return isinstance(
  799:         dt, (datetime.datetime, datetime.date, datetime.time, datetime.timedelta)
  800:     )
  801: 
  802: 
  803: def remove_datetime_timezone(dt_obj, remove_timezone):
  804:     # Excel doesn't support timezones in datetimes/times so we remove the
  805:     # tzinfo from the object if the user has specified that option in the
  806:     # constructor.
  807:     if remove_timezone:
  808:         dt_obj = dt_obj.replace(tzinfo=None)
  809:     else:
  810:         if dt_obj.tzinfo:
  811:             raise TypeError(
  812:                 "Excel doesn't support timezones in datetimes. "
  813:                 "Set the tzinfo in the datetime/time object to None or "
  814:                 "use the 'remove_timezone' Workbook() option"
  815:             )
  816: 
  817:     return dt_obj
  818: 
  819: 
  820: def datetime_to_excel_datetime(dt_obj, date_1904, remove_timezone):
  821:     # Convert a datetime object to an Excel serial date and time. The integer
  822:     # part of the number stores the number of days since the epoch and the
  823:     # fractional part stores the percentage of the day.
  824:     date_type = dt_obj
  825:     is_timedelta = False
  826: 
  827:     if date_1904:
  828:         # Excel for Mac date epoch.
  829:         epoch = datetime.datetime(1904, 1, 1)
  830:     else:
  831:         # Default Excel epoch.
  832:         epoch = datetime.datetime(1899, 12, 31)
  833: 
  834:     # We handle datetime .datetime, .date and .time objects but convert
  835:     # them to datetime.datetime objects and process them in the same way.
  836:     if isinstance(dt_obj, datetime.datetime):
  837:         dt_obj = remove_datetime_timezone(dt_obj, remove_timezone)
  838:         delta = dt_obj - epoch
  839:     elif isinstance(dt_obj, datetime.date):
  840:         dt_obj = datetime.datetime.fromordinal(dt_obj.toordinal())
  841:         delta = dt_obj - epoch
  842:     elif isinstance(dt_obj, datetime.time):
  843:         dt_obj = datetime.datetime.combine(epoch, dt_obj)
  844:         dt_obj = remove_datetime_timezone(dt_obj, remove_timezone)
  845:         delta = dt_obj - epoch
  846:     elif isinstance(dt_obj, datetime.timedelta):
  847:         is_timedelta = True
  848:         delta = dt_obj
  849:     else:
  850:         raise TypeError("Unknown or unsupported datetime type")
  851: 
  852:     # Convert a Python datetime.datetime value to an Excel date number.
  853:     excel_time = delta.days + (
  854:         float(delta.seconds) + float(delta.microseconds) / 1e6
  855:     ) / (60 * 60 * 24)
  856: 
  857:     # The following is a workaround for the fact that in Excel a time only
  858:     # value is represented as 1899-12-31+time whereas in datetime.datetime()
  859:     # it is 1900-1-1+time so we need to subtract the 1 day difference.
  860:     if isinstance(date_type, datetime.datetime) and dt_obj.isocalendar() == (
  861:         1900,
  862:         1,
  863:         1,
  864:     ):
  865:         excel_time -= 1
  866: 
  867:     # Account for Excel erroneously treating 1900 as a leap year.
  868:     if not date_1904 and not is_timedelta and excel_time > 59:
  869:         excel_time += 1
  870: 
  871:     return excel_time
  872: 
  873: 
  874: def preserve_whitespace(string):
  875:     # Check if a string has leading or trailing whitespace that requires a
  876:     # "preserve" attribute.
  877:     if re_leading.search(string) or re_trailing.search(string):
  878:         return True
  879:     else:
  880:         return False
  881: 
  882: 
  883: def get_image_properties(filename, image_data):
  884:     # Extract dimension information from the image file.
  885:     height = 0
  886:     width = 0
  887:     x_dpi = 96
  888:     y_dpi = 96
  889: 
  890:     if not image_data:
  891:         # Open the image file and read in the data.
  892:         fh = open(filename, "rb")
  893:         data = fh.read()
  894:     else:
  895:         # Read the image data from the user supplied byte stream.
  896:         data = image_data.getvalue()
  897: 
  898:     digest = hashlib.sha256(data).hexdigest()
  899: 
  900:     # Get the image filename without the path.
  901:     image_name = os.path.basename(filename)
  902: 
  903:     # Look for some common image file markers.
  904:     marker1 = unpack("3s", data[1:4])[0]
  905:     marker2 = unpack(">H", data[:2])[0]
  906:     marker3 = unpack("2s", data[:2])[0]
  907:     marker4 = unpack("<L", data[:4])[0]
  908:     marker5 = (unpack("4s", data[40:44]))[0]
  909:     marker6 = unpack("4s", data[:4])[0]
  910: 
  911:     png_marker = b"PNG"
  912:     bmp_marker = b"BM"
  913:     emf_marker = b" EMF"
  914:     gif_marker = b"GIF8"
  915: 
  916:     if marker1 == png_marker:
  917:         (image_type, width, height, x_dpi, y_dpi) = _process_png(data)
  918: 
  919:     elif marker2 == 0xFFD8:
  920:         (image_type, width, height, x_dpi, y_dpi) = _process_jpg(data)
  921: 
  922:     elif marker3 == bmp_marker:
  923:         (image_type, width, height) = _process_bmp(data)
  924: 
  925:     elif marker4 == 0x9AC6CDD7:
  926:         (image_type, width, height, x_dpi, y_dpi) = _process_wmf(data)
  927: 
  928:     elif marker4 == 1 and marker5 == emf_marker:
  929:         (image_type, width, height, x_dpi, y_dpi) = _process_emf(data)
  930: 
  931:     elif marker6 == gif_marker:
  932:         (image_type, width, height, x_dpi, y_dpi) = _process_gif(data)
  933: 
  934:     else:
  935:         raise UnsupportedImageFormat(
  936:             "%s: Unknown or unsupported image file format." % filename
  937:         )
  938: 
  939:     # Check that we found the required data.
  940:     if not height or not width:
  941:         raise UndefinedImageSize("%s: no size data found in image file." % filename)
  942: 
  943:     if not image_data:
  944:         fh.close()
  945: 
  946:     # Set a default dpi for images with 0 dpi.
  947:     if x_dpi == 0:
  948:         x_dpi = 96
  949:     if y_dpi == 0:
  950:         y_dpi = 96
  951: 
  952:     return image_type, width, height, image_name, x_dpi, y_dpi, digest
  953: 
  954: 
  955: def _process_png(data):
  956:     # Extract width and height information from a PNG file.
  957:     offset = 8
  958:     data_length = len(data)
  959:     end_marker = False
  960:     width = 0
  961:     height = 0
  962:     x_dpi = 96
  963:     y_dpi = 96
  964: 
  965:     # Search through the image data to read the height and width in the
  966:     # IHDR element. Also read the DPI in the pHYs element.
  967:     while not end_marker and offset < data_length:
  968:         length = unpack(">I", data[offset + 0 : offset + 4])[0]
  969:         marker = unpack("4s", data[offset + 4 : offset + 8])[0]
  970: 
  971:         # Read the image dimensions.
  972:         if marker == b"IHDR":
  973:             width = unpack(">I", data[offset + 8 : offset + 12])[0]
  974:             height = unpack(">I", data[offset + 12 : offset + 16])[0]
  975: 
  976:         # Read the image DPI.
  977:         if marker == b"pHYs":
  978:             x_density = unpack(">I", data[offset + 8 : offset + 12])[0]
  979:             y_density = unpack(">I", data[offset + 12 : offset + 16])[0]
  980:             units = unpack("b", data[offset + 16 : offset + 17])[0]
  981: 
  982:             if units == 1:
  983:                 x_dpi = x_density * 0.0254
  984:                 y_dpi = y_density * 0.0254
  985: 
  986:         if marker == b"IEND":
  987:             end_marker = True
  988:             continue
  989: 
  990:         offset = offset + length + 12
  991: 
  992:     return "png", width, height, x_dpi, y_dpi
  993: 
  994: 
  995: def _process_jpg(data):
  996:     # Extract width and height information from a JPEG file.
  997:     offset = 2
  998:     data_length = len(data)
  999:     end_marker = False
 1000:     width = 0
 1001:     height = 0
 1002:     x_dpi = 96
 1003:     y_dpi = 96
 1004: 
 1005:     # Search through the image data to read the JPEG markers.
 1006:     while not end_marker and offset < data_length:
 1007:         marker = unpack(">H", data[offset + 0 : offset + 2])[0]
 1008:         length = unpack(">H", data[offset + 2 : offset + 4])[0]
 1009: 
 1010:         # Read the height and width in the 0xFFCn elements (except C4, C8
 1011:         # and CC which aren't SOF markers).
 1012:         if (
 1013:             (marker & 0xFFF0) == 0xFFC0
 1014:             and marker != 0xFFC4
 1015:             and marker != 0xFFC8
 1016:             and marker != 0xFFCC
 1017:         ):
 1018:             height = unpack(">H", data[offset + 5 : offset + 7])[0]
 1019:             width = unpack(">H", data[offset + 7 : offset + 9])[0]
 1020: 
 1021:         # Read the DPI in the 0xFFE0 element.
 1022:         if marker == 0xFFE0:
 1023:             units = unpack("b", data[offset + 11 : offset + 12])[0]
 1024:             x_density = unpack(">H", data[offset + 12 : offset + 14])[0]
 1025:             y_density = unpack(">H", data[offset + 14 : offset + 16])[0]
 1026: 
 1027:             if units == 1:
 1028:                 x_dpi = x_density
 1029:                 y_dpi = y_density
 1030: 
 1031:             if units == 2:
 1032:                 x_dpi = x_density * 2.54
 1033:                 y_dpi = y_density * 2.54
 1034: 
 1035:             # Workaround for incorrect dpi.
 1036:             if x_dpi == 1:
 1037:                 x_dpi = 96
 1038:             if y_dpi == 1:
 1039:                 y_dpi = 96
 1040: 
 1041:         if marker == 0xFFDA:
 1042:             end_marker = True
 1043:             continue
 1044: 
 1045:         offset = offset + length + 2
 1046: 
 1047:     return "jpeg", width, height, x_dpi, y_dpi
 1048: 
 1049: 
 1050: def _process_gif(data):
 1051:     # Extract width and height information from a GIF file.
 1052:     x_dpi = 96
 1053:     y_dpi = 96
 1054: 
 1055:     width = unpack("<h", data[6:8])[0]
 1056:     height = unpack("<h", data[8:10])[0]
 1057: 
 1058:     return "gif", width, height, x_dpi, y_dpi
 1059: 
 1060: 
 1061: def _process_bmp(data):
 1062:     # Extract width and height information from a BMP file.
 1063:     width = unpack("<L", data[18:22])[0]
 1064:     height = unpack("<L", data[22:26])[0]
 1065:     return "bmp", width, height
 1066: 
 1067: 
 1068: def _process_wmf(data):
 1069:     # Extract width and height information from a WMF file.
 1070:     x_dpi = 96
 1071:     y_dpi = 96
 1072: 
 1073:     # Read the bounding box, measured in logical units.
 1074:     x1 = unpack("<h", data[6:8])[0]
 1075:     y1 = unpack("<h", data[8:10])[0]
 1076:     x2 = unpack("<h", data[10:12])[0]
 1077:     y2 = unpack("<h", data[12:14])[0]
 1078: 
 1079:     # Read the number of logical units per inch. Used to scale the image.
 1080:     inch = unpack("<H", data[14:16])[0]
 1081: 
 1082:     # Convert to rendered height and width.
 1083:     width = float((x2 - x1) * x_dpi) / inch
 1084:     height = float((y2 - y1) * y_dpi) / inch
 1085: 
 1086:     return "wmf", width, height, x_dpi, y_dpi
 1087: 
 1088: 
 1089: def _process_emf(data):
 1090:     # Extract width and height information from a EMF file.
 1091: 
 1092:     # Read the bounding box, measured in logical units.
 1093:     bound_x1 = unpack("<l", data[8:12])[0]
 1094:     bound_y1 = unpack("<l", data[12:16])[0]
 1095:     bound_x2 = unpack("<l", data[16:20])[0]
 1096:     bound_y2 = unpack("<l", data[20:24])[0]
 1097: 
 1098:     # Convert the bounds to width and height.
 1099:     width = bound_x2 - bound_x1
 1100:     height = bound_y2 - bound_y1
 1101: 
 1102:     # Read the rectangular frame in units of 0.01mm.
 1103:     frame_x1 = unpack("<l", data[24:28])[0]
 1104:     frame_y1 = unpack("<l", data[28:32])[0]
 1105:     frame_x2 = unpack("<l", data[32:36])[0]
 1106:     frame_y2 = unpack("<l", data[36:40])[0]
 1107: 
 1108:     # Convert the frame bounds to mm width and height.
 1109:     width_mm = 0.01 * (frame_x2 - frame_x1)
 1110:     height_mm = 0.01 * (frame_y2 - frame_y1)
 1111: 
 1112:     # Get the dpi based on the logical size.
 1113:     x_dpi = width * 25.4 / width_mm
 1114:     y_dpi = height * 25.4 / height_mm
 1115: 
 1116:     # This is to match Excel's calculation. It is probably to account for
 1117:     # the fact that the bounding box is inclusive-inclusive. Or a bug.
 1118:     width += 1
 1119:     height += 1
 1120: 
 1121:     return "emf", width, height, x_dpi, y_dpi
