    1: """Implementation of __array_function__ overrides from NEP-18."""
    2: import collections
    3: import functools
    4: 
    5: from numpy._core._multiarray_umath import (
    6:     _ArrayFunctionDispatcher,
    7:     _get_implementing_args,
    8:     add_docstring,
    9: )
   10: from numpy._utils import set_module  # noqa: F401
   11: from numpy._utils._inspect import getargspec
   12: 
   13: ARRAY_FUNCTIONS = set()
   14: 
   15: array_function_like_doc = (
   16:     """like : array_like, optional
   17:         Reference object to allow the creation of arrays which are not
   18:         NumPy arrays. If an array-like passed in as ``like`` supports
   19:         the ``__array_function__`` protocol, the result will be defined
   20:         by it. In this case, it ensures the creation of an array object
   21:         compatible with that passed in via this argument."""
   22: )
   23: 
   24: def get_array_function_like_doc(public_api, docstring_template=""):
   25:     ARRAY_FUNCTIONS.add(public_api)
   26:     docstring = public_api.__doc__ or docstring_template
   27:     return docstring.replace("${ARRAY_FUNCTION_LIKE}", array_function_like_doc)
   28: 
   29: def finalize_array_function_like(public_api):
   30:     public_api.__doc__ = get_array_function_like_doc(public_api)
   31:     return public_api
   32: 
   33: 
   34: add_docstring(
   35:     _ArrayFunctionDispatcher,
   36:     """
   37:     Class to wrap functions with checks for __array_function__ overrides.
   38: 
   39:     All arguments are required, and can only be passed by position.
   40: 
   41:     Parameters
   42:     ----------
   43:     dispatcher : function or None
   44:         The dispatcher function that returns a single sequence-like object
   45:         of all arguments relevant.  It must have the same signature (except
   46:         the default values) as the actual implementation.
   47:         If ``None``, this is a ``like=`` dispatcher and the
   48:         ``_ArrayFunctionDispatcher`` must be called with ``like`` as the
   49:         first (additional and positional) argument.
   50:     implementation : function
   51:         Function that implements the operation on NumPy arrays without
   52:         overrides.  Arguments passed calling the ``_ArrayFunctionDispatcher``
   53:         will be forwarded to this (and the ``dispatcher``) as if using
   54:         ``*args, **kwargs``.
   55: 
   56:     Attributes
   57:     ----------
   58:     _implementation : function
   59:         The original implementation passed in.
   60:     """)
   61: 
   62: 
   63: # exposed for testing purposes; used internally by _ArrayFunctionDispatcher
   64: add_docstring(
   65:     _get_implementing_args,
   66:     """
   67:     Collect arguments on which to call __array_function__.
   68: 
   69:     Parameters
   70:     ----------
   71:     relevant_args : iterable of array-like
   72:         Iterable of possibly array-like arguments to check for
   73:         __array_function__ methods.
   74: 
   75:     Returns
   76:     -------
   77:     Sequence of arguments with __array_function__ methods, in the order in
   78:     which they should be called.
   79:     """)
   80: 
   81: 
   82: ArgSpec = collections.namedtuple('ArgSpec', 'args varargs keywords defaults')
   83: 
   84: 
   85: def verify_matching_signatures(implementation, dispatcher):
   86:     """Verify that a dispatcher function has the right signature."""
   87:     implementation_spec = ArgSpec(*getargspec(implementation))
   88:     dispatcher_spec = ArgSpec(*getargspec(dispatcher))
   89: 
   90:     if (implementation_spec.args != dispatcher_spec.args or
   91:             implementation_spec.varargs != dispatcher_spec.varargs or
   92:             implementation_spec.keywords != dispatcher_spec.keywords or
   93:             (bool(implementation_spec.defaults) !=
   94:              bool(dispatcher_spec.defaults)) or
   95:             (implementation_spec.defaults is not None and
   96:              len(implementation_spec.defaults) !=
   97:              len(dispatcher_spec.defaults))):
   98:         raise RuntimeError('implementation and dispatcher for %s have '
   99:                            'different function signatures' % implementation)
  100: 
  101:     if implementation_spec.defaults is not None:
  102:         if dispatcher_spec.defaults != (None,) * len(dispatcher_spec.defaults):
  103:             raise RuntimeError('dispatcher functions can only use None for '
  104:                                'default argument values')
  105: 
  106: 
  107: def array_function_dispatch(dispatcher=None, module=None, verify=True,
  108:                             docs_from_dispatcher=False):
  109:     """Decorator for adding dispatch with the __array_function__ protocol.
  110: 
  111:     See NEP-18 for example usage.
  112: 
  113:     Parameters
  114:     ----------
  115:     dispatcher : callable or None
  116:         Function that when called like ``dispatcher(*args, **kwargs)`` with
  117:         arguments from the NumPy function call returns an iterable of
  118:         array-like arguments to check for ``__array_function__``.
  119: 
  120:         If `None`, the first argument is used as the single `like=` argument
  121:         and not passed on.  A function implementing `like=` must call its
  122:         dispatcher with `like` as the first non-keyword argument.
  123:     module : str, optional
  124:         __module__ attribute to set on new function, e.g., ``module='numpy'``.
  125:         By default, module is copied from the decorated function.
  126:     verify : bool, optional
  127:         If True, verify the that the signature of the dispatcher and decorated
  128:         function signatures match exactly: all required and optional arguments
  129:         should appear in order with the same names, but the default values for
  130:         all optional arguments should be ``None``. Only disable verification
  131:         if the dispatcher's signature needs to deviate for some particular
  132:         reason, e.g., because the function has a signature like
  133:         ``func(*args, **kwargs)``.
  134:     docs_from_dispatcher : bool, optional
  135:         If True, copy docs from the dispatcher function onto the dispatched
  136:         function, rather than from the implementation. This is useful for
  137:         functions defined in C, which otherwise don't have docstrings.
  138: 
  139:     Returns
  140:     -------
  141:     Function suitable for decorating the implementation of a NumPy function.
  142: 
  143:     """
  144:     def decorator(implementation):
  145:         if verify:
  146:             if dispatcher is not None:
  147:                 verify_matching_signatures(implementation, dispatcher)
  148:             else:
  149:                 # Using __code__ directly similar to verify_matching_signature
  150:                 co = implementation.__code__
  151:                 last_arg = co.co_argcount + co.co_kwonlyargcount - 1
  152:                 last_arg = co.co_varnames[last_arg]
  153:                 if last_arg != "like" or co.co_kwonlyargcount == 0:
  154:                     raise RuntimeError(
  155:                         "__array_function__ expects `like=` to be the last "
  156:                         "argument and a keyword-only argument. "
  157:                         f"{implementation} does not seem to comply.")
  158: 
  159:         if docs_from_dispatcher:
  160:             add_docstring(implementation, dispatcher.__doc__)
  161: 
  162:         public_api = _ArrayFunctionDispatcher(dispatcher, implementation)
  163:         public_api = functools.wraps(implementation)(public_api)
  164: 
  165:         if module is not None:
  166:             public_api.__module__ = module
  167: 
  168:         ARRAY_FUNCTIONS.add(public_api)
  169: 
  170:         return public_api
  171: 
  172:     return decorator
  173: 
  174: 
  175: def array_function_from_dispatcher(
  176:         implementation, module=None, verify=True, docs_from_dispatcher=True):
  177:     """Like array_function_dispatcher, but with function arguments flipped."""
  178: 
  179:     def decorator(dispatcher):
  180:         return array_function_dispatch(
  181:             dispatcher, module, verify=verify,
  182:             docs_from_dispatcher=docs_from_dispatcher)(implementation)
  183:     return decorator
