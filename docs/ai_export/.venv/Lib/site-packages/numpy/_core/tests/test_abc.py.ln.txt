    1: import numbers
    2: 
    3: import numpy as np
    4: from numpy._core.numerictypes import sctypes
    5: from numpy.testing import assert_
    6: 
    7: 
    8: class TestABC:
    9:     def test_abstract(self):
   10:         assert_(issubclass(np.number, numbers.Number))
   11: 
   12:         assert_(issubclass(np.inexact, numbers.Complex))
   13:         assert_(issubclass(np.complexfloating, numbers.Complex))
   14:         assert_(issubclass(np.floating, numbers.Real))
   15: 
   16:         assert_(issubclass(np.integer, numbers.Integral))
   17:         assert_(issubclass(np.signedinteger, numbers.Integral))
   18:         assert_(issubclass(np.unsignedinteger, numbers.Integral))
   19: 
   20:     def test_floats(self):
   21:         for t in sctypes['float']:
   22:             assert_(isinstance(t(), numbers.Real),
   23:                     f"{t.__name__} is not instance of Real")
   24:             assert_(issubclass(t, numbers.Real),
   25:                     f"{t.__name__} is not subclass of Real")
   26:             assert_(not isinstance(t(), numbers.Rational),
   27:                     f"{t.__name__} is instance of Rational")
   28:             assert_(not issubclass(t, numbers.Rational),
   29:                     f"{t.__name__} is subclass of Rational")
   30: 
   31:     def test_complex(self):
   32:         for t in sctypes['complex']:
   33:             assert_(isinstance(t(), numbers.Complex),
   34:                     f"{t.__name__} is not instance of Complex")
   35:             assert_(issubclass(t, numbers.Complex),
   36:                     f"{t.__name__} is not subclass of Complex")
   37:             assert_(not isinstance(t(), numbers.Real),
   38:                     f"{t.__name__} is instance of Real")
   39:             assert_(not issubclass(t, numbers.Real),
   40:                     f"{t.__name__} is subclass of Real")
   41: 
   42:     def test_int(self):
   43:         for t in sctypes['int']:
   44:             assert_(isinstance(t(), numbers.Integral),
   45:                     f"{t.__name__} is not instance of Integral")
   46:             assert_(issubclass(t, numbers.Integral),
   47:                     f"{t.__name__} is not subclass of Integral")
   48: 
   49:     def test_uint(self):
   50:         for t in sctypes['uint']:
   51:             assert_(isinstance(t(), numbers.Integral),
   52:                     f"{t.__name__} is not instance of Integral")
   53:             assert_(issubclass(t, numbers.Integral),
   54:                     f"{t.__name__} is not subclass of Integral")
