    1: """
    2: Tests for numpy/_core/src/multiarray/conversion_utils.c
    3: """
    4: import re
    5: 
    6: import numpy._core._multiarray_tests as mt
    7: import pytest
    8: 
    9: from numpy._core.multiarray import CLIP, RAISE, WRAP
   10: from numpy.testing import assert_raises
   11: 
   12: 
   13: class StringConverterTestCase:
   14:     allow_bytes = True
   15:     case_insensitive = True
   16:     exact_match = False
   17:     warn = True
   18: 
   19:     def _check_value_error(self, val):
   20:         pattern = fr'\(got {re.escape(repr(val))}\)'
   21:         with pytest.raises(ValueError, match=pattern) as exc:
   22:             self.conv(val)
   23: 
   24:     def _check_conv_assert_warn(self, val, expected):
   25:         if self.warn:
   26:             with assert_raises(ValueError) as exc:
   27:                 assert self.conv(val) == expected
   28:         else:
   29:             assert self.conv(val) == expected
   30: 
   31:     def _check(self, val, expected):
   32:         """Takes valid non-deprecated inputs for converters,
   33:         runs converters on inputs, checks correctness of outputs,
   34:         warnings and errors"""
   35:         assert self.conv(val) == expected
   36: 
   37:         if self.allow_bytes:
   38:             assert self.conv(val.encode('ascii')) == expected
   39:         else:
   40:             with pytest.raises(TypeError):
   41:                 self.conv(val.encode('ascii'))
   42: 
   43:         if len(val) != 1:
   44:             if self.exact_match:
   45:                 self._check_value_error(val[:1])
   46:                 self._check_value_error(val + '\0')
   47:             else:
   48:                 self._check_conv_assert_warn(val[:1], expected)
   49: 
   50:         if self.case_insensitive:
   51:             if val != val.lower():
   52:                 self._check_conv_assert_warn(val.lower(), expected)
   53:             if val != val.upper():
   54:                 self._check_conv_assert_warn(val.upper(), expected)
   55:         else:
   56:             if val != val.lower():
   57:                 self._check_value_error(val.lower())
   58:             if val != val.upper():
   59:                 self._check_value_error(val.upper())
   60: 
   61:     def test_wrong_type(self):
   62:         # common cases which apply to all the below
   63:         with pytest.raises(TypeError):
   64:             self.conv({})
   65:         with pytest.raises(TypeError):
   66:             self.conv([])
   67: 
   68:     def test_wrong_value(self):
   69:         # nonsense strings
   70:         self._check_value_error('')
   71:         self._check_value_error('\N{greek small letter pi}')
   72: 
   73:         if self.allow_bytes:
   74:             self._check_value_error(b'')
   75:             # bytes which can't be converted to strings via utf8
   76:             self._check_value_error(b"\xFF")
   77:         if self.exact_match:
   78:             self._check_value_error("there's no way this is supported")
   79: 
   80: 
   81: class TestByteorderConverter(StringConverterTestCase):
   82:     """ Tests of PyArray_ByteorderConverter """
   83:     conv = mt.run_byteorder_converter
   84:     warn = False
   85: 
   86:     def test_valid(self):
   87:         for s in ['big', '>']:
   88:             self._check(s, 'NPY_BIG')
   89:         for s in ['little', '<']:
   90:             self._check(s, 'NPY_LITTLE')
   91:         for s in ['native', '=']:
   92:             self._check(s, 'NPY_NATIVE')
   93:         for s in ['ignore', '|']:
   94:             self._check(s, 'NPY_IGNORE')
   95:         for s in ['swap']:
   96:             self._check(s, 'NPY_SWAP')
   97: 
   98: 
   99: class TestSortkindConverter(StringConverterTestCase):
  100:     """ Tests of PyArray_SortkindConverter """
  101:     conv = mt.run_sortkind_converter
  102:     warn = False
  103: 
  104:     def test_valid(self):
  105:         self._check('quicksort', 'NPY_QUICKSORT')
  106:         self._check('heapsort', 'NPY_HEAPSORT')
  107:         self._check('mergesort', 'NPY_STABLESORT')  # alias
  108:         self._check('stable', 'NPY_STABLESORT')
  109: 
  110: 
  111: class TestSelectkindConverter(StringConverterTestCase):
  112:     """ Tests of PyArray_SelectkindConverter """
  113:     conv = mt.run_selectkind_converter
  114:     case_insensitive = False
  115:     exact_match = True
  116: 
  117:     def test_valid(self):
  118:         self._check('introselect', 'NPY_INTROSELECT')
  119: 
  120: 
  121: class TestSearchsideConverter(StringConverterTestCase):
  122:     """ Tests of PyArray_SearchsideConverter """
  123:     conv = mt.run_searchside_converter
  124: 
  125:     def test_valid(self):
  126:         self._check('left', 'NPY_SEARCHLEFT')
  127:         self._check('right', 'NPY_SEARCHRIGHT')
  128: 
  129: 
  130: class TestOrderConverter(StringConverterTestCase):
  131:     """ Tests of PyArray_OrderConverter """
  132:     conv = mt.run_order_converter
  133:     warn = False
  134: 
  135:     def test_valid(self):
  136:         self._check('c', 'NPY_CORDER')
  137:         self._check('f', 'NPY_FORTRANORDER')
  138:         self._check('a', 'NPY_ANYORDER')
  139:         self._check('k', 'NPY_KEEPORDER')
  140: 
  141:     def test_flatten_invalid_order(self):
  142:         # invalid after gh-14596
  143:         with pytest.raises(ValueError):
  144:             self.conv('Z')
  145:         for order in [False, True, 0, 8]:
  146:             with pytest.raises(TypeError):
  147:                 self.conv(order)
  148: 
  149: 
  150: class TestClipmodeConverter(StringConverterTestCase):
  151:     """ Tests of PyArray_ClipmodeConverter """
  152:     conv = mt.run_clipmode_converter
  153: 
  154:     def test_valid(self):
  155:         self._check('clip', 'NPY_CLIP')
  156:         self._check('wrap', 'NPY_WRAP')
  157:         self._check('raise', 'NPY_RAISE')
  158: 
  159:         # integer values allowed here
  160:         assert self.conv(CLIP) == 'NPY_CLIP'
  161:         assert self.conv(WRAP) == 'NPY_WRAP'
  162:         assert self.conv(RAISE) == 'NPY_RAISE'
  163: 
  164: 
  165: class TestCastingConverter(StringConverterTestCase):
  166:     """ Tests of PyArray_CastingConverter """
  167:     conv = mt.run_casting_converter
  168:     case_insensitive = False
  169:     exact_match = True
  170: 
  171:     def test_valid(self):
  172:         self._check("no", "NPY_NO_CASTING")
  173:         self._check("equiv", "NPY_EQUIV_CASTING")
  174:         self._check("safe", "NPY_SAFE_CASTING")
  175:         self._check("same_kind", "NPY_SAME_KIND_CASTING")
  176:         self._check("unsafe", "NPY_UNSAFE_CASTING")
  177: 
  178: 
  179: class TestIntpConverter:
  180:     """ Tests of PyArray_IntpConverter """
  181:     conv = mt.run_intp_converter
  182: 
  183:     def test_basic(self):
  184:         assert self.conv(1) == (1,)
  185:         assert self.conv((1, 2)) == (1, 2)
  186:         assert self.conv([1, 2]) == (1, 2)
  187:         assert self.conv(()) == ()
  188: 
  189:     def test_none(self):
  190:         with pytest.raises(TypeError):
  191:             assert self.conv(None) == ()
  192: 
  193:     def test_float(self):
  194:         with pytest.raises(TypeError):
  195:             self.conv(1.0)
  196:         with pytest.raises(TypeError):
  197:             self.conv([1, 1.0])
  198: 
  199:     def test_too_large(self):
  200:         with pytest.raises(ValueError):
  201:             self.conv(2**64)
  202: 
  203:     def test_too_many_dims(self):
  204:         assert self.conv([1] * 64) == (1,) * 64
  205:         with pytest.raises(ValueError):
  206:             self.conv([1] * 65)
