    1: import random
    2: 
    3: import pytest
    4: from numpy._core._multiarray_tests import identityhash_tester
    5: 
    6: 
    7: @pytest.mark.parametrize("key_length", [1, 3, 6])
    8: @pytest.mark.parametrize("length", [1, 16, 2000])
    9: def test_identity_hashtable(key_length, length):
   10:     # use a 30 object pool for everything (duplicates will happen)
   11:     pool = [object() for i in range(20)]
   12:     keys_vals = []
   13:     for i in range(length):
   14:         keys = tuple(random.choices(pool, k=key_length))
   15:         keys_vals.append((keys, random.choice(pool)))
   16: 
   17:     dictionary = dict(keys_vals)
   18: 
   19:     # add a random item at the end:
   20:     keys_vals.append(random.choice(keys_vals))
   21:     # the expected one could be different with duplicates:
   22:     expected = dictionary[keys_vals[-1][0]]
   23: 
   24:     res = identityhash_tester(key_length, keys_vals, replace=True)
   25:     assert res is expected
   26: 
   27:     if length == 1:
   28:         return
   29: 
   30:     # add a new item with a key that is already used and a new value, this
   31:     # should error if replace is False, see gh-26690
   32:     new_key = (keys_vals[1][0], object())
   33:     keys_vals[0] = new_key
   34:     with pytest.raises(RuntimeError):
   35:         identityhash_tester(key_length, keys_vals)
