    1: import pytest
    2: 
    3: from numpy._core._simd import targets
    4: 
    5: """
    6: This testing unit only for checking the sanity of common functionality,
    7: therefore all we need is just to take one submodule that represents any
    8: of enabled SIMD extensions to run the test on it and the second submodule
    9: required to run only one check related to the possibility of mixing
   10: the data types among each submodule.
   11: """
   12: npyvs = [npyv_mod for npyv_mod in targets.values() if npyv_mod and npyv_mod.simd]
   13: npyv, npyv2 = (npyvs + [None, None])[:2]
   14: 
   15: unsigned_sfx = ["u8", "u16", "u32", "u64"]
   16: signed_sfx = ["s8", "s16", "s32", "s64"]
   17: fp_sfx = []
   18: if npyv and npyv.simd_f32:
   19:     fp_sfx.append("f32")
   20: if npyv and npyv.simd_f64:
   21:     fp_sfx.append("f64")
   22: 
   23: int_sfx = unsigned_sfx + signed_sfx
   24: all_sfx = unsigned_sfx + int_sfx
   25: 
   26: @pytest.mark.skipif(not npyv, reason="could not find any SIMD extension with NPYV support")
   27: class Test_SIMD_MODULE:
   28: 
   29:     @pytest.mark.parametrize('sfx', all_sfx)
   30:     def test_num_lanes(self, sfx):
   31:         nlanes = getattr(npyv, "nlanes_" + sfx)
   32:         vector = getattr(npyv, "setall_" + sfx)(1)
   33:         assert len(vector) == nlanes
   34: 
   35:     @pytest.mark.parametrize('sfx', all_sfx)
   36:     def test_type_name(self, sfx):
   37:         vector = getattr(npyv, "setall_" + sfx)(1)
   38:         assert vector.__name__ == "npyv_" + sfx
   39: 
   40:     def test_raises(self):
   41:         a, b = [npyv.setall_u32(1)] * 2
   42:         for sfx in all_sfx:
   43:             vcb = lambda intrin: getattr(npyv, f"{intrin}_{sfx}")
   44:             pytest.raises(TypeError, vcb("add"), a)
   45:             pytest.raises(TypeError, vcb("add"), a, b, a)
   46:             pytest.raises(TypeError, vcb("setall"))
   47:             pytest.raises(TypeError, vcb("setall"), [1])
   48:             pytest.raises(TypeError, vcb("load"), 1)
   49:             pytest.raises(ValueError, vcb("load"), [1])
   50:             pytest.raises(ValueError, vcb("store"), [1], getattr(npyv, f"reinterpret_{sfx}_u32")(a))
   51: 
   52:     @pytest.mark.skipif(not npyv2, reason=(
   53:         "could not find a second SIMD extension with NPYV support"
   54:     ))
   55:     def test_nomix(self):
   56:         # mix among submodules isn't allowed
   57:         a = npyv.setall_u32(1)
   58:         a2 = npyv2.setall_u32(1)
   59:         pytest.raises(TypeError, npyv.add_u32, a2, a2)
   60:         pytest.raises(TypeError, npyv2.add_u32, a, a)
   61: 
   62:     @pytest.mark.parametrize('sfx', unsigned_sfx)
   63:     def test_unsigned_overflow(self, sfx):
   64:         nlanes = getattr(npyv, "nlanes_" + sfx)
   65:         maxu = (1 << int(sfx[1:])) - 1
   66:         maxu_72 = (1 << 72) - 1
   67:         lane = getattr(npyv, "setall_" + sfx)(maxu_72)[0]
   68:         assert lane == maxu
   69:         lanes = getattr(npyv, "load_" + sfx)([maxu_72] * nlanes)
   70:         assert lanes == [maxu] * nlanes
   71:         lane = getattr(npyv, "setall_" + sfx)(-1)[0]
   72:         assert lane == maxu
   73:         lanes = getattr(npyv, "load_" + sfx)([-1] * nlanes)
   74:         assert lanes == [maxu] * nlanes
   75: 
   76:     @pytest.mark.parametrize('sfx', signed_sfx)
   77:     def test_signed_overflow(self, sfx):
   78:         nlanes = getattr(npyv, "nlanes_" + sfx)
   79:         maxs_72 = (1 << 71) - 1
   80:         lane = getattr(npyv, "setall_" + sfx)(maxs_72)[0]
   81:         assert lane == -1
   82:         lanes = getattr(npyv, "load_" + sfx)([maxs_72] * nlanes)
   83:         assert lanes == [-1] * nlanes
   84:         mins_72 = -1 << 71
   85:         lane = getattr(npyv, "setall_" + sfx)(mins_72)[0]
   86:         assert lane == 0
   87:         lanes = getattr(npyv, "load_" + sfx)([mins_72] * nlanes)
   88:         assert lanes == [0] * nlanes
   89: 
   90:     def test_truncate_f32(self):
   91:         if not npyv.simd_f32:
   92:             pytest.skip("F32 isn't support by the SIMD extension")
   93:         f32 = npyv.setall_f32(0.1)[0]
   94:         assert f32 != 0.1
   95:         assert round(f32, 1) == 0.1
   96: 
   97:     def test_compare(self):
   98:         data_range = range(npyv.nlanes_u32)
   99:         vdata = npyv.load_u32(data_range)
  100:         assert vdata == list(data_range)
  101:         assert vdata == tuple(data_range)
  102:         for i in data_range:
  103:             assert vdata[i] == data_range[i]
