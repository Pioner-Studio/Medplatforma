    1: import mmap
    2: import os
    3: import sys
    4: from pathlib import Path
    5: from tempfile import NamedTemporaryFile, TemporaryFile
    6: 
    7: import pytest
    8: 
    9: from numpy import (
   10:     add,
   11:     allclose,
   12:     arange,
   13:     asarray,
   14:     average,
   15:     isscalar,
   16:     memmap,
   17:     multiply,
   18:     ndarray,
   19:     prod,
   20:     subtract,
   21:     sum,
   22: )
   23: from numpy.testing import (
   24:     IS_PYPY,
   25:     assert_,
   26:     assert_array_equal,
   27:     assert_equal,
   28:     break_cycles,
   29:     suppress_warnings,
   30: )
   31: 
   32: 
   33: class TestMemmap:
   34:     def setup_method(self):
   35:         self.tmpfp = NamedTemporaryFile(prefix='mmap')
   36:         self.shape = (3, 4)
   37:         self.dtype = 'float32'
   38:         self.data = arange(12, dtype=self.dtype)
   39:         self.data.resize(self.shape)
   40: 
   41:     def teardown_method(self):
   42:         self.tmpfp.close()
   43:         self.data = None
   44:         if IS_PYPY:
   45:             break_cycles()
   46:             break_cycles()
   47: 
   48:     def test_roundtrip(self):
   49:         # Write data to file
   50:         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
   51:                     shape=self.shape)
   52:         fp[:] = self.data[:]
   53:         del fp  # Test __del__ machinery, which handles cleanup
   54: 
   55:         # Read data back from file
   56:         newfp = memmap(self.tmpfp, dtype=self.dtype, mode='r',
   57:                        shape=self.shape)
   58:         assert_(allclose(self.data, newfp))
   59:         assert_array_equal(self.data, newfp)
   60:         assert_equal(newfp.flags.writeable, False)
   61: 
   62:     def test_open_with_filename(self, tmp_path):
   63:         tmpname = tmp_path / 'mmap'
   64:         fp = memmap(tmpname, dtype=self.dtype, mode='w+',
   65:                        shape=self.shape)
   66:         fp[:] = self.data[:]
   67:         del fp
   68: 
   69:     def test_unnamed_file(self):
   70:         with TemporaryFile() as f:
   71:             fp = memmap(f, dtype=self.dtype, shape=self.shape)
   72:             del fp
   73: 
   74:     def test_attributes(self):
   75:         offset = 1
   76:         mode = "w+"
   77:         fp = memmap(self.tmpfp, dtype=self.dtype, mode=mode,
   78:                     shape=self.shape, offset=offset)
   79:         assert_equal(offset, fp.offset)
   80:         assert_equal(mode, fp.mode)
   81:         del fp
   82: 
   83:     def test_filename(self, tmp_path):
   84:         tmpname = tmp_path / "mmap"
   85:         fp = memmap(tmpname, dtype=self.dtype, mode='w+',
   86:                        shape=self.shape)
   87:         abspath = Path(os.path.abspath(tmpname))
   88:         fp[:] = self.data[:]
   89:         assert_equal(abspath, fp.filename)
   90:         b = fp[:1]
   91:         assert_equal(abspath, b.filename)
   92:         del b
   93:         del fp
   94: 
   95:     def test_path(self, tmp_path):
   96:         tmpname = tmp_path / "mmap"
   97:         fp = memmap(Path(tmpname), dtype=self.dtype, mode='w+',
   98:                        shape=self.shape)
   99:         # os.path.realpath does not resolve symlinks on Windows
  100:         # see: https://bugs.python.org/issue9949
  101:         # use Path.resolve, just as memmap class does internally
  102:         abspath = str(Path(tmpname).resolve())
  103:         fp[:] = self.data[:]
  104:         assert_equal(abspath, str(fp.filename.resolve()))
  105:         b = fp[:1]
  106:         assert_equal(abspath, str(b.filename.resolve()))
  107:         del b
  108:         del fp
  109: 
  110:     def test_filename_fileobj(self):
  111:         fp = memmap(self.tmpfp, dtype=self.dtype, mode="w+",
  112:                     shape=self.shape)
  113:         assert_equal(fp.filename, self.tmpfp.name)
  114: 
  115:     @pytest.mark.skipif(sys.platform == 'gnu0',
  116:                         reason="Known to fail on hurd")
  117:     def test_flush(self):
  118:         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
  119:                     shape=self.shape)
  120:         fp[:] = self.data[:]
  121:         assert_equal(fp[0], self.data[0])
  122:         fp.flush()
  123: 
  124:     def test_del(self):
  125:         # Make sure a view does not delete the underlying mmap
  126:         fp_base = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
  127:                     shape=self.shape)
  128:         fp_base[0] = 5
  129:         fp_view = fp_base[0:1]
  130:         assert_equal(fp_view[0], 5)
  131:         del fp_view
  132:         # Should still be able to access and assign values after
  133:         # deleting the view
  134:         assert_equal(fp_base[0], 5)
  135:         fp_base[0] = 6
  136:         assert_equal(fp_base[0], 6)
  137: 
  138:     def test_arithmetic_drops_references(self):
  139:         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
  140:                     shape=self.shape)
  141:         tmp = (fp + 10)
  142:         if isinstance(tmp, memmap):
  143:             assert_(tmp._mmap is not fp._mmap)
  144: 
  145:     def test_indexing_drops_references(self):
  146:         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
  147:                     shape=self.shape)
  148:         tmp = fp[(1, 2), (2, 3)]
  149:         if isinstance(tmp, memmap):
  150:             assert_(tmp._mmap is not fp._mmap)
  151: 
  152:     def test_slicing_keeps_references(self):
  153:         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
  154:                     shape=self.shape)
  155:         assert_(fp[:2, :2]._mmap is fp._mmap)
  156: 
  157:     def test_view(self):
  158:         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
  159:         new1 = fp.view()
  160:         new2 = new1.view()
  161:         assert_(new1.base is fp)
  162:         assert_(new2.base is fp)
  163:         new_array = asarray(fp)
  164:         assert_(new_array.base is fp)
  165: 
  166:     def test_ufunc_return_ndarray(self):
  167:         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
  168:         fp[:] = self.data
  169: 
  170:         with suppress_warnings() as sup:
  171:             sup.filter(FutureWarning, "np.average currently does not preserve")
  172:             for unary_op in [sum, average, prod]:
  173:                 result = unary_op(fp)
  174:                 assert_(isscalar(result))
  175:                 assert_(result.__class__ is self.data[0, 0].__class__)
  176: 
  177:                 assert_(unary_op(fp, axis=0).__class__ is ndarray)
  178:                 assert_(unary_op(fp, axis=1).__class__ is ndarray)
  179: 
  180:         for binary_op in [add, subtract, multiply]:
  181:             assert_(binary_op(fp, self.data).__class__ is ndarray)
  182:             assert_(binary_op(self.data, fp).__class__ is ndarray)
  183:             assert_(binary_op(fp, fp).__class__ is ndarray)
  184: 
  185:         fp += 1
  186:         assert fp.__class__ is memmap
  187:         add(fp, 1, out=fp)
  188:         assert fp.__class__ is memmap
  189: 
  190:     def test_getitem(self):
  191:         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
  192:         fp[:] = self.data
  193: 
  194:         assert_(fp[1:, :-1].__class__ is memmap)
  195:         # Fancy indexing returns a copy that is not memmapped
  196:         assert_(fp[[0, 1]].__class__ is ndarray)
  197: 
  198:     def test_memmap_subclass(self):
  199:         class MemmapSubClass(memmap):
  200:             pass
  201: 
  202:         fp = MemmapSubClass(self.tmpfp, dtype=self.dtype, shape=self.shape)
  203:         fp[:] = self.data
  204: 
  205:         # We keep previous behavior for subclasses of memmap, i.e. the
  206:         # ufunc and __getitem__ output is never turned into a ndarray
  207:         assert_(sum(fp, axis=0).__class__ is MemmapSubClass)
  208:         assert_(sum(fp).__class__ is MemmapSubClass)
  209:         assert_(fp[1:, :-1].__class__ is MemmapSubClass)
  210:         assert fp[[0, 1]].__class__ is MemmapSubClass
  211: 
  212:     def test_mmap_offset_greater_than_allocation_granularity(self):
  213:         size = 5 * mmap.ALLOCATIONGRANULARITY
  214:         offset = mmap.ALLOCATIONGRANULARITY + 1
  215:         fp = memmap(self.tmpfp, shape=size, mode='w+', offset=offset)
  216:         assert_(fp.offset == offset)
  217: 
  218:     def test_empty_array_with_offset_multiple_of_allocation_granularity(self):
  219:         self.tmpfp.write(b'a' * mmap.ALLOCATIONGRANULARITY)
  220:         size = 0
  221:         offset = mmap.ALLOCATIONGRANULARITY
  222:         fp = memmap(self.tmpfp, shape=size, mode='w+', offset=offset)
  223:         assert_equal(fp.offset, offset)
  224: 
  225:     def test_no_shape(self):
  226:         self.tmpfp.write(b'a' * 16)
  227:         mm = memmap(self.tmpfp, dtype='float64')
  228:         assert_equal(mm.shape, (2,))
  229: 
  230:     def test_empty_array(self):
  231:         # gh-12653
  232:         with pytest.raises(ValueError, match='empty file'):
  233:             memmap(self.tmpfp, shape=(0, 4), mode='r')
  234: 
  235:         # gh-27723
  236:         # empty memmap works with mode in ('w+','r+')
  237:         memmap(self.tmpfp, shape=(0, 4), mode='w+')
  238: 
  239:         # ok now the file is not empty
  240:         memmap(self.tmpfp, shape=(0, 4), mode='w+')
  241: 
  242:     def test_shape_type(self):
  243:         memmap(self.tmpfp, shape=3, mode='w+')
  244:         memmap(self.tmpfp, shape=self.shape, mode='w+')
  245:         memmap(self.tmpfp, shape=list(self.shape), mode='w+')
  246:         memmap(self.tmpfp, shape=asarray(self.shape), mode='w+')
