    1: import pytest
    2: 
    3: import numpy as np
    4: 
    5: info = np.__array_namespace_info__()
    6: 
    7: 
    8: def test_capabilities():
    9:     caps = info.capabilities()
   10:     assert caps["boolean indexing"] is True
   11:     assert caps["data-dependent shapes"] is True
   12: 
   13:     # This will be added in the 2024.12 release of the array API standard.
   14: 
   15:     # assert caps["max rank"] == 64
   16:     # np.zeros((1,)*64)
   17:     # with pytest.raises(ValueError):
   18:     #     np.zeros((1,)*65)
   19: 
   20: 
   21: def test_default_device():
   22:     assert info.default_device() == "cpu" == np.asarray(0).device
   23: 
   24: 
   25: def test_default_dtypes():
   26:     dtypes = info.default_dtypes()
   27:     assert dtypes["real floating"] == np.float64 == np.asarray(0.0).dtype
   28:     assert dtypes["complex floating"] == np.complex128 == \
   29:         np.asarray(0.0j).dtype
   30:     assert dtypes["integral"] == np.intp == np.asarray(0).dtype
   31:     assert dtypes["indexing"] == np.intp == np.argmax(np.zeros(10)).dtype
   32: 
   33:     with pytest.raises(ValueError, match="Device not understood"):
   34:         info.default_dtypes(device="gpu")
   35: 
   36: 
   37: def test_dtypes_all():
   38:     dtypes = info.dtypes()
   39:     assert dtypes == {
   40:         "bool": np.bool_,
   41:         "int8": np.int8,
   42:         "int16": np.int16,
   43:         "int32": np.int32,
   44:         "int64": np.int64,
   45:         "uint8": np.uint8,
   46:         "uint16": np.uint16,
   47:         "uint32": np.uint32,
   48:         "uint64": np.uint64,
   49:         "float32": np.float32,
   50:         "float64": np.float64,
   51:         "complex64": np.complex64,
   52:         "complex128": np.complex128,
   53:     }
   54: 
   55: 
   56: dtype_categories = {
   57:     "bool": {"bool": np.bool_},
   58:     "signed integer": {
   59:         "int8": np.int8,
   60:         "int16": np.int16,
   61:         "int32": np.int32,
   62:         "int64": np.int64,
   63:     },
   64:     "unsigned integer": {
   65:         "uint8": np.uint8,
   66:         "uint16": np.uint16,
   67:         "uint32": np.uint32,
   68:         "uint64": np.uint64,
   69:     },
   70:     "integral": ("signed integer", "unsigned integer"),
   71:     "real floating": {"float32": np.float32, "float64": np.float64},
   72:     "complex floating": {"complex64": np.complex64, "complex128":
   73:                          np.complex128},
   74:     "numeric": ("integral", "real floating", "complex floating"),
   75: }
   76: 
   77: 
   78: @pytest.mark.parametrize("kind", dtype_categories)
   79: def test_dtypes_kind(kind):
   80:     expected = dtype_categories[kind]
   81:     if isinstance(expected, tuple):
   82:         assert info.dtypes(kind=kind) == info.dtypes(kind=expected)
   83:     else:
   84:         assert info.dtypes(kind=kind) == expected
   85: 
   86: 
   87: def test_dtypes_tuple():
   88:     dtypes = info.dtypes(kind=("bool", "integral"))
   89:     assert dtypes == {
   90:         "bool": np.bool_,
   91:         "int8": np.int8,
   92:         "int16": np.int16,
   93:         "int32": np.int32,
   94:         "int64": np.int64,
   95:         "uint8": np.uint8,
   96:         "uint16": np.uint16,
   97:         "uint32": np.uint32,
   98:         "uint64": np.uint64,
   99:     }
  100: 
  101: 
  102: def test_dtypes_invalid_kind():
  103:     with pytest.raises(ValueError, match="unsupported kind"):
  104:         info.dtypes(kind="invalid")
  105: 
  106: 
  107: def test_dtypes_invalid_device():
  108:     with pytest.raises(ValueError, match="Device not understood"):
  109:         info.dtypes(device="gpu")
  110: 
  111: 
  112: def test_devices():
  113:     assert info.devices() == ["cpu"]
