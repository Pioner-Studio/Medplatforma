    1: """Provide class for testing in French locale
    2: 
    3: """
    4: import locale
    5: import sys
    6: 
    7: import pytest
    8: 
    9: __ALL__ = ['CommaDecimalPointLocale']
   10: 
   11: 
   12: def find_comma_decimal_point_locale():
   13:     """See if platform has a decimal point as comma locale.
   14: 
   15:     Find a locale that uses a comma instead of a period as the
   16:     decimal point.
   17: 
   18:     Returns
   19:     -------
   20:     old_locale: str
   21:         Locale when the function was called.
   22:     new_locale: {str, None)
   23:         First French locale found, None if none found.
   24: 
   25:     """
   26:     if sys.platform == 'win32':
   27:         locales = ['FRENCH']
   28:     else:
   29:         locales = ['fr_FR', 'fr_FR.UTF-8', 'fi_FI', 'fi_FI.UTF-8']
   30: 
   31:     old_locale = locale.getlocale(locale.LC_NUMERIC)
   32:     new_locale = None
   33:     try:
   34:         for loc in locales:
   35:             try:
   36:                 locale.setlocale(locale.LC_NUMERIC, loc)
   37:                 new_locale = loc
   38:                 break
   39:             except locale.Error:
   40:                 pass
   41:     finally:
   42:         locale.setlocale(locale.LC_NUMERIC, locale=old_locale)
   43:     return old_locale, new_locale
   44: 
   45: 
   46: class CommaDecimalPointLocale:
   47:     """Sets LC_NUMERIC to a locale with comma as decimal point.
   48: 
   49:     Classes derived from this class have setup and teardown methods that run
   50:     tests with locale.LC_NUMERIC set to a locale where commas (',') are used as
   51:     the decimal point instead of periods ('.'). On exit the locale is restored
   52:     to the initial locale. It also serves as context manager with the same
   53:     effect. If no such locale is available, the test is skipped.
   54: 
   55:     """
   56:     (cur_locale, tst_locale) = find_comma_decimal_point_locale()
   57: 
   58:     def setup_method(self):
   59:         if self.tst_locale is None:
   60:             pytest.skip("No French locale available")
   61:         locale.setlocale(locale.LC_NUMERIC, locale=self.tst_locale)
   62: 
   63:     def teardown_method(self):
   64:         locale.setlocale(locale.LC_NUMERIC, locale=self.cur_locale)
   65: 
   66:     def __enter__(self):
   67:         if self.tst_locale is None:
   68:             pytest.skip("No French locale available")
   69:         locale.setlocale(locale.LC_NUMERIC, locale=self.tst_locale)
   70: 
   71:     def __exit__(self, type, value, traceback):
   72:         locale.setlocale(locale.LC_NUMERIC, locale=self.cur_locale)
