    1: from numpy._core._multiarray_umath import (
    2:     __cpu_baseline__,
    3:     __cpu_dispatch__,
    4:     __cpu_features__,
    5: )
    6: 
    7: from numpy._core import _umath_tests
    8: from numpy.testing import assert_equal
    9: 
   10: 
   11: def test_dispatcher():
   12:     """
   13:     Testing the utilities of the CPU dispatcher
   14:     """
   15:     targets = (
   16:         "SSE2", "SSE41", "AVX2",
   17:         "VSX", "VSX2", "VSX3",
   18:         "NEON", "ASIMD", "ASIMDHP",
   19:         "VX", "VXE", "LSX"
   20:     )
   21:     highest_sfx = ""  # no suffix for the baseline
   22:     all_sfx = []
   23:     for feature in reversed(targets):
   24:         # skip baseline features, by the default `CCompilerOpt` do not generate separated objects
   25:         # for the baseline,  just one object combined all of them via 'baseline' option
   26:         # within the configuration statements.
   27:         if feature in __cpu_baseline__:
   28:             continue
   29:         # check compiler and running machine support
   30:         if feature not in __cpu_dispatch__ or not __cpu_features__[feature]:
   31:             continue
   32: 
   33:         if not highest_sfx:
   34:             highest_sfx = "_" + feature
   35:         all_sfx.append("func" + "_" + feature)
   36: 
   37:     test = _umath_tests.test_dispatch()
   38:     assert_equal(test["func"], "func" + highest_sfx)
   39:     assert_equal(test["var"], "var" + highest_sfx)
   40: 
   41:     if highest_sfx:
   42:         assert_equal(test["func_xb"], "func" + highest_sfx)
   43:         assert_equal(test["var_xb"], "var" + highest_sfx)
   44:     else:
   45:         assert_equal(test["func_xb"], "nobase")
   46:         assert_equal(test["var_xb"], "nobase")
   47: 
   48:     all_sfx.append("func")  # add the baseline
   49:     assert_equal(test["all"], all_sfx)
