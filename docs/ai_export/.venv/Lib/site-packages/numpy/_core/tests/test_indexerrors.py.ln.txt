    1: import numpy as np
    2: from numpy.testing import (
    3:     assert_raises,
    4:     assert_raises_regex,
    5: )
    6: 
    7: 
    8: class TestIndexErrors:
    9:     '''Tests to exercise indexerrors not covered by other tests.'''
   10: 
   11:     def test_arraytypes_fasttake(self):
   12:         'take from a 0-length dimension'
   13:         x = np.empty((2, 3, 0, 4))
   14:         assert_raises(IndexError, x.take, [0], axis=2)
   15:         assert_raises(IndexError, x.take, [1], axis=2)
   16:         assert_raises(IndexError, x.take, [0], axis=2, mode='wrap')
   17:         assert_raises(IndexError, x.take, [0], axis=2, mode='clip')
   18: 
   19:     def test_take_from_object(self):
   20:         # Check exception taking from object array
   21:         d = np.zeros(5, dtype=object)
   22:         assert_raises(IndexError, d.take, [6])
   23: 
   24:         # Check exception taking from 0-d array
   25:         d = np.zeros((5, 0), dtype=object)
   26:         assert_raises(IndexError, d.take, [1], axis=1)
   27:         assert_raises(IndexError, d.take, [0], axis=1)
   28:         assert_raises(IndexError, d.take, [0])
   29:         assert_raises(IndexError, d.take, [0], mode='wrap')
   30:         assert_raises(IndexError, d.take, [0], mode='clip')
   31: 
   32:     def test_multiindex_exceptions(self):
   33:         a = np.empty(5, dtype=object)
   34:         assert_raises(IndexError, a.item, 20)
   35:         a = np.empty((5, 0), dtype=object)
   36:         assert_raises(IndexError, a.item, (0, 0))
   37: 
   38:     def test_put_exceptions(self):
   39:         a = np.zeros((5, 5))
   40:         assert_raises(IndexError, a.put, 100, 0)
   41:         a = np.zeros((5, 5), dtype=object)
   42:         assert_raises(IndexError, a.put, 100, 0)
   43:         a = np.zeros((5, 5, 0))
   44:         assert_raises(IndexError, a.put, 100, 0)
   45:         a = np.zeros((5, 5, 0), dtype=object)
   46:         assert_raises(IndexError, a.put, 100, 0)
   47: 
   48:     def test_iterators_exceptions(self):
   49:         "cases in iterators.c"
   50:         def assign(obj, ind, val):
   51:             obj[ind] = val
   52: 
   53:         a = np.zeros([1, 2, 3])
   54:         assert_raises(IndexError, lambda: a[0, 5, None, 2])
   55:         assert_raises(IndexError, lambda: a[0, 5, 0, 2])
   56:         assert_raises(IndexError, lambda: assign(a, (0, 5, None, 2), 1))
   57:         assert_raises(IndexError, lambda: assign(a, (0, 5, 0, 2),  1))
   58: 
   59:         a = np.zeros([1, 0, 3])
   60:         assert_raises(IndexError, lambda: a[0, 0, None, 2])
   61:         assert_raises(IndexError, lambda: assign(a, (0, 0, None, 2), 1))
   62: 
   63:         a = np.zeros([1, 2, 3])
   64:         assert_raises(IndexError, lambda: a.flat[10])
   65:         assert_raises(IndexError, lambda: assign(a.flat, 10, 5))
   66:         a = np.zeros([1, 0, 3])
   67:         assert_raises(IndexError, lambda: a.flat[10])
   68:         assert_raises(IndexError, lambda: assign(a.flat, 10, 5))
   69: 
   70:         a = np.zeros([1, 2, 3])
   71:         assert_raises(IndexError, lambda: a.flat[np.array(10)])
   72:         assert_raises(IndexError, lambda: assign(a.flat, np.array(10), 5))
   73:         a = np.zeros([1, 0, 3])
   74:         assert_raises(IndexError, lambda: a.flat[np.array(10)])
   75:         assert_raises(IndexError, lambda: assign(a.flat, np.array(10), 5))
   76: 
   77:         a = np.zeros([1, 2, 3])
   78:         assert_raises(IndexError, lambda: a.flat[np.array([10])])
   79:         assert_raises(IndexError, lambda: assign(a.flat, np.array([10]), 5))
   80:         a = np.zeros([1, 0, 3])
   81:         assert_raises(IndexError, lambda: a.flat[np.array([10])])
   82:         assert_raises(IndexError, lambda: assign(a.flat, np.array([10]), 5))
   83: 
   84:     def test_mapping(self):
   85:         "cases from mapping.c"
   86: 
   87:         def assign(obj, ind, val):
   88:             obj[ind] = val
   89: 
   90:         a = np.zeros((0, 10))
   91:         assert_raises(IndexError, lambda: a[12])
   92: 
   93:         a = np.zeros((3, 5))
   94:         assert_raises(IndexError, lambda: a[(10, 20)])
   95:         assert_raises(IndexError, lambda: assign(a, (10, 20), 1))
   96:         a = np.zeros((3, 0))
   97:         assert_raises(IndexError, lambda: a[(1, 0)])
   98:         assert_raises(IndexError, lambda: assign(a, (1, 0), 1))
   99: 
  100:         a = np.zeros((10,))
  101:         assert_raises(IndexError, lambda: assign(a, 10, 1))
  102:         a = np.zeros((0,))
  103:         assert_raises(IndexError, lambda: assign(a, 10, 1))
  104: 
  105:         a = np.zeros((3, 5))
  106:         assert_raises(IndexError, lambda: a[(1, [1, 20])])
  107:         assert_raises(IndexError, lambda: assign(a, (1, [1, 20]), 1))
  108:         a = np.zeros((3, 0))
  109:         assert_raises(IndexError, lambda: a[(1, [0, 1])])
  110:         assert_raises(IndexError, lambda: assign(a, (1, [0, 1]), 1))
  111: 
  112:     def test_mapping_error_message(self):
  113:         a = np.zeros((3, 5))
  114:         index = (1, 2, 3, 4, 5)
  115:         assert_raises_regex(
  116:                 IndexError,
  117:                 "too many indices for array: "
  118:                 "array is 2-dimensional, but 5 were indexed",
  119:                 lambda: a[index])
  120: 
  121:     def test_methods(self):
  122:         "cases from methods.c"
  123: 
  124:         a = np.zeros((3, 3))
  125:         assert_raises(IndexError, lambda: a.item(100))
