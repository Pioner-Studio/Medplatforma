    1: import os
    2: import subprocess
    3: import sys
    4: import sysconfig
    5: 
    6: import pytest
    7: 
    8: from numpy.testing import IS_EDITABLE, IS_PYPY, IS_WASM, NOGIL_BUILD
    9: 
   10: # This import is copied from random.tests.test_extending
   11: try:
   12:     import cython
   13:     from Cython.Compiler.Version import version as cython_version
   14: except ImportError:
   15:     cython = None
   16: else:
   17:     from numpy._utils import _pep440
   18: 
   19:     # Note: keep in sync with the one in pyproject.toml
   20:     required_version = "3.0.6"
   21:     if _pep440.parse(cython_version) < _pep440.Version(required_version):
   22:         # too old or wrong cython, skip the test
   23:         cython = None
   24: 
   25: pytestmark = pytest.mark.skipif(cython is None, reason="requires cython")
   26: 
   27: 
   28: if IS_EDITABLE:
   29:     pytest.skip(
   30:         "Editable install doesn't support tests with a compile step",
   31:         allow_module_level=True
   32:     )
   33: 
   34: 
   35: @pytest.fixture(scope='module')
   36: def install_temp(tmpdir_factory):
   37:     # Based in part on test_cython from random.tests.test_extending
   38:     if IS_WASM:
   39:         pytest.skip("No subprocess")
   40: 
   41:     srcdir = os.path.join(os.path.dirname(__file__), 'examples', 'limited_api')
   42:     build_dir = tmpdir_factory.mktemp("limited_api") / "build"
   43:     os.makedirs(build_dir, exist_ok=True)
   44:     # Ensure we use the correct Python interpreter even when `meson` is
   45:     # installed in a different Python environment (see gh-24956)
   46:     native_file = str(build_dir / 'interpreter-native-file.ini')
   47:     with open(native_file, 'w') as f:
   48:         f.write("[binaries]\n")
   49:         f.write(f"python = '{sys.executable}'\n")
   50:         f.write(f"python3 = '{sys.executable}'")
   51: 
   52:     try:
   53:         subprocess.check_call(["meson", "--version"])
   54:     except FileNotFoundError:
   55:         pytest.skip("No usable 'meson' found")
   56:     if sysconfig.get_platform() == "win-arm64":
   57:         pytest.skip("Meson unable to find MSVC linker on win-arm64")
   58:     if sys.platform == "win32":
   59:         subprocess.check_call(["meson", "setup",
   60:                                "--werror",
   61:                                "--buildtype=release",
   62:                                "--vsenv", "--native-file", native_file,
   63:                                str(srcdir)],
   64:                               cwd=build_dir,
   65:                               )
   66:     else:
   67:         subprocess.check_call(["meson", "setup", "--werror",
   68:                                "--native-file", native_file, str(srcdir)],
   69:                               cwd=build_dir
   70:                               )
   71:     try:
   72:         subprocess.check_call(
   73:             ["meson", "compile", "-vv"], cwd=build_dir)
   74:     except subprocess.CalledProcessError as p:
   75:         print(f"{p.stdout=}")
   76:         print(f"{p.stderr=}")
   77:         raise
   78: 
   79:     sys.path.append(str(build_dir))
   80: 
   81: 
   82: @pytest.mark.skipif(IS_WASM, reason="Can't start subprocess")
   83: @pytest.mark.xfail(
   84:     sysconfig.get_config_var("Py_DEBUG"),
   85:     reason=(
   86:         "Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, "
   87:         "and Py_REF_DEBUG"
   88:     ),
   89: )
   90: @pytest.mark.xfail(
   91:     NOGIL_BUILD,
   92:     reason="Py_GIL_DISABLED builds do not currently support the limited API",
   93: )
   94: @pytest.mark.skipif(IS_PYPY, reason="no support for limited API in PyPy")
   95: def test_limited_api(install_temp):
   96:     """Test building a third-party C extension with the limited API
   97:     and building a cython extension with the limited API
   98:     """
   99: 
  100:     import limited_api1  # Earliest (3.6)  # noqa: F401
  101:     import limited_api2  # cython  # noqa: F401
  102:     import limited_api_latest  # Latest version (current Python)  # noqa: F401
