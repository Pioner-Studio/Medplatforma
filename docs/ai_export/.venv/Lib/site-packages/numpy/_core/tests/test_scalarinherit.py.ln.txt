    1: """ Test printing of scalar types.
    2: 
    3: """
    4: import pytest
    5: 
    6: import numpy as np
    7: from numpy.testing import assert_, assert_raises
    8: 
    9: 
   10: class A:
   11:     pass
   12: class B(A, np.float64):
   13:     pass
   14: 
   15: class C(B):
   16:     pass
   17: class D(C, B):
   18:     pass
   19: 
   20: class B0(np.float64, A):
   21:     pass
   22: class C0(B0):
   23:     pass
   24: 
   25: class HasNew:
   26:     def __new__(cls, *args, **kwargs):
   27:         return cls, args, kwargs
   28: 
   29: class B1(np.float64, HasNew):
   30:     pass
   31: 
   32: 
   33: class TestInherit:
   34:     def test_init(self):
   35:         x = B(1.0)
   36:         assert_(str(x) == '1.0')
   37:         y = C(2.0)
   38:         assert_(str(y) == '2.0')
   39:         z = D(3.0)
   40:         assert_(str(z) == '3.0')
   41: 
   42:     def test_init2(self):
   43:         x = B0(1.0)
   44:         assert_(str(x) == '1.0')
   45:         y = C0(2.0)
   46:         assert_(str(y) == '2.0')
   47: 
   48:     def test_gh_15395(self):
   49:         # HasNew is the second base, so `np.float64` should have priority
   50:         x = B1(1.0)
   51:         assert_(str(x) == '1.0')
   52: 
   53:         # previously caused RecursionError!?
   54:         with pytest.raises(TypeError):
   55:             B1(1.0, 2.0)
   56: 
   57:     def test_int_repr(self):
   58:         # Test that integer repr works correctly for subclasses (gh-27106)
   59:         class my_int16(np.int16):
   60:             pass
   61: 
   62:         s = repr(my_int16(3))
   63:         assert s == "my_int16(3)"
   64: 
   65: class TestCharacter:
   66:     def test_char_radd(self):
   67:         # GH issue 9620, reached gentype_add and raise TypeError
   68:         np_s = np.bytes_('abc')
   69:         np_u = np.str_('abc')
   70:         s = b'def'
   71:         u = 'def'
   72:         assert_(np_s.__radd__(np_s) is NotImplemented)
   73:         assert_(np_s.__radd__(np_u) is NotImplemented)
   74:         assert_(np_s.__radd__(s) is NotImplemented)
   75:         assert_(np_s.__radd__(u) is NotImplemented)
   76:         assert_(np_u.__radd__(np_s) is NotImplemented)
   77:         assert_(np_u.__radd__(np_u) is NotImplemented)
   78:         assert_(np_u.__radd__(s) is NotImplemented)
   79:         assert_(np_u.__radd__(u) is NotImplemented)
   80:         assert_(s + np_s == b'defabc')
   81:         assert_(u + np_u == 'defabc')
   82: 
   83:         class MyStr(str, np.generic):
   84:             # would segfault
   85:             pass
   86: 
   87:         with assert_raises(TypeError):
   88:             # Previously worked, but gave completely wrong result
   89:             ret = s + MyStr('abc')
   90: 
   91:         class MyBytes(bytes, np.generic):
   92:             # would segfault
   93:             pass
   94: 
   95:         ret = s + MyBytes(b'abc')
   96:         assert type(ret) is type(s)
   97:         assert ret == b"defabc"
   98: 
   99:     def test_char_repeat(self):
  100:         np_s = np.bytes_('abc')
  101:         np_u = np.str_('abc')
  102:         res_s = b'abc' * 5
  103:         res_u = 'abc' * 5
  104:         assert_(np_s * 5 == res_s)
  105:         assert_(np_u * 5 == res_u)
