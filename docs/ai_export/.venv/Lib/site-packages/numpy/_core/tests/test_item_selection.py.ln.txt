    1: import sys
    2: 
    3: import pytest
    4: 
    5: import numpy as np
    6: from numpy.testing import HAS_REFCOUNT, assert_, assert_array_equal, assert_raises
    7: 
    8: 
    9: class TestTake:
   10:     def test_simple(self):
   11:         a = [[1, 2], [3, 4]]
   12:         a_str = [[b'1', b'2'], [b'3', b'4']]
   13:         modes = ['raise', 'wrap', 'clip']
   14:         indices = [-1, 4]
   15:         index_arrays = [np.empty(0, dtype=np.intp),
   16:                         np.empty((), dtype=np.intp),
   17:                         np.empty((1, 1), dtype=np.intp)]
   18:         real_indices = {'raise': {-1: 1, 4: IndexError},
   19:                         'wrap': {-1: 1, 4: 0},
   20:                         'clip': {-1: 0, 4: 1}}
   21:         # Currently all types but object, use the same function generation.
   22:         # So it should not be necessary to test all. However test also a non
   23:         # refcounted struct on top of object, which has a size that hits the
   24:         # default (non-specialized) path.
   25:         types = int, object, np.dtype([('', 'i2', 3)])
   26:         for t in types:
   27:             # ta works, even if the array may be odd if buffer interface is used
   28:             ta = np.array(a if np.issubdtype(t, np.number) else a_str, dtype=t)
   29:             tresult = list(ta.T.copy())
   30:             for index_array in index_arrays:
   31:                 if index_array.size != 0:
   32:                     tresult[0].shape = (2,) + index_array.shape
   33:                     tresult[1].shape = (2,) + index_array.shape
   34:                 for mode in modes:
   35:                     for index in indices:
   36:                         real_index = real_indices[mode][index]
   37:                         if real_index is IndexError and index_array.size != 0:
   38:                             index_array.put(0, index)
   39:                             assert_raises(IndexError, ta.take, index_array,
   40:                                           mode=mode, axis=1)
   41:                         elif index_array.size != 0:
   42:                             index_array.put(0, index)
   43:                             res = ta.take(index_array, mode=mode, axis=1)
   44:                             assert_array_equal(res, tresult[real_index])
   45:                         else:
   46:                             res = ta.take(index_array, mode=mode, axis=1)
   47:                             assert_(res.shape == (2,) + index_array.shape)
   48: 
   49:     def test_refcounting(self):
   50:         objects = [object() for i in range(10)]
   51:         if HAS_REFCOUNT:
   52:             orig_rcs = [sys.getrefcount(o) for o in objects]
   53:         for mode in ('raise', 'clip', 'wrap'):
   54:             a = np.array(objects)
   55:             b = np.array([2, 2, 4, 5, 3, 5])
   56:             a.take(b, out=a[:6], mode=mode)
   57:             del a
   58:             if HAS_REFCOUNT:
   59:                 assert_(all(sys.getrefcount(o) == rc + 1
   60:                             for o, rc in zip(objects, orig_rcs)))
   61:             # not contiguous, example:
   62:             a = np.array(objects * 2)[::2]
   63:             a.take(b, out=a[:6], mode=mode)
   64:             del a
   65:             if HAS_REFCOUNT:
   66:                 assert_(all(sys.getrefcount(o) == rc + 1
   67:                             for o, rc in zip(objects, orig_rcs)))
   68: 
   69:     def test_unicode_mode(self):
   70:         d = np.arange(10)
   71:         k = b'\xc3\xa4'.decode("UTF8")
   72:         assert_raises(ValueError, d.take, 5, mode=k)
   73: 
   74:     def test_empty_partition(self):
   75:         # In reference to github issue #6530
   76:         a_original = np.array([0, 2, 4, 6, 8, 10])
   77:         a = a_original.copy()
   78: 
   79:         # An empty partition should be a successful no-op
   80:         a.partition(np.array([], dtype=np.int16))
   81: 
   82:         assert_array_equal(a, a_original)
   83: 
   84:     def test_empty_argpartition(self):
   85:         # In reference to github issue #6530
   86:         a = np.array([0, 2, 4, 6, 8, 10])
   87:         a = a.argpartition(np.array([], dtype=np.int16))
   88: 
   89:         b = np.array([0, 1, 2, 3, 4, 5])
   90:         assert_array_equal(a, b)
   91: 
   92: 
   93: class TestPutMask:
   94:     @pytest.mark.parametrize("dtype", list(np.typecodes["All"]) + ["i,O"])
   95:     def test_simple(self, dtype):
   96:         if dtype.lower() == "m":
   97:             dtype += "8[ns]"
   98: 
   99:         # putmask is weird and doesn't care about value length (even shorter)
  100:         vals = np.arange(1001).astype(dtype=dtype)
  101: 
  102:         mask = np.random.randint(2, size=1000).astype(bool)
  103:         # Use vals.dtype in case of flexible dtype (i.e. string)
  104:         arr = np.zeros(1000, dtype=vals.dtype)
  105:         zeros = arr.copy()
  106: 
  107:         np.putmask(arr, mask, vals)
  108:         assert_array_equal(arr[mask], vals[:len(mask)][mask])
  109:         assert_array_equal(arr[~mask], zeros[~mask])
  110: 
  111:     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
  112:     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
  113:     def test_empty(self, dtype, mode):
  114:         arr = np.zeros(1000, dtype=dtype)
  115:         arr_copy = arr.copy()
  116:         mask = np.random.randint(2, size=1000).astype(bool)
  117: 
  118:         # Allowing empty values like this is weird...
  119:         np.put(arr, mask, [])
  120:         assert_array_equal(arr, arr_copy)
  121: 
  122: 
  123: class TestPut:
  124:     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
  125:     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
  126:     def test_simple(self, dtype, mode):
  127:         if dtype.lower() == "m":
  128:             dtype += "8[ns]"
  129: 
  130:         # put is weird and doesn't care about value length (even shorter)
  131:         vals = np.arange(1001).astype(dtype=dtype)
  132: 
  133:         # Use vals.dtype in case of flexible dtype (i.e. string)
  134:         arr = np.zeros(1000, dtype=vals.dtype)
  135:         zeros = arr.copy()
  136: 
  137:         if mode == "clip":
  138:             # Special because 0 and -1 value are "reserved" for clip test
  139:             indx = np.random.permutation(len(arr) - 2)[:-500] + 1
  140: 
  141:             indx[-1] = 0
  142:             indx[-2] = len(arr) - 1
  143:             indx_put = indx.copy()
  144:             indx_put[-1] = -1389
  145:             indx_put[-2] = 1321
  146:         else:
  147:             # Avoid duplicates (for simplicity) and fill half only
  148:             indx = np.random.permutation(len(arr) - 3)[:-500]
  149:             indx_put = indx
  150:             if mode == "wrap":
  151:                 indx_put = indx_put + len(arr)
  152: 
  153:         np.put(arr, indx_put, vals, mode=mode)
  154:         assert_array_equal(arr[indx], vals[:len(indx)])
  155:         untouched = np.ones(len(arr), dtype=bool)
  156:         untouched[indx] = False
  157:         assert_array_equal(arr[untouched], zeros[:untouched.sum()])
  158: 
  159:     @pytest.mark.parametrize("dtype", list(np.typecodes["All"])[1:] + ["i,O"])
  160:     @pytest.mark.parametrize("mode", ["raise", "wrap", "clip"])
  161:     def test_empty(self, dtype, mode):
  162:         arr = np.zeros(1000, dtype=dtype)
  163:         arr_copy = arr.copy()
  164: 
  165:         # Allowing empty values like this is weird...
  166:         np.put(arr, [1, 2, 3], [])
  167:         assert_array_equal(arr, arr_copy)
