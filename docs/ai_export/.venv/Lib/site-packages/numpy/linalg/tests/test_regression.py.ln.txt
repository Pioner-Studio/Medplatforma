    1: """ Test functions for linalg module
    2: """
    3: 
    4: import pytest
    5: 
    6: import numpy as np
    7: from numpy import arange, array, dot, float64, linalg, transpose
    8: from numpy.testing import (
    9:     assert_,
   10:     assert_array_almost_equal,
   11:     assert_array_equal,
   12:     assert_array_less,
   13:     assert_equal,
   14:     assert_raises,
   15: )
   16: 
   17: 
   18: class TestRegression:
   19: 
   20:     def test_eig_build(self):
   21:         # Ticket #652
   22:         rva = array([1.03221168e+02 + 0.j,
   23:                      -1.91843603e+01 + 0.j,
   24:                      -6.04004526e-01 + 15.84422474j,
   25:                      -6.04004526e-01 - 15.84422474j,
   26:                      -1.13692929e+01 + 0.j,
   27:                      -6.57612485e-01 + 10.41755503j,
   28:                      -6.57612485e-01 - 10.41755503j,
   29:                      1.82126812e+01 + 0.j,
   30:                      1.06011014e+01 + 0.j,
   31:                      7.80732773e+00 + 0.j,
   32:                      -7.65390898e-01 + 0.j,
   33:                      1.51971555e-15 + 0.j,
   34:                      -1.51308713e-15 + 0.j])
   35:         a = arange(13 * 13, dtype=float64)
   36:         a.shape = (13, 13)
   37:         a = a % 17
   38:         va, ve = linalg.eig(a)
   39:         va.sort()
   40:         rva.sort()
   41:         assert_array_almost_equal(va, rva)
   42: 
   43:     def test_eigh_build(self):
   44:         # Ticket 662.
   45:         rvals = [68.60568999, 89.57756725, 106.67185574]
   46: 
   47:         cov = array([[77.70273908,  3.51489954, 15.64602427],
   48:                      [ 3.51489954, 88.97013878, -1.07431931],
   49:                      [15.64602427, -1.07431931, 98.18223512]])
   50: 
   51:         vals, vecs = linalg.eigh(cov)
   52:         assert_array_almost_equal(vals, rvals)
   53: 
   54:     def test_svd_build(self):
   55:         # Ticket 627.
   56:         a = array([[0., 1.], [1., 1.], [2., 1.], [3., 1.]])
   57:         m, n = a.shape
   58:         u, s, vh = linalg.svd(a)
   59: 
   60:         b = dot(transpose(u[:, n:]), a)
   61: 
   62:         assert_array_almost_equal(b, np.zeros((2, 2)))
   63: 
   64:     def test_norm_vector_badarg(self):
   65:         # Regression for #786: Frobenius norm for vectors raises
   66:         # ValueError.
   67:         assert_raises(ValueError, linalg.norm, array([1., 2., 3.]), 'fro')
   68: 
   69:     def test_lapack_endian(self):
   70:         # For bug #1482
   71:         a = array([[ 5.7998084, -2.1825367],
   72:                    [-2.1825367,  9.85910595]], dtype='>f8')
   73:         b = array(a, dtype='<f8')
   74: 
   75:         ap = linalg.cholesky(a)
   76:         bp = linalg.cholesky(b)
   77:         assert_array_equal(ap, bp)
   78: 
   79:     def test_large_svd_32bit(self):
   80:         # See gh-4442, 64bit would require very large/slow matrices.
   81:         x = np.eye(1000, 66)
   82:         np.linalg.svd(x)
   83: 
   84:     def test_svd_no_uv(self):
   85:         # gh-4733
   86:         for shape in (3, 4), (4, 4), (4, 3):
   87:             for t in float, complex:
   88:                 a = np.ones(shape, dtype=t)
   89:                 w = linalg.svd(a, compute_uv=False)
   90:                 c = np.count_nonzero(np.absolute(w) > 0.5)
   91:                 assert_equal(c, 1)
   92:                 assert_equal(np.linalg.matrix_rank(a), 1)
   93:                 assert_array_less(1, np.linalg.norm(a, ord=2))
   94: 
   95:                 w_svdvals = linalg.svdvals(a)
   96:                 assert_array_almost_equal(w, w_svdvals)
   97: 
   98:     def test_norm_object_array(self):
   99:         # gh-7575
  100:         testvector = np.array([np.array([0, 1]), 0, 0], dtype=object)
  101: 
  102:         norm = linalg.norm(testvector)
  103:         assert_array_equal(norm, [0, 1])
  104:         assert_(norm.dtype == np.dtype('float64'))
  105: 
  106:         norm = linalg.norm(testvector, ord=1)
  107:         assert_array_equal(norm, [0, 1])
  108:         assert_(norm.dtype != np.dtype('float64'))
  109: 
  110:         norm = linalg.norm(testvector, ord=2)
  111:         assert_array_equal(norm, [0, 1])
  112:         assert_(norm.dtype == np.dtype('float64'))
  113: 
  114:         assert_raises(ValueError, linalg.norm, testvector, ord='fro')
  115:         assert_raises(ValueError, linalg.norm, testvector, ord='nuc')
  116:         assert_raises(ValueError, linalg.norm, testvector, ord=np.inf)
  117:         assert_raises(ValueError, linalg.norm, testvector, ord=-np.inf)
  118:         assert_raises(ValueError, linalg.norm, testvector, ord=0)
  119:         assert_raises(ValueError, linalg.norm, testvector, ord=-1)
  120:         assert_raises(ValueError, linalg.norm, testvector, ord=-2)
  121: 
  122:         testmatrix = np.array([[np.array([0, 1]), 0, 0],
  123:                                [0,                0, 0]], dtype=object)
  124: 
  125:         norm = linalg.norm(testmatrix)
  126:         assert_array_equal(norm, [0, 1])
  127:         assert_(norm.dtype == np.dtype('float64'))
  128: 
  129:         norm = linalg.norm(testmatrix, ord='fro')
  130:         assert_array_equal(norm, [0, 1])
  131:         assert_(norm.dtype == np.dtype('float64'))
  132: 
  133:         assert_raises(TypeError, linalg.norm, testmatrix, ord='nuc')
  134:         assert_raises(ValueError, linalg.norm, testmatrix, ord=np.inf)
  135:         assert_raises(ValueError, linalg.norm, testmatrix, ord=-np.inf)
  136:         assert_raises(ValueError, linalg.norm, testmatrix, ord=0)
  137:         assert_raises(ValueError, linalg.norm, testmatrix, ord=1)
  138:         assert_raises(ValueError, linalg.norm, testmatrix, ord=-1)
  139:         assert_raises(TypeError, linalg.norm, testmatrix, ord=2)
  140:         assert_raises(TypeError, linalg.norm, testmatrix, ord=-2)
  141:         assert_raises(ValueError, linalg.norm, testmatrix, ord=3)
  142: 
  143:     def test_lstsq_complex_larger_rhs(self):
  144:         # gh-9891
  145:         size = 20
  146:         n_rhs = 70
  147:         G = np.random.randn(size, size) + 1j * np.random.randn(size, size)
  148:         u = np.random.randn(size, n_rhs) + 1j * np.random.randn(size, n_rhs)
  149:         b = G.dot(u)
  150:         # This should work without segmentation fault.
  151:         u_lstsq, res, rank, sv = linalg.lstsq(G, b, rcond=None)
  152:         # check results just in case
  153:         assert_array_almost_equal(u_lstsq, u)
  154: 
  155:     @pytest.mark.parametrize("upper", [True, False])
  156:     def test_cholesky_empty_array(self, upper):
  157:         # gh-25840 - upper=True hung before.
  158:         res = np.linalg.cholesky(np.zeros((0, 0)), upper=upper)
  159:         assert res.size == 0
  160: 
  161:     @pytest.mark.parametrize("rtol", [0.0, [0.0] * 4, np.zeros((4,))])
  162:     def test_matrix_rank_rtol_argument(self, rtol):
  163:         # gh-25877
  164:         x = np.zeros((4, 3, 2))
  165:         res = np.linalg.matrix_rank(x, rtol=rtol)
  166:         assert res.shape == (4,)
  167: 
  168:     def test_openblas_threading(self):
  169:         # gh-27036
  170:         # Test whether matrix multiplication involving a large matrix always
  171:         # gives the same (correct) answer
  172:         x = np.arange(500000, dtype=np.float64)
  173:         src = np.vstack((x, -10 * x)).T
  174:         matrix = np.array([[0, 1], [1, 0]])
  175:         expected = np.vstack((-10 * x, x)).T  # src @ matrix
  176:         for i in range(200):
  177:             result = src @ matrix
  178:             mismatches = (~np.isclose(result, expected)).sum()
  179:             if mismatches != 0:
  180:                 assert False, ("unexpected result from matmul, "
  181:                     "probably due to OpenBLAS threading issues")
