    1: """
    2: Helper functions for interacting with the shell, and consuming shell-style
    3: parameters provided in config files.
    4: """
    5: import os
    6: import shlex
    7: import subprocess
    8: 
    9: __all__ = ['WindowsParser', 'PosixParser', 'NativeParser']
   10: 
   11: 
   12: class CommandLineParser:
   13:     """
   14:     An object that knows how to split and join command-line arguments.
   15: 
   16:     It must be true that ``argv == split(join(argv))`` for all ``argv``.
   17:     The reverse neednt be true - `join(split(cmd))` may result in the addition
   18:     or removal of unnecessary escaping.
   19:     """
   20:     @staticmethod
   21:     def join(argv):
   22:         """ Join a list of arguments into a command line string """
   23:         raise NotImplementedError
   24: 
   25:     @staticmethod
   26:     def split(cmd):
   27:         """ Split a command line string into a list of arguments """
   28:         raise NotImplementedError
   29: 
   30: 
   31: class WindowsParser:
   32:     """
   33:     The parsing behavior used by `subprocess.call("string")` on Windows, which
   34:     matches the Microsoft C/C++ runtime.
   35: 
   36:     Note that this is _not_ the behavior of cmd.
   37:     """
   38:     @staticmethod
   39:     def join(argv):
   40:         # note that list2cmdline is specific to the windows syntax
   41:         return subprocess.list2cmdline(argv)
   42: 
   43:     @staticmethod
   44:     def split(cmd):
   45:         import ctypes  # guarded import for systems without ctypes
   46:         try:
   47:             ctypes.windll
   48:         except AttributeError:
   49:             raise NotImplementedError
   50: 
   51:         # Windows has special parsing rules for the executable (no quotes),
   52:         # that we do not care about - insert a dummy element
   53:         if not cmd:
   54:             return []
   55:         cmd = 'dummy ' + cmd
   56: 
   57:         CommandLineToArgvW = ctypes.windll.shell32.CommandLineToArgvW
   58:         CommandLineToArgvW.restype = ctypes.POINTER(ctypes.c_wchar_p)
   59:         CommandLineToArgvW.argtypes = (ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
   60: 
   61:         nargs = ctypes.c_int()
   62:         lpargs = CommandLineToArgvW(cmd, ctypes.byref(nargs))
   63:         args = [lpargs[i] for i in range(nargs.value)]
   64:         assert not ctypes.windll.kernel32.LocalFree(lpargs)
   65: 
   66:         # strip the element we inserted
   67:         assert args[0] == "dummy"
   68:         return args[1:]
   69: 
   70: 
   71: class PosixParser:
   72:     """
   73:     The parsing behavior used by `subprocess.call("string", shell=True)` on Posix.
   74:     """
   75:     @staticmethod
   76:     def join(argv):
   77:         return ' '.join(shlex.quote(arg) for arg in argv)
   78: 
   79:     @staticmethod
   80:     def split(cmd):
   81:         return shlex.split(cmd, posix=True)
   82: 
   83: 
   84: if os.name == 'nt':
   85:     NativeParser = WindowsParser
   86: elif os.name == 'posix':
   87:     NativeParser = PosixParser
