    1: """
    2: An enhanced distutils, providing support for Fortran compilers, for BLAS,
    3: LAPACK and other common libraries for numerical computing, and more.
    4: 
    5: Public submodules are::
    6: 
    7:     misc_util
    8:     system_info
    9:     cpu_info
   10:     log
   11:     exec_command
   12: 
   13: For details, please see the *Packaging* and *NumPy Distutils User Guide*
   14: sections of the NumPy Reference Guide.
   15: 
   16: For configuring the preference for and location of libraries like BLAS and
   17: LAPACK, and for setting include paths and similar build options, please see
   18: ``site.cfg.example`` in the root of the NumPy repository or sdist.
   19: 
   20: """
   21: 
   22: import warnings
   23: 
   24: # Must import local ccompiler ASAP in order to get
   25: # customized CCompiler.spawn effective.
   26: from . import ccompiler
   27: from . import unixccompiler
   28: 
   29: from .npy_pkg_config import *
   30: 
   31: warnings.warn("\n\n"
   32:     "  `numpy.distutils` is deprecated since NumPy 1.23.0, as a result\n"
   33:     "  of the deprecation of `distutils` itself. It will be removed for\n"
   34:     "  Python >= 3.12. For older Python versions it will remain present.\n"
   35:     "  It is recommended to use `setuptools < 60.0` for those Python versions.\n"
   36:     "  For more details, see:\n"
   37:     "    https://numpy.org/devdocs/reference/distutils_status_migration.html \n\n",
   38:     DeprecationWarning, stacklevel=2
   39: )
   40: del warnings
   41: 
   42: # If numpy is installed, add distutils.test()
   43: try:
   44:     from . import __config__
   45:     # Normally numpy is installed if the above import works, but an interrupted
   46:     # in-place build could also have left a __config__.py.  In that case the
   47:     # next import may still fail, so keep it inside the try block.
   48:     from numpy._pytesttester import PytestTester
   49:     test = PytestTester(__name__)
   50:     del PytestTester
   51: except ImportError:
   52:     pass
   53: 
   54: 
   55: def customized_fcompiler(plat=None, compiler=None):
   56:     from numpy.distutils.fcompiler import new_fcompiler
   57:     c = new_fcompiler(plat=plat, compiler=compiler)
   58:     c.customize()
   59:     return c
   60: 
   61: def customized_ccompiler(plat=None, compiler=None, verbose=1):
   62:     c = ccompiler.new_compiler(plat=plat, compiler=compiler, verbose=verbose)
   63:     c.customize('')
   64:     return c
