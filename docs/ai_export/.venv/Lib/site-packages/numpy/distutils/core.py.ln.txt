    1: import sys
    2: from distutils.core import Distribution
    3: 
    4: if 'setuptools' in sys.modules:
    5:     have_setuptools = True
    6:     from setuptools import setup as old_setup
    7:     # easy_install imports math, it may be picked up from cwd
    8:     from setuptools.command import easy_install
    9:     try:
   10:         # very old versions of setuptools don't have this
   11:         from setuptools.command import bdist_egg
   12:     except ImportError:
   13:         have_setuptools = False
   14: else:
   15:     from distutils.core import setup as old_setup
   16:     have_setuptools = False
   17: 
   18: import warnings
   19: import distutils.core
   20: import distutils.dist
   21: 
   22: from numpy.distutils.extension import Extension  # noqa: F401
   23: from numpy.distutils.numpy_distribution import NumpyDistribution
   24: from numpy.distutils.command import config, config_compiler, \
   25:      build, build_py, build_ext, build_clib, build_src, build_scripts, \
   26:      sdist, install_data, install_headers, install, bdist_rpm, \
   27:      install_clib
   28: from numpy.distutils.misc_util import is_sequence, is_string
   29: 
   30: numpy_cmdclass = {'build':            build.build,
   31:                   'build_src':        build_src.build_src,
   32:                   'build_scripts':    build_scripts.build_scripts,
   33:                   'config_cc':        config_compiler.config_cc,
   34:                   'config_fc':        config_compiler.config_fc,
   35:                   'config':           config.config,
   36:                   'build_ext':        build_ext.build_ext,
   37:                   'build_py':         build_py.build_py,
   38:                   'build_clib':       build_clib.build_clib,
   39:                   'sdist':            sdist.sdist,
   40:                   'install_data':     install_data.install_data,
   41:                   'install_headers':  install_headers.install_headers,
   42:                   'install_clib':     install_clib.install_clib,
   43:                   'install':          install.install,
   44:                   'bdist_rpm':        bdist_rpm.bdist_rpm,
   45:                   }
   46: if have_setuptools:
   47:     # Use our own versions of develop and egg_info to ensure that build_src is
   48:     # handled appropriately.
   49:     from numpy.distutils.command import develop, egg_info
   50:     numpy_cmdclass['bdist_egg'] = bdist_egg.bdist_egg
   51:     numpy_cmdclass['develop'] = develop.develop
   52:     numpy_cmdclass['easy_install'] = easy_install.easy_install
   53:     numpy_cmdclass['egg_info'] = egg_info.egg_info
   54: 
   55: def _dict_append(d, **kws):
   56:     for k, v in kws.items():
   57:         if k not in d:
   58:             d[k] = v
   59:             continue
   60:         dv = d[k]
   61:         if isinstance(dv, tuple):
   62:             d[k] = dv + tuple(v)
   63:         elif isinstance(dv, list):
   64:             d[k] = dv + list(v)
   65:         elif isinstance(dv, dict):
   66:             _dict_append(dv, **v)
   67:         elif is_string(dv):
   68:             d[k] = dv + v
   69:         else:
   70:             raise TypeError(repr(type(dv)))
   71: 
   72: def _command_line_ok(_cache=None):
   73:     """ Return True if command line does not contain any
   74:     help or display requests.
   75:     """
   76:     if _cache:
   77:         return _cache[0]
   78:     elif _cache is None:
   79:         _cache = []
   80:     ok = True
   81:     display_opts = ['--'+n for n in Distribution.display_option_names]
   82:     for o in Distribution.display_options:
   83:         if o[1]:
   84:             display_opts.append('-'+o[1])
   85:     for arg in sys.argv:
   86:         if arg.startswith('--help') or arg=='-h' or arg in display_opts:
   87:             ok = False
   88:             break
   89:     _cache.append(ok)
   90:     return ok
   91: 
   92: def get_distribution(always=False):
   93:     dist = distutils.core._setup_distribution
   94:     # XXX Hack to get numpy installable with easy_install.
   95:     # The problem is easy_install runs it's own setup(), which
   96:     # sets up distutils.core._setup_distribution. However,
   97:     # when our setup() runs, that gets overwritten and lost.
   98:     # We can't use isinstance, as the DistributionWithoutHelpCommands
   99:     # class is local to a function in setuptools.command.easy_install
  100:     if dist is not None and \
  101:             'DistributionWithoutHelpCommands' in repr(dist):
  102:         dist = None
  103:     if always and dist is None:
  104:         dist = NumpyDistribution()
  105:     return dist
  106: 
  107: def setup(**attr):
  108: 
  109:     cmdclass = numpy_cmdclass.copy()
  110: 
  111:     new_attr = attr.copy()
  112:     if 'cmdclass' in new_attr:
  113:         cmdclass.update(new_attr['cmdclass'])
  114:     new_attr['cmdclass'] = cmdclass
  115: 
  116:     if 'configuration' in new_attr:
  117:         # To avoid calling configuration if there are any errors
  118:         # or help request in command in the line.
  119:         configuration = new_attr.pop('configuration')
  120: 
  121:         old_dist = distutils.core._setup_distribution
  122:         old_stop = distutils.core._setup_stop_after
  123:         distutils.core._setup_distribution = None
  124:         distutils.core._setup_stop_after = "commandline"
  125:         try:
  126:             dist = setup(**new_attr)
  127:         finally:
  128:             distutils.core._setup_distribution = old_dist
  129:             distutils.core._setup_stop_after = old_stop
  130:         if dist.help or not _command_line_ok():
  131:             # probably displayed help, skip running any commands
  132:             return dist
  133: 
  134:         # create setup dictionary and append to new_attr
  135:         config = configuration()
  136:         if hasattr(config, 'todict'):
  137:             config = config.todict()
  138:         _dict_append(new_attr, **config)
  139: 
  140:     # Move extension source libraries to libraries
  141:     libraries = []
  142:     for ext in new_attr.get('ext_modules', []):
  143:         new_libraries = []
  144:         for item in ext.libraries:
  145:             if is_sequence(item):
  146:                 lib_name, build_info = item
  147:                 _check_append_ext_library(libraries, lib_name, build_info)
  148:                 new_libraries.append(lib_name)
  149:             elif is_string(item):
  150:                 new_libraries.append(item)
  151:             else:
  152:                 raise TypeError("invalid description of extension module "
  153:                                 "library %r" % (item,))
  154:         ext.libraries = new_libraries
  155:     if libraries:
  156:         if 'libraries' not in new_attr:
  157:             new_attr['libraries'] = []
  158:         for item in libraries:
  159:             _check_append_library(new_attr['libraries'], item)
  160: 
  161:     # sources in ext_modules or libraries may contain header files
  162:     if ('ext_modules' in new_attr or 'libraries' in new_attr) \
  163:        and 'headers' not in new_attr:
  164:         new_attr['headers'] = []
  165: 
  166:     # Use our custom NumpyDistribution class instead of distutils' one
  167:     new_attr['distclass'] = NumpyDistribution
  168: 
  169:     return old_setup(**new_attr)
  170: 
  171: def _check_append_library(libraries, item):
  172:     for libitem in libraries:
  173:         if is_sequence(libitem):
  174:             if is_sequence(item):
  175:                 if item[0]==libitem[0]:
  176:                     if item[1] is libitem[1]:
  177:                         return
  178:                     warnings.warn("[0] libraries list contains %r with"
  179:                                   " different build_info" % (item[0],),
  180:                                   stacklevel=2)
  181:                     break
  182:             else:
  183:                 if item==libitem[0]:
  184:                     warnings.warn("[1] libraries list contains %r with"
  185:                                   " no build_info" % (item[0],),
  186:                                   stacklevel=2)
  187:                     break
  188:         else:
  189:             if is_sequence(item):
  190:                 if item[0]==libitem:
  191:                     warnings.warn("[2] libraries list contains %r with"
  192:                                   " no build_info" % (item[0],),
  193:                                   stacklevel=2)
  194:                     break
  195:             else:
  196:                 if item==libitem:
  197:                     return
  198:     libraries.append(item)
  199: 
  200: def _check_append_ext_library(libraries, lib_name, build_info):
  201:     for item in libraries:
  202:         if is_sequence(item):
  203:             if item[0]==lib_name:
  204:                 if item[1] is build_info:
  205:                     return
  206:                 warnings.warn("[3] libraries list contains %r with"
  207:                               " different build_info" % (lib_name,),
  208:                               stacklevel=2)
  209:                 break
  210:         elif item==lib_name:
  211:             warnings.warn("[4] libraries list contains %r with"
  212:                           " no build_info" % (lib_name,),
  213:                           stacklevel=2)
  214:             break
  215:     libraries.append((lib_name, build_info))
