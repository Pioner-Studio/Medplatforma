    1: import platform
    2: 
    3: from distutils.unixccompiler import UnixCCompiler
    4: from numpy.distutils.exec_command import find_executable
    5: from numpy.distutils.ccompiler import simple_version_match
    6: if platform.system() == 'Windows':
    7:     from numpy.distutils.msvc9compiler import MSVCCompiler
    8: 
    9: 
   10: class IntelCCompiler(UnixCCompiler):
   11:     """A modified Intel compiler compatible with a GCC-built Python."""
   12:     compiler_type = 'intel'
   13:     cc_exe = 'icc'
   14:     cc_args = 'fPIC'
   15: 
   16:     def __init__(self, verbose=0, dry_run=0, force=0):
   17:         UnixCCompiler.__init__(self, verbose, dry_run, force)
   18: 
   19:         v = self.get_version()
   20:         mpopt = 'openmp' if v and v < '15' else 'qopenmp'
   21:         self.cc_exe = ('icc -fPIC -fp-model strict -O3 '
   22:                        '-fomit-frame-pointer -{}').format(mpopt)
   23:         compiler = self.cc_exe
   24: 
   25:         if platform.system() == 'Darwin':
   26:             shared_flag = '-Wl,-undefined,dynamic_lookup'
   27:         else:
   28:             shared_flag = '-shared'
   29:         self.set_executables(compiler=compiler,
   30:                              compiler_so=compiler,
   31:                              compiler_cxx=compiler,
   32:                              archiver='xiar' + ' cru',
   33:                              linker_exe=compiler + ' -shared-intel',
   34:                              linker_so=compiler + ' ' + shared_flag +
   35:                              ' -shared-intel')
   36: 
   37: 
   38: class IntelItaniumCCompiler(IntelCCompiler):
   39:     compiler_type = 'intele'
   40:     cc_exe = 'icc'
   41: 
   42: 
   43: class IntelEM64TCCompiler(UnixCCompiler):
   44:     """
   45:     A modified Intel x86_64 compiler compatible with a 64bit GCC-built Python.
   46:     """
   47:     compiler_type = 'intelem'
   48:     cc_exe = 'icc -m64'
   49:     cc_args = '-fPIC'
   50: 
   51:     def __init__(self, verbose=0, dry_run=0, force=0):
   52:         UnixCCompiler.__init__(self, verbose, dry_run, force)
   53: 
   54:         v = self.get_version()
   55:         mpopt = 'openmp' if v and v < '15' else 'qopenmp'
   56:         self.cc_exe = ('icc -std=c99 -m64 -fPIC -fp-model strict -O3 '
   57:                        '-fomit-frame-pointer -{}').format(mpopt)
   58:         compiler = self.cc_exe
   59: 
   60:         if platform.system() == 'Darwin':
   61:             shared_flag = '-Wl,-undefined,dynamic_lookup'
   62:         else:
   63:             shared_flag = '-shared'
   64:         self.set_executables(compiler=compiler,
   65:                              compiler_so=compiler,
   66:                              compiler_cxx=compiler,
   67:                              archiver='xiar' + ' cru',
   68:                              linker_exe=compiler + ' -shared-intel',
   69:                              linker_so=compiler + ' ' + shared_flag +
   70:                              ' -shared-intel')
   71: 
   72: 
   73: if platform.system() == 'Windows':
   74:     class IntelCCompilerW(MSVCCompiler):
   75:         """
   76:         A modified Intel compiler compatible with an MSVC-built Python.
   77:         """
   78:         compiler_type = 'intelw'
   79:         compiler_cxx = 'icl'
   80: 
   81:         def __init__(self, verbose=0, dry_run=0, force=0):
   82:             MSVCCompiler.__init__(self, verbose, dry_run, force)
   83:             version_match = simple_version_match(start=r'Intel\(R\).*?32,')
   84:             self.__version = version_match
   85: 
   86:         def initialize(self, plat_name=None):
   87:             MSVCCompiler.initialize(self, plat_name)
   88:             self.cc = self.find_exe('icl.exe')
   89:             self.lib = self.find_exe('xilib')
   90:             self.linker = self.find_exe('xilink')
   91:             self.compile_options = ['/nologo', '/O3', '/MD', '/W3',
   92:                                     '/Qstd=c99']
   93:             self.compile_options_debug = ['/nologo', '/Od', '/MDd', '/W3',
   94:                                           '/Qstd=c99', '/Z7', '/D_DEBUG']
   95: 
   96:     class IntelEM64TCCompilerW(IntelCCompilerW):
   97:         """
   98:         A modified Intel x86_64 compiler compatible with
   99:         a 64bit MSVC-built Python.
  100:         """
  101:         compiler_type = 'intelemw'
  102: 
  103:         def __init__(self, verbose=0, dry_run=0, force=0):
  104:             MSVCCompiler.__init__(self, verbose, dry_run, force)
  105:             version_match = simple_version_match(start=r'Intel\(R\).*?64,')
  106:             self.__version = version_match
