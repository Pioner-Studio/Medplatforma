    1: from numpy.distutils.fcompiler import FCompiler
    2: 
    3: compilers = ['HPUXFCompiler']
    4: 
    5: class HPUXFCompiler(FCompiler):
    6: 
    7:     compiler_type = 'hpux'
    8:     description = 'HP Fortran 90 Compiler'
    9:     version_pattern =  r'HP F90 (?P<version>[^\s*,]*)'
   10: 
   11:     executables = {
   12:         'version_cmd'  : ["f90", "+version"],
   13:         'compiler_f77' : ["f90"],
   14:         'compiler_fix' : ["f90"],
   15:         'compiler_f90' : ["f90"],
   16:         'linker_so'    : ["ld", "-b"],
   17:         'archiver'     : ["ar", "-cr"],
   18:         'ranlib'       : ["ranlib"]
   19:         }
   20:     module_dir_switch = None #XXX: fix me
   21:     module_include_switch = None #XXX: fix me
   22:     pic_flags = ['+Z']
   23:     def get_flags(self):
   24:         return self.pic_flags + ['+ppu', '+DD64']
   25:     def get_flags_opt(self):
   26:         return ['-O3']
   27:     def get_libraries(self):
   28:         return ['m']
   29:     def get_library_dirs(self):
   30:         opt = ['/usr/lib/hpux64']
   31:         return opt
   32:     def get_version(self, force=0, ok_status=[256, 0, 1]):
   33:         # XXX status==256 may indicate 'unrecognized option' or
   34:         #     'no input file'. So, version_cmd needs more work.
   35:         return FCompiler.get_version(self, force, ok_status)
   36: 
   37: if __name__ == '__main__':
   38:     from distutils import log
   39:     log.set_verbosity(10)
   40:     from numpy.distutils import customized_fcompiler
   41:     print(customized_fcompiler(compiler='hpux').get_version())
