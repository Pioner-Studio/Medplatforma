    1: # http://www.pgroup.com
    2: import sys
    3: 
    4: from numpy.distutils.fcompiler import FCompiler
    5: from sys import platform
    6: from os.path import join, dirname, normpath
    7: 
    8: compilers = ['PGroupFCompiler', 'PGroupFlangCompiler']
    9: 
   10: 
   11: class PGroupFCompiler(FCompiler):
   12: 
   13:     compiler_type = 'pg'
   14:     description = 'Portland Group Fortran Compiler'
   15:     version_pattern = r'\s*pg(f77|f90|hpf|fortran) (?P<version>[\d.-]+).*'
   16: 
   17:     if platform == 'darwin':
   18:         executables = {
   19:             'version_cmd': ["<F77>", "-V"],
   20:             'compiler_f77': ["pgfortran", "-dynamiclib"],
   21:             'compiler_fix': ["pgfortran", "-Mfixed", "-dynamiclib"],
   22:             'compiler_f90': ["pgfortran", "-dynamiclib"],
   23:             'linker_so': ["libtool"],
   24:             'archiver': ["ar", "-cr"],
   25:             'ranlib': ["ranlib"]
   26:         }
   27:         pic_flags = ['']
   28:     else:
   29:         executables = {
   30:             'version_cmd': ["<F77>", "-V"],
   31:             'compiler_f77': ["pgfortran"],
   32:             'compiler_fix': ["pgfortran", "-Mfixed"],
   33:             'compiler_f90': ["pgfortran"],
   34:             'linker_so': ["<F90>"],
   35:             'archiver': ["ar", "-cr"],
   36:             'ranlib': ["ranlib"]
   37:         }
   38:         pic_flags = ['-fpic']
   39: 
   40:     module_dir_switch = '-module '
   41:     module_include_switch = '-I'
   42: 
   43:     def get_flags(self):
   44:         opt = ['-Minform=inform', '-Mnosecond_underscore']
   45:         return self.pic_flags + opt
   46: 
   47:     def get_flags_opt(self):
   48:         return ['-fast']
   49: 
   50:     def get_flags_debug(self):
   51:         return ['-g']
   52: 
   53:     if platform == 'darwin':
   54:         def get_flags_linker_so(self):
   55:             return ["-dynamic", '-undefined', 'dynamic_lookup']
   56: 
   57:     else:
   58:         def get_flags_linker_so(self):
   59:             return ["-shared", '-fpic']
   60: 
   61:     def runtime_library_dir_option(self, dir):
   62:         return '-R%s' % dir
   63: 
   64: 
   65: import functools
   66: 
   67: class PGroupFlangCompiler(FCompiler):
   68:     compiler_type = 'flang'
   69:     description = 'Portland Group Fortran LLVM Compiler'
   70:     version_pattern = r'\s*(flang|clang) version (?P<version>[\d.-]+).*'
   71: 
   72:     ar_exe = 'lib.exe'
   73:     possible_executables = ['flang']
   74: 
   75:     executables = {
   76:         'version_cmd': ["<F77>", "--version"],
   77:         'compiler_f77': ["flang"],
   78:         'compiler_fix': ["flang"],
   79:         'compiler_f90': ["flang"],
   80:         'linker_so': [None],
   81:         'archiver': [ar_exe, "/verbose", "/OUT:"],
   82:         'ranlib': None
   83:     }
   84: 
   85:     library_switch = '/OUT:'  # No space after /OUT:!
   86:     module_dir_switch = '-module '  # Don't remove ending space!
   87: 
   88:     def get_libraries(self):
   89:         opt = FCompiler.get_libraries(self)
   90:         opt.extend(['flang', 'flangrti', 'ompstub'])
   91:         return opt
   92: 
   93:     @functools.lru_cache(maxsize=128)
   94:     def get_library_dirs(self):
   95:         """List of compiler library directories."""
   96:         opt = FCompiler.get_library_dirs(self)
   97:         flang_dir = dirname(self.executables['compiler_f77'][0])
   98:         opt.append(normpath(join(flang_dir, '..', 'lib')))
   99: 
  100:         return opt
  101: 
  102:     def get_flags(self):
  103:         return []
  104: 
  105:     def get_flags_free(self):
  106:         return []
  107: 
  108:     def get_flags_debug(self):
  109:         return ['-g']
  110: 
  111:     def get_flags_opt(self):
  112:         return ['-O3']
  113: 
  114:     def get_flags_arch(self):
  115:         return []
  116: 
  117:     def runtime_library_dir_option(self, dir):
  118:         raise NotImplementedError
  119: 
  120: 
  121: if __name__ == '__main__':
  122:     from distutils import log
  123:     log.set_verbosity(2)
  124:     from numpy.distutils import customized_fcompiler
  125:     if 'flang' in sys.argv:
  126:         print(customized_fcompiler(compiler='flang').get_version())
  127:     else:
  128:         print(customized_fcompiler(compiler='pg').get_version())
