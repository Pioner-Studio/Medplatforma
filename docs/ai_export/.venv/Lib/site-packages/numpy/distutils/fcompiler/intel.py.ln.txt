    1: # http://developer.intel.com/software/products/compilers/flin/
    2: import sys
    3: 
    4: from numpy.distutils.ccompiler import simple_version_match
    5: from numpy.distutils.fcompiler import FCompiler, dummy_fortran_file
    6: 
    7: compilers = ['IntelFCompiler', 'IntelVisualFCompiler',
    8:              'IntelItaniumFCompiler', 'IntelItaniumVisualFCompiler',
    9:              'IntelEM64VisualFCompiler', 'IntelEM64TFCompiler']
   10: 
   11: 
   12: def intel_version_match(type):
   13:     # Match against the important stuff in the version string
   14:     return simple_version_match(start=r'Intel.*?Fortran.*?(?:%s).*?Version' % (type,))
   15: 
   16: 
   17: class BaseIntelFCompiler(FCompiler):
   18:     def update_executables(self):
   19:         f = dummy_fortran_file()
   20:         self.executables['version_cmd'] = ['<F77>', '-FI', '-V', '-c',
   21:                                            f + '.f', '-o', f + '.o']
   22: 
   23:     def runtime_library_dir_option(self, dir):
   24:         # TODO: could use -Xlinker here, if it's supported
   25:         assert "," not in dir
   26: 
   27:         return '-Wl,-rpath=%s' % dir
   28: 
   29: 
   30: class IntelFCompiler(BaseIntelFCompiler):
   31: 
   32:     compiler_type = 'intel'
   33:     compiler_aliases = ('ifort',)
   34:     description = 'Intel Fortran Compiler for 32-bit apps'
   35:     version_match = intel_version_match('32-bit|IA-32')
   36: 
   37:     possible_executables = ['ifort', 'ifc']
   38: 
   39:     executables = {
   40:         'version_cmd'  : None,          # set by update_executables
   41:         'compiler_f77' : [None, "-72", "-w90", "-w95"],
   42:         'compiler_f90' : [None],
   43:         'compiler_fix' : [None, "-FI"],
   44:         'linker_so'    : ["<F90>", "-shared"],
   45:         'archiver'     : ["ar", "-cr"],
   46:         'ranlib'       : ["ranlib"]
   47:         }
   48: 
   49:     pic_flags = ['-fPIC']
   50:     module_dir_switch = '-module '  # Don't remove ending space!
   51:     module_include_switch = '-I'
   52: 
   53:     def get_flags_free(self):
   54:         return ['-FR']
   55: 
   56:     def get_flags(self):
   57:         return ['-fPIC']
   58: 
   59:     def get_flags_opt(self):  # Scipy test failures with -O2
   60:         v = self.get_version()
   61:         mpopt = 'openmp' if v and v < '15' else 'qopenmp'
   62:         return ['-fp-model', 'strict', '-O1',
   63:                 '-assume', 'minus0', '-{}'.format(mpopt)]
   64: 
   65:     def get_flags_arch(self):
   66:         return []
   67: 
   68:     def get_flags_linker_so(self):
   69:         opt = FCompiler.get_flags_linker_so(self)
   70:         v = self.get_version()
   71:         if v and v >= '8.0':
   72:             opt.append('-nofor_main')
   73:         if sys.platform == 'darwin':
   74:             # Here, it's -dynamiclib
   75:             try:
   76:                 idx = opt.index('-shared')
   77:                 opt.remove('-shared')
   78:             except ValueError:
   79:                 idx = 0
   80:             opt[idx:idx] = ['-dynamiclib', '-Wl,-undefined,dynamic_lookup']
   81:         return opt
   82: 
   83: 
   84: class IntelItaniumFCompiler(IntelFCompiler):
   85:     compiler_type = 'intele'
   86:     compiler_aliases = ()
   87:     description = 'Intel Fortran Compiler for Itanium apps'
   88: 
   89:     version_match = intel_version_match('Itanium|IA-64')
   90: 
   91:     possible_executables = ['ifort', 'efort', 'efc']
   92: 
   93:     executables = {
   94:         'version_cmd'  : None,
   95:         'compiler_f77' : [None, "-FI", "-w90", "-w95"],
   96:         'compiler_fix' : [None, "-FI"],
   97:         'compiler_f90' : [None],
   98:         'linker_so'    : ['<F90>', "-shared"],
   99:         'archiver'     : ["ar", "-cr"],
  100:         'ranlib'       : ["ranlib"]
  101:         }
  102: 
  103: 
  104: class IntelEM64TFCompiler(IntelFCompiler):
  105:     compiler_type = 'intelem'
  106:     compiler_aliases = ()
  107:     description = 'Intel Fortran Compiler for 64-bit apps'
  108: 
  109:     version_match = intel_version_match('EM64T-based|Intel\\(R\\) 64|64|IA-64|64-bit')
  110: 
  111:     possible_executables = ['ifort', 'efort', 'efc']
  112: 
  113:     executables = {
  114:         'version_cmd'  : None,
  115:         'compiler_f77' : [None, "-FI"],
  116:         'compiler_fix' : [None, "-FI"],
  117:         'compiler_f90' : [None],
  118:         'linker_so'    : ['<F90>', "-shared"],
  119:         'archiver'     : ["ar", "-cr"],
  120:         'ranlib'       : ["ranlib"]
  121:         }
  122: 
  123: # Is there no difference in the version string between the above compilers
  124: # and the Visual compilers?
  125: 
  126: 
  127: class IntelVisualFCompiler(BaseIntelFCompiler):
  128:     compiler_type = 'intelv'
  129:     description = 'Intel Visual Fortran Compiler for 32-bit apps'
  130:     version_match = intel_version_match('32-bit|IA-32')
  131: 
  132:     def update_executables(self):
  133:         f = dummy_fortran_file()
  134:         self.executables['version_cmd'] = ['<F77>', '/FI', '/c',
  135:                                            f + '.f', '/o', f + '.o']
  136: 
  137:     ar_exe = 'lib.exe'
  138:     possible_executables = ['ifort', 'ifl']
  139: 
  140:     executables = {
  141:         'version_cmd'  : None,
  142:         'compiler_f77' : [None],
  143:         'compiler_fix' : [None],
  144:         'compiler_f90' : [None],
  145:         'linker_so'    : [None],
  146:         'archiver'     : [ar_exe, "/verbose", "/OUT:"],
  147:         'ranlib'       : None
  148:         }
  149: 
  150:     compile_switch = '/c '
  151:     object_switch = '/Fo'     # No space after /Fo!
  152:     library_switch = '/OUT:'  # No space after /OUT:!
  153:     module_dir_switch = '/module:'  # No space after /module:
  154:     module_include_switch = '/I'
  155: 
  156:     def get_flags(self):
  157:         opt = ['/nologo', '/MD', '/nbs', '/names:lowercase',
  158:                '/assume:underscore', '/fpp']
  159:         return opt
  160: 
  161:     def get_flags_free(self):
  162:         return []
  163: 
  164:     def get_flags_debug(self):
  165:         return ['/4Yb', '/d2']
  166: 
  167:     def get_flags_opt(self):
  168:         return ['/O1', '/assume:minus0']  # Scipy test failures with /O2
  169: 
  170:     def get_flags_arch(self):
  171:         return ["/arch:IA32", "/QaxSSE3"]
  172: 
  173:     def runtime_library_dir_option(self, dir):
  174:         raise NotImplementedError
  175: 
  176: 
  177: class IntelItaniumVisualFCompiler(IntelVisualFCompiler):
  178:     compiler_type = 'intelev'
  179:     description = 'Intel Visual Fortran Compiler for Itanium apps'
  180: 
  181:     version_match = intel_version_match('Itanium')
  182: 
  183:     possible_executables = ['efl']  # XXX this is a wild guess
  184:     ar_exe = IntelVisualFCompiler.ar_exe
  185: 
  186:     executables = {
  187:         'version_cmd'  : None,
  188:         'compiler_f77' : [None, "-FI", "-w90", "-w95"],
  189:         'compiler_fix' : [None, "-FI", "-4L72", "-w"],
  190:         'compiler_f90' : [None],
  191:         'linker_so'    : ['<F90>', "-shared"],
  192:         'archiver'     : [ar_exe, "/verbose", "/OUT:"],
  193:         'ranlib'       : None
  194:         }
  195: 
  196: 
  197: class IntelEM64VisualFCompiler(IntelVisualFCompiler):
  198:     compiler_type = 'intelvem'
  199:     description = 'Intel Visual Fortran Compiler for 64-bit apps'
  200: 
  201:     version_match = simple_version_match(start=r'Intel\(R\).*?64,')
  202: 
  203:     def get_flags_arch(self):
  204:         return []
  205: 
  206: 
  207: if __name__ == '__main__':
  208:     from distutils import log
  209:     log.set_verbosity(2)
  210:     from numpy.distutils import customized_fcompiler
  211:     print(customized_fcompiler(compiler='intel').get_version())
