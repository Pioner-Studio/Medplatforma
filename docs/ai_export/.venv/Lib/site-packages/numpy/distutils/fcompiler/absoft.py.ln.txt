    1: 
    2: # Absoft Corporation ceased operations on 12/31/2022.
    3: # Thus, all links to <http://www.absoft.com> are invalid.
    4: 
    5: # Notes:
    6: # - when using -g77 then use -DUNDERSCORE_G77 to compile f2py
    7: #   generated extension modules (works for f2py v2.45.241_1936 and up)
    8: import os
    9: 
   10: from numpy.distutils.cpuinfo import cpu
   11: from numpy.distutils.fcompiler import FCompiler, dummy_fortran_file
   12: from numpy.distutils.misc_util import cyg2win32
   13: 
   14: compilers = ['AbsoftFCompiler']
   15: 
   16: class AbsoftFCompiler(FCompiler):
   17: 
   18:     compiler_type = 'absoft'
   19:     description = 'Absoft Corp Fortran Compiler'
   20:     #version_pattern = r'FORTRAN 77 Compiler (?P<version>[^\s*,]*).*?Absoft Corp'
   21:     version_pattern = r'(f90:.*?(Absoft Pro FORTRAN Version|FORTRAN 77 Compiler'\
   22:                       r'|Absoft Fortran Compiler Version'\
   23:                       r'|Copyright Absoft Corporation.*?Version))'\
   24:                       r' (?P<version>[^\s*,]*)(.*?Absoft Corp|)'
   25: 
   26:     # on windows: f90 -V -c dummy.f
   27:     # f90: Copyright Absoft Corporation 1994-1998 mV2; Cray Research, Inc. 1994-1996 CF90 (2.x.x.x  f36t87) Version 2.3 Wed Apr 19, 2006  13:05:16
   28: 
   29:     # samt5735(8)$ f90 -V -c dummy.f
   30:     # f90: Copyright Absoft Corporation 1994-2002; Absoft Pro FORTRAN Version 8.0
   31:     # Note that fink installs g77 as f77, so need to use f90 for detection.
   32: 
   33:     executables = {
   34:         'version_cmd'  : None,          # set by update_executables
   35:         'compiler_f77' : ["f77"],
   36:         'compiler_fix' : ["f90"],
   37:         'compiler_f90' : ["f90"],
   38:         'linker_so'    : ["<F90>"],
   39:         'archiver'     : ["ar", "-cr"],
   40:         'ranlib'       : ["ranlib"]
   41:         }
   42: 
   43:     if os.name=='nt':
   44:         library_switch = '/out:'      #No space after /out:!
   45: 
   46:     module_dir_switch = None
   47:     module_include_switch = '-p'
   48: 
   49:     def update_executables(self):
   50:         f = cyg2win32(dummy_fortran_file())
   51:         self.executables['version_cmd'] = ['<F90>', '-V', '-c',
   52:                                            f+'.f', '-o', f+'.o']
   53: 
   54:     def get_flags_linker_so(self):
   55:         if os.name=='nt':
   56:             opt = ['/dll']
   57:         # The "-K shared" switches are being left in for pre-9.0 versions
   58:         # of Absoft though I don't think versions earlier than 9 can
   59:         # actually be used to build shared libraries.  In fact, version
   60:         # 8 of Absoft doesn't recognize "-K shared" and will fail.
   61:         elif self.get_version() >= '9.0':
   62:             opt = ['-shared']
   63:         else:
   64:             opt = ["-K", "shared"]
   65:         return opt
   66: 
   67:     def library_dir_option(self, dir):
   68:         if os.name=='nt':
   69:             return ['-link', '/PATH:%s' % (dir)]
   70:         return "-L" + dir
   71: 
   72:     def library_option(self, lib):
   73:         if os.name=='nt':
   74:             return '%s.lib' % (lib)
   75:         return "-l" + lib
   76: 
   77:     def get_library_dirs(self):
   78:         opt = FCompiler.get_library_dirs(self)
   79:         d = os.environ.get('ABSOFT')
   80:         if d:
   81:             if self.get_version() >= '10.0':
   82:                 # use shared libraries, the static libraries were not compiled -fPIC
   83:                 prefix = 'sh'
   84:             else:
   85:                 prefix = ''
   86:             if cpu.is_64bit():
   87:                 suffix = '64'
   88:             else:
   89:                 suffix = ''
   90:             opt.append(os.path.join(d, '%slib%s' % (prefix, suffix)))
   91:         return opt
   92: 
   93:     def get_libraries(self):
   94:         opt = FCompiler.get_libraries(self)
   95:         if self.get_version() >= '11.0':
   96:             opt.extend(['af90math', 'afio', 'af77math', 'amisc'])
   97:         elif self.get_version() >= '10.0':
   98:             opt.extend(['af90math', 'afio', 'af77math', 'U77'])
   99:         elif self.get_version() >= '8.0':
  100:             opt.extend(['f90math', 'fio', 'f77math', 'U77'])
  101:         else:
  102:             opt.extend(['fio', 'f90math', 'fmath', 'U77'])
  103:         if os.name =='nt':
  104:             opt.append('COMDLG32')
  105:         return opt
  106: 
  107:     def get_flags(self):
  108:         opt = FCompiler.get_flags(self)
  109:         if os.name != 'nt':
  110:             opt.extend(['-s'])
  111:             if self.get_version():
  112:                 if self.get_version()>='8.2':
  113:                     opt.append('-fpic')
  114:         return opt
  115: 
  116:     def get_flags_f77(self):
  117:         opt = FCompiler.get_flags_f77(self)
  118:         opt.extend(['-N22', '-N90', '-N110'])
  119:         v = self.get_version()
  120:         if os.name == 'nt':
  121:             if v and v>='8.0':
  122:                 opt.extend(['-f', '-N15'])
  123:         else:
  124:             opt.append('-f')
  125:             if v:
  126:                 if v<='4.6':
  127:                     opt.append('-B108')
  128:                 else:
  129:                     # Though -N15 is undocumented, it works with
  130:                     # Absoft 8.0 on Linux
  131:                     opt.append('-N15')
  132:         return opt
  133: 
  134:     def get_flags_f90(self):
  135:         opt = FCompiler.get_flags_f90(self)
  136:         opt.extend(["-YCFRL=1", "-YCOM_NAMES=LCS", "-YCOM_PFX", "-YEXT_PFX",
  137:                     "-YCOM_SFX=_", "-YEXT_SFX=_", "-YEXT_NAMES=LCS"])
  138:         if self.get_version():
  139:             if self.get_version()>'4.6':
  140:                 opt.extend(["-YDEALLOC=ALL"])
  141:         return opt
  142: 
  143:     def get_flags_fix(self):
  144:         opt = FCompiler.get_flags_fix(self)
  145:         opt.extend(["-YCFRL=1", "-YCOM_NAMES=LCS", "-YCOM_PFX", "-YEXT_PFX",
  146:                     "-YCOM_SFX=_", "-YEXT_SFX=_", "-YEXT_NAMES=LCS"])
  147:         opt.extend(["-f", "fixed"])
  148:         return opt
  149: 
  150:     def get_flags_opt(self):
  151:         opt = ['-O']
  152:         return opt
  153: 
  154: if __name__ == '__main__':
  155:     from distutils import log
  156:     log.set_verbosity(2)
  157:     from numpy.distutils import customized_fcompiler
  158:     print(customized_fcompiler(compiler='absoft').get_version())
