    1: import sys
    2: import re
    3: from numpy.distutils.fcompiler import FCompiler
    4: 
    5: compilers = ['NAGFCompiler', 'NAGFORCompiler']
    6: 
    7: class BaseNAGFCompiler(FCompiler):
    8:     version_pattern = r'NAG.* Release (?P<version>[^(\s]*)'
    9: 
   10:     def version_match(self, version_string):
   11:         m = re.search(self.version_pattern, version_string)
   12:         if m:
   13:             return m.group('version')
   14:         else:
   15:             return None
   16: 
   17:     def get_flags_linker_so(self):
   18:         return ["-Wl,-shared"]
   19:     def get_flags_opt(self):
   20:         return ['-O4']
   21:     def get_flags_arch(self):
   22:         return []
   23: 
   24: class NAGFCompiler(BaseNAGFCompiler):
   25: 
   26:     compiler_type = 'nag'
   27:     description = 'NAGWare Fortran 95 Compiler'
   28: 
   29:     executables = {
   30:         'version_cmd'  : ["<F90>", "-V"],
   31:         'compiler_f77' : ["f95", "-fixed"],
   32:         'compiler_fix' : ["f95", "-fixed"],
   33:         'compiler_f90' : ["f95"],
   34:         'linker_so'    : ["<F90>"],
   35:         'archiver'     : ["ar", "-cr"],
   36:         'ranlib'       : ["ranlib"]
   37:         }
   38: 
   39:     def get_flags_linker_so(self):
   40:         if sys.platform == 'darwin':
   41:             return ['-unsharedf95', '-Wl,-bundle,-flat_namespace,-undefined,suppress']
   42:         return BaseNAGFCompiler.get_flags_linker_so(self)
   43:     def get_flags_arch(self):
   44:         version = self.get_version()
   45:         if version and version < '5.1':
   46:             return ['-target=native']
   47:         else:
   48:             return BaseNAGFCompiler.get_flags_arch(self)
   49:     def get_flags_debug(self):
   50:         return ['-g', '-gline', '-g90', '-nan', '-C']
   51: 
   52: class NAGFORCompiler(BaseNAGFCompiler):
   53: 
   54:     compiler_type = 'nagfor'
   55:     description = 'NAG Fortran Compiler'
   56: 
   57:     executables = {
   58:         'version_cmd'  : ["nagfor", "-V"],
   59:         'compiler_f77' : ["nagfor", "-fixed"],
   60:         'compiler_fix' : ["nagfor", "-fixed"],
   61:         'compiler_f90' : ["nagfor"],
   62:         'linker_so'    : ["nagfor"],
   63:         'archiver'     : ["ar", "-cr"],
   64:         'ranlib'       : ["ranlib"]
   65:         }
   66: 
   67:     def get_flags_linker_so(self):
   68:         if sys.platform == 'darwin':
   69:             return ['-unsharedrts',
   70:                     '-Wl,-bundle,-flat_namespace,-undefined,suppress']
   71:         return BaseNAGFCompiler.get_flags_linker_so(self)
   72:     def get_flags_debug(self):
   73:         version = self.get_version()
   74:         if version and version > '6.1':
   75:             return ['-g', '-u', '-nan', '-C=all', '-thread_safe',
   76:                     '-kind=unique', '-Warn=allocation', '-Warn=subnormal']
   77:         else:
   78:             return ['-g', '-nan', '-C=all', '-u', '-thread_safe']
   79: 
   80: 
   81: if __name__ == '__main__':
   82:     from distutils import log
   83:     log.set_verbosity(2)
   84:     from numpy.distutils import customized_fcompiler
   85:     compiler = customized_fcompiler(compiler='nagfor')
   86:     print(compiler.get_version())
   87:     print(compiler.get_flags_debug())
