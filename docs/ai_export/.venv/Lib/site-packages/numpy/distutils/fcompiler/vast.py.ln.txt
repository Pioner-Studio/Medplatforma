    1: import os
    2: 
    3: from numpy.distutils.fcompiler.gnu import GnuFCompiler
    4: 
    5: compilers = ['VastFCompiler']
    6: 
    7: class VastFCompiler(GnuFCompiler):
    8:     compiler_type = 'vast'
    9:     compiler_aliases = ()
   10:     description = 'Pacific-Sierra Research Fortran 90 Compiler'
   11:     version_pattern = (r'\s*Pacific-Sierra Research vf90 '
   12:                        r'(Personal|Professional)\s+(?P<version>[^\s]*)')
   13: 
   14:     # VAST f90 does not support -o with -c. So, object files are created
   15:     # to the current directory and then moved to build directory
   16:     object_switch = ' && function _mvfile { mv -v `basename $1` $1 ; } && _mvfile '
   17: 
   18:     executables = {
   19:         'version_cmd'  : ["vf90", "-v"],
   20:         'compiler_f77' : ["g77"],
   21:         'compiler_fix' : ["f90", "-Wv,-ya"],
   22:         'compiler_f90' : ["f90"],
   23:         'linker_so'    : ["<F90>"],
   24:         'archiver'     : ["ar", "-cr"],
   25:         'ranlib'       : ["ranlib"]
   26:         }
   27:     module_dir_switch = None  #XXX Fix me
   28:     module_include_switch = None #XXX Fix me
   29: 
   30:     def find_executables(self):
   31:         pass
   32: 
   33:     def get_version_cmd(self):
   34:         f90 = self.compiler_f90[0]
   35:         d, b = os.path.split(f90)
   36:         vf90 = os.path.join(d, 'v'+b)
   37:         return vf90
   38: 
   39:     def get_flags_arch(self):
   40:         vast_version = self.get_version()
   41:         gnu = GnuFCompiler()
   42:         gnu.customize(None)
   43:         self.version = gnu.get_version()
   44:         opt = GnuFCompiler.get_flags_arch(self)
   45:         self.version = vast_version
   46:         return opt
   47: 
   48: if __name__ == '__main__':
   49:     from distutils import log
   50:     log.set_verbosity(2)
   51:     from numpy.distutils import customized_fcompiler
   52:     print(customized_fcompiler(compiler='vast').get_version())
