    1: import os
    2: import sys
    3: from distutils.command.build import build as old_build
    4: from distutils.util import get_platform
    5: from numpy.distutils.command.config_compiler import show_fortran_compilers
    6: 
    7: class build(old_build):
    8: 
    9:     sub_commands = [('config_cc',     lambda *args: True),
   10:                     ('config_fc',     lambda *args: True),
   11:                     ('build_src',     old_build.has_ext_modules),
   12:                     ] + old_build.sub_commands
   13: 
   14:     user_options = old_build.user_options + [
   15:         ('fcompiler=', None,
   16:          "specify the Fortran compiler type"),
   17:         ('warn-error', None,
   18:          "turn all warnings into errors (-Werror)"),
   19:         ('cpu-baseline=', None,
   20:          "specify a list of enabled baseline CPU optimizations"),
   21:         ('cpu-dispatch=', None,
   22:          "specify a list of dispatched CPU optimizations"),
   23:         ('disable-optimization', None,
   24:          "disable CPU optimized code(dispatch,simd,fast...)"),
   25:         ('simd-test=', None,
   26:          "specify a list of CPU optimizations to be tested against NumPy SIMD interface"),
   27:         ]
   28: 
   29:     help_options = old_build.help_options + [
   30:         ('help-fcompiler', None, "list available Fortran compilers",
   31:          show_fortran_compilers),
   32:         ]
   33: 
   34:     def initialize_options(self):
   35:         old_build.initialize_options(self)
   36:         self.fcompiler = None
   37:         self.warn_error = False
   38:         self.cpu_baseline = "min"
   39:         self.cpu_dispatch = "max -xop -fma4" # drop AMD legacy features by default
   40:         self.disable_optimization = False
   41:         """
   42:         the '_simd' module is a very large. Adding more dispatched features
   43:         will increase binary size and compile time. By default we minimize
   44:         the targeted features to those most commonly used by the NumPy SIMD interface(NPYV),
   45:         NOTE: any specified features will be ignored if they're:
   46:             - part of the baseline(--cpu-baseline)
   47:             - not part of dispatch-able features(--cpu-dispatch)
   48:             - not supported by compiler or platform
   49:         """
   50:         self.simd_test = "BASELINE SSE2 SSE42 XOP FMA4 (FMA3 AVX2) AVX512F " \
   51:                          "AVX512_SKX VSX VSX2 VSX3 VSX4 NEON ASIMD VX VXE VXE2"
   52: 
   53:     def finalize_options(self):
   54:         build_scripts = self.build_scripts
   55:         old_build.finalize_options(self)
   56:         plat_specifier = ".{}-{}.{}".format(get_platform(), *sys.version_info[:2])
   57:         if build_scripts is None:
   58:             self.build_scripts = os.path.join(self.build_base,
   59:                                               'scripts' + plat_specifier)
   60: 
   61:     def run(self):
   62:         old_build.run(self)
