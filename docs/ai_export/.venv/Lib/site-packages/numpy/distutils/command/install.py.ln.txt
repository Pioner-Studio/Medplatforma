    1: import sys
    2: if 'setuptools' in sys.modules:
    3:     import setuptools.command.install as old_install_mod
    4:     have_setuptools = True
    5: else:
    6:     import distutils.command.install as old_install_mod
    7:     have_setuptools = False
    8: from distutils.file_util import write_file
    9: 
   10: old_install = old_install_mod.install
   11: 
   12: class install(old_install):
   13: 
   14:     # Always run install_clib - the command is cheap, so no need to bypass it;
   15:     # but it's not run by setuptools -- so it's run again in install_data
   16:     sub_commands = old_install.sub_commands + [
   17:         ('install_clib', lambda x: True)
   18:     ]
   19: 
   20:     def finalize_options (self):
   21:         old_install.finalize_options(self)
   22:         self.install_lib = self.install_libbase
   23: 
   24:     def setuptools_run(self):
   25:         """ The setuptools version of the .run() method.
   26: 
   27:         We must pull in the entire code so we can override the level used in the
   28:         _getframe() call since we wrap this call by one more level.
   29:         """
   30:         from distutils.command.install import install as distutils_install
   31: 
   32:         # Explicit request for old-style install?  Just do it
   33:         if self.old_and_unmanageable or self.single_version_externally_managed:
   34:             return distutils_install.run(self)
   35: 
   36:         # Attempt to detect whether we were called from setup() or by another
   37:         # command.  If we were called by setup(), our caller will be the
   38:         # 'run_command' method in 'distutils.dist', and *its* caller will be
   39:         # the 'run_commands' method.  If we were called any other way, our
   40:         # immediate caller *might* be 'run_command', but it won't have been
   41:         # called by 'run_commands'.  This is slightly kludgy, but seems to
   42:         # work.
   43:         #
   44:         caller = sys._getframe(3)
   45:         caller_module = caller.f_globals.get('__name__', '')
   46:         caller_name = caller.f_code.co_name
   47: 
   48:         if caller_module != 'distutils.dist' or caller_name!='run_commands':
   49:             # We weren't called from the command line or setup(), so we
   50:             # should run in backward-compatibility mode to support bdist_*
   51:             # commands.
   52:             distutils_install.run(self)
   53:         else:
   54:             self.do_egg_install()
   55: 
   56:     def run(self):
   57:         if not have_setuptools:
   58:             r = old_install.run(self)
   59:         else:
   60:             r = self.setuptools_run()
   61:         if self.record:
   62:             # bdist_rpm fails when INSTALLED_FILES contains
   63:             # paths with spaces. Such paths must be enclosed
   64:             # with double-quotes.
   65:             with open(self.record) as f:
   66:                 lines = []
   67:                 need_rewrite = False
   68:                 for l in f:
   69:                     l = l.rstrip()
   70:                     if ' ' in l:
   71:                         need_rewrite = True
   72:                         l = '"%s"' % (l)
   73:                     lines.append(l)
   74:             if need_rewrite:
   75:                 self.execute(write_file,
   76:                              (self.record, lines),
   77:                              "re-writing list of installed files to '%s'" %
   78:                              self.record)
   79:         return r
