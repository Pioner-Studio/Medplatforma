    1: """This module implements additional tests ala autoconf which can be useful.
    2: 
    3: """
    4: import textwrap
    5: 
    6: # We put them here since they could be easily reused outside numpy.distutils
    7: 
    8: def check_inline(cmd):
    9:     """Return the inline identifier (may be empty)."""
   10:     cmd._check_compiler()
   11:     body = textwrap.dedent("""
   12:         #ifndef __cplusplus
   13:         static %(inline)s int static_func (void)
   14:         {
   15:             return 0;
   16:         }
   17:         %(inline)s int nostatic_func (void)
   18:         {
   19:             return 0;
   20:         }
   21:         #endif""")
   22: 
   23:     for kw in ['inline', '__inline__', '__inline']:
   24:         st = cmd.try_compile(body % {'inline': kw}, None, None)
   25:         if st:
   26:             return kw
   27: 
   28:     return ''
   29: 
   30: 
   31: def check_restrict(cmd):
   32:     """Return the restrict identifier (may be empty)."""
   33:     cmd._check_compiler()
   34:     body = textwrap.dedent("""
   35:         static int static_func (char * %(restrict)s a)
   36:         {
   37:             return 0;
   38:         }
   39:         """)
   40: 
   41:     for kw in ['restrict', '__restrict__', '__restrict']:
   42:         st = cmd.try_compile(body % {'restrict': kw}, None, None)
   43:         if st:
   44:             return kw
   45: 
   46:     return ''
   47: 
   48: 
   49: def check_compiler_gcc(cmd):
   50:     """Check if the compiler is GCC."""
   51: 
   52:     cmd._check_compiler()
   53:     body = textwrap.dedent("""
   54:         int
   55:         main()
   56:         {
   57:         #if (! defined __GNUC__)
   58:         #error gcc required
   59:         #endif
   60:             return 0;
   61:         }
   62:         """)
   63:     return cmd.try_compile(body, None, None)
   64: 
   65: 
   66: def check_gcc_version_at_least(cmd, major, minor=0, patchlevel=0):
   67:     """
   68:     Check that the gcc version is at least the specified version."""
   69: 
   70:     cmd._check_compiler()
   71:     version = '.'.join([str(major), str(minor), str(patchlevel)])
   72:     body = textwrap.dedent("""
   73:         int
   74:         main()
   75:         {
   76:         #if (! defined __GNUC__) || (__GNUC__ < %(major)d) || \\
   77:                 (__GNUC_MINOR__ < %(minor)d) || \\
   78:                 (__GNUC_PATCHLEVEL__ < %(patchlevel)d)
   79:         #error gcc >= %(version)s required
   80:         #endif
   81:             return 0;
   82:         }
   83:         """)
   84:     kw = {'version': version, 'major': major, 'minor': minor,
   85:           'patchlevel': patchlevel}
   86: 
   87:     return cmd.try_compile(body % kw, None, None)
   88: 
   89: 
   90: def check_gcc_function_attribute(cmd, attribute, name):
   91:     """Return True if the given function attribute is supported."""
   92:     cmd._check_compiler()
   93:     body = textwrap.dedent("""
   94:         #pragma GCC diagnostic error "-Wattributes"
   95:         #pragma clang diagnostic error "-Wattributes"
   96: 
   97:         int %s %s(void* unused)
   98:         {
   99:             return 0;
  100:         }
  101: 
  102:         int
  103:         main()
  104:         {
  105:             return 0;
  106:         }
  107:         """) % (attribute, name)
  108:     return cmd.try_compile(body, None, None) != 0
  109: 
  110: 
  111: def check_gcc_function_attribute_with_intrinsics(cmd, attribute, name, code,
  112:                                                 include):
  113:     """Return True if the given function attribute is supported with
  114:     intrinsics."""
  115:     cmd._check_compiler()
  116:     body = textwrap.dedent("""
  117:         #include<%s>
  118:         int %s %s(void)
  119:         {
  120:             %s;
  121:             return 0;
  122:         }
  123: 
  124:         int
  125:         main()
  126:         {
  127:             return 0;
  128:         }
  129:         """) % (include, attribute, name, code)
  130:     return cmd.try_compile(body, None, None) != 0
  131: 
  132: 
  133: def check_gcc_variable_attribute(cmd, attribute):
  134:     """Return True if the given variable attribute is supported."""
  135:     cmd._check_compiler()
  136:     body = textwrap.dedent("""
  137:         #pragma GCC diagnostic error "-Wattributes"
  138:         #pragma clang diagnostic error "-Wattributes"
  139: 
  140:         int %s foo;
  141: 
  142:         int
  143:         main()
  144:         {
  145:             return 0;
  146:         }
  147:         """) % (attribute, )
  148:     return cmd.try_compile(body, None, None) != 0
