    1: from os.path import join, sep, dirname
    2: 
    3: import pytest
    4: 
    5: from numpy.distutils.misc_util import (
    6:     appendpath, minrelpath, gpaths, get_shared_lib_extension, get_info
    7:     )
    8: from numpy.testing import (
    9:     assert_, assert_equal, IS_EDITABLE
   10:     )
   11: 
   12: ajoin = lambda *paths: join(*((sep,)+paths))
   13: 
   14: class TestAppendpath:
   15: 
   16:     def test_1(self):
   17:         assert_equal(appendpath('prefix', 'name'), join('prefix', 'name'))
   18:         assert_equal(appendpath('/prefix', 'name'), ajoin('prefix', 'name'))
   19:         assert_equal(appendpath('/prefix', '/name'), ajoin('prefix', 'name'))
   20:         assert_equal(appendpath('prefix', '/name'), join('prefix', 'name'))
   21: 
   22:     def test_2(self):
   23:         assert_equal(appendpath('prefix/sub', 'name'),
   24:                      join('prefix', 'sub', 'name'))
   25:         assert_equal(appendpath('prefix/sub', 'sup/name'),
   26:                      join('prefix', 'sub', 'sup', 'name'))
   27:         assert_equal(appendpath('/prefix/sub', '/prefix/name'),
   28:                      ajoin('prefix', 'sub', 'name'))
   29: 
   30:     def test_3(self):
   31:         assert_equal(appendpath('/prefix/sub', '/prefix/sup/name'),
   32:                      ajoin('prefix', 'sub', 'sup', 'name'))
   33:         assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sup/sup2/name'),
   34:                      ajoin('prefix', 'sub', 'sub2', 'sup', 'sup2', 'name'))
   35:         assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sub/sup/name'),
   36:                      ajoin('prefix', 'sub', 'sub2', 'sup', 'name'))
   37: 
   38: class TestMinrelpath:
   39: 
   40:     def test_1(self):
   41:         n = lambda path: path.replace('/', sep)
   42:         assert_equal(minrelpath(n('aa/bb')), n('aa/bb'))
   43:         assert_equal(minrelpath('..'), '..')
   44:         assert_equal(minrelpath(n('aa/..')), '')
   45:         assert_equal(minrelpath(n('aa/../bb')), 'bb')
   46:         assert_equal(minrelpath(n('aa/bb/..')), 'aa')
   47:         assert_equal(minrelpath(n('aa/bb/../..')), '')
   48:         assert_equal(minrelpath(n('aa/bb/../cc/../dd')), n('aa/dd'))
   49:         assert_equal(minrelpath(n('.././..')), n('../..'))
   50:         assert_equal(minrelpath(n('aa/bb/.././../dd')), n('dd'))
   51: 
   52: class TestGpaths:
   53: 
   54:     def test_gpaths(self):
   55:         local_path = minrelpath(join(dirname(__file__), '..'))
   56:         ls = gpaths('command/*.py', local_path)
   57:         assert_(join(local_path, 'command', 'build_src.py') in ls, repr(ls))
   58:         f = gpaths('system_info.py', local_path)
   59:         assert_(join(local_path, 'system_info.py') == f[0], repr(f))
   60: 
   61: class TestSharedExtension:
   62: 
   63:     def test_get_shared_lib_extension(self):
   64:         import sys
   65:         ext = get_shared_lib_extension(is_python_ext=False)
   66:         if sys.platform.startswith('linux'):
   67:             assert_equal(ext, '.so')
   68:         elif sys.platform.startswith('gnukfreebsd'):
   69:             assert_equal(ext, '.so')
   70:         elif sys.platform.startswith('darwin'):
   71:             assert_equal(ext, '.dylib')
   72:         elif sys.platform.startswith('win'):
   73:             assert_equal(ext, '.dll')
   74:         # just check for no crash
   75:         assert_(get_shared_lib_extension(is_python_ext=True))
   76: 
   77: 
   78: @pytest.mark.skipif(
   79:     IS_EDITABLE,
   80:     reason="`get_info` .ini lookup method incompatible with editable install"
   81: )
   82: def test_installed_npymath_ini():
   83:     # Regression test for gh-7707.  If npymath.ini wasn't installed, then this
   84:     # will give an error.
   85:     info = get_info('npymath')
   86: 
   87:     assert isinstance(info, dict)
   88:     assert "define_macros" in info
