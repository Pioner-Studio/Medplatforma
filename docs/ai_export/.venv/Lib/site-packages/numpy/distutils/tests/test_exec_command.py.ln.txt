    1: import os
    2: import pytest
    3: import sys
    4: from tempfile import TemporaryFile
    5: 
    6: from numpy.distutils import exec_command
    7: from numpy.distutils.exec_command import get_pythonexe
    8: from numpy.testing import tempdir, assert_, assert_warns, IS_WASM
    9: 
   10: 
   11: # In python 3 stdout, stderr are text (unicode compliant) devices, so to
   12: # emulate them import StringIO from the io module.
   13: from io import StringIO
   14: 
   15: class redirect_stdout:
   16:     """Context manager to redirect stdout for exec_command test."""
   17:     def __init__(self, stdout=None):
   18:         self._stdout = stdout or sys.stdout
   19: 
   20:     def __enter__(self):
   21:         self.old_stdout = sys.stdout
   22:         sys.stdout = self._stdout
   23: 
   24:     def __exit__(self, exc_type, exc_value, traceback):
   25:         self._stdout.flush()
   26:         sys.stdout = self.old_stdout
   27:         # note: closing sys.stdout won't close it.
   28:         self._stdout.close()
   29: 
   30: class redirect_stderr:
   31:     """Context manager to redirect stderr for exec_command test."""
   32:     def __init__(self, stderr=None):
   33:         self._stderr = stderr or sys.stderr
   34: 
   35:     def __enter__(self):
   36:         self.old_stderr = sys.stderr
   37:         sys.stderr = self._stderr
   38: 
   39:     def __exit__(self, exc_type, exc_value, traceback):
   40:         self._stderr.flush()
   41:         sys.stderr = self.old_stderr
   42:         # note: closing sys.stderr won't close it.
   43:         self._stderr.close()
   44: 
   45: class emulate_nonposix:
   46:     """Context manager to emulate os.name != 'posix' """
   47:     def __init__(self, osname='non-posix'):
   48:         self._new_name = osname
   49: 
   50:     def __enter__(self):
   51:         self._old_name = os.name
   52:         os.name = self._new_name
   53: 
   54:     def __exit__(self, exc_type, exc_value, traceback):
   55:         os.name = self._old_name
   56: 
   57: 
   58: def test_exec_command_stdout():
   59:     # Regression test for gh-2999 and gh-2915.
   60:     # There are several packages (nose, scipy.weave.inline, Sage inline
   61:     # Fortran) that replace stdout, in which case it doesn't have a fileno
   62:     # method.  This is tested here, with a do-nothing command that fails if the
   63:     # presence of fileno() is assumed in exec_command.
   64: 
   65:     # The code has a special case for posix systems, so if we are on posix test
   66:     # both that the special case works and that the generic code works.
   67: 
   68:     # Test posix version:
   69:     with redirect_stdout(StringIO()):
   70:         with redirect_stderr(TemporaryFile()):
   71:             with assert_warns(DeprecationWarning):
   72:                 exec_command.exec_command("cd '.'")
   73: 
   74:     if os.name == 'posix':
   75:         # Test general (non-posix) version:
   76:         with emulate_nonposix():
   77:             with redirect_stdout(StringIO()):
   78:                 with redirect_stderr(TemporaryFile()):
   79:                     with assert_warns(DeprecationWarning):
   80:                         exec_command.exec_command("cd '.'")
   81: 
   82: def test_exec_command_stderr():
   83:     # Test posix version:
   84:     with redirect_stdout(TemporaryFile(mode='w+')):
   85:         with redirect_stderr(StringIO()):
   86:             with assert_warns(DeprecationWarning):
   87:                 exec_command.exec_command("cd '.'")
   88: 
   89:     if os.name == 'posix':
   90:         # Test general (non-posix) version:
   91:         with emulate_nonposix():
   92:             with redirect_stdout(TemporaryFile()):
   93:                 with redirect_stderr(StringIO()):
   94:                     with assert_warns(DeprecationWarning):
   95:                         exec_command.exec_command("cd '.'")
   96: 
   97: 
   98: @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
   99: class TestExecCommand:
  100:     def setup_method(self):
  101:         self.pyexe = get_pythonexe()
  102: 
  103:     def check_nt(self, **kws):
  104:         s, o = exec_command.exec_command('cmd /C echo path=%path%')
  105:         assert_(s == 0)
  106:         assert_(o != '')
  107: 
  108:         s, o = exec_command.exec_command(
  109:          '"%s" -c "import sys;sys.stderr.write(sys.platform)"' % self.pyexe)
  110:         assert_(s == 0)
  111:         assert_(o == 'win32')
  112: 
  113:     def check_posix(self, **kws):
  114:         s, o = exec_command.exec_command("echo Hello", **kws)
  115:         assert_(s == 0)
  116:         assert_(o == 'Hello')
  117: 
  118:         s, o = exec_command.exec_command('echo $AAA', **kws)
  119:         assert_(s == 0)
  120:         assert_(o == '')
  121: 
  122:         s, o = exec_command.exec_command('echo "$AAA"', AAA='Tere', **kws)
  123:         assert_(s == 0)
  124:         assert_(o == 'Tere')
  125: 
  126:         s, o = exec_command.exec_command('echo "$AAA"', **kws)
  127:         assert_(s == 0)
  128:         assert_(o == '')
  129: 
  130:         if 'BBB' not in os.environ:
  131:             os.environ['BBB'] = 'Hi'
  132:             s, o = exec_command.exec_command('echo "$BBB"', **kws)
  133:             assert_(s == 0)
  134:             assert_(o == 'Hi')
  135: 
  136:             s, o = exec_command.exec_command('echo "$BBB"', BBB='Hey', **kws)
  137:             assert_(s == 0)
  138:             assert_(o == 'Hey')
  139: 
  140:             s, o = exec_command.exec_command('echo "$BBB"', **kws)
  141:             assert_(s == 0)
  142:             assert_(o == 'Hi')
  143: 
  144:             del os.environ['BBB']
  145: 
  146:             s, o = exec_command.exec_command('echo "$BBB"', **kws)
  147:             assert_(s == 0)
  148:             assert_(o == '')
  149: 
  150: 
  151:         s, o = exec_command.exec_command('this_is_not_a_command', **kws)
  152:         assert_(s != 0)
  153:         assert_(o != '')
  154: 
  155:         s, o = exec_command.exec_command('echo path=$PATH', **kws)
  156:         assert_(s == 0)
  157:         assert_(o != '')
  158: 
  159:         s, o = exec_command.exec_command(
  160:              '"%s" -c "import sys,os;sys.stderr.write(os.name)"' %
  161:              self.pyexe, **kws)
  162:         assert_(s == 0)
  163:         assert_(o == 'posix')
  164: 
  165:     def check_basic(self, *kws):
  166:         s, o = exec_command.exec_command(
  167:                      '"%s" -c "raise \'Ignore me.\'"' % self.pyexe, **kws)
  168:         assert_(s != 0)
  169:         assert_(o != '')
  170: 
  171:         s, o = exec_command.exec_command(
  172:              '"%s" -c "import sys;sys.stderr.write(\'0\');'
  173:              'sys.stderr.write(\'1\');sys.stderr.write(\'2\')"' %
  174:              self.pyexe, **kws)
  175:         assert_(s == 0)
  176:         assert_(o == '012')
  177: 
  178:         s, o = exec_command.exec_command(
  179:                  '"%s" -c "import sys;sys.exit(15)"' % self.pyexe, **kws)
  180:         assert_(s == 15)
  181:         assert_(o == '')
  182: 
  183:         s, o = exec_command.exec_command(
  184:                      '"%s" -c "print(\'Heipa\'")' % self.pyexe, **kws)
  185:         assert_(s == 0)
  186:         assert_(o == 'Heipa')
  187: 
  188:     def check_execute_in(self, **kws):
  189:         with tempdir() as tmpdir:
  190:             fn = "file"
  191:             tmpfile = os.path.join(tmpdir, fn)
  192:             with open(tmpfile, 'w') as f:
  193:                 f.write('Hello')
  194: 
  195:             s, o = exec_command.exec_command(
  196:                  '"%s" -c "f = open(\'%s\', \'r\'); f.close()"' %
  197:                  (self.pyexe, fn), **kws)
  198:             assert_(s != 0)
  199:             assert_(o != '')
  200:             s, o = exec_command.exec_command(
  201:                      '"%s" -c "f = open(\'%s\', \'r\'); print(f.read()); '
  202:                      'f.close()"' % (self.pyexe, fn), execute_in=tmpdir, **kws)
  203:             assert_(s == 0)
  204:             assert_(o == 'Hello')
  205: 
  206:     def test_basic(self):
  207:         with redirect_stdout(StringIO()):
  208:             with redirect_stderr(StringIO()):
  209:                 with assert_warns(DeprecationWarning):
  210:                     if os.name == "posix":
  211:                         self.check_posix(use_tee=0)
  212:                         self.check_posix(use_tee=1)
  213:                     elif os.name == "nt":
  214:                         self.check_nt(use_tee=0)
  215:                         self.check_nt(use_tee=1)
  216:                     self.check_execute_in(use_tee=0)
  217:                     self.check_execute_in(use_tee=1)
