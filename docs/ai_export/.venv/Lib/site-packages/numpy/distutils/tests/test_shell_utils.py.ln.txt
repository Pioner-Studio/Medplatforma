    1: import pytest
    2: import subprocess
    3: import json
    4: import sys
    5: 
    6: from numpy.distutils import _shell_utils
    7: from numpy.testing import IS_WASM
    8: 
    9: argv_cases = [
   10:     [r'exe'],
   11:     [r'path/exe'],
   12:     [r'path\exe'],
   13:     [r'\\server\path\exe'],
   14:     [r'path to/exe'],
   15:     [r'path to\exe'],
   16: 
   17:     [r'exe', '--flag'],
   18:     [r'path/exe', '--flag'],
   19:     [r'path\exe', '--flag'],
   20:     [r'path to/exe', '--flag'],
   21:     [r'path to\exe', '--flag'],
   22: 
   23:     # flags containing literal quotes in their name
   24:     [r'path to/exe', '--flag-"quoted"'],
   25:     [r'path to\exe', '--flag-"quoted"'],
   26:     [r'path to/exe', '"--flag-quoted"'],
   27:     [r'path to\exe', '"--flag-quoted"'],
   28: ]
   29: 
   30: 
   31: @pytest.fixture(params=[
   32:     _shell_utils.WindowsParser,
   33:     _shell_utils.PosixParser
   34: ])
   35: def Parser(request):
   36:     return request.param
   37: 
   38: 
   39: @pytest.fixture
   40: def runner(Parser):
   41:     if Parser != _shell_utils.NativeParser:
   42:         pytest.skip('Unable to run with non-native parser')
   43: 
   44:     if Parser == _shell_utils.WindowsParser:
   45:         return lambda cmd: subprocess.check_output(cmd)
   46:     elif Parser == _shell_utils.PosixParser:
   47:         # posix has no non-shell string parsing
   48:         return lambda cmd: subprocess.check_output(cmd, shell=True)
   49:     else:
   50:         raise NotImplementedError
   51: 
   52: 
   53: @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
   54: @pytest.mark.parametrize('argv', argv_cases)
   55: def test_join_matches_subprocess(Parser, runner, argv):
   56:     """
   57:     Test that join produces strings understood by subprocess
   58:     """
   59:     # invoke python to return its arguments as json
   60:     cmd = [
   61:         sys.executable, '-c',
   62:         'import json, sys; print(json.dumps(sys.argv[1:]))'
   63:     ]
   64:     joined = Parser.join(cmd + argv)
   65:     json_out = runner(joined).decode()
   66:     assert json.loads(json_out) == argv
   67: 
   68: 
   69: @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
   70: @pytest.mark.parametrize('argv', argv_cases)
   71: def test_roundtrip(Parser, argv):
   72:     """
   73:     Test that split is the inverse operation of join
   74:     """
   75:     try:
   76:         joined = Parser.join(argv)
   77:         assert argv == Parser.split(joined)
   78:     except NotImplementedError:
   79:         pytest.skip("Not implemented")
