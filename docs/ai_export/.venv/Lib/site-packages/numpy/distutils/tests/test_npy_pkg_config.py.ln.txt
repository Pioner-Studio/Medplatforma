    1: import os
    2: 
    3: from numpy.distutils.npy_pkg_config import read_config, parse_flags
    4: from numpy.testing import temppath, assert_
    5: 
    6: simple = """\
    7: [meta]
    8: Name = foo
    9: Description = foo lib
   10: Version = 0.1
   11: 
   12: [default]
   13: cflags = -I/usr/include
   14: libs = -L/usr/lib
   15: """
   16: simple_d = {'cflags': '-I/usr/include', 'libflags': '-L/usr/lib',
   17:         'version': '0.1', 'name': 'foo'}
   18: 
   19: simple_variable = """\
   20: [meta]
   21: Name = foo
   22: Description = foo lib
   23: Version = 0.1
   24: 
   25: [variables]
   26: prefix = /foo/bar
   27: libdir = ${prefix}/lib
   28: includedir = ${prefix}/include
   29: 
   30: [default]
   31: cflags = -I${includedir}
   32: libs = -L${libdir}
   33: """
   34: simple_variable_d = {'cflags': '-I/foo/bar/include', 'libflags': '-L/foo/bar/lib',
   35:         'version': '0.1', 'name': 'foo'}
   36: 
   37: class TestLibraryInfo:
   38:     def test_simple(self):
   39:         with temppath('foo.ini') as path:
   40:             with open(path,  'w') as f:
   41:                 f.write(simple)
   42:             pkg = os.path.splitext(path)[0]
   43:             out = read_config(pkg)
   44: 
   45:         assert_(out.cflags() == simple_d['cflags'])
   46:         assert_(out.libs() == simple_d['libflags'])
   47:         assert_(out.name == simple_d['name'])
   48:         assert_(out.version == simple_d['version'])
   49: 
   50:     def test_simple_variable(self):
   51:         with temppath('foo.ini') as path:
   52:             with open(path,  'w') as f:
   53:                 f.write(simple_variable)
   54:             pkg = os.path.splitext(path)[0]
   55:             out = read_config(pkg)
   56: 
   57:         assert_(out.cflags() == simple_variable_d['cflags'])
   58:         assert_(out.libs() == simple_variable_d['libflags'])
   59:         assert_(out.name == simple_variable_d['name'])
   60:         assert_(out.version == simple_variable_d['version'])
   61:         out.vars['prefix'] = '/Users/david'
   62:         assert_(out.cflags() == '-I/Users/david/include')
   63: 
   64: class TestParseFlags:
   65:     def test_simple_cflags(self):
   66:         d = parse_flags("-I/usr/include")
   67:         assert_(d['include_dirs'] == ['/usr/include'])
   68: 
   69:         d = parse_flags("-I/usr/include -DFOO")
   70:         assert_(d['include_dirs'] == ['/usr/include'])
   71:         assert_(d['macros'] == ['FOO'])
   72: 
   73:         d = parse_flags("-I /usr/include -DFOO")
   74:         assert_(d['include_dirs'] == ['/usr/include'])
   75:         assert_(d['macros'] == ['FOO'])
   76: 
   77:     def test_simple_lflags(self):
   78:         d = parse_flags("-L/usr/lib -lfoo -L/usr/lib -lbar")
   79:         assert_(d['library_dirs'] == ['/usr/lib', '/usr/lib'])
   80:         assert_(d['libraries'] == ['foo', 'bar'])
   81: 
   82:         d = parse_flags("-L /usr/lib -lfoo -L/usr/lib -lbar")
   83:         assert_(d['library_dirs'] == ['/usr/lib', '/usr/lib'])
   84:         assert_(d['libraries'] == ['foo', 'bar'])
