    1: """Tests for legendre module.
    2: 
    3: """
    4: from functools import reduce
    5: 
    6: import numpy as np
    7: import numpy.polynomial.legendre as leg
    8: from numpy.polynomial.polynomial import polyval
    9: from numpy.testing import (
   10:     assert_,
   11:     assert_almost_equal,
   12:     assert_equal,
   13:     assert_raises,
   14: )
   15: 
   16: L0 = np.array([1])
   17: L1 = np.array([0, 1])
   18: L2 = np.array([-1, 0, 3]) / 2
   19: L3 = np.array([0, -3, 0, 5]) / 2
   20: L4 = np.array([3, 0, -30, 0, 35]) / 8
   21: L5 = np.array([0, 15, 0, -70, 0, 63]) / 8
   22: L6 = np.array([-5, 0, 105, 0, -315, 0, 231]) / 16
   23: L7 = np.array([0, -35, 0, 315, 0, -693, 0, 429]) / 16
   24: L8 = np.array([35, 0, -1260, 0, 6930, 0, -12012, 0, 6435]) / 128
   25: L9 = np.array([0, 315, 0, -4620, 0, 18018, 0, -25740, 0, 12155]) / 128
   26: 
   27: Llist = [L0, L1, L2, L3, L4, L5, L6, L7, L8, L9]
   28: 
   29: 
   30: def trim(x):
   31:     return leg.legtrim(x, tol=1e-6)
   32: 
   33: 
   34: class TestConstants:
   35: 
   36:     def test_legdomain(self):
   37:         assert_equal(leg.legdomain, [-1, 1])
   38: 
   39:     def test_legzero(self):
   40:         assert_equal(leg.legzero, [0])
   41: 
   42:     def test_legone(self):
   43:         assert_equal(leg.legone, [1])
   44: 
   45:     def test_legx(self):
   46:         assert_equal(leg.legx, [0, 1])
   47: 
   48: 
   49: class TestArithmetic:
   50:     x = np.linspace(-1, 1, 100)
   51: 
   52:     def test_legadd(self):
   53:         for i in range(5):
   54:             for j in range(5):
   55:                 msg = f"At i={i}, j={j}"
   56:                 tgt = np.zeros(max(i, j) + 1)
   57:                 tgt[i] += 1
   58:                 tgt[j] += 1
   59:                 res = leg.legadd([0] * i + [1], [0] * j + [1])
   60:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   61: 
   62:     def test_legsub(self):
   63:         for i in range(5):
   64:             for j in range(5):
   65:                 msg = f"At i={i}, j={j}"
   66:                 tgt = np.zeros(max(i, j) + 1)
   67:                 tgt[i] += 1
   68:                 tgt[j] -= 1
   69:                 res = leg.legsub([0] * i + [1], [0] * j + [1])
   70:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   71: 
   72:     def test_legmulx(self):
   73:         assert_equal(leg.legmulx([0]), [0])
   74:         assert_equal(leg.legmulx([1]), [0, 1])
   75:         for i in range(1, 5):
   76:             tmp = 2 * i + 1
   77:             ser = [0] * i + [1]
   78:             tgt = [0] * (i - 1) + [i / tmp, 0, (i + 1) / tmp]
   79:             assert_equal(leg.legmulx(ser), tgt)
   80: 
   81:     def test_legmul(self):
   82:         # check values of result
   83:         for i in range(5):
   84:             pol1 = [0] * i + [1]
   85:             val1 = leg.legval(self.x, pol1)
   86:             for j in range(5):
   87:                 msg = f"At i={i}, j={j}"
   88:                 pol2 = [0] * j + [1]
   89:                 val2 = leg.legval(self.x, pol2)
   90:                 pol3 = leg.legmul(pol1, pol2)
   91:                 val3 = leg.legval(self.x, pol3)
   92:                 assert_(len(pol3) == i + j + 1, msg)
   93:                 assert_almost_equal(val3, val1 * val2, err_msg=msg)
   94: 
   95:     def test_legdiv(self):
   96:         for i in range(5):
   97:             for j in range(5):
   98:                 msg = f"At i={i}, j={j}"
   99:                 ci = [0] * i + [1]
  100:                 cj = [0] * j + [1]
  101:                 tgt = leg.legadd(ci, cj)
  102:                 quo, rem = leg.legdiv(tgt, ci)
  103:                 res = leg.legadd(leg.legmul(quo, ci), rem)
  104:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  105: 
  106:     def test_legpow(self):
  107:         for i in range(5):
  108:             for j in range(5):
  109:                 msg = f"At i={i}, j={j}"
  110:                 c = np.arange(i + 1)
  111:                 tgt = reduce(leg.legmul, [c] * j, np.array([1]))
  112:                 res = leg.legpow(c, j)
  113:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  114: 
  115: 
  116: class TestEvaluation:
  117:     # coefficients of 1 + 2*x + 3*x**2
  118:     c1d = np.array([2., 2., 2.])
  119:     c2d = np.einsum('i,j->ij', c1d, c1d)
  120:     c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d)
  121: 
  122:     # some random values in [-1, 1)
  123:     x = np.random.random((3, 5)) * 2 - 1
  124:     y = polyval(x, [1., 2., 3.])
  125: 
  126:     def test_legval(self):
  127:         # check empty input
  128:         assert_equal(leg.legval([], [1]).size, 0)
  129: 
  130:         # check normal input)
  131:         x = np.linspace(-1, 1)
  132:         y = [polyval(x, c) for c in Llist]
  133:         for i in range(10):
  134:             msg = f"At i={i}"
  135:             tgt = y[i]
  136:             res = leg.legval(x, [0] * i + [1])
  137:             assert_almost_equal(res, tgt, err_msg=msg)
  138: 
  139:         # check that shape is preserved
  140:         for i in range(3):
  141:             dims = [2] * i
  142:             x = np.zeros(dims)
  143:             assert_equal(leg.legval(x, [1]).shape, dims)
  144:             assert_equal(leg.legval(x, [1, 0]).shape, dims)
  145:             assert_equal(leg.legval(x, [1, 0, 0]).shape, dims)
  146: 
  147:     def test_legval2d(self):
  148:         x1, x2, x3 = self.x
  149:         y1, y2, y3 = self.y
  150: 
  151:         # test exceptions
  152:         assert_raises(ValueError, leg.legval2d, x1, x2[:2], self.c2d)
  153: 
  154:         # test values
  155:         tgt = y1 * y2
  156:         res = leg.legval2d(x1, x2, self.c2d)
  157:         assert_almost_equal(res, tgt)
  158: 
  159:         # test shape
  160:         z = np.ones((2, 3))
  161:         res = leg.legval2d(z, z, self.c2d)
  162:         assert_(res.shape == (2, 3))
  163: 
  164:     def test_legval3d(self):
  165:         x1, x2, x3 = self.x
  166:         y1, y2, y3 = self.y
  167: 
  168:         # test exceptions
  169:         assert_raises(ValueError, leg.legval3d, x1, x2, x3[:2], self.c3d)
  170: 
  171:         # test values
  172:         tgt = y1 * y2 * y3
  173:         res = leg.legval3d(x1, x2, x3, self.c3d)
  174:         assert_almost_equal(res, tgt)
  175: 
  176:         # test shape
  177:         z = np.ones((2, 3))
  178:         res = leg.legval3d(z, z, z, self.c3d)
  179:         assert_(res.shape == (2, 3))
  180: 
  181:     def test_leggrid2d(self):
  182:         x1, x2, x3 = self.x
  183:         y1, y2, y3 = self.y
  184: 
  185:         # test values
  186:         tgt = np.einsum('i,j->ij', y1, y2)
  187:         res = leg.leggrid2d(x1, x2, self.c2d)
  188:         assert_almost_equal(res, tgt)
  189: 
  190:         # test shape
  191:         z = np.ones((2, 3))
  192:         res = leg.leggrid2d(z, z, self.c2d)
  193:         assert_(res.shape == (2, 3) * 2)
  194: 
  195:     def test_leggrid3d(self):
  196:         x1, x2, x3 = self.x
  197:         y1, y2, y3 = self.y
  198: 
  199:         # test values
  200:         tgt = np.einsum('i,j,k->ijk', y1, y2, y3)
  201:         res = leg.leggrid3d(x1, x2, x3, self.c3d)
  202:         assert_almost_equal(res, tgt)
  203: 
  204:         # test shape
  205:         z = np.ones((2, 3))
  206:         res = leg.leggrid3d(z, z, z, self.c3d)
  207:         assert_(res.shape == (2, 3) * 3)
  208: 
  209: 
  210: class TestIntegral:
  211: 
  212:     def test_legint(self):
  213:         # check exceptions
  214:         assert_raises(TypeError, leg.legint, [0], .5)
  215:         assert_raises(ValueError, leg.legint, [0], -1)
  216:         assert_raises(ValueError, leg.legint, [0], 1, [0, 0])
  217:         assert_raises(ValueError, leg.legint, [0], lbnd=[0])
  218:         assert_raises(ValueError, leg.legint, [0], scl=[0])
  219:         assert_raises(TypeError, leg.legint, [0], axis=.5)
  220: 
  221:         # test integration of zero polynomial
  222:         for i in range(2, 5):
  223:             k = [0] * (i - 2) + [1]
  224:             res = leg.legint([0], m=i, k=k)
  225:             assert_almost_equal(res, [0, 1])
  226: 
  227:         # check single integration with integration constant
  228:         for i in range(5):
  229:             scl = i + 1
  230:             pol = [0] * i + [1]
  231:             tgt = [i] + [0] * i + [1 / scl]
  232:             legpol = leg.poly2leg(pol)
  233:             legint = leg.legint(legpol, m=1, k=[i])
  234:             res = leg.leg2poly(legint)
  235:             assert_almost_equal(trim(res), trim(tgt))
  236: 
  237:         # check single integration with integration constant and lbnd
  238:         for i in range(5):
  239:             scl = i + 1
  240:             pol = [0] * i + [1]
  241:             legpol = leg.poly2leg(pol)
  242:             legint = leg.legint(legpol, m=1, k=[i], lbnd=-1)
  243:             assert_almost_equal(leg.legval(-1, legint), i)
  244: 
  245:         # check single integration with integration constant and scaling
  246:         for i in range(5):
  247:             scl = i + 1
  248:             pol = [0] * i + [1]
  249:             tgt = [i] + [0] * i + [2 / scl]
  250:             legpol = leg.poly2leg(pol)
  251:             legint = leg.legint(legpol, m=1, k=[i], scl=2)
  252:             res = leg.leg2poly(legint)
  253:             assert_almost_equal(trim(res), trim(tgt))
  254: 
  255:         # check multiple integrations with default k
  256:         for i in range(5):
  257:             for j in range(2, 5):
  258:                 pol = [0] * i + [1]
  259:                 tgt = pol[:]
  260:                 for k in range(j):
  261:                     tgt = leg.legint(tgt, m=1)
  262:                 res = leg.legint(pol, m=j)
  263:                 assert_almost_equal(trim(res), trim(tgt))
  264: 
  265:         # check multiple integrations with defined k
  266:         for i in range(5):
  267:             for j in range(2, 5):
  268:                 pol = [0] * i + [1]
  269:                 tgt = pol[:]
  270:                 for k in range(j):
  271:                     tgt = leg.legint(tgt, m=1, k=[k])
  272:                 res = leg.legint(pol, m=j, k=list(range(j)))
  273:                 assert_almost_equal(trim(res), trim(tgt))
  274: 
  275:         # check multiple integrations with lbnd
  276:         for i in range(5):
  277:             for j in range(2, 5):
  278:                 pol = [0] * i + [1]
  279:                 tgt = pol[:]
  280:                 for k in range(j):
  281:                     tgt = leg.legint(tgt, m=1, k=[k], lbnd=-1)
  282:                 res = leg.legint(pol, m=j, k=list(range(j)), lbnd=-1)
  283:                 assert_almost_equal(trim(res), trim(tgt))
  284: 
  285:         # check multiple integrations with scaling
  286:         for i in range(5):
  287:             for j in range(2, 5):
  288:                 pol = [0] * i + [1]
  289:                 tgt = pol[:]
  290:                 for k in range(j):
  291:                     tgt = leg.legint(tgt, m=1, k=[k], scl=2)
  292:                 res = leg.legint(pol, m=j, k=list(range(j)), scl=2)
  293:                 assert_almost_equal(trim(res), trim(tgt))
  294: 
  295:     def test_legint_axis(self):
  296:         # check that axis keyword works
  297:         c2d = np.random.random((3, 4))
  298: 
  299:         tgt = np.vstack([leg.legint(c) for c in c2d.T]).T
  300:         res = leg.legint(c2d, axis=0)
  301:         assert_almost_equal(res, tgt)
  302: 
  303:         tgt = np.vstack([leg.legint(c) for c in c2d])
  304:         res = leg.legint(c2d, axis=1)
  305:         assert_almost_equal(res, tgt)
  306: 
  307:         tgt = np.vstack([leg.legint(c, k=3) for c in c2d])
  308:         res = leg.legint(c2d, k=3, axis=1)
  309:         assert_almost_equal(res, tgt)
  310: 
  311:     def test_legint_zerointord(self):
  312:         assert_equal(leg.legint((1, 2, 3), 0), (1, 2, 3))
  313: 
  314: 
  315: class TestDerivative:
  316: 
  317:     def test_legder(self):
  318:         # check exceptions
  319:         assert_raises(TypeError, leg.legder, [0], .5)
  320:         assert_raises(ValueError, leg.legder, [0], -1)
  321: 
  322:         # check that zeroth derivative does nothing
  323:         for i in range(5):
  324:             tgt = [0] * i + [1]
  325:             res = leg.legder(tgt, m=0)
  326:             assert_equal(trim(res), trim(tgt))
  327: 
  328:         # check that derivation is the inverse of integration
  329:         for i in range(5):
  330:             for j in range(2, 5):
  331:                 tgt = [0] * i + [1]
  332:                 res = leg.legder(leg.legint(tgt, m=j), m=j)
  333:                 assert_almost_equal(trim(res), trim(tgt))
  334: 
  335:         # check derivation with scaling
  336:         for i in range(5):
  337:             for j in range(2, 5):
  338:                 tgt = [0] * i + [1]
  339:                 res = leg.legder(leg.legint(tgt, m=j, scl=2), m=j, scl=.5)
  340:                 assert_almost_equal(trim(res), trim(tgt))
  341: 
  342:     def test_legder_axis(self):
  343:         # check that axis keyword works
  344:         c2d = np.random.random((3, 4))
  345: 
  346:         tgt = np.vstack([leg.legder(c) for c in c2d.T]).T
  347:         res = leg.legder(c2d, axis=0)
  348:         assert_almost_equal(res, tgt)
  349: 
  350:         tgt = np.vstack([leg.legder(c) for c in c2d])
  351:         res = leg.legder(c2d, axis=1)
  352:         assert_almost_equal(res, tgt)
  353: 
  354:     def test_legder_orderhigherthancoeff(self):
  355:         c = (1, 2, 3, 4)
  356:         assert_equal(leg.legder(c, 4), [0])
  357: 
  358: class TestVander:
  359:     # some random values in [-1, 1)
  360:     x = np.random.random((3, 5)) * 2 - 1
  361: 
  362:     def test_legvander(self):
  363:         # check for 1d x
  364:         x = np.arange(3)
  365:         v = leg.legvander(x, 3)
  366:         assert_(v.shape == (3, 4))
  367:         for i in range(4):
  368:             coef = [0] * i + [1]
  369:             assert_almost_equal(v[..., i], leg.legval(x, coef))
  370: 
  371:         # check for 2d x
  372:         x = np.array([[1, 2], [3, 4], [5, 6]])
  373:         v = leg.legvander(x, 3)
  374:         assert_(v.shape == (3, 2, 4))
  375:         for i in range(4):
  376:             coef = [0] * i + [1]
  377:             assert_almost_equal(v[..., i], leg.legval(x, coef))
  378: 
  379:     def test_legvander2d(self):
  380:         # also tests polyval2d for non-square coefficient array
  381:         x1, x2, x3 = self.x
  382:         c = np.random.random((2, 3))
  383:         van = leg.legvander2d(x1, x2, [1, 2])
  384:         tgt = leg.legval2d(x1, x2, c)
  385:         res = np.dot(van, c.flat)
  386:         assert_almost_equal(res, tgt)
  387: 
  388:         # check shape
  389:         van = leg.legvander2d([x1], [x2], [1, 2])
  390:         assert_(van.shape == (1, 5, 6))
  391: 
  392:     def test_legvander3d(self):
  393:         # also tests polyval3d for non-square coefficient array
  394:         x1, x2, x3 = self.x
  395:         c = np.random.random((2, 3, 4))
  396:         van = leg.legvander3d(x1, x2, x3, [1, 2, 3])
  397:         tgt = leg.legval3d(x1, x2, x3, c)
  398:         res = np.dot(van, c.flat)
  399:         assert_almost_equal(res, tgt)
  400: 
  401:         # check shape
  402:         van = leg.legvander3d([x1], [x2], [x3], [1, 2, 3])
  403:         assert_(van.shape == (1, 5, 24))
  404: 
  405:     def test_legvander_negdeg(self):
  406:         assert_raises(ValueError, leg.legvander, (1, 2, 3), -1)
  407: 
  408: 
  409: class TestFitting:
  410: 
  411:     def test_legfit(self):
  412:         def f(x):
  413:             return x * (x - 1) * (x - 2)
  414: 
  415:         def f2(x):
  416:             return x**4 + x**2 + 1
  417: 
  418:         # Test exceptions
  419:         assert_raises(ValueError, leg.legfit, [1], [1], -1)
  420:         assert_raises(TypeError, leg.legfit, [[1]], [1], 0)
  421:         assert_raises(TypeError, leg.legfit, [], [1], 0)
  422:         assert_raises(TypeError, leg.legfit, [1], [[[1]]], 0)
  423:         assert_raises(TypeError, leg.legfit, [1, 2], [1], 0)
  424:         assert_raises(TypeError, leg.legfit, [1], [1, 2], 0)
  425:         assert_raises(TypeError, leg.legfit, [1], [1], 0, w=[[1]])
  426:         assert_raises(TypeError, leg.legfit, [1], [1], 0, w=[1, 1])
  427:         assert_raises(ValueError, leg.legfit, [1], [1], [-1,])
  428:         assert_raises(ValueError, leg.legfit, [1], [1], [2, -1, 6])
  429:         assert_raises(TypeError, leg.legfit, [1], [1], [])
  430: 
  431:         # Test fit
  432:         x = np.linspace(0, 2)
  433:         y = f(x)
  434:         #
  435:         coef3 = leg.legfit(x, y, 3)
  436:         assert_equal(len(coef3), 4)
  437:         assert_almost_equal(leg.legval(x, coef3), y)
  438:         coef3 = leg.legfit(x, y, [0, 1, 2, 3])
  439:         assert_equal(len(coef3), 4)
  440:         assert_almost_equal(leg.legval(x, coef3), y)
  441:         #
  442:         coef4 = leg.legfit(x, y, 4)
  443:         assert_equal(len(coef4), 5)
  444:         assert_almost_equal(leg.legval(x, coef4), y)
  445:         coef4 = leg.legfit(x, y, [0, 1, 2, 3, 4])
  446:         assert_equal(len(coef4), 5)
  447:         assert_almost_equal(leg.legval(x, coef4), y)
  448:         # check things still work if deg is not in strict increasing
  449:         coef4 = leg.legfit(x, y, [2, 3, 4, 1, 0])
  450:         assert_equal(len(coef4), 5)
  451:         assert_almost_equal(leg.legval(x, coef4), y)
  452:         #
  453:         coef2d = leg.legfit(x, np.array([y, y]).T, 3)
  454:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  455:         coef2d = leg.legfit(x, np.array([y, y]).T, [0, 1, 2, 3])
  456:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  457:         # test weighting
  458:         w = np.zeros_like(x)
  459:         yw = y.copy()
  460:         w[1::2] = 1
  461:         y[0::2] = 0
  462:         wcoef3 = leg.legfit(x, yw, 3, w=w)
  463:         assert_almost_equal(wcoef3, coef3)
  464:         wcoef3 = leg.legfit(x, yw, [0, 1, 2, 3], w=w)
  465:         assert_almost_equal(wcoef3, coef3)
  466:         #
  467:         wcoef2d = leg.legfit(x, np.array([yw, yw]).T, 3, w=w)
  468:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  469:         wcoef2d = leg.legfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
  470:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  471:         # test scaling with complex values x points whose square
  472:         # is zero when summed.
  473:         x = [1, 1j, -1, -1j]
  474:         assert_almost_equal(leg.legfit(x, x, 1), [0, 1])
  475:         assert_almost_equal(leg.legfit(x, x, [0, 1]), [0, 1])
  476:         # test fitting only even Legendre polynomials
  477:         x = np.linspace(-1, 1)
  478:         y = f2(x)
  479:         coef1 = leg.legfit(x, y, 4)
  480:         assert_almost_equal(leg.legval(x, coef1), y)
  481:         coef2 = leg.legfit(x, y, [0, 2, 4])
  482:         assert_almost_equal(leg.legval(x, coef2), y)
  483:         assert_almost_equal(coef1, coef2)
  484: 
  485: 
  486: class TestCompanion:
  487: 
  488:     def test_raises(self):
  489:         assert_raises(ValueError, leg.legcompanion, [])
  490:         assert_raises(ValueError, leg.legcompanion, [1])
  491: 
  492:     def test_dimensions(self):
  493:         for i in range(1, 5):
  494:             coef = [0] * i + [1]
  495:             assert_(leg.legcompanion(coef).shape == (i, i))
  496: 
  497:     def test_linear_root(self):
  498:         assert_(leg.legcompanion([1, 2])[0, 0] == -.5)
  499: 
  500: 
  501: class TestGauss:
  502: 
  503:     def test_100(self):
  504:         x, w = leg.leggauss(100)
  505: 
  506:         # test orthogonality. Note that the results need to be normalized,
  507:         # otherwise the huge values that can arise from fast growing
  508:         # functions like Laguerre can be very confusing.
  509:         v = leg.legvander(x, 99)
  510:         vv = np.dot(v.T * w, v)
  511:         vd = 1 / np.sqrt(vv.diagonal())
  512:         vv = vd[:, None] * vv * vd
  513:         assert_almost_equal(vv, np.eye(100))
  514: 
  515:         # check that the integral of 1 is correct
  516:         tgt = 2.0
  517:         assert_almost_equal(w.sum(), tgt)
  518: 
  519: 
  520: class TestMisc:
  521: 
  522:     def test_legfromroots(self):
  523:         res = leg.legfromroots([])
  524:         assert_almost_equal(trim(res), [1])
  525:         for i in range(1, 5):
  526:             roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
  527:             pol = leg.legfromroots(roots)
  528:             res = leg.legval(roots, pol)
  529:             tgt = 0
  530:             assert_(len(pol) == i + 1)
  531:             assert_almost_equal(leg.leg2poly(pol)[-1], 1)
  532:             assert_almost_equal(res, tgt)
  533: 
  534:     def test_legroots(self):
  535:         assert_almost_equal(leg.legroots([1]), [])
  536:         assert_almost_equal(leg.legroots([1, 2]), [-.5])
  537:         for i in range(2, 5):
  538:             tgt = np.linspace(-1, 1, i)
  539:             res = leg.legroots(leg.legfromroots(tgt))
  540:             assert_almost_equal(trim(res), trim(tgt))
  541: 
  542:     def test_legtrim(self):
  543:         coef = [2, -1, 1, 0]
  544: 
  545:         # Test exceptions
  546:         assert_raises(ValueError, leg.legtrim, coef, -1)
  547: 
  548:         # Test results
  549:         assert_equal(leg.legtrim(coef), coef[:-1])
  550:         assert_equal(leg.legtrim(coef, 1), coef[:-3])
  551:         assert_equal(leg.legtrim(coef, 2), [0])
  552: 
  553:     def test_legline(self):
  554:         assert_equal(leg.legline(3, 4), [3, 4])
  555: 
  556:     def test_legline_zeroscl(self):
  557:         assert_equal(leg.legline(3, 0), [3])
  558: 
  559:     def test_leg2poly(self):
  560:         for i in range(10):
  561:             assert_almost_equal(leg.leg2poly([0] * i + [1]), Llist[i])
  562: 
  563:     def test_poly2leg(self):
  564:         for i in range(10):
  565:             assert_almost_equal(leg.poly2leg(Llist[i]), [0] * i + [1])
  566: 
  567:     def test_weight(self):
  568:         x = np.linspace(-1, 1, 11)
  569:         tgt = 1.
  570:         res = leg.legweight(x)
  571:         assert_almost_equal(res, tgt)
