    1: """Tests for hermite_e module.
    2: 
    3: """
    4: from functools import reduce
    5: 
    6: import numpy as np
    7: import numpy.polynomial.hermite_e as herme
    8: from numpy.polynomial.polynomial import polyval
    9: from numpy.testing import (
   10:     assert_,
   11:     assert_almost_equal,
   12:     assert_equal,
   13:     assert_raises,
   14: )
   15: 
   16: He0 = np.array([1])
   17: He1 = np.array([0, 1])
   18: He2 = np.array([-1, 0, 1])
   19: He3 = np.array([0, -3, 0, 1])
   20: He4 = np.array([3, 0, -6, 0, 1])
   21: He5 = np.array([0, 15, 0, -10, 0, 1])
   22: He6 = np.array([-15, 0, 45, 0, -15, 0, 1])
   23: He7 = np.array([0, -105, 0, 105, 0, -21, 0, 1])
   24: He8 = np.array([105, 0, -420, 0, 210, 0, -28, 0, 1])
   25: He9 = np.array([0, 945, 0, -1260, 0, 378, 0, -36, 0, 1])
   26: 
   27: Helist = [He0, He1, He2, He3, He4, He5, He6, He7, He8, He9]
   28: 
   29: 
   30: def trim(x):
   31:     return herme.hermetrim(x, tol=1e-6)
   32: 
   33: 
   34: class TestConstants:
   35: 
   36:     def test_hermedomain(self):
   37:         assert_equal(herme.hermedomain, [-1, 1])
   38: 
   39:     def test_hermezero(self):
   40:         assert_equal(herme.hermezero, [0])
   41: 
   42:     def test_hermeone(self):
   43:         assert_equal(herme.hermeone, [1])
   44: 
   45:     def test_hermex(self):
   46:         assert_equal(herme.hermex, [0, 1])
   47: 
   48: 
   49: class TestArithmetic:
   50:     x = np.linspace(-3, 3, 100)
   51: 
   52:     def test_hermeadd(self):
   53:         for i in range(5):
   54:             for j in range(5):
   55:                 msg = f"At i={i}, j={j}"
   56:                 tgt = np.zeros(max(i, j) + 1)
   57:                 tgt[i] += 1
   58:                 tgt[j] += 1
   59:                 res = herme.hermeadd([0] * i + [1], [0] * j + [1])
   60:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   61: 
   62:     def test_hermesub(self):
   63:         for i in range(5):
   64:             for j in range(5):
   65:                 msg = f"At i={i}, j={j}"
   66:                 tgt = np.zeros(max(i, j) + 1)
   67:                 tgt[i] += 1
   68:                 tgt[j] -= 1
   69:                 res = herme.hermesub([0] * i + [1], [0] * j + [1])
   70:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   71: 
   72:     def test_hermemulx(self):
   73:         assert_equal(herme.hermemulx([0]), [0])
   74:         assert_equal(herme.hermemulx([1]), [0, 1])
   75:         for i in range(1, 5):
   76:             ser = [0] * i + [1]
   77:             tgt = [0] * (i - 1) + [i, 0, 1]
   78:             assert_equal(herme.hermemulx(ser), tgt)
   79: 
   80:     def test_hermemul(self):
   81:         # check values of result
   82:         for i in range(5):
   83:             pol1 = [0] * i + [1]
   84:             val1 = herme.hermeval(self.x, pol1)
   85:             for j in range(5):
   86:                 msg = f"At i={i}, j={j}"
   87:                 pol2 = [0] * j + [1]
   88:                 val2 = herme.hermeval(self.x, pol2)
   89:                 pol3 = herme.hermemul(pol1, pol2)
   90:                 val3 = herme.hermeval(self.x, pol3)
   91:                 assert_(len(pol3) == i + j + 1, msg)
   92:                 assert_almost_equal(val3, val1 * val2, err_msg=msg)
   93: 
   94:     def test_hermediv(self):
   95:         for i in range(5):
   96:             for j in range(5):
   97:                 msg = f"At i={i}, j={j}"
   98:                 ci = [0] * i + [1]
   99:                 cj = [0] * j + [1]
  100:                 tgt = herme.hermeadd(ci, cj)
  101:                 quo, rem = herme.hermediv(tgt, ci)
  102:                 res = herme.hermeadd(herme.hermemul(quo, ci), rem)
  103:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  104: 
  105:     def test_hermepow(self):
  106:         for i in range(5):
  107:             for j in range(5):
  108:                 msg = f"At i={i}, j={j}"
  109:                 c = np.arange(i + 1)
  110:                 tgt = reduce(herme.hermemul, [c] * j, np.array([1]))
  111:                 res = herme.hermepow(c, j)
  112:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  113: 
  114: 
  115: class TestEvaluation:
  116:     # coefficients of 1 + 2*x + 3*x**2
  117:     c1d = np.array([4., 2., 3.])
  118:     c2d = np.einsum('i,j->ij', c1d, c1d)
  119:     c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d)
  120: 
  121:     # some random values in [-1, 1)
  122:     x = np.random.random((3, 5)) * 2 - 1
  123:     y = polyval(x, [1., 2., 3.])
  124: 
  125:     def test_hermeval(self):
  126:         # check empty input
  127:         assert_equal(herme.hermeval([], [1]).size, 0)
  128: 
  129:         # check normal input)
  130:         x = np.linspace(-1, 1)
  131:         y = [polyval(x, c) for c in Helist]
  132:         for i in range(10):
  133:             msg = f"At i={i}"
  134:             tgt = y[i]
  135:             res = herme.hermeval(x, [0] * i + [1])
  136:             assert_almost_equal(res, tgt, err_msg=msg)
  137: 
  138:         # check that shape is preserved
  139:         for i in range(3):
  140:             dims = [2] * i
  141:             x = np.zeros(dims)
  142:             assert_equal(herme.hermeval(x, [1]).shape, dims)
  143:             assert_equal(herme.hermeval(x, [1, 0]).shape, dims)
  144:             assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)
  145: 
  146:     def test_hermeval2d(self):
  147:         x1, x2, x3 = self.x
  148:         y1, y2, y3 = self.y
  149: 
  150:         # test exceptions
  151:         assert_raises(ValueError, herme.hermeval2d, x1, x2[:2], self.c2d)
  152: 
  153:         # test values
  154:         tgt = y1 * y2
  155:         res = herme.hermeval2d(x1, x2, self.c2d)
  156:         assert_almost_equal(res, tgt)
  157: 
  158:         # test shape
  159:         z = np.ones((2, 3))
  160:         res = herme.hermeval2d(z, z, self.c2d)
  161:         assert_(res.shape == (2, 3))
  162: 
  163:     def test_hermeval3d(self):
  164:         x1, x2, x3 = self.x
  165:         y1, y2, y3 = self.y
  166: 
  167:         # test exceptions
  168:         assert_raises(ValueError, herme.hermeval3d, x1, x2, x3[:2], self.c3d)
  169: 
  170:         # test values
  171:         tgt = y1 * y2 * y3
  172:         res = herme.hermeval3d(x1, x2, x3, self.c3d)
  173:         assert_almost_equal(res, tgt)
  174: 
  175:         # test shape
  176:         z = np.ones((2, 3))
  177:         res = herme.hermeval3d(z, z, z, self.c3d)
  178:         assert_(res.shape == (2, 3))
  179: 
  180:     def test_hermegrid2d(self):
  181:         x1, x2, x3 = self.x
  182:         y1, y2, y3 = self.y
  183: 
  184:         # test values
  185:         tgt = np.einsum('i,j->ij', y1, y2)
  186:         res = herme.hermegrid2d(x1, x2, self.c2d)
  187:         assert_almost_equal(res, tgt)
  188: 
  189:         # test shape
  190:         z = np.ones((2, 3))
  191:         res = herme.hermegrid2d(z, z, self.c2d)
  192:         assert_(res.shape == (2, 3) * 2)
  193: 
  194:     def test_hermegrid3d(self):
  195:         x1, x2, x3 = self.x
  196:         y1, y2, y3 = self.y
  197: 
  198:         # test values
  199:         tgt = np.einsum('i,j,k->ijk', y1, y2, y3)
  200:         res = herme.hermegrid3d(x1, x2, x3, self.c3d)
  201:         assert_almost_equal(res, tgt)
  202: 
  203:         # test shape
  204:         z = np.ones((2, 3))
  205:         res = herme.hermegrid3d(z, z, z, self.c3d)
  206:         assert_(res.shape == (2, 3) * 3)
  207: 
  208: 
  209: class TestIntegral:
  210: 
  211:     def test_hermeint(self):
  212:         # check exceptions
  213:         assert_raises(TypeError, herme.hermeint, [0], .5)
  214:         assert_raises(ValueError, herme.hermeint, [0], -1)
  215:         assert_raises(ValueError, herme.hermeint, [0], 1, [0, 0])
  216:         assert_raises(ValueError, herme.hermeint, [0], lbnd=[0])
  217:         assert_raises(ValueError, herme.hermeint, [0], scl=[0])
  218:         assert_raises(TypeError, herme.hermeint, [0], axis=.5)
  219: 
  220:         # test integration of zero polynomial
  221:         for i in range(2, 5):
  222:             k = [0] * (i - 2) + [1]
  223:             res = herme.hermeint([0], m=i, k=k)
  224:             assert_almost_equal(res, [0, 1])
  225: 
  226:         # check single integration with integration constant
  227:         for i in range(5):
  228:             scl = i + 1
  229:             pol = [0] * i + [1]
  230:             tgt = [i] + [0] * i + [1 / scl]
  231:             hermepol = herme.poly2herme(pol)
  232:             hermeint = herme.hermeint(hermepol, m=1, k=[i])
  233:             res = herme.herme2poly(hermeint)
  234:             assert_almost_equal(trim(res), trim(tgt))
  235: 
  236:         # check single integration with integration constant and lbnd
  237:         for i in range(5):
  238:             scl = i + 1
  239:             pol = [0] * i + [1]
  240:             hermepol = herme.poly2herme(pol)
  241:             hermeint = herme.hermeint(hermepol, m=1, k=[i], lbnd=-1)
  242:             assert_almost_equal(herme.hermeval(-1, hermeint), i)
  243: 
  244:         # check single integration with integration constant and scaling
  245:         for i in range(5):
  246:             scl = i + 1
  247:             pol = [0] * i + [1]
  248:             tgt = [i] + [0] * i + [2 / scl]
  249:             hermepol = herme.poly2herme(pol)
  250:             hermeint = herme.hermeint(hermepol, m=1, k=[i], scl=2)
  251:             res = herme.herme2poly(hermeint)
  252:             assert_almost_equal(trim(res), trim(tgt))
  253: 
  254:         # check multiple integrations with default k
  255:         for i in range(5):
  256:             for j in range(2, 5):
  257:                 pol = [0] * i + [1]
  258:                 tgt = pol[:]
  259:                 for k in range(j):
  260:                     tgt = herme.hermeint(tgt, m=1)
  261:                 res = herme.hermeint(pol, m=j)
  262:                 assert_almost_equal(trim(res), trim(tgt))
  263: 
  264:         # check multiple integrations with defined k
  265:         for i in range(5):
  266:             for j in range(2, 5):
  267:                 pol = [0] * i + [1]
  268:                 tgt = pol[:]
  269:                 for k in range(j):
  270:                     tgt = herme.hermeint(tgt, m=1, k=[k])
  271:                 res = herme.hermeint(pol, m=j, k=list(range(j)))
  272:                 assert_almost_equal(trim(res), trim(tgt))
  273: 
  274:         # check multiple integrations with lbnd
  275:         for i in range(5):
  276:             for j in range(2, 5):
  277:                 pol = [0] * i + [1]
  278:                 tgt = pol[:]
  279:                 for k in range(j):
  280:                     tgt = herme.hermeint(tgt, m=1, k=[k], lbnd=-1)
  281:                 res = herme.hermeint(pol, m=j, k=list(range(j)), lbnd=-1)
  282:                 assert_almost_equal(trim(res), trim(tgt))
  283: 
  284:         # check multiple integrations with scaling
  285:         for i in range(5):
  286:             for j in range(2, 5):
  287:                 pol = [0] * i + [1]
  288:                 tgt = pol[:]
  289:                 for k in range(j):
  290:                     tgt = herme.hermeint(tgt, m=1, k=[k], scl=2)
  291:                 res = herme.hermeint(pol, m=j, k=list(range(j)), scl=2)
  292:                 assert_almost_equal(trim(res), trim(tgt))
  293: 
  294:     def test_hermeint_axis(self):
  295:         # check that axis keyword works
  296:         c2d = np.random.random((3, 4))
  297: 
  298:         tgt = np.vstack([herme.hermeint(c) for c in c2d.T]).T
  299:         res = herme.hermeint(c2d, axis=0)
  300:         assert_almost_equal(res, tgt)
  301: 
  302:         tgt = np.vstack([herme.hermeint(c) for c in c2d])
  303:         res = herme.hermeint(c2d, axis=1)
  304:         assert_almost_equal(res, tgt)
  305: 
  306:         tgt = np.vstack([herme.hermeint(c, k=3) for c in c2d])
  307:         res = herme.hermeint(c2d, k=3, axis=1)
  308:         assert_almost_equal(res, tgt)
  309: 
  310: 
  311: class TestDerivative:
  312: 
  313:     def test_hermeder(self):
  314:         # check exceptions
  315:         assert_raises(TypeError, herme.hermeder, [0], .5)
  316:         assert_raises(ValueError, herme.hermeder, [0], -1)
  317: 
  318:         # check that zeroth derivative does nothing
  319:         for i in range(5):
  320:             tgt = [0] * i + [1]
  321:             res = herme.hermeder(tgt, m=0)
  322:             assert_equal(trim(res), trim(tgt))
  323: 
  324:         # check that derivation is the inverse of integration
  325:         for i in range(5):
  326:             for j in range(2, 5):
  327:                 tgt = [0] * i + [1]
  328:                 res = herme.hermeder(herme.hermeint(tgt, m=j), m=j)
  329:                 assert_almost_equal(trim(res), trim(tgt))
  330: 
  331:         # check derivation with scaling
  332:         for i in range(5):
  333:             for j in range(2, 5):
  334:                 tgt = [0] * i + [1]
  335:                 res = herme.hermeder(
  336:                     herme.hermeint(tgt, m=j, scl=2), m=j, scl=.5)
  337:                 assert_almost_equal(trim(res), trim(tgt))
  338: 
  339:     def test_hermeder_axis(self):
  340:         # check that axis keyword works
  341:         c2d = np.random.random((3, 4))
  342: 
  343:         tgt = np.vstack([herme.hermeder(c) for c in c2d.T]).T
  344:         res = herme.hermeder(c2d, axis=0)
  345:         assert_almost_equal(res, tgt)
  346: 
  347:         tgt = np.vstack([herme.hermeder(c) for c in c2d])
  348:         res = herme.hermeder(c2d, axis=1)
  349:         assert_almost_equal(res, tgt)
  350: 
  351: 
  352: class TestVander:
  353:     # some random values in [-1, 1)
  354:     x = np.random.random((3, 5)) * 2 - 1
  355: 
  356:     def test_hermevander(self):
  357:         # check for 1d x
  358:         x = np.arange(3)
  359:         v = herme.hermevander(x, 3)
  360:         assert_(v.shape == (3, 4))
  361:         for i in range(4):
  362:             coef = [0] * i + [1]
  363:             assert_almost_equal(v[..., i], herme.hermeval(x, coef))
  364: 
  365:         # check for 2d x
  366:         x = np.array([[1, 2], [3, 4], [5, 6]])
  367:         v = herme.hermevander(x, 3)
  368:         assert_(v.shape == (3, 2, 4))
  369:         for i in range(4):
  370:             coef = [0] * i + [1]
  371:             assert_almost_equal(v[..., i], herme.hermeval(x, coef))
  372: 
  373:     def test_hermevander2d(self):
  374:         # also tests hermeval2d for non-square coefficient array
  375:         x1, x2, x3 = self.x
  376:         c = np.random.random((2, 3))
  377:         van = herme.hermevander2d(x1, x2, [1, 2])
  378:         tgt = herme.hermeval2d(x1, x2, c)
  379:         res = np.dot(van, c.flat)
  380:         assert_almost_equal(res, tgt)
  381: 
  382:         # check shape
  383:         van = herme.hermevander2d([x1], [x2], [1, 2])
  384:         assert_(van.shape == (1, 5, 6))
  385: 
  386:     def test_hermevander3d(self):
  387:         # also tests hermeval3d for non-square coefficient array
  388:         x1, x2, x3 = self.x
  389:         c = np.random.random((2, 3, 4))
  390:         van = herme.hermevander3d(x1, x2, x3, [1, 2, 3])
  391:         tgt = herme.hermeval3d(x1, x2, x3, c)
  392:         res = np.dot(van, c.flat)
  393:         assert_almost_equal(res, tgt)
  394: 
  395:         # check shape
  396:         van = herme.hermevander3d([x1], [x2], [x3], [1, 2, 3])
  397:         assert_(van.shape == (1, 5, 24))
  398: 
  399: 
  400: class TestFitting:
  401: 
  402:     def test_hermefit(self):
  403:         def f(x):
  404:             return x * (x - 1) * (x - 2)
  405: 
  406:         def f2(x):
  407:             return x**4 + x**2 + 1
  408: 
  409:         # Test exceptions
  410:         assert_raises(ValueError, herme.hermefit, [1], [1], -1)
  411:         assert_raises(TypeError, herme.hermefit, [[1]], [1], 0)
  412:         assert_raises(TypeError, herme.hermefit, [], [1], 0)
  413:         assert_raises(TypeError, herme.hermefit, [1], [[[1]]], 0)
  414:         assert_raises(TypeError, herme.hermefit, [1, 2], [1], 0)
  415:         assert_raises(TypeError, herme.hermefit, [1], [1, 2], 0)
  416:         assert_raises(TypeError, herme.hermefit, [1], [1], 0, w=[[1]])
  417:         assert_raises(TypeError, herme.hermefit, [1], [1], 0, w=[1, 1])
  418:         assert_raises(ValueError, herme.hermefit, [1], [1], [-1,])
  419:         assert_raises(ValueError, herme.hermefit, [1], [1], [2, -1, 6])
  420:         assert_raises(TypeError, herme.hermefit, [1], [1], [])
  421: 
  422:         # Test fit
  423:         x = np.linspace(0, 2)
  424:         y = f(x)
  425:         #
  426:         coef3 = herme.hermefit(x, y, 3)
  427:         assert_equal(len(coef3), 4)
  428:         assert_almost_equal(herme.hermeval(x, coef3), y)
  429:         coef3 = herme.hermefit(x, y, [0, 1, 2, 3])
  430:         assert_equal(len(coef3), 4)
  431:         assert_almost_equal(herme.hermeval(x, coef3), y)
  432:         #
  433:         coef4 = herme.hermefit(x, y, 4)
  434:         assert_equal(len(coef4), 5)
  435:         assert_almost_equal(herme.hermeval(x, coef4), y)
  436:         coef4 = herme.hermefit(x, y, [0, 1, 2, 3, 4])
  437:         assert_equal(len(coef4), 5)
  438:         assert_almost_equal(herme.hermeval(x, coef4), y)
  439:         # check things still work if deg is not in strict increasing
  440:         coef4 = herme.hermefit(x, y, [2, 3, 4, 1, 0])
  441:         assert_equal(len(coef4), 5)
  442:         assert_almost_equal(herme.hermeval(x, coef4), y)
  443:         #
  444:         coef2d = herme.hermefit(x, np.array([y, y]).T, 3)
  445:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  446:         coef2d = herme.hermefit(x, np.array([y, y]).T, [0, 1, 2, 3])
  447:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  448:         # test weighting
  449:         w = np.zeros_like(x)
  450:         yw = y.copy()
  451:         w[1::2] = 1
  452:         y[0::2] = 0
  453:         wcoef3 = herme.hermefit(x, yw, 3, w=w)
  454:         assert_almost_equal(wcoef3, coef3)
  455:         wcoef3 = herme.hermefit(x, yw, [0, 1, 2, 3], w=w)
  456:         assert_almost_equal(wcoef3, coef3)
  457:         #
  458:         wcoef2d = herme.hermefit(x, np.array([yw, yw]).T, 3, w=w)
  459:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  460:         wcoef2d = herme.hermefit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
  461:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  462:         # test scaling with complex values x points whose square
  463:         # is zero when summed.
  464:         x = [1, 1j, -1, -1j]
  465:         assert_almost_equal(herme.hermefit(x, x, 1), [0, 1])
  466:         assert_almost_equal(herme.hermefit(x, x, [0, 1]), [0, 1])
  467:         # test fitting only even Legendre polynomials
  468:         x = np.linspace(-1, 1)
  469:         y = f2(x)
  470:         coef1 = herme.hermefit(x, y, 4)
  471:         assert_almost_equal(herme.hermeval(x, coef1), y)
  472:         coef2 = herme.hermefit(x, y, [0, 2, 4])
  473:         assert_almost_equal(herme.hermeval(x, coef2), y)
  474:         assert_almost_equal(coef1, coef2)
  475: 
  476: 
  477: class TestCompanion:
  478: 
  479:     def test_raises(self):
  480:         assert_raises(ValueError, herme.hermecompanion, [])
  481:         assert_raises(ValueError, herme.hermecompanion, [1])
  482: 
  483:     def test_dimensions(self):
  484:         for i in range(1, 5):
  485:             coef = [0] * i + [1]
  486:             assert_(herme.hermecompanion(coef).shape == (i, i))
  487: 
  488:     def test_linear_root(self):
  489:         assert_(herme.hermecompanion([1, 2])[0, 0] == -.5)
  490: 
  491: 
  492: class TestGauss:
  493: 
  494:     def test_100(self):
  495:         x, w = herme.hermegauss(100)
  496: 
  497:         # test orthogonality. Note that the results need to be normalized,
  498:         # otherwise the huge values that can arise from fast growing
  499:         # functions like Laguerre can be very confusing.
  500:         v = herme.hermevander(x, 99)
  501:         vv = np.dot(v.T * w, v)
  502:         vd = 1 / np.sqrt(vv.diagonal())
  503:         vv = vd[:, None] * vv * vd
  504:         assert_almost_equal(vv, np.eye(100))
  505: 
  506:         # check that the integral of 1 is correct
  507:         tgt = np.sqrt(2 * np.pi)
  508:         assert_almost_equal(w.sum(), tgt)
  509: 
  510: 
  511: class TestMisc:
  512: 
  513:     def test_hermefromroots(self):
  514:         res = herme.hermefromroots([])
  515:         assert_almost_equal(trim(res), [1])
  516:         for i in range(1, 5):
  517:             roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
  518:             pol = herme.hermefromroots(roots)
  519:             res = herme.hermeval(roots, pol)
  520:             tgt = 0
  521:             assert_(len(pol) == i + 1)
  522:             assert_almost_equal(herme.herme2poly(pol)[-1], 1)
  523:             assert_almost_equal(res, tgt)
  524: 
  525:     def test_hermeroots(self):
  526:         assert_almost_equal(herme.hermeroots([1]), [])
  527:         assert_almost_equal(herme.hermeroots([1, 1]), [-1])
  528:         for i in range(2, 5):
  529:             tgt = np.linspace(-1, 1, i)
  530:             res = herme.hermeroots(herme.hermefromroots(tgt))
  531:             assert_almost_equal(trim(res), trim(tgt))
  532: 
  533:     def test_hermetrim(self):
  534:         coef = [2, -1, 1, 0]
  535: 
  536:         # Test exceptions
  537:         assert_raises(ValueError, herme.hermetrim, coef, -1)
  538: 
  539:         # Test results
  540:         assert_equal(herme.hermetrim(coef), coef[:-1])
  541:         assert_equal(herme.hermetrim(coef, 1), coef[:-3])
  542:         assert_equal(herme.hermetrim(coef, 2), [0])
  543: 
  544:     def test_hermeline(self):
  545:         assert_equal(herme.hermeline(3, 4), [3, 4])
  546: 
  547:     def test_herme2poly(self):
  548:         for i in range(10):
  549:             assert_almost_equal(herme.herme2poly([0] * i + [1]), Helist[i])
  550: 
  551:     def test_poly2herme(self):
  552:         for i in range(10):
  553:             assert_almost_equal(herme.poly2herme(Helist[i]), [0] * i + [1])
  554: 
  555:     def test_weight(self):
  556:         x = np.linspace(-5, 5, 11)
  557:         tgt = np.exp(-.5 * x**2)
  558:         res = herme.hermeweight(x)
  559:         assert_almost_equal(res, tgt)
