    1: """Tests for hermite module.
    2: 
    3: """
    4: from functools import reduce
    5: 
    6: import numpy as np
    7: import numpy.polynomial.hermite as herm
    8: from numpy.polynomial.polynomial import polyval
    9: from numpy.testing import (
   10:     assert_,
   11:     assert_almost_equal,
   12:     assert_equal,
   13:     assert_raises,
   14: )
   15: 
   16: H0 = np.array([1])
   17: H1 = np.array([0, 2])
   18: H2 = np.array([-2, 0, 4])
   19: H3 = np.array([0, -12, 0, 8])
   20: H4 = np.array([12, 0, -48, 0, 16])
   21: H5 = np.array([0, 120, 0, -160, 0, 32])
   22: H6 = np.array([-120, 0, 720, 0, -480, 0, 64])
   23: H7 = np.array([0, -1680, 0, 3360, 0, -1344, 0, 128])
   24: H8 = np.array([1680, 0, -13440, 0, 13440, 0, -3584, 0, 256])
   25: H9 = np.array([0, 30240, 0, -80640, 0, 48384, 0, -9216, 0, 512])
   26: 
   27: Hlist = [H0, H1, H2, H3, H4, H5, H6, H7, H8, H9]
   28: 
   29: 
   30: def trim(x):
   31:     return herm.hermtrim(x, tol=1e-6)
   32: 
   33: 
   34: class TestConstants:
   35: 
   36:     def test_hermdomain(self):
   37:         assert_equal(herm.hermdomain, [-1, 1])
   38: 
   39:     def test_hermzero(self):
   40:         assert_equal(herm.hermzero, [0])
   41: 
   42:     def test_hermone(self):
   43:         assert_equal(herm.hermone, [1])
   44: 
   45:     def test_hermx(self):
   46:         assert_equal(herm.hermx, [0, .5])
   47: 
   48: 
   49: class TestArithmetic:
   50:     x = np.linspace(-3, 3, 100)
   51: 
   52:     def test_hermadd(self):
   53:         for i in range(5):
   54:             for j in range(5):
   55:                 msg = f"At i={i}, j={j}"
   56:                 tgt = np.zeros(max(i, j) + 1)
   57:                 tgt[i] += 1
   58:                 tgt[j] += 1
   59:                 res = herm.hermadd([0] * i + [1], [0] * j + [1])
   60:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   61: 
   62:     def test_hermsub(self):
   63:         for i in range(5):
   64:             for j in range(5):
   65:                 msg = f"At i={i}, j={j}"
   66:                 tgt = np.zeros(max(i, j) + 1)
   67:                 tgt[i] += 1
   68:                 tgt[j] -= 1
   69:                 res = herm.hermsub([0] * i + [1], [0] * j + [1])
   70:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   71: 
   72:     def test_hermmulx(self):
   73:         assert_equal(herm.hermmulx([0]), [0])
   74:         assert_equal(herm.hermmulx([1]), [0, .5])
   75:         for i in range(1, 5):
   76:             ser = [0] * i + [1]
   77:             tgt = [0] * (i - 1) + [i, 0, .5]
   78:             assert_equal(herm.hermmulx(ser), tgt)
   79: 
   80:     def test_hermmul(self):
   81:         # check values of result
   82:         for i in range(5):
   83:             pol1 = [0] * i + [1]
   84:             val1 = herm.hermval(self.x, pol1)
   85:             for j in range(5):
   86:                 msg = f"At i={i}, j={j}"
   87:                 pol2 = [0] * j + [1]
   88:                 val2 = herm.hermval(self.x, pol2)
   89:                 pol3 = herm.hermmul(pol1, pol2)
   90:                 val3 = herm.hermval(self.x, pol3)
   91:                 assert_(len(pol3) == i + j + 1, msg)
   92:                 assert_almost_equal(val3, val1 * val2, err_msg=msg)
   93: 
   94:     def test_hermdiv(self):
   95:         for i in range(5):
   96:             for j in range(5):
   97:                 msg = f"At i={i}, j={j}"
   98:                 ci = [0] * i + [1]
   99:                 cj = [0] * j + [1]
  100:                 tgt = herm.hermadd(ci, cj)
  101:                 quo, rem = herm.hermdiv(tgt, ci)
  102:                 res = herm.hermadd(herm.hermmul(quo, ci), rem)
  103:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  104: 
  105:     def test_hermpow(self):
  106:         for i in range(5):
  107:             for j in range(5):
  108:                 msg = f"At i={i}, j={j}"
  109:                 c = np.arange(i + 1)
  110:                 tgt = reduce(herm.hermmul, [c] * j, np.array([1]))
  111:                 res = herm.hermpow(c, j)
  112:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  113: 
  114: 
  115: class TestEvaluation:
  116:     # coefficients of 1 + 2*x + 3*x**2
  117:     c1d = np.array([2.5, 1., .75])
  118:     c2d = np.einsum('i,j->ij', c1d, c1d)
  119:     c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d)
  120: 
  121:     # some random values in [-1, 1)
  122:     x = np.random.random((3, 5)) * 2 - 1
  123:     y = polyval(x, [1., 2., 3.])
  124: 
  125:     def test_hermval(self):
  126:         # check empty input
  127:         assert_equal(herm.hermval([], [1]).size, 0)
  128: 
  129:         # check normal input)
  130:         x = np.linspace(-1, 1)
  131:         y = [polyval(x, c) for c in Hlist]
  132:         for i in range(10):
  133:             msg = f"At i={i}"
  134:             tgt = y[i]
  135:             res = herm.hermval(x, [0] * i + [1])
  136:             assert_almost_equal(res, tgt, err_msg=msg)
  137: 
  138:         # check that shape is preserved
  139:         for i in range(3):
  140:             dims = [2] * i
  141:             x = np.zeros(dims)
  142:             assert_equal(herm.hermval(x, [1]).shape, dims)
  143:             assert_equal(herm.hermval(x, [1, 0]).shape, dims)
  144:             assert_equal(herm.hermval(x, [1, 0, 0]).shape, dims)
  145: 
  146:     def test_hermval2d(self):
  147:         x1, x2, x3 = self.x
  148:         y1, y2, y3 = self.y
  149: 
  150:         # test exceptions
  151:         assert_raises(ValueError, herm.hermval2d, x1, x2[:2], self.c2d)
  152: 
  153:         # test values
  154:         tgt = y1 * y2
  155:         res = herm.hermval2d(x1, x2, self.c2d)
  156:         assert_almost_equal(res, tgt)
  157: 
  158:         # test shape
  159:         z = np.ones((2, 3))
  160:         res = herm.hermval2d(z, z, self.c2d)
  161:         assert_(res.shape == (2, 3))
  162: 
  163:     def test_hermval3d(self):
  164:         x1, x2, x3 = self.x
  165:         y1, y2, y3 = self.y
  166: 
  167:         # test exceptions
  168:         assert_raises(ValueError, herm.hermval3d, x1, x2, x3[:2], self.c3d)
  169: 
  170:         # test values
  171:         tgt = y1 * y2 * y3
  172:         res = herm.hermval3d(x1, x2, x3, self.c3d)
  173:         assert_almost_equal(res, tgt)
  174: 
  175:         # test shape
  176:         z = np.ones((2, 3))
  177:         res = herm.hermval3d(z, z, z, self.c3d)
  178:         assert_(res.shape == (2, 3))
  179: 
  180:     def test_hermgrid2d(self):
  181:         x1, x2, x3 = self.x
  182:         y1, y2, y3 = self.y
  183: 
  184:         # test values
  185:         tgt = np.einsum('i,j->ij', y1, y2)
  186:         res = herm.hermgrid2d(x1, x2, self.c2d)
  187:         assert_almost_equal(res, tgt)
  188: 
  189:         # test shape
  190:         z = np.ones((2, 3))
  191:         res = herm.hermgrid2d(z, z, self.c2d)
  192:         assert_(res.shape == (2, 3) * 2)
  193: 
  194:     def test_hermgrid3d(self):
  195:         x1, x2, x3 = self.x
  196:         y1, y2, y3 = self.y
  197: 
  198:         # test values
  199:         tgt = np.einsum('i,j,k->ijk', y1, y2, y3)
  200:         res = herm.hermgrid3d(x1, x2, x3, self.c3d)
  201:         assert_almost_equal(res, tgt)
  202: 
  203:         # test shape
  204:         z = np.ones((2, 3))
  205:         res = herm.hermgrid3d(z, z, z, self.c3d)
  206:         assert_(res.shape == (2, 3) * 3)
  207: 
  208: 
  209: class TestIntegral:
  210: 
  211:     def test_hermint(self):
  212:         # check exceptions
  213:         assert_raises(TypeError, herm.hermint, [0], .5)
  214:         assert_raises(ValueError, herm.hermint, [0], -1)
  215:         assert_raises(ValueError, herm.hermint, [0], 1, [0, 0])
  216:         assert_raises(ValueError, herm.hermint, [0], lbnd=[0])
  217:         assert_raises(ValueError, herm.hermint, [0], scl=[0])
  218:         assert_raises(TypeError, herm.hermint, [0], axis=.5)
  219: 
  220:         # test integration of zero polynomial
  221:         for i in range(2, 5):
  222:             k = [0] * (i - 2) + [1]
  223:             res = herm.hermint([0], m=i, k=k)
  224:             assert_almost_equal(res, [0, .5])
  225: 
  226:         # check single integration with integration constant
  227:         for i in range(5):
  228:             scl = i + 1
  229:             pol = [0] * i + [1]
  230:             tgt = [i] + [0] * i + [1 / scl]
  231:             hermpol = herm.poly2herm(pol)
  232:             hermint = herm.hermint(hermpol, m=1, k=[i])
  233:             res = herm.herm2poly(hermint)
  234:             assert_almost_equal(trim(res), trim(tgt))
  235: 
  236:         # check single integration with integration constant and lbnd
  237:         for i in range(5):
  238:             scl = i + 1
  239:             pol = [0] * i + [1]
  240:             hermpol = herm.poly2herm(pol)
  241:             hermint = herm.hermint(hermpol, m=1, k=[i], lbnd=-1)
  242:             assert_almost_equal(herm.hermval(-1, hermint), i)
  243: 
  244:         # check single integration with integration constant and scaling
  245:         for i in range(5):
  246:             scl = i + 1
  247:             pol = [0] * i + [1]
  248:             tgt = [i] + [0] * i + [2 / scl]
  249:             hermpol = herm.poly2herm(pol)
  250:             hermint = herm.hermint(hermpol, m=1, k=[i], scl=2)
  251:             res = herm.herm2poly(hermint)
  252:             assert_almost_equal(trim(res), trim(tgt))
  253: 
  254:         # check multiple integrations with default k
  255:         for i in range(5):
  256:             for j in range(2, 5):
  257:                 pol = [0] * i + [1]
  258:                 tgt = pol[:]
  259:                 for k in range(j):
  260:                     tgt = herm.hermint(tgt, m=1)
  261:                 res = herm.hermint(pol, m=j)
  262:                 assert_almost_equal(trim(res), trim(tgt))
  263: 
  264:         # check multiple integrations with defined k
  265:         for i in range(5):
  266:             for j in range(2, 5):
  267:                 pol = [0] * i + [1]
  268:                 tgt = pol[:]
  269:                 for k in range(j):
  270:                     tgt = herm.hermint(tgt, m=1, k=[k])
  271:                 res = herm.hermint(pol, m=j, k=list(range(j)))
  272:                 assert_almost_equal(trim(res), trim(tgt))
  273: 
  274:         # check multiple integrations with lbnd
  275:         for i in range(5):
  276:             for j in range(2, 5):
  277:                 pol = [0] * i + [1]
  278:                 tgt = pol[:]
  279:                 for k in range(j):
  280:                     tgt = herm.hermint(tgt, m=1, k=[k], lbnd=-1)
  281:                 res = herm.hermint(pol, m=j, k=list(range(j)), lbnd=-1)
  282:                 assert_almost_equal(trim(res), trim(tgt))
  283: 
  284:         # check multiple integrations with scaling
  285:         for i in range(5):
  286:             for j in range(2, 5):
  287:                 pol = [0] * i + [1]
  288:                 tgt = pol[:]
  289:                 for k in range(j):
  290:                     tgt = herm.hermint(tgt, m=1, k=[k], scl=2)
  291:                 res = herm.hermint(pol, m=j, k=list(range(j)), scl=2)
  292:                 assert_almost_equal(trim(res), trim(tgt))
  293: 
  294:     def test_hermint_axis(self):
  295:         # check that axis keyword works
  296:         c2d = np.random.random((3, 4))
  297: 
  298:         tgt = np.vstack([herm.hermint(c) for c in c2d.T]).T
  299:         res = herm.hermint(c2d, axis=0)
  300:         assert_almost_equal(res, tgt)
  301: 
  302:         tgt = np.vstack([herm.hermint(c) for c in c2d])
  303:         res = herm.hermint(c2d, axis=1)
  304:         assert_almost_equal(res, tgt)
  305: 
  306:         tgt = np.vstack([herm.hermint(c, k=3) for c in c2d])
  307:         res = herm.hermint(c2d, k=3, axis=1)
  308:         assert_almost_equal(res, tgt)
  309: 
  310: 
  311: class TestDerivative:
  312: 
  313:     def test_hermder(self):
  314:         # check exceptions
  315:         assert_raises(TypeError, herm.hermder, [0], .5)
  316:         assert_raises(ValueError, herm.hermder, [0], -1)
  317: 
  318:         # check that zeroth derivative does nothing
  319:         for i in range(5):
  320:             tgt = [0] * i + [1]
  321:             res = herm.hermder(tgt, m=0)
  322:             assert_equal(trim(res), trim(tgt))
  323: 
  324:         # check that derivation is the inverse of integration
  325:         for i in range(5):
  326:             for j in range(2, 5):
  327:                 tgt = [0] * i + [1]
  328:                 res = herm.hermder(herm.hermint(tgt, m=j), m=j)
  329:                 assert_almost_equal(trim(res), trim(tgt))
  330: 
  331:         # check derivation with scaling
  332:         for i in range(5):
  333:             for j in range(2, 5):
  334:                 tgt = [0] * i + [1]
  335:                 res = herm.hermder(herm.hermint(tgt, m=j, scl=2), m=j, scl=.5)
  336:                 assert_almost_equal(trim(res), trim(tgt))
  337: 
  338:     def test_hermder_axis(self):
  339:         # check that axis keyword works
  340:         c2d = np.random.random((3, 4))
  341: 
  342:         tgt = np.vstack([herm.hermder(c) for c in c2d.T]).T
  343:         res = herm.hermder(c2d, axis=0)
  344:         assert_almost_equal(res, tgt)
  345: 
  346:         tgt = np.vstack([herm.hermder(c) for c in c2d])
  347:         res = herm.hermder(c2d, axis=1)
  348:         assert_almost_equal(res, tgt)
  349: 
  350: 
  351: class TestVander:
  352:     # some random values in [-1, 1)
  353:     x = np.random.random((3, 5)) * 2 - 1
  354: 
  355:     def test_hermvander(self):
  356:         # check for 1d x
  357:         x = np.arange(3)
  358:         v = herm.hermvander(x, 3)
  359:         assert_(v.shape == (3, 4))
  360:         for i in range(4):
  361:             coef = [0] * i + [1]
  362:             assert_almost_equal(v[..., i], herm.hermval(x, coef))
  363: 
  364:         # check for 2d x
  365:         x = np.array([[1, 2], [3, 4], [5, 6]])
  366:         v = herm.hermvander(x, 3)
  367:         assert_(v.shape == (3, 2, 4))
  368:         for i in range(4):
  369:             coef = [0] * i + [1]
  370:             assert_almost_equal(v[..., i], herm.hermval(x, coef))
  371: 
  372:     def test_hermvander2d(self):
  373:         # also tests hermval2d for non-square coefficient array
  374:         x1, x2, x3 = self.x
  375:         c = np.random.random((2, 3))
  376:         van = herm.hermvander2d(x1, x2, [1, 2])
  377:         tgt = herm.hermval2d(x1, x2, c)
  378:         res = np.dot(van, c.flat)
  379:         assert_almost_equal(res, tgt)
  380: 
  381:         # check shape
  382:         van = herm.hermvander2d([x1], [x2], [1, 2])
  383:         assert_(van.shape == (1, 5, 6))
  384: 
  385:     def test_hermvander3d(self):
  386:         # also tests hermval3d for non-square coefficient array
  387:         x1, x2, x3 = self.x
  388:         c = np.random.random((2, 3, 4))
  389:         van = herm.hermvander3d(x1, x2, x3, [1, 2, 3])
  390:         tgt = herm.hermval3d(x1, x2, x3, c)
  391:         res = np.dot(van, c.flat)
  392:         assert_almost_equal(res, tgt)
  393: 
  394:         # check shape
  395:         van = herm.hermvander3d([x1], [x2], [x3], [1, 2, 3])
  396:         assert_(van.shape == (1, 5, 24))
  397: 
  398: 
  399: class TestFitting:
  400: 
  401:     def test_hermfit(self):
  402:         def f(x):
  403:             return x * (x - 1) * (x - 2)
  404: 
  405:         def f2(x):
  406:             return x**4 + x**2 + 1
  407: 
  408:         # Test exceptions
  409:         assert_raises(ValueError, herm.hermfit, [1], [1], -1)
  410:         assert_raises(TypeError, herm.hermfit, [[1]], [1], 0)
  411:         assert_raises(TypeError, herm.hermfit, [], [1], 0)
  412:         assert_raises(TypeError, herm.hermfit, [1], [[[1]]], 0)
  413:         assert_raises(TypeError, herm.hermfit, [1, 2], [1], 0)
  414:         assert_raises(TypeError, herm.hermfit, [1], [1, 2], 0)
  415:         assert_raises(TypeError, herm.hermfit, [1], [1], 0, w=[[1]])
  416:         assert_raises(TypeError, herm.hermfit, [1], [1], 0, w=[1, 1])
  417:         assert_raises(ValueError, herm.hermfit, [1], [1], [-1,])
  418:         assert_raises(ValueError, herm.hermfit, [1], [1], [2, -1, 6])
  419:         assert_raises(TypeError, herm.hermfit, [1], [1], [])
  420: 
  421:         # Test fit
  422:         x = np.linspace(0, 2)
  423:         y = f(x)
  424:         #
  425:         coef3 = herm.hermfit(x, y, 3)
  426:         assert_equal(len(coef3), 4)
  427:         assert_almost_equal(herm.hermval(x, coef3), y)
  428:         coef3 = herm.hermfit(x, y, [0, 1, 2, 3])
  429:         assert_equal(len(coef3), 4)
  430:         assert_almost_equal(herm.hermval(x, coef3), y)
  431:         #
  432:         coef4 = herm.hermfit(x, y, 4)
  433:         assert_equal(len(coef4), 5)
  434:         assert_almost_equal(herm.hermval(x, coef4), y)
  435:         coef4 = herm.hermfit(x, y, [0, 1, 2, 3, 4])
  436:         assert_equal(len(coef4), 5)
  437:         assert_almost_equal(herm.hermval(x, coef4), y)
  438:         # check things still work if deg is not in strict increasing
  439:         coef4 = herm.hermfit(x, y, [2, 3, 4, 1, 0])
  440:         assert_equal(len(coef4), 5)
  441:         assert_almost_equal(herm.hermval(x, coef4), y)
  442:         #
  443:         coef2d = herm.hermfit(x, np.array([y, y]).T, 3)
  444:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  445:         coef2d = herm.hermfit(x, np.array([y, y]).T, [0, 1, 2, 3])
  446:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  447:         # test weighting
  448:         w = np.zeros_like(x)
  449:         yw = y.copy()
  450:         w[1::2] = 1
  451:         y[0::2] = 0
  452:         wcoef3 = herm.hermfit(x, yw, 3, w=w)
  453:         assert_almost_equal(wcoef3, coef3)
  454:         wcoef3 = herm.hermfit(x, yw, [0, 1, 2, 3], w=w)
  455:         assert_almost_equal(wcoef3, coef3)
  456:         #
  457:         wcoef2d = herm.hermfit(x, np.array([yw, yw]).T, 3, w=w)
  458:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  459:         wcoef2d = herm.hermfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
  460:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  461:         # test scaling with complex values x points whose square
  462:         # is zero when summed.
  463:         x = [1, 1j, -1, -1j]
  464:         assert_almost_equal(herm.hermfit(x, x, 1), [0, .5])
  465:         assert_almost_equal(herm.hermfit(x, x, [0, 1]), [0, .5])
  466:         # test fitting only even Legendre polynomials
  467:         x = np.linspace(-1, 1)
  468:         y = f2(x)
  469:         coef1 = herm.hermfit(x, y, 4)
  470:         assert_almost_equal(herm.hermval(x, coef1), y)
  471:         coef2 = herm.hermfit(x, y, [0, 2, 4])
  472:         assert_almost_equal(herm.hermval(x, coef2), y)
  473:         assert_almost_equal(coef1, coef2)
  474: 
  475: 
  476: class TestCompanion:
  477: 
  478:     def test_raises(self):
  479:         assert_raises(ValueError, herm.hermcompanion, [])
  480:         assert_raises(ValueError, herm.hermcompanion, [1])
  481: 
  482:     def test_dimensions(self):
  483:         for i in range(1, 5):
  484:             coef = [0] * i + [1]
  485:             assert_(herm.hermcompanion(coef).shape == (i, i))
  486: 
  487:     def test_linear_root(self):
  488:         assert_(herm.hermcompanion([1, 2])[0, 0] == -.25)
  489: 
  490: 
  491: class TestGauss:
  492: 
  493:     def test_100(self):
  494:         x, w = herm.hermgauss(100)
  495: 
  496:         # test orthogonality. Note that the results need to be normalized,
  497:         # otherwise the huge values that can arise from fast growing
  498:         # functions like Laguerre can be very confusing.
  499:         v = herm.hermvander(x, 99)
  500:         vv = np.dot(v.T * w, v)
  501:         vd = 1 / np.sqrt(vv.diagonal())
  502:         vv = vd[:, None] * vv * vd
  503:         assert_almost_equal(vv, np.eye(100))
  504: 
  505:         # check that the integral of 1 is correct
  506:         tgt = np.sqrt(np.pi)
  507:         assert_almost_equal(w.sum(), tgt)
  508: 
  509: 
  510: class TestMisc:
  511: 
  512:     def test_hermfromroots(self):
  513:         res = herm.hermfromroots([])
  514:         assert_almost_equal(trim(res), [1])
  515:         for i in range(1, 5):
  516:             roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
  517:             pol = herm.hermfromroots(roots)
  518:             res = herm.hermval(roots, pol)
  519:             tgt = 0
  520:             assert_(len(pol) == i + 1)
  521:             assert_almost_equal(herm.herm2poly(pol)[-1], 1)
  522:             assert_almost_equal(res, tgt)
  523: 
  524:     def test_hermroots(self):
  525:         assert_almost_equal(herm.hermroots([1]), [])
  526:         assert_almost_equal(herm.hermroots([1, 1]), [-.5])
  527:         for i in range(2, 5):
  528:             tgt = np.linspace(-1, 1, i)
  529:             res = herm.hermroots(herm.hermfromroots(tgt))
  530:             assert_almost_equal(trim(res), trim(tgt))
  531: 
  532:     def test_hermtrim(self):
  533:         coef = [2, -1, 1, 0]
  534: 
  535:         # Test exceptions
  536:         assert_raises(ValueError, herm.hermtrim, coef, -1)
  537: 
  538:         # Test results
  539:         assert_equal(herm.hermtrim(coef), coef[:-1])
  540:         assert_equal(herm.hermtrim(coef, 1), coef[:-3])
  541:         assert_equal(herm.hermtrim(coef, 2), [0])
  542: 
  543:     def test_hermline(self):
  544:         assert_equal(herm.hermline(3, 4), [3, 2])
  545: 
  546:     def test_herm2poly(self):
  547:         for i in range(10):
  548:             assert_almost_equal(herm.herm2poly([0] * i + [1]), Hlist[i])
  549: 
  550:     def test_poly2herm(self):
  551:         for i in range(10):
  552:             assert_almost_equal(herm.poly2herm(Hlist[i]), [0] * i + [1])
  553: 
  554:     def test_weight(self):
  555:         x = np.linspace(-5, 5, 11)
  556:         tgt = np.exp(-x**2)
  557:         res = herm.hermweight(x)
  558:         assert_almost_equal(res, tgt)
