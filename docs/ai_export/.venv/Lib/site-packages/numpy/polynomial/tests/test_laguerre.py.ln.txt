    1: """Tests for laguerre module.
    2: 
    3: """
    4: from functools import reduce
    5: 
    6: import numpy as np
    7: import numpy.polynomial.laguerre as lag
    8: from numpy.polynomial.polynomial import polyval
    9: from numpy.testing import (
   10:     assert_,
   11:     assert_almost_equal,
   12:     assert_equal,
   13:     assert_raises,
   14: )
   15: 
   16: L0 = np.array([1]) / 1
   17: L1 = np.array([1, -1]) / 1
   18: L2 = np.array([2, -4, 1]) / 2
   19: L3 = np.array([6, -18, 9, -1]) / 6
   20: L4 = np.array([24, -96, 72, -16, 1]) / 24
   21: L5 = np.array([120, -600, 600, -200, 25, -1]) / 120
   22: L6 = np.array([720, -4320, 5400, -2400, 450, -36, 1]) / 720
   23: 
   24: Llist = [L0, L1, L2, L3, L4, L5, L6]
   25: 
   26: 
   27: def trim(x):
   28:     return lag.lagtrim(x, tol=1e-6)
   29: 
   30: 
   31: class TestConstants:
   32: 
   33:     def test_lagdomain(self):
   34:         assert_equal(lag.lagdomain, [0, 1])
   35: 
   36:     def test_lagzero(self):
   37:         assert_equal(lag.lagzero, [0])
   38: 
   39:     def test_lagone(self):
   40:         assert_equal(lag.lagone, [1])
   41: 
   42:     def test_lagx(self):
   43:         assert_equal(lag.lagx, [1, -1])
   44: 
   45: 
   46: class TestArithmetic:
   47:     x = np.linspace(-3, 3, 100)
   48: 
   49:     def test_lagadd(self):
   50:         for i in range(5):
   51:             for j in range(5):
   52:                 msg = f"At i={i}, j={j}"
   53:                 tgt = np.zeros(max(i, j) + 1)
   54:                 tgt[i] += 1
   55:                 tgt[j] += 1
   56:                 res = lag.lagadd([0] * i + [1], [0] * j + [1])
   57:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   58: 
   59:     def test_lagsub(self):
   60:         for i in range(5):
   61:             for j in range(5):
   62:                 msg = f"At i={i}, j={j}"
   63:                 tgt = np.zeros(max(i, j) + 1)
   64:                 tgt[i] += 1
   65:                 tgt[j] -= 1
   66:                 res = lag.lagsub([0] * i + [1], [0] * j + [1])
   67:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   68: 
   69:     def test_lagmulx(self):
   70:         assert_equal(lag.lagmulx([0]), [0])
   71:         assert_equal(lag.lagmulx([1]), [1, -1])
   72:         for i in range(1, 5):
   73:             ser = [0] * i + [1]
   74:             tgt = [0] * (i - 1) + [-i, 2 * i + 1, -(i + 1)]
   75:             assert_almost_equal(lag.lagmulx(ser), tgt)
   76: 
   77:     def test_lagmul(self):
   78:         # check values of result
   79:         for i in range(5):
   80:             pol1 = [0] * i + [1]
   81:             val1 = lag.lagval(self.x, pol1)
   82:             for j in range(5):
   83:                 msg = f"At i={i}, j={j}"
   84:                 pol2 = [0] * j + [1]
   85:                 val2 = lag.lagval(self.x, pol2)
   86:                 pol3 = lag.lagmul(pol1, pol2)
   87:                 val3 = lag.lagval(self.x, pol3)
   88:                 assert_(len(pol3) == i + j + 1, msg)
   89:                 assert_almost_equal(val3, val1 * val2, err_msg=msg)
   90: 
   91:     def test_lagdiv(self):
   92:         for i in range(5):
   93:             for j in range(5):
   94:                 msg = f"At i={i}, j={j}"
   95:                 ci = [0] * i + [1]
   96:                 cj = [0] * j + [1]
   97:                 tgt = lag.lagadd(ci, cj)
   98:                 quo, rem = lag.lagdiv(tgt, ci)
   99:                 res = lag.lagadd(lag.lagmul(quo, ci), rem)
  100:                 assert_almost_equal(trim(res), trim(tgt), err_msg=msg)
  101: 
  102:     def test_lagpow(self):
  103:         for i in range(5):
  104:             for j in range(5):
  105:                 msg = f"At i={i}, j={j}"
  106:                 c = np.arange(i + 1)
  107:                 tgt = reduce(lag.lagmul, [c] * j, np.array([1]))
  108:                 res = lag.lagpow(c, j)
  109:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  110: 
  111: 
  112: class TestEvaluation:
  113:     # coefficients of 1 + 2*x + 3*x**2
  114:     c1d = np.array([9., -14., 6.])
  115:     c2d = np.einsum('i,j->ij', c1d, c1d)
  116:     c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d)
  117: 
  118:     # some random values in [-1, 1)
  119:     x = np.random.random((3, 5)) * 2 - 1
  120:     y = polyval(x, [1., 2., 3.])
  121: 
  122:     def test_lagval(self):
  123:         # check empty input
  124:         assert_equal(lag.lagval([], [1]).size, 0)
  125: 
  126:         # check normal input)
  127:         x = np.linspace(-1, 1)
  128:         y = [polyval(x, c) for c in Llist]
  129:         for i in range(7):
  130:             msg = f"At i={i}"
  131:             tgt = y[i]
  132:             res = lag.lagval(x, [0] * i + [1])
  133:             assert_almost_equal(res, tgt, err_msg=msg)
  134: 
  135:         # check that shape is preserved
  136:         for i in range(3):
  137:             dims = [2] * i
  138:             x = np.zeros(dims)
  139:             assert_equal(lag.lagval(x, [1]).shape, dims)
  140:             assert_equal(lag.lagval(x, [1, 0]).shape, dims)
  141:             assert_equal(lag.lagval(x, [1, 0, 0]).shape, dims)
  142: 
  143:     def test_lagval2d(self):
  144:         x1, x2, x3 = self.x
  145:         y1, y2, y3 = self.y
  146: 
  147:         # test exceptions
  148:         assert_raises(ValueError, lag.lagval2d, x1, x2[:2], self.c2d)
  149: 
  150:         # test values
  151:         tgt = y1 * y2
  152:         res = lag.lagval2d(x1, x2, self.c2d)
  153:         assert_almost_equal(res, tgt)
  154: 
  155:         # test shape
  156:         z = np.ones((2, 3))
  157:         res = lag.lagval2d(z, z, self.c2d)
  158:         assert_(res.shape == (2, 3))
  159: 
  160:     def test_lagval3d(self):
  161:         x1, x2, x3 = self.x
  162:         y1, y2, y3 = self.y
  163: 
  164:         # test exceptions
  165:         assert_raises(ValueError, lag.lagval3d, x1, x2, x3[:2], self.c3d)
  166: 
  167:         # test values
  168:         tgt = y1 * y2 * y3
  169:         res = lag.lagval3d(x1, x2, x3, self.c3d)
  170:         assert_almost_equal(res, tgt)
  171: 
  172:         # test shape
  173:         z = np.ones((2, 3))
  174:         res = lag.lagval3d(z, z, z, self.c3d)
  175:         assert_(res.shape == (2, 3))
  176: 
  177:     def test_laggrid2d(self):
  178:         x1, x2, x3 = self.x
  179:         y1, y2, y3 = self.y
  180: 
  181:         # test values
  182:         tgt = np.einsum('i,j->ij', y1, y2)
  183:         res = lag.laggrid2d(x1, x2, self.c2d)
  184:         assert_almost_equal(res, tgt)
  185: 
  186:         # test shape
  187:         z = np.ones((2, 3))
  188:         res = lag.laggrid2d(z, z, self.c2d)
  189:         assert_(res.shape == (2, 3) * 2)
  190: 
  191:     def test_laggrid3d(self):
  192:         x1, x2, x3 = self.x
  193:         y1, y2, y3 = self.y
  194: 
  195:         # test values
  196:         tgt = np.einsum('i,j,k->ijk', y1, y2, y3)
  197:         res = lag.laggrid3d(x1, x2, x3, self.c3d)
  198:         assert_almost_equal(res, tgt)
  199: 
  200:         # test shape
  201:         z = np.ones((2, 3))
  202:         res = lag.laggrid3d(z, z, z, self.c3d)
  203:         assert_(res.shape == (2, 3) * 3)
  204: 
  205: 
  206: class TestIntegral:
  207: 
  208:     def test_lagint(self):
  209:         # check exceptions
  210:         assert_raises(TypeError, lag.lagint, [0], .5)
  211:         assert_raises(ValueError, lag.lagint, [0], -1)
  212:         assert_raises(ValueError, lag.lagint, [0], 1, [0, 0])
  213:         assert_raises(ValueError, lag.lagint, [0], lbnd=[0])
  214:         assert_raises(ValueError, lag.lagint, [0], scl=[0])
  215:         assert_raises(TypeError, lag.lagint, [0], axis=.5)
  216: 
  217:         # test integration of zero polynomial
  218:         for i in range(2, 5):
  219:             k = [0] * (i - 2) + [1]
  220:             res = lag.lagint([0], m=i, k=k)
  221:             assert_almost_equal(res, [1, -1])
  222: 
  223:         # check single integration with integration constant
  224:         for i in range(5):
  225:             scl = i + 1
  226:             pol = [0] * i + [1]
  227:             tgt = [i] + [0] * i + [1 / scl]
  228:             lagpol = lag.poly2lag(pol)
  229:             lagint = lag.lagint(lagpol, m=1, k=[i])
  230:             res = lag.lag2poly(lagint)
  231:             assert_almost_equal(trim(res), trim(tgt))
  232: 
  233:         # check single integration with integration constant and lbnd
  234:         for i in range(5):
  235:             scl = i + 1
  236:             pol = [0] * i + [1]
  237:             lagpol = lag.poly2lag(pol)
  238:             lagint = lag.lagint(lagpol, m=1, k=[i], lbnd=-1)
  239:             assert_almost_equal(lag.lagval(-1, lagint), i)
  240: 
  241:         # check single integration with integration constant and scaling
  242:         for i in range(5):
  243:             scl = i + 1
  244:             pol = [0] * i + [1]
  245:             tgt = [i] + [0] * i + [2 / scl]
  246:             lagpol = lag.poly2lag(pol)
  247:             lagint = lag.lagint(lagpol, m=1, k=[i], scl=2)
  248:             res = lag.lag2poly(lagint)
  249:             assert_almost_equal(trim(res), trim(tgt))
  250: 
  251:         # check multiple integrations with default k
  252:         for i in range(5):
  253:             for j in range(2, 5):
  254:                 pol = [0] * i + [1]
  255:                 tgt = pol[:]
  256:                 for k in range(j):
  257:                     tgt = lag.lagint(tgt, m=1)
  258:                 res = lag.lagint(pol, m=j)
  259:                 assert_almost_equal(trim(res), trim(tgt))
  260: 
  261:         # check multiple integrations with defined k
  262:         for i in range(5):
  263:             for j in range(2, 5):
  264:                 pol = [0] * i + [1]
  265:                 tgt = pol[:]
  266:                 for k in range(j):
  267:                     tgt = lag.lagint(tgt, m=1, k=[k])
  268:                 res = lag.lagint(pol, m=j, k=list(range(j)))
  269:                 assert_almost_equal(trim(res), trim(tgt))
  270: 
  271:         # check multiple integrations with lbnd
  272:         for i in range(5):
  273:             for j in range(2, 5):
  274:                 pol = [0] * i + [1]
  275:                 tgt = pol[:]
  276:                 for k in range(j):
  277:                     tgt = lag.lagint(tgt, m=1, k=[k], lbnd=-1)
  278:                 res = lag.lagint(pol, m=j, k=list(range(j)), lbnd=-1)
  279:                 assert_almost_equal(trim(res), trim(tgt))
  280: 
  281:         # check multiple integrations with scaling
  282:         for i in range(5):
  283:             for j in range(2, 5):
  284:                 pol = [0] * i + [1]
  285:                 tgt = pol[:]
  286:                 for k in range(j):
  287:                     tgt = lag.lagint(tgt, m=1, k=[k], scl=2)
  288:                 res = lag.lagint(pol, m=j, k=list(range(j)), scl=2)
  289:                 assert_almost_equal(trim(res), trim(tgt))
  290: 
  291:     def test_lagint_axis(self):
  292:         # check that axis keyword works
  293:         c2d = np.random.random((3, 4))
  294: 
  295:         tgt = np.vstack([lag.lagint(c) for c in c2d.T]).T
  296:         res = lag.lagint(c2d, axis=0)
  297:         assert_almost_equal(res, tgt)
  298: 
  299:         tgt = np.vstack([lag.lagint(c) for c in c2d])
  300:         res = lag.lagint(c2d, axis=1)
  301:         assert_almost_equal(res, tgt)
  302: 
  303:         tgt = np.vstack([lag.lagint(c, k=3) for c in c2d])
  304:         res = lag.lagint(c2d, k=3, axis=1)
  305:         assert_almost_equal(res, tgt)
  306: 
  307: 
  308: class TestDerivative:
  309: 
  310:     def test_lagder(self):
  311:         # check exceptions
  312:         assert_raises(TypeError, lag.lagder, [0], .5)
  313:         assert_raises(ValueError, lag.lagder, [0], -1)
  314: 
  315:         # check that zeroth derivative does nothing
  316:         for i in range(5):
  317:             tgt = [0] * i + [1]
  318:             res = lag.lagder(tgt, m=0)
  319:             assert_equal(trim(res), trim(tgt))
  320: 
  321:         # check that derivation is the inverse of integration
  322:         for i in range(5):
  323:             for j in range(2, 5):
  324:                 tgt = [0] * i + [1]
  325:                 res = lag.lagder(lag.lagint(tgt, m=j), m=j)
  326:                 assert_almost_equal(trim(res), trim(tgt))
  327: 
  328:         # check derivation with scaling
  329:         for i in range(5):
  330:             for j in range(2, 5):
  331:                 tgt = [0] * i + [1]
  332:                 res = lag.lagder(lag.lagint(tgt, m=j, scl=2), m=j, scl=.5)
  333:                 assert_almost_equal(trim(res), trim(tgt))
  334: 
  335:     def test_lagder_axis(self):
  336:         # check that axis keyword works
  337:         c2d = np.random.random((3, 4))
  338: 
  339:         tgt = np.vstack([lag.lagder(c) for c in c2d.T]).T
  340:         res = lag.lagder(c2d, axis=0)
  341:         assert_almost_equal(res, tgt)
  342: 
  343:         tgt = np.vstack([lag.lagder(c) for c in c2d])
  344:         res = lag.lagder(c2d, axis=1)
  345:         assert_almost_equal(res, tgt)
  346: 
  347: 
  348: class TestVander:
  349:     # some random values in [-1, 1)
  350:     x = np.random.random((3, 5)) * 2 - 1
  351: 
  352:     def test_lagvander(self):
  353:         # check for 1d x
  354:         x = np.arange(3)
  355:         v = lag.lagvander(x, 3)
  356:         assert_(v.shape == (3, 4))
  357:         for i in range(4):
  358:             coef = [0] * i + [1]
  359:             assert_almost_equal(v[..., i], lag.lagval(x, coef))
  360: 
  361:         # check for 2d x
  362:         x = np.array([[1, 2], [3, 4], [5, 6]])
  363:         v = lag.lagvander(x, 3)
  364:         assert_(v.shape == (3, 2, 4))
  365:         for i in range(4):
  366:             coef = [0] * i + [1]
  367:             assert_almost_equal(v[..., i], lag.lagval(x, coef))
  368: 
  369:     def test_lagvander2d(self):
  370:         # also tests lagval2d for non-square coefficient array
  371:         x1, x2, x3 = self.x
  372:         c = np.random.random((2, 3))
  373:         van = lag.lagvander2d(x1, x2, [1, 2])
  374:         tgt = lag.lagval2d(x1, x2, c)
  375:         res = np.dot(van, c.flat)
  376:         assert_almost_equal(res, tgt)
  377: 
  378:         # check shape
  379:         van = lag.lagvander2d([x1], [x2], [1, 2])
  380:         assert_(van.shape == (1, 5, 6))
  381: 
  382:     def test_lagvander3d(self):
  383:         # also tests lagval3d for non-square coefficient array
  384:         x1, x2, x3 = self.x
  385:         c = np.random.random((2, 3, 4))
  386:         van = lag.lagvander3d(x1, x2, x3, [1, 2, 3])
  387:         tgt = lag.lagval3d(x1, x2, x3, c)
  388:         res = np.dot(van, c.flat)
  389:         assert_almost_equal(res, tgt)
  390: 
  391:         # check shape
  392:         van = lag.lagvander3d([x1], [x2], [x3], [1, 2, 3])
  393:         assert_(van.shape == (1, 5, 24))
  394: 
  395: 
  396: class TestFitting:
  397: 
  398:     def test_lagfit(self):
  399:         def f(x):
  400:             return x * (x - 1) * (x - 2)
  401: 
  402:         # Test exceptions
  403:         assert_raises(ValueError, lag.lagfit, [1], [1], -1)
  404:         assert_raises(TypeError, lag.lagfit, [[1]], [1], 0)
  405:         assert_raises(TypeError, lag.lagfit, [], [1], 0)
  406:         assert_raises(TypeError, lag.lagfit, [1], [[[1]]], 0)
  407:         assert_raises(TypeError, lag.lagfit, [1, 2], [1], 0)
  408:         assert_raises(TypeError, lag.lagfit, [1], [1, 2], 0)
  409:         assert_raises(TypeError, lag.lagfit, [1], [1], 0, w=[[1]])
  410:         assert_raises(TypeError, lag.lagfit, [1], [1], 0, w=[1, 1])
  411:         assert_raises(ValueError, lag.lagfit, [1], [1], [-1,])
  412:         assert_raises(ValueError, lag.lagfit, [1], [1], [2, -1, 6])
  413:         assert_raises(TypeError, lag.lagfit, [1], [1], [])
  414: 
  415:         # Test fit
  416:         x = np.linspace(0, 2)
  417:         y = f(x)
  418:         #
  419:         coef3 = lag.lagfit(x, y, 3)
  420:         assert_equal(len(coef3), 4)
  421:         assert_almost_equal(lag.lagval(x, coef3), y)
  422:         coef3 = lag.lagfit(x, y, [0, 1, 2, 3])
  423:         assert_equal(len(coef3), 4)
  424:         assert_almost_equal(lag.lagval(x, coef3), y)
  425:         #
  426:         coef4 = lag.lagfit(x, y, 4)
  427:         assert_equal(len(coef4), 5)
  428:         assert_almost_equal(lag.lagval(x, coef4), y)
  429:         coef4 = lag.lagfit(x, y, [0, 1, 2, 3, 4])
  430:         assert_equal(len(coef4), 5)
  431:         assert_almost_equal(lag.lagval(x, coef4), y)
  432:         #
  433:         coef2d = lag.lagfit(x, np.array([y, y]).T, 3)
  434:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  435:         coef2d = lag.lagfit(x, np.array([y, y]).T, [0, 1, 2, 3])
  436:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  437:         # test weighting
  438:         w = np.zeros_like(x)
  439:         yw = y.copy()
  440:         w[1::2] = 1
  441:         y[0::2] = 0
  442:         wcoef3 = lag.lagfit(x, yw, 3, w=w)
  443:         assert_almost_equal(wcoef3, coef3)
  444:         wcoef3 = lag.lagfit(x, yw, [0, 1, 2, 3], w=w)
  445:         assert_almost_equal(wcoef3, coef3)
  446:         #
  447:         wcoef2d = lag.lagfit(x, np.array([yw, yw]).T, 3, w=w)
  448:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  449:         wcoef2d = lag.lagfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
  450:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  451:         # test scaling with complex values x points whose square
  452:         # is zero when summed.
  453:         x = [1, 1j, -1, -1j]
  454:         assert_almost_equal(lag.lagfit(x, x, 1), [1, -1])
  455:         assert_almost_equal(lag.lagfit(x, x, [0, 1]), [1, -1])
  456: 
  457: 
  458: class TestCompanion:
  459: 
  460:     def test_raises(self):
  461:         assert_raises(ValueError, lag.lagcompanion, [])
  462:         assert_raises(ValueError, lag.lagcompanion, [1])
  463: 
  464:     def test_dimensions(self):
  465:         for i in range(1, 5):
  466:             coef = [0] * i + [1]
  467:             assert_(lag.lagcompanion(coef).shape == (i, i))
  468: 
  469:     def test_linear_root(self):
  470:         assert_(lag.lagcompanion([1, 2])[0, 0] == 1.5)
  471: 
  472: 
  473: class TestGauss:
  474: 
  475:     def test_100(self):
  476:         x, w = lag.laggauss(100)
  477: 
  478:         # test orthogonality. Note that the results need to be normalized,
  479:         # otherwise the huge values that can arise from fast growing
  480:         # functions like Laguerre can be very confusing.
  481:         v = lag.lagvander(x, 99)
  482:         vv = np.dot(v.T * w, v)
  483:         vd = 1 / np.sqrt(vv.diagonal())
  484:         vv = vd[:, None] * vv * vd
  485:         assert_almost_equal(vv, np.eye(100))
  486: 
  487:         # check that the integral of 1 is correct
  488:         tgt = 1.0
  489:         assert_almost_equal(w.sum(), tgt)
  490: 
  491: 
  492: class TestMisc:
  493: 
  494:     def test_lagfromroots(self):
  495:         res = lag.lagfromroots([])
  496:         assert_almost_equal(trim(res), [1])
  497:         for i in range(1, 5):
  498:             roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
  499:             pol = lag.lagfromroots(roots)
  500:             res = lag.lagval(roots, pol)
  501:             tgt = 0
  502:             assert_(len(pol) == i + 1)
  503:             assert_almost_equal(lag.lag2poly(pol)[-1], 1)
  504:             assert_almost_equal(res, tgt)
  505: 
  506:     def test_lagroots(self):
  507:         assert_almost_equal(lag.lagroots([1]), [])
  508:         assert_almost_equal(lag.lagroots([0, 1]), [1])
  509:         for i in range(2, 5):
  510:             tgt = np.linspace(0, 3, i)
  511:             res = lag.lagroots(lag.lagfromroots(tgt))
  512:             assert_almost_equal(trim(res), trim(tgt))
  513: 
  514:     def test_lagtrim(self):
  515:         coef = [2, -1, 1, 0]
  516: 
  517:         # Test exceptions
  518:         assert_raises(ValueError, lag.lagtrim, coef, -1)
  519: 
  520:         # Test results
  521:         assert_equal(lag.lagtrim(coef), coef[:-1])
  522:         assert_equal(lag.lagtrim(coef, 1), coef[:-3])
  523:         assert_equal(lag.lagtrim(coef, 2), [0])
  524: 
  525:     def test_lagline(self):
  526:         assert_equal(lag.lagline(3, 4), [7, -4])
  527: 
  528:     def test_lag2poly(self):
  529:         for i in range(7):
  530:             assert_almost_equal(lag.lag2poly([0] * i + [1]), Llist[i])
  531: 
  532:     def test_poly2lag(self):
  533:         for i in range(7):
  534:             assert_almost_equal(lag.poly2lag(Llist[i]), [0] * i + [1])
  535: 
  536:     def test_weight(self):
  537:         x = np.linspace(0, 10, 11)
  538:         tgt = np.exp(-x)
  539:         res = lag.lagweight(x)
  540:         assert_almost_equal(res, tgt)
