    1: """Tests for polyutils module.
    2: 
    3: """
    4: import numpy as np
    5: import numpy.polynomial.polyutils as pu
    6: from numpy.testing import (
    7:     assert_,
    8:     assert_almost_equal,
    9:     assert_equal,
   10:     assert_raises,
   11: )
   12: 
   13: 
   14: class TestMisc:
   15: 
   16:     def test_trimseq(self):
   17:         tgt = [1]
   18:         for num_trailing_zeros in range(5):
   19:             res = pu.trimseq([1] + [0] * num_trailing_zeros)
   20:             assert_equal(res, tgt)
   21: 
   22:     def test_trimseq_empty_input(self):
   23:         for empty_seq in [[], np.array([], dtype=np.int32)]:
   24:             assert_equal(pu.trimseq(empty_seq), empty_seq)
   25: 
   26:     def test_as_series(self):
   27:         # check exceptions
   28:         assert_raises(ValueError, pu.as_series, [[]])
   29:         assert_raises(ValueError, pu.as_series, [[[1, 2]]])
   30:         assert_raises(ValueError, pu.as_series, [[1], ['a']])
   31:         # check common types
   32:         types = ['i', 'd', 'O']
   33:         for i in range(len(types)):
   34:             for j in range(i):
   35:                 ci = np.ones(1, types[i])
   36:                 cj = np.ones(1, types[j])
   37:                 [resi, resj] = pu.as_series([ci, cj])
   38:                 assert_(resi.dtype.char == resj.dtype.char)
   39:                 assert_(resj.dtype.char == types[i])
   40: 
   41:     def test_trimcoef(self):
   42:         coef = [2, -1, 1, 0]
   43:         # Test exceptions
   44:         assert_raises(ValueError, pu.trimcoef, coef, -1)
   45:         # Test results
   46:         assert_equal(pu.trimcoef(coef), coef[:-1])
   47:         assert_equal(pu.trimcoef(coef, 1), coef[:-3])
   48:         assert_equal(pu.trimcoef(coef, 2), [0])
   49: 
   50:     def test_vander_nd_exception(self):
   51:         # n_dims != len(points)
   52:         assert_raises(ValueError, pu._vander_nd, (), (1, 2, 3), [90])
   53:         # n_dims != len(degrees)
   54:         assert_raises(ValueError, pu._vander_nd, (), (), [90.65])
   55:         # n_dims == 0
   56:         assert_raises(ValueError, pu._vander_nd, (), (), [])
   57: 
   58:     def test_div_zerodiv(self):
   59:         # c2[-1] == 0
   60:         assert_raises(ZeroDivisionError, pu._div, pu._div, (1, 2, 3), [0])
   61: 
   62:     def test_pow_too_large(self):
   63:         # power > maxpower
   64:         assert_raises(ValueError, pu._pow, (), [1, 2, 3], 5, 4)
   65: 
   66: class TestDomain:
   67: 
   68:     def test_getdomain(self):
   69:         # test for real values
   70:         x = [1, 10, 3, -1]
   71:         tgt = [-1, 10]
   72:         res = pu.getdomain(x)
   73:         assert_almost_equal(res, tgt)
   74: 
   75:         # test for complex values
   76:         x = [1 + 1j, 1 - 1j, 0, 2]
   77:         tgt = [-1j, 2 + 1j]
   78:         res = pu.getdomain(x)
   79:         assert_almost_equal(res, tgt)
   80: 
   81:     def test_mapdomain(self):
   82:         # test for real values
   83:         dom1 = [0, 4]
   84:         dom2 = [1, 3]
   85:         tgt = dom2
   86:         res = pu.mapdomain(dom1, dom1, dom2)
   87:         assert_almost_equal(res, tgt)
   88: 
   89:         # test for complex values
   90:         dom1 = [0 - 1j, 2 + 1j]
   91:         dom2 = [-2, 2]
   92:         tgt = dom2
   93:         x = dom1
   94:         res = pu.mapdomain(x, dom1, dom2)
   95:         assert_almost_equal(res, tgt)
   96: 
   97:         # test for multidimensional arrays
   98:         dom1 = [0, 4]
   99:         dom2 = [1, 3]
  100:         tgt = np.array([dom2, dom2])
  101:         x = np.array([dom1, dom1])
  102:         res = pu.mapdomain(x, dom1, dom2)
  103:         assert_almost_equal(res, tgt)
  104: 
  105:         # test that subtypes are preserved.
  106:         class MyNDArray(np.ndarray):
  107:             pass
  108: 
  109:         dom1 = [0, 4]
  110:         dom2 = [1, 3]
  111:         x = np.array([dom1, dom1]).view(MyNDArray)
  112:         res = pu.mapdomain(x, dom1, dom2)
  113:         assert_(isinstance(res, MyNDArray))
  114: 
  115:     def test_mapparms(self):
  116:         # test for real values
  117:         dom1 = [0, 4]
  118:         dom2 = [1, 3]
  119:         tgt = [1, .5]
  120:         res = pu. mapparms(dom1, dom2)
  121:         assert_almost_equal(res, tgt)
  122: 
  123:         # test for complex values
  124:         dom1 = [0 - 1j, 2 + 1j]
  125:         dom2 = [-2, 2]
  126:         tgt = [-1 + 1j, 1 - 1j]
  127:         res = pu.mapparms(dom1, dom2)
  128:         assert_almost_equal(res, tgt)
