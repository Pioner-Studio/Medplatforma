    1: """Tests for chebyshev module.
    2: 
    3: """
    4: from functools import reduce
    5: 
    6: import numpy as np
    7: import numpy.polynomial.chebyshev as cheb
    8: from numpy.polynomial.polynomial import polyval
    9: from numpy.testing import (
   10:     assert_,
   11:     assert_almost_equal,
   12:     assert_equal,
   13:     assert_raises,
   14: )
   15: 
   16: 
   17: def trim(x):
   18:     return cheb.chebtrim(x, tol=1e-6)
   19: 
   20: 
   21: T0 = [1]
   22: T1 = [0, 1]
   23: T2 = [-1, 0, 2]
   24: T3 = [0, -3, 0, 4]
   25: T4 = [1, 0, -8, 0, 8]
   26: T5 = [0, 5, 0, -20, 0, 16]
   27: T6 = [-1, 0, 18, 0, -48, 0, 32]
   28: T7 = [0, -7, 0, 56, 0, -112, 0, 64]
   29: T8 = [1, 0, -32, 0, 160, 0, -256, 0, 128]
   30: T9 = [0, 9, 0, -120, 0, 432, 0, -576, 0, 256]
   31: 
   32: Tlist = [T0, T1, T2, T3, T4, T5, T6, T7, T8, T9]
   33: 
   34: 
   35: class TestPrivate:
   36: 
   37:     def test__cseries_to_zseries(self):
   38:         for i in range(5):
   39:             inp = np.array([2] + [1] * i, np.double)
   40:             tgt = np.array([.5] * i + [2] + [.5] * i, np.double)
   41:             res = cheb._cseries_to_zseries(inp)
   42:             assert_equal(res, tgt)
   43: 
   44:     def test__zseries_to_cseries(self):
   45:         for i in range(5):
   46:             inp = np.array([.5] * i + [2] + [.5] * i, np.double)
   47:             tgt = np.array([2] + [1] * i, np.double)
   48:             res = cheb._zseries_to_cseries(inp)
   49:             assert_equal(res, tgt)
   50: 
   51: 
   52: class TestConstants:
   53: 
   54:     def test_chebdomain(self):
   55:         assert_equal(cheb.chebdomain, [-1, 1])
   56: 
   57:     def test_chebzero(self):
   58:         assert_equal(cheb.chebzero, [0])
   59: 
   60:     def test_chebone(self):
   61:         assert_equal(cheb.chebone, [1])
   62: 
   63:     def test_chebx(self):
   64:         assert_equal(cheb.chebx, [0, 1])
   65: 
   66: 
   67: class TestArithmetic:
   68: 
   69:     def test_chebadd(self):
   70:         for i in range(5):
   71:             for j in range(5):
   72:                 msg = f"At i={i}, j={j}"
   73:                 tgt = np.zeros(max(i, j) + 1)
   74:                 tgt[i] += 1
   75:                 tgt[j] += 1
   76:                 res = cheb.chebadd([0] * i + [1], [0] * j + [1])
   77:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   78: 
   79:     def test_chebsub(self):
   80:         for i in range(5):
   81:             for j in range(5):
   82:                 msg = f"At i={i}, j={j}"
   83:                 tgt = np.zeros(max(i, j) + 1)
   84:                 tgt[i] += 1
   85:                 tgt[j] -= 1
   86:                 res = cheb.chebsub([0] * i + [1], [0] * j + [1])
   87:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
   88: 
   89:     def test_chebmulx(self):
   90:         assert_equal(cheb.chebmulx([0]), [0])
   91:         assert_equal(cheb.chebmulx([1]), [0, 1])
   92:         for i in range(1, 5):
   93:             ser = [0] * i + [1]
   94:             tgt = [0] * (i - 1) + [.5, 0, .5]
   95:             assert_equal(cheb.chebmulx(ser), tgt)
   96: 
   97:     def test_chebmul(self):
   98:         for i in range(5):
   99:             for j in range(5):
  100:                 msg = f"At i={i}, j={j}"
  101:                 tgt = np.zeros(i + j + 1)
  102:                 tgt[i + j] += .5
  103:                 tgt[abs(i - j)] += .5
  104:                 res = cheb.chebmul([0] * i + [1], [0] * j + [1])
  105:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  106: 
  107:     def test_chebdiv(self):
  108:         for i in range(5):
  109:             for j in range(5):
  110:                 msg = f"At i={i}, j={j}"
  111:                 ci = [0] * i + [1]
  112:                 cj = [0] * j + [1]
  113:                 tgt = cheb.chebadd(ci, cj)
  114:                 quo, rem = cheb.chebdiv(tgt, ci)
  115:                 res = cheb.chebadd(cheb.chebmul(quo, ci), rem)
  116:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  117: 
  118:     def test_chebpow(self):
  119:         for i in range(5):
  120:             for j in range(5):
  121:                 msg = f"At i={i}, j={j}"
  122:                 c = np.arange(i + 1)
  123:                 tgt = reduce(cheb.chebmul, [c] * j, np.array([1]))
  124:                 res = cheb.chebpow(c, j)
  125:                 assert_equal(trim(res), trim(tgt), err_msg=msg)
  126: 
  127: 
  128: class TestEvaluation:
  129:     # coefficients of 1 + 2*x + 3*x**2
  130:     c1d = np.array([2.5, 2., 1.5])
  131:     c2d = np.einsum('i,j->ij', c1d, c1d)
  132:     c3d = np.einsum('i,j,k->ijk', c1d, c1d, c1d)
  133: 
  134:     # some random values in [-1, 1)
  135:     x = np.random.random((3, 5)) * 2 - 1
  136:     y = polyval(x, [1., 2., 3.])
  137: 
  138:     def test_chebval(self):
  139:         # check empty input
  140:         assert_equal(cheb.chebval([], [1]).size, 0)
  141: 
  142:         # check normal input)
  143:         x = np.linspace(-1, 1)
  144:         y = [polyval(x, c) for c in Tlist]
  145:         for i in range(10):
  146:             msg = f"At i={i}"
  147:             tgt = y[i]
  148:             res = cheb.chebval(x, [0] * i + [1])
  149:             assert_almost_equal(res, tgt, err_msg=msg)
  150: 
  151:         # check that shape is preserved
  152:         for i in range(3):
  153:             dims = [2] * i
  154:             x = np.zeros(dims)
  155:             assert_equal(cheb.chebval(x, [1]).shape, dims)
  156:             assert_equal(cheb.chebval(x, [1, 0]).shape, dims)
  157:             assert_equal(cheb.chebval(x, [1, 0, 0]).shape, dims)
  158: 
  159:     def test_chebval2d(self):
  160:         x1, x2, x3 = self.x
  161:         y1, y2, y3 = self.y
  162: 
  163:         # test exceptions
  164:         assert_raises(ValueError, cheb.chebval2d, x1, x2[:2], self.c2d)
  165: 
  166:         # test values
  167:         tgt = y1 * y2
  168:         res = cheb.chebval2d(x1, x2, self.c2d)
  169:         assert_almost_equal(res, tgt)
  170: 
  171:         # test shape
  172:         z = np.ones((2, 3))
  173:         res = cheb.chebval2d(z, z, self.c2d)
  174:         assert_(res.shape == (2, 3))
  175: 
  176:     def test_chebval3d(self):
  177:         x1, x2, x3 = self.x
  178:         y1, y2, y3 = self.y
  179: 
  180:         # test exceptions
  181:         assert_raises(ValueError, cheb.chebval3d, x1, x2, x3[:2], self.c3d)
  182: 
  183:         # test values
  184:         tgt = y1 * y2 * y3
  185:         res = cheb.chebval3d(x1, x2, x3, self.c3d)
  186:         assert_almost_equal(res, tgt)
  187: 
  188:         # test shape
  189:         z = np.ones((2, 3))
  190:         res = cheb.chebval3d(z, z, z, self.c3d)
  191:         assert_(res.shape == (2, 3))
  192: 
  193:     def test_chebgrid2d(self):
  194:         x1, x2, x3 = self.x
  195:         y1, y2, y3 = self.y
  196: 
  197:         # test values
  198:         tgt = np.einsum('i,j->ij', y1, y2)
  199:         res = cheb.chebgrid2d(x1, x2, self.c2d)
  200:         assert_almost_equal(res, tgt)
  201: 
  202:         # test shape
  203:         z = np.ones((2, 3))
  204:         res = cheb.chebgrid2d(z, z, self.c2d)
  205:         assert_(res.shape == (2, 3) * 2)
  206: 
  207:     def test_chebgrid3d(self):
  208:         x1, x2, x3 = self.x
  209:         y1, y2, y3 = self.y
  210: 
  211:         # test values
  212:         tgt = np.einsum('i,j,k->ijk', y1, y2, y3)
  213:         res = cheb.chebgrid3d(x1, x2, x3, self.c3d)
  214:         assert_almost_equal(res, tgt)
  215: 
  216:         # test shape
  217:         z = np.ones((2, 3))
  218:         res = cheb.chebgrid3d(z, z, z, self.c3d)
  219:         assert_(res.shape == (2, 3) * 3)
  220: 
  221: 
  222: class TestIntegral:
  223: 
  224:     def test_chebint(self):
  225:         # check exceptions
  226:         assert_raises(TypeError, cheb.chebint, [0], .5)
  227:         assert_raises(ValueError, cheb.chebint, [0], -1)
  228:         assert_raises(ValueError, cheb.chebint, [0], 1, [0, 0])
  229:         assert_raises(ValueError, cheb.chebint, [0], lbnd=[0])
  230:         assert_raises(ValueError, cheb.chebint, [0], scl=[0])
  231:         assert_raises(TypeError, cheb.chebint, [0], axis=.5)
  232: 
  233:         # test integration of zero polynomial
  234:         for i in range(2, 5):
  235:             k = [0] * (i - 2) + [1]
  236:             res = cheb.chebint([0], m=i, k=k)
  237:             assert_almost_equal(res, [0, 1])
  238: 
  239:         # check single integration with integration constant
  240:         for i in range(5):
  241:             scl = i + 1
  242:             pol = [0] * i + [1]
  243:             tgt = [i] + [0] * i + [1 / scl]
  244:             chebpol = cheb.poly2cheb(pol)
  245:             chebint = cheb.chebint(chebpol, m=1, k=[i])
  246:             res = cheb.cheb2poly(chebint)
  247:             assert_almost_equal(trim(res), trim(tgt))
  248: 
  249:         # check single integration with integration constant and lbnd
  250:         for i in range(5):
  251:             scl = i + 1
  252:             pol = [0] * i + [1]
  253:             chebpol = cheb.poly2cheb(pol)
  254:             chebint = cheb.chebint(chebpol, m=1, k=[i], lbnd=-1)
  255:             assert_almost_equal(cheb.chebval(-1, chebint), i)
  256: 
  257:         # check single integration with integration constant and scaling
  258:         for i in range(5):
  259:             scl = i + 1
  260:             pol = [0] * i + [1]
  261:             tgt = [i] + [0] * i + [2 / scl]
  262:             chebpol = cheb.poly2cheb(pol)
  263:             chebint = cheb.chebint(chebpol, m=1, k=[i], scl=2)
  264:             res = cheb.cheb2poly(chebint)
  265:             assert_almost_equal(trim(res), trim(tgt))
  266: 
  267:         # check multiple integrations with default k
  268:         for i in range(5):
  269:             for j in range(2, 5):
  270:                 pol = [0] * i + [1]
  271:                 tgt = pol[:]
  272:                 for k in range(j):
  273:                     tgt = cheb.chebint(tgt, m=1)
  274:                 res = cheb.chebint(pol, m=j)
  275:                 assert_almost_equal(trim(res), trim(tgt))
  276: 
  277:         # check multiple integrations with defined k
  278:         for i in range(5):
  279:             for j in range(2, 5):
  280:                 pol = [0] * i + [1]
  281:                 tgt = pol[:]
  282:                 for k in range(j):
  283:                     tgt = cheb.chebint(tgt, m=1, k=[k])
  284:                 res = cheb.chebint(pol, m=j, k=list(range(j)))
  285:                 assert_almost_equal(trim(res), trim(tgt))
  286: 
  287:         # check multiple integrations with lbnd
  288:         for i in range(5):
  289:             for j in range(2, 5):
  290:                 pol = [0] * i + [1]
  291:                 tgt = pol[:]
  292:                 for k in range(j):
  293:                     tgt = cheb.chebint(tgt, m=1, k=[k], lbnd=-1)
  294:                 res = cheb.chebint(pol, m=j, k=list(range(j)), lbnd=-1)
  295:                 assert_almost_equal(trim(res), trim(tgt))
  296: 
  297:         # check multiple integrations with scaling
  298:         for i in range(5):
  299:             for j in range(2, 5):
  300:                 pol = [0] * i + [1]
  301:                 tgt = pol[:]
  302:                 for k in range(j):
  303:                     tgt = cheb.chebint(tgt, m=1, k=[k], scl=2)
  304:                 res = cheb.chebint(pol, m=j, k=list(range(j)), scl=2)
  305:                 assert_almost_equal(trim(res), trim(tgt))
  306: 
  307:     def test_chebint_axis(self):
  308:         # check that axis keyword works
  309:         c2d = np.random.random((3, 4))
  310: 
  311:         tgt = np.vstack([cheb.chebint(c) for c in c2d.T]).T
  312:         res = cheb.chebint(c2d, axis=0)
  313:         assert_almost_equal(res, tgt)
  314: 
  315:         tgt = np.vstack([cheb.chebint(c) for c in c2d])
  316:         res = cheb.chebint(c2d, axis=1)
  317:         assert_almost_equal(res, tgt)
  318: 
  319:         tgt = np.vstack([cheb.chebint(c, k=3) for c in c2d])
  320:         res = cheb.chebint(c2d, k=3, axis=1)
  321:         assert_almost_equal(res, tgt)
  322: 
  323: 
  324: class TestDerivative:
  325: 
  326:     def test_chebder(self):
  327:         # check exceptions
  328:         assert_raises(TypeError, cheb.chebder, [0], .5)
  329:         assert_raises(ValueError, cheb.chebder, [0], -1)
  330: 
  331:         # check that zeroth derivative does nothing
  332:         for i in range(5):
  333:             tgt = [0] * i + [1]
  334:             res = cheb.chebder(tgt, m=0)
  335:             assert_equal(trim(res), trim(tgt))
  336: 
  337:         # check that derivation is the inverse of integration
  338:         for i in range(5):
  339:             for j in range(2, 5):
  340:                 tgt = [0] * i + [1]
  341:                 res = cheb.chebder(cheb.chebint(tgt, m=j), m=j)
  342:                 assert_almost_equal(trim(res), trim(tgt))
  343: 
  344:         # check derivation with scaling
  345:         for i in range(5):
  346:             for j in range(2, 5):
  347:                 tgt = [0] * i + [1]
  348:                 res = cheb.chebder(cheb.chebint(tgt, m=j, scl=2), m=j, scl=.5)
  349:                 assert_almost_equal(trim(res), trim(tgt))
  350: 
  351:     def test_chebder_axis(self):
  352:         # check that axis keyword works
  353:         c2d = np.random.random((3, 4))
  354: 
  355:         tgt = np.vstack([cheb.chebder(c) for c in c2d.T]).T
  356:         res = cheb.chebder(c2d, axis=0)
  357:         assert_almost_equal(res, tgt)
  358: 
  359:         tgt = np.vstack([cheb.chebder(c) for c in c2d])
  360:         res = cheb.chebder(c2d, axis=1)
  361:         assert_almost_equal(res, tgt)
  362: 
  363: 
  364: class TestVander:
  365:     # some random values in [-1, 1)
  366:     x = np.random.random((3, 5)) * 2 - 1
  367: 
  368:     def test_chebvander(self):
  369:         # check for 1d x
  370:         x = np.arange(3)
  371:         v = cheb.chebvander(x, 3)
  372:         assert_(v.shape == (3, 4))
  373:         for i in range(4):
  374:             coef = [0] * i + [1]
  375:             assert_almost_equal(v[..., i], cheb.chebval(x, coef))
  376: 
  377:         # check for 2d x
  378:         x = np.array([[1, 2], [3, 4], [5, 6]])
  379:         v = cheb.chebvander(x, 3)
  380:         assert_(v.shape == (3, 2, 4))
  381:         for i in range(4):
  382:             coef = [0] * i + [1]
  383:             assert_almost_equal(v[..., i], cheb.chebval(x, coef))
  384: 
  385:     def test_chebvander2d(self):
  386:         # also tests chebval2d for non-square coefficient array
  387:         x1, x2, x3 = self.x
  388:         c = np.random.random((2, 3))
  389:         van = cheb.chebvander2d(x1, x2, [1, 2])
  390:         tgt = cheb.chebval2d(x1, x2, c)
  391:         res = np.dot(van, c.flat)
  392:         assert_almost_equal(res, tgt)
  393: 
  394:         # check shape
  395:         van = cheb.chebvander2d([x1], [x2], [1, 2])
  396:         assert_(van.shape == (1, 5, 6))
  397: 
  398:     def test_chebvander3d(self):
  399:         # also tests chebval3d for non-square coefficient array
  400:         x1, x2, x3 = self.x
  401:         c = np.random.random((2, 3, 4))
  402:         van = cheb.chebvander3d(x1, x2, x3, [1, 2, 3])
  403:         tgt = cheb.chebval3d(x1, x2, x3, c)
  404:         res = np.dot(van, c.flat)
  405:         assert_almost_equal(res, tgt)
  406: 
  407:         # check shape
  408:         van = cheb.chebvander3d([x1], [x2], [x3], [1, 2, 3])
  409:         assert_(van.shape == (1, 5, 24))
  410: 
  411: 
  412: class TestFitting:
  413: 
  414:     def test_chebfit(self):
  415:         def f(x):
  416:             return x * (x - 1) * (x - 2)
  417: 
  418:         def f2(x):
  419:             return x**4 + x**2 + 1
  420: 
  421:         # Test exceptions
  422:         assert_raises(ValueError, cheb.chebfit, [1], [1], -1)
  423:         assert_raises(TypeError, cheb.chebfit, [[1]], [1], 0)
  424:         assert_raises(TypeError, cheb.chebfit, [], [1], 0)
  425:         assert_raises(TypeError, cheb.chebfit, [1], [[[1]]], 0)
  426:         assert_raises(TypeError, cheb.chebfit, [1, 2], [1], 0)
  427:         assert_raises(TypeError, cheb.chebfit, [1], [1, 2], 0)
  428:         assert_raises(TypeError, cheb.chebfit, [1], [1], 0, w=[[1]])
  429:         assert_raises(TypeError, cheb.chebfit, [1], [1], 0, w=[1, 1])
  430:         assert_raises(ValueError, cheb.chebfit, [1], [1], [-1,])
  431:         assert_raises(ValueError, cheb.chebfit, [1], [1], [2, -1, 6])
  432:         assert_raises(TypeError, cheb.chebfit, [1], [1], [])
  433: 
  434:         # Test fit
  435:         x = np.linspace(0, 2)
  436:         y = f(x)
  437:         #
  438:         coef3 = cheb.chebfit(x, y, 3)
  439:         assert_equal(len(coef3), 4)
  440:         assert_almost_equal(cheb.chebval(x, coef3), y)
  441:         coef3 = cheb.chebfit(x, y, [0, 1, 2, 3])
  442:         assert_equal(len(coef3), 4)
  443:         assert_almost_equal(cheb.chebval(x, coef3), y)
  444:         #
  445:         coef4 = cheb.chebfit(x, y, 4)
  446:         assert_equal(len(coef4), 5)
  447:         assert_almost_equal(cheb.chebval(x, coef4), y)
  448:         coef4 = cheb.chebfit(x, y, [0, 1, 2, 3, 4])
  449:         assert_equal(len(coef4), 5)
  450:         assert_almost_equal(cheb.chebval(x, coef4), y)
  451:         # check things still work if deg is not in strict increasing
  452:         coef4 = cheb.chebfit(x, y, [2, 3, 4, 1, 0])
  453:         assert_equal(len(coef4), 5)
  454:         assert_almost_equal(cheb.chebval(x, coef4), y)
  455:         #
  456:         coef2d = cheb.chebfit(x, np.array([y, y]).T, 3)
  457:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  458:         coef2d = cheb.chebfit(x, np.array([y, y]).T, [0, 1, 2, 3])
  459:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)
  460:         # test weighting
  461:         w = np.zeros_like(x)
  462:         yw = y.copy()
  463:         w[1::2] = 1
  464:         y[0::2] = 0
  465:         wcoef3 = cheb.chebfit(x, yw, 3, w=w)
  466:         assert_almost_equal(wcoef3, coef3)
  467:         wcoef3 = cheb.chebfit(x, yw, [0, 1, 2, 3], w=w)
  468:         assert_almost_equal(wcoef3, coef3)
  469:         #
  470:         wcoef2d = cheb.chebfit(x, np.array([yw, yw]).T, 3, w=w)
  471:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  472:         wcoef2d = cheb.chebfit(x, np.array([yw, yw]).T, [0, 1, 2, 3], w=w)
  473:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)
  474:         # test scaling with complex values x points whose square
  475:         # is zero when summed.
  476:         x = [1, 1j, -1, -1j]
  477:         assert_almost_equal(cheb.chebfit(x, x, 1), [0, 1])
  478:         assert_almost_equal(cheb.chebfit(x, x, [0, 1]), [0, 1])
  479:         # test fitting only even polynomials
  480:         x = np.linspace(-1, 1)
  481:         y = f2(x)
  482:         coef1 = cheb.chebfit(x, y, 4)
  483:         assert_almost_equal(cheb.chebval(x, coef1), y)
  484:         coef2 = cheb.chebfit(x, y, [0, 2, 4])
  485:         assert_almost_equal(cheb.chebval(x, coef2), y)
  486:         assert_almost_equal(coef1, coef2)
  487: 
  488: 
  489: class TestInterpolate:
  490: 
  491:     def f(self, x):
  492:         return x * (x - 1) * (x - 2)
  493: 
  494:     def test_raises(self):
  495:         assert_raises(ValueError, cheb.chebinterpolate, self.f, -1)
  496:         assert_raises(TypeError, cheb.chebinterpolate, self.f, 10.)
  497: 
  498:     def test_dimensions(self):
  499:         for deg in range(1, 5):
  500:             assert_(cheb.chebinterpolate(self.f, deg).shape == (deg + 1,))
  501: 
  502:     def test_approximation(self):
  503: 
  504:         def powx(x, p):
  505:             return x**p
  506: 
  507:         x = np.linspace(-1, 1, 10)
  508:         for deg in range(10):
  509:             for p in range(deg + 1):
  510:                 c = cheb.chebinterpolate(powx, deg, (p,))
  511:                 assert_almost_equal(cheb.chebval(x, c), powx(x, p), decimal=12)
  512: 
  513: 
  514: class TestCompanion:
  515: 
  516:     def test_raises(self):
  517:         assert_raises(ValueError, cheb.chebcompanion, [])
  518:         assert_raises(ValueError, cheb.chebcompanion, [1])
  519: 
  520:     def test_dimensions(self):
  521:         for i in range(1, 5):
  522:             coef = [0] * i + [1]
  523:             assert_(cheb.chebcompanion(coef).shape == (i, i))
  524: 
  525:     def test_linear_root(self):
  526:         assert_(cheb.chebcompanion([1, 2])[0, 0] == -.5)
  527: 
  528: 
  529: class TestGauss:
  530: 
  531:     def test_100(self):
  532:         x, w = cheb.chebgauss(100)
  533: 
  534:         # test orthogonality. Note that the results need to be normalized,
  535:         # otherwise the huge values that can arise from fast growing
  536:         # functions like Laguerre can be very confusing.
  537:         v = cheb.chebvander(x, 99)
  538:         vv = np.dot(v.T * w, v)
  539:         vd = 1 / np.sqrt(vv.diagonal())
  540:         vv = vd[:, None] * vv * vd
  541:         assert_almost_equal(vv, np.eye(100))
  542: 
  543:         # check that the integral of 1 is correct
  544:         tgt = np.pi
  545:         assert_almost_equal(w.sum(), tgt)
  546: 
  547: 
  548: class TestMisc:
  549: 
  550:     def test_chebfromroots(self):
  551:         res = cheb.chebfromroots([])
  552:         assert_almost_equal(trim(res), [1])
  553:         for i in range(1, 5):
  554:             roots = np.cos(np.linspace(-np.pi, 0, 2 * i + 1)[1::2])
  555:             tgt = [0] * i + [1]
  556:             res = cheb.chebfromroots(roots) * 2**(i - 1)
  557:             assert_almost_equal(trim(res), trim(tgt))
  558: 
  559:     def test_chebroots(self):
  560:         assert_almost_equal(cheb.chebroots([1]), [])
  561:         assert_almost_equal(cheb.chebroots([1, 2]), [-.5])
  562:         for i in range(2, 5):
  563:             tgt = np.linspace(-1, 1, i)
  564:             res = cheb.chebroots(cheb.chebfromroots(tgt))
  565:             assert_almost_equal(trim(res), trim(tgt))
  566: 
  567:     def test_chebtrim(self):
  568:         coef = [2, -1, 1, 0]
  569: 
  570:         # Test exceptions
  571:         assert_raises(ValueError, cheb.chebtrim, coef, -1)
  572: 
  573:         # Test results
  574:         assert_equal(cheb.chebtrim(coef), coef[:-1])
  575:         assert_equal(cheb.chebtrim(coef, 1), coef[:-3])
  576:         assert_equal(cheb.chebtrim(coef, 2), [0])
  577: 
  578:     def test_chebline(self):
  579:         assert_equal(cheb.chebline(3, 4), [3, 4])
  580: 
  581:     def test_cheb2poly(self):
  582:         for i in range(10):
  583:             assert_almost_equal(cheb.cheb2poly([0] * i + [1]), Tlist[i])
  584: 
  585:     def test_poly2cheb(self):
  586:         for i in range(10):
  587:             assert_almost_equal(cheb.poly2cheb(Tlist[i]), [0] * i + [1])
  588: 
  589:     def test_weight(self):
  590:         x = np.linspace(-1, 1, 11)[1:-1]
  591:         tgt = 1. / (np.sqrt(1 + x) * np.sqrt(1 - x))
  592:         res = cheb.chebweight(x)
  593:         assert_almost_equal(res, tgt)
  594: 
  595:     def test_chebpts1(self):
  596:         # test exceptions
  597:         assert_raises(ValueError, cheb.chebpts1, 1.5)
  598:         assert_raises(ValueError, cheb.chebpts1, 0)
  599: 
  600:         # test points
  601:         tgt = [0]
  602:         assert_almost_equal(cheb.chebpts1(1), tgt)
  603:         tgt = [-0.70710678118654746, 0.70710678118654746]
  604:         assert_almost_equal(cheb.chebpts1(2), tgt)
  605:         tgt = [-0.86602540378443871, 0, 0.86602540378443871]
  606:         assert_almost_equal(cheb.chebpts1(3), tgt)
  607:         tgt = [-0.9238795325, -0.3826834323, 0.3826834323, 0.9238795325]
  608:         assert_almost_equal(cheb.chebpts1(4), tgt)
  609: 
  610:     def test_chebpts2(self):
  611:         # test exceptions
  612:         assert_raises(ValueError, cheb.chebpts2, 1.5)
  613:         assert_raises(ValueError, cheb.chebpts2, 1)
  614: 
  615:         # test points
  616:         tgt = [-1, 1]
  617:         assert_almost_equal(cheb.chebpts2(2), tgt)
  618:         tgt = [-1, 0, 1]
  619:         assert_almost_equal(cheb.chebpts2(3), tgt)
  620:         tgt = [-1, -0.5, .5, 1]
  621:         assert_almost_equal(cheb.chebpts2(4), tgt)
  622:         tgt = [-1.0, -0.707106781187, 0, 0.707106781187, 1.0]
  623:         assert_almost_equal(cheb.chebpts2(5), tgt)
