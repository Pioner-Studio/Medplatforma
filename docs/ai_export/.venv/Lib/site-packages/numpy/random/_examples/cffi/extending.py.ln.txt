    1: """
    2: Use cffi to access any of the underlying C functions from distributions.h
    3: """
    4: import os
    5: 
    6: import cffi
    7: 
    8: import numpy as np
    9: 
   10: from .parse import parse_distributions_h
   11: 
   12: ffi = cffi.FFI()
   13: 
   14: inc_dir = os.path.join(np.get_include(), 'numpy')
   15: 
   16: # Basic numpy types
   17: ffi.cdef('''
   18:     typedef intptr_t npy_intp;
   19:     typedef unsigned char npy_bool;
   20: 
   21: ''')
   22: 
   23: parse_distributions_h(ffi, inc_dir)
   24: 
   25: lib = ffi.dlopen(np.random._generator.__file__)
   26: 
   27: # Compare the distributions.h random_standard_normal_fill to
   28: # Generator.standard_random
   29: bit_gen = np.random.PCG64()
   30: rng = np.random.Generator(bit_gen)
   31: state = bit_gen.state
   32: 
   33: interface = rng.bit_generator.cffi
   34: n = 100
   35: vals_cffi = ffi.new('double[%d]' % n)
   36: lib.random_standard_normal_fill(interface.bit_generator, n, vals_cffi)
   37: 
   38: # reset the state
   39: bit_gen.state = state
   40: 
   41: vals = rng.standard_normal(n)
   42: 
   43: for i in range(n):
   44:     assert vals[i] == vals_cffi[i]
