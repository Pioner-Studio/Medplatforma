    1: import os
    2: import shutil
    3: import subprocess
    4: import sys
    5: import sysconfig
    6: import warnings
    7: from importlib.util import module_from_spec, spec_from_file_location
    8: 
    9: import pytest
   10: 
   11: import numpy as np
   12: from numpy.testing import IS_EDITABLE, IS_WASM
   13: 
   14: try:
   15:     import cffi
   16: except ImportError:
   17:     cffi = None
   18: 
   19: if sys.flags.optimize > 1:
   20:     # no docstrings present to inspect when PYTHONOPTIMIZE/Py_OptimizeFlag > 1
   21:     # cffi cannot succeed
   22:     cffi = None
   23: 
   24: try:
   25:     with warnings.catch_warnings(record=True) as w:
   26:         # numba issue gh-4733
   27:         warnings.filterwarnings('always', '', DeprecationWarning)
   28:         import numba
   29: except (ImportError, SystemError):
   30:     # Certain numpy/numba versions trigger a SystemError due to a numba bug
   31:     numba = None
   32: 
   33: try:
   34:     import cython
   35:     from Cython.Compiler.Version import version as cython_version
   36: except ImportError:
   37:     cython = None
   38: else:
   39:     from numpy._utils import _pep440
   40:     # Note: keep in sync with the one in pyproject.toml
   41:     required_version = '3.0.6'
   42:     if _pep440.parse(cython_version) < _pep440.Version(required_version):
   43:         # too old or wrong cython, skip the test
   44:         cython = None
   45: 
   46: 
   47: @pytest.mark.skipif(
   48:     IS_EDITABLE,
   49:     reason='Editable install cannot find .pxd headers'
   50: )
   51: @pytest.mark.skipif(
   52:         sys.platform == "win32" and sys.maxsize < 2**32,
   53:         reason="Failing in 32-bit Windows wheel build job, skip for now"
   54: )
   55: @pytest.mark.skipif(IS_WASM, reason="Can't start subprocess")
   56: @pytest.mark.skipif(cython is None, reason="requires cython")
   57: @pytest.mark.skipif(sysconfig.get_platform() == 'win-arm64',
   58:                     reason='Meson unable to find MSVC linker on win-arm64')
   59: @pytest.mark.slow
   60: def test_cython(tmp_path):
   61:     import glob
   62:     # build the examples in a temporary directory
   63:     srcdir = os.path.join(os.path.dirname(__file__), '..')
   64:     shutil.copytree(srcdir, tmp_path / 'random')
   65:     build_dir = tmp_path / 'random' / '_examples' / 'cython'
   66:     target_dir = build_dir / "build"
   67:     os.makedirs(target_dir, exist_ok=True)
   68:     # Ensure we use the correct Python interpreter even when `meson` is
   69:     # installed in a different Python environment (see gh-24956)
   70:     native_file = str(build_dir / 'interpreter-native-file.ini')
   71:     with open(native_file, 'w') as f:
   72:         f.write("[binaries]\n")
   73:         f.write(f"python = '{sys.executable}'\n")
   74:         f.write(f"python3 = '{sys.executable}'")
   75:     if sys.platform == "win32":
   76:         subprocess.check_call(["meson", "setup",
   77:                                "--buildtype=release",
   78:                                "--vsenv", "--native-file", native_file,
   79:                                str(build_dir)],
   80:                               cwd=target_dir,
   81:                               )
   82:     else:
   83:         subprocess.check_call(["meson", "setup",
   84:                                "--native-file", native_file, str(build_dir)],
   85:                               cwd=target_dir
   86:                               )
   87:     subprocess.check_call(["meson", "compile", "-vv"], cwd=target_dir)
   88: 
   89:     # gh-16162: make sure numpy's __init__.pxd was used for cython
   90:     # not really part of this test, but it is a convenient place to check
   91: 
   92:     g = glob.glob(str(target_dir / "*" / "extending.pyx.c"))
   93:     with open(g[0]) as fid:
   94:         txt_to_find = 'NumPy API declarations from "numpy/__init__'
   95:         for line in fid:
   96:             if txt_to_find in line:
   97:                 break
   98:         else:
   99:             assert False, f"Could not find '{txt_to_find}' in C file, wrong pxd used"
  100:     # import without adding the directory to sys.path
  101:     suffix = sysconfig.get_config_var('EXT_SUFFIX')
  102: 
  103:     def load(modname):
  104:         so = (target_dir / modname).with_suffix(suffix)
  105:         spec = spec_from_file_location(modname, so)
  106:         mod = module_from_spec(spec)
  107:         spec.loader.exec_module(mod)
  108:         return mod
  109: 
  110:     # test that the module can be imported
  111:     load("extending")
  112:     load("extending_cpp")
  113:     # actually test the cython c-extension
  114:     extending_distributions = load("extending_distributions")
  115:     from numpy.random import PCG64
  116:     values = extending_distributions.uniforms_ex(PCG64(0), 10, 'd')
  117:     assert values.shape == (10,)
  118:     assert values.dtype == np.float64
  119: 
  120: @pytest.mark.skipif(numba is None or cffi is None,
  121:                     reason="requires numba and cffi")
  122: def test_numba():
  123:     from numpy.random._examples.numba import extending  # noqa: F401
  124: 
  125: @pytest.mark.skipif(cffi is None, reason="requires cffi")
  126: def test_cffi():
  127:     from numpy.random._examples.cffi import extending  # noqa: F401
