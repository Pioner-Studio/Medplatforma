    1: import pytest
    2: 
    3: import numpy as np
    4: from numpy.random import MT19937, Generator
    5: from numpy.testing import assert_, assert_array_equal
    6: 
    7: 
    8: class TestRegression:
    9: 
   10:     def setup_method(self):
   11:         self.mt19937 = Generator(MT19937(121263137472525314065))
   12: 
   13:     def test_vonmises_range(self):
   14:         # Make sure generated random variables are in [-pi, pi].
   15:         # Regression test for ticket #986.
   16:         for mu in np.linspace(-7., 7., 5):
   17:             r = self.mt19937.vonmises(mu, 1, 50)
   18:             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))
   19: 
   20:     def test_hypergeometric_range(self):
   21:         # Test for ticket #921
   22:         assert_(np.all(self.mt19937.hypergeometric(3, 18, 11, size=10) < 4))
   23:         assert_(np.all(self.mt19937.hypergeometric(18, 3, 11, size=10) > 0))
   24: 
   25:         # Test for ticket #5623
   26:         args = (2**20 - 2, 2**20 - 2, 2**20 - 2)  # Check for 32-bit systems
   27:         assert_(self.mt19937.hypergeometric(*args) > 0)
   28: 
   29:     def test_logseries_convergence(self):
   30:         # Test for ticket #923
   31:         N = 1000
   32:         rvsn = self.mt19937.logseries(0.8, size=N)
   33:         # these two frequency counts should be close to theoretical
   34:         # numbers with this large sample
   35:         # theoretical large N result is 0.49706795
   36:         freq = np.sum(rvsn == 1) / N
   37:         msg = f'Frequency was {freq:f}, should be > 0.45'
   38:         assert_(freq > 0.45, msg)
   39:         # theoretical large N result is 0.19882718
   40:         freq = np.sum(rvsn == 2) / N
   41:         msg = f'Frequency was {freq:f}, should be < 0.23'
   42:         assert_(freq < 0.23, msg)
   43: 
   44:     def test_shuffle_mixed_dimension(self):
   45:         # Test for trac ticket #2074
   46:         for t in [[1, 2, 3, None],
   47:                   [(1, 1), (2, 2), (3, 3), None],
   48:                   [1, (2, 2), (3, 3), None],
   49:                   [(1, 1), 2, 3, None]]:
   50:             mt19937 = Generator(MT19937(12345))
   51:             shuffled = np.array(t, dtype=object)
   52:             mt19937.shuffle(shuffled)
   53:             expected = np.array([t[2], t[0], t[3], t[1]], dtype=object)
   54:             assert_array_equal(np.array(shuffled, dtype=object), expected)
   55: 
   56:     def test_call_within_randomstate(self):
   57:         # Check that custom BitGenerator does not call into global state
   58:         res = np.array([1, 8, 0, 1, 5, 3, 3, 8, 1, 4])
   59:         for i in range(3):
   60:             mt19937 = Generator(MT19937(i))
   61:             m = Generator(MT19937(4321))
   62:             # If m.state is not honored, the result will change
   63:             assert_array_equal(m.choice(10, size=10, p=np.ones(10) / 10.), res)
   64: 
   65:     def test_multivariate_normal_size_types(self):
   66:         # Test for multivariate_normal issue with 'size' argument.
   67:         # Check that the multivariate_normal size argument can be a
   68:         # numpy integer.
   69:         self.mt19937.multivariate_normal([0], [[0]], size=1)
   70:         self.mt19937.multivariate_normal([0], [[0]], size=np.int_(1))
   71:         self.mt19937.multivariate_normal([0], [[0]], size=np.int64(1))
   72: 
   73:     def test_beta_small_parameters(self):
   74:         # Test that beta with small a and b parameters does not produce
   75:         # NaNs due to roundoff errors causing 0 / 0, gh-5851
   76:         x = self.mt19937.beta(0.0001, 0.0001, size=100)
   77:         assert_(not np.any(np.isnan(x)), 'Nans in mt19937.beta')
   78: 
   79:     def test_beta_very_small_parameters(self):
   80:         # gh-24203: beta would hang with very small parameters.
   81:         self.mt19937.beta(1e-49, 1e-40)
   82: 
   83:     def test_beta_ridiculously_small_parameters(self):
   84:         # gh-24266: beta would generate nan when the parameters
   85:         # were subnormal or a small multiple of the smallest normal.
   86:         tiny = np.finfo(1.0).tiny
   87:         x = self.mt19937.beta(tiny / 32, tiny / 40, size=50)
   88:         assert not np.any(np.isnan(x))
   89: 
   90:     def test_beta_expected_zero_frequency(self):
   91:         # gh-24475: For small a and b (e.g. a=0.0025, b=0.0025), beta
   92:         # would generate too many zeros.
   93:         a = 0.0025
   94:         b = 0.0025
   95:         n = 1000000
   96:         x = self.mt19937.beta(a, b, size=n)
   97:         nzeros = np.count_nonzero(x == 0)
   98:         # beta CDF at x = np.finfo(np.double).smallest_subnormal/2
   99:         # is p = 0.0776169083131899, e.g,
  100:         #
  101:         #    import numpy as np
  102:         #    from mpmath import mp
  103:         #    mp.dps = 160
  104:         #    x = mp.mpf(np.finfo(np.float64).smallest_subnormal)/2
  105:         #    # CDF of the beta distribution at x:
  106:         #    p = mp.betainc(a, b, x1=0, x2=x, regularized=True)
  107:         #    n = 1000000
  108:         #    exprected_freq = float(n*p)
  109:         #
  110:         expected_freq = 77616.90831318991
  111:         assert 0.95 * expected_freq < nzeros < 1.05 * expected_freq
  112: 
  113:     def test_choice_sum_of_probs_tolerance(self):
  114:         # The sum of probs should be 1.0 with some tolerance.
  115:         # For low precision dtypes the tolerance was too tight.
  116:         # See numpy github issue 6123.
  117:         a = [1, 2, 3]
  118:         counts = [4, 4, 2]
  119:         for dt in np.float16, np.float32, np.float64:
  120:             probs = np.array(counts, dtype=dt) / sum(counts)
  121:             c = self.mt19937.choice(a, p=probs)
  122:             assert_(c in a)
  123:             with pytest.raises(ValueError):
  124:                 self.mt19937.choice(a, p=probs * 0.9)
  125: 
  126:     def test_shuffle_of_array_of_different_length_strings(self):
  127:         # Test that permuting an array of different length strings
  128:         # will not cause a segfault on garbage collection
  129:         # Tests gh-7710
  130: 
  131:         a = np.array(['a', 'a' * 1000])
  132: 
  133:         for _ in range(100):
  134:             self.mt19937.shuffle(a)
  135: 
  136:         # Force Garbage Collection - should not segfault.
  137:         import gc
  138:         gc.collect()
  139: 
  140:     def test_shuffle_of_array_of_objects(self):
  141:         # Test that permuting an array of objects will not cause
  142:         # a segfault on garbage collection.
  143:         # See gh-7719
  144:         a = np.array([np.arange(1), np.arange(4)], dtype=object)
  145: 
  146:         for _ in range(1000):
  147:             self.mt19937.shuffle(a)
  148: 
  149:         # Force Garbage Collection - should not segfault.
  150:         import gc
  151:         gc.collect()
  152: 
  153:     def test_permutation_subclass(self):
  154: 
  155:         class N(np.ndarray):
  156:             pass
  157: 
  158:         mt19937 = Generator(MT19937(1))
  159:         orig = np.arange(3).view(N)
  160:         perm = mt19937.permutation(orig)
  161:         assert_array_equal(perm, np.array([2, 0, 1]))
  162:         assert_array_equal(orig, np.arange(3).view(N))
  163: 
  164:         class M:
  165:             a = np.arange(5)
  166: 
  167:             def __array__(self, dtype=None, copy=None):
  168:                 return self.a
  169: 
  170:         mt19937 = Generator(MT19937(1))
  171:         m = M()
  172:         perm = mt19937.permutation(m)
  173:         assert_array_equal(perm, np.array([4, 1, 3, 0, 2]))
  174:         assert_array_equal(m.__array__(), np.arange(5))
  175: 
  176:     def test_gamma_0(self):
  177:         assert self.mt19937.standard_gamma(0.0) == 0.0
  178:         assert_array_equal(self.mt19937.standard_gamma([0.0]), 0.0)
  179: 
  180:         actual = self.mt19937.standard_gamma([0.0], dtype='float')
  181:         expected = np.array([0.], dtype=np.float32)
  182:         assert_array_equal(actual, expected)
  183: 
  184:     def test_geometric_tiny_prob(self):
  185:         # Regression test for gh-17007.
  186:         # When p = 1e-30, the probability that a sample will exceed 2**63-1
  187:         # is 0.9999999999907766, so we expect the result to be all 2**63-1.
  188:         assert_array_equal(self.mt19937.geometric(p=1e-30, size=3),
  189:                            np.iinfo(np.int64).max)
  190: 
  191:     def test_zipf_large_parameter(self):
  192:         # Regression test for part of gh-9829: a call such as rng.zipf(10000)
  193:         # would hang.
  194:         n = 8
  195:         sample = self.mt19937.zipf(10000, size=n)
  196:         assert_array_equal(sample, np.ones(n, dtype=np.int64))
  197: 
  198:     def test_zipf_a_near_1(self):
  199:         # Regression test for gh-9829: a call such as rng.zipf(1.0000000000001)
  200:         # would hang.
  201:         n = 100000
  202:         sample = self.mt19937.zipf(1.0000000000001, size=n)
  203:         # Not much of a test, but let's do something more than verify that
  204:         # it doesn't hang.  Certainly for a monotonically decreasing
  205:         # discrete distribution truncated to signed 64 bit integers, more
  206:         # than half should be less than 2**62.
  207:         assert np.count_nonzero(sample < 2**62) > n / 2
