    1: 
    2: import numpy as np
    3: import numpy.ma as ma
    4: from numpy.lib.recfunctions import (
    5:     append_fields,
    6:     apply_along_fields,
    7:     assign_fields_by_name,
    8:     drop_fields,
    9:     find_duplicates,
   10:     get_fieldstructure,
   11:     join_by,
   12:     merge_arrays,
   13:     recursive_fill_fields,
   14:     rename_fields,
   15:     repack_fields,
   16:     require_fields,
   17:     stack_arrays,
   18:     structured_to_unstructured,
   19:     unstructured_to_structured,
   20: )
   21: from numpy.ma.mrecords import MaskedRecords
   22: from numpy.ma.testutils import assert_equal
   23: from numpy.testing import assert_, assert_raises
   24: 
   25: get_fieldspec = np.lib.recfunctions._get_fieldspec
   26: get_names = np.lib.recfunctions.get_names
   27: get_names_flat = np.lib.recfunctions.get_names_flat
   28: zip_descr = np.lib.recfunctions._zip_descr
   29: zip_dtype = np.lib.recfunctions._zip_dtype
   30: 
   31: 
   32: class TestRecFunctions:
   33:     # Misc tests
   34: 
   35:     def setup_method(self):
   36:         x = np.array([1, 2, ])
   37:         y = np.array([10, 20, 30])
   38:         z = np.array([('A', 1.), ('B', 2.)],
   39:                      dtype=[('A', '|S3'), ('B', float)])
   40:         w = np.array([(1, (2, 3.0)), (4, (5, 6.0))],
   41:                      dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
   42:         self.data = (w, x, y, z)
   43: 
   44:     def test_zip_descr(self):
   45:         # Test zip_descr
   46:         (w, x, y, z) = self.data
   47: 
   48:         # Std array
   49:         test = zip_descr((x, x), flatten=True)
   50:         assert_equal(test,
   51:                      np.dtype([('', int), ('', int)]))
   52:         test = zip_descr((x, x), flatten=False)
   53:         assert_equal(test,
   54:                      np.dtype([('', int), ('', int)]))
   55: 
   56:         # Std & flexible-dtype
   57:         test = zip_descr((x, z), flatten=True)
   58:         assert_equal(test,
   59:                      np.dtype([('', int), ('A', '|S3'), ('B', float)]))
   60:         test = zip_descr((x, z), flatten=False)
   61:         assert_equal(test,
   62:                      np.dtype([('', int),
   63:                                ('', [('A', '|S3'), ('B', float)])]))
   64: 
   65:         # Standard & nested dtype
   66:         test = zip_descr((x, w), flatten=True)
   67:         assert_equal(test,
   68:                      np.dtype([('', int),
   69:                                ('a', int),
   70:                                ('ba', float), ('bb', int)]))
   71:         test = zip_descr((x, w), flatten=False)
   72:         assert_equal(test,
   73:                      np.dtype([('', int),
   74:                                ('', [('a', int),
   75:                                      ('b', [('ba', float), ('bb', int)])])]))
   76: 
   77:     def test_drop_fields(self):
   78:         # Test drop_fields
   79:         a = np.array([(1, (2, 3.0)), (4, (5, 6.0))],
   80:                      dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
   81: 
   82:         # A basic field
   83:         test = drop_fields(a, 'a')
   84:         control = np.array([((2, 3.0),), ((5, 6.0),)],
   85:                            dtype=[('b', [('ba', float), ('bb', int)])])
   86:         assert_equal(test, control)
   87: 
   88:         # Another basic field (but nesting two fields)
   89:         test = drop_fields(a, 'b')
   90:         control = np.array([(1,), (4,)], dtype=[('a', int)])
   91:         assert_equal(test, control)
   92: 
   93:         # A nested sub-field
   94:         test = drop_fields(a, ['ba', ])
   95:         control = np.array([(1, (3.0,)), (4, (6.0,))],
   96:                            dtype=[('a', int), ('b', [('bb', int)])])
   97:         assert_equal(test, control)
   98: 
   99:         # All the nested sub-field from a field: zap that field
  100:         test = drop_fields(a, ['ba', 'bb'])
  101:         control = np.array([(1,), (4,)], dtype=[('a', int)])
  102:         assert_equal(test, control)
  103: 
  104:         # dropping all fields results in an array with no fields
  105:         test = drop_fields(a, ['a', 'b'])
  106:         control = np.array([(), ()], dtype=[])
  107:         assert_equal(test, control)
  108: 
  109:     def test_rename_fields(self):
  110:         # Test rename fields
  111:         a = np.array([(1, (2, [3.0, 30.])), (4, (5, [6.0, 60.]))],
  112:                      dtype=[('a', int),
  113:                             ('b', [('ba', float), ('bb', (float, 2))])])
  114:         test = rename_fields(a, {'a': 'A', 'bb': 'BB'})
  115:         newdtype = [('A', int), ('b', [('ba', float), ('BB', (float, 2))])]
  116:         control = a.view(newdtype)
  117:         assert_equal(test.dtype, newdtype)
  118:         assert_equal(test, control)
  119: 
  120:     def test_get_names(self):
  121:         # Test get_names
  122:         ndtype = np.dtype([('A', '|S3'), ('B', float)])
  123:         test = get_names(ndtype)
  124:         assert_equal(test, ('A', 'B'))
  125: 
  126:         ndtype = np.dtype([('a', int), ('b', [('ba', float), ('bb', int)])])
  127:         test = get_names(ndtype)
  128:         assert_equal(test, ('a', ('b', ('ba', 'bb'))))
  129: 
  130:         ndtype = np.dtype([('a', int), ('b', [])])
  131:         test = get_names(ndtype)
  132:         assert_equal(test, ('a', ('b', ())))
  133: 
  134:         ndtype = np.dtype([])
  135:         test = get_names(ndtype)
  136:         assert_equal(test, ())
  137: 
  138:     def test_get_names_flat(self):
  139:         # Test get_names_flat
  140:         ndtype = np.dtype([('A', '|S3'), ('B', float)])
  141:         test = get_names_flat(ndtype)
  142:         assert_equal(test, ('A', 'B'))
  143: 
  144:         ndtype = np.dtype([('a', int), ('b', [('ba', float), ('bb', int)])])
  145:         test = get_names_flat(ndtype)
  146:         assert_equal(test, ('a', 'b', 'ba', 'bb'))
  147: 
  148:         ndtype = np.dtype([('a', int), ('b', [])])
  149:         test = get_names_flat(ndtype)
  150:         assert_equal(test, ('a', 'b'))
  151: 
  152:         ndtype = np.dtype([])
  153:         test = get_names_flat(ndtype)
  154:         assert_equal(test, ())
  155: 
  156:     def test_get_fieldstructure(self):
  157:         # Test get_fieldstructure
  158: 
  159:         # No nested fields
  160:         ndtype = np.dtype([('A', '|S3'), ('B', float)])
  161:         test = get_fieldstructure(ndtype)
  162:         assert_equal(test, {'A': [], 'B': []})
  163: 
  164:         # One 1-nested field
  165:         ndtype = np.dtype([('A', int), ('B', [('BA', float), ('BB', '|S1')])])
  166:         test = get_fieldstructure(ndtype)
  167:         assert_equal(test, {'A': [], 'B': [], 'BA': ['B', ], 'BB': ['B']})
  168: 
  169:         # One 2-nested fields
  170:         ndtype = np.dtype([('A', int),
  171:                            ('B', [('BA', int),
  172:                                   ('BB', [('BBA', int), ('BBB', int)])])])
  173:         test = get_fieldstructure(ndtype)
  174:         control = {'A': [], 'B': [], 'BA': ['B'], 'BB': ['B'],
  175:                    'BBA': ['B', 'BB'], 'BBB': ['B', 'BB']}
  176:         assert_equal(test, control)
  177: 
  178:         # 0 fields
  179:         ndtype = np.dtype([])
  180:         test = get_fieldstructure(ndtype)
  181:         assert_equal(test, {})
  182: 
  183:     def test_find_duplicates(self):
  184:         # Test find_duplicates
  185:         a = ma.array([(2, (2., 'B')), (1, (2., 'B')), (2, (2., 'B')),
  186:                       (1, (1., 'B')), (2, (2., 'B')), (2, (2., 'C'))],
  187:                      mask=[(0, (0, 0)), (0, (0, 0)), (0, (0, 0)),
  188:                            (0, (0, 0)), (1, (0, 0)), (0, (1, 0))],
  189:                      dtype=[('A', int), ('B', [('BA', float), ('BB', '|S1')])])
  190: 
  191:         test = find_duplicates(a, ignoremask=False, return_index=True)
  192:         control = [0, 2]
  193:         assert_equal(sorted(test[-1]), control)
  194:         assert_equal(test[0], a[test[-1]])
  195: 
  196:         test = find_duplicates(a, key='A', return_index=True)
  197:         control = [0, 1, 2, 3, 5]
  198:         assert_equal(sorted(test[-1]), control)
  199:         assert_equal(test[0], a[test[-1]])
  200: 
  201:         test = find_duplicates(a, key='B', return_index=True)
  202:         control = [0, 1, 2, 4]
  203:         assert_equal(sorted(test[-1]), control)
  204:         assert_equal(test[0], a[test[-1]])
  205: 
  206:         test = find_duplicates(a, key='BA', return_index=True)
  207:         control = [0, 1, 2, 4]
  208:         assert_equal(sorted(test[-1]), control)
  209:         assert_equal(test[0], a[test[-1]])
  210: 
  211:         test = find_duplicates(a, key='BB', return_index=True)
  212:         control = [0, 1, 2, 3, 4]
  213:         assert_equal(sorted(test[-1]), control)
  214:         assert_equal(test[0], a[test[-1]])
  215: 
  216:     def test_find_duplicates_ignoremask(self):
  217:         # Test the ignoremask option of find_duplicates
  218:         ndtype = [('a', int)]
  219:         a = ma.array([1, 1, 1, 2, 2, 3, 3],
  220:                      mask=[0, 0, 1, 0, 0, 0, 1]).view(ndtype)
  221:         test = find_duplicates(a, ignoremask=True, return_index=True)
  222:         control = [0, 1, 3, 4]
  223:         assert_equal(sorted(test[-1]), control)
  224:         assert_equal(test[0], a[test[-1]])
  225: 
  226:         test = find_duplicates(a, ignoremask=False, return_index=True)
  227:         control = [0, 1, 2, 3, 4, 6]
  228:         assert_equal(sorted(test[-1]), control)
  229:         assert_equal(test[0], a[test[-1]])
  230: 
  231:     def test_repack_fields(self):
  232:         dt = np.dtype('u1,f4,i8', align=True)
  233:         a = np.zeros(2, dtype=dt)
  234: 
  235:         assert_equal(repack_fields(dt), np.dtype('u1,f4,i8'))
  236:         assert_equal(repack_fields(a).itemsize, 13)
  237:         assert_equal(repack_fields(repack_fields(dt), align=True), dt)
  238: 
  239:         # make sure type is preserved
  240:         dt = np.dtype((np.record, dt))
  241:         assert_(repack_fields(dt).type is np.record)
  242: 
  243:     def test_structured_to_unstructured(self, tmp_path):
  244:         a = np.zeros(4, dtype=[('a', 'i4'), ('b', 'f4,u2'), ('c', 'f4', 2)])
  245:         out = structured_to_unstructured(a)
  246:         assert_equal(out, np.zeros((4, 5), dtype='f8'))
  247: 
  248:         b = np.array([(1, 2, 5), (4, 5, 7), (7, 8, 11), (10, 11, 12)],
  249:                      dtype=[('x', 'i4'), ('y', 'f4'), ('z', 'f8')])
  250:         out = np.mean(structured_to_unstructured(b[['x', 'z']]), axis=-1)
  251:         assert_equal(out, np.array([3.,  5.5,  9., 11.]))
  252:         out = np.mean(structured_to_unstructured(b[['x']]), axis=-1)
  253:         assert_equal(out, np.array([1.,  4. ,  7., 10.]))  # noqa: E203
  254: 
  255:         c = np.arange(20).reshape((4, 5))
  256:         out = unstructured_to_structured(c, a.dtype)
  257:         want = np.array([( 0, ( 1.,  2), [ 3.,  4.]),
  258:                          ( 5, ( 6.,  7), [ 8.,  9.]),
  259:                          (10, (11., 12), [13., 14.]),
  260:                          (15, (16., 17), [18., 19.])],
  261:                      dtype=[('a', 'i4'),
  262:                             ('b', [('f0', 'f4'), ('f1', 'u2')]),
  263:                             ('c', 'f4', (2,))])
  264:         assert_equal(out, want)
  265: 
  266:         d = np.array([(1, 2, 5), (4, 5, 7), (7, 8, 11), (10, 11, 12)],
  267:                      dtype=[('x', 'i4'), ('y', 'f4'), ('z', 'f8')])
  268:         assert_equal(apply_along_fields(np.mean, d),
  269:                      np.array([ 8.0 / 3,  16.0 / 3,  26.0 / 3, 11.]))
  270:         assert_equal(apply_along_fields(np.mean, d[['x', 'z']]),
  271:                      np.array([ 3.,  5.5,  9., 11.]))
  272: 
  273:         # check that for uniform field dtypes we get a view, not a copy:
  274:         d = np.array([(1, 2, 5), (4, 5, 7), (7, 8, 11), (10, 11, 12)],
  275:                      dtype=[('x', 'i4'), ('y', 'i4'), ('z', 'i4')])
  276:         dd = structured_to_unstructured(d)
  277:         ddd = unstructured_to_structured(dd, d.dtype)
  278:         assert_(np.shares_memory(dd, d))
  279:         assert_(np.shares_memory(ddd, d))
  280: 
  281:         # check that reversing the order of attributes works
  282:         dd_attrib_rev = structured_to_unstructured(d[['z', 'x']])
  283:         assert_equal(dd_attrib_rev, [[5, 1], [7, 4], [11, 7], [12, 10]])
  284:         assert_(np.shares_memory(dd_attrib_rev, d))
  285: 
  286:         # including uniform fields with subarrays unpacked
  287:         d = np.array([(1, [2,  3], [[ 4,  5], [ 6,  7]]),
  288:                       (8, [9, 10], [[11, 12], [13, 14]])],
  289:                      dtype=[('x0', 'i4'), ('x1', ('i4', 2)),
  290:                             ('x2', ('i4', (2, 2)))])
  291:         dd = structured_to_unstructured(d)
  292:         ddd = unstructured_to_structured(dd, d.dtype)
  293:         assert_(np.shares_memory(dd, d))
  294:         assert_(np.shares_memory(ddd, d))
  295: 
  296:         # check that reversing with sub-arrays works as expected
  297:         d_rev = d[::-1]
  298:         dd_rev = structured_to_unstructured(d_rev)
  299:         assert_equal(dd_rev, [[8, 9, 10, 11, 12, 13, 14],
  300:                               [1, 2, 3, 4, 5, 6, 7]])
  301: 
  302:         # check that sub-arrays keep the order of their values
  303:         d_attrib_rev = d[['x2', 'x1', 'x0']]
  304:         dd_attrib_rev = structured_to_unstructured(d_attrib_rev)
  305:         assert_equal(dd_attrib_rev, [[4, 5, 6, 7, 2, 3, 1],
  306:                                      [11, 12, 13, 14, 9, 10, 8]])
  307: 
  308:         # with ignored field at the end
  309:         d = np.array([(1, [2,  3], [[4, 5], [6, 7]], 32),
  310:                       (8, [9, 10], [[11, 12], [13, 14]], 64)],
  311:                      dtype=[('x0', 'i4'), ('x1', ('i4', 2)),
  312:                             ('x2', ('i4', (2, 2))), ('ignored', 'u1')])
  313:         dd = structured_to_unstructured(d[['x0', 'x1', 'x2']])
  314:         assert_(np.shares_memory(dd, d))
  315:         assert_equal(dd, [[1, 2, 3, 4, 5, 6, 7],
  316:                           [8, 9, 10, 11, 12, 13, 14]])
  317: 
  318:         # test that nested fields with identical names don't break anything
  319:         point = np.dtype([('x', int), ('y', int)])
  320:         triangle = np.dtype([('a', point), ('b', point), ('c', point)])
  321:         arr = np.zeros(10, triangle)
  322:         res = structured_to_unstructured(arr, dtype=int)
  323:         assert_equal(res, np.zeros((10, 6), dtype=int))
  324: 
  325:         # test nested combinations of subarrays and structured arrays, gh-13333
  326:         def subarray(dt, shape):
  327:             return np.dtype((dt, shape))
  328: 
  329:         def structured(*dts):
  330:             return np.dtype([(f'x{i}', dt) for i, dt in enumerate(dts)])
  331: 
  332:         def inspect(dt, dtype=None):
  333:             arr = np.zeros((), dt)
  334:             ret = structured_to_unstructured(arr, dtype=dtype)
  335:             backarr = unstructured_to_structured(ret, dt)
  336:             return ret.shape, ret.dtype, backarr.dtype
  337: 
  338:         dt = structured(subarray(structured(np.int32, np.int32), 3))
  339:         assert_equal(inspect(dt), ((6,), np.int32, dt))
  340: 
  341:         dt = structured(subarray(subarray(np.int32, 2), 2))
  342:         assert_equal(inspect(dt), ((4,), np.int32, dt))
  343: 
  344:         dt = structured(np.int32)
  345:         assert_equal(inspect(dt), ((1,), np.int32, dt))
  346: 
  347:         dt = structured(np.int32, subarray(subarray(np.int32, 2), 2))
  348:         assert_equal(inspect(dt), ((5,), np.int32, dt))
  349: 
  350:         dt = structured()
  351:         assert_raises(ValueError, structured_to_unstructured, np.zeros(3, dt))
  352: 
  353:         # these currently don't work, but we may make it work in the future
  354:         assert_raises(NotImplementedError, structured_to_unstructured,
  355:                                            np.zeros(3, dt), dtype=np.int32)
  356:         assert_raises(NotImplementedError, unstructured_to_structured,
  357:                                            np.zeros((3, 0), dtype=np.int32))
  358: 
  359:         # test supported ndarray subclasses
  360:         d_plain = np.array([(1, 2), (3, 4)], dtype=[('a', 'i4'), ('b', 'i4')])
  361:         dd_expected = structured_to_unstructured(d_plain, copy=True)
  362: 
  363:         # recarray
  364:         d = d_plain.view(np.recarray)
  365: 
  366:         dd = structured_to_unstructured(d, copy=False)
  367:         ddd = structured_to_unstructured(d, copy=True)
  368:         assert_(np.shares_memory(d, dd))
  369:         assert_(type(dd) is np.recarray)
  370:         assert_(type(ddd) is np.recarray)
  371:         assert_equal(dd, dd_expected)
  372:         assert_equal(ddd, dd_expected)
  373: 
  374:         # memmap
  375:         d = np.memmap(tmp_path / 'memmap',
  376:                       mode='w+',
  377:                       dtype=d_plain.dtype,
  378:                       shape=d_plain.shape)
  379:         d[:] = d_plain
  380:         dd = structured_to_unstructured(d, copy=False)
  381:         ddd = structured_to_unstructured(d, copy=True)
  382:         assert_(np.shares_memory(d, dd))
  383:         assert_(type(dd) is np.memmap)
  384:         assert_(type(ddd) is np.memmap)
  385:         assert_equal(dd, dd_expected)
  386:         assert_equal(ddd, dd_expected)
  387: 
  388:     def test_unstructured_to_structured(self):
  389:         # test if dtype is the args of np.dtype
  390:         a = np.zeros((20, 2))
  391:         test_dtype_args = [('x', float), ('y', float)]
  392:         test_dtype = np.dtype(test_dtype_args)
  393:         field1 = unstructured_to_structured(a, dtype=test_dtype_args)  # now
  394:         field2 = unstructured_to_structured(a, dtype=test_dtype)  # before
  395:         assert_equal(field1, field2)
  396: 
  397:     def test_field_assignment_by_name(self):
  398:         a = np.ones(2, dtype=[('a', 'i4'), ('b', 'f8'), ('c', 'u1')])
  399:         newdt = [('b', 'f4'), ('c', 'u1')]
  400: 
  401:         assert_equal(require_fields(a, newdt), np.ones(2, newdt))
  402: 
  403:         b = np.array([(1, 2), (3, 4)], dtype=newdt)
  404:         assign_fields_by_name(a, b, zero_unassigned=False)
  405:         assert_equal(a, np.array([(1, 1, 2), (1, 3, 4)], dtype=a.dtype))
  406:         assign_fields_by_name(a, b)
  407:         assert_equal(a, np.array([(0, 1, 2), (0, 3, 4)], dtype=a.dtype))
  408: 
  409:         # test nested fields
  410:         a = np.ones(2, dtype=[('a', [('b', 'f8'), ('c', 'u1')])])
  411:         newdt = [('a', [('c', 'u1')])]
  412:         assert_equal(require_fields(a, newdt), np.ones(2, newdt))
  413:         b = np.array([((2,),), ((3,),)], dtype=newdt)
  414:         assign_fields_by_name(a, b, zero_unassigned=False)
  415:         assert_equal(a, np.array([((1, 2),), ((1, 3),)], dtype=a.dtype))
  416:         assign_fields_by_name(a, b)
  417:         assert_equal(a, np.array([((0, 2),), ((0, 3),)], dtype=a.dtype))
  418: 
  419:         # test unstructured code path for 0d arrays
  420:         a, b = np.array(3), np.array(0)
  421:         assign_fields_by_name(b, a)
  422:         assert_equal(b[()], 3)
  423: 
  424: 
  425: class TestRecursiveFillFields:
  426:     # Test recursive_fill_fields.
  427:     def test_simple_flexible(self):
  428:         # Test recursive_fill_fields on flexible-array
  429:         a = np.array([(1, 10.), (2, 20.)], dtype=[('A', int), ('B', float)])
  430:         b = np.zeros((3,), dtype=a.dtype)
  431:         test = recursive_fill_fields(a, b)
  432:         control = np.array([(1, 10.), (2, 20.), (0, 0.)],
  433:                            dtype=[('A', int), ('B', float)])
  434:         assert_equal(test, control)
  435: 
  436:     def test_masked_flexible(self):
  437:         # Test recursive_fill_fields on masked flexible-array
  438:         a = ma.array([(1, 10.), (2, 20.)], mask=[(0, 1), (1, 0)],
  439:                      dtype=[('A', int), ('B', float)])
  440:         b = ma.zeros((3,), dtype=a.dtype)
  441:         test = recursive_fill_fields(a, b)
  442:         control = ma.array([(1, 10.), (2, 20.), (0, 0.)],
  443:                            mask=[(0, 1), (1, 0), (0, 0)],
  444:                            dtype=[('A', int), ('B', float)])
  445:         assert_equal(test, control)
  446: 
  447: 
  448: class TestMergeArrays:
  449:     # Test merge_arrays
  450: 
  451:     def setup_method(self):
  452:         x = np.array([1, 2, ])
  453:         y = np.array([10, 20, 30])
  454:         z = np.array(
  455:             [('A', 1.), ('B', 2.)], dtype=[('A', '|S3'), ('B', float)])
  456:         w = np.array(
  457:             [(1, (2, 3.0, ())), (4, (5, 6.0, ()))],
  458:             dtype=[('a', int), ('b', [('ba', float), ('bb', int), ('bc', [])])])
  459:         self.data = (w, x, y, z)
  460: 
  461:     def test_solo(self):
  462:         # Test merge_arrays on a single array.
  463:         (_, x, _, z) = self.data
  464: 
  465:         test = merge_arrays(x)
  466:         control = np.array([(1,), (2,)], dtype=[('f0', int)])
  467:         assert_equal(test, control)
  468:         test = merge_arrays((x,))
  469:         assert_equal(test, control)
  470: 
  471:         test = merge_arrays(z, flatten=False)
  472:         assert_equal(test, z)
  473:         test = merge_arrays(z, flatten=True)
  474:         assert_equal(test, z)
  475: 
  476:     def test_solo_w_flatten(self):
  477:         # Test merge_arrays on a single array w & w/o flattening
  478:         w = self.data[0]
  479:         test = merge_arrays(w, flatten=False)
  480:         assert_equal(test, w)
  481: 
  482:         test = merge_arrays(w, flatten=True)
  483:         control = np.array([(1, 2, 3.0), (4, 5, 6.0)],
  484:                            dtype=[('a', int), ('ba', float), ('bb', int)])
  485:         assert_equal(test, control)
  486: 
  487:     def test_standard(self):
  488:         # Test standard & standard
  489:         # Test merge arrays
  490:         (_, x, y, _) = self.data
  491:         test = merge_arrays((x, y), usemask=False)
  492:         control = np.array([(1, 10), (2, 20), (-1, 30)],
  493:                            dtype=[('f0', int), ('f1', int)])
  494:         assert_equal(test, control)
  495: 
  496:         test = merge_arrays((x, y), usemask=True)
  497:         control = ma.array([(1, 10), (2, 20), (-1, 30)],
  498:                            mask=[(0, 0), (0, 0), (1, 0)],
  499:                            dtype=[('f0', int), ('f1', int)])
  500:         assert_equal(test, control)
  501:         assert_equal(test.mask, control.mask)
  502: 
  503:     def test_flatten(self):
  504:         # Test standard & flexible
  505:         (_, x, _, z) = self.data
  506:         test = merge_arrays((x, z), flatten=True)
  507:         control = np.array([(1, 'A', 1.), (2, 'B', 2.)],
  508:                            dtype=[('f0', int), ('A', '|S3'), ('B', float)])
  509:         assert_equal(test, control)
  510: 
  511:         test = merge_arrays((x, z), flatten=False)
  512:         control = np.array([(1, ('A', 1.)), (2, ('B', 2.))],
  513:                            dtype=[('f0', int),
  514:                                   ('f1', [('A', '|S3'), ('B', float)])])
  515:         assert_equal(test, control)
  516: 
  517:     def test_flatten_wflexible(self):
  518:         # Test flatten standard & nested
  519:         (w, x, _, _) = self.data
  520:         test = merge_arrays((x, w), flatten=True)
  521:         control = np.array([(1, 1, 2, 3.0), (2, 4, 5, 6.0)],
  522:                            dtype=[('f0', int),
  523:                                   ('a', int), ('ba', float), ('bb', int)])
  524:         assert_equal(test, control)
  525: 
  526:         test = merge_arrays((x, w), flatten=False)
  527:         controldtype = [('f0', int),
  528:                                 ('f1', [('a', int),
  529:                                         ('b', [('ba', float), ('bb', int), ('bc', [])])])]
  530:         control = np.array([(1., (1, (2, 3.0, ()))), (2, (4, (5, 6.0, ())))],
  531:                            dtype=controldtype)
  532:         assert_equal(test, control)
  533: 
  534:     def test_wmasked_arrays(self):
  535:         # Test merge_arrays masked arrays
  536:         (_, x, _, _) = self.data
  537:         mx = ma.array([1, 2, 3], mask=[1, 0, 0])
  538:         test = merge_arrays((x, mx), usemask=True)
  539:         control = ma.array([(1, 1), (2, 2), (-1, 3)],
  540:                            mask=[(0, 1), (0, 0), (1, 0)],
  541:                            dtype=[('f0', int), ('f1', int)])
  542:         assert_equal(test, control)
  543:         test = merge_arrays((x, mx), usemask=True, asrecarray=True)
  544:         assert_equal(test, control)
  545:         assert_(isinstance(test, MaskedRecords))
  546: 
  547:     def test_w_singlefield(self):
  548:         # Test single field
  549:         test = merge_arrays((np.array([1, 2]).view([('a', int)]),
  550:                              np.array([10., 20., 30.])),)
  551:         control = ma.array([(1, 10.), (2, 20.), (-1, 30.)],
  552:                            mask=[(0, 0), (0, 0), (1, 0)],
  553:                            dtype=[('a', int), ('f1', float)])
  554:         assert_equal(test, control)
  555: 
  556:     def test_w_shorter_flex(self):
  557:         # Test merge_arrays w/ a shorter flexndarray.
  558:         z = self.data[-1]
  559: 
  560:         # Fixme, this test looks incomplete and broken
  561:         #test = merge_arrays((z, np.array([10, 20, 30]).view([('C', int)])))
  562:         #control = np.array([('A', 1., 10), ('B', 2., 20), ('-1', -1, 20)],
  563:         #                   dtype=[('A', '|S3'), ('B', float), ('C', int)])
  564:         #assert_equal(test, control)
  565: 
  566:         merge_arrays((z, np.array([10, 20, 30]).view([('C', int)])))
  567:         np.array([('A', 1., 10), ('B', 2., 20), ('-1', -1, 20)],
  568:                  dtype=[('A', '|S3'), ('B', float), ('C', int)])
  569: 
  570:     def test_singlerecord(self):
  571:         (_, x, y, z) = self.data
  572:         test = merge_arrays((x[0], y[0], z[0]), usemask=False)
  573:         control = np.array([(1, 10, ('A', 1))],
  574:                            dtype=[('f0', int),
  575:                                   ('f1', int),
  576:                                   ('f2', [('A', '|S3'), ('B', float)])])
  577:         assert_equal(test, control)
  578: 
  579: 
  580: class TestAppendFields:
  581:     # Test append_fields
  582: 
  583:     def setup_method(self):
  584:         x = np.array([1, 2, ])
  585:         y = np.array([10, 20, 30])
  586:         z = np.array(
  587:             [('A', 1.), ('B', 2.)], dtype=[('A', '|S3'), ('B', float)])
  588:         w = np.array([(1, (2, 3.0)), (4, (5, 6.0))],
  589:                      dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
  590:         self.data = (w, x, y, z)
  591: 
  592:     def test_append_single(self):
  593:         # Test simple case
  594:         (_, x, _, _) = self.data
  595:         test = append_fields(x, 'A', data=[10, 20, 30])
  596:         control = ma.array([(1, 10), (2, 20), (-1, 30)],
  597:                            mask=[(0, 0), (0, 0), (1, 0)],
  598:                            dtype=[('f0', int), ('A', int)],)
  599:         assert_equal(test, control)
  600: 
  601:     def test_append_double(self):
  602:         # Test simple case
  603:         (_, x, _, _) = self.data
  604:         test = append_fields(x, ('A', 'B'), data=[[10, 20, 30], [100, 200]])
  605:         control = ma.array([(1, 10, 100), (2, 20, 200), (-1, 30, -1)],
  606:                            mask=[(0, 0, 0), (0, 0, 0), (1, 0, 1)],
  607:                            dtype=[('f0', int), ('A', int), ('B', int)],)
  608:         assert_equal(test, control)
  609: 
  610:     def test_append_on_flex(self):
  611:         # Test append_fields on flexible type arrays
  612:         z = self.data[-1]
  613:         test = append_fields(z, 'C', data=[10, 20, 30])
  614:         control = ma.array([('A', 1., 10), ('B', 2., 20), (-1, -1., 30)],
  615:                            mask=[(0, 0, 0), (0, 0, 0), (1, 1, 0)],
  616:                            dtype=[('A', '|S3'), ('B', float), ('C', int)],)
  617:         assert_equal(test, control)
  618: 
  619:     def test_append_on_nested(self):
  620:         # Test append_fields on nested fields
  621:         w = self.data[0]
  622:         test = append_fields(w, 'C', data=[10, 20, 30])
  623:         control = ma.array([(1, (2, 3.0), 10),
  624:                             (4, (5, 6.0), 20),
  625:                             (-1, (-1, -1.), 30)],
  626:                            mask=[(
  627:                                0, (0, 0), 0), (0, (0, 0), 0), (1, (1, 1), 0)],
  628:                            dtype=[('a', int),
  629:                                   ('b', [('ba', float), ('bb', int)]),
  630:                                   ('C', int)],)
  631:         assert_equal(test, control)
  632: 
  633: 
  634: class TestStackArrays:
  635:     # Test stack_arrays
  636:     def setup_method(self):
  637:         x = np.array([1, 2, ])
  638:         y = np.array([10, 20, 30])
  639:         z = np.array(
  640:             [('A', 1.), ('B', 2.)], dtype=[('A', '|S3'), ('B', float)])
  641:         w = np.array([(1, (2, 3.0)), (4, (5, 6.0))],
  642:                      dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
  643:         self.data = (w, x, y, z)
  644: 
  645:     def test_solo(self):
  646:         # Test stack_arrays on single arrays
  647:         (_, x, _, _) = self.data
  648:         test = stack_arrays((x,))
  649:         assert_equal(test, x)
  650:         assert_(test is x)
  651: 
  652:         test = stack_arrays(x)
  653:         assert_equal(test, x)
  654:         assert_(test is x)
  655: 
  656:     def test_unnamed_fields(self):
  657:         # Tests combinations of arrays w/o named fields
  658:         (_, x, y, _) = self.data
  659: 
  660:         test = stack_arrays((x, x), usemask=False)
  661:         control = np.array([1, 2, 1, 2])
  662:         assert_equal(test, control)
  663: 
  664:         test = stack_arrays((x, y), usemask=False)
  665:         control = np.array([1, 2, 10, 20, 30])
  666:         assert_equal(test, control)
  667: 
  668:         test = stack_arrays((y, x), usemask=False)
  669:         control = np.array([10, 20, 30, 1, 2])
  670:         assert_equal(test, control)
  671: 
  672:     def test_unnamed_and_named_fields(self):
  673:         # Test combination of arrays w/ & w/o named fields
  674:         (_, x, _, z) = self.data
  675: 
  676:         test = stack_arrays((x, z))
  677:         control = ma.array([(1, -1, -1), (2, -1, -1),
  678:                             (-1, 'A', 1), (-1, 'B', 2)],
  679:                            mask=[(0, 1, 1), (0, 1, 1),
  680:                                  (1, 0, 0), (1, 0, 0)],
  681:                            dtype=[('f0', int), ('A', '|S3'), ('B', float)])
  682:         assert_equal(test, control)
  683:         assert_equal(test.mask, control.mask)
  684: 
  685:         test = stack_arrays((z, x))
  686:         control = ma.array([('A', 1, -1), ('B', 2, -1),
  687:                             (-1, -1, 1), (-1, -1, 2), ],
  688:                            mask=[(0, 0, 1), (0, 0, 1),
  689:                                  (1, 1, 0), (1, 1, 0)],
  690:                            dtype=[('A', '|S3'), ('B', float), ('f2', int)])
  691:         assert_equal(test, control)
  692:         assert_equal(test.mask, control.mask)
  693: 
  694:         test = stack_arrays((z, z, x))
  695:         control = ma.array([('A', 1, -1), ('B', 2, -1),
  696:                             ('A', 1, -1), ('B', 2, -1),
  697:                             (-1, -1, 1), (-1, -1, 2), ],
  698:                            mask=[(0, 0, 1), (0, 0, 1),
  699:                                  (0, 0, 1), (0, 0, 1),
  700:                                  (1, 1, 0), (1, 1, 0)],
  701:                            dtype=[('A', '|S3'), ('B', float), ('f2', int)])
  702:         assert_equal(test, control)
  703: 
  704:     def test_matching_named_fields(self):
  705:         # Test combination of arrays w/ matching field names
  706:         (_, x, _, z) = self.data
  707:         zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
  708:                       dtype=[('A', '|S3'), ('B', float), ('C', float)])
  709:         test = stack_arrays((z, zz))
  710:         control = ma.array([('A', 1, -1), ('B', 2, -1),
  711:                             (
  712:                                 'a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
  713:                            dtype=[('A', '|S3'), ('B', float), ('C', float)],
  714:                            mask=[(0, 0, 1), (0, 0, 1),
  715:                                  (0, 0, 0), (0, 0, 0), (0, 0, 0)])
  716:         assert_equal(test, control)
  717:         assert_equal(test.mask, control.mask)
  718: 
  719:         test = stack_arrays((z, zz, x))
  720:         ndtype = [('A', '|S3'), ('B', float), ('C', float), ('f3', int)]
  721:         control = ma.array([('A', 1, -1, -1), ('B', 2, -1, -1),
  722:                             ('a', 10., 100., -1), ('b', 20., 200., -1),
  723:                             ('c', 30., 300., -1),
  724:                             (-1, -1, -1, 1), (-1, -1, -1, 2)],
  725:                            dtype=ndtype,
  726:                            mask=[(0, 0, 1, 1), (0, 0, 1, 1),
  727:                                  (0, 0, 0, 1), (0, 0, 0, 1), (0, 0, 0, 1),
  728:                                  (1, 1, 1, 0), (1, 1, 1, 0)])
  729:         assert_equal(test, control)
  730:         assert_equal(test.mask, control.mask)
  731: 
  732:     def test_defaults(self):
  733:         # Test defaults: no exception raised if keys of defaults are not fields.
  734:         (_, _, _, z) = self.data
  735:         zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
  736:                       dtype=[('A', '|S3'), ('B', float), ('C', float)])
  737:         defaults = {'A': '???', 'B': -999., 'C': -9999., 'D': -99999.}
  738:         test = stack_arrays((z, zz), defaults=defaults)
  739:         control = ma.array([('A', 1, -9999.), ('B', 2, -9999.),
  740:                             (
  741:                                 'a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
  742:                            dtype=[('A', '|S3'), ('B', float), ('C', float)],
  743:                            mask=[(0, 0, 1), (0, 0, 1),
  744:                                  (0, 0, 0), (0, 0, 0), (0, 0, 0)])
  745:         assert_equal(test, control)
  746:         assert_equal(test.data, control.data)
  747:         assert_equal(test.mask, control.mask)
  748: 
  749:     def test_autoconversion(self):
  750:         # Tests autoconversion
  751:         adtype = [('A', int), ('B', bool), ('C', float)]
  752:         a = ma.array([(1, 2, 3)], mask=[(0, 1, 0)], dtype=adtype)
  753:         bdtype = [('A', int), ('B', float), ('C', float)]
  754:         b = ma.array([(4, 5, 6)], dtype=bdtype)
  755:         control = ma.array([(1, 2, 3), (4, 5, 6)], mask=[(0, 1, 0), (0, 0, 0)],
  756:                            dtype=bdtype)
  757:         test = stack_arrays((a, b), autoconvert=True)
  758:         assert_equal(test, control)
  759:         assert_equal(test.mask, control.mask)
  760:         with assert_raises(TypeError):
  761:             stack_arrays((a, b), autoconvert=False)
  762: 
  763:     def test_checktitles(self):
  764:         # Test using titles in the field names
  765:         adtype = [(('a', 'A'), int), (('b', 'B'), bool), (('c', 'C'), float)]
  766:         a = ma.array([(1, 2, 3)], mask=[(0, 1, 0)], dtype=adtype)
  767:         bdtype = [(('a', 'A'), int), (('b', 'B'), bool), (('c', 'C'), float)]
  768:         b = ma.array([(4, 5, 6)], dtype=bdtype)
  769:         test = stack_arrays((a, b))
  770:         control = ma.array([(1, 2, 3), (4, 5, 6)], mask=[(0, 1, 0), (0, 0, 0)],
  771:                            dtype=bdtype)
  772:         assert_equal(test, control)
  773:         assert_equal(test.mask, control.mask)
  774: 
  775:     def test_subdtype(self):
  776:         z = np.array([
  777:             ('A', 1), ('B', 2)
  778:         ], dtype=[('A', '|S3'), ('B', float, (1,))])
  779:         zz = np.array([
  780:             ('a', [10.], 100.), ('b', [20.], 200.), ('c', [30.], 300.)
  781:         ], dtype=[('A', '|S3'), ('B', float, (1,)), ('C', float)])
  782: 
  783:         res = stack_arrays((z, zz))
  784:         expected = ma.array(
  785:             data=[
  786:                 (b'A', [1.0], 0),
  787:                 (b'B', [2.0], 0),
  788:                 (b'a', [10.0], 100.0),
  789:                 (b'b', [20.0], 200.0),
  790:                 (b'c', [30.0], 300.0)],
  791:             mask=[
  792:                 (False, [False], True),
  793:                 (False, [False], True),
  794:                 (False, [False], False),
  795:                 (False, [False], False),
  796:                 (False, [False], False)
  797:             ],
  798:             dtype=zz.dtype
  799:         )
  800:         assert_equal(res.dtype, expected.dtype)
  801:         assert_equal(res, expected)
  802:         assert_equal(res.mask, expected.mask)
  803: 
  804: 
  805: class TestJoinBy:
  806:     def setup_method(self):
  807:         self.a = np.array(list(zip(np.arange(10), np.arange(50, 60),
  808:                                    np.arange(100, 110))),
  809:                           dtype=[('a', int), ('b', int), ('c', int)])
  810:         self.b = np.array(list(zip(np.arange(5, 15), np.arange(65, 75),
  811:                                    np.arange(100, 110))),
  812:                           dtype=[('a', int), ('b', int), ('d', int)])
  813: 
  814:     def test_inner_join(self):
  815:         # Basic test of join_by
  816:         a, b = self.a, self.b
  817: 
  818:         test = join_by('a', a, b, jointype='inner')
  819:         control = np.array([(5, 55, 65, 105, 100), (6, 56, 66, 106, 101),
  820:                             (7, 57, 67, 107, 102), (8, 58, 68, 108, 103),
  821:                             (9, 59, 69, 109, 104)],
  822:                            dtype=[('a', int), ('b1', int), ('b2', int),
  823:                                   ('c', int), ('d', int)])
  824:         assert_equal(test, control)
  825: 
  826:     def test_join(self):
  827:         a, b = self.a, self.b
  828: 
  829:         # Fixme, this test is broken
  830:         #test = join_by(('a', 'b'), a, b)
  831:         #control = np.array([(5, 55, 105, 100), (6, 56, 106, 101),
  832:         #                    (7, 57, 107, 102), (8, 58, 108, 103),
  833:         #                    (9, 59, 109, 104)],
  834:         #                   dtype=[('a', int), ('b', int),
  835:         #                          ('c', int), ('d', int)])
  836:         #assert_equal(test, control)
  837: 
  838:         join_by(('a', 'b'), a, b)
  839:         np.array([(5, 55, 105, 100), (6, 56, 106, 101),
  840:                   (7, 57, 107, 102), (8, 58, 108, 103),
  841:                   (9, 59, 109, 104)],
  842:                   dtype=[('a', int), ('b', int),
  843:                          ('c', int), ('d', int)])
  844: 
  845:     def test_join_subdtype(self):
  846:         # tests the bug in https://stackoverflow.com/q/44769632/102441
  847:         foo = np.array([(1,)],
  848:                        dtype=[('key', int)])
  849:         bar = np.array([(1, np.array([1, 2, 3]))],
  850:                        dtype=[('key', int), ('value', 'uint16', 3)])
  851:         res = join_by('key', foo, bar)
  852:         assert_equal(res, bar.view(ma.MaskedArray))
  853: 
  854:     def test_outer_join(self):
  855:         a, b = self.a, self.b
  856: 
  857:         test = join_by(('a', 'b'), a, b, 'outer')
  858:         control = ma.array([(0, 50, 100, -1), (1, 51, 101, -1),
  859:                             (2, 52, 102, -1), (3, 53, 103, -1),
  860:                             (4, 54, 104, -1), (5, 55, 105, -1),
  861:                             (5, 65, -1, 100), (6, 56, 106, -1),
  862:                             (6, 66, -1, 101), (7, 57, 107, -1),
  863:                             (7, 67, -1, 102), (8, 58, 108, -1),
  864:                             (8, 68, -1, 103), (9, 59, 109, -1),
  865:                             (9, 69, -1, 104), (10, 70, -1, 105),
  866:                             (11, 71, -1, 106), (12, 72, -1, 107),
  867:                             (13, 73, -1, 108), (14, 74, -1, 109)],
  868:                            mask=[(0, 0, 0, 1), (0, 0, 0, 1),
  869:                                  (0, 0, 0, 1), (0, 0, 0, 1),
  870:                                  (0, 0, 0, 1), (0, 0, 0, 1),
  871:                                  (0, 0, 1, 0), (0, 0, 0, 1),
  872:                                  (0, 0, 1, 0), (0, 0, 0, 1),
  873:                                  (0, 0, 1, 0), (0, 0, 0, 1),
  874:                                  (0, 0, 1, 0), (0, 0, 0, 1),
  875:                                  (0, 0, 1, 0), (0, 0, 1, 0),
  876:                                  (0, 0, 1, 0), (0, 0, 1, 0),
  877:                                  (0, 0, 1, 0), (0, 0, 1, 0)],
  878:                            dtype=[('a', int), ('b', int),
  879:                                   ('c', int), ('d', int)])
  880:         assert_equal(test, control)
  881: 
  882:     def test_leftouter_join(self):
  883:         a, b = self.a, self.b
  884: 
  885:         test = join_by(('a', 'b'), a, b, 'leftouter')
  886:         control = ma.array([(0, 50, 100, -1), (1, 51, 101, -1),
  887:                             (2, 52, 102, -1), (3, 53, 103, -1),
  888:                             (4, 54, 104, -1), (5, 55, 105, -1),
  889:                             (6, 56, 106, -1), (7, 57, 107, -1),
  890:                             (8, 58, 108, -1), (9, 59, 109, -1)],
  891:                            mask=[(0, 0, 0, 1), (0, 0, 0, 1),
  892:                                  (0, 0, 0, 1), (0, 0, 0, 1),
  893:                                  (0, 0, 0, 1), (0, 0, 0, 1),
  894:                                  (0, 0, 0, 1), (0, 0, 0, 1),
  895:                                  (0, 0, 0, 1), (0, 0, 0, 1)],
  896:                            dtype=[('a', int), ('b', int), ('c', int), ('d', int)])
  897:         assert_equal(test, control)
  898: 
  899:     def test_different_field_order(self):
  900:         # gh-8940
  901:         a = np.zeros(3, dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'u1')])
  902:         b = np.ones(3, dtype=[('c', 'u1'), ('b', 'f4'), ('a', 'i4')])
  903:         # this should not give a FutureWarning:
  904:         j = join_by(['c', 'b'], a, b, jointype='inner', usemask=False)
  905:         assert_equal(j.dtype.names, ['b', 'c', 'a1', 'a2'])
  906: 
  907:     def test_duplicate_keys(self):
  908:         a = np.zeros(3, dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'u1')])
  909:         b = np.ones(3, dtype=[('c', 'u1'), ('b', 'f4'), ('a', 'i4')])
  910:         assert_raises(ValueError, join_by, ['a', 'b', 'b'], a, b)
  911: 
  912:     def test_same_name_different_dtypes_key(self):
  913:         a_dtype = np.dtype([('key', 'S5'), ('value', '<f4')])
  914:         b_dtype = np.dtype([('key', 'S10'), ('value', '<f4')])
  915:         expected_dtype = np.dtype([
  916:             ('key', 'S10'), ('value1', '<f4'), ('value2', '<f4')])
  917: 
  918:         a = np.array([('Sarah',  8.0), ('John', 6.0)], dtype=a_dtype)
  919:         b = np.array([('Sarah', 10.0), ('John', 7.0)], dtype=b_dtype)
  920:         res = join_by('key', a, b)
  921: 
  922:         assert_equal(res.dtype, expected_dtype)
  923: 
  924:     def test_same_name_different_dtypes(self):
  925:         # gh-9338
  926:         a_dtype = np.dtype([('key', 'S10'), ('value', '<f4')])
  927:         b_dtype = np.dtype([('key', 'S10'), ('value', '<f8')])
  928:         expected_dtype = np.dtype([
  929:             ('key', '|S10'), ('value1', '<f4'), ('value2', '<f8')])
  930: 
  931:         a = np.array([('Sarah',  8.0), ('John', 6.0)], dtype=a_dtype)
  932:         b = np.array([('Sarah', 10.0), ('John', 7.0)], dtype=b_dtype)
  933:         res = join_by('key', a, b)
  934: 
  935:         assert_equal(res.dtype, expected_dtype)
  936: 
  937:     def test_subarray_key(self):
  938:         a_dtype = np.dtype([('pos', int, 3), ('f', '<f4')])
  939:         a = np.array([([1, 1, 1], np.pi), ([1, 2, 3], 0.0)], dtype=a_dtype)
  940: 
  941:         b_dtype = np.dtype([('pos', int, 3), ('g', '<f4')])
  942:         b = np.array([([1, 1, 1], 3), ([3, 2, 1], 0.0)], dtype=b_dtype)
  943: 
  944:         expected_dtype = np.dtype([('pos', int, 3), ('f', '<f4'), ('g', '<f4')])
  945:         expected = np.array([([1, 1, 1], np.pi, 3)], dtype=expected_dtype)
  946: 
  947:         res = join_by('pos', a, b)
  948:         assert_equal(res.dtype, expected_dtype)
  949:         assert_equal(res, expected)
  950: 
  951:     def test_padded_dtype(self):
  952:         dt = np.dtype('i1,f4', align=True)
  953:         dt.names = ('k', 'v')
  954:         assert_(len(dt.descr), 3)  # padding field is inserted
  955: 
  956:         a = np.array([(1, 3), (3, 2)], dt)
  957:         b = np.array([(1, 1), (2, 2)], dt)
  958:         res = join_by('k', a, b)
  959: 
  960:         # no padding fields remain
  961:         expected_dtype = np.dtype([
  962:             ('k', 'i1'), ('v1', 'f4'), ('v2', 'f4')
  963:         ])
  964: 
  965:         assert_equal(res.dtype, expected_dtype)
  966: 
  967: 
  968: class TestJoinBy2:
  969:     @classmethod
  970:     def setup_method(cls):
  971:         cls.a = np.array(list(zip(np.arange(10), np.arange(50, 60),
  972:                                   np.arange(100, 110))),
  973:                          dtype=[('a', int), ('b', int), ('c', int)])
  974:         cls.b = np.array(list(zip(np.arange(10), np.arange(65, 75),
  975:                                   np.arange(100, 110))),
  976:                          dtype=[('a', int), ('b', int), ('d', int)])
  977: 
  978:     def test_no_r1postfix(self):
  979:         # Basic test of join_by no_r1postfix
  980:         a, b = self.a, self.b
  981: 
  982:         test = join_by(
  983:             'a', a, b, r1postfix='', r2postfix='2', jointype='inner')
  984:         control = np.array([(0, 50, 65, 100, 100), (1, 51, 66, 101, 101),
  985:                             (2, 52, 67, 102, 102), (3, 53, 68, 103, 103),
  986:                             (4, 54, 69, 104, 104), (5, 55, 70, 105, 105),
  987:                             (6, 56, 71, 106, 106), (7, 57, 72, 107, 107),
  988:                             (8, 58, 73, 108, 108), (9, 59, 74, 109, 109)],
  989:                            dtype=[('a', int), ('b', int), ('b2', int),
  990:                                   ('c', int), ('d', int)])
  991:         assert_equal(test, control)
  992: 
  993:     def test_no_postfix(self):
  994:         assert_raises(ValueError, join_by, 'a', self.a, self.b,
  995:                       r1postfix='', r2postfix='')
  996: 
  997:     def test_no_r2postfix(self):
  998:         # Basic test of join_by no_r2postfix
  999:         a, b = self.a, self.b
 1000: 
 1001:         test = join_by(
 1002:             'a', a, b, r1postfix='1', r2postfix='', jointype='inner')
 1003:         control = np.array([(0, 50, 65, 100, 100), (1, 51, 66, 101, 101),
 1004:                             (2, 52, 67, 102, 102), (3, 53, 68, 103, 103),
 1005:                             (4, 54, 69, 104, 104), (5, 55, 70, 105, 105),
 1006:                             (6, 56, 71, 106, 106), (7, 57, 72, 107, 107),
 1007:                             (8, 58, 73, 108, 108), (9, 59, 74, 109, 109)],
 1008:                            dtype=[('a', int), ('b1', int), ('b', int),
 1009:                                   ('c', int), ('d', int)])
 1010:         assert_equal(test, control)
 1011: 
 1012:     def test_two_keys_two_vars(self):
 1013:         a = np.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2),
 1014:                               np.arange(50, 60), np.arange(10, 20))),
 1015:                      dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
 1016: 
 1017:         b = np.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2),
 1018:                               np.arange(65, 75), np.arange(0, 10))),
 1019:                      dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
 1020: 
 1021:         control = np.array([(10, 0, 50, 65, 10, 0), (11, 0, 51, 66, 11, 1),
 1022:                             (10, 1, 52, 67, 12, 2), (11, 1, 53, 68, 13, 3),
 1023:                             (10, 2, 54, 69, 14, 4), (11, 2, 55, 70, 15, 5),
 1024:                             (10, 3, 56, 71, 16, 6), (11, 3, 57, 72, 17, 7),
 1025:                             (10, 4, 58, 73, 18, 8), (11, 4, 59, 74, 19, 9)],
 1026:                            dtype=[('k', int), ('a', int), ('b1', int),
 1027:                                   ('b2', int), ('c1', int), ('c2', int)])
 1028:         test = join_by(
 1029:             ['a', 'k'], a, b, r1postfix='1', r2postfix='2', jointype='inner')
 1030:         assert_equal(test.dtype, control.dtype)
 1031:         assert_equal(test, control)
 1032: 
 1033: class TestAppendFieldsObj:
 1034:     """
 1035:     Test append_fields with arrays containing objects
 1036:     """
 1037:     # https://github.com/numpy/numpy/issues/2346
 1038: 
 1039:     def setup_method(self):
 1040:         from datetime import date
 1041:         self.data = {'obj': date(2000, 1, 1)}
 1042: 
 1043:     def test_append_to_objects(self):
 1044:         "Test append_fields when the base array contains objects"
 1045:         obj = self.data['obj']
 1046:         x = np.array([(obj, 1.), (obj, 2.)],
 1047:                       dtype=[('A', object), ('B', float)])
 1048:         y = np.array([10, 20], dtype=int)
 1049:         test = append_fields(x, 'C', data=y, usemask=False)
 1050:         control = np.array([(obj, 1.0, 10), (obj, 2.0, 20)],
 1051:                            dtype=[('A', object), ('B', float), ('C', int)])
 1052:         assert_equal(test, control)
