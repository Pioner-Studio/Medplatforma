    1: """A module containing the `_NestedSequence` protocol."""
    2: 
    3: from typing import TYPE_CHECKING, Any, Protocol, TypeVar, runtime_checkable
    4: 
    5: if TYPE_CHECKING:
    6:     from collections.abc import Iterator
    7: 
    8: __all__ = ["_NestedSequence"]
    9: 
   10: _T_co = TypeVar("_T_co", covariant=True)
   11: 
   12: 
   13: @runtime_checkable
   14: class _NestedSequence(Protocol[_T_co]):
   15:     """A protocol for representing nested sequences.
   16: 
   17:     Warning
   18:     -------
   19:     `_NestedSequence` currently does not work in combination with typevars,
   20:     *e.g.* ``def func(a: _NestedSequnce[T]) -> T: ...``.
   21: 
   22:     See Also
   23:     --------
   24:     collections.abc.Sequence
   25:         ABCs for read-only and mutable :term:`sequences`.
   26: 
   27:     Examples
   28:     --------
   29:     .. code-block:: python
   30: 
   31:         >>> from typing import TYPE_CHECKING
   32:         >>> import numpy as np
   33:         >>> from numpy._typing import _NestedSequence
   34: 
   35:         >>> def get_dtype(seq: _NestedSequence[float]) -> np.dtype[np.float64]:
   36:         ...     return np.asarray(seq).dtype
   37: 
   38:         >>> a = get_dtype([1.0])
   39:         >>> b = get_dtype([[1.0]])
   40:         >>> c = get_dtype([[[1.0]]])
   41:         >>> d = get_dtype([[[[1.0]]]])
   42: 
   43:         >>> if TYPE_CHECKING:
   44:         ...     reveal_locals()
   45:         ...     # note: Revealed local types are:
   46:         ...     # note:     a: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
   47:         ...     # note:     b: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
   48:         ...     # note:     c: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
   49:         ...     # note:     d: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
   50: 
   51:     """
   52: 
   53:     def __len__(self, /) -> int:
   54:         """Implement ``len(self)``."""
   55:         raise NotImplementedError
   56: 
   57:     def __getitem__(self, index: int, /) -> "_T_co | _NestedSequence[_T_co]":
   58:         """Implement ``self[x]``."""
   59:         raise NotImplementedError
   60: 
   61:     def __contains__(self, x: object, /) -> bool:
   62:         """Implement ``x in self``."""
   63:         raise NotImplementedError
   64: 
   65:     def __iter__(self, /) -> "Iterator[_T_co | _NestedSequence[_T_co]]":
   66:         """Implement ``iter(self)``."""
   67:         raise NotImplementedError
   68: 
   69:     def __reversed__(self, /) -> "Iterator[_T_co | _NestedSequence[_T_co]]":
   70:         """Implement ``reversed(self)``."""
   71:         raise NotImplementedError
   72: 
   73:     def count(self, value: Any, /) -> int:
   74:         """Return the number of occurrences of `value`."""
   75:         raise NotImplementedError
   76: 
   77:     def index(self, value: Any, /) -> int:
   78:         """Return the first index of `value`."""
   79:         raise NotImplementedError
