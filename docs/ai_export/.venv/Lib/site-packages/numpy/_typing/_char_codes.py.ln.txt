    1: from typing import Literal
    2: 
    3: _BoolCodes = Literal[
    4:     "bool", "bool_",
    5:     "?", "|?", "=?", "<?", ">?",
    6:     "b1", "|b1", "=b1", "<b1", ">b1",
    7: ]  # fmt: skip
    8: 
    9: _UInt8Codes = Literal["uint8", "u1", "|u1", "=u1", "<u1", ">u1"]
   10: _UInt16Codes = Literal["uint16", "u2", "|u2", "=u2", "<u2", ">u2"]
   11: _UInt32Codes = Literal["uint32", "u4", "|u4", "=u4", "<u4", ">u4"]
   12: _UInt64Codes = Literal["uint64", "u8", "|u8", "=u8", "<u8", ">u8"]
   13: 
   14: _Int8Codes = Literal["int8", "i1", "|i1", "=i1", "<i1", ">i1"]
   15: _Int16Codes = Literal["int16", "i2", "|i2", "=i2", "<i2", ">i2"]
   16: _Int32Codes = Literal["int32", "i4", "|i4", "=i4", "<i4", ">i4"]
   17: _Int64Codes = Literal["int64", "i8", "|i8", "=i8", "<i8", ">i8"]
   18: 
   19: _Float16Codes = Literal["float16", "f2", "|f2", "=f2", "<f2", ">f2"]
   20: _Float32Codes = Literal["float32", "f4", "|f4", "=f4", "<f4", ">f4"]
   21: _Float64Codes = Literal["float64", "f8", "|f8", "=f8", "<f8", ">f8"]
   22: 
   23: _Complex64Codes = Literal["complex64", "c8", "|c8", "=c8", "<c8", ">c8"]
   24: _Complex128Codes = Literal["complex128", "c16", "|c16", "=c16", "<c16", ">c16"]
   25: 
   26: _ByteCodes = Literal["byte", "b", "|b", "=b", "<b", ">b"]
   27: _ShortCodes = Literal["short", "h", "|h", "=h", "<h", ">h"]
   28: _IntCCodes = Literal["intc", "i", "|i", "=i", "<i", ">i"]
   29: _IntPCodes = Literal["intp", "int", "int_", "n", "|n", "=n", "<n", ">n"]
   30: _LongCodes = Literal["long", "l", "|l", "=l", "<l", ">l"]
   31: _IntCodes = _IntPCodes
   32: _LongLongCodes = Literal["longlong", "q", "|q", "=q", "<q", ">q"]
   33: 
   34: _UByteCodes = Literal["ubyte", "B", "|B", "=B", "<B", ">B"]
   35: _UShortCodes = Literal["ushort", "H", "|H", "=H", "<H", ">H"]
   36: _UIntCCodes = Literal["uintc", "I", "|I", "=I", "<I", ">I"]
   37: _UIntPCodes = Literal["uintp", "uint", "N", "|N", "=N", "<N", ">N"]
   38: _ULongCodes = Literal["ulong", "L", "|L", "=L", "<L", ">L"]
   39: _UIntCodes = _UIntPCodes
   40: _ULongLongCodes = Literal["ulonglong", "Q", "|Q", "=Q", "<Q", ">Q"]
   41: 
   42: _HalfCodes = Literal["half", "e", "|e", "=e", "<e", ">e"]
   43: _SingleCodes = Literal["single", "f", "|f", "=f", "<f", ">f"]
   44: _DoubleCodes = Literal["double", "float", "d", "|d", "=d", "<d", ">d"]
   45: _LongDoubleCodes = Literal["longdouble", "g", "|g", "=g", "<g", ">g"]
   46: 
   47: _CSingleCodes = Literal["csingle", "F", "|F", "=F", "<F", ">F"]
   48: _CDoubleCodes = Literal["cdouble", "complex", "D", "|D", "=D", "<D", ">D"]
   49: _CLongDoubleCodes = Literal["clongdouble", "G", "|G", "=G", "<G", ">G"]
   50: 
   51: _StrCodes = Literal["str", "str_", "unicode", "U", "|U", "=U", "<U", ">U"]
   52: _BytesCodes = Literal["bytes", "bytes_", "S", "|S", "=S", "<S", ">S"]
   53: _VoidCodes = Literal["void", "V", "|V", "=V", "<V", ">V"]
   54: _ObjectCodes = Literal["object", "object_", "O", "|O", "=O", "<O", ">O"]
   55: 
   56: _DT64Codes = Literal[
   57:     "datetime64", "|datetime64", "=datetime64",
   58:     "<datetime64", ">datetime64",
   59:     "datetime64[Y]", "|datetime64[Y]", "=datetime64[Y]",
   60:     "<datetime64[Y]", ">datetime64[Y]",
   61:     "datetime64[M]", "|datetime64[M]", "=datetime64[M]",
   62:     "<datetime64[M]", ">datetime64[M]",
   63:     "datetime64[W]", "|datetime64[W]", "=datetime64[W]",
   64:     "<datetime64[W]", ">datetime64[W]",
   65:     "datetime64[D]", "|datetime64[D]", "=datetime64[D]",
   66:     "<datetime64[D]", ">datetime64[D]",
   67:     "datetime64[h]", "|datetime64[h]", "=datetime64[h]",
   68:     "<datetime64[h]", ">datetime64[h]",
   69:     "datetime64[m]", "|datetime64[m]", "=datetime64[m]",
   70:     "<datetime64[m]", ">datetime64[m]",
   71:     "datetime64[s]", "|datetime64[s]", "=datetime64[s]",
   72:     "<datetime64[s]", ">datetime64[s]",
   73:     "datetime64[ms]", "|datetime64[ms]", "=datetime64[ms]",
   74:     "<datetime64[ms]", ">datetime64[ms]",
   75:     "datetime64[us]", "|datetime64[us]", "=datetime64[us]",
   76:     "<datetime64[us]", ">datetime64[us]",
   77:     "datetime64[ns]", "|datetime64[ns]", "=datetime64[ns]",
   78:     "<datetime64[ns]", ">datetime64[ns]",
   79:     "datetime64[ps]", "|datetime64[ps]", "=datetime64[ps]",
   80:     "<datetime64[ps]", ">datetime64[ps]",
   81:     "datetime64[fs]", "|datetime64[fs]", "=datetime64[fs]",
   82:     "<datetime64[fs]", ">datetime64[fs]",
   83:     "datetime64[as]", "|datetime64[as]", "=datetime64[as]",
   84:     "<datetime64[as]", ">datetime64[as]",
   85:     "M", "|M", "=M", "<M", ">M",
   86:     "M8", "|M8", "=M8", "<M8", ">M8",
   87:     "M8[Y]", "|M8[Y]", "=M8[Y]", "<M8[Y]", ">M8[Y]",
   88:     "M8[M]", "|M8[M]", "=M8[M]", "<M8[M]", ">M8[M]",
   89:     "M8[W]", "|M8[W]", "=M8[W]", "<M8[W]", ">M8[W]",
   90:     "M8[D]", "|M8[D]", "=M8[D]", "<M8[D]", ">M8[D]",
   91:     "M8[h]", "|M8[h]", "=M8[h]", "<M8[h]", ">M8[h]",
   92:     "M8[m]", "|M8[m]", "=M8[m]", "<M8[m]", ">M8[m]",
   93:     "M8[s]", "|M8[s]", "=M8[s]", "<M8[s]", ">M8[s]",
   94:     "M8[ms]", "|M8[ms]", "=M8[ms]", "<M8[ms]", ">M8[ms]",
   95:     "M8[us]", "|M8[us]", "=M8[us]", "<M8[us]", ">M8[us]",
   96:     "M8[ns]", "|M8[ns]", "=M8[ns]", "<M8[ns]", ">M8[ns]",
   97:     "M8[ps]", "|M8[ps]", "=M8[ps]", "<M8[ps]", ">M8[ps]",
   98:     "M8[fs]", "|M8[fs]", "=M8[fs]", "<M8[fs]", ">M8[fs]",
   99:     "M8[as]", "|M8[as]", "=M8[as]", "<M8[as]", ">M8[as]",
  100: ]
  101: _TD64Codes = Literal[
  102:     "timedelta64", "|timedelta64", "=timedelta64",
  103:     "<timedelta64", ">timedelta64",
  104:     "timedelta64[Y]", "|timedelta64[Y]", "=timedelta64[Y]",
  105:     "<timedelta64[Y]", ">timedelta64[Y]",
  106:     "timedelta64[M]", "|timedelta64[M]", "=timedelta64[M]",
  107:     "<timedelta64[M]", ">timedelta64[M]",
  108:     "timedelta64[W]", "|timedelta64[W]", "=timedelta64[W]",
  109:     "<timedelta64[W]", ">timedelta64[W]",
  110:     "timedelta64[D]", "|timedelta64[D]", "=timedelta64[D]",
  111:     "<timedelta64[D]", ">timedelta64[D]",
  112:     "timedelta64[h]", "|timedelta64[h]", "=timedelta64[h]",
  113:     "<timedelta64[h]", ">timedelta64[h]",
  114:     "timedelta64[m]", "|timedelta64[m]", "=timedelta64[m]",
  115:     "<timedelta64[m]", ">timedelta64[m]",
  116:     "timedelta64[s]", "|timedelta64[s]", "=timedelta64[s]",
  117:     "<timedelta64[s]", ">timedelta64[s]",
  118:     "timedelta64[ms]", "|timedelta64[ms]", "=timedelta64[ms]",
  119:     "<timedelta64[ms]", ">timedelta64[ms]",
  120:     "timedelta64[us]", "|timedelta64[us]", "=timedelta64[us]",
  121:     "<timedelta64[us]", ">timedelta64[us]",
  122:     "timedelta64[ns]", "|timedelta64[ns]", "=timedelta64[ns]",
  123:     "<timedelta64[ns]", ">timedelta64[ns]",
  124:     "timedelta64[ps]", "|timedelta64[ps]", "=timedelta64[ps]",
  125:     "<timedelta64[ps]", ">timedelta64[ps]",
  126:     "timedelta64[fs]", "|timedelta64[fs]", "=timedelta64[fs]",
  127:     "<timedelta64[fs]", ">timedelta64[fs]",
  128:     "timedelta64[as]", "|timedelta64[as]", "=timedelta64[as]",
  129:     "<timedelta64[as]", ">timedelta64[as]",
  130:     "m", "|m", "=m", "<m", ">m",
  131:     "m8", "|m8", "=m8", "<m8", ">m8",
  132:     "m8[Y]", "|m8[Y]", "=m8[Y]", "<m8[Y]", ">m8[Y]",
  133:     "m8[M]", "|m8[M]", "=m8[M]", "<m8[M]", ">m8[M]",
  134:     "m8[W]", "|m8[W]", "=m8[W]", "<m8[W]", ">m8[W]",
  135:     "m8[D]", "|m8[D]", "=m8[D]", "<m8[D]", ">m8[D]",
  136:     "m8[h]", "|m8[h]", "=m8[h]", "<m8[h]", ">m8[h]",
  137:     "m8[m]", "|m8[m]", "=m8[m]", "<m8[m]", ">m8[m]",
  138:     "m8[s]", "|m8[s]", "=m8[s]", "<m8[s]", ">m8[s]",
  139:     "m8[ms]", "|m8[ms]", "=m8[ms]", "<m8[ms]", ">m8[ms]",
  140:     "m8[us]", "|m8[us]", "=m8[us]", "<m8[us]", ">m8[us]",
  141:     "m8[ns]", "|m8[ns]", "=m8[ns]", "<m8[ns]", ">m8[ns]",
  142:     "m8[ps]", "|m8[ps]", "=m8[ps]", "<m8[ps]", ">m8[ps]",
  143:     "m8[fs]", "|m8[fs]", "=m8[fs]", "<m8[fs]", ">m8[fs]",
  144:     "m8[as]", "|m8[as]", "=m8[as]", "<m8[as]", ">m8[as]",
  145: ]
  146: 
  147: # NOTE: `StringDType' has no scalar type, and therefore has no name that can
  148: # be passed to the `dtype` constructor
  149: _StringCodes = Literal["T", "|T", "=T", "<T", ">T"]
  150: 
  151: # NOTE: Nested literals get flattened and de-duplicated at runtime, which isn't
  152: # the case for a `Union` of `Literal`s.
  153: # So even though they're equivalent when type-checking, they differ at runtime.
  154: # Another advantage of nesting, is that they always have a "flat"
  155: # `Literal.__args__`, which is a tuple of *literally* all its literal values.
  156: 
  157: _UnsignedIntegerCodes = Literal[
  158:     _UInt8Codes,
  159:     _UInt16Codes,
  160:     _UInt32Codes,
  161:     _UInt64Codes,
  162:     _UIntCodes,
  163:     _UByteCodes,
  164:     _UShortCodes,
  165:     _UIntCCodes,
  166:     _ULongCodes,
  167:     _ULongLongCodes,
  168: ]
  169: _SignedIntegerCodes = Literal[
  170:     _Int8Codes,
  171:     _Int16Codes,
  172:     _Int32Codes,
  173:     _Int64Codes,
  174:     _IntCodes,
  175:     _ByteCodes,
  176:     _ShortCodes,
  177:     _IntCCodes,
  178:     _LongCodes,
  179:     _LongLongCodes,
  180: ]
  181: _FloatingCodes = Literal[
  182:     _Float16Codes,
  183:     _Float32Codes,
  184:     _Float64Codes,
  185:     _HalfCodes,
  186:     _SingleCodes,
  187:     _DoubleCodes,
  188:     _LongDoubleCodes
  189: ]
  190: _ComplexFloatingCodes = Literal[
  191:     _Complex64Codes,
  192:     _Complex128Codes,
  193:     _CSingleCodes,
  194:     _CDoubleCodes,
  195:     _CLongDoubleCodes,
  196: ]
  197: _IntegerCodes = Literal[_UnsignedIntegerCodes, _SignedIntegerCodes]
  198: _InexactCodes = Literal[_FloatingCodes, _ComplexFloatingCodes]
  199: _NumberCodes = Literal[_IntegerCodes, _InexactCodes]
  200: 
  201: _CharacterCodes = Literal[_StrCodes, _BytesCodes]
  202: _FlexibleCodes = Literal[_VoidCodes, _CharacterCodes]
  203: 
  204: _GenericCodes = Literal[
  205:     _BoolCodes,
  206:     _NumberCodes,
  207:     _FlexibleCodes,
  208:     _DT64Codes,
  209:     _TD64Codes,
  210:     _ObjectCodes,
  211:     # TODO: add `_StringCodes` once it has a scalar type
  212:     # _StringCodes,
  213: ]
