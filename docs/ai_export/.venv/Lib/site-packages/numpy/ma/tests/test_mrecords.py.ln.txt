    1: """Tests suite for mrecords.
    2: 
    3: :author: Pierre Gerard-Marchant
    4: :contact: pierregm_at_uga_dot_edu
    5: 
    6: """
    7: import pickle
    8: 
    9: import numpy as np
   10: import numpy.ma as ma
   11: from numpy._core.records import fromarrays as recfromarrays
   12: from numpy._core.records import fromrecords as recfromrecords
   13: from numpy._core.records import recarray
   14: from numpy.ma import masked, nomask
   15: from numpy.ma.mrecords import (
   16:     MaskedRecords,
   17:     addfield,
   18:     fromarrays,
   19:     fromrecords,
   20:     fromtextfile,
   21:     mrecarray,
   22: )
   23: from numpy.ma.testutils import (
   24:     assert_,
   25:     assert_equal,
   26:     assert_equal_records,
   27: )
   28: from numpy.testing import temppath
   29: 
   30: 
   31: class TestMRecords:
   32: 
   33:     ilist = [1, 2, 3, 4, 5]
   34:     flist = [1.1, 2.2, 3.3, 4.4, 5.5]
   35:     slist = [b'one', b'two', b'three', b'four', b'five']
   36:     ddtype = [('a', int), ('b', float), ('c', '|S8')]
   37:     mask = [0, 1, 0, 0, 1]
   38:     base = ma.array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
   39: 
   40:     def test_byview(self):
   41:         # Test creation by view
   42:         base = self.base
   43:         mbase = base.view(mrecarray)
   44:         assert_equal(mbase.recordmask, base.recordmask)
   45:         assert_equal_records(mbase._mask, base._mask)
   46:         assert_(isinstance(mbase._data, recarray))
   47:         assert_equal_records(mbase._data, base._data.view(recarray))
   48:         for field in ('a', 'b', 'c'):
   49:             assert_equal(base[field], mbase[field])
   50:         assert_equal_records(mbase.view(mrecarray), mbase)
   51: 
   52:     def test_get(self):
   53:         # Tests fields retrieval
   54:         base = self.base.copy()
   55:         mbase = base.view(mrecarray)
   56:         # As fields..........
   57:         for field in ('a', 'b', 'c'):
   58:             assert_equal(getattr(mbase, field), mbase[field])
   59:             assert_equal(base[field], mbase[field])
   60:         # as elements .......
   61:         mbase_first = mbase[0]
   62:         assert_(isinstance(mbase_first, mrecarray))
   63:         assert_equal(mbase_first.dtype, mbase.dtype)
   64:         assert_equal(mbase_first.tolist(), (1, 1.1, b'one'))
   65:         # Used to be mask, now it's recordmask
   66:         assert_equal(mbase_first.recordmask, nomask)
   67:         assert_equal(mbase_first._mask.item(), (False, False, False))
   68:         assert_equal(mbase_first['a'], mbase['a'][0])
   69:         mbase_last = mbase[-1]
   70:         assert_(isinstance(mbase_last, mrecarray))
   71:         assert_equal(mbase_last.dtype, mbase.dtype)
   72:         assert_equal(mbase_last.tolist(), (None, None, None))
   73:         # Used to be mask, now it's recordmask
   74:         assert_equal(mbase_last.recordmask, True)
   75:         assert_equal(mbase_last._mask.item(), (True, True, True))
   76:         assert_equal(mbase_last['a'], mbase['a'][-1])
   77:         assert_(mbase_last['a'] is masked)
   78:         # as slice ..........
   79:         mbase_sl = mbase[:2]
   80:         assert_(isinstance(mbase_sl, mrecarray))
   81:         assert_equal(mbase_sl.dtype, mbase.dtype)
   82:         # Used to be mask, now it's recordmask
   83:         assert_equal(mbase_sl.recordmask, [0, 1])
   84:         assert_equal_records(mbase_sl.mask,
   85:                              np.array([(False, False, False),
   86:                                        (True, True, True)],
   87:                                       dtype=mbase._mask.dtype))
   88:         assert_equal_records(mbase_sl, base[:2].view(mrecarray))
   89:         for field in ('a', 'b', 'c'):
   90:             assert_equal(getattr(mbase_sl, field), base[:2][field])
   91: 
   92:     def test_set_fields(self):
   93:         # Tests setting fields.
   94:         base = self.base.copy()
   95:         mbase = base.view(mrecarray)
   96:         mbase = mbase.copy()
   97:         mbase.fill_value = (999999, 1e20, 'N/A')
   98:         # Change the data, the mask should be conserved
   99:         mbase.a._data[:] = 5
  100:         assert_equal(mbase['a']._data, [5, 5, 5, 5, 5])
  101:         assert_equal(mbase['a']._mask, [0, 1, 0, 0, 1])
  102:         # Change the elements, and the mask will follow
  103:         mbase.a = 1
  104:         assert_equal(mbase['a']._data, [1] * 5)
  105:         assert_equal(ma.getmaskarray(mbase['a']), [0] * 5)
  106:         # Use to be _mask, now it's recordmask
  107:         assert_equal(mbase.recordmask, [False] * 5)
  108:         assert_equal(mbase._mask.tolist(),
  109:                      np.array([(0, 0, 0),
  110:                                (0, 1, 1),
  111:                                (0, 0, 0),
  112:                                (0, 0, 0),
  113:                                (0, 1, 1)],
  114:                               dtype=bool))
  115:         # Set a field to mask ........................
  116:         mbase.c = masked
  117:         # Use to be mask, and now it's still mask !
  118:         assert_equal(mbase.c.mask, [1] * 5)
  119:         assert_equal(mbase.c.recordmask, [1] * 5)
  120:         assert_equal(ma.getmaskarray(mbase['c']), [1] * 5)
  121:         assert_equal(ma.getdata(mbase['c']), [b'N/A'] * 5)
  122:         assert_equal(mbase._mask.tolist(),
  123:                      np.array([(0, 0, 1),
  124:                                (0, 1, 1),
  125:                                (0, 0, 1),
  126:                                (0, 0, 1),
  127:                                (0, 1, 1)],
  128:                               dtype=bool))
  129:         # Set fields by slices .......................
  130:         mbase = base.view(mrecarray).copy()
  131:         mbase.a[3:] = 5
  132:         assert_equal(mbase.a, [1, 2, 3, 5, 5])
  133:         assert_equal(mbase.a._mask, [0, 1, 0, 0, 0])
  134:         mbase.b[3:] = masked
  135:         assert_equal(mbase.b, base['b'])
  136:         assert_equal(mbase.b._mask, [0, 1, 0, 1, 1])
  137:         # Set fields globally..........................
  138:         ndtype = [('alpha', '|S1'), ('num', int)]
  139:         data = ma.array([('a', 1), ('b', 2), ('c', 3)], dtype=ndtype)
  140:         rdata = data.view(MaskedRecords)
  141:         val = ma.array([10, 20, 30], mask=[1, 0, 0])
  142: 
  143:         rdata['num'] = val
  144:         assert_equal(rdata.num, val)
  145:         assert_equal(rdata.num.mask, [1, 0, 0])
  146: 
  147:     def test_set_fields_mask(self):
  148:         # Tests setting the mask of a field.
  149:         base = self.base.copy()
  150:         # This one has already a mask....
  151:         mbase = base.view(mrecarray)
  152:         mbase['a'][-2] = masked
  153:         assert_equal(mbase.a, [1, 2, 3, 4, 5])
  154:         assert_equal(mbase.a._mask, [0, 1, 0, 1, 1])
  155:         # This one has not yet
  156:         mbase = fromarrays([np.arange(5), np.random.rand(5)],
  157:                            dtype=[('a', int), ('b', float)])
  158:         mbase['a'][-2] = masked
  159:         assert_equal(mbase.a, [0, 1, 2, 3, 4])
  160:         assert_equal(mbase.a._mask, [0, 0, 0, 1, 0])
  161: 
  162:     def test_set_mask(self):
  163:         base = self.base.copy()
  164:         mbase = base.view(mrecarray)
  165:         # Set the mask to True .......................
  166:         mbase.mask = masked
  167:         assert_equal(ma.getmaskarray(mbase['b']), [1] * 5)
  168:         assert_equal(mbase['a']._mask, mbase['b']._mask)
  169:         assert_equal(mbase['a']._mask, mbase['c']._mask)
  170:         assert_equal(mbase._mask.tolist(),
  171:                      np.array([(1, 1, 1)] * 5, dtype=bool))
  172:         # Delete the mask ............................
  173:         mbase.mask = nomask
  174:         assert_equal(ma.getmaskarray(mbase['c']), [0] * 5)
  175:         assert_equal(mbase._mask.tolist(),
  176:                      np.array([(0, 0, 0)] * 5, dtype=bool))
  177: 
  178:     def test_set_mask_fromarray(self):
  179:         base = self.base.copy()
  180:         mbase = base.view(mrecarray)
  181:         # Sets the mask w/ an array
  182:         mbase.mask = [1, 0, 0, 0, 1]
  183:         assert_equal(mbase.a.mask, [1, 0, 0, 0, 1])
  184:         assert_equal(mbase.b.mask, [1, 0, 0, 0, 1])
  185:         assert_equal(mbase.c.mask, [1, 0, 0, 0, 1])
  186:         # Yay, once more !
  187:         mbase.mask = [0, 0, 0, 0, 1]
  188:         assert_equal(mbase.a.mask, [0, 0, 0, 0, 1])
  189:         assert_equal(mbase.b.mask, [0, 0, 0, 0, 1])
  190:         assert_equal(mbase.c.mask, [0, 0, 0, 0, 1])
  191: 
  192:     def test_set_mask_fromfields(self):
  193:         mbase = self.base.copy().view(mrecarray)
  194: 
  195:         nmask = np.array(
  196:             [(0, 1, 0), (0, 1, 0), (1, 0, 1), (1, 0, 1), (0, 0, 0)],
  197:             dtype=[('a', bool), ('b', bool), ('c', bool)])
  198:         mbase.mask = nmask
  199:         assert_equal(mbase.a.mask, [0, 0, 1, 1, 0])
  200:         assert_equal(mbase.b.mask, [1, 1, 0, 0, 0])
  201:         assert_equal(mbase.c.mask, [0, 0, 1, 1, 0])
  202:         # Reinitialize and redo
  203:         mbase.mask = False
  204:         mbase.fieldmask = nmask
  205:         assert_equal(mbase.a.mask, [0, 0, 1, 1, 0])
  206:         assert_equal(mbase.b.mask, [1, 1, 0, 0, 0])
  207:         assert_equal(mbase.c.mask, [0, 0, 1, 1, 0])
  208: 
  209:     def test_set_elements(self):
  210:         base = self.base.copy()
  211:         # Set an element to mask .....................
  212:         mbase = base.view(mrecarray).copy()
  213:         mbase[-2] = masked
  214:         assert_equal(
  215:             mbase._mask.tolist(),
  216:             np.array([(0, 0, 0), (1, 1, 1), (0, 0, 0), (1, 1, 1), (1, 1, 1)],
  217:                      dtype=bool))
  218:         # Used to be mask, now it's recordmask!
  219:         assert_equal(mbase.recordmask, [0, 1, 0, 1, 1])
  220:         # Set slices .................................
  221:         mbase = base.view(mrecarray).copy()
  222:         mbase[:2] = (5, 5, 5)
  223:         assert_equal(mbase.a._data, [5, 5, 3, 4, 5])
  224:         assert_equal(mbase.a._mask, [0, 0, 0, 0, 1])
  225:         assert_equal(mbase.b._data, [5., 5., 3.3, 4.4, 5.5])
  226:         assert_equal(mbase.b._mask, [0, 0, 0, 0, 1])
  227:         assert_equal(mbase.c._data,
  228:                      [b'5', b'5', b'three', b'four', b'five'])
  229:         assert_equal(mbase.b._mask, [0, 0, 0, 0, 1])
  230: 
  231:         mbase = base.view(mrecarray).copy()
  232:         mbase[:2] = masked
  233:         assert_equal(mbase.a._data, [1, 2, 3, 4, 5])
  234:         assert_equal(mbase.a._mask, [1, 1, 0, 0, 1])
  235:         assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 4.4, 5.5])
  236:         assert_equal(mbase.b._mask, [1, 1, 0, 0, 1])
  237:         assert_equal(mbase.c._data,
  238:                      [b'one', b'two', b'three', b'four', b'five'])
  239:         assert_equal(mbase.b._mask, [1, 1, 0, 0, 1])
  240: 
  241:     def test_setslices_hardmask(self):
  242:         # Tests setting slices w/ hardmask.
  243:         base = self.base.copy()
  244:         mbase = base.view(mrecarray)
  245:         mbase.harden_mask()
  246:         try:
  247:             mbase[-2:] = (5, 5, 5)
  248:             assert_equal(mbase.a._data, [1, 2, 3, 5, 5])
  249:             assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 5, 5.5])
  250:             assert_equal(mbase.c._data,
  251:                          [b'one', b'two', b'three', b'5', b'five'])
  252:             assert_equal(mbase.a._mask, [0, 1, 0, 0, 1])
  253:             assert_equal(mbase.b._mask, mbase.a._mask)
  254:             assert_equal(mbase.b._mask, mbase.c._mask)
  255:         except NotImplementedError:
  256:             # OK, not implemented yet...
  257:             pass
  258:         except AssertionError:
  259:             raise
  260:         else:
  261:             raise Exception("Flexible hard masks should be supported !")
  262:         # Not using a tuple should crash
  263:         try:
  264:             mbase[-2:] = 3
  265:         except (NotImplementedError, TypeError):
  266:             pass
  267:         else:
  268:             raise TypeError("Should have expected a readable buffer object!")
  269: 
  270:     def test_hardmask(self):
  271:         # Test hardmask
  272:         base = self.base.copy()
  273:         mbase = base.view(mrecarray)
  274:         mbase.harden_mask()
  275:         assert_(mbase._hardmask)
  276:         mbase.mask = nomask
  277:         assert_equal_records(mbase._mask, base._mask)
  278:         mbase.soften_mask()
  279:         assert_(not mbase._hardmask)
  280:         mbase.mask = nomask
  281:         # So, the mask of a field is no longer set to nomask...
  282:         assert_equal_records(mbase._mask,
  283:                              ma.make_mask_none(base.shape, base.dtype))
  284:         assert_(ma.make_mask(mbase['b']._mask) is nomask)
  285:         assert_equal(mbase['a']._mask, mbase['b']._mask)
  286: 
  287:     def test_pickling(self):
  288:         # Test pickling
  289:         base = self.base.copy()
  290:         mrec = base.view(mrecarray)
  291:         for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
  292:             _ = pickle.dumps(mrec, protocol=proto)
  293:             mrec_ = pickle.loads(_)
  294:             assert_equal(mrec_.dtype, mrec.dtype)
  295:             assert_equal_records(mrec_._data, mrec._data)
  296:             assert_equal(mrec_._mask, mrec._mask)
  297:             assert_equal_records(mrec_._mask, mrec._mask)
  298: 
  299:     def test_filled(self):
  300:         # Test filling the array
  301:         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
  302:         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
  303:         _c = ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
  304:         ddtype = [('a', int), ('b', float), ('c', '|S8')]
  305:         mrec = fromarrays([_a, _b, _c], dtype=ddtype,
  306:                           fill_value=(99999, 99999., 'N/A'))
  307:         mrecfilled = mrec.filled()
  308:         assert_equal(mrecfilled['a'], np.array((1, 2, 99999), dtype=int))
  309:         assert_equal(mrecfilled['b'], np.array((1.1, 2.2, 99999.),
  310:                                                dtype=float))
  311:         assert_equal(mrecfilled['c'], np.array(('one', 'two', 'N/A'),
  312:                                                dtype='|S8'))
  313: 
  314:     def test_tolist(self):
  315:         # Test tolist.
  316:         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
  317:         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
  318:         _c = ma.array(['one', 'two', 'three'], mask=[1, 0, 0], dtype='|S8')
  319:         ddtype = [('a', int), ('b', float), ('c', '|S8')]
  320:         mrec = fromarrays([_a, _b, _c], dtype=ddtype,
  321:                           fill_value=(99999, 99999., 'N/A'))
  322: 
  323:         assert_equal(mrec.tolist(),
  324:                      [(1, 1.1, None), (2, 2.2, b'two'),
  325:                       (None, None, b'three')])
  326: 
  327:     def test_withnames(self):
  328:         # Test the creation w/ format and names
  329:         x = mrecarray(1, formats=float, names='base')
  330:         x[0]['base'] = 10
  331:         assert_equal(x['base'][0], 10)
  332: 
  333:     def test_exotic_formats(self):
  334:         # Test that 'exotic' formats are processed properly
  335:         easy = mrecarray(1, dtype=[('i', int), ('s', '|S8'), ('f', float)])
  336:         easy[0] = masked
  337:         assert_equal(easy.filled(1).item(), (1, b'1', 1.))
  338: 
  339:         solo = mrecarray(1, dtype=[('f0', '<f8', (2, 2))])
  340:         solo[0] = masked
  341:         assert_equal(solo.filled(1).item(),
  342:                      np.array((1,), dtype=solo.dtype).item())
  343: 
  344:         mult = mrecarray(2, dtype="i4, (2,3)float, float")
  345:         mult[0] = masked
  346:         mult[1] = (1, 1, 1)
  347:         mult.filled(0)
  348:         assert_equal_records(mult.filled(0),
  349:                              np.array([(0, 0, 0), (1, 1, 1)],
  350:                                       dtype=mult.dtype))
  351: 
  352: 
  353: class TestView:
  354: 
  355:     def setup_method(self):
  356:         (a, b) = (np.arange(10), np.random.rand(10))
  357:         ndtype = [('a', float), ('b', float)]
  358:         arr = np.array(list(zip(a, b)), dtype=ndtype)
  359: 
  360:         mrec = fromarrays([a, b], dtype=ndtype, fill_value=(-9., -99.))
  361:         mrec.mask[3] = (False, True)
  362:         self.data = (mrec, a, b, arr)
  363: 
  364:     def test_view_by_itself(self):
  365:         (mrec, a, b, arr) = self.data
  366:         test = mrec.view()
  367:         assert_(isinstance(test, MaskedRecords))
  368:         assert_equal_records(test, mrec)
  369:         assert_equal_records(test._mask, mrec._mask)
  370: 
  371:     def test_view_simple_dtype(self):
  372:         (mrec, a, b, arr) = self.data
  373:         ntype = (float, 2)
  374:         test = mrec.view(ntype)
  375:         assert_(isinstance(test, ma.MaskedArray))
  376:         assert_equal(test, np.array(list(zip(a, b)), dtype=float))
  377:         assert_(test[3, 1] is ma.masked)
  378: 
  379:     def test_view_flexible_type(self):
  380:         (mrec, a, b, arr) = self.data
  381:         alttype = [('A', float), ('B', float)]
  382:         test = mrec.view(alttype)
  383:         assert_(isinstance(test, MaskedRecords))
  384:         assert_equal_records(test, arr.view(alttype))
  385:         assert_(test['B'][3] is masked)
  386:         assert_equal(test.dtype, np.dtype(alttype))
  387:         assert_(test._fill_value is None)
  388: 
  389: 
  390: ##############################################################################
  391: class TestMRecordsImport:
  392: 
  393:     _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
  394:     _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
  395:     _c = ma.array([b'one', b'two', b'three'],
  396:                   mask=[0, 0, 1], dtype='|S8')
  397:     ddtype = [('a', int), ('b', float), ('c', '|S8')]
  398:     mrec = fromarrays([_a, _b, _c], dtype=ddtype,
  399:                       fill_value=(b'99999', b'99999.',
  400:                                   b'N/A'))
  401:     nrec = recfromarrays((_a._data, _b._data, _c._data), dtype=ddtype)
  402:     data = (mrec, nrec, ddtype)
  403: 
  404:     def test_fromarrays(self):
  405:         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
  406:         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
  407:         _c = ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
  408:         (mrec, nrec, _) = self.data
  409:         for (f, l) in zip(('a', 'b', 'c'), (_a, _b, _c)):
  410:             assert_equal(getattr(mrec, f)._mask, l._mask)
  411:         # One record only
  412:         _x = ma.array([1, 1.1, 'one'], mask=[1, 0, 0], dtype=object)
  413:         assert_equal_records(fromarrays(_x, dtype=mrec.dtype), mrec[0])
  414: 
  415:     def test_fromrecords(self):
  416:         # Test construction from records.
  417:         (mrec, nrec, ddtype) = self.data
  418:         # ......
  419:         palist = [(1, 'abc', 3.7000002861022949, 0),
  420:                   (2, 'xy', 6.6999998092651367, 1),
  421:                   (0, ' ', 0.40000000596046448, 0)]
  422:         pa = recfromrecords(palist, names='c1, c2, c3, c4')
  423:         mpa = fromrecords(palist, names='c1, c2, c3, c4')
  424:         assert_equal_records(pa, mpa)
  425:         # .....
  426:         _mrec = fromrecords(nrec)
  427:         assert_equal(_mrec.dtype, mrec.dtype)
  428:         for field in _mrec.dtype.names:
  429:             assert_equal(getattr(_mrec, field), getattr(mrec._data, field))
  430: 
  431:         _mrec = fromrecords(nrec.tolist(), names='c1,c2,c3')
  432:         assert_equal(_mrec.dtype, [('c1', int), ('c2', float), ('c3', '|S5')])
  433:         for (f, n) in zip(('c1', 'c2', 'c3'), ('a', 'b', 'c')):
  434:             assert_equal(getattr(_mrec, f), getattr(mrec._data, n))
  435: 
  436:         _mrec = fromrecords(mrec)
  437:         assert_equal(_mrec.dtype, mrec.dtype)
  438:         assert_equal_records(_mrec._data, mrec.filled())
  439:         assert_equal_records(_mrec._mask, mrec._mask)
  440: 
  441:     def test_fromrecords_wmask(self):
  442:         # Tests construction from records w/ mask.
  443:         (mrec, nrec, ddtype) = self.data
  444: 
  445:         _mrec = fromrecords(nrec.tolist(), dtype=ddtype, mask=[0, 1, 0,])
  446:         assert_equal_records(_mrec._data, mrec._data)
  447:         assert_equal(_mrec._mask.tolist(), [(0, 0, 0), (1, 1, 1), (0, 0, 0)])
  448: 
  449:         _mrec = fromrecords(nrec.tolist(), dtype=ddtype, mask=True)
  450:         assert_equal_records(_mrec._data, mrec._data)
  451:         assert_equal(_mrec._mask.tolist(), [(1, 1, 1), (1, 1, 1), (1, 1, 1)])
  452: 
  453:         _mrec = fromrecords(nrec.tolist(), dtype=ddtype, mask=mrec._mask)
  454:         assert_equal_records(_mrec._data, mrec._data)
  455:         assert_equal(_mrec._mask.tolist(), mrec._mask.tolist())
  456: 
  457:         _mrec = fromrecords(nrec.tolist(), dtype=ddtype,
  458:                             mask=mrec._mask.tolist())
  459:         assert_equal_records(_mrec._data, mrec._data)
  460:         assert_equal(_mrec._mask.tolist(), mrec._mask.tolist())
  461: 
  462:     def test_fromtextfile(self):
  463:         # Tests reading from a text file.
  464:         fcontent = (
  465: """#
  466: 'One (S)','Two (I)','Three (F)','Four (M)','Five (-)','Six (C)'
  467: 'strings',1,1.0,'mixed column',,1
  468: 'with embedded "double quotes"',2,2.0,1.0,,1
  469: 'strings',3,3.0E5,3,,1
  470: 'strings',4,-1e-10,,,1
  471: """)
  472:         with temppath() as path:
  473:             with open(path, 'w') as f:
  474:                 f.write(fcontent)
  475:             mrectxt = fromtextfile(path, delimiter=',', varnames='ABCDEFG')
  476:         assert_(isinstance(mrectxt, MaskedRecords))
  477:         assert_equal(mrectxt.F, [1, 1, 1, 1])
  478:         assert_equal(mrectxt.E._mask, [1, 1, 1, 1])
  479:         assert_equal(mrectxt.C, [1, 2, 3.e+5, -1e-10])
  480: 
  481:     def test_addfield(self):
  482:         # Tests addfield
  483:         (mrec, nrec, ddtype) = self.data
  484:         (d, m) = ([100, 200, 300], [1, 0, 0])
  485:         mrec = addfield(mrec, ma.array(d, mask=m))
  486:         assert_equal(mrec.f3, d)
  487:         assert_equal(mrec.f3._mask, m)
  488: 
  489: 
  490: def test_record_array_with_object_field():
  491:     # Trac #1839
  492:     y = ma.masked_array(
  493:         [(1, '2'), (3, '4')],
  494:         mask=[(0, 0), (0, 1)],
  495:         dtype=[('a', int), ('b', object)])
  496:     # getting an item used to fail
  497:     y[1]
