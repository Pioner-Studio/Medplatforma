    1: import numpy as np
    2: from numpy.testing import (
    3:     assert_,
    4:     assert_allclose,
    5:     assert_array_equal,
    6:     suppress_warnings,
    7: )
    8: 
    9: 
   10: class TestRegression:
   11:     def test_masked_array_create(self):
   12:         # Ticket #17
   13:         x = np.ma.masked_array([0, 1, 2, 3, 0, 4, 5, 6],
   14:                                mask=[0, 0, 0, 1, 1, 1, 0, 0])
   15:         assert_array_equal(np.ma.nonzero(x), [[1, 2, 6, 7]])
   16: 
   17:     def test_masked_array(self):
   18:         # Ticket #61
   19:         np.ma.array(1, mask=[1])
   20: 
   21:     def test_mem_masked_where(self):
   22:         # Ticket #62
   23:         from numpy.ma import MaskType, masked_where
   24:         a = np.zeros((1, 1))
   25:         b = np.zeros(a.shape, MaskType)
   26:         c = masked_where(b, a)
   27:         a - c
   28: 
   29:     def test_masked_array_multiply(self):
   30:         # Ticket #254
   31:         a = np.ma.zeros((4, 1))
   32:         a[2, 0] = np.ma.masked
   33:         b = np.zeros((4, 2))
   34:         a * b
   35:         b * a
   36: 
   37:     def test_masked_array_repeat(self):
   38:         # Ticket #271
   39:         np.ma.array([1], mask=False).repeat(10)
   40: 
   41:     def test_masked_array_repr_unicode(self):
   42:         # Ticket #1256
   43:         repr(np.ma.array("Unicode"))
   44: 
   45:     def test_atleast_2d(self):
   46:         # Ticket #1559
   47:         a = np.ma.masked_array([0.0, 1.2, 3.5], mask=[False, True, False])
   48:         b = np.atleast_2d(a)
   49:         assert_(a.mask.ndim == 1)
   50:         assert_(b.mask.ndim == 2)
   51: 
   52:     def test_set_fill_value_unicode_py3(self):
   53:         # Ticket #2733
   54:         a = np.ma.masked_array(['a', 'b', 'c'], mask=[1, 0, 0])
   55:         a.fill_value = 'X'
   56:         assert_(a.fill_value == 'X')
   57: 
   58:     def test_var_sets_maskedarray_scalar(self):
   59:         # Issue gh-2757
   60:         a = np.ma.array(np.arange(5), mask=True)
   61:         mout = np.ma.array(-1, dtype=float)
   62:         a.var(out=mout)
   63:         assert_(mout._data == 0)
   64: 
   65:     def test_ddof_corrcoef(self):
   66:         # See gh-3336
   67:         x = np.ma.masked_equal([1, 2, 3, 4, 5], 4)
   68:         y = np.array([2, 2.5, 3.1, 3, 5])
   69:         # this test can be removed after deprecation.
   70:         with suppress_warnings() as sup:
   71:             sup.filter(DeprecationWarning, "bias and ddof have no effect")
   72:             r0 = np.ma.corrcoef(x, y, ddof=0)
   73:             r1 = np.ma.corrcoef(x, y, ddof=1)
   74:             # ddof should not have an effect (it gets cancelled out)
   75:             assert_allclose(r0.data, r1.data)
   76: 
   77:     def test_mask_not_backmangled(self):
   78:         # See gh-10314.  Test case taken from gh-3140.
   79:         a = np.ma.MaskedArray([1., 2.], mask=[False, False])
   80:         assert_(a.mask.shape == (2,))
   81:         b = np.tile(a, (2, 1))
   82:         # Check that the above no longer changes a.shape to (1, 2)
   83:         assert_(a.mask.shape == (2,))
   84:         assert_(b.shape == (2, 2))
   85:         assert_(b.mask.shape == (2, 2))
   86: 
   87:     def test_empty_list_on_structured(self):
   88:         # See gh-12464. Indexing with empty list should give empty result.
   89:         ma = np.ma.MaskedArray([(1, 1.), (2, 2.), (3, 3.)], dtype='i4,f4')
   90:         assert_array_equal(ma[[]], ma[:0])
   91: 
   92:     def test_masked_array_tobytes_fortran(self):
   93:         ma = np.ma.arange(4).reshape((2, 2))
   94:         assert_array_equal(ma.tobytes(order='F'), ma.T.tobytes())
   95: 
   96:     def test_structured_array(self):
   97:         # see gh-22041
   98:         np.ma.array((1, (b"", b"")),
   99:                     dtype=[("x", np.int_),
  100:                           ("y", [("i", np.void), ("j", np.void)])])
