    1: import pickle
    2: from functools import reduce
    3: 
    4: import pytest
    5: 
    6: import numpy as np
    7: import numpy._core.fromnumeric as fromnumeric
    8: import numpy._core.umath as umath
    9: from numpy.ma import (
   10:     MaskedArray,
   11:     MaskType,
   12:     absolute,
   13:     add,
   14:     all,
   15:     allclose,
   16:     allequal,
   17:     alltrue,
   18:     arange,
   19:     arccos,
   20:     arcsin,
   21:     arctan,
   22:     arctan2,
   23:     array,
   24:     average,
   25:     choose,
   26:     concatenate,
   27:     conjugate,
   28:     cos,
   29:     cosh,
   30:     count,
   31:     divide,
   32:     equal,
   33:     exp,
   34:     filled,
   35:     getmask,
   36:     greater,
   37:     greater_equal,
   38:     inner,
   39:     isMaskedArray,
   40:     less,
   41:     less_equal,
   42:     log,
   43:     log10,
   44:     make_mask,
   45:     masked,
   46:     masked_array,
   47:     masked_equal,
   48:     masked_greater,
   49:     masked_greater_equal,
   50:     masked_inside,
   51:     masked_less,
   52:     masked_less_equal,
   53:     masked_not_equal,
   54:     masked_outside,
   55:     masked_print_option,
   56:     masked_values,
   57:     masked_where,
   58:     maximum,
   59:     minimum,
   60:     multiply,
   61:     nomask,
   62:     nonzero,
   63:     not_equal,
   64:     ones,
   65:     outer,
   66:     product,
   67:     put,
   68:     ravel,
   69:     repeat,
   70:     resize,
   71:     shape,
   72:     sin,
   73:     sinh,
   74:     sometrue,
   75:     sort,
   76:     sqrt,
   77:     subtract,
   78:     sum,
   79:     take,
   80:     tan,
   81:     tanh,
   82:     transpose,
   83:     where,
   84:     zeros,
   85: )
   86: from numpy.testing import (
   87:     assert_,
   88:     assert_equal,
   89:     assert_raises,
   90: )
   91: 
   92: pi = np.pi
   93: 
   94: 
   95: def eq(v, w, msg=''):
   96:     result = allclose(v, w)
   97:     if not result:
   98:         print(f'Not eq:{msg}\n{v}\n----{w}')
   99:     return result
  100: 
  101: 
  102: class TestMa:
  103: 
  104:     def setup_method(self):
  105:         x = np.array([1., 1., 1., -2., pi / 2.0, 4., 5., -10., 10., 1., 2., 3.])
  106:         y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.])
  107:         a10 = 10.
  108:         m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
  109:         m2 = [0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1]
  110:         xm = array(x, mask=m1)
  111:         ym = array(y, mask=m2)
  112:         z = np.array([-.5, 0., .5, .8])
  113:         zm = array(z, mask=[0, 1, 0, 0])
  114:         xf = np.where(m1, 1e+20, x)
  115:         s = x.shape
  116:         xm.set_fill_value(1e+20)
  117:         self.d = (x, y, a10, m1, m2, xm, ym, z, zm, xf, s)
  118: 
  119:     def test_testBasic1d(self):
  120:         # Test of basic array creation and properties in 1 dimension.
  121:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  122:         assert_(not isMaskedArray(x))
  123:         assert_(isMaskedArray(xm))
  124:         assert_equal(shape(xm), s)
  125:         assert_equal(xm.shape, s)
  126:         assert_equal(xm.dtype, x.dtype)
  127:         assert_equal(xm.size, reduce(lambda x, y: x * y, s))
  128:         assert_equal(count(xm), len(m1) - reduce(lambda x, y: x + y, m1))
  129:         assert_(eq(xm, xf))
  130:         assert_(eq(filled(xm, 1.e20), xf))
  131:         assert_(eq(x, xm))
  132: 
  133:     @pytest.mark.parametrize("s", [(4, 3), (6, 2)])
  134:     def test_testBasic2d(self, s):
  135:         # Test of basic array creation and properties in 2 dimensions.
  136:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  137:         x.shape = s
  138:         y.shape = s
  139:         xm.shape = s
  140:         ym.shape = s
  141:         xf.shape = s
  142: 
  143:         assert_(not isMaskedArray(x))
  144:         assert_(isMaskedArray(xm))
  145:         assert_equal(shape(xm), s)
  146:         assert_equal(xm.shape, s)
  147:         assert_equal(xm.size, reduce(lambda x, y: x * y, s))
  148:         assert_equal(count(xm), len(m1) - reduce(lambda x, y: x + y, m1))
  149:         assert_(eq(xm, xf))
  150:         assert_(eq(filled(xm, 1.e20), xf))
  151:         assert_(eq(x, xm))
  152: 
  153:     def test_testArithmetic(self):
  154:         # Test of basic arithmetic.
  155:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  156:         a2d = array([[1, 2], [0, 4]])
  157:         a2dm = masked_array(a2d, [[0, 0], [1, 0]])
  158:         assert_(eq(a2d * a2d, a2d * a2dm))
  159:         assert_(eq(a2d + a2d, a2d + a2dm))
  160:         assert_(eq(a2d - a2d, a2d - a2dm))
  161:         for s in [(12,), (4, 3), (2, 6)]:
  162:             x = x.reshape(s)
  163:             y = y.reshape(s)
  164:             xm = xm.reshape(s)
  165:             ym = ym.reshape(s)
  166:             xf = xf.reshape(s)
  167:             assert_(eq(-x, -xm))
  168:             assert_(eq(x + y, xm + ym))
  169:             assert_(eq(x - y, xm - ym))
  170:             assert_(eq(x * y, xm * ym))
  171:             with np.errstate(divide='ignore', invalid='ignore'):
  172:                 assert_(eq(x / y, xm / ym))
  173:             assert_(eq(a10 + y, a10 + ym))
  174:             assert_(eq(a10 - y, a10 - ym))
  175:             assert_(eq(a10 * y, a10 * ym))
  176:             with np.errstate(divide='ignore', invalid='ignore'):
  177:                 assert_(eq(a10 / y, a10 / ym))
  178:             assert_(eq(x + a10, xm + a10))
  179:             assert_(eq(x - a10, xm - a10))
  180:             assert_(eq(x * a10, xm * a10))
  181:             assert_(eq(x / a10, xm / a10))
  182:             assert_(eq(x ** 2, xm ** 2))
  183:             assert_(eq(abs(x) ** 2.5, abs(xm) ** 2.5))
  184:             assert_(eq(x ** y, xm ** ym))
  185:             assert_(eq(np.add(x, y), add(xm, ym)))
  186:             assert_(eq(np.subtract(x, y), subtract(xm, ym)))
  187:             assert_(eq(np.multiply(x, y), multiply(xm, ym)))
  188:             with np.errstate(divide='ignore', invalid='ignore'):
  189:                 assert_(eq(np.divide(x, y), divide(xm, ym)))
  190: 
  191:     def test_testMixedArithmetic(self):
  192:         na = np.array([1])
  193:         ma = array([1])
  194:         assert_(isinstance(na + ma, MaskedArray))
  195:         assert_(isinstance(ma + na, MaskedArray))
  196: 
  197:     def test_testUfuncs1(self):
  198:         # Test various functions such as sin, cos.
  199:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  200:         assert_(eq(np.cos(x), cos(xm)))
  201:         assert_(eq(np.cosh(x), cosh(xm)))
  202:         assert_(eq(np.sin(x), sin(xm)))
  203:         assert_(eq(np.sinh(x), sinh(xm)))
  204:         assert_(eq(np.tan(x), tan(xm)))
  205:         assert_(eq(np.tanh(x), tanh(xm)))
  206:         with np.errstate(divide='ignore', invalid='ignore'):
  207:             assert_(eq(np.sqrt(abs(x)), sqrt(xm)))
  208:             assert_(eq(np.log(abs(x)), log(xm)))
  209:             assert_(eq(np.log10(abs(x)), log10(xm)))
  210:         assert_(eq(np.exp(x), exp(xm)))
  211:         assert_(eq(np.arcsin(z), arcsin(zm)))
  212:         assert_(eq(np.arccos(z), arccos(zm)))
  213:         assert_(eq(np.arctan(z), arctan(zm)))
  214:         assert_(eq(np.arctan2(x, y), arctan2(xm, ym)))
  215:         assert_(eq(np.absolute(x), absolute(xm)))
  216:         assert_(eq(np.equal(x, y), equal(xm, ym)))
  217:         assert_(eq(np.not_equal(x, y), not_equal(xm, ym)))
  218:         assert_(eq(np.less(x, y), less(xm, ym)))
  219:         assert_(eq(np.greater(x, y), greater(xm, ym)))
  220:         assert_(eq(np.less_equal(x, y), less_equal(xm, ym)))
  221:         assert_(eq(np.greater_equal(x, y), greater_equal(xm, ym)))
  222:         assert_(eq(np.conjugate(x), conjugate(xm)))
  223:         assert_(eq(np.concatenate((x, y)), concatenate((xm, ym))))
  224:         assert_(eq(np.concatenate((x, y)), concatenate((x, y))))
  225:         assert_(eq(np.concatenate((x, y)), concatenate((xm, y))))
  226:         assert_(eq(np.concatenate((x, y, x)), concatenate((x, ym, x))))
  227: 
  228:     def test_xtestCount(self):
  229:         # Test count
  230:         ott = array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
  231:         assert_(count(ott).dtype.type is np.intp)
  232:         assert_equal(3, count(ott))
  233:         assert_equal(1, count(1))
  234:         assert_(eq(0, array(1, mask=[1])))
  235:         ott = ott.reshape((2, 2))
  236:         assert_(count(ott).dtype.type is np.intp)
  237:         assert_(isinstance(count(ott, 0), np.ndarray))
  238:         assert_(count(ott).dtype.type is np.intp)
  239:         assert_(eq(3, count(ott)))
  240:         assert_(getmask(count(ott, 0)) is nomask)
  241:         assert_(eq([1, 2], count(ott, 0)))
  242: 
  243:     def test_testMinMax(self):
  244:         # Test minimum and maximum.
  245:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  246:         xr = np.ravel(x)  # max doesn't work if shaped
  247:         xmr = ravel(xm)
  248: 
  249:         # true because of careful selection of data
  250:         assert_(eq(max(xr), maximum.reduce(xmr)))
  251:         assert_(eq(min(xr), minimum.reduce(xmr)))
  252: 
  253:     def test_testAddSumProd(self):
  254:         # Test add, sum, product.
  255:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  256:         assert_(eq(np.add.reduce(x), add.reduce(x)))
  257:         assert_(eq(np.add.accumulate(x), add.accumulate(x)))
  258:         assert_(eq(4, sum(array(4), axis=0)))
  259:         assert_(eq(4, sum(array(4), axis=0)))
  260:         assert_(eq(np.sum(x, axis=0), sum(x, axis=0)))
  261:         assert_(eq(np.sum(filled(xm, 0), axis=0), sum(xm, axis=0)))
  262:         assert_(eq(np.sum(x, 0), sum(x, 0)))
  263:         assert_(eq(np.prod(x, axis=0), product(x, axis=0)))
  264:         assert_(eq(np.prod(x, 0), product(x, 0)))
  265:         assert_(eq(np.prod(filled(xm, 1), axis=0),
  266:                            product(xm, axis=0)))
  267:         if len(s) > 1:
  268:             assert_(eq(np.concatenate((x, y), 1),
  269:                                concatenate((xm, ym), 1)))
  270:             assert_(eq(np.add.reduce(x, 1), add.reduce(x, 1)))
  271:             assert_(eq(np.sum(x, 1), sum(x, 1)))
  272:             assert_(eq(np.prod(x, 1), product(x, 1)))
  273: 
  274:     def test_testCI(self):
  275:         # Test of conversions and indexing
  276:         x1 = np.array([1, 2, 4, 3])
  277:         x2 = array(x1, mask=[1, 0, 0, 0])
  278:         x3 = array(x1, mask=[0, 1, 0, 1])
  279:         x4 = array(x1)
  280:         # test conversion to strings
  281:         str(x2)  # raises?
  282:         repr(x2)  # raises?
  283:         assert_(eq(np.sort(x1), sort(x2, fill_value=0)))
  284:         # tests of indexing
  285:         assert_(type(x2[1]) is type(x1[1]))
  286:         assert_(x1[1] == x2[1])
  287:         assert_(x2[0] is masked)
  288:         assert_(eq(x1[2], x2[2]))
  289:         assert_(eq(x1[2:5], x2[2:5]))
  290:         assert_(eq(x1[:], x2[:]))
  291:         assert_(eq(x1[1:], x3[1:]))
  292:         x1[2] = 9
  293:         x2[2] = 9
  294:         assert_(eq(x1, x2))
  295:         x1[1:3] = 99
  296:         x2[1:3] = 99
  297:         assert_(eq(x1, x2))
  298:         x2[1] = masked
  299:         assert_(eq(x1, x2))
  300:         x2[1:3] = masked
  301:         assert_(eq(x1, x2))
  302:         x2[:] = x1
  303:         x2[1] = masked
  304:         assert_(allequal(getmask(x2), array([0, 1, 0, 0])))
  305:         x3[:] = masked_array([1, 2, 3, 4], [0, 1, 1, 0])
  306:         assert_(allequal(getmask(x3), array([0, 1, 1, 0])))
  307:         x4[:] = masked_array([1, 2, 3, 4], [0, 1, 1, 0])
  308:         assert_(allequal(getmask(x4), array([0, 1, 1, 0])))
  309:         assert_(allequal(x4, array([1, 2, 3, 4])))
  310:         x1 = np.arange(5) * 1.0
  311:         x2 = masked_values(x1, 3.0)
  312:         assert_(eq(x1, x2))
  313:         assert_(allequal(array([0, 0, 0, 1, 0], MaskType), x2.mask))
  314:         assert_(eq(3.0, x2.fill_value))
  315:         x1 = array([1, 'hello', 2, 3], object)
  316:         x2 = np.array([1, 'hello', 2, 3], object)
  317:         s1 = x1[1]
  318:         s2 = x2[1]
  319:         assert_equal(type(s2), str)
  320:         assert_equal(type(s1), str)
  321:         assert_equal(s1, s2)
  322:         assert_(x1[1:1].shape == (0,))
  323: 
  324:     def test_testCopySize(self):
  325:         # Tests of some subtle points of copying and sizing.
  326:         n = [0, 0, 1, 0, 0]
  327:         m = make_mask(n)
  328:         m2 = make_mask(m)
  329:         assert_(m is m2)
  330:         m3 = make_mask(m, copy=True)
  331:         assert_(m is not m3)
  332: 
  333:         x1 = np.arange(5)
  334:         y1 = array(x1, mask=m)
  335:         assert_(y1._data is not x1)
  336:         assert_(allequal(x1, y1._data))
  337:         assert_(y1._mask is m)
  338: 
  339:         y1a = array(y1, copy=0)
  340:         # For copy=False, one might expect that the array would just
  341:         # passed on, i.e., that it would be "is" instead of "==".
  342:         # See gh-4043 for discussion.
  343:         assert_(y1a._mask.__array_interface__ ==
  344:                 y1._mask.__array_interface__)
  345: 
  346:         y2 = array(x1, mask=m3, copy=0)
  347:         assert_(y2._mask is m3)
  348:         assert_(y2[2] is masked)
  349:         y2[2] = 9
  350:         assert_(y2[2] is not masked)
  351:         assert_(y2._mask is m3)
  352:         assert_(allequal(y2.mask, 0))
  353: 
  354:         y2a = array(x1, mask=m, copy=1)
  355:         assert_(y2a._mask is not m)
  356:         assert_(y2a[2] is masked)
  357:         y2a[2] = 9
  358:         assert_(y2a[2] is not masked)
  359:         assert_(y2a._mask is not m)
  360:         assert_(allequal(y2a.mask, 0))
  361: 
  362:         y3 = array(x1 * 1.0, mask=m)
  363:         assert_(filled(y3).dtype is (x1 * 1.0).dtype)
  364: 
  365:         x4 = arange(4)
  366:         x4[2] = masked
  367:         y4 = resize(x4, (8,))
  368:         assert_(eq(concatenate([x4, x4]), y4))
  369:         assert_(eq(getmask(y4), [0, 0, 1, 0, 0, 0, 1, 0]))
  370:         y5 = repeat(x4, (2, 2, 2, 2), axis=0)
  371:         assert_(eq(y5, [0, 0, 1, 1, 2, 2, 3, 3]))
  372:         y6 = repeat(x4, 2, axis=0)
  373:         assert_(eq(y5, y6))
  374: 
  375:     def test_testPut(self):
  376:         # Test of put
  377:         d = arange(5)
  378:         n = [0, 0, 0, 1, 1]
  379:         m = make_mask(n)
  380:         m2 = m.copy()
  381:         x = array(d, mask=m)
  382:         assert_(x[3] is masked)
  383:         assert_(x[4] is masked)
  384:         x[[1, 4]] = [10, 40]
  385:         assert_(x._mask is m)
  386:         assert_(x[3] is masked)
  387:         assert_(x[4] is not masked)
  388:         assert_(eq(x, [0, 10, 2, -1, 40]))
  389: 
  390:         x = array(d, mask=m2, copy=True)
  391:         x.put([0, 1, 2], [-1, 100, 200])
  392:         assert_(x._mask is not m2)
  393:         assert_(x[3] is masked)
  394:         assert_(x[4] is masked)
  395:         assert_(eq(x, [-1, 100, 200, 0, 0]))
  396: 
  397:     def test_testPut2(self):
  398:         # Test of put
  399:         d = arange(5)
  400:         x = array(d, mask=[0, 0, 0, 0, 0])
  401:         z = array([10, 40], mask=[1, 0])
  402:         assert_(x[2] is not masked)
  403:         assert_(x[3] is not masked)
  404:         x[2:4] = z
  405:         assert_(x[2] is masked)
  406:         assert_(x[3] is not masked)
  407:         assert_(eq(x, [0, 1, 10, 40, 4]))
  408: 
  409:         d = arange(5)
  410:         x = array(d, mask=[0, 0, 0, 0, 0])
  411:         y = x[2:4]
  412:         z = array([10, 40], mask=[1, 0])
  413:         assert_(x[2] is not masked)
  414:         assert_(x[3] is not masked)
  415:         y[:] = z
  416:         assert_(y[0] is masked)
  417:         assert_(y[1] is not masked)
  418:         assert_(eq(y, [10, 40]))
  419:         assert_(x[2] is masked)
  420:         assert_(x[3] is not masked)
  421:         assert_(eq(x, [0, 1, 10, 40, 4]))
  422: 
  423:     def test_testMaPut(self):
  424:         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
  425:         m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]
  426:         i = np.nonzero(m)[0]
  427:         put(ym, i, zm)
  428:         assert_(all(take(ym, i, axis=0) == zm))
  429: 
  430:     def test_testOddFeatures(self):
  431:         # Test of other odd features
  432:         x = arange(20)
  433:         x = x.reshape(4, 5)
  434:         x.flat[5] = 12
  435:         assert_(x[1, 0] == 12)
  436:         z = x + 10j * x
  437:         assert_(eq(z.real, x))
  438:         assert_(eq(z.imag, 10 * x))
  439:         assert_(eq((z * conjugate(z)).real, 101 * x * x))
  440:         z.imag[...] = 0.0
  441: 
  442:         x = arange(10)
  443:         x[3] = masked
  444:         assert_(str(x[3]) == str(masked))
  445:         c = x >= 8
  446:         assert_(count(where(c, masked, masked)) == 0)
  447:         assert_(shape(where(c, masked, masked)) == c.shape)
  448:         z = where(c, x, masked)
  449:         assert_(z.dtype is x.dtype)
  450:         assert_(z[3] is masked)
  451:         assert_(z[4] is masked)
  452:         assert_(z[7] is masked)
  453:         assert_(z[8] is not masked)
  454:         assert_(z[9] is not masked)
  455:         assert_(eq(x, z))
  456:         z = where(c, masked, x)
  457:         assert_(z.dtype is x.dtype)
  458:         assert_(z[3] is masked)
  459:         assert_(z[4] is not masked)
  460:         assert_(z[7] is not masked)
  461:         assert_(z[8] is masked)
  462:         assert_(z[9] is masked)
  463:         z = masked_where(c, x)
  464:         assert_(z.dtype is x.dtype)
  465:         assert_(z[3] is masked)
  466:         assert_(z[4] is not masked)
  467:         assert_(z[7] is not masked)
  468:         assert_(z[8] is masked)
  469:         assert_(z[9] is masked)
  470:         assert_(eq(x, z))
  471:         x = array([1., 2., 3., 4., 5.])
  472:         c = array([1, 1, 1, 0, 0])
  473:         x[2] = masked
  474:         z = where(c, x, -x)
  475:         assert_(eq(z, [1., 2., 0., -4., -5]))
  476:         c[0] = masked
  477:         z = where(c, x, -x)
  478:         assert_(eq(z, [1., 2., 0., -4., -5]))
  479:         assert_(z[0] is masked)
  480:         assert_(z[1] is not masked)
  481:         assert_(z[2] is masked)
  482:         assert_(eq(masked_where(greater(x, 2), x), masked_greater(x, 2)))
  483:         assert_(eq(masked_where(greater_equal(x, 2), x),
  484:                    masked_greater_equal(x, 2)))
  485:         assert_(eq(masked_where(less(x, 2), x), masked_less(x, 2)))
  486:         assert_(eq(masked_where(less_equal(x, 2), x), masked_less_equal(x, 2)))
  487:         assert_(eq(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2)))
  488:         assert_(eq(masked_where(equal(x, 2), x), masked_equal(x, 2)))
  489:         assert_(eq(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2)))
  490:         assert_(eq(masked_inside(list(range(5)), 1, 3), [0, 199, 199, 199, 4]))
  491:         assert_(eq(masked_outside(list(range(5)), 1, 3), [199, 1, 2, 3, 199]))
  492:         assert_(eq(masked_inside(array(list(range(5)),
  493:                                        mask=[1, 0, 0, 0, 0]), 1, 3).mask,
  494:                    [1, 1, 1, 1, 0]))
  495:         assert_(eq(masked_outside(array(list(range(5)),
  496:                                         mask=[0, 1, 0, 0, 0]), 1, 3).mask,
  497:                    [1, 1, 0, 0, 1]))
  498:         assert_(eq(masked_equal(array(list(range(5)),
  499:                                       mask=[1, 0, 0, 0, 0]), 2).mask,
  500:                    [1, 0, 1, 0, 0]))
  501:         assert_(eq(masked_not_equal(array([2, 2, 1, 2, 1],
  502:                                           mask=[1, 0, 0, 0, 0]), 2).mask,
  503:                    [1, 0, 1, 0, 1]))
  504:         assert_(eq(masked_where([1, 1, 0, 0, 0], [1, 2, 3, 4, 5]),
  505:                    [99, 99, 3, 4, 5]))
  506:         atest = ones((10, 10, 10), dtype=np.float32)
  507:         btest = zeros(atest.shape, MaskType)
  508:         ctest = masked_where(btest, atest)
  509:         assert_(eq(atest, ctest))
  510:         z = choose(c, (-x, x))
  511:         assert_(eq(z, [1., 2., 0., -4., -5]))
  512:         assert_(z[0] is masked)
  513:         assert_(z[1] is not masked)
  514:         assert_(z[2] is masked)
  515:         x = arange(6)
  516:         x[5] = masked
  517:         y = arange(6) * 10
  518:         y[2] = masked
  519:         c = array([1, 1, 1, 0, 0, 0], mask=[1, 0, 0, 0, 0, 0])
  520:         cm = c.filled(1)
  521:         z = where(c, x, y)
  522:         zm = where(cm, x, y)
  523:         assert_(eq(z, zm))
  524:         assert_(getmask(zm) is nomask)
  525:         assert_(eq(zm, [0, 1, 2, 30, 40, 50]))
  526:         z = where(c, masked, 1)
  527:         assert_(eq(z, [99, 99, 99, 1, 1, 1]))
  528:         z = where(c, 1, masked)
  529:         assert_(eq(z, [99, 1, 1, 99, 99, 99]))
  530: 
  531:     def test_testMinMax2(self):
  532:         # Test of minimum, maximum.
  533:         assert_(eq(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3]))
  534:         assert_(eq(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9]))
  535:         x = arange(5)
  536:         y = arange(5) - 2
  537:         x[3] = masked
  538:         y[0] = masked
  539:         assert_(eq(minimum(x, y), where(less(x, y), x, y)))
  540:         assert_(eq(maximum(x, y), where(greater(x, y), x, y)))
  541:         assert_(minimum.reduce(x) == 0)
  542:         assert_(maximum.reduce(x) == 4)
  543: 
  544:     def test_testTakeTransposeInnerOuter(self):
  545:         # Test of take, transpose, inner, outer products
  546:         x = arange(24)
  547:         y = np.arange(24)
  548:         x[5:6] = masked
  549:         x = x.reshape(2, 3, 4)
  550:         y = y.reshape(2, 3, 4)
  551:         assert_(eq(np.transpose(y, (2, 0, 1)), transpose(x, (2, 0, 1))))
  552:         assert_(eq(np.take(y, (2, 0, 1), 1), take(x, (2, 0, 1), 1)))
  553:         assert_(eq(np.inner(filled(x, 0), filled(y, 0)),
  554:                    inner(x, y)))
  555:         assert_(eq(np.outer(filled(x, 0), filled(y, 0)),
  556:                    outer(x, y)))
  557:         y = array(['abc', 1, 'def', 2, 3], object)
  558:         y[2] = masked
  559:         t = take(y, [0, 3, 4])
  560:         assert_(t[0] == 'abc')
  561:         assert_(t[1] == 2)
  562:         assert_(t[2] == 3)
  563: 
  564:     def test_testInplace(self):
  565:         # Test of inplace operations and rich comparisons
  566:         y = arange(10)
  567: 
  568:         x = arange(10)
  569:         xm = arange(10)
  570:         xm[2] = masked
  571:         x += 1
  572:         assert_(eq(x, y + 1))
  573:         xm += 1
  574:         assert_(eq(x, y + 1))
  575: 
  576:         x = arange(10)
  577:         xm = arange(10)
  578:         xm[2] = masked
  579:         x -= 1
  580:         assert_(eq(x, y - 1))
  581:         xm -= 1
  582:         assert_(eq(xm, y - 1))
  583: 
  584:         x = arange(10) * 1.0
  585:         xm = arange(10) * 1.0
  586:         xm[2] = masked
  587:         x *= 2.0
  588:         assert_(eq(x, y * 2))
  589:         xm *= 2.0
  590:         assert_(eq(xm, y * 2))
  591: 
  592:         x = arange(10) * 2
  593:         xm = arange(10)
  594:         xm[2] = masked
  595:         x //= 2
  596:         assert_(eq(x, y))
  597:         xm //= 2
  598:         assert_(eq(x, y))
  599: 
  600:         x = arange(10) * 1.0
  601:         xm = arange(10) * 1.0
  602:         xm[2] = masked
  603:         x /= 2.0
  604:         assert_(eq(x, y / 2.0))
  605:         xm /= arange(10)
  606:         assert_(eq(xm, ones((10,))))
  607: 
  608:         x = arange(10).astype(np.float32)
  609:         xm = arange(10)
  610:         xm[2] = masked
  611:         x += 1.
  612:         assert_(eq(x, y + 1.))
  613: 
  614:     def test_testPickle(self):
  615:         # Test of pickling
  616:         x = arange(12)
  617:         x[4:10:2] = masked
  618:         x = x.reshape(4, 3)
  619:         for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
  620:             s = pickle.dumps(x, protocol=proto)
  621:             y = pickle.loads(s)
  622:             assert_(eq(x, y))
  623: 
  624:     def test_testMasked(self):
  625:         # Test of masked element
  626:         xx = arange(6)
  627:         xx[1] = masked
  628:         assert_(str(masked) == '--')
  629:         assert_(xx[1] is masked)
  630:         assert_equal(filled(xx[1], 0), 0)
  631: 
  632:     def test_testAverage1(self):
  633:         # Test of average.
  634:         ott = array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
  635:         assert_(eq(2.0, average(ott, axis=0)))
  636:         assert_(eq(2.0, average(ott, weights=[1., 1., 2., 1.])))
  637:         result, wts = average(ott, weights=[1., 1., 2., 1.], returned=True)
  638:         assert_(eq(2.0, result))
  639:         assert_(wts == 4.0)
  640:         ott[:] = masked
  641:         assert_(average(ott, axis=0) is masked)
  642:         ott = array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
  643:         ott = ott.reshape(2, 2)
  644:         ott[:, 1] = masked
  645:         assert_(eq(average(ott, axis=0), [2.0, 0.0]))
  646:         assert_(average(ott, axis=1)[0] is masked)
  647:         assert_(eq([2., 0.], average(ott, axis=0)))
  648:         result, wts = average(ott, axis=0, returned=True)
  649:         assert_(eq(wts, [1., 0.]))
  650: 
  651:     def test_testAverage2(self):
  652:         # More tests of average.
  653:         w1 = [0, 1, 1, 1, 1, 0]
  654:         w2 = [[0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1]]
  655:         x = arange(6)
  656:         assert_(allclose(average(x, axis=0), 2.5))
  657:         assert_(allclose(average(x, axis=0, weights=w1), 2.5))
  658:         y = array([arange(6), 2.0 * arange(6)])
  659:         assert_(allclose(average(y, None),
  660:                                  np.add.reduce(np.arange(6)) * 3. / 12.))
  661:         assert_(allclose(average(y, axis=0), np.arange(6) * 3. / 2.))
  662:         assert_(allclose(average(y, axis=1),
  663:                                  [average(x, axis=0), average(x, axis=0) * 2.0]))
  664:         assert_(allclose(average(y, None, weights=w2), 20. / 6.))
  665:         assert_(allclose(average(y, axis=0, weights=w2),
  666:                                  [0., 1., 2., 3., 4., 10.]))
  667:         assert_(allclose(average(y, axis=1),
  668:                                  [average(x, axis=0), average(x, axis=0) * 2.0]))
  669:         m1 = zeros(6)
  670:         m2 = [0, 0, 1, 1, 0, 0]
  671:         m3 = [[0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0]]
  672:         m4 = ones(6)
  673:         m5 = [0, 1, 1, 1, 1, 1]
  674:         assert_(allclose(average(masked_array(x, m1), axis=0), 2.5))
  675:         assert_(allclose(average(masked_array(x, m2), axis=0), 2.5))
  676:         assert_(average(masked_array(x, m4), axis=0) is masked)
  677:         assert_equal(average(masked_array(x, m5), axis=0), 0.0)
  678:         assert_equal(count(average(masked_array(x, m4), axis=0)), 0)
  679:         z = masked_array(y, m3)
  680:         assert_(allclose(average(z, None), 20. / 6.))
  681:         assert_(allclose(average(z, axis=0),
  682:                                  [0., 1., 99., 99., 4.0, 7.5]))
  683:         assert_(allclose(average(z, axis=1), [2.5, 5.0]))
  684:         assert_(allclose(average(z, axis=0, weights=w2),
  685:                                  [0., 1., 99., 99., 4.0, 10.0]))
  686: 
  687:         a = arange(6)
  688:         b = arange(6) * 3
  689:         r1, w1 = average([[a, b], [b, a]], axis=1, returned=True)
  690:         assert_equal(shape(r1), shape(w1))
  691:         assert_equal(r1.shape, w1.shape)
  692:         r2, w2 = average(ones((2, 2, 3)), axis=0, weights=[3, 1], returned=True)
  693:         assert_equal(shape(w2), shape(r2))
  694:         r2, w2 = average(ones((2, 2, 3)), returned=True)
  695:         assert_equal(shape(w2), shape(r2))
  696:         r2, w2 = average(ones((2, 2, 3)), weights=ones((2, 2, 3)), returned=True)
  697:         assert_(shape(w2) == shape(r2))
  698:         a2d = array([[1, 2], [0, 4]], float)
  699:         a2dm = masked_array(a2d, [[0, 0], [1, 0]])
  700:         a2da = average(a2d, axis=0)
  701:         assert_(eq(a2da, [0.5, 3.0]))
  702:         a2dma = average(a2dm, axis=0)
  703:         assert_(eq(a2dma, [1.0, 3.0]))
  704:         a2dma = average(a2dm, axis=None)
  705:         assert_(eq(a2dma, 7. / 3.))
  706:         a2dma = average(a2dm, axis=1)
  707:         assert_(eq(a2dma, [1.5, 4.0]))
  708: 
  709:     def test_testToPython(self):
  710:         assert_equal(1, int(array(1)))
  711:         assert_equal(1.0, float(array(1)))
  712:         assert_equal(1, int(array([[[1]]])))
  713:         assert_equal(1.0, float(array([[1]])))
  714:         assert_raises(TypeError, float, array([1, 1]))
  715:         assert_raises(ValueError, bool, array([0, 1]))
  716:         assert_raises(ValueError, bool, array([0, 0], mask=[0, 1]))
  717: 
  718:     def test_testScalarArithmetic(self):
  719:         xm = array(0, mask=1)
  720:         # TODO FIXME: Find out what the following raises a warning in r8247
  721:         with np.errstate(divide='ignore'):
  722:             assert_((1 / array(0)).mask)
  723:         assert_((1 + xm).mask)
  724:         assert_((-xm).mask)
  725:         assert_((-xm).mask)
  726:         assert_(maximum(xm, xm).mask)
  727:         assert_(minimum(xm, xm).mask)
  728:         assert_(xm.filled().dtype is xm._data.dtype)
  729:         x = array(0, mask=0)
  730:         assert_(x.filled() == x._data)
  731:         assert_equal(str(xm), str(masked_print_option))
  732: 
  733:     def test_testArrayMethods(self):
  734:         a = array([1, 3, 2])
  735:         assert_(eq(a.any(), a._data.any()))
  736:         assert_(eq(a.all(), a._data.all()))
  737:         assert_(eq(a.argmax(), a._data.argmax()))
  738:         assert_(eq(a.argmin(), a._data.argmin()))
  739:         assert_(eq(a.choose(0, 1, 2, 3, 4),
  740:                            a._data.choose(0, 1, 2, 3, 4)))
  741:         assert_(eq(a.compress([1, 0, 1]), a._data.compress([1, 0, 1])))
  742:         assert_(eq(a.conj(), a._data.conj()))
  743:         assert_(eq(a.conjugate(), a._data.conjugate()))
  744:         m = array([[1, 2], [3, 4]])
  745:         assert_(eq(m.diagonal(), m._data.diagonal()))
  746:         assert_(eq(a.sum(), a._data.sum()))
  747:         assert_(eq(a.take([1, 2]), a._data.take([1, 2])))
  748:         assert_(eq(m.transpose(), m._data.transpose()))
  749: 
  750:     def test_testArrayAttributes(self):
  751:         a = array([1, 3, 2])
  752:         assert_equal(a.ndim, 1)
  753: 
  754:     def test_testAPI(self):
  755:         assert_(not [m for m in dir(np.ndarray)
  756:                      if m not in dir(MaskedArray) and
  757:                      not m.startswith('_')])
  758: 
  759:     def test_testSingleElementSubscript(self):
  760:         a = array([1, 3, 2])
  761:         b = array([1, 3, 2], mask=[1, 0, 1])
  762:         assert_equal(a[0].shape, ())
  763:         assert_equal(b[0].shape, ())
  764:         assert_equal(b[1].shape, ())
  765: 
  766:     def test_assignment_by_condition(self):
  767:         # Test for gh-18951
  768:         a = array([1, 2, 3, 4], mask=[1, 0, 1, 0])
  769:         c = a >= 3
  770:         a[c] = 5
  771:         assert_(a[2] is masked)
  772: 
  773:     def test_assignment_by_condition_2(self):
  774:         # gh-19721
  775:         a = masked_array([0, 1], mask=[False, False])
  776:         b = masked_array([0, 1], mask=[True, True])
  777:         mask = a < 1
  778:         b[mask] = a[mask]
  779:         expected_mask = [False, True]
  780:         assert_equal(b.mask, expected_mask)
  781: 
  782: 
  783: class TestUfuncs:
  784:     def setup_method(self):
  785:         self.d = (array([1.0, 0, -1, pi / 2] * 2, mask=[0, 1] + [0] * 6),
  786:                   array([1.0, 0, -1, pi / 2] * 2, mask=[1, 0] + [0] * 6),)
  787: 
  788:     def test_testUfuncRegression(self):
  789:         f_invalid_ignore = [
  790:             'sqrt', 'arctanh', 'arcsin', 'arccos',
  791:             'arccosh', 'arctanh', 'log', 'log10', 'divide',
  792:             'true_divide', 'floor_divide', 'remainder', 'fmod']
  793:         for f in ['sqrt', 'log', 'log10', 'exp', 'conjugate',
  794:                   'sin', 'cos', 'tan',
  795:                   'arcsin', 'arccos', 'arctan',
  796:                   'sinh', 'cosh', 'tanh',
  797:                   'arcsinh',
  798:                   'arccosh',
  799:                   'arctanh',
  800:                   'absolute', 'fabs', 'negative',
  801:                   'floor', 'ceil',
  802:                   'logical_not',
  803:                   'add', 'subtract', 'multiply',
  804:                   'divide', 'true_divide', 'floor_divide',
  805:                   'remainder', 'fmod', 'hypot', 'arctan2',
  806:                   'equal', 'not_equal', 'less_equal', 'greater_equal',
  807:                   'less', 'greater',
  808:                   'logical_and', 'logical_or', 'logical_xor']:
  809:             try:
  810:                 uf = getattr(umath, f)
  811:             except AttributeError:
  812:                 uf = getattr(fromnumeric, f)
  813:             mf = getattr(np.ma, f)
  814:             args = self.d[:uf.nin]
  815:             with np.errstate():
  816:                 if f in f_invalid_ignore:
  817:                     np.seterr(invalid='ignore')
  818:                 if f in ['arctanh', 'log', 'log10']:
  819:                     np.seterr(divide='ignore')
  820:                 ur = uf(*args)
  821:                 mr = mf(*args)
  822:             assert_(eq(ur.filled(0), mr.filled(0), f))
  823:             assert_(eqmask(ur.mask, mr.mask))
  824: 
  825:     def test_reduce(self):
  826:         a = self.d[0]
  827:         assert_(not alltrue(a, axis=0))
  828:         assert_(sometrue(a, axis=0))
  829:         assert_equal(sum(a[:3], axis=0), 0)
  830:         assert_equal(product(a, axis=0), 0)
  831: 
  832:     def test_minmax(self):
  833:         a = arange(1, 13).reshape(3, 4)
  834:         amask = masked_where(a < 5, a)
  835:         assert_equal(amask.max(), a.max())
  836:         assert_equal(amask.min(), 5)
  837:         assert_((amask.max(0) == a.max(0)).all())
  838:         assert_((amask.min(0) == [5, 6, 7, 8]).all())
  839:         assert_(amask.max(1)[0].mask)
  840:         assert_(amask.min(1)[0].mask)
  841: 
  842:     def test_nonzero(self):
  843:         for t in "?bhilqpBHILQPfdgFDGO":
  844:             x = array([1, 0, 2, 0], mask=[0, 0, 1, 1])
  845:             assert_(eq(nonzero(x), [0]))
  846: 
  847: 
  848: class TestArrayMethods:
  849: 
  850:     def setup_method(self):
  851:         x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
  852:                       8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
  853:                       3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
  854:                       6.04, 9.63, 7.712, 3.382, 4.489, 6.479,
  855:                       7.189, 9.645, 5.395, 4.961, 9.894, 2.893,
  856:                       7.357, 9.828, 6.272, 3.758, 6.693, 0.993])
  857:         X = x.reshape(6, 6)
  858:         XX = x.reshape(3, 2, 2, 3)
  859: 
  860:         m = np.array([0, 1, 0, 1, 0, 0,
  861:                       1, 0, 1, 1, 0, 1,
  862:                       0, 0, 0, 1, 0, 1,
  863:                       0, 0, 0, 1, 1, 1,
  864:                       1, 0, 0, 1, 0, 0,
  865:                       0, 0, 1, 0, 1, 0])
  866:         mx = array(data=x, mask=m)
  867:         mX = array(data=X, mask=m.reshape(X.shape))
  868:         mXX = array(data=XX, mask=m.reshape(XX.shape))
  869: 
  870:         self.d = (x, X, XX, m, mx, mX, mXX)
  871: 
  872:     def test_trace(self):
  873:         (x, X, XX, m, mx, mX, mXX,) = self.d
  874:         mXdiag = mX.diagonal()
  875:         assert_equal(mX.trace(), mX.diagonal().compressed().sum())
  876:         assert_(eq(mX.trace(),
  877:                            X.trace() - sum(mXdiag.mask * X.diagonal(),
  878:                                            axis=0)))
  879: 
  880:     def test_clip(self):
  881:         (x, X, XX, m, mx, mX, mXX,) = self.d
  882:         clipped = mx.clip(2, 8)
  883:         assert_(eq(clipped.mask, mx.mask))
  884:         assert_(eq(clipped._data, x.clip(2, 8)))
  885:         assert_(eq(clipped._data, mx._data.clip(2, 8)))
  886: 
  887:     def test_ptp(self):
  888:         (x, X, XX, m, mx, mX, mXX,) = self.d
  889:         (n, m) = X.shape
  890:         # print(type(mx), mx.compressed())
  891:         # raise Exception()
  892:         assert_equal(mx.ptp(), np.ptp(mx.compressed()))
  893:         rows = np.zeros(n, np.float64)
  894:         cols = np.zeros(m, np.float64)
  895:         for k in range(m):
  896:             cols[k] = np.ptp(mX[:, k].compressed())
  897:         for k in range(n):
  898:             rows[k] = np.ptp(mX[k].compressed())
  899:         assert_(eq(mX.ptp(0), cols))
  900:         assert_(eq(mX.ptp(1), rows))
  901: 
  902:     def test_swapaxes(self):
  903:         (x, X, XX, m, mx, mX, mXX,) = self.d
  904:         mXswapped = mX.swapaxes(0, 1)
  905:         assert_(eq(mXswapped[-1], mX[:, -1]))
  906:         mXXswapped = mXX.swapaxes(0, 2)
  907:         assert_equal(mXXswapped.shape, (2, 2, 3, 3))
  908: 
  909:     def test_cumprod(self):
  910:         (x, X, XX, m, mx, mX, mXX,) = self.d
  911:         mXcp = mX.cumprod(0)
  912:         assert_(eq(mXcp._data, mX.filled(1).cumprod(0)))
  913:         mXcp = mX.cumprod(1)
  914:         assert_(eq(mXcp._data, mX.filled(1).cumprod(1)))
  915: 
  916:     def test_cumsum(self):
  917:         (x, X, XX, m, mx, mX, mXX,) = self.d
  918:         mXcp = mX.cumsum(0)
  919:         assert_(eq(mXcp._data, mX.filled(0).cumsum(0)))
  920:         mXcp = mX.cumsum(1)
  921:         assert_(eq(mXcp._data, mX.filled(0).cumsum(1)))
  922: 
  923:     def test_varstd(self):
  924:         (x, X, XX, m, mx, mX, mXX,) = self.d
  925:         assert_(eq(mX.var(axis=None), mX.compressed().var()))
  926:         assert_(eq(mX.std(axis=None), mX.compressed().std()))
  927:         assert_(eq(mXX.var(axis=3).shape, XX.var(axis=3).shape))
  928:         assert_(eq(mX.var().shape, X.var().shape))
  929:         (mXvar0, mXvar1) = (mX.var(axis=0), mX.var(axis=1))
  930:         for k in range(6):
  931:             assert_(eq(mXvar1[k], mX[k].compressed().var()))
  932:             assert_(eq(mXvar0[k], mX[:, k].compressed().var()))
  933:             assert_(eq(np.sqrt(mXvar0[k]),
  934:                                mX[:, k].compressed().std()))
  935: 
  936: 
  937: def eqmask(m1, m2):
  938:     if m1 is nomask:
  939:         return m2 is nomask
  940:     if m2 is nomask:
  941:         return m1 is nomask
  942:     return (m1 == m2).all()
