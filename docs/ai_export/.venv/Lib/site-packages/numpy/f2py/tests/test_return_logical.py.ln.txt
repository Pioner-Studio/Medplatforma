    1: import pytest
    2: 
    3: from numpy import array
    4: 
    5: from . import util
    6: 
    7: 
    8: class TestReturnLogical(util.F2PyTest):
    9:     def check_function(self, t):
   10:         assert t(True) == 1
   11:         assert t(False) == 0
   12:         assert t(0) == 0
   13:         assert t(None) == 0
   14:         assert t(0.0) == 0
   15:         assert t(0j) == 0
   16:         assert t(1j) == 1
   17:         assert t(234) == 1
   18:         assert t(234.6) == 1
   19:         assert t(234.6 + 3j) == 1
   20:         assert t("234") == 1
   21:         assert t("aaa") == 1
   22:         assert t("") == 0
   23:         assert t([]) == 0
   24:         assert t(()) == 0
   25:         assert t({}) == 0
   26:         assert t(t) == 1
   27:         assert t(-234) == 1
   28:         assert t(10**100) == 1
   29:         assert t([234]) == 1
   30:         assert t((234, )) == 1
   31:         assert t(array(234)) == 1
   32:         assert t(array([234])) == 1
   33:         assert t(array([[234]])) == 1
   34:         assert t(array([127], "b")) == 1
   35:         assert t(array([234], "h")) == 1
   36:         assert t(array([234], "i")) == 1
   37:         assert t(array([234], "l")) == 1
   38:         assert t(array([234], "f")) == 1
   39:         assert t(array([234], "d")) == 1
   40:         assert t(array([234 + 3j], "F")) == 1
   41:         assert t(array([234], "D")) == 1
   42:         assert t(array(0)) == 0
   43:         assert t(array([0])) == 0
   44:         assert t(array([[0]])) == 0
   45:         assert t(array([0j])) == 0
   46:         assert t(array([1])) == 1
   47:         pytest.raises(ValueError, t, array([0, 0]))
   48: 
   49: 
   50: class TestFReturnLogical(TestReturnLogical):
   51:     sources = [
   52:         util.getpath("tests", "src", "return_logical", "foo77.f"),
   53:         util.getpath("tests", "src", "return_logical", "foo90.f90"),
   54:     ]
   55: 
   56:     @pytest.mark.slow
   57:     @pytest.mark.parametrize("name", ["t0", "t1", "t2", "t4", "s0", "s1", "s2", "s4"])
   58:     def test_all_f77(self, name):
   59:         self.check_function(getattr(self.module, name))
   60: 
   61:     @pytest.mark.slow
   62:     @pytest.mark.parametrize("name",
   63:                              ["t0", "t1", "t2", "t4", "t8", "s0", "s1", "s2", "s4", "s8"])
   64:     def test_all_f90(self, name):
   65:         self.check_function(getattr(self.module.f90_return_logical, name))
