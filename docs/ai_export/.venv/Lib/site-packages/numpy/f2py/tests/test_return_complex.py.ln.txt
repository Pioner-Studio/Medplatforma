    1: import pytest
    2: 
    3: from numpy import array
    4: 
    5: from . import util
    6: 
    7: 
    8: @pytest.mark.slow
    9: class TestReturnComplex(util.F2PyTest):
   10:     def check_function(self, t, tname):
   11:         if tname in ["t0", "t8", "s0", "s8"]:
   12:             err = 1e-5
   13:         else:
   14:             err = 0.0
   15:         assert abs(t(234j) - 234.0j) <= err
   16:         assert abs(t(234.6) - 234.6) <= err
   17:         assert abs(t(234) - 234.0) <= err
   18:         assert abs(t(234.6 + 3j) - (234.6 + 3j)) <= err
   19:         # assert abs(t('234')-234.)<=err
   20:         # assert abs(t('234.6')-234.6)<=err
   21:         assert abs(t(-234) + 234.0) <= err
   22:         assert abs(t([234]) - 234.0) <= err
   23:         assert abs(t((234, )) - 234.0) <= err
   24:         assert abs(t(array(234)) - 234.0) <= err
   25:         assert abs(t(array(23 + 4j, "F")) - (23 + 4j)) <= err
   26:         assert abs(t(array([234])) - 234.0) <= err
   27:         assert abs(t(array([[234]])) - 234.0) <= err
   28:         assert abs(t(array([234]).astype("b")) + 22.0) <= err
   29:         assert abs(t(array([234], "h")) - 234.0) <= err
   30:         assert abs(t(array([234], "i")) - 234.0) <= err
   31:         assert abs(t(array([234], "l")) - 234.0) <= err
   32:         assert abs(t(array([234], "q")) - 234.0) <= err
   33:         assert abs(t(array([234], "f")) - 234.0) <= err
   34:         assert abs(t(array([234], "d")) - 234.0) <= err
   35:         assert abs(t(array([234 + 3j], "F")) - (234 + 3j)) <= err
   36:         assert abs(t(array([234], "D")) - 234.0) <= err
   37: 
   38:         # pytest.raises(TypeError, t, array([234], 'S1'))
   39:         pytest.raises(TypeError, t, "abc")
   40: 
   41:         pytest.raises(IndexError, t, [])
   42:         pytest.raises(IndexError, t, ())
   43: 
   44:         pytest.raises(TypeError, t, t)
   45:         pytest.raises(TypeError, t, {})
   46: 
   47:         try:
   48:             r = t(10**400)
   49:             assert repr(r) in ["(inf+0j)", "(Infinity+0j)"]
   50:         except OverflowError:
   51:             pass
   52: 
   53: 
   54: class TestFReturnComplex(TestReturnComplex):
   55:     sources = [
   56:         util.getpath("tests", "src", "return_complex", "foo77.f"),
   57:         util.getpath("tests", "src", "return_complex", "foo90.f90"),
   58:     ]
   59: 
   60:     @pytest.mark.parametrize("name", ["t0", "t8", "t16", "td", "s0", "s8", "s16", "sd"])
   61:     def test_all_f77(self, name):
   62:         self.check_function(getattr(self.module, name), name)
   63: 
   64:     @pytest.mark.parametrize("name", ["t0", "t8", "t16", "td", "s0", "s8", "s16", "sd"])
   65:     def test_all_f90(self, name):
   66:         self.check_function(getattr(self.module.f90_return_complex, name),
   67:                             name)
