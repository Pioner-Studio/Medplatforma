    1: import platform
    2: 
    3: import pytest
    4: 
    5: from numpy import array
    6: from numpy.testing import IS_64BIT
    7: 
    8: from . import util
    9: 
   10: 
   11: @pytest.mark.slow
   12: class TestReturnReal(util.F2PyTest):
   13:     def check_function(self, t, tname):
   14:         if tname in ["t0", "t4", "s0", "s4"]:
   15:             err = 1e-5
   16:         else:
   17:             err = 0.0
   18:         assert abs(t(234) - 234.0) <= err
   19:         assert abs(t(234.6) - 234.6) <= err
   20:         assert abs(t("234") - 234) <= err
   21:         assert abs(t("234.6") - 234.6) <= err
   22:         assert abs(t(-234) + 234) <= err
   23:         assert abs(t([234]) - 234) <= err
   24:         assert abs(t((234, )) - 234.0) <= err
   25:         assert abs(t(array(234)) - 234.0) <= err
   26:         assert abs(t(array(234).astype("b")) + 22) <= err
   27:         assert abs(t(array(234, "h")) - 234.0) <= err
   28:         assert abs(t(array(234, "i")) - 234.0) <= err
   29:         assert abs(t(array(234, "l")) - 234.0) <= err
   30:         assert abs(t(array(234, "B")) - 234.0) <= err
   31:         assert abs(t(array(234, "f")) - 234.0) <= err
   32:         assert abs(t(array(234, "d")) - 234.0) <= err
   33:         if tname in ["t0", "t4", "s0", "s4"]:
   34:             assert t(1e200) == t(1e300)  # inf
   35: 
   36:         # pytest.raises(ValueError, t, array([234], 'S1'))
   37:         pytest.raises(ValueError, t, "abc")
   38: 
   39:         pytest.raises(IndexError, t, [])
   40:         pytest.raises(IndexError, t, ())
   41: 
   42:         pytest.raises(Exception, t, t)
   43:         pytest.raises(Exception, t, {})
   44: 
   45:         try:
   46:             r = t(10**400)
   47:             assert repr(r) in ["inf", "Infinity"]
   48:         except OverflowError:
   49:             pass
   50: 
   51: 
   52: @pytest.mark.skipif(
   53:     platform.system() == "Darwin",
   54:     reason="Prone to error when run with numpy/f2py/tests on mac os, "
   55:     "but not when run in isolation",
   56: )
   57: @pytest.mark.skipif(
   58:     not IS_64BIT, reason="32-bit builds are buggy"
   59: )
   60: class TestCReturnReal(TestReturnReal):
   61:     suffix = ".pyf"
   62:     module_name = "c_ext_return_real"
   63:     code = """
   64: python module c_ext_return_real
   65: usercode \'\'\'
   66: float t4(float value) { return value; }
   67: void s4(float *t4, float value) { *t4 = value; }
   68: double t8(double value) { return value; }
   69: void s8(double *t8, double value) { *t8 = value; }
   70: \'\'\'
   71: interface
   72:   function t4(value)
   73:     real*4 intent(c) :: t4,value
   74:   end
   75:   function t8(value)
   76:     real*8 intent(c) :: t8,value
   77:   end
   78:   subroutine s4(t4,value)
   79:     intent(c) s4
   80:     real*4 intent(out) :: t4
   81:     real*4 intent(c) :: value
   82:   end
   83:   subroutine s8(t8,value)
   84:     intent(c) s8
   85:     real*8 intent(out) :: t8
   86:     real*8 intent(c) :: value
   87:   end
   88: end interface
   89: end python module c_ext_return_real
   90:     """
   91: 
   92:     @pytest.mark.parametrize("name", ["t4", "t8", "s4", "s8"])
   93:     def test_all(self, name):
   94:         self.check_function(getattr(self.module, name), name)
   95: 
   96: 
   97: class TestFReturnReal(TestReturnReal):
   98:     sources = [
   99:         util.getpath("tests", "src", "return_real", "foo77.f"),
  100:         util.getpath("tests", "src", "return_real", "foo90.f90"),
  101:     ]
  102: 
  103:     @pytest.mark.parametrize("name", ["t0", "t4", "t8", "td", "s0", "s4", "s8", "sd"])
  104:     def test_all_f77(self, name):
  105:         self.check_function(getattr(self.module, name), name)
  106: 
  107:     @pytest.mark.parametrize("name", ["t0", "t4", "t8", "td", "s0", "s4", "s8", "sd"])
  108:     def test_all_f90(self, name):
  109:         self.check_function(getattr(self.module.f90_return_real, name), name)
