    1: import pytest
    2: 
    3: from numpy import array
    4: 
    5: from . import util
    6: 
    7: 
    8: @pytest.mark.slow
    9: class TestReturnInteger(util.F2PyTest):
   10:     def check_function(self, t, tname):
   11:         assert t(123) == 123
   12:         assert t(123.6) == 123
   13:         assert t("123") == 123
   14:         assert t(-123) == -123
   15:         assert t([123]) == 123
   16:         assert t((123, )) == 123
   17:         assert t(array(123)) == 123
   18:         assert t(array(123, "b")) == 123
   19:         assert t(array(123, "h")) == 123
   20:         assert t(array(123, "i")) == 123
   21:         assert t(array(123, "l")) == 123
   22:         assert t(array(123, "B")) == 123
   23:         assert t(array(123, "f")) == 123
   24:         assert t(array(123, "d")) == 123
   25: 
   26:         # pytest.raises(ValueError, t, array([123],'S3'))
   27:         pytest.raises(ValueError, t, "abc")
   28: 
   29:         pytest.raises(IndexError, t, [])
   30:         pytest.raises(IndexError, t, ())
   31: 
   32:         pytest.raises(Exception, t, t)
   33:         pytest.raises(Exception, t, {})
   34: 
   35:         if tname in ["t8", "s8"]:
   36:             pytest.raises(OverflowError, t, 100000000000000000000000)
   37:             pytest.raises(OverflowError, t, 10000000011111111111111.23)
   38: 
   39: 
   40: class TestFReturnInteger(TestReturnInteger):
   41:     sources = [
   42:         util.getpath("tests", "src", "return_integer", "foo77.f"),
   43:         util.getpath("tests", "src", "return_integer", "foo90.f90"),
   44:     ]
   45: 
   46:     @pytest.mark.parametrize("name",
   47:                              ["t0", "t1", "t2", "t4", "t8", "s0", "s1", "s2", "s4", "s8"])
   48:     def test_all_f77(self, name):
   49:         self.check_function(getattr(self.module, name), name)
   50: 
   51:     @pytest.mark.parametrize("name",
   52:                              ["t0", "t1", "t2", "t4", "t8", "s0", "s1", "s2", "s4", "s8"])
   53:     def test_all_f90(self, name):
   54:         self.check_function(getattr(self.module.f90_return_integer, name),
   55:                             name)
