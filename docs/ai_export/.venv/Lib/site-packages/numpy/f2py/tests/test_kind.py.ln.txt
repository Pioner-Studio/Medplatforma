    1: import platform
    2: import sys
    3: 
    4: import pytest
    5: 
    6: from numpy.f2py.crackfortran import (
    7:     _selected_int_kind_func as selected_int_kind,
    8: )
    9: from numpy.f2py.crackfortran import (
   10:     _selected_real_kind_func as selected_real_kind,
   11: )
   12: 
   13: from . import util
   14: 
   15: 
   16: class TestKind(util.F2PyTest):
   17:     sources = [util.getpath("tests", "src", "kind", "foo.f90")]
   18: 
   19:     @pytest.mark.skipif(sys.maxsize < 2 ** 31 + 1,
   20:                         reason="Fails for 32 bit machines")
   21:     def test_int(self):
   22:         """Test `int` kind_func for integers up to 10**40."""
   23:         selectedintkind = self.module.selectedintkind
   24: 
   25:         for i in range(40):
   26:             assert selectedintkind(i) == selected_int_kind(
   27:                 i
   28:             ), f"selectedintkind({i}): expected {selected_int_kind(i)!r} but got {selectedintkind(i)!r}"
   29: 
   30:     def test_real(self):
   31:         """
   32:         Test (processor-dependent) `real` kind_func for real numbers
   33:         of up to 31 digits precision (extended/quadruple).
   34:         """
   35:         selectedrealkind = self.module.selectedrealkind
   36: 
   37:         for i in range(32):
   38:             assert selectedrealkind(i) == selected_real_kind(
   39:                 i
   40:             ), f"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}"
   41: 
   42:     @pytest.mark.xfail(platform.machine().lower().startswith("ppc"),
   43:                        reason="Some PowerPC may not support full IEEE 754 precision")
   44:     def test_quad_precision(self):
   45:         """
   46:         Test kind_func for quadruple precision [`real(16)`] of 32+ digits .
   47:         """
   48:         selectedrealkind = self.module.selectedrealkind
   49: 
   50:         for i in range(32, 40):
   51:             assert selectedrealkind(i) == selected_real_kind(
   52:                 i
   53:             ), f"selectedrealkind({i}): expected {selected_real_kind(i)!r} but got {selectedrealkind(i)!r}"
