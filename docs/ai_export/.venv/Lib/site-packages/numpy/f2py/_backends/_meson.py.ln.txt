    1: import errno
    2: import os
    3: import re
    4: import shutil
    5: import subprocess
    6: import sys
    7: from itertools import chain
    8: from pathlib import Path
    9: from string import Template
   10: 
   11: from ._backend import Backend
   12: 
   13: 
   14: class MesonTemplate:
   15:     """Template meson build file generation class."""
   16: 
   17:     def __init__(
   18:         self,
   19:         modulename: str,
   20:         sources: list[Path],
   21:         deps: list[str],
   22:         libraries: list[str],
   23:         library_dirs: list[Path],
   24:         include_dirs: list[Path],
   25:         object_files: list[Path],
   26:         linker_args: list[str],
   27:         fortran_args: list[str],
   28:         build_type: str,
   29:         python_exe: str,
   30:     ):
   31:         self.modulename = modulename
   32:         self.build_template_path = (
   33:             Path(__file__).parent.absolute() / "meson.build.template"
   34:         )
   35:         self.sources = sources
   36:         self.deps = deps
   37:         self.libraries = libraries
   38:         self.library_dirs = library_dirs
   39:         if include_dirs is not None:
   40:             self.include_dirs = include_dirs
   41:         else:
   42:             self.include_dirs = []
   43:         self.substitutions = {}
   44:         self.objects = object_files
   45:         # Convert args to '' wrapped variant for meson
   46:         self.fortran_args = [
   47:             f"'{x}'" if not (x.startswith("'") and x.endswith("'")) else x
   48:             for x in fortran_args
   49:         ]
   50:         self.pipeline = [
   51:             self.initialize_template,
   52:             self.sources_substitution,
   53:             self.deps_substitution,
   54:             self.include_substitution,
   55:             self.libraries_substitution,
   56:             self.fortran_args_substitution,
   57:         ]
   58:         self.build_type = build_type
   59:         self.python_exe = python_exe
   60:         self.indent = " " * 21
   61: 
   62:     def meson_build_template(self) -> str:
   63:         if not self.build_template_path.is_file():
   64:             raise FileNotFoundError(
   65:                 errno.ENOENT,
   66:                 "Meson build template"
   67:                 f" {self.build_template_path.absolute()}"
   68:                 " does not exist.",
   69:             )
   70:         return self.build_template_path.read_text()
   71: 
   72:     def initialize_template(self) -> None:
   73:         self.substitutions["modulename"] = self.modulename
   74:         self.substitutions["buildtype"] = self.build_type
   75:         self.substitutions["python"] = self.python_exe
   76: 
   77:     def sources_substitution(self) -> None:
   78:         self.substitutions["source_list"] = ",\n".join(
   79:             [f"{self.indent}'''{source}'''," for source in self.sources]
   80:         )
   81: 
   82:     def deps_substitution(self) -> None:
   83:         self.substitutions["dep_list"] = f",\n{self.indent}".join(
   84:             [f"{self.indent}dependency('{dep}')," for dep in self.deps]
   85:         )
   86: 
   87:     def libraries_substitution(self) -> None:
   88:         self.substitutions["lib_dir_declarations"] = "\n".join(
   89:             [
   90:                 f"lib_dir_{i} = declare_dependency(link_args : ['''-L{lib_dir}'''])"
   91:                 for i, lib_dir in enumerate(self.library_dirs)
   92:             ]
   93:         )
   94: 
   95:         self.substitutions["lib_declarations"] = "\n".join(
   96:             [
   97:                 f"{lib.replace('.', '_')} = declare_dependency(link_args : ['-l{lib}'])"
   98:                 for lib in self.libraries
   99:             ]
  100:         )
  101: 
  102:         self.substitutions["lib_list"] = f"\n{self.indent}".join(
  103:             [f"{self.indent}{lib.replace('.', '_')}," for lib in self.libraries]
  104:         )
  105:         self.substitutions["lib_dir_list"] = f"\n{self.indent}".join(
  106:             [f"{self.indent}lib_dir_{i}," for i in range(len(self.library_dirs))]
  107:         )
  108: 
  109:     def include_substitution(self) -> None:
  110:         self.substitutions["inc_list"] = f",\n{self.indent}".join(
  111:             [f"{self.indent}'''{inc}'''," for inc in self.include_dirs]
  112:         )
  113: 
  114:     def fortran_args_substitution(self) -> None:
  115:         if self.fortran_args:
  116:             self.substitutions["fortran_args"] = (
  117:                 f"{self.indent}fortran_args: [{', '.join(list(self.fortran_args))}],"
  118:             )
  119:         else:
  120:             self.substitutions["fortran_args"] = ""
  121: 
  122:     def generate_meson_build(self):
  123:         for node in self.pipeline:
  124:             node()
  125:         template = Template(self.meson_build_template())
  126:         meson_build = template.substitute(self.substitutions)
  127:         meson_build = meson_build.replace(",,", ",")
  128:         return meson_build
  129: 
  130: 
  131: class MesonBackend(Backend):
  132:     def __init__(self, *args, **kwargs):
  133:         super().__init__(*args, **kwargs)
  134:         self.dependencies = self.extra_dat.get("dependencies", [])
  135:         self.meson_build_dir = "bbdir"
  136:         self.build_type = (
  137:             "debug" if any("debug" in flag for flag in self.fc_flags) else "release"
  138:         )
  139:         self.fc_flags = _get_flags(self.fc_flags)
  140: 
  141:     def _move_exec_to_root(self, build_dir: Path):
  142:         walk_dir = Path(build_dir) / self.meson_build_dir
  143:         path_objects = chain(
  144:             walk_dir.glob(f"{self.modulename}*.so"),
  145:             walk_dir.glob(f"{self.modulename}*.pyd"),
  146:             walk_dir.glob(f"{self.modulename}*.dll"),
  147:         )
  148:         # Same behavior as distutils
  149:         # https://github.com/numpy/numpy/issues/24874#issuecomment-1835632293
  150:         for path_object in path_objects:
  151:             dest_path = Path.cwd() / path_object.name
  152:             if dest_path.exists():
  153:                 dest_path.unlink()
  154:             shutil.copy2(path_object, dest_path)
  155:             os.remove(path_object)
  156: 
  157:     def write_meson_build(self, build_dir: Path) -> None:
  158:         """Writes the meson build file at specified location"""
  159:         meson_template = MesonTemplate(
  160:             self.modulename,
  161:             self.sources,
  162:             self.dependencies,
  163:             self.libraries,
  164:             self.library_dirs,
  165:             self.include_dirs,
  166:             self.extra_objects,
  167:             self.flib_flags,
  168:             self.fc_flags,
  169:             self.build_type,
  170:             sys.executable,
  171:         )
  172:         src = meson_template.generate_meson_build()
  173:         Path(build_dir).mkdir(parents=True, exist_ok=True)
  174:         meson_build_file = Path(build_dir) / "meson.build"
  175:         meson_build_file.write_text(src)
  176:         return meson_build_file
  177: 
  178:     def _run_subprocess_command(self, command, cwd):
  179:         subprocess.run(command, cwd=cwd, check=True)
  180: 
  181:     def run_meson(self, build_dir: Path):
  182:         setup_command = ["meson", "setup", self.meson_build_dir]
  183:         self._run_subprocess_command(setup_command, build_dir)
  184:         compile_command = ["meson", "compile", "-C", self.meson_build_dir]
  185:         self._run_subprocess_command(compile_command, build_dir)
  186: 
  187:     def compile(self) -> None:
  188:         self.sources = _prepare_sources(self.modulename, self.sources, self.build_dir)
  189:         self.write_meson_build(self.build_dir)
  190:         self.run_meson(self.build_dir)
  191:         self._move_exec_to_root(self.build_dir)
  192: 
  193: 
  194: def _prepare_sources(mname, sources, bdir):
  195:     extended_sources = sources.copy()
  196:     Path(bdir).mkdir(parents=True, exist_ok=True)
  197:     # Copy sources
  198:     for source in sources:
  199:         if Path(source).exists() and Path(source).is_file():
  200:             shutil.copy(source, bdir)
  201:     generated_sources = [
  202:         Path(f"{mname}module.c"),
  203:         Path(f"{mname}-f2pywrappers2.f90"),
  204:         Path(f"{mname}-f2pywrappers.f"),
  205:     ]
  206:     bdir = Path(bdir)
  207:     for generated_source in generated_sources:
  208:         if generated_source.exists():
  209:             shutil.copy(generated_source, bdir / generated_source.name)
  210:             extended_sources.append(generated_source.name)
  211:             generated_source.unlink()
  212:     extended_sources = [
  213:         Path(source).name
  214:         for source in extended_sources
  215:         if not Path(source).suffix == ".pyf"
  216:     ]
  217:     return extended_sources
  218: 
  219: 
  220: def _get_flags(fc_flags):
  221:     flag_values = []
  222:     flag_pattern = re.compile(r"--f(77|90)flags=(.*)")
  223:     for flag in fc_flags:
  224:         match_result = flag_pattern.match(flag)
  225:         if match_result:
  226:             values = match_result.group(2).strip().split()
  227:             values = [val.strip("'\"") for val in values]
  228:             flag_values.extend(values)
  229:     # Hacky way to preserve order of flags
  230:     unique_flags = list(dict.fromkeys(flag_values))
  231:     return unique_flags
