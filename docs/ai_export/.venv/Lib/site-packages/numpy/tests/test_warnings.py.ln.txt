    1: """
    2: Tests which scan for certain occurrences in the code, they may not find
    3: all of these occurrences but should catch almost all.
    4: """
    5: import ast
    6: import tokenize
    7: from pathlib import Path
    8: 
    9: import pytest
   10: 
   11: import numpy
   12: 
   13: 
   14: class ParseCall(ast.NodeVisitor):
   15:     def __init__(self):
   16:         self.ls = []
   17: 
   18:     def visit_Attribute(self, node):
   19:         ast.NodeVisitor.generic_visit(self, node)
   20:         self.ls.append(node.attr)
   21: 
   22:     def visit_Name(self, node):
   23:         self.ls.append(node.id)
   24: 
   25: 
   26: class FindFuncs(ast.NodeVisitor):
   27:     def __init__(self, filename):
   28:         super().__init__()
   29:         self.__filename = filename
   30: 
   31:     def visit_Call(self, node):
   32:         p = ParseCall()
   33:         p.visit(node.func)
   34:         ast.NodeVisitor.generic_visit(self, node)
   35: 
   36:         if p.ls[-1] == 'simplefilter' or p.ls[-1] == 'filterwarnings':
   37:             if node.args[0].value == "ignore":
   38:                 raise AssertionError(
   39:                     "warnings should have an appropriate stacklevel; "
   40:                     f"found in {self.__filename} on line {node.lineno}")
   41: 
   42:         if p.ls[-1] == 'warn' and (
   43:                 len(p.ls) == 1 or p.ls[-2] == 'warnings'):
   44: 
   45:             if "testing/tests/test_warnings.py" == self.__filename:
   46:                 # This file
   47:                 return
   48: 
   49:             # See if stacklevel exists:
   50:             if len(node.args) == 3:
   51:                 return
   52:             args = {kw.arg for kw in node.keywords}
   53:             if "stacklevel" in args:
   54:                 return
   55:             raise AssertionError(
   56:                 "warnings should have an appropriate stacklevel; "
   57:                 f"found in {self.__filename} on line {node.lineno}")
   58: 
   59: 
   60: @pytest.mark.slow
   61: def test_warning_calls():
   62:     # combined "ignore" and stacklevel error
   63:     base = Path(numpy.__file__).parent
   64: 
   65:     for path in base.rglob("*.py"):
   66:         if base / "testing" in path.parents:
   67:             continue
   68:         if path == base / "__init__.py":
   69:             continue
   70:         if path == base / "random" / "__init__.py":
   71:             continue
   72:         if path == base / "conftest.py":
   73:             continue
   74:         # use tokenize to auto-detect encoding on systems where no
   75:         # default encoding is defined (e.g. LANG='C')
   76:         with tokenize.open(str(path)) as file:
   77:             tree = ast.parse(file.read())
   78:             FindFuncs(path).visit(tree)
