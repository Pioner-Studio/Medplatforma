    1: """ Test scripts
    2: 
    3: Test that we can run executable scripts that have been installed with numpy.
    4: """
    5: import os
    6: import subprocess
    7: import sys
    8: from os.path import dirname, isfile
    9: from os.path import join as pathjoin
   10: 
   11: import pytest
   12: 
   13: import numpy as np
   14: from numpy.testing import IS_WASM, assert_equal
   15: 
   16: is_inplace = isfile(pathjoin(dirname(np.__file__), '..', 'setup.py'))
   17: 
   18: 
   19: def find_f2py_commands():
   20:     if sys.platform == 'win32':
   21:         exe_dir = dirname(sys.executable)
   22:         if exe_dir.endswith('Scripts'):  # virtualenv
   23:             return [os.path.join(exe_dir, 'f2py')]
   24:         else:
   25:             return [os.path.join(exe_dir, "Scripts", 'f2py')]
   26:     else:
   27:         # Three scripts are installed in Unix-like systems:
   28:         # 'f2py', 'f2py{major}', and 'f2py{major.minor}'. For example,
   29:         # if installed with python3.9 the scripts would be named
   30:         # 'f2py', 'f2py3', and 'f2py3.9'.
   31:         version = sys.version_info
   32:         major = str(version.major)
   33:         minor = str(version.minor)
   34:         return ['f2py', 'f2py' + major, 'f2py' + major + '.' + minor]
   35: 
   36: 
   37: @pytest.mark.skipif(is_inplace, reason="Cannot test f2py command inplace")
   38: @pytest.mark.xfail(reason="Test is unreliable")
   39: @pytest.mark.parametrize('f2py_cmd', find_f2py_commands())
   40: def test_f2py(f2py_cmd):
   41:     # test that we can run f2py script
   42:     stdout = subprocess.check_output([f2py_cmd, '-v'])
   43:     assert_equal(stdout.strip(), np.__version__.encode('ascii'))
   44: 
   45: 
   46: @pytest.mark.skipif(IS_WASM, reason="Cannot start subprocess")
   47: def test_pep338():
   48:     stdout = subprocess.check_output([sys.executable, '-mnumpy.f2py', '-v'])
   49:     assert_equal(stdout.strip(), np.__version__.encode('ascii'))
