    1: import pickle
    2: import subprocess
    3: import sys
    4: import textwrap
    5: from importlib import reload
    6: 
    7: import pytest
    8: 
    9: import numpy.exceptions as ex
   10: from numpy.testing import (
   11:     IS_WASM,
   12:     assert_,
   13:     assert_equal,
   14:     assert_raises,
   15:     assert_warns,
   16: )
   17: 
   18: 
   19: def test_numpy_reloading():
   20:     # gh-7844. Also check that relevant globals retain their identity.
   21:     import numpy as np
   22:     import numpy._globals
   23: 
   24:     _NoValue = np._NoValue
   25:     VisibleDeprecationWarning = ex.VisibleDeprecationWarning
   26:     ModuleDeprecationWarning = ex.ModuleDeprecationWarning
   27: 
   28:     with assert_warns(UserWarning):
   29:         reload(np)
   30:     assert_(_NoValue is np._NoValue)
   31:     assert_(ModuleDeprecationWarning is ex.ModuleDeprecationWarning)
   32:     assert_(VisibleDeprecationWarning is ex.VisibleDeprecationWarning)
   33: 
   34:     assert_raises(RuntimeError, reload, numpy._globals)
   35:     with assert_warns(UserWarning):
   36:         reload(np)
   37:     assert_(_NoValue is np._NoValue)
   38:     assert_(ModuleDeprecationWarning is ex.ModuleDeprecationWarning)
   39:     assert_(VisibleDeprecationWarning is ex.VisibleDeprecationWarning)
   40: 
   41: def test_novalue():
   42:     import numpy as np
   43:     for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
   44:         assert_equal(repr(np._NoValue), '<no value>')
   45:         assert_(pickle.loads(pickle.dumps(np._NoValue,
   46:                                           protocol=proto)) is np._NoValue)
   47: 
   48: 
   49: @pytest.mark.skipif(IS_WASM, reason="can't start subprocess")
   50: def test_full_reimport():
   51:     """At the time of writing this, it is *not* truly supported, but
   52:     apparently enough users rely on it, for it to be an annoying change
   53:     when it started failing previously.
   54:     """
   55:     # Test within a new process, to ensure that we do not mess with the
   56:     # global state during the test run (could lead to cryptic test failures).
   57:     # This is generally unsafe, especially, since we also reload the C-modules.
   58:     code = textwrap.dedent(r"""
   59:         import sys
   60:         from pytest import warns
   61:         import numpy as np
   62: 
   63:         for k in list(sys.modules.keys()):
   64:             if "numpy" in k:
   65:                 del sys.modules[k]
   66: 
   67:         with warns(UserWarning):
   68:             import numpy as np
   69:         """)
   70:     p = subprocess.run([sys.executable, '-c', code], capture_output=True)
   71:     if p.returncode:
   72:         raise AssertionError(
   73:             f"Non-zero return code: {p.returncode!r}\n\n{p.stderr.decode()}"
   74:         )
