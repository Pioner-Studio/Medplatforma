    1: """A crude *bit of everything* smoke test to verify PyInstaller compatibility.
    2: 
    3: PyInstaller typically goes wrong by forgetting to package modules, extension
    4: modules or shared libraries. This script should aim to touch as many of those
    5: as possible in an attempt to trip a ModuleNotFoundError or a DLL load failure
    6: due to an uncollected resource. Missing resources are unlikely to lead to
    7: arithmetic errors so there's generally no need to verify any calculation's
    8: output - merely that it made it to the end OK. This script should not
    9: explicitly import any of numpy's submodules as that gives PyInstaller undue
   10: hints that those submodules exist and should be collected (accessing implicitly
   11: loaded submodules is OK).
   12: 
   13: """
   14: import numpy as np
   15: 
   16: a = np.arange(1., 10.).reshape((3, 3)) % 5
   17: np.linalg.det(a)
   18: a @ a
   19: a @ a.T
   20: np.linalg.inv(a)
   21: np.sin(np.exp(a))
   22: np.linalg.svd(a)
   23: np.linalg.eigh(a)
   24: 
   25: np.unique(np.random.randint(0, 10, 100))
   26: np.sort(np.random.uniform(0, 10, 100))
   27: 
   28: np.fft.fft(np.exp(2j * np.pi * np.arange(8) / 8))
   29: np.ma.masked_array(np.arange(10), np.random.rand(10) < .5).sum()
   30: np.polynomial.Legendre([7, 8, 9]).roots()
   31: 
   32: print("I made it!")
