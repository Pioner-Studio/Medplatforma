    1: """
    2: Tests for miscellaneous (non-magic) ``np.ndarray``/``np.generic`` methods.
    3: 
    4: More extensive tests are performed for the methods'
    5: function-based counterpart in `../from_numeric.py`.
    6: 
    7: """
    8: 
    9: from __future__ import annotations
   10: 
   11: import operator
   12: from typing import cast, Any
   13: 
   14: import numpy as np
   15: import numpy.typing as npt
   16: 
   17: class SubClass(npt.NDArray[np.float64]): ...
   18: class IntSubClass(npt.NDArray[np.intp]): ...
   19: 
   20: i4 = np.int32(1)
   21: A: np.ndarray[Any, np.dtype[np.int32]] = np.array([[1]], dtype=np.int32)
   22: B0 = np.empty((), dtype=np.int32).view(SubClass)
   23: B1 = np.empty((1,), dtype=np.int32).view(SubClass)
   24: B2 = np.empty((1, 1), dtype=np.int32).view(SubClass)
   25: B_int0: IntSubClass = np.empty((), dtype=np.intp).view(IntSubClass)
   26: C: np.ndarray[Any, np.dtype[np.int32]] = np.array([0, 1, 2], dtype=np.int32)
   27: D = np.ones(3).view(SubClass)
   28: 
   29: ctypes_obj = A.ctypes
   30: 
   31: i4.all()
   32: A.all()
   33: A.all(axis=0)
   34: A.all(keepdims=True)
   35: A.all(out=B0)
   36: 
   37: i4.any()
   38: A.any()
   39: A.any(axis=0)
   40: A.any(keepdims=True)
   41: A.any(out=B0)
   42: 
   43: i4.argmax()
   44: A.argmax()
   45: A.argmax(axis=0)
   46: A.argmax(out=B_int0)
   47: 
   48: i4.argmin()
   49: A.argmin()
   50: A.argmin(axis=0)
   51: A.argmin(out=B_int0)
   52: 
   53: i4.argsort()
   54: A.argsort()
   55: 
   56: i4.choose([()])
   57: _choices = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]], dtype=np.int32)
   58: C.choose(_choices)
   59: C.choose(_choices, out=D)
   60: 
   61: i4.clip(1)
   62: A.clip(1)
   63: A.clip(None, 1)
   64: A.clip(1, out=B2)
   65: A.clip(None, 1, out=B2)
   66: 
   67: i4.compress([1])
   68: A.compress([1])
   69: A.compress([1], out=B1)
   70: 
   71: i4.conj()
   72: A.conj()
   73: B0.conj()
   74: 
   75: i4.conjugate()
   76: A.conjugate()
   77: B0.conjugate()
   78: 
   79: i4.cumprod()
   80: A.cumprod()
   81: A.cumprod(out=B1)
   82: 
   83: i4.cumsum()
   84: A.cumsum()
   85: A.cumsum(out=B1)
   86: 
   87: i4.max()
   88: A.max()
   89: A.max(axis=0)
   90: A.max(keepdims=True)
   91: A.max(out=B0)
   92: 
   93: i4.mean()
   94: A.mean()
   95: A.mean(axis=0)
   96: A.mean(keepdims=True)
   97: A.mean(out=B0)
   98: 
   99: i4.min()
  100: A.min()
  101: A.min(axis=0)
  102: A.min(keepdims=True)
  103: A.min(out=B0)
  104: 
  105: i4.prod()
  106: A.prod()
  107: A.prod(axis=0)
  108: A.prod(keepdims=True)
  109: A.prod(out=B0)
  110: 
  111: i4.round()
  112: A.round()
  113: A.round(out=B2)
  114: 
  115: i4.repeat(1)
  116: A.repeat(1)
  117: B0.repeat(1)
  118: 
  119: i4.std()
  120: A.std()
  121: A.std(axis=0)
  122: A.std(keepdims=True)
  123: A.std(out=B0.astype(np.float64))
  124: 
  125: i4.sum()
  126: A.sum()
  127: A.sum(axis=0)
  128: A.sum(keepdims=True)
  129: A.sum(out=B0)
  130: 
  131: i4.take(0)
  132: A.take(0)
  133: A.take([0])
  134: A.take(0, out=B0)
  135: A.take([0], out=B1)
  136: 
  137: i4.var()
  138: A.var()
  139: A.var(axis=0)
  140: A.var(keepdims=True)
  141: A.var(out=B0)
  142: 
  143: A.argpartition([0])
  144: 
  145: A.diagonal()
  146: 
  147: A.dot(1)
  148: A.dot(1, out=B2)
  149: 
  150: A.nonzero()
  151: 
  152: C.searchsorted(1)
  153: 
  154: A.trace()
  155: A.trace(out=B0)
  156: 
  157: void = cast(np.void, np.array(1, dtype=[("f", np.float64)]).take(0))
  158: void.setfield(10, np.float64)
  159: 
  160: A.item(0)
  161: C.item(0)
  162: 
  163: A.ravel()
  164: C.ravel()
  165: 
  166: A.flatten()
  167: C.flatten()
  168: 
  169: A.reshape(1)
  170: C.reshape(3)
  171: 
  172: int(np.array(1.0, dtype=np.float64))
  173: int(np.array("1", dtype=np.str_))
  174: 
  175: float(np.array(1.0, dtype=np.float64))
  176: float(np.array("1", dtype=np.str_))
  177: 
  178: complex(np.array(1.0, dtype=np.float64))
  179: 
  180: operator.index(np.array(1, dtype=np.int64))
  181: 
  182: # this fails on numpy 2.2.1
  183: # https://github.com/scipy/scipy/blob/a755ee77ec47a64849abe42c349936475a6c2f24/scipy/io/arff/tests/test_arffread.py#L41-L44
  184: A_float = np.array([[1, 5], [2, 4], [np.nan, np.nan]])
  185: A_void: npt.NDArray[np.void] = np.empty(3, [("yop", float), ("yap", float)])
  186: A_void["yop"] = A_float[:, 0]
  187: A_void["yap"] = A_float[:, 1]
  188: 
  189: # deprecated
  190: 
  191: with np.testing.assert_warns(DeprecationWarning):
  192:     ctypes_obj.get_data()  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
  193: with np.testing.assert_warns(DeprecationWarning):
  194:     ctypes_obj.get_shape()  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
  195: with np.testing.assert_warns(DeprecationWarning):
  196:     ctypes_obj.get_strides()  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
  197: with np.testing.assert_warns(DeprecationWarning):
  198:     ctypes_obj.get_as_parameter()  # type: ignore[deprecated]  # pyright: ignore[reportDeprecated]
