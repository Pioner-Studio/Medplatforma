    1: from __future__ import annotations
    2: 
    3: from typing import Any
    4: import numpy as np
    5: 
    6: SEED_NONE = None
    7: SEED_INT = 4579435749574957634658964293569
    8: SEED_ARR: np.ndarray[Any, np.dtype[np.int64]] = np.array([1, 2, 3, 4], dtype=np.int64)
    9: SEED_ARRLIKE: list[int] = [1, 2, 3, 4]
   10: SEED_SEED_SEQ: np.random.SeedSequence = np.random.SeedSequence(0)
   11: SEED_MT19937: np.random.MT19937 = np.random.MT19937(0)
   12: SEED_PCG64: np.random.PCG64 = np.random.PCG64(0)
   13: SEED_PHILOX: np.random.Philox = np.random.Philox(0)
   14: SEED_SFC64: np.random.SFC64 = np.random.SFC64(0)
   15: 
   16: # default rng
   17: np.random.default_rng()
   18: np.random.default_rng(SEED_NONE)
   19: np.random.default_rng(SEED_INT)
   20: np.random.default_rng(SEED_ARR)
   21: np.random.default_rng(SEED_ARRLIKE)
   22: np.random.default_rng(SEED_SEED_SEQ)
   23: np.random.default_rng(SEED_MT19937)
   24: np.random.default_rng(SEED_PCG64)
   25: np.random.default_rng(SEED_PHILOX)
   26: np.random.default_rng(SEED_SFC64)
   27: 
   28: # Seed Sequence
   29: np.random.SeedSequence(SEED_NONE)
   30: np.random.SeedSequence(SEED_INT)
   31: np.random.SeedSequence(SEED_ARR)
   32: np.random.SeedSequence(SEED_ARRLIKE)
   33: 
   34: # Bit Generators
   35: np.random.MT19937(SEED_NONE)
   36: np.random.MT19937(SEED_INT)
   37: np.random.MT19937(SEED_ARR)
   38: np.random.MT19937(SEED_ARRLIKE)
   39: np.random.MT19937(SEED_SEED_SEQ)
   40: 
   41: np.random.PCG64(SEED_NONE)
   42: np.random.PCG64(SEED_INT)
   43: np.random.PCG64(SEED_ARR)
   44: np.random.PCG64(SEED_ARRLIKE)
   45: np.random.PCG64(SEED_SEED_SEQ)
   46: 
   47: np.random.Philox(SEED_NONE)
   48: np.random.Philox(SEED_INT)
   49: np.random.Philox(SEED_ARR)
   50: np.random.Philox(SEED_ARRLIKE)
   51: np.random.Philox(SEED_SEED_SEQ)
   52: 
   53: np.random.SFC64(SEED_NONE)
   54: np.random.SFC64(SEED_INT)
   55: np.random.SFC64(SEED_ARR)
   56: np.random.SFC64(SEED_ARRLIKE)
   57: np.random.SFC64(SEED_SEED_SEQ)
   58: 
   59: seed_seq: np.random.bit_generator.SeedSequence = np.random.SeedSequence(SEED_NONE)
   60: seed_seq.spawn(10)
   61: seed_seq.generate_state(3)
   62: seed_seq.generate_state(3, "u4")
   63: seed_seq.generate_state(3, "uint32")
   64: seed_seq.generate_state(3, "u8")
   65: seed_seq.generate_state(3, "uint64")
   66: seed_seq.generate_state(3, np.uint32)
   67: seed_seq.generate_state(3, np.uint64)
   68: 
   69: 
   70: def_gen: np.random.Generator = np.random.default_rng()
   71: 
   72: D_arr_0p1: np.ndarray[Any, np.dtype[np.float64]] = np.array([0.1])
   73: D_arr_0p5: np.ndarray[Any, np.dtype[np.float64]] = np.array([0.5])
   74: D_arr_0p9: np.ndarray[Any, np.dtype[np.float64]] = np.array([0.9])
   75: D_arr_1p5: np.ndarray[Any, np.dtype[np.float64]] = np.array([1.5])
   76: I_arr_10: np.ndarray[Any, np.dtype[np.int_]] = np.array([10], dtype=np.int_)
   77: I_arr_20: np.ndarray[Any, np.dtype[np.int_]] = np.array([20], dtype=np.int_)
   78: D_arr_like_0p1: list[float] = [0.1]
   79: D_arr_like_0p5: list[float] = [0.5]
   80: D_arr_like_0p9: list[float] = [0.9]
   81: D_arr_like_1p5: list[float] = [1.5]
   82: I_arr_like_10: list[int] = [10]
   83: I_arr_like_20: list[int] = [20]
   84: D_2D_like: list[list[float]] = [[1, 2], [2, 3], [3, 4], [4, 5.1]]
   85: D_2D: np.ndarray[Any, np.dtype[np.float64]] = np.array(D_2D_like)
   86: 
   87: S_out: np.ndarray[Any, np.dtype[np.float32]] = np.empty(1, dtype=np.float32)
   88: D_out: np.ndarray[Any, np.dtype[np.float64]] = np.empty(1)
   89: 
   90: def_gen.standard_normal()
   91: def_gen.standard_normal(dtype=np.float32)
   92: def_gen.standard_normal(dtype="float32")
   93: def_gen.standard_normal(dtype="double")
   94: def_gen.standard_normal(dtype=np.float64)
   95: def_gen.standard_normal(size=None)
   96: def_gen.standard_normal(size=1)
   97: def_gen.standard_normal(size=1, dtype=np.float32)
   98: def_gen.standard_normal(size=1, dtype="f4")
   99: def_gen.standard_normal(size=1, dtype="float32", out=S_out)
  100: def_gen.standard_normal(dtype=np.float32, out=S_out)
  101: def_gen.standard_normal(size=1, dtype=np.float64)
  102: def_gen.standard_normal(size=1, dtype="float64")
  103: def_gen.standard_normal(size=1, dtype="f8")
  104: def_gen.standard_normal(out=D_out)
  105: def_gen.standard_normal(size=1, dtype="float64")
  106: def_gen.standard_normal(size=1, dtype="float64", out=D_out)
  107: 
  108: def_gen.random()
  109: def_gen.random(dtype=np.float32)
  110: def_gen.random(dtype="float32")
  111: def_gen.random(dtype="double")
  112: def_gen.random(dtype=np.float64)
  113: def_gen.random(size=None)
  114: def_gen.random(size=1)
  115: def_gen.random(size=1, dtype=np.float32)
  116: def_gen.random(size=1, dtype="f4")
  117: def_gen.random(size=1, dtype="float32", out=S_out)
  118: def_gen.random(dtype=np.float32, out=S_out)
  119: def_gen.random(size=1, dtype=np.float64)
  120: def_gen.random(size=1, dtype="float64")
  121: def_gen.random(size=1, dtype="f8")
  122: def_gen.random(out=D_out)
  123: def_gen.random(size=1, dtype="float64")
  124: def_gen.random(size=1, dtype="float64", out=D_out)
  125: 
  126: def_gen.standard_cauchy()
  127: def_gen.standard_cauchy(size=None)
  128: def_gen.standard_cauchy(size=1)
  129: 
  130: def_gen.standard_exponential()
  131: def_gen.standard_exponential(method="inv")
  132: def_gen.standard_exponential(dtype=np.float32)
  133: def_gen.standard_exponential(dtype="float32")
  134: def_gen.standard_exponential(dtype="double")
  135: def_gen.standard_exponential(dtype=np.float64)
  136: def_gen.standard_exponential(size=None)
  137: def_gen.standard_exponential(size=None, method="inv")
  138: def_gen.standard_exponential(size=1, method="inv")
  139: def_gen.standard_exponential(size=1, dtype=np.float32)
  140: def_gen.standard_exponential(size=1, dtype="f4", method="inv")
  141: def_gen.standard_exponential(size=1, dtype="float32", out=S_out)
  142: def_gen.standard_exponential(dtype=np.float32, out=S_out)
  143: def_gen.standard_exponential(size=1, dtype=np.float64, method="inv")
  144: def_gen.standard_exponential(size=1, dtype="float64")
  145: def_gen.standard_exponential(size=1, dtype="f8")
  146: def_gen.standard_exponential(out=D_out)
  147: def_gen.standard_exponential(size=1, dtype="float64")
  148: def_gen.standard_exponential(size=1, dtype="float64", out=D_out)
  149: 
  150: def_gen.zipf(1.5)
  151: def_gen.zipf(1.5, size=None)
  152: def_gen.zipf(1.5, size=1)
  153: def_gen.zipf(D_arr_1p5)
  154: def_gen.zipf(D_arr_1p5, size=1)
  155: def_gen.zipf(D_arr_like_1p5)
  156: def_gen.zipf(D_arr_like_1p5, size=1)
  157: 
  158: def_gen.weibull(0.5)
  159: def_gen.weibull(0.5, size=None)
  160: def_gen.weibull(0.5, size=1)
  161: def_gen.weibull(D_arr_0p5)
  162: def_gen.weibull(D_arr_0p5, size=1)
  163: def_gen.weibull(D_arr_like_0p5)
  164: def_gen.weibull(D_arr_like_0p5, size=1)
  165: 
  166: def_gen.standard_t(0.5)
  167: def_gen.standard_t(0.5, size=None)
  168: def_gen.standard_t(0.5, size=1)
  169: def_gen.standard_t(D_arr_0p5)
  170: def_gen.standard_t(D_arr_0p5, size=1)
  171: def_gen.standard_t(D_arr_like_0p5)
  172: def_gen.standard_t(D_arr_like_0p5, size=1)
  173: 
  174: def_gen.poisson(0.5)
  175: def_gen.poisson(0.5, size=None)
  176: def_gen.poisson(0.5, size=1)
  177: def_gen.poisson(D_arr_0p5)
  178: def_gen.poisson(D_arr_0p5, size=1)
  179: def_gen.poisson(D_arr_like_0p5)
  180: def_gen.poisson(D_arr_like_0p5, size=1)
  181: 
  182: def_gen.power(0.5)
  183: def_gen.power(0.5, size=None)
  184: def_gen.power(0.5, size=1)
  185: def_gen.power(D_arr_0p5)
  186: def_gen.power(D_arr_0p5, size=1)
  187: def_gen.power(D_arr_like_0p5)
  188: def_gen.power(D_arr_like_0p5, size=1)
  189: 
  190: def_gen.pareto(0.5)
  191: def_gen.pareto(0.5, size=None)
  192: def_gen.pareto(0.5, size=1)
  193: def_gen.pareto(D_arr_0p5)
  194: def_gen.pareto(D_arr_0p5, size=1)
  195: def_gen.pareto(D_arr_like_0p5)
  196: def_gen.pareto(D_arr_like_0p5, size=1)
  197: 
  198: def_gen.chisquare(0.5)
  199: def_gen.chisquare(0.5, size=None)
  200: def_gen.chisquare(0.5, size=1)
  201: def_gen.chisquare(D_arr_0p5)
  202: def_gen.chisquare(D_arr_0p5, size=1)
  203: def_gen.chisquare(D_arr_like_0p5)
  204: def_gen.chisquare(D_arr_like_0p5, size=1)
  205: 
  206: def_gen.exponential(0.5)
  207: def_gen.exponential(0.5, size=None)
  208: def_gen.exponential(0.5, size=1)
  209: def_gen.exponential(D_arr_0p5)
  210: def_gen.exponential(D_arr_0p5, size=1)
  211: def_gen.exponential(D_arr_like_0p5)
  212: def_gen.exponential(D_arr_like_0p5, size=1)
  213: 
  214: def_gen.geometric(0.5)
  215: def_gen.geometric(0.5, size=None)
  216: def_gen.geometric(0.5, size=1)
  217: def_gen.geometric(D_arr_0p5)
  218: def_gen.geometric(D_arr_0p5, size=1)
  219: def_gen.geometric(D_arr_like_0p5)
  220: def_gen.geometric(D_arr_like_0p5, size=1)
  221: 
  222: def_gen.logseries(0.5)
  223: def_gen.logseries(0.5, size=None)
  224: def_gen.logseries(0.5, size=1)
  225: def_gen.logseries(D_arr_0p5)
  226: def_gen.logseries(D_arr_0p5, size=1)
  227: def_gen.logseries(D_arr_like_0p5)
  228: def_gen.logseries(D_arr_like_0p5, size=1)
  229: 
  230: def_gen.rayleigh(0.5)
  231: def_gen.rayleigh(0.5, size=None)
  232: def_gen.rayleigh(0.5, size=1)
  233: def_gen.rayleigh(D_arr_0p5)
  234: def_gen.rayleigh(D_arr_0p5, size=1)
  235: def_gen.rayleigh(D_arr_like_0p5)
  236: def_gen.rayleigh(D_arr_like_0p5, size=1)
  237: 
  238: def_gen.standard_gamma(0.5)
  239: def_gen.standard_gamma(0.5, size=None)
  240: def_gen.standard_gamma(0.5, dtype="float32")
  241: def_gen.standard_gamma(0.5, size=None, dtype="float32")
  242: def_gen.standard_gamma(0.5, size=1)
  243: def_gen.standard_gamma(D_arr_0p5)
  244: def_gen.standard_gamma(D_arr_0p5, dtype="f4")
  245: def_gen.standard_gamma(0.5, size=1, dtype="float32", out=S_out)
  246: def_gen.standard_gamma(D_arr_0p5, dtype=np.float32, out=S_out)
  247: def_gen.standard_gamma(D_arr_0p5, size=1)
  248: def_gen.standard_gamma(D_arr_like_0p5)
  249: def_gen.standard_gamma(D_arr_like_0p5, size=1)
  250: def_gen.standard_gamma(0.5, out=D_out)
  251: def_gen.standard_gamma(D_arr_like_0p5, out=D_out)
  252: def_gen.standard_gamma(D_arr_like_0p5, size=1)
  253: def_gen.standard_gamma(D_arr_like_0p5, size=1, out=D_out, dtype=np.float64)
  254: 
  255: def_gen.vonmises(0.5, 0.5)
  256: def_gen.vonmises(0.5, 0.5, size=None)
  257: def_gen.vonmises(0.5, 0.5, size=1)
  258: def_gen.vonmises(D_arr_0p5, 0.5)
  259: def_gen.vonmises(0.5, D_arr_0p5)
  260: def_gen.vonmises(D_arr_0p5, 0.5, size=1)
  261: def_gen.vonmises(0.5, D_arr_0p5, size=1)
  262: def_gen.vonmises(D_arr_like_0p5, 0.5)
  263: def_gen.vonmises(0.5, D_arr_like_0p5)
  264: def_gen.vonmises(D_arr_0p5, D_arr_0p5)
  265: def_gen.vonmises(D_arr_like_0p5, D_arr_like_0p5)
  266: def_gen.vonmises(D_arr_0p5, D_arr_0p5, size=1)
  267: def_gen.vonmises(D_arr_like_0p5, D_arr_like_0p5, size=1)
  268: 
  269: def_gen.wald(0.5, 0.5)
  270: def_gen.wald(0.5, 0.5, size=None)
  271: def_gen.wald(0.5, 0.5, size=1)
  272: def_gen.wald(D_arr_0p5, 0.5)
  273: def_gen.wald(0.5, D_arr_0p5)
  274: def_gen.wald(D_arr_0p5, 0.5, size=1)
  275: def_gen.wald(0.5, D_arr_0p5, size=1)
  276: def_gen.wald(D_arr_like_0p5, 0.5)
  277: def_gen.wald(0.5, D_arr_like_0p5)
  278: def_gen.wald(D_arr_0p5, D_arr_0p5)
  279: def_gen.wald(D_arr_like_0p5, D_arr_like_0p5)
  280: def_gen.wald(D_arr_0p5, D_arr_0p5, size=1)
  281: def_gen.wald(D_arr_like_0p5, D_arr_like_0p5, size=1)
  282: 
  283: def_gen.uniform(0.5, 0.5)
  284: def_gen.uniform(0.5, 0.5, size=None)
  285: def_gen.uniform(0.5, 0.5, size=1)
  286: def_gen.uniform(D_arr_0p5, 0.5)
  287: def_gen.uniform(0.5, D_arr_0p5)
  288: def_gen.uniform(D_arr_0p5, 0.5, size=1)
  289: def_gen.uniform(0.5, D_arr_0p5, size=1)
  290: def_gen.uniform(D_arr_like_0p5, 0.5)
  291: def_gen.uniform(0.5, D_arr_like_0p5)
  292: def_gen.uniform(D_arr_0p5, D_arr_0p5)
  293: def_gen.uniform(D_arr_like_0p5, D_arr_like_0p5)
  294: def_gen.uniform(D_arr_0p5, D_arr_0p5, size=1)
  295: def_gen.uniform(D_arr_like_0p5, D_arr_like_0p5, size=1)
  296: 
  297: def_gen.beta(0.5, 0.5)
  298: def_gen.beta(0.5, 0.5, size=None)
  299: def_gen.beta(0.5, 0.5, size=1)
  300: def_gen.beta(D_arr_0p5, 0.5)
  301: def_gen.beta(0.5, D_arr_0p5)
  302: def_gen.beta(D_arr_0p5, 0.5, size=1)
  303: def_gen.beta(0.5, D_arr_0p5, size=1)
  304: def_gen.beta(D_arr_like_0p5, 0.5)
  305: def_gen.beta(0.5, D_arr_like_0p5)
  306: def_gen.beta(D_arr_0p5, D_arr_0p5)
  307: def_gen.beta(D_arr_like_0p5, D_arr_like_0p5)
  308: def_gen.beta(D_arr_0p5, D_arr_0p5, size=1)
  309: def_gen.beta(D_arr_like_0p5, D_arr_like_0p5, size=1)
  310: 
  311: def_gen.f(0.5, 0.5)
  312: def_gen.f(0.5, 0.5, size=None)
  313: def_gen.f(0.5, 0.5, size=1)
  314: def_gen.f(D_arr_0p5, 0.5)
  315: def_gen.f(0.5, D_arr_0p5)
  316: def_gen.f(D_arr_0p5, 0.5, size=1)
  317: def_gen.f(0.5, D_arr_0p5, size=1)
  318: def_gen.f(D_arr_like_0p5, 0.5)
  319: def_gen.f(0.5, D_arr_like_0p5)
  320: def_gen.f(D_arr_0p5, D_arr_0p5)
  321: def_gen.f(D_arr_like_0p5, D_arr_like_0p5)
  322: def_gen.f(D_arr_0p5, D_arr_0p5, size=1)
  323: def_gen.f(D_arr_like_0p5, D_arr_like_0p5, size=1)
  324: 
  325: def_gen.gamma(0.5, 0.5)
  326: def_gen.gamma(0.5, 0.5, size=None)
  327: def_gen.gamma(0.5, 0.5, size=1)
  328: def_gen.gamma(D_arr_0p5, 0.5)
  329: def_gen.gamma(0.5, D_arr_0p5)
  330: def_gen.gamma(D_arr_0p5, 0.5, size=1)
  331: def_gen.gamma(0.5, D_arr_0p5, size=1)
  332: def_gen.gamma(D_arr_like_0p5, 0.5)
  333: def_gen.gamma(0.5, D_arr_like_0p5)
  334: def_gen.gamma(D_arr_0p5, D_arr_0p5)
  335: def_gen.gamma(D_arr_like_0p5, D_arr_like_0p5)
  336: def_gen.gamma(D_arr_0p5, D_arr_0p5, size=1)
  337: def_gen.gamma(D_arr_like_0p5, D_arr_like_0p5, size=1)
  338: 
  339: def_gen.gumbel(0.5, 0.5)
  340: def_gen.gumbel(0.5, 0.5, size=None)
  341: def_gen.gumbel(0.5, 0.5, size=1)
  342: def_gen.gumbel(D_arr_0p5, 0.5)
  343: def_gen.gumbel(0.5, D_arr_0p5)
  344: def_gen.gumbel(D_arr_0p5, 0.5, size=1)
  345: def_gen.gumbel(0.5, D_arr_0p5, size=1)
  346: def_gen.gumbel(D_arr_like_0p5, 0.5)
  347: def_gen.gumbel(0.5, D_arr_like_0p5)
  348: def_gen.gumbel(D_arr_0p5, D_arr_0p5)
  349: def_gen.gumbel(D_arr_like_0p5, D_arr_like_0p5)
  350: def_gen.gumbel(D_arr_0p5, D_arr_0p5, size=1)
  351: def_gen.gumbel(D_arr_like_0p5, D_arr_like_0p5, size=1)
  352: 
  353: def_gen.laplace(0.5, 0.5)
  354: def_gen.laplace(0.5, 0.5, size=None)
  355: def_gen.laplace(0.5, 0.5, size=1)
  356: def_gen.laplace(D_arr_0p5, 0.5)
  357: def_gen.laplace(0.5, D_arr_0p5)
  358: def_gen.laplace(D_arr_0p5, 0.5, size=1)
  359: def_gen.laplace(0.5, D_arr_0p5, size=1)
  360: def_gen.laplace(D_arr_like_0p5, 0.5)
  361: def_gen.laplace(0.5, D_arr_like_0p5)
  362: def_gen.laplace(D_arr_0p5, D_arr_0p5)
  363: def_gen.laplace(D_arr_like_0p5, D_arr_like_0p5)
  364: def_gen.laplace(D_arr_0p5, D_arr_0p5, size=1)
  365: def_gen.laplace(D_arr_like_0p5, D_arr_like_0p5, size=1)
  366: 
  367: def_gen.logistic(0.5, 0.5)
  368: def_gen.logistic(0.5, 0.5, size=None)
  369: def_gen.logistic(0.5, 0.5, size=1)
  370: def_gen.logistic(D_arr_0p5, 0.5)
  371: def_gen.logistic(0.5, D_arr_0p5)
  372: def_gen.logistic(D_arr_0p5, 0.5, size=1)
  373: def_gen.logistic(0.5, D_arr_0p5, size=1)
  374: def_gen.logistic(D_arr_like_0p5, 0.5)
  375: def_gen.logistic(0.5, D_arr_like_0p5)
  376: def_gen.logistic(D_arr_0p5, D_arr_0p5)
  377: def_gen.logistic(D_arr_like_0p5, D_arr_like_0p5)
  378: def_gen.logistic(D_arr_0p5, D_arr_0p5, size=1)
  379: def_gen.logistic(D_arr_like_0p5, D_arr_like_0p5, size=1)
  380: 
  381: def_gen.lognormal(0.5, 0.5)
  382: def_gen.lognormal(0.5, 0.5, size=None)
  383: def_gen.lognormal(0.5, 0.5, size=1)
  384: def_gen.lognormal(D_arr_0p5, 0.5)
  385: def_gen.lognormal(0.5, D_arr_0p5)
  386: def_gen.lognormal(D_arr_0p5, 0.5, size=1)
  387: def_gen.lognormal(0.5, D_arr_0p5, size=1)
  388: def_gen.lognormal(D_arr_like_0p5, 0.5)
  389: def_gen.lognormal(0.5, D_arr_like_0p5)
  390: def_gen.lognormal(D_arr_0p5, D_arr_0p5)
  391: def_gen.lognormal(D_arr_like_0p5, D_arr_like_0p5)
  392: def_gen.lognormal(D_arr_0p5, D_arr_0p5, size=1)
  393: def_gen.lognormal(D_arr_like_0p5, D_arr_like_0p5, size=1)
  394: 
  395: def_gen.noncentral_chisquare(0.5, 0.5)
  396: def_gen.noncentral_chisquare(0.5, 0.5, size=None)
  397: def_gen.noncentral_chisquare(0.5, 0.5, size=1)
  398: def_gen.noncentral_chisquare(D_arr_0p5, 0.5)
  399: def_gen.noncentral_chisquare(0.5, D_arr_0p5)
  400: def_gen.noncentral_chisquare(D_arr_0p5, 0.5, size=1)
  401: def_gen.noncentral_chisquare(0.5, D_arr_0p5, size=1)
  402: def_gen.noncentral_chisquare(D_arr_like_0p5, 0.5)
  403: def_gen.noncentral_chisquare(0.5, D_arr_like_0p5)
  404: def_gen.noncentral_chisquare(D_arr_0p5, D_arr_0p5)
  405: def_gen.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5)
  406: def_gen.noncentral_chisquare(D_arr_0p5, D_arr_0p5, size=1)
  407: def_gen.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5, size=1)
  408: 
  409: def_gen.normal(0.5, 0.5)
  410: def_gen.normal(0.5, 0.5, size=None)
  411: def_gen.normal(0.5, 0.5, size=1)
  412: def_gen.normal(D_arr_0p5, 0.5)
  413: def_gen.normal(0.5, D_arr_0p5)
  414: def_gen.normal(D_arr_0p5, 0.5, size=1)
  415: def_gen.normal(0.5, D_arr_0p5, size=1)
  416: def_gen.normal(D_arr_like_0p5, 0.5)
  417: def_gen.normal(0.5, D_arr_like_0p5)
  418: def_gen.normal(D_arr_0p5, D_arr_0p5)
  419: def_gen.normal(D_arr_like_0p5, D_arr_like_0p5)
  420: def_gen.normal(D_arr_0p5, D_arr_0p5, size=1)
  421: def_gen.normal(D_arr_like_0p5, D_arr_like_0p5, size=1)
  422: 
  423: def_gen.triangular(0.1, 0.5, 0.9)
  424: def_gen.triangular(0.1, 0.5, 0.9, size=None)
  425: def_gen.triangular(0.1, 0.5, 0.9, size=1)
  426: def_gen.triangular(D_arr_0p1, 0.5, 0.9)
  427: def_gen.triangular(0.1, D_arr_0p5, 0.9)
  428: def_gen.triangular(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
  429: def_gen.triangular(0.1, D_arr_0p5, 0.9, size=1)
  430: def_gen.triangular(D_arr_like_0p1, 0.5, D_arr_0p9)
  431: def_gen.triangular(0.5, D_arr_like_0p5, 0.9)
  432: def_gen.triangular(D_arr_0p1, D_arr_0p5, 0.9)
  433: def_gen.triangular(D_arr_like_0p1, D_arr_like_0p5, 0.9)
  434: def_gen.triangular(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
  435: def_gen.triangular(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
  436: 
  437: def_gen.noncentral_f(0.1, 0.5, 0.9)
  438: def_gen.noncentral_f(0.1, 0.5, 0.9, size=None)
  439: def_gen.noncentral_f(0.1, 0.5, 0.9, size=1)
  440: def_gen.noncentral_f(D_arr_0p1, 0.5, 0.9)
  441: def_gen.noncentral_f(0.1, D_arr_0p5, 0.9)
  442: def_gen.noncentral_f(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
  443: def_gen.noncentral_f(0.1, D_arr_0p5, 0.9, size=1)
  444: def_gen.noncentral_f(D_arr_like_0p1, 0.5, D_arr_0p9)
  445: def_gen.noncentral_f(0.5, D_arr_like_0p5, 0.9)
  446: def_gen.noncentral_f(D_arr_0p1, D_arr_0p5, 0.9)
  447: def_gen.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, 0.9)
  448: def_gen.noncentral_f(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
  449: def_gen.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
  450: 
  451: def_gen.binomial(10, 0.5)
  452: def_gen.binomial(10, 0.5, size=None)
  453: def_gen.binomial(10, 0.5, size=1)
  454: def_gen.binomial(I_arr_10, 0.5)
  455: def_gen.binomial(10, D_arr_0p5)
  456: def_gen.binomial(I_arr_10, 0.5, size=1)
  457: def_gen.binomial(10, D_arr_0p5, size=1)
  458: def_gen.binomial(I_arr_like_10, 0.5)
  459: def_gen.binomial(10, D_arr_like_0p5)
  460: def_gen.binomial(I_arr_10, D_arr_0p5)
  461: def_gen.binomial(I_arr_like_10, D_arr_like_0p5)
  462: def_gen.binomial(I_arr_10, D_arr_0p5, size=1)
  463: def_gen.binomial(I_arr_like_10, D_arr_like_0p5, size=1)
  464: 
  465: def_gen.negative_binomial(10, 0.5)
  466: def_gen.negative_binomial(10, 0.5, size=None)
  467: def_gen.negative_binomial(10, 0.5, size=1)
  468: def_gen.negative_binomial(I_arr_10, 0.5)
  469: def_gen.negative_binomial(10, D_arr_0p5)
  470: def_gen.negative_binomial(I_arr_10, 0.5, size=1)
  471: def_gen.negative_binomial(10, D_arr_0p5, size=1)
  472: def_gen.negative_binomial(I_arr_like_10, 0.5)
  473: def_gen.negative_binomial(10, D_arr_like_0p5)
  474: def_gen.negative_binomial(I_arr_10, D_arr_0p5)
  475: def_gen.negative_binomial(I_arr_like_10, D_arr_like_0p5)
  476: def_gen.negative_binomial(I_arr_10, D_arr_0p5, size=1)
  477: def_gen.negative_binomial(I_arr_like_10, D_arr_like_0p5, size=1)
  478: 
  479: def_gen.hypergeometric(20, 20, 10)
  480: def_gen.hypergeometric(20, 20, 10, size=None)
  481: def_gen.hypergeometric(20, 20, 10, size=1)
  482: def_gen.hypergeometric(I_arr_20, 20, 10)
  483: def_gen.hypergeometric(20, I_arr_20, 10)
  484: def_gen.hypergeometric(I_arr_20, 20, I_arr_like_10, size=1)
  485: def_gen.hypergeometric(20, I_arr_20, 10, size=1)
  486: def_gen.hypergeometric(I_arr_like_20, 20, I_arr_10)
  487: def_gen.hypergeometric(20, I_arr_like_20, 10)
  488: def_gen.hypergeometric(I_arr_20, I_arr_20, 10)
  489: def_gen.hypergeometric(I_arr_like_20, I_arr_like_20, 10)
  490: def_gen.hypergeometric(I_arr_20, I_arr_20, I_arr_10, size=1)
  491: def_gen.hypergeometric(I_arr_like_20, I_arr_like_20, I_arr_like_10, size=1)
  492: 
  493: I_int64_100: np.ndarray[Any, np.dtype[np.int64]] = np.array([100], dtype=np.int64)
  494: 
  495: def_gen.integers(0, 100)
  496: def_gen.integers(100)
  497: def_gen.integers([100])
  498: def_gen.integers(0, [100])
  499: 
  500: I_bool_low: np.ndarray[Any, np.dtype[np.bool]] = np.array([0], dtype=np.bool)
  501: I_bool_low_like: list[int] = [0]
  502: I_bool_high_open: np.ndarray[Any, np.dtype[np.bool]] = np.array([1], dtype=np.bool)
  503: I_bool_high_closed: np.ndarray[Any, np.dtype[np.bool]] = np.array([1], dtype=np.bool)
  504: 
  505: def_gen.integers(2, dtype=bool)
  506: def_gen.integers(0, 2, dtype=bool)
  507: def_gen.integers(1, dtype=bool, endpoint=True)
  508: def_gen.integers(0, 1, dtype=bool, endpoint=True)
  509: def_gen.integers(I_bool_low_like, 1, dtype=bool, endpoint=True)
  510: def_gen.integers(I_bool_high_open, dtype=bool)
  511: def_gen.integers(I_bool_low, I_bool_high_open, dtype=bool)
  512: def_gen.integers(0, I_bool_high_open, dtype=bool)
  513: def_gen.integers(I_bool_high_closed, dtype=bool, endpoint=True)
  514: def_gen.integers(I_bool_low, I_bool_high_closed, dtype=bool, endpoint=True)
  515: def_gen.integers(0, I_bool_high_closed, dtype=bool, endpoint=True)
  516: 
  517: def_gen.integers(2, dtype=np.bool)
  518: def_gen.integers(0, 2, dtype=np.bool)
  519: def_gen.integers(1, dtype=np.bool, endpoint=True)
  520: def_gen.integers(0, 1, dtype=np.bool, endpoint=True)
  521: def_gen.integers(I_bool_low_like, 1, dtype=np.bool, endpoint=True)
  522: def_gen.integers(I_bool_high_open, dtype=np.bool)
  523: def_gen.integers(I_bool_low, I_bool_high_open, dtype=np.bool)
  524: def_gen.integers(0, I_bool_high_open, dtype=np.bool)
  525: def_gen.integers(I_bool_high_closed, dtype=np.bool, endpoint=True)
  526: def_gen.integers(I_bool_low, I_bool_high_closed, dtype=np.bool, endpoint=True)
  527: def_gen.integers(0, I_bool_high_closed, dtype=np.bool, endpoint=True)
  528: 
  529: I_u1_low: np.ndarray[Any, np.dtype[np.uint8]] = np.array([0], dtype=np.uint8)
  530: I_u1_low_like: list[int] = [0]
  531: I_u1_high_open: np.ndarray[Any, np.dtype[np.uint8]] = np.array([255], dtype=np.uint8)
  532: I_u1_high_closed: np.ndarray[Any, np.dtype[np.uint8]] = np.array([255], dtype=np.uint8)
  533: 
  534: def_gen.integers(256, dtype="u1")
  535: def_gen.integers(0, 256, dtype="u1")
  536: def_gen.integers(255, dtype="u1", endpoint=True)
  537: def_gen.integers(0, 255, dtype="u1", endpoint=True)
  538: def_gen.integers(I_u1_low_like, 255, dtype="u1", endpoint=True)
  539: def_gen.integers(I_u1_high_open, dtype="u1")
  540: def_gen.integers(I_u1_low, I_u1_high_open, dtype="u1")
  541: def_gen.integers(0, I_u1_high_open, dtype="u1")
  542: def_gen.integers(I_u1_high_closed, dtype="u1", endpoint=True)
  543: def_gen.integers(I_u1_low, I_u1_high_closed, dtype="u1", endpoint=True)
  544: def_gen.integers(0, I_u1_high_closed, dtype="u1", endpoint=True)
  545: 
  546: def_gen.integers(256, dtype="uint8")
  547: def_gen.integers(0, 256, dtype="uint8")
  548: def_gen.integers(255, dtype="uint8", endpoint=True)
  549: def_gen.integers(0, 255, dtype="uint8", endpoint=True)
  550: def_gen.integers(I_u1_low_like, 255, dtype="uint8", endpoint=True)
  551: def_gen.integers(I_u1_high_open, dtype="uint8")
  552: def_gen.integers(I_u1_low, I_u1_high_open, dtype="uint8")
  553: def_gen.integers(0, I_u1_high_open, dtype="uint8")
  554: def_gen.integers(I_u1_high_closed, dtype="uint8", endpoint=True)
  555: def_gen.integers(I_u1_low, I_u1_high_closed, dtype="uint8", endpoint=True)
  556: def_gen.integers(0, I_u1_high_closed, dtype="uint8", endpoint=True)
  557: 
  558: def_gen.integers(256, dtype=np.uint8)
  559: def_gen.integers(0, 256, dtype=np.uint8)
  560: def_gen.integers(255, dtype=np.uint8, endpoint=True)
  561: def_gen.integers(0, 255, dtype=np.uint8, endpoint=True)
  562: def_gen.integers(I_u1_low_like, 255, dtype=np.uint8, endpoint=True)
  563: def_gen.integers(I_u1_high_open, dtype=np.uint8)
  564: def_gen.integers(I_u1_low, I_u1_high_open, dtype=np.uint8)
  565: def_gen.integers(0, I_u1_high_open, dtype=np.uint8)
  566: def_gen.integers(I_u1_high_closed, dtype=np.uint8, endpoint=True)
  567: def_gen.integers(I_u1_low, I_u1_high_closed, dtype=np.uint8, endpoint=True)
  568: def_gen.integers(0, I_u1_high_closed, dtype=np.uint8, endpoint=True)
  569: 
  570: I_u2_low: np.ndarray[Any, np.dtype[np.uint16]] = np.array([0], dtype=np.uint16)
  571: I_u2_low_like: list[int] = [0]
  572: I_u2_high_open: np.ndarray[Any, np.dtype[np.uint16]] = np.array([65535], dtype=np.uint16)
  573: I_u2_high_closed: np.ndarray[Any, np.dtype[np.uint16]] = np.array([65535], dtype=np.uint16)
  574: 
  575: def_gen.integers(65536, dtype="u2")
  576: def_gen.integers(0, 65536, dtype="u2")
  577: def_gen.integers(65535, dtype="u2", endpoint=True)
  578: def_gen.integers(0, 65535, dtype="u2", endpoint=True)
  579: def_gen.integers(I_u2_low_like, 65535, dtype="u2", endpoint=True)
  580: def_gen.integers(I_u2_high_open, dtype="u2")
  581: def_gen.integers(I_u2_low, I_u2_high_open, dtype="u2")
  582: def_gen.integers(0, I_u2_high_open, dtype="u2")
  583: def_gen.integers(I_u2_high_closed, dtype="u2", endpoint=True)
  584: def_gen.integers(I_u2_low, I_u2_high_closed, dtype="u2", endpoint=True)
  585: def_gen.integers(0, I_u2_high_closed, dtype="u2", endpoint=True)
  586: 
  587: def_gen.integers(65536, dtype="uint16")
  588: def_gen.integers(0, 65536, dtype="uint16")
  589: def_gen.integers(65535, dtype="uint16", endpoint=True)
  590: def_gen.integers(0, 65535, dtype="uint16", endpoint=True)
  591: def_gen.integers(I_u2_low_like, 65535, dtype="uint16", endpoint=True)
  592: def_gen.integers(I_u2_high_open, dtype="uint16")
  593: def_gen.integers(I_u2_low, I_u2_high_open, dtype="uint16")
  594: def_gen.integers(0, I_u2_high_open, dtype="uint16")
  595: def_gen.integers(I_u2_high_closed, dtype="uint16", endpoint=True)
  596: def_gen.integers(I_u2_low, I_u2_high_closed, dtype="uint16", endpoint=True)
  597: def_gen.integers(0, I_u2_high_closed, dtype="uint16", endpoint=True)
  598: 
  599: def_gen.integers(65536, dtype=np.uint16)
  600: def_gen.integers(0, 65536, dtype=np.uint16)
  601: def_gen.integers(65535, dtype=np.uint16, endpoint=True)
  602: def_gen.integers(0, 65535, dtype=np.uint16, endpoint=True)
  603: def_gen.integers(I_u2_low_like, 65535, dtype=np.uint16, endpoint=True)
  604: def_gen.integers(I_u2_high_open, dtype=np.uint16)
  605: def_gen.integers(I_u2_low, I_u2_high_open, dtype=np.uint16)
  606: def_gen.integers(0, I_u2_high_open, dtype=np.uint16)
  607: def_gen.integers(I_u2_high_closed, dtype=np.uint16, endpoint=True)
  608: def_gen.integers(I_u2_low, I_u2_high_closed, dtype=np.uint16, endpoint=True)
  609: def_gen.integers(0, I_u2_high_closed, dtype=np.uint16, endpoint=True)
  610: 
  611: I_u4_low: np.ndarray[Any, np.dtype[np.uint32]] = np.array([0], dtype=np.uint32)
  612: I_u4_low_like: list[int] = [0]
  613: I_u4_high_open: np.ndarray[Any, np.dtype[np.uint32]] = np.array([4294967295], dtype=np.uint32)
  614: I_u4_high_closed: np.ndarray[Any, np.dtype[np.uint32]] = np.array([4294967295], dtype=np.uint32)
  615: 
  616: def_gen.integers(4294967296, dtype="u4")
  617: def_gen.integers(0, 4294967296, dtype="u4")
  618: def_gen.integers(4294967295, dtype="u4", endpoint=True)
  619: def_gen.integers(0, 4294967295, dtype="u4", endpoint=True)
  620: def_gen.integers(I_u4_low_like, 4294967295, dtype="u4", endpoint=True)
  621: def_gen.integers(I_u4_high_open, dtype="u4")
  622: def_gen.integers(I_u4_low, I_u4_high_open, dtype="u4")
  623: def_gen.integers(0, I_u4_high_open, dtype="u4")
  624: def_gen.integers(I_u4_high_closed, dtype="u4", endpoint=True)
  625: def_gen.integers(I_u4_low, I_u4_high_closed, dtype="u4", endpoint=True)
  626: def_gen.integers(0, I_u4_high_closed, dtype="u4", endpoint=True)
  627: 
  628: def_gen.integers(4294967296, dtype="uint32")
  629: def_gen.integers(0, 4294967296, dtype="uint32")
  630: def_gen.integers(4294967295, dtype="uint32", endpoint=True)
  631: def_gen.integers(0, 4294967295, dtype="uint32", endpoint=True)
  632: def_gen.integers(I_u4_low_like, 4294967295, dtype="uint32", endpoint=True)
  633: def_gen.integers(I_u4_high_open, dtype="uint32")
  634: def_gen.integers(I_u4_low, I_u4_high_open, dtype="uint32")
  635: def_gen.integers(0, I_u4_high_open, dtype="uint32")
  636: def_gen.integers(I_u4_high_closed, dtype="uint32", endpoint=True)
  637: def_gen.integers(I_u4_low, I_u4_high_closed, dtype="uint32", endpoint=True)
  638: def_gen.integers(0, I_u4_high_closed, dtype="uint32", endpoint=True)
  639: 
  640: def_gen.integers(4294967296, dtype=np.uint32)
  641: def_gen.integers(0, 4294967296, dtype=np.uint32)
  642: def_gen.integers(4294967295, dtype=np.uint32, endpoint=True)
  643: def_gen.integers(0, 4294967295, dtype=np.uint32, endpoint=True)
  644: def_gen.integers(I_u4_low_like, 4294967295, dtype=np.uint32, endpoint=True)
  645: def_gen.integers(I_u4_high_open, dtype=np.uint32)
  646: def_gen.integers(I_u4_low, I_u4_high_open, dtype=np.uint32)
  647: def_gen.integers(0, I_u4_high_open, dtype=np.uint32)
  648: def_gen.integers(I_u4_high_closed, dtype=np.uint32, endpoint=True)
  649: def_gen.integers(I_u4_low, I_u4_high_closed, dtype=np.uint32, endpoint=True)
  650: def_gen.integers(0, I_u4_high_closed, dtype=np.uint32, endpoint=True)
  651: 
  652: I_u8_low: np.ndarray[Any, np.dtype[np.uint64]] = np.array([0], dtype=np.uint64)
  653: I_u8_low_like: list[int] = [0]
  654: I_u8_high_open: np.ndarray[Any, np.dtype[np.uint64]] = np.array([18446744073709551615], dtype=np.uint64)
  655: I_u8_high_closed: np.ndarray[Any, np.dtype[np.uint64]] = np.array([18446744073709551615], dtype=np.uint64)
  656: 
  657: def_gen.integers(18446744073709551616, dtype="u8")
  658: def_gen.integers(0, 18446744073709551616, dtype="u8")
  659: def_gen.integers(18446744073709551615, dtype="u8", endpoint=True)
  660: def_gen.integers(0, 18446744073709551615, dtype="u8", endpoint=True)
  661: def_gen.integers(I_u8_low_like, 18446744073709551615, dtype="u8", endpoint=True)
  662: def_gen.integers(I_u8_high_open, dtype="u8")
  663: def_gen.integers(I_u8_low, I_u8_high_open, dtype="u8")
  664: def_gen.integers(0, I_u8_high_open, dtype="u8")
  665: def_gen.integers(I_u8_high_closed, dtype="u8", endpoint=True)
  666: def_gen.integers(I_u8_low, I_u8_high_closed, dtype="u8", endpoint=True)
  667: def_gen.integers(0, I_u8_high_closed, dtype="u8", endpoint=True)
  668: 
  669: def_gen.integers(18446744073709551616, dtype="uint64")
  670: def_gen.integers(0, 18446744073709551616, dtype="uint64")
  671: def_gen.integers(18446744073709551615, dtype="uint64", endpoint=True)
  672: def_gen.integers(0, 18446744073709551615, dtype="uint64", endpoint=True)
  673: def_gen.integers(I_u8_low_like, 18446744073709551615, dtype="uint64", endpoint=True)
  674: def_gen.integers(I_u8_high_open, dtype="uint64")
  675: def_gen.integers(I_u8_low, I_u8_high_open, dtype="uint64")
  676: def_gen.integers(0, I_u8_high_open, dtype="uint64")
  677: def_gen.integers(I_u8_high_closed, dtype="uint64", endpoint=True)
  678: def_gen.integers(I_u8_low, I_u8_high_closed, dtype="uint64", endpoint=True)
  679: def_gen.integers(0, I_u8_high_closed, dtype="uint64", endpoint=True)
  680: 
  681: def_gen.integers(18446744073709551616, dtype=np.uint64)
  682: def_gen.integers(0, 18446744073709551616, dtype=np.uint64)
  683: def_gen.integers(18446744073709551615, dtype=np.uint64, endpoint=True)
  684: def_gen.integers(0, 18446744073709551615, dtype=np.uint64, endpoint=True)
  685: def_gen.integers(I_u8_low_like, 18446744073709551615, dtype=np.uint64, endpoint=True)
  686: def_gen.integers(I_u8_high_open, dtype=np.uint64)
  687: def_gen.integers(I_u8_low, I_u8_high_open, dtype=np.uint64)
  688: def_gen.integers(0, I_u8_high_open, dtype=np.uint64)
  689: def_gen.integers(I_u8_high_closed, dtype=np.uint64, endpoint=True)
  690: def_gen.integers(I_u8_low, I_u8_high_closed, dtype=np.uint64, endpoint=True)
  691: def_gen.integers(0, I_u8_high_closed, dtype=np.uint64, endpoint=True)
  692: 
  693: I_i1_low: np.ndarray[Any, np.dtype[np.int8]] = np.array([-128], dtype=np.int8)
  694: I_i1_low_like: list[int] = [-128]
  695: I_i1_high_open: np.ndarray[Any, np.dtype[np.int8]] = np.array([127], dtype=np.int8)
  696: I_i1_high_closed: np.ndarray[Any, np.dtype[np.int8]] = np.array([127], dtype=np.int8)
  697: 
  698: def_gen.integers(128, dtype="i1")
  699: def_gen.integers(-128, 128, dtype="i1")
  700: def_gen.integers(127, dtype="i1", endpoint=True)
  701: def_gen.integers(-128, 127, dtype="i1", endpoint=True)
  702: def_gen.integers(I_i1_low_like, 127, dtype="i1", endpoint=True)
  703: def_gen.integers(I_i1_high_open, dtype="i1")
  704: def_gen.integers(I_i1_low, I_i1_high_open, dtype="i1")
  705: def_gen.integers(-128, I_i1_high_open, dtype="i1")
  706: def_gen.integers(I_i1_high_closed, dtype="i1", endpoint=True)
  707: def_gen.integers(I_i1_low, I_i1_high_closed, dtype="i1", endpoint=True)
  708: def_gen.integers(-128, I_i1_high_closed, dtype="i1", endpoint=True)
  709: 
  710: def_gen.integers(128, dtype="int8")
  711: def_gen.integers(-128, 128, dtype="int8")
  712: def_gen.integers(127, dtype="int8", endpoint=True)
  713: def_gen.integers(-128, 127, dtype="int8", endpoint=True)
  714: def_gen.integers(I_i1_low_like, 127, dtype="int8", endpoint=True)
  715: def_gen.integers(I_i1_high_open, dtype="int8")
  716: def_gen.integers(I_i1_low, I_i1_high_open, dtype="int8")
  717: def_gen.integers(-128, I_i1_high_open, dtype="int8")
  718: def_gen.integers(I_i1_high_closed, dtype="int8", endpoint=True)
  719: def_gen.integers(I_i1_low, I_i1_high_closed, dtype="int8", endpoint=True)
  720: def_gen.integers(-128, I_i1_high_closed, dtype="int8", endpoint=True)
  721: 
  722: def_gen.integers(128, dtype=np.int8)
  723: def_gen.integers(-128, 128, dtype=np.int8)
  724: def_gen.integers(127, dtype=np.int8, endpoint=True)
  725: def_gen.integers(-128, 127, dtype=np.int8, endpoint=True)
  726: def_gen.integers(I_i1_low_like, 127, dtype=np.int8, endpoint=True)
  727: def_gen.integers(I_i1_high_open, dtype=np.int8)
  728: def_gen.integers(I_i1_low, I_i1_high_open, dtype=np.int8)
  729: def_gen.integers(-128, I_i1_high_open, dtype=np.int8)
  730: def_gen.integers(I_i1_high_closed, dtype=np.int8, endpoint=True)
  731: def_gen.integers(I_i1_low, I_i1_high_closed, dtype=np.int8, endpoint=True)
  732: def_gen.integers(-128, I_i1_high_closed, dtype=np.int8, endpoint=True)
  733: 
  734: I_i2_low: np.ndarray[Any, np.dtype[np.int16]] = np.array([-32768], dtype=np.int16)
  735: I_i2_low_like: list[int] = [-32768]
  736: I_i2_high_open: np.ndarray[Any, np.dtype[np.int16]] = np.array([32767], dtype=np.int16)
  737: I_i2_high_closed: np.ndarray[Any, np.dtype[np.int16]] = np.array([32767], dtype=np.int16)
  738: 
  739: def_gen.integers(32768, dtype="i2")
  740: def_gen.integers(-32768, 32768, dtype="i2")
  741: def_gen.integers(32767, dtype="i2", endpoint=True)
  742: def_gen.integers(-32768, 32767, dtype="i2", endpoint=True)
  743: def_gen.integers(I_i2_low_like, 32767, dtype="i2", endpoint=True)
  744: def_gen.integers(I_i2_high_open, dtype="i2")
  745: def_gen.integers(I_i2_low, I_i2_high_open, dtype="i2")
  746: def_gen.integers(-32768, I_i2_high_open, dtype="i2")
  747: def_gen.integers(I_i2_high_closed, dtype="i2", endpoint=True)
  748: def_gen.integers(I_i2_low, I_i2_high_closed, dtype="i2", endpoint=True)
  749: def_gen.integers(-32768, I_i2_high_closed, dtype="i2", endpoint=True)
  750: 
  751: def_gen.integers(32768, dtype="int16")
  752: def_gen.integers(-32768, 32768, dtype="int16")
  753: def_gen.integers(32767, dtype="int16", endpoint=True)
  754: def_gen.integers(-32768, 32767, dtype="int16", endpoint=True)
  755: def_gen.integers(I_i2_low_like, 32767, dtype="int16", endpoint=True)
  756: def_gen.integers(I_i2_high_open, dtype="int16")
  757: def_gen.integers(I_i2_low, I_i2_high_open, dtype="int16")
  758: def_gen.integers(-32768, I_i2_high_open, dtype="int16")
  759: def_gen.integers(I_i2_high_closed, dtype="int16", endpoint=True)
  760: def_gen.integers(I_i2_low, I_i2_high_closed, dtype="int16", endpoint=True)
  761: def_gen.integers(-32768, I_i2_high_closed, dtype="int16", endpoint=True)
  762: 
  763: def_gen.integers(32768, dtype=np.int16)
  764: def_gen.integers(-32768, 32768, dtype=np.int16)
  765: def_gen.integers(32767, dtype=np.int16, endpoint=True)
  766: def_gen.integers(-32768, 32767, dtype=np.int16, endpoint=True)
  767: def_gen.integers(I_i2_low_like, 32767, dtype=np.int16, endpoint=True)
  768: def_gen.integers(I_i2_high_open, dtype=np.int16)
  769: def_gen.integers(I_i2_low, I_i2_high_open, dtype=np.int16)
  770: def_gen.integers(-32768, I_i2_high_open, dtype=np.int16)
  771: def_gen.integers(I_i2_high_closed, dtype=np.int16, endpoint=True)
  772: def_gen.integers(I_i2_low, I_i2_high_closed, dtype=np.int16, endpoint=True)
  773: def_gen.integers(-32768, I_i2_high_closed, dtype=np.int16, endpoint=True)
  774: 
  775: I_i4_low: np.ndarray[Any, np.dtype[np.int32]] = np.array([-2147483648], dtype=np.int32)
  776: I_i4_low_like: list[int] = [-2147483648]
  777: I_i4_high_open: np.ndarray[Any, np.dtype[np.int32]] = np.array([2147483647], dtype=np.int32)
  778: I_i4_high_closed: np.ndarray[Any, np.dtype[np.int32]] = np.array([2147483647], dtype=np.int32)
  779: 
  780: def_gen.integers(2147483648, dtype="i4")
  781: def_gen.integers(-2147483648, 2147483648, dtype="i4")
  782: def_gen.integers(2147483647, dtype="i4", endpoint=True)
  783: def_gen.integers(-2147483648, 2147483647, dtype="i4", endpoint=True)
  784: def_gen.integers(I_i4_low_like, 2147483647, dtype="i4", endpoint=True)
  785: def_gen.integers(I_i4_high_open, dtype="i4")
  786: def_gen.integers(I_i4_low, I_i4_high_open, dtype="i4")
  787: def_gen.integers(-2147483648, I_i4_high_open, dtype="i4")
  788: def_gen.integers(I_i4_high_closed, dtype="i4", endpoint=True)
  789: def_gen.integers(I_i4_low, I_i4_high_closed, dtype="i4", endpoint=True)
  790: def_gen.integers(-2147483648, I_i4_high_closed, dtype="i4", endpoint=True)
  791: 
  792: def_gen.integers(2147483648, dtype="int32")
  793: def_gen.integers(-2147483648, 2147483648, dtype="int32")
  794: def_gen.integers(2147483647, dtype="int32", endpoint=True)
  795: def_gen.integers(-2147483648, 2147483647, dtype="int32", endpoint=True)
  796: def_gen.integers(I_i4_low_like, 2147483647, dtype="int32", endpoint=True)
  797: def_gen.integers(I_i4_high_open, dtype="int32")
  798: def_gen.integers(I_i4_low, I_i4_high_open, dtype="int32")
  799: def_gen.integers(-2147483648, I_i4_high_open, dtype="int32")
  800: def_gen.integers(I_i4_high_closed, dtype="int32", endpoint=True)
  801: def_gen.integers(I_i4_low, I_i4_high_closed, dtype="int32", endpoint=True)
  802: def_gen.integers(-2147483648, I_i4_high_closed, dtype="int32", endpoint=True)
  803: 
  804: def_gen.integers(2147483648, dtype=np.int32)
  805: def_gen.integers(-2147483648, 2147483648, dtype=np.int32)
  806: def_gen.integers(2147483647, dtype=np.int32, endpoint=True)
  807: def_gen.integers(-2147483648, 2147483647, dtype=np.int32, endpoint=True)
  808: def_gen.integers(I_i4_low_like, 2147483647, dtype=np.int32, endpoint=True)
  809: def_gen.integers(I_i4_high_open, dtype=np.int32)
  810: def_gen.integers(I_i4_low, I_i4_high_open, dtype=np.int32)
  811: def_gen.integers(-2147483648, I_i4_high_open, dtype=np.int32)
  812: def_gen.integers(I_i4_high_closed, dtype=np.int32, endpoint=True)
  813: def_gen.integers(I_i4_low, I_i4_high_closed, dtype=np.int32, endpoint=True)
  814: def_gen.integers(-2147483648, I_i4_high_closed, dtype=np.int32, endpoint=True)
  815: 
  816: I_i8_low: np.ndarray[Any, np.dtype[np.int64]] = np.array([-9223372036854775808], dtype=np.int64)
  817: I_i8_low_like: list[int] = [-9223372036854775808]
  818: I_i8_high_open: np.ndarray[Any, np.dtype[np.int64]] = np.array([9223372036854775807], dtype=np.int64)
  819: I_i8_high_closed: np.ndarray[Any, np.dtype[np.int64]] = np.array([9223372036854775807], dtype=np.int64)
  820: 
  821: def_gen.integers(9223372036854775808, dtype="i8")
  822: def_gen.integers(-9223372036854775808, 9223372036854775808, dtype="i8")
  823: def_gen.integers(9223372036854775807, dtype="i8", endpoint=True)
  824: def_gen.integers(-9223372036854775808, 9223372036854775807, dtype="i8", endpoint=True)
  825: def_gen.integers(I_i8_low_like, 9223372036854775807, dtype="i8", endpoint=True)
  826: def_gen.integers(I_i8_high_open, dtype="i8")
  827: def_gen.integers(I_i8_low, I_i8_high_open, dtype="i8")
  828: def_gen.integers(-9223372036854775808, I_i8_high_open, dtype="i8")
  829: def_gen.integers(I_i8_high_closed, dtype="i8", endpoint=True)
  830: def_gen.integers(I_i8_low, I_i8_high_closed, dtype="i8", endpoint=True)
  831: def_gen.integers(-9223372036854775808, I_i8_high_closed, dtype="i8", endpoint=True)
  832: 
  833: def_gen.integers(9223372036854775808, dtype="int64")
  834: def_gen.integers(-9223372036854775808, 9223372036854775808, dtype="int64")
  835: def_gen.integers(9223372036854775807, dtype="int64", endpoint=True)
  836: def_gen.integers(-9223372036854775808, 9223372036854775807, dtype="int64", endpoint=True)
  837: def_gen.integers(I_i8_low_like, 9223372036854775807, dtype="int64", endpoint=True)
  838: def_gen.integers(I_i8_high_open, dtype="int64")
  839: def_gen.integers(I_i8_low, I_i8_high_open, dtype="int64")
  840: def_gen.integers(-9223372036854775808, I_i8_high_open, dtype="int64")
  841: def_gen.integers(I_i8_high_closed, dtype="int64", endpoint=True)
  842: def_gen.integers(I_i8_low, I_i8_high_closed, dtype="int64", endpoint=True)
  843: def_gen.integers(-9223372036854775808, I_i8_high_closed, dtype="int64", endpoint=True)
  844: 
  845: def_gen.integers(9223372036854775808, dtype=np.int64)
  846: def_gen.integers(-9223372036854775808, 9223372036854775808, dtype=np.int64)
  847: def_gen.integers(9223372036854775807, dtype=np.int64, endpoint=True)
  848: def_gen.integers(-9223372036854775808, 9223372036854775807, dtype=np.int64, endpoint=True)
  849: def_gen.integers(I_i8_low_like, 9223372036854775807, dtype=np.int64, endpoint=True)
  850: def_gen.integers(I_i8_high_open, dtype=np.int64)
  851: def_gen.integers(I_i8_low, I_i8_high_open, dtype=np.int64)
  852: def_gen.integers(-9223372036854775808, I_i8_high_open, dtype=np.int64)
  853: def_gen.integers(I_i8_high_closed, dtype=np.int64, endpoint=True)
  854: def_gen.integers(I_i8_low, I_i8_high_closed, dtype=np.int64, endpoint=True)
  855: def_gen.integers(-9223372036854775808, I_i8_high_closed, dtype=np.int64, endpoint=True)
  856: 
  857: 
  858: def_gen.bit_generator
  859: 
  860: def_gen.bytes(2)
  861: 
  862: def_gen.choice(5)
  863: def_gen.choice(5, 3)
  864: def_gen.choice(5, 3, replace=True)
  865: def_gen.choice(5, 3, p=[1 / 5] * 5)
  866: def_gen.choice(5, 3, p=[1 / 5] * 5, replace=False)
  867: 
  868: def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"])
  869: def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3)
  870: def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, p=[1 / 4] * 4)
  871: def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=True)
  872: def_gen.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=False, p=np.array([1 / 8, 1 / 8, 1 / 2, 1 / 4]))
  873: 
  874: def_gen.dirichlet([0.5, 0.5])
  875: def_gen.dirichlet(np.array([0.5, 0.5]))
  876: def_gen.dirichlet(np.array([0.5, 0.5]), size=3)
  877: 
  878: def_gen.multinomial(20, [1 / 6.0] * 6)
  879: def_gen.multinomial(20, np.array([0.5, 0.5]))
  880: def_gen.multinomial(20, [1 / 6.0] * 6, size=2)
  881: def_gen.multinomial([[10], [20]], [1 / 6.0] * 6, size=(2, 2))
  882: def_gen.multinomial(np.array([[10], [20]]), np.array([0.5, 0.5]), size=(2, 2))
  883: 
  884: def_gen.multivariate_hypergeometric([3, 5, 7], 2)
  885: def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2)
  886: def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, size=4)
  887: def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, size=(4, 7))
  888: def_gen.multivariate_hypergeometric([3, 5, 7], 2, method="count")
  889: def_gen.multivariate_hypergeometric(np.array([3, 5, 7]), 2, method="marginals")
  890: 
  891: def_gen.multivariate_normal([0.0], [[1.0]])
  892: def_gen.multivariate_normal([0.0], np.array([[1.0]]))
  893: def_gen.multivariate_normal(np.array([0.0]), [[1.0]])
  894: def_gen.multivariate_normal([0.0], np.array([[1.0]]))
  895: 
  896: def_gen.permutation(10)
  897: def_gen.permutation([1, 2, 3, 4])
  898: def_gen.permutation(np.array([1, 2, 3, 4]))
  899: def_gen.permutation(D_2D, axis=1)
  900: def_gen.permuted(D_2D)
  901: def_gen.permuted(D_2D_like)
  902: def_gen.permuted(D_2D, axis=1)
  903: def_gen.permuted(D_2D, out=D_2D)
  904: def_gen.permuted(D_2D_like, out=D_2D)
  905: def_gen.permuted(D_2D_like, out=D_2D)
  906: def_gen.permuted(D_2D, axis=1, out=D_2D)
  907: 
  908: def_gen.shuffle(np.arange(10))
  909: def_gen.shuffle([1, 2, 3, 4, 5])
  910: def_gen.shuffle(D_2D, axis=1)
  911: 
  912: def_gen.__str__()
  913: def_gen.__repr__()
  914: def_gen.__setstate__(dict(def_gen.bit_generator.state))
  915: 
  916: # RandomState
  917: random_st: np.random.RandomState = np.random.RandomState()
  918: 
  919: random_st.standard_normal()
  920: random_st.standard_normal(size=None)
  921: random_st.standard_normal(size=1)
  922: 
  923: random_st.random()
  924: random_st.random(size=None)
  925: random_st.random(size=1)
  926: 
  927: random_st.standard_cauchy()
  928: random_st.standard_cauchy(size=None)
  929: random_st.standard_cauchy(size=1)
  930: 
  931: random_st.standard_exponential()
  932: random_st.standard_exponential(size=None)
  933: random_st.standard_exponential(size=1)
  934: 
  935: random_st.zipf(1.5)
  936: random_st.zipf(1.5, size=None)
  937: random_st.zipf(1.5, size=1)
  938: random_st.zipf(D_arr_1p5)
  939: random_st.zipf(D_arr_1p5, size=1)
  940: random_st.zipf(D_arr_like_1p5)
  941: random_st.zipf(D_arr_like_1p5, size=1)
  942: 
  943: random_st.weibull(0.5)
  944: random_st.weibull(0.5, size=None)
  945: random_st.weibull(0.5, size=1)
  946: random_st.weibull(D_arr_0p5)
  947: random_st.weibull(D_arr_0p5, size=1)
  948: random_st.weibull(D_arr_like_0p5)
  949: random_st.weibull(D_arr_like_0p5, size=1)
  950: 
  951: random_st.standard_t(0.5)
  952: random_st.standard_t(0.5, size=None)
  953: random_st.standard_t(0.5, size=1)
  954: random_st.standard_t(D_arr_0p5)
  955: random_st.standard_t(D_arr_0p5, size=1)
  956: random_st.standard_t(D_arr_like_0p5)
  957: random_st.standard_t(D_arr_like_0p5, size=1)
  958: 
  959: random_st.poisson(0.5)
  960: random_st.poisson(0.5, size=None)
  961: random_st.poisson(0.5, size=1)
  962: random_st.poisson(D_arr_0p5)
  963: random_st.poisson(D_arr_0p5, size=1)
  964: random_st.poisson(D_arr_like_0p5)
  965: random_st.poisson(D_arr_like_0p5, size=1)
  966: 
  967: random_st.power(0.5)
  968: random_st.power(0.5, size=None)
  969: random_st.power(0.5, size=1)
  970: random_st.power(D_arr_0p5)
  971: random_st.power(D_arr_0p5, size=1)
  972: random_st.power(D_arr_like_0p5)
  973: random_st.power(D_arr_like_0p5, size=1)
  974: 
  975: random_st.pareto(0.5)
  976: random_st.pareto(0.5, size=None)
  977: random_st.pareto(0.5, size=1)
  978: random_st.pareto(D_arr_0p5)
  979: random_st.pareto(D_arr_0p5, size=1)
  980: random_st.pareto(D_arr_like_0p5)
  981: random_st.pareto(D_arr_like_0p5, size=1)
  982: 
  983: random_st.chisquare(0.5)
  984: random_st.chisquare(0.5, size=None)
  985: random_st.chisquare(0.5, size=1)
  986: random_st.chisquare(D_arr_0p5)
  987: random_st.chisquare(D_arr_0p5, size=1)
  988: random_st.chisquare(D_arr_like_0p5)
  989: random_st.chisquare(D_arr_like_0p5, size=1)
  990: 
  991: random_st.exponential(0.5)
  992: random_st.exponential(0.5, size=None)
  993: random_st.exponential(0.5, size=1)
  994: random_st.exponential(D_arr_0p5)
  995: random_st.exponential(D_arr_0p5, size=1)
  996: random_st.exponential(D_arr_like_0p5)
  997: random_st.exponential(D_arr_like_0p5, size=1)
  998: 
  999: random_st.geometric(0.5)
 1000: random_st.geometric(0.5, size=None)
 1001: random_st.geometric(0.5, size=1)
 1002: random_st.geometric(D_arr_0p5)
 1003: random_st.geometric(D_arr_0p5, size=1)
 1004: random_st.geometric(D_arr_like_0p5)
 1005: random_st.geometric(D_arr_like_0p5, size=1)
 1006: 
 1007: random_st.logseries(0.5)
 1008: random_st.logseries(0.5, size=None)
 1009: random_st.logseries(0.5, size=1)
 1010: random_st.logseries(D_arr_0p5)
 1011: random_st.logseries(D_arr_0p5, size=1)
 1012: random_st.logseries(D_arr_like_0p5)
 1013: random_st.logseries(D_arr_like_0p5, size=1)
 1014: 
 1015: random_st.rayleigh(0.5)
 1016: random_st.rayleigh(0.5, size=None)
 1017: random_st.rayleigh(0.5, size=1)
 1018: random_st.rayleigh(D_arr_0p5)
 1019: random_st.rayleigh(D_arr_0p5, size=1)
 1020: random_st.rayleigh(D_arr_like_0p5)
 1021: random_st.rayleigh(D_arr_like_0p5, size=1)
 1022: 
 1023: random_st.standard_gamma(0.5)
 1024: random_st.standard_gamma(0.5, size=None)
 1025: random_st.standard_gamma(0.5, size=1)
 1026: random_st.standard_gamma(D_arr_0p5)
 1027: random_st.standard_gamma(D_arr_0p5, size=1)
 1028: random_st.standard_gamma(D_arr_like_0p5)
 1029: random_st.standard_gamma(D_arr_like_0p5, size=1)
 1030: random_st.standard_gamma(D_arr_like_0p5, size=1)
 1031: 
 1032: random_st.vonmises(0.5, 0.5)
 1033: random_st.vonmises(0.5, 0.5, size=None)
 1034: random_st.vonmises(0.5, 0.5, size=1)
 1035: random_st.vonmises(D_arr_0p5, 0.5)
 1036: random_st.vonmises(0.5, D_arr_0p5)
 1037: random_st.vonmises(D_arr_0p5, 0.5, size=1)
 1038: random_st.vonmises(0.5, D_arr_0p5, size=1)
 1039: random_st.vonmises(D_arr_like_0p5, 0.5)
 1040: random_st.vonmises(0.5, D_arr_like_0p5)
 1041: random_st.vonmises(D_arr_0p5, D_arr_0p5)
 1042: random_st.vonmises(D_arr_like_0p5, D_arr_like_0p5)
 1043: random_st.vonmises(D_arr_0p5, D_arr_0p5, size=1)
 1044: random_st.vonmises(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1045: 
 1046: random_st.wald(0.5, 0.5)
 1047: random_st.wald(0.5, 0.5, size=None)
 1048: random_st.wald(0.5, 0.5, size=1)
 1049: random_st.wald(D_arr_0p5, 0.5)
 1050: random_st.wald(0.5, D_arr_0p5)
 1051: random_st.wald(D_arr_0p5, 0.5, size=1)
 1052: random_st.wald(0.5, D_arr_0p5, size=1)
 1053: random_st.wald(D_arr_like_0p5, 0.5)
 1054: random_st.wald(0.5, D_arr_like_0p5)
 1055: random_st.wald(D_arr_0p5, D_arr_0p5)
 1056: random_st.wald(D_arr_like_0p5, D_arr_like_0p5)
 1057: random_st.wald(D_arr_0p5, D_arr_0p5, size=1)
 1058: random_st.wald(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1059: 
 1060: random_st.uniform(0.5, 0.5)
 1061: random_st.uniform(0.5, 0.5, size=None)
 1062: random_st.uniform(0.5, 0.5, size=1)
 1063: random_st.uniform(D_arr_0p5, 0.5)
 1064: random_st.uniform(0.5, D_arr_0p5)
 1065: random_st.uniform(D_arr_0p5, 0.5, size=1)
 1066: random_st.uniform(0.5, D_arr_0p5, size=1)
 1067: random_st.uniform(D_arr_like_0p5, 0.5)
 1068: random_st.uniform(0.5, D_arr_like_0p5)
 1069: random_st.uniform(D_arr_0p5, D_arr_0p5)
 1070: random_st.uniform(D_arr_like_0p5, D_arr_like_0p5)
 1071: random_st.uniform(D_arr_0p5, D_arr_0p5, size=1)
 1072: random_st.uniform(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1073: 
 1074: random_st.beta(0.5, 0.5)
 1075: random_st.beta(0.5, 0.5, size=None)
 1076: random_st.beta(0.5, 0.5, size=1)
 1077: random_st.beta(D_arr_0p5, 0.5)
 1078: random_st.beta(0.5, D_arr_0p5)
 1079: random_st.beta(D_arr_0p5, 0.5, size=1)
 1080: random_st.beta(0.5, D_arr_0p5, size=1)
 1081: random_st.beta(D_arr_like_0p5, 0.5)
 1082: random_st.beta(0.5, D_arr_like_0p5)
 1083: random_st.beta(D_arr_0p5, D_arr_0p5)
 1084: random_st.beta(D_arr_like_0p5, D_arr_like_0p5)
 1085: random_st.beta(D_arr_0p5, D_arr_0p5, size=1)
 1086: random_st.beta(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1087: 
 1088: random_st.f(0.5, 0.5)
 1089: random_st.f(0.5, 0.5, size=None)
 1090: random_st.f(0.5, 0.5, size=1)
 1091: random_st.f(D_arr_0p5, 0.5)
 1092: random_st.f(0.5, D_arr_0p5)
 1093: random_st.f(D_arr_0p5, 0.5, size=1)
 1094: random_st.f(0.5, D_arr_0p5, size=1)
 1095: random_st.f(D_arr_like_0p5, 0.5)
 1096: random_st.f(0.5, D_arr_like_0p5)
 1097: random_st.f(D_arr_0p5, D_arr_0p5)
 1098: random_st.f(D_arr_like_0p5, D_arr_like_0p5)
 1099: random_st.f(D_arr_0p5, D_arr_0p5, size=1)
 1100: random_st.f(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1101: 
 1102: random_st.gamma(0.5, 0.5)
 1103: random_st.gamma(0.5, 0.5, size=None)
 1104: random_st.gamma(0.5, 0.5, size=1)
 1105: random_st.gamma(D_arr_0p5, 0.5)
 1106: random_st.gamma(0.5, D_arr_0p5)
 1107: random_st.gamma(D_arr_0p5, 0.5, size=1)
 1108: random_st.gamma(0.5, D_arr_0p5, size=1)
 1109: random_st.gamma(D_arr_like_0p5, 0.5)
 1110: random_st.gamma(0.5, D_arr_like_0p5)
 1111: random_st.gamma(D_arr_0p5, D_arr_0p5)
 1112: random_st.gamma(D_arr_like_0p5, D_arr_like_0p5)
 1113: random_st.gamma(D_arr_0p5, D_arr_0p5, size=1)
 1114: random_st.gamma(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1115: 
 1116: random_st.gumbel(0.5, 0.5)
 1117: random_st.gumbel(0.5, 0.5, size=None)
 1118: random_st.gumbel(0.5, 0.5, size=1)
 1119: random_st.gumbel(D_arr_0p5, 0.5)
 1120: random_st.gumbel(0.5, D_arr_0p5)
 1121: random_st.gumbel(D_arr_0p5, 0.5, size=1)
 1122: random_st.gumbel(0.5, D_arr_0p5, size=1)
 1123: random_st.gumbel(D_arr_like_0p5, 0.5)
 1124: random_st.gumbel(0.5, D_arr_like_0p5)
 1125: random_st.gumbel(D_arr_0p5, D_arr_0p5)
 1126: random_st.gumbel(D_arr_like_0p5, D_arr_like_0p5)
 1127: random_st.gumbel(D_arr_0p5, D_arr_0p5, size=1)
 1128: random_st.gumbel(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1129: 
 1130: random_st.laplace(0.5, 0.5)
 1131: random_st.laplace(0.5, 0.5, size=None)
 1132: random_st.laplace(0.5, 0.5, size=1)
 1133: random_st.laplace(D_arr_0p5, 0.5)
 1134: random_st.laplace(0.5, D_arr_0p5)
 1135: random_st.laplace(D_arr_0p5, 0.5, size=1)
 1136: random_st.laplace(0.5, D_arr_0p5, size=1)
 1137: random_st.laplace(D_arr_like_0p5, 0.5)
 1138: random_st.laplace(0.5, D_arr_like_0p5)
 1139: random_st.laplace(D_arr_0p5, D_arr_0p5)
 1140: random_st.laplace(D_arr_like_0p5, D_arr_like_0p5)
 1141: random_st.laplace(D_arr_0p5, D_arr_0p5, size=1)
 1142: random_st.laplace(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1143: 
 1144: random_st.logistic(0.5, 0.5)
 1145: random_st.logistic(0.5, 0.5, size=None)
 1146: random_st.logistic(0.5, 0.5, size=1)
 1147: random_st.logistic(D_arr_0p5, 0.5)
 1148: random_st.logistic(0.5, D_arr_0p5)
 1149: random_st.logistic(D_arr_0p5, 0.5, size=1)
 1150: random_st.logistic(0.5, D_arr_0p5, size=1)
 1151: random_st.logistic(D_arr_like_0p5, 0.5)
 1152: random_st.logistic(0.5, D_arr_like_0p5)
 1153: random_st.logistic(D_arr_0p5, D_arr_0p5)
 1154: random_st.logistic(D_arr_like_0p5, D_arr_like_0p5)
 1155: random_st.logistic(D_arr_0p5, D_arr_0p5, size=1)
 1156: random_st.logistic(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1157: 
 1158: random_st.lognormal(0.5, 0.5)
 1159: random_st.lognormal(0.5, 0.5, size=None)
 1160: random_st.lognormal(0.5, 0.5, size=1)
 1161: random_st.lognormal(D_arr_0p5, 0.5)
 1162: random_st.lognormal(0.5, D_arr_0p5)
 1163: random_st.lognormal(D_arr_0p5, 0.5, size=1)
 1164: random_st.lognormal(0.5, D_arr_0p5, size=1)
 1165: random_st.lognormal(D_arr_like_0p5, 0.5)
 1166: random_st.lognormal(0.5, D_arr_like_0p5)
 1167: random_st.lognormal(D_arr_0p5, D_arr_0p5)
 1168: random_st.lognormal(D_arr_like_0p5, D_arr_like_0p5)
 1169: random_st.lognormal(D_arr_0p5, D_arr_0p5, size=1)
 1170: random_st.lognormal(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1171: 
 1172: random_st.noncentral_chisquare(0.5, 0.5)
 1173: random_st.noncentral_chisquare(0.5, 0.5, size=None)
 1174: random_st.noncentral_chisquare(0.5, 0.5, size=1)
 1175: random_st.noncentral_chisquare(D_arr_0p5, 0.5)
 1176: random_st.noncentral_chisquare(0.5, D_arr_0p5)
 1177: random_st.noncentral_chisquare(D_arr_0p5, 0.5, size=1)
 1178: random_st.noncentral_chisquare(0.5, D_arr_0p5, size=1)
 1179: random_st.noncentral_chisquare(D_arr_like_0p5, 0.5)
 1180: random_st.noncentral_chisquare(0.5, D_arr_like_0p5)
 1181: random_st.noncentral_chisquare(D_arr_0p5, D_arr_0p5)
 1182: random_st.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5)
 1183: random_st.noncentral_chisquare(D_arr_0p5, D_arr_0p5, size=1)
 1184: random_st.noncentral_chisquare(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1185: 
 1186: random_st.normal(0.5, 0.5)
 1187: random_st.normal(0.5, 0.5, size=None)
 1188: random_st.normal(0.5, 0.5, size=1)
 1189: random_st.normal(D_arr_0p5, 0.5)
 1190: random_st.normal(0.5, D_arr_0p5)
 1191: random_st.normal(D_arr_0p5, 0.5, size=1)
 1192: random_st.normal(0.5, D_arr_0p5, size=1)
 1193: random_st.normal(D_arr_like_0p5, 0.5)
 1194: random_st.normal(0.5, D_arr_like_0p5)
 1195: random_st.normal(D_arr_0p5, D_arr_0p5)
 1196: random_st.normal(D_arr_like_0p5, D_arr_like_0p5)
 1197: random_st.normal(D_arr_0p5, D_arr_0p5, size=1)
 1198: random_st.normal(D_arr_like_0p5, D_arr_like_0p5, size=1)
 1199: 
 1200: random_st.triangular(0.1, 0.5, 0.9)
 1201: random_st.triangular(0.1, 0.5, 0.9, size=None)
 1202: random_st.triangular(0.1, 0.5, 0.9, size=1)
 1203: random_st.triangular(D_arr_0p1, 0.5, 0.9)
 1204: random_st.triangular(0.1, D_arr_0p5, 0.9)
 1205: random_st.triangular(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
 1206: random_st.triangular(0.1, D_arr_0p5, 0.9, size=1)
 1207: random_st.triangular(D_arr_like_0p1, 0.5, D_arr_0p9)
 1208: random_st.triangular(0.5, D_arr_like_0p5, 0.9)
 1209: random_st.triangular(D_arr_0p1, D_arr_0p5, 0.9)
 1210: random_st.triangular(D_arr_like_0p1, D_arr_like_0p5, 0.9)
 1211: random_st.triangular(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
 1212: random_st.triangular(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
 1213: 
 1214: random_st.noncentral_f(0.1, 0.5, 0.9)
 1215: random_st.noncentral_f(0.1, 0.5, 0.9, size=None)
 1216: random_st.noncentral_f(0.1, 0.5, 0.9, size=1)
 1217: random_st.noncentral_f(D_arr_0p1, 0.5, 0.9)
 1218: random_st.noncentral_f(0.1, D_arr_0p5, 0.9)
 1219: random_st.noncentral_f(D_arr_0p1, 0.5, D_arr_like_0p9, size=1)
 1220: random_st.noncentral_f(0.1, D_arr_0p5, 0.9, size=1)
 1221: random_st.noncentral_f(D_arr_like_0p1, 0.5, D_arr_0p9)
 1222: random_st.noncentral_f(0.5, D_arr_like_0p5, 0.9)
 1223: random_st.noncentral_f(D_arr_0p1, D_arr_0p5, 0.9)
 1224: random_st.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, 0.9)
 1225: random_st.noncentral_f(D_arr_0p1, D_arr_0p5, D_arr_0p9, size=1)
 1226: random_st.noncentral_f(D_arr_like_0p1, D_arr_like_0p5, D_arr_like_0p9, size=1)
 1227: 
 1228: random_st.binomial(10, 0.5)
 1229: random_st.binomial(10, 0.5, size=None)
 1230: random_st.binomial(10, 0.5, size=1)
 1231: random_st.binomial(I_arr_10, 0.5)
 1232: random_st.binomial(10, D_arr_0p5)
 1233: random_st.binomial(I_arr_10, 0.5, size=1)
 1234: random_st.binomial(10, D_arr_0p5, size=1)
 1235: random_st.binomial(I_arr_like_10, 0.5)
 1236: random_st.binomial(10, D_arr_like_0p5)
 1237: random_st.binomial(I_arr_10, D_arr_0p5)
 1238: random_st.binomial(I_arr_like_10, D_arr_like_0p5)
 1239: random_st.binomial(I_arr_10, D_arr_0p5, size=1)
 1240: random_st.binomial(I_arr_like_10, D_arr_like_0p5, size=1)
 1241: 
 1242: random_st.negative_binomial(10, 0.5)
 1243: random_st.negative_binomial(10, 0.5, size=None)
 1244: random_st.negative_binomial(10, 0.5, size=1)
 1245: random_st.negative_binomial(I_arr_10, 0.5)
 1246: random_st.negative_binomial(10, D_arr_0p5)
 1247: random_st.negative_binomial(I_arr_10, 0.5, size=1)
 1248: random_st.negative_binomial(10, D_arr_0p5, size=1)
 1249: random_st.negative_binomial(I_arr_like_10, 0.5)
 1250: random_st.negative_binomial(10, D_arr_like_0p5)
 1251: random_st.negative_binomial(I_arr_10, D_arr_0p5)
 1252: random_st.negative_binomial(I_arr_like_10, D_arr_like_0p5)
 1253: random_st.negative_binomial(I_arr_10, D_arr_0p5, size=1)
 1254: random_st.negative_binomial(I_arr_like_10, D_arr_like_0p5, size=1)
 1255: 
 1256: random_st.hypergeometric(20, 20, 10)
 1257: random_st.hypergeometric(20, 20, 10, size=None)
 1258: random_st.hypergeometric(20, 20, 10, size=1)
 1259: random_st.hypergeometric(I_arr_20, 20, 10)
 1260: random_st.hypergeometric(20, I_arr_20, 10)
 1261: random_st.hypergeometric(I_arr_20, 20, I_arr_like_10, size=1)
 1262: random_st.hypergeometric(20, I_arr_20, 10, size=1)
 1263: random_st.hypergeometric(I_arr_like_20, 20, I_arr_10)
 1264: random_st.hypergeometric(20, I_arr_like_20, 10)
 1265: random_st.hypergeometric(I_arr_20, I_arr_20, 10)
 1266: random_st.hypergeometric(I_arr_like_20, I_arr_like_20, 10)
 1267: random_st.hypergeometric(I_arr_20, I_arr_20, I_arr_10, size=1)
 1268: random_st.hypergeometric(I_arr_like_20, I_arr_like_20, I_arr_like_10, size=1)
 1269: 
 1270: random_st.randint(0, 100)
 1271: random_st.randint(100)
 1272: random_st.randint([100])
 1273: random_st.randint(0, [100])
 1274: 
 1275: random_st.randint(2, dtype=bool)
 1276: random_st.randint(0, 2, dtype=bool)
 1277: random_st.randint(I_bool_high_open, dtype=bool)
 1278: random_st.randint(I_bool_low, I_bool_high_open, dtype=bool)
 1279: random_st.randint(0, I_bool_high_open, dtype=bool)
 1280: 
 1281: random_st.randint(2, dtype=np.bool)
 1282: random_st.randint(0, 2, dtype=np.bool)
 1283: random_st.randint(I_bool_high_open, dtype=np.bool)
 1284: random_st.randint(I_bool_low, I_bool_high_open, dtype=np.bool)
 1285: random_st.randint(0, I_bool_high_open, dtype=np.bool)
 1286: 
 1287: random_st.randint(256, dtype="u1")
 1288: random_st.randint(0, 256, dtype="u1")
 1289: random_st.randint(I_u1_high_open, dtype="u1")
 1290: random_st.randint(I_u1_low, I_u1_high_open, dtype="u1")
 1291: random_st.randint(0, I_u1_high_open, dtype="u1")
 1292: 
 1293: random_st.randint(256, dtype="uint8")
 1294: random_st.randint(0, 256, dtype="uint8")
 1295: random_st.randint(I_u1_high_open, dtype="uint8")
 1296: random_st.randint(I_u1_low, I_u1_high_open, dtype="uint8")
 1297: random_st.randint(0, I_u1_high_open, dtype="uint8")
 1298: 
 1299: random_st.randint(256, dtype=np.uint8)
 1300: random_st.randint(0, 256, dtype=np.uint8)
 1301: random_st.randint(I_u1_high_open, dtype=np.uint8)
 1302: random_st.randint(I_u1_low, I_u1_high_open, dtype=np.uint8)
 1303: random_st.randint(0, I_u1_high_open, dtype=np.uint8)
 1304: 
 1305: random_st.randint(65536, dtype="u2")
 1306: random_st.randint(0, 65536, dtype="u2")
 1307: random_st.randint(I_u2_high_open, dtype="u2")
 1308: random_st.randint(I_u2_low, I_u2_high_open, dtype="u2")
 1309: random_st.randint(0, I_u2_high_open, dtype="u2")
 1310: 
 1311: random_st.randint(65536, dtype="uint16")
 1312: random_st.randint(0, 65536, dtype="uint16")
 1313: random_st.randint(I_u2_high_open, dtype="uint16")
 1314: random_st.randint(I_u2_low, I_u2_high_open, dtype="uint16")
 1315: random_st.randint(0, I_u2_high_open, dtype="uint16")
 1316: 
 1317: random_st.randint(65536, dtype=np.uint16)
 1318: random_st.randint(0, 65536, dtype=np.uint16)
 1319: random_st.randint(I_u2_high_open, dtype=np.uint16)
 1320: random_st.randint(I_u2_low, I_u2_high_open, dtype=np.uint16)
 1321: random_st.randint(0, I_u2_high_open, dtype=np.uint16)
 1322: 
 1323: random_st.randint(4294967296, dtype="u4")
 1324: random_st.randint(0, 4294967296, dtype="u4")
 1325: random_st.randint(I_u4_high_open, dtype="u4")
 1326: random_st.randint(I_u4_low, I_u4_high_open, dtype="u4")
 1327: random_st.randint(0, I_u4_high_open, dtype="u4")
 1328: 
 1329: random_st.randint(4294967296, dtype="uint32")
 1330: random_st.randint(0, 4294967296, dtype="uint32")
 1331: random_st.randint(I_u4_high_open, dtype="uint32")
 1332: random_st.randint(I_u4_low, I_u4_high_open, dtype="uint32")
 1333: random_st.randint(0, I_u4_high_open, dtype="uint32")
 1334: 
 1335: random_st.randint(4294967296, dtype=np.uint32)
 1336: random_st.randint(0, 4294967296, dtype=np.uint32)
 1337: random_st.randint(I_u4_high_open, dtype=np.uint32)
 1338: random_st.randint(I_u4_low, I_u4_high_open, dtype=np.uint32)
 1339: random_st.randint(0, I_u4_high_open, dtype=np.uint32)
 1340: 
 1341: 
 1342: random_st.randint(18446744073709551616, dtype="u8")
 1343: random_st.randint(0, 18446744073709551616, dtype="u8")
 1344: random_st.randint(I_u8_high_open, dtype="u8")
 1345: random_st.randint(I_u8_low, I_u8_high_open, dtype="u8")
 1346: random_st.randint(0, I_u8_high_open, dtype="u8")
 1347: 
 1348: random_st.randint(18446744073709551616, dtype="uint64")
 1349: random_st.randint(0, 18446744073709551616, dtype="uint64")
 1350: random_st.randint(I_u8_high_open, dtype="uint64")
 1351: random_st.randint(I_u8_low, I_u8_high_open, dtype="uint64")
 1352: random_st.randint(0, I_u8_high_open, dtype="uint64")
 1353: 
 1354: random_st.randint(18446744073709551616, dtype=np.uint64)
 1355: random_st.randint(0, 18446744073709551616, dtype=np.uint64)
 1356: random_st.randint(I_u8_high_open, dtype=np.uint64)
 1357: random_st.randint(I_u8_low, I_u8_high_open, dtype=np.uint64)
 1358: random_st.randint(0, I_u8_high_open, dtype=np.uint64)
 1359: 
 1360: random_st.randint(128, dtype="i1")
 1361: random_st.randint(-128, 128, dtype="i1")
 1362: random_st.randint(I_i1_high_open, dtype="i1")
 1363: random_st.randint(I_i1_low, I_i1_high_open, dtype="i1")
 1364: random_st.randint(-128, I_i1_high_open, dtype="i1")
 1365: 
 1366: random_st.randint(128, dtype="int8")
 1367: random_st.randint(-128, 128, dtype="int8")
 1368: random_st.randint(I_i1_high_open, dtype="int8")
 1369: random_st.randint(I_i1_low, I_i1_high_open, dtype="int8")
 1370: random_st.randint(-128, I_i1_high_open, dtype="int8")
 1371: 
 1372: random_st.randint(128, dtype=np.int8)
 1373: random_st.randint(-128, 128, dtype=np.int8)
 1374: random_st.randint(I_i1_high_open, dtype=np.int8)
 1375: random_st.randint(I_i1_low, I_i1_high_open, dtype=np.int8)
 1376: random_st.randint(-128, I_i1_high_open, dtype=np.int8)
 1377: 
 1378: random_st.randint(32768, dtype="i2")
 1379: random_st.randint(-32768, 32768, dtype="i2")
 1380: random_st.randint(I_i2_high_open, dtype="i2")
 1381: random_st.randint(I_i2_low, I_i2_high_open, dtype="i2")
 1382: random_st.randint(-32768, I_i2_high_open, dtype="i2")
 1383: random_st.randint(32768, dtype="int16")
 1384: random_st.randint(-32768, 32768, dtype="int16")
 1385: random_st.randint(I_i2_high_open, dtype="int16")
 1386: random_st.randint(I_i2_low, I_i2_high_open, dtype="int16")
 1387: random_st.randint(-32768, I_i2_high_open, dtype="int16")
 1388: random_st.randint(32768, dtype=np.int16)
 1389: random_st.randint(-32768, 32768, dtype=np.int16)
 1390: random_st.randint(I_i2_high_open, dtype=np.int16)
 1391: random_st.randint(I_i2_low, I_i2_high_open, dtype=np.int16)
 1392: random_st.randint(-32768, I_i2_high_open, dtype=np.int16)
 1393: 
 1394: random_st.randint(2147483648, dtype="i4")
 1395: random_st.randint(-2147483648, 2147483648, dtype="i4")
 1396: random_st.randint(I_i4_high_open, dtype="i4")
 1397: random_st.randint(I_i4_low, I_i4_high_open, dtype="i4")
 1398: random_st.randint(-2147483648, I_i4_high_open, dtype="i4")
 1399: 
 1400: random_st.randint(2147483648, dtype="int32")
 1401: random_st.randint(-2147483648, 2147483648, dtype="int32")
 1402: random_st.randint(I_i4_high_open, dtype="int32")
 1403: random_st.randint(I_i4_low, I_i4_high_open, dtype="int32")
 1404: random_st.randint(-2147483648, I_i4_high_open, dtype="int32")
 1405: 
 1406: random_st.randint(2147483648, dtype=np.int32)
 1407: random_st.randint(-2147483648, 2147483648, dtype=np.int32)
 1408: random_st.randint(I_i4_high_open, dtype=np.int32)
 1409: random_st.randint(I_i4_low, I_i4_high_open, dtype=np.int32)
 1410: random_st.randint(-2147483648, I_i4_high_open, dtype=np.int32)
 1411: 
 1412: random_st.randint(9223372036854775808, dtype="i8")
 1413: random_st.randint(-9223372036854775808, 9223372036854775808, dtype="i8")
 1414: random_st.randint(I_i8_high_open, dtype="i8")
 1415: random_st.randint(I_i8_low, I_i8_high_open, dtype="i8")
 1416: random_st.randint(-9223372036854775808, I_i8_high_open, dtype="i8")
 1417: 
 1418: random_st.randint(9223372036854775808, dtype="int64")
 1419: random_st.randint(-9223372036854775808, 9223372036854775808, dtype="int64")
 1420: random_st.randint(I_i8_high_open, dtype="int64")
 1421: random_st.randint(I_i8_low, I_i8_high_open, dtype="int64")
 1422: random_st.randint(-9223372036854775808, I_i8_high_open, dtype="int64")
 1423: 
 1424: random_st.randint(9223372036854775808, dtype=np.int64)
 1425: random_st.randint(-9223372036854775808, 9223372036854775808, dtype=np.int64)
 1426: random_st.randint(I_i8_high_open, dtype=np.int64)
 1427: random_st.randint(I_i8_low, I_i8_high_open, dtype=np.int64)
 1428: random_st.randint(-9223372036854775808, I_i8_high_open, dtype=np.int64)
 1429: 
 1430: bg: np.random.BitGenerator = random_st._bit_generator
 1431: 
 1432: random_st.bytes(2)
 1433: 
 1434: random_st.choice(5)
 1435: random_st.choice(5, 3)
 1436: random_st.choice(5, 3, replace=True)
 1437: random_st.choice(5, 3, p=[1 / 5] * 5)
 1438: random_st.choice(5, 3, p=[1 / 5] * 5, replace=False)
 1439: 
 1440: random_st.choice(["pooh", "rabbit", "piglet", "Christopher"])
 1441: random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3)
 1442: random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, p=[1 / 4] * 4)
 1443: random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=True)
 1444: random_st.choice(["pooh", "rabbit", "piglet", "Christopher"], 3, replace=False, p=np.array([1 / 8, 1 / 8, 1 / 2, 1 / 4]))
 1445: 
 1446: random_st.dirichlet([0.5, 0.5])
 1447: random_st.dirichlet(np.array([0.5, 0.5]))
 1448: random_st.dirichlet(np.array([0.5, 0.5]), size=3)
 1449: 
 1450: random_st.multinomial(20, [1 / 6.0] * 6)
 1451: random_st.multinomial(20, np.array([0.5, 0.5]))
 1452: random_st.multinomial(20, [1 / 6.0] * 6, size=2)
 1453: 
 1454: random_st.multivariate_normal([0.0], [[1.0]])
 1455: random_st.multivariate_normal([0.0], np.array([[1.0]]))
 1456: random_st.multivariate_normal(np.array([0.0]), [[1.0]])
 1457: random_st.multivariate_normal([0.0], np.array([[1.0]]))
 1458: 
 1459: random_st.permutation(10)
 1460: random_st.permutation([1, 2, 3, 4])
 1461: random_st.permutation(np.array([1, 2, 3, 4]))
 1462: random_st.permutation(D_2D)
 1463: 
 1464: random_st.shuffle(np.arange(10))
 1465: random_st.shuffle([1, 2, 3, 4, 5])
 1466: random_st.shuffle(D_2D)
 1467: 
 1468: np.random.RandomState(SEED_PCG64)
 1469: np.random.RandomState(0)
 1470: np.random.RandomState([0, 1, 2])
 1471: random_st.__str__()
 1472: random_st.__repr__()
 1473: random_st_state = random_st.__getstate__()
 1474: random_st.__setstate__(random_st_state)
 1475: random_st.seed()
 1476: random_st.seed(1)
 1477: random_st.seed([0, 1])
 1478: random_st_get_state = random_st.get_state()
 1479: random_st_get_state_legacy = random_st.get_state(legacy=True)
 1480: random_st.set_state(random_st_get_state)
 1481: 
 1482: random_st.rand()
 1483: random_st.rand(1)
 1484: random_st.rand(1, 2)
 1485: random_st.randn()
 1486: random_st.randn(1)
 1487: random_st.randn(1, 2)
 1488: random_st.random_sample()
 1489: random_st.random_sample(1)
 1490: random_st.random_sample(size=(1, 2))
 1491: 
 1492: random_st.tomaxint()
 1493: random_st.tomaxint(1)
 1494: random_st.tomaxint((1,))
 1495: 
 1496: np.random.mtrand.set_bit_generator(SEED_PCG64)
 1497: np.random.mtrand.get_bit_generator()
