    1: from typing import Any, TypeAlias, TypeVar, cast
    2: 
    3: import numpy as np
    4: import numpy.typing as npt
    5: from numpy._typing import _Shape
    6: 
    7: _ScalarT = TypeVar("_ScalarT", bound=np.generic)
    8: MaskedArray: TypeAlias = np.ma.MaskedArray[_Shape, np.dtype[_ScalarT]]
    9: 
   10: MAR_b: MaskedArray[np.bool] = np.ma.MaskedArray([True])
   11: MAR_u: MaskedArray[np.uint32] = np.ma.MaskedArray([1], dtype=np.uint32)
   12: MAR_i: MaskedArray[np.int64] = np.ma.MaskedArray([1])
   13: MAR_f: MaskedArray[np.float64] = np.ma.MaskedArray([1.0])
   14: MAR_c: MaskedArray[np.complex128] = np.ma.MaskedArray([1j])
   15: MAR_td64: MaskedArray[np.timedelta64] = np.ma.MaskedArray([np.timedelta64(1, "D")])
   16: MAR_M_dt64: MaskedArray[np.datetime64] = np.ma.MaskedArray([np.datetime64(1, "D")])
   17: MAR_S: MaskedArray[np.bytes_] = np.ma.MaskedArray([b'foo'], dtype=np.bytes_)
   18: MAR_U: MaskedArray[np.str_] = np.ma.MaskedArray(['foo'], dtype=np.str_)
   19: MAR_T = cast(np.ma.MaskedArray[Any, np.dtypes.StringDType],
   20:              np.ma.MaskedArray(["a"], dtype="T"))
   21: 
   22: AR_b: npt.NDArray[np.bool] = np.array([True, False, True])
   23: 
   24: AR_LIKE_b = [True]
   25: AR_LIKE_u = [np.uint32(1)]
   26: AR_LIKE_i = [1]
   27: AR_LIKE_f = [1.0]
   28: AR_LIKE_c = [1j]
   29: AR_LIKE_m = [np.timedelta64(1, "D")]
   30: AR_LIKE_M = [np.datetime64(1, "D")]
   31: 
   32: MAR_f.mask = AR_b
   33: MAR_f.mask = np.False_
   34: 
   35: # Inplace addition
   36: 
   37: MAR_b += AR_LIKE_b
   38: 
   39: MAR_u += AR_LIKE_b
   40: MAR_u += AR_LIKE_u
   41: 
   42: MAR_i += AR_LIKE_b
   43: MAR_i += 2
   44: MAR_i += AR_LIKE_i
   45: 
   46: MAR_f += AR_LIKE_b
   47: MAR_f += 2
   48: MAR_f += AR_LIKE_u
   49: MAR_f += AR_LIKE_i
   50: MAR_f += AR_LIKE_f
   51: 
   52: MAR_c += AR_LIKE_b
   53: MAR_c += AR_LIKE_u
   54: MAR_c += AR_LIKE_i
   55: MAR_c += AR_LIKE_f
   56: MAR_c += AR_LIKE_c
   57: 
   58: MAR_td64 += AR_LIKE_b
   59: MAR_td64 += AR_LIKE_u
   60: MAR_td64 += AR_LIKE_i
   61: MAR_td64 += AR_LIKE_m
   62: MAR_M_dt64 += AR_LIKE_b
   63: MAR_M_dt64 += AR_LIKE_u
   64: MAR_M_dt64 += AR_LIKE_i
   65: MAR_M_dt64 += AR_LIKE_m
   66: 
   67: MAR_S += b'snakes'
   68: MAR_U += 'snakes'
   69: MAR_T += 'snakes'
   70: 
   71: # Inplace subtraction
   72: 
   73: MAR_u -= AR_LIKE_b
   74: MAR_u -= AR_LIKE_u
   75: 
   76: MAR_i -= AR_LIKE_b
   77: MAR_i -= AR_LIKE_i
   78: 
   79: MAR_f -= AR_LIKE_b
   80: MAR_f -= AR_LIKE_u
   81: MAR_f -= AR_LIKE_i
   82: MAR_f -= AR_LIKE_f
   83: 
   84: MAR_c -= AR_LIKE_b
   85: MAR_c -= AR_LIKE_u
   86: MAR_c -= AR_LIKE_i
   87: MAR_c -= AR_LIKE_f
   88: MAR_c -= AR_LIKE_c
   89: 
   90: MAR_td64 -= AR_LIKE_b
   91: MAR_td64 -= AR_LIKE_u
   92: MAR_td64 -= AR_LIKE_i
   93: MAR_td64 -= AR_LIKE_m
   94: MAR_M_dt64 -= AR_LIKE_b
   95: MAR_M_dt64 -= AR_LIKE_u
   96: MAR_M_dt64 -= AR_LIKE_i
   97: MAR_M_dt64 -= AR_LIKE_m
   98: 
   99: # Inplace floor division
  100: 
  101: MAR_f //= AR_LIKE_b
  102: MAR_f //= 2
  103: MAR_f //= AR_LIKE_u
  104: MAR_f //= AR_LIKE_i
  105: MAR_f //= AR_LIKE_f
  106: 
  107: MAR_td64 //= AR_LIKE_i
  108: 
  109: # Inplace true division
  110: 
  111: MAR_f /= AR_LIKE_b
  112: MAR_f /= 2
  113: MAR_f /= AR_LIKE_u
  114: MAR_f /= AR_LIKE_i
  115: MAR_f /= AR_LIKE_f
  116: 
  117: MAR_c /= AR_LIKE_b
  118: MAR_c /= AR_LIKE_u
  119: MAR_c /= AR_LIKE_i
  120: MAR_c /= AR_LIKE_f
  121: MAR_c /= AR_LIKE_c
  122: 
  123: MAR_td64 /= AR_LIKE_i
  124: 
  125: # Inplace multiplication
  126: 
  127: MAR_b *= AR_LIKE_b
  128: 
  129: MAR_u *= AR_LIKE_b
  130: MAR_u *= AR_LIKE_u
  131: 
  132: MAR_i *= AR_LIKE_b
  133: MAR_i *= 2
  134: MAR_i *= AR_LIKE_i
  135: 
  136: MAR_f *= AR_LIKE_b
  137: MAR_f *= 2
  138: MAR_f *= AR_LIKE_u
  139: MAR_f *= AR_LIKE_i
  140: MAR_f *= AR_LIKE_f
  141: 
  142: MAR_c *= AR_LIKE_b
  143: MAR_c *= AR_LIKE_u
  144: MAR_c *= AR_LIKE_i
  145: MAR_c *= AR_LIKE_f
  146: MAR_c *= AR_LIKE_c
  147: 
  148: MAR_td64 *= AR_LIKE_b
  149: MAR_td64 *= AR_LIKE_u
  150: MAR_td64 *= AR_LIKE_i
  151: MAR_td64 *= AR_LIKE_f
  152: 
  153: MAR_S *= 2
  154: MAR_U *= 2
  155: MAR_T *= 2
  156: 
  157: # Inplace power
  158: 
  159: MAR_u **= AR_LIKE_b
  160: MAR_u **= AR_LIKE_u
  161: 
  162: MAR_i **= AR_LIKE_b
  163: MAR_i **= AR_LIKE_i
  164: 
  165: MAR_f **= AR_LIKE_b
  166: MAR_f **= AR_LIKE_u
  167: MAR_f **= AR_LIKE_i
  168: MAR_f **= AR_LIKE_f
  169: 
  170: MAR_c **= AR_LIKE_b
  171: MAR_c **= AR_LIKE_u
  172: MAR_c **= AR_LIKE_i
  173: MAR_c **= AR_LIKE_f
  174: MAR_c **= AR_LIKE_c
