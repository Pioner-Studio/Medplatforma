    1: from __future__ import annotations
    2: 
    3: from typing import Any
    4: 
    5: import numpy as np
    6: 
    7: AR_LIKE_b = [True, True, True]
    8: AR_LIKE_u = [np.uint32(1), np.uint32(2), np.uint32(3)]
    9: AR_LIKE_i = [1, 2, 3]
   10: AR_LIKE_f = [1.0, 2.0, 3.0]
   11: AR_LIKE_c = [1j, 2j, 3j]
   12: AR_LIKE_U = ["1", "2", "3"]
   13: 
   14: OUT_f: np.ndarray[Any, np.dtype[np.float64]] = np.empty(3, dtype=np.float64)
   15: OUT_c: np.ndarray[Any, np.dtype[np.complex128]] = np.empty(3, dtype=np.complex128)
   16: 
   17: np.einsum("i,i->i", AR_LIKE_b, AR_LIKE_b)
   18: np.einsum("i,i->i", AR_LIKE_u, AR_LIKE_u)
   19: np.einsum("i,i->i", AR_LIKE_i, AR_LIKE_i)
   20: np.einsum("i,i->i", AR_LIKE_f, AR_LIKE_f)
   21: np.einsum("i,i->i", AR_LIKE_c, AR_LIKE_c)
   22: np.einsum("i,i->i", AR_LIKE_b, AR_LIKE_i)
   23: np.einsum("i,i,i,i->i", AR_LIKE_b, AR_LIKE_u, AR_LIKE_i, AR_LIKE_c)
   24: 
   25: np.einsum("i,i->i", AR_LIKE_f, AR_LIKE_f, dtype="c16")
   26: np.einsum("i,i->i", AR_LIKE_U, AR_LIKE_U, dtype=bool, casting="unsafe")
   27: np.einsum("i,i->i", AR_LIKE_f, AR_LIKE_f, out=OUT_c)
   28: np.einsum("i,i->i", AR_LIKE_U, AR_LIKE_U, dtype=int, casting="unsafe", out=OUT_f)
   29: 
   30: np.einsum_path("i,i->i", AR_LIKE_b, AR_LIKE_b)
   31: np.einsum_path("i,i->i", AR_LIKE_u, AR_LIKE_u)
   32: np.einsum_path("i,i->i", AR_LIKE_i, AR_LIKE_i)
   33: np.einsum_path("i,i->i", AR_LIKE_f, AR_LIKE_f)
   34: np.einsum_path("i,i->i", AR_LIKE_c, AR_LIKE_c)
   35: np.einsum_path("i,i->i", AR_LIKE_b, AR_LIKE_i)
   36: np.einsum_path("i,i,i,i->i", AR_LIKE_b, AR_LIKE_u, AR_LIKE_i, AR_LIKE_c)
