    1: import numpy as np
    2: import numpy.typing as npt
    3: 
    4: AR_f8: npt.NDArray[np.float64] = np.array([1.0])
    5: AR_i4 = np.array([1], dtype=np.int32)
    6: AR_u1 = np.array([1], dtype=np.uint8)
    7: 
    8: AR_LIKE_f = [1.5]
    9: AR_LIKE_i = [1]
   10: 
   11: b_f8 = np.broadcast(AR_f8)
   12: b_i4_f8_f8 = np.broadcast(AR_i4, AR_f8, AR_f8)
   13: 
   14: next(b_f8)
   15: b_f8.reset()
   16: b_f8.index
   17: b_f8.iters
   18: b_f8.nd
   19: b_f8.ndim
   20: b_f8.numiter
   21: b_f8.shape
   22: b_f8.size
   23: 
   24: next(b_i4_f8_f8)
   25: b_i4_f8_f8.reset()
   26: b_i4_f8_f8.ndim
   27: b_i4_f8_f8.index
   28: b_i4_f8_f8.iters
   29: b_i4_f8_f8.nd
   30: b_i4_f8_f8.numiter
   31: b_i4_f8_f8.shape
   32: b_i4_f8_f8.size
   33: 
   34: np.inner(AR_f8, AR_i4)
   35: 
   36: np.where([True, True, False])
   37: np.where([True, True, False], 1, 0)
   38: 
   39: np.lexsort([0, 1, 2])
   40: 
   41: np.can_cast(np.dtype("i8"), int)
   42: np.can_cast(AR_f8, "f8")
   43: np.can_cast(AR_f8, np.complex128, casting="unsafe")
   44: 
   45: np.min_scalar_type([1])
   46: np.min_scalar_type(AR_f8)
   47: 
   48: np.result_type(int, AR_i4)
   49: np.result_type(AR_f8, AR_u1)
   50: np.result_type(AR_f8, np.complex128)
   51: 
   52: np.dot(AR_LIKE_f, AR_i4)
   53: np.dot(AR_u1, 1)
   54: np.dot(1.5j, 1)
   55: np.dot(AR_u1, 1, out=AR_f8)
   56: 
   57: np.vdot(AR_LIKE_f, AR_i4)
   58: np.vdot(AR_u1, 1)
   59: np.vdot(1.5j, 1)
   60: 
   61: np.bincount(AR_i4)
   62: 
   63: np.copyto(AR_f8, [1.6])
   64: 
   65: np.putmask(AR_f8, [True], 1.5)
   66: 
   67: np.packbits(AR_i4)
   68: np.packbits(AR_u1)
   69: 
   70: np.unpackbits(AR_u1)
   71: 
   72: np.shares_memory(1, 2)
   73: np.shares_memory(AR_f8, AR_f8, max_work=1)
   74: 
   75: np.may_share_memory(1, 2)
   76: np.may_share_memory(AR_f8, AR_f8, max_work=1)
