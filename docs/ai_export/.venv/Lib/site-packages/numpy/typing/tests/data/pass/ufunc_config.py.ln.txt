    1: """Typing tests for `numpy._core._ufunc_config`."""
    2: 
    3: import numpy as np
    4: 
    5: 
    6: def func1(a: str, b: int) -> None:
    7:     return None
    8: 
    9: 
   10: def func2(a: str, b: int, c: float = 1.0) -> None:
   11:     return None
   12: 
   13: 
   14: def func3(a: str, b: int) -> int:
   15:     return 0
   16: 
   17: 
   18: class Write1:
   19:     def write(self, a: str) -> None:
   20:         return None
   21: 
   22: 
   23: class Write2:
   24:     def write(self, a: str, b: int = 1) -> None:
   25:         return None
   26: 
   27: 
   28: class Write3:
   29:     def write(self, a: str) -> int:
   30:         return 0
   31: 
   32: 
   33: _err_default = np.geterr()
   34: _bufsize_default = np.getbufsize()
   35: _errcall_default = np.geterrcall()
   36: 
   37: try:
   38:     np.seterr(all=None)
   39:     np.seterr(divide="ignore")
   40:     np.seterr(over="warn")
   41:     np.seterr(under="call")
   42:     np.seterr(invalid="raise")
   43:     np.geterr()
   44: 
   45:     np.setbufsize(4096)
   46:     np.getbufsize()
   47: 
   48:     np.seterrcall(func1)
   49:     np.seterrcall(func2)
   50:     np.seterrcall(func3)
   51:     np.seterrcall(Write1())
   52:     np.seterrcall(Write2())
   53:     np.seterrcall(Write3())
   54:     np.geterrcall()
   55: 
   56:     with np.errstate(call=func1, all="call"):
   57:         pass
   58:     with np.errstate(call=Write1(), divide="log", over="log"):
   59:         pass
   60: 
   61: finally:
   62:     np.seterr(**_err_default)
   63:     np.setbufsize(_bufsize_default)
   64:     np.seterrcall(_errcall_default)
