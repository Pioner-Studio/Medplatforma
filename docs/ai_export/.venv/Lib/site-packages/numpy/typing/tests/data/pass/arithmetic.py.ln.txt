    1: from __future__ import annotations
    2: 
    3: from typing import Any, cast
    4: import numpy as np
    5: import numpy.typing as npt
    6: import pytest
    7: 
    8: c16 = np.complex128(1)
    9: f8 = np.float64(1)
   10: i8 = np.int64(1)
   11: u8 = np.uint64(1)
   12: 
   13: c8 = np.complex64(1)
   14: f4 = np.float32(1)
   15: i4 = np.int32(1)
   16: u4 = np.uint32(1)
   17: 
   18: dt = np.datetime64(1, "D")
   19: td = np.timedelta64(1, "D")
   20: 
   21: b_ = np.bool(1)
   22: 
   23: b = bool(1)
   24: c = complex(1)
   25: f = float(1)
   26: i = int(1)
   27: 
   28: 
   29: class Object:
   30:     def __array__(self, dtype: np.typing.DTypeLike = None,
   31:                   copy: bool | None = None) -> np.ndarray[Any, np.dtype[np.object_]]:
   32:         ret = np.empty((), dtype=object)
   33:         ret[()] = self
   34:         return ret
   35: 
   36:     def __sub__(self, value: Any) -> Object:
   37:         return self
   38: 
   39:     def __rsub__(self, value: Any) -> Object:
   40:         return self
   41: 
   42:     def __floordiv__(self, value: Any) -> Object:
   43:         return self
   44: 
   45:     def __rfloordiv__(self, value: Any) -> Object:
   46:         return self
   47: 
   48:     def __mul__(self, value: Any) -> Object:
   49:         return self
   50: 
   51:     def __rmul__(self, value: Any) -> Object:
   52:         return self
   53: 
   54:     def __pow__(self, value: Any) -> Object:
   55:         return self
   56: 
   57:     def __rpow__(self, value: Any) -> Object:
   58:         return self
   59: 
   60: 
   61: AR_b: npt.NDArray[np.bool] = np.array([True])
   62: AR_u: npt.NDArray[np.uint32] = np.array([1], dtype=np.uint32)
   63: AR_i: npt.NDArray[np.int64] = np.array([1])
   64: AR_integer: npt.NDArray[np.integer] = cast(npt.NDArray[np.integer], AR_i)
   65: AR_f: npt.NDArray[np.float64] = np.array([1.0])
   66: AR_c: npt.NDArray[np.complex128] = np.array([1j])
   67: AR_m: npt.NDArray[np.timedelta64] = np.array([np.timedelta64(1, "D")])
   68: AR_M: npt.NDArray[np.datetime64] = np.array([np.datetime64(1, "D")])
   69: AR_O: npt.NDArray[np.object_] = np.array([Object()])
   70: 
   71: AR_LIKE_b = [True]
   72: AR_LIKE_u = [np.uint32(1)]
   73: AR_LIKE_i = [1]
   74: AR_LIKE_f = [1.0]
   75: AR_LIKE_c = [1j]
   76: AR_LIKE_m = [np.timedelta64(1, "D")]
   77: AR_LIKE_M = [np.datetime64(1, "D")]
   78: AR_LIKE_O = [Object()]
   79: 
   80: # Array subtractions
   81: 
   82: AR_b - AR_LIKE_u
   83: AR_b - AR_LIKE_i
   84: AR_b - AR_LIKE_f
   85: AR_b - AR_LIKE_c
   86: AR_b - AR_LIKE_m
   87: AR_b - AR_LIKE_O
   88: 
   89: AR_LIKE_u - AR_b
   90: AR_LIKE_i - AR_b
   91: AR_LIKE_f - AR_b
   92: AR_LIKE_c - AR_b
   93: AR_LIKE_m - AR_b
   94: AR_LIKE_M - AR_b
   95: AR_LIKE_O - AR_b
   96: 
   97: AR_u - AR_LIKE_b
   98: AR_u - AR_LIKE_u
   99: AR_u - AR_LIKE_i
  100: AR_u - AR_LIKE_f
  101: AR_u - AR_LIKE_c
  102: AR_u - AR_LIKE_m
  103: AR_u - AR_LIKE_O
  104: 
  105: AR_LIKE_b - AR_u
  106: AR_LIKE_u - AR_u
  107: AR_LIKE_i - AR_u
  108: AR_LIKE_f - AR_u
  109: AR_LIKE_c - AR_u
  110: AR_LIKE_m - AR_u
  111: AR_LIKE_M - AR_u
  112: AR_LIKE_O - AR_u
  113: 
  114: AR_i - AR_LIKE_b
  115: AR_i - AR_LIKE_u
  116: AR_i - AR_LIKE_i
  117: AR_i - AR_LIKE_f
  118: AR_i - AR_LIKE_c
  119: AR_i - AR_LIKE_m
  120: AR_i - AR_LIKE_O
  121: 
  122: AR_LIKE_b - AR_i
  123: AR_LIKE_u - AR_i
  124: AR_LIKE_i - AR_i
  125: AR_LIKE_f - AR_i
  126: AR_LIKE_c - AR_i
  127: AR_LIKE_m - AR_i
  128: AR_LIKE_M - AR_i
  129: AR_LIKE_O - AR_i
  130: 
  131: AR_f - AR_LIKE_b
  132: AR_f - AR_LIKE_u
  133: AR_f - AR_LIKE_i
  134: AR_f - AR_LIKE_f
  135: AR_f - AR_LIKE_c
  136: AR_f - AR_LIKE_O
  137: 
  138: AR_LIKE_b - AR_f
  139: AR_LIKE_u - AR_f
  140: AR_LIKE_i - AR_f
  141: AR_LIKE_f - AR_f
  142: AR_LIKE_c - AR_f
  143: AR_LIKE_O - AR_f
  144: 
  145: AR_c - AR_LIKE_b
  146: AR_c - AR_LIKE_u
  147: AR_c - AR_LIKE_i
  148: AR_c - AR_LIKE_f
  149: AR_c - AR_LIKE_c
  150: AR_c - AR_LIKE_O
  151: 
  152: AR_LIKE_b - AR_c
  153: AR_LIKE_u - AR_c
  154: AR_LIKE_i - AR_c
  155: AR_LIKE_f - AR_c
  156: AR_LIKE_c - AR_c
  157: AR_LIKE_O - AR_c
  158: 
  159: AR_m - AR_LIKE_b
  160: AR_m - AR_LIKE_u
  161: AR_m - AR_LIKE_i
  162: AR_m - AR_LIKE_m
  163: 
  164: AR_LIKE_b - AR_m
  165: AR_LIKE_u - AR_m
  166: AR_LIKE_i - AR_m
  167: AR_LIKE_m - AR_m
  168: AR_LIKE_M - AR_m
  169: 
  170: AR_M - AR_LIKE_b
  171: AR_M - AR_LIKE_u
  172: AR_M - AR_LIKE_i
  173: AR_M - AR_LIKE_m
  174: AR_M - AR_LIKE_M
  175: 
  176: AR_LIKE_M - AR_M
  177: 
  178: AR_O - AR_LIKE_b
  179: AR_O - AR_LIKE_u
  180: AR_O - AR_LIKE_i
  181: AR_O - AR_LIKE_f
  182: AR_O - AR_LIKE_c
  183: AR_O - AR_LIKE_O
  184: 
  185: AR_LIKE_b - AR_O
  186: AR_LIKE_u - AR_O
  187: AR_LIKE_i - AR_O
  188: AR_LIKE_f - AR_O
  189: AR_LIKE_c - AR_O
  190: AR_LIKE_O - AR_O
  191: 
  192: AR_u += AR_b
  193: AR_u += AR_u
  194: AR_u += 1  # Allowed during runtime as long as the object is 0D and >=0
  195: 
  196: # Array floor division
  197: 
  198: AR_b // AR_LIKE_b
  199: AR_b // AR_LIKE_u
  200: AR_b // AR_LIKE_i
  201: AR_b // AR_LIKE_f
  202: AR_b // AR_LIKE_O
  203: 
  204: AR_LIKE_b // AR_b
  205: AR_LIKE_u // AR_b
  206: AR_LIKE_i // AR_b
  207: AR_LIKE_f // AR_b
  208: AR_LIKE_O // AR_b
  209: 
  210: AR_u // AR_LIKE_b
  211: AR_u // AR_LIKE_u
  212: AR_u // AR_LIKE_i
  213: AR_u // AR_LIKE_f
  214: AR_u // AR_LIKE_O
  215: 
  216: AR_LIKE_b // AR_u
  217: AR_LIKE_u // AR_u
  218: AR_LIKE_i // AR_u
  219: AR_LIKE_f // AR_u
  220: AR_LIKE_m // AR_u
  221: AR_LIKE_O // AR_u
  222: 
  223: AR_i // AR_LIKE_b
  224: AR_i // AR_LIKE_u
  225: AR_i // AR_LIKE_i
  226: AR_i // AR_LIKE_f
  227: AR_i // AR_LIKE_O
  228: 
  229: AR_LIKE_b // AR_i
  230: AR_LIKE_u // AR_i
  231: AR_LIKE_i // AR_i
  232: AR_LIKE_f // AR_i
  233: AR_LIKE_m // AR_i
  234: AR_LIKE_O // AR_i
  235: 
  236: AR_f // AR_LIKE_b
  237: AR_f // AR_LIKE_u
  238: AR_f // AR_LIKE_i
  239: AR_f // AR_LIKE_f
  240: AR_f // AR_LIKE_O
  241: 
  242: AR_LIKE_b // AR_f
  243: AR_LIKE_u // AR_f
  244: AR_LIKE_i // AR_f
  245: AR_LIKE_f // AR_f
  246: AR_LIKE_m // AR_f
  247: AR_LIKE_O // AR_f
  248: 
  249: AR_m // AR_LIKE_u
  250: AR_m // AR_LIKE_i
  251: AR_m // AR_LIKE_f
  252: AR_m // AR_LIKE_m
  253: 
  254: AR_LIKE_m // AR_m
  255: 
  256: AR_m /= f
  257: AR_m //= f
  258: AR_m /= AR_f
  259: AR_m /= AR_LIKE_f
  260: AR_m //= AR_f
  261: AR_m //= AR_LIKE_f
  262: 
  263: AR_O // AR_LIKE_b
  264: AR_O // AR_LIKE_u
  265: AR_O // AR_LIKE_i
  266: AR_O // AR_LIKE_f
  267: AR_O // AR_LIKE_O
  268: 
  269: AR_LIKE_b // AR_O
  270: AR_LIKE_u // AR_O
  271: AR_LIKE_i // AR_O
  272: AR_LIKE_f // AR_O
  273: AR_LIKE_O // AR_O
  274: 
  275: # Inplace multiplication
  276: 
  277: AR_b *= AR_LIKE_b
  278: 
  279: AR_u *= AR_LIKE_b
  280: AR_u *= AR_LIKE_u
  281: 
  282: AR_i *= AR_LIKE_b
  283: AR_i *= AR_LIKE_u
  284: AR_i *= AR_LIKE_i
  285: 
  286: AR_integer *= AR_LIKE_b
  287: AR_integer *= AR_LIKE_u
  288: AR_integer *= AR_LIKE_i
  289: 
  290: AR_f *= AR_LIKE_b
  291: AR_f *= AR_LIKE_u
  292: AR_f *= AR_LIKE_i
  293: AR_f *= AR_LIKE_f
  294: 
  295: AR_c *= AR_LIKE_b
  296: AR_c *= AR_LIKE_u
  297: AR_c *= AR_LIKE_i
  298: AR_c *= AR_LIKE_f
  299: AR_c *= AR_LIKE_c
  300: 
  301: AR_m *= AR_LIKE_b
  302: AR_m *= AR_LIKE_u
  303: AR_m *= AR_LIKE_i
  304: AR_m *= AR_LIKE_f
  305: 
  306: AR_O *= AR_LIKE_b
  307: AR_O *= AR_LIKE_u
  308: AR_O *= AR_LIKE_i
  309: AR_O *= AR_LIKE_f
  310: AR_O *= AR_LIKE_c
  311: AR_O *= AR_LIKE_O
  312: 
  313: # Inplace power
  314: 
  315: AR_u **= AR_LIKE_b
  316: AR_u **= AR_LIKE_u
  317: 
  318: AR_i **= AR_LIKE_b
  319: AR_i **= AR_LIKE_u
  320: AR_i **= AR_LIKE_i
  321: 
  322: AR_integer **= AR_LIKE_b
  323: AR_integer **= AR_LIKE_u
  324: AR_integer **= AR_LIKE_i
  325: 
  326: AR_f **= AR_LIKE_b
  327: AR_f **= AR_LIKE_u
  328: AR_f **= AR_LIKE_i
  329: AR_f **= AR_LIKE_f
  330: 
  331: AR_c **= AR_LIKE_b
  332: AR_c **= AR_LIKE_u
  333: AR_c **= AR_LIKE_i
  334: AR_c **= AR_LIKE_f
  335: AR_c **= AR_LIKE_c
  336: 
  337: AR_O **= AR_LIKE_b
  338: AR_O **= AR_LIKE_u
  339: AR_O **= AR_LIKE_i
  340: AR_O **= AR_LIKE_f
  341: AR_O **= AR_LIKE_c
  342: AR_O **= AR_LIKE_O
  343: 
  344: # unary ops
  345: 
  346: -c16
  347: -c8
  348: -f8
  349: -f4
  350: -i8
  351: -i4
  352: with pytest.warns(RuntimeWarning):
  353:     -u8
  354:     -u4
  355: -td
  356: -AR_f
  357: 
  358: +c16
  359: +c8
  360: +f8
  361: +f4
  362: +i8
  363: +i4
  364: +u8
  365: +u4
  366: +td
  367: +AR_f
  368: 
  369: abs(c16)
  370: abs(c8)
  371: abs(f8)
  372: abs(f4)
  373: abs(i8)
  374: abs(i4)
  375: abs(u8)
  376: abs(u4)
  377: abs(td)
  378: abs(b_)
  379: abs(AR_f)
  380: 
  381: # Time structures
  382: 
  383: dt + td
  384: dt + i
  385: dt + i4
  386: dt + i8
  387: dt - dt
  388: dt - i
  389: dt - i4
  390: dt - i8
  391: 
  392: td + td
  393: td + i
  394: td + i4
  395: td + i8
  396: td - td
  397: td - i
  398: td - i4
  399: td - i8
  400: td / f
  401: td / f4
  402: td / f8
  403: td / td
  404: td // td
  405: td % td
  406: 
  407: 
  408: # boolean
  409: 
  410: b_ / b
  411: b_ / b_
  412: b_ / i
  413: b_ / i8
  414: b_ / i4
  415: b_ / u8
  416: b_ / u4
  417: b_ / f
  418: b_ / f8
  419: b_ / f4
  420: b_ / c
  421: b_ / c16
  422: b_ / c8
  423: 
  424: b / b_
  425: b_ / b_
  426: i / b_
  427: i8 / b_
  428: i4 / b_
  429: u8 / b_
  430: u4 / b_
  431: f / b_
  432: f8 / b_
  433: f4 / b_
  434: c / b_
  435: c16 / b_
  436: c8 / b_
  437: 
  438: # Complex
  439: 
  440: c16 + c16
  441: c16 + f8
  442: c16 + i8
  443: c16 + c8
  444: c16 + f4
  445: c16 + i4
  446: c16 + b_
  447: c16 + b
  448: c16 + c
  449: c16 + f
  450: c16 + i
  451: c16 + AR_f
  452: 
  453: c16 + c16
  454: f8 + c16
  455: i8 + c16
  456: c8 + c16
  457: f4 + c16
  458: i4 + c16
  459: b_ + c16
  460: b + c16
  461: c + c16
  462: f + c16
  463: i + c16
  464: AR_f + c16
  465: 
  466: c8 + c16
  467: c8 + f8
  468: c8 + i8
  469: c8 + c8
  470: c8 + f4
  471: c8 + i4
  472: c8 + b_
  473: c8 + b
  474: c8 + c
  475: c8 + f
  476: c8 + i
  477: c8 + AR_f
  478: 
  479: c16 + c8
  480: f8 + c8
  481: i8 + c8
  482: c8 + c8
  483: f4 + c8
  484: i4 + c8
  485: b_ + c8
  486: b + c8
  487: c + c8
  488: f + c8
  489: i + c8
  490: AR_f + c8
  491: 
  492: # Float
  493: 
  494: f8 + f8
  495: f8 + i8
  496: f8 + f4
  497: f8 + i4
  498: f8 + b_
  499: f8 + b
  500: f8 + c
  501: f8 + f
  502: f8 + i
  503: f8 + AR_f
  504: 
  505: f8 + f8
  506: i8 + f8
  507: f4 + f8
  508: i4 + f8
  509: b_ + f8
  510: b + f8
  511: c + f8
  512: f + f8
  513: i + f8
  514: AR_f + f8
  515: 
  516: f4 + f8
  517: f4 + i8
  518: f4 + f4
  519: f4 + i4
  520: f4 + b_
  521: f4 + b
  522: f4 + c
  523: f4 + f
  524: f4 + i
  525: f4 + AR_f
  526: 
  527: f8 + f4
  528: i8 + f4
  529: f4 + f4
  530: i4 + f4
  531: b_ + f4
  532: b + f4
  533: c + f4
  534: f + f4
  535: i + f4
  536: AR_f + f4
  537: 
  538: # Int
  539: 
  540: i8 + i8
  541: i8 + u8
  542: i8 + i4
  543: i8 + u4
  544: i8 + b_
  545: i8 + b
  546: i8 + c
  547: i8 + f
  548: i8 + i
  549: i8 + AR_f
  550: 
  551: u8 + u8
  552: u8 + i4
  553: u8 + u4
  554: u8 + b_
  555: u8 + b
  556: u8 + c
  557: u8 + f
  558: u8 + i
  559: u8 + AR_f
  560: 
  561: i8 + i8
  562: u8 + i8
  563: i4 + i8
  564: u4 + i8
  565: b_ + i8
  566: b + i8
  567: c + i8
  568: f + i8
  569: i + i8
  570: AR_f + i8
  571: 
  572: u8 + u8
  573: i4 + u8
  574: u4 + u8
  575: b_ + u8
  576: b + u8
  577: c + u8
  578: f + u8
  579: i + u8
  580: AR_f + u8
  581: 
  582: i4 + i8
  583: i4 + i4
  584: i4 + i
  585: i4 + b_
  586: i4 + b
  587: i4 + AR_f
  588: 
  589: u4 + i8
  590: u4 + i4
  591: u4 + u8
  592: u4 + u4
  593: u4 + i
  594: u4 + b_
  595: u4 + b
  596: u4 + AR_f
  597: 
  598: i8 + i4
  599: i4 + i4
  600: i + i4
  601: b_ + i4
  602: b + i4
  603: AR_f + i4
  604: 
  605: i8 + u4
  606: i4 + u4
  607: u8 + u4
  608: u4 + u4
  609: b_ + u4
  610: b + u4
  611: i + u4
  612: AR_f + u4
