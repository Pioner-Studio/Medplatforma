    1: import datetime as dt
    2: 
    3: import pytest
    4: import numpy as np
    5: 
    6: b = np.bool()
    7: b_ = np.bool_()
    8: u8 = np.uint64()
    9: i8 = np.int64()
   10: f8 = np.float64()
   11: c16 = np.complex128()
   12: U = np.str_()
   13: S = np.bytes_()
   14: 
   15: 
   16: # Construction
   17: class D:
   18:     def __index__(self) -> int:
   19:         return 0
   20: 
   21: 
   22: class C:
   23:     def __complex__(self) -> complex:
   24:         return 3j
   25: 
   26: 
   27: class B:
   28:     def __int__(self) -> int:
   29:         return 4
   30: 
   31: 
   32: class A:
   33:     def __float__(self) -> float:
   34:         return 4.0
   35: 
   36: 
   37: np.complex64(3j)
   38: np.complex64(A())
   39: np.complex64(C())
   40: np.complex128(3j)
   41: np.complex128(C())
   42: np.complex128(None)
   43: np.complex64("1.2")
   44: np.complex128(b"2j")
   45: 
   46: np.int8(4)
   47: np.int16(3.4)
   48: np.int32(4)
   49: np.int64(-1)
   50: np.uint8(B())
   51: np.uint32()
   52: np.int32("1")
   53: np.int64(b"2")
   54: 
   55: np.float16(A())
   56: np.float32(16)
   57: np.float64(3.0)
   58: np.float64(None)
   59: np.float32("1")
   60: np.float16(b"2.5")
   61: 
   62: np.uint64(D())
   63: np.float32(D())
   64: np.complex64(D())
   65: 
   66: np.bytes_(b"hello")
   67: np.bytes_("hello", 'utf-8')
   68: np.bytes_("hello", encoding='utf-8')
   69: np.str_("hello")
   70: np.str_(b"hello", 'utf-8')
   71: np.str_(b"hello", encoding='utf-8')
   72: 
   73: # Array-ish semantics
   74: np.int8().real
   75: np.int16().imag
   76: np.int32().data
   77: np.int64().flags
   78: 
   79: np.uint8().itemsize * 2
   80: np.uint16().ndim + 1
   81: np.uint32().strides
   82: np.uint64().shape
   83: 
   84: # Time structures
   85: np.datetime64()
   86: np.datetime64(0, "D")
   87: np.datetime64(0, b"D")
   88: np.datetime64(0, ('ms', 3))
   89: np.datetime64("2019")
   90: np.datetime64(b"2019")
   91: np.datetime64("2019", "D")
   92: np.datetime64("2019", "us")
   93: np.datetime64("2019", "as")
   94: np.datetime64(np.datetime64())
   95: np.datetime64(np.datetime64())
   96: np.datetime64(dt.datetime(2000, 5, 3))
   97: np.datetime64(dt.datetime(2000, 5, 3), "D")
   98: np.datetime64(dt.datetime(2000, 5, 3), "us")
   99: np.datetime64(dt.datetime(2000, 5, 3), "as")
  100: np.datetime64(dt.date(2000, 5, 3))
  101: np.datetime64(dt.date(2000, 5, 3), "D")
  102: np.datetime64(dt.date(2000, 5, 3), "us")
  103: np.datetime64(dt.date(2000, 5, 3), "as")
  104: np.datetime64(None)
  105: np.datetime64(None, "D")
  106: 
  107: np.timedelta64()
  108: np.timedelta64(0)
  109: np.timedelta64(0, "D")
  110: np.timedelta64(0, ('ms', 3))
  111: np.timedelta64(0, b"D")
  112: np.timedelta64("3")
  113: np.timedelta64(b"5")
  114: np.timedelta64(np.timedelta64(2))
  115: np.timedelta64(dt.timedelta(2))
  116: np.timedelta64(None)
  117: np.timedelta64(None, "D")
  118: 
  119: np.void(1)
  120: np.void(np.int64(1))
  121: np.void(True)
  122: np.void(np.bool(True))
  123: np.void(b"test")
  124: np.void(np.bytes_("test"))
  125: np.void(object(), [("a", "O"), ("b", "O")])
  126: np.void(object(), dtype=[("a", "O"), ("b", "O")])
  127: 
  128: # Protocols
  129: i8 = np.int64()
  130: u8 = np.uint64()
  131: f8 = np.float64()
  132: c16 = np.complex128()
  133: b = np.bool()
  134: td = np.timedelta64()
  135: U = np.str_("1")
  136: S = np.bytes_("1")
  137: AR = np.array(1, dtype=np.float64)
  138: 
  139: int(i8)
  140: int(u8)
  141: int(f8)
  142: int(b)
  143: int(td)
  144: int(U)
  145: int(S)
  146: int(AR)
  147: with pytest.warns(np.exceptions.ComplexWarning):
  148:     int(c16)
  149: 
  150: float(i8)
  151: float(u8)
  152: float(f8)
  153: float(b_)
  154: float(td)
  155: float(U)
  156: float(S)
  157: float(AR)
  158: with pytest.warns(np.exceptions.ComplexWarning):
  159:     float(c16)
  160: 
  161: complex(i8)
  162: complex(u8)
  163: complex(f8)
  164: complex(c16)
  165: complex(b_)
  166: complex(td)
  167: complex(U)
  168: complex(AR)
  169: 
  170: 
  171: # Misc
  172: c16.dtype
  173: c16.real
  174: c16.imag
  175: c16.real.real
  176: c16.real.imag
  177: c16.ndim
  178: c16.size
  179: c16.itemsize
  180: c16.shape
  181: c16.strides
  182: c16.squeeze()
  183: c16.byteswap()
  184: c16.transpose()
  185: 
  186: # Aliases
  187: np.byte()
  188: np.short()
  189: np.intc()
  190: np.intp()
  191: np.int_()
  192: np.longlong()
  193: 
  194: np.ubyte()
  195: np.ushort()
  196: np.uintc()
  197: np.uintp()
  198: np.uint()
  199: np.ulonglong()
  200: 
  201: np.half()
  202: np.single()
  203: np.double()
  204: np.longdouble()
  205: 
  206: np.csingle()
  207: np.cdouble()
  208: np.clongdouble()
  209: 
  210: b.item()
  211: i8.item()
  212: u8.item()
  213: f8.item()
  214: c16.item()
  215: U.item()
  216: S.item()
  217: 
  218: b.tolist()
  219: i8.tolist()
  220: u8.tolist()
  221: f8.tolist()
  222: c16.tolist()
  223: U.tolist()
  224: S.tolist()
  225: 
  226: b.ravel()
  227: i8.ravel()
  228: u8.ravel()
  229: f8.ravel()
  230: c16.ravel()
  231: U.ravel()
  232: S.ravel()
  233: 
  234: b.flatten()
  235: i8.flatten()
  236: u8.flatten()
  237: f8.flatten()
  238: c16.flatten()
  239: U.flatten()
  240: S.flatten()
  241: 
  242: b.reshape(1)
  243: i8.reshape(1)
  244: u8.reshape(1)
  245: f8.reshape(1)
  246: c16.reshape(1)
  247: U.reshape(1)
  248: S.reshape(1)
