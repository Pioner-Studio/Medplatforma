    1: """Test the runtime usage of `numpy.typing`."""
    2: 
    3: from typing import (
    4:     Any,
    5:     NamedTuple,
    6:     Union,  # pyright: ignore[reportDeprecated]
    7:     get_args,
    8:     get_origin,
    9:     get_type_hints,
   10: )
   11: 
   12: import pytest
   13: 
   14: import numpy as np
   15: import numpy._typing as _npt
   16: import numpy.typing as npt
   17: 
   18: 
   19: class TypeTup(NamedTuple):
   20:     typ: type
   21:     args: tuple[type, ...]
   22:     origin: type | None
   23: 
   24: 
   25: NDArrayTup = TypeTup(npt.NDArray, npt.NDArray.__args__, np.ndarray)
   26: 
   27: TYPES = {
   28:     "ArrayLike": TypeTup(npt.ArrayLike, npt.ArrayLike.__args__, Union),
   29:     "DTypeLike": TypeTup(npt.DTypeLike, npt.DTypeLike.__args__, Union),
   30:     "NBitBase": TypeTup(npt.NBitBase, (), None),
   31:     "NDArray": NDArrayTup,
   32: }
   33: 
   34: 
   35: @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
   36: def test_get_args(name: type, tup: TypeTup) -> None:
   37:     """Test `typing.get_args`."""
   38:     typ, ref = tup.typ, tup.args
   39:     out = get_args(typ)
   40:     assert out == ref
   41: 
   42: 
   43: @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
   44: def test_get_origin(name: type, tup: TypeTup) -> None:
   45:     """Test `typing.get_origin`."""
   46:     typ, ref = tup.typ, tup.origin
   47:     out = get_origin(typ)
   48:     assert out == ref
   49: 
   50: 
   51: @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
   52: def test_get_type_hints(name: type, tup: TypeTup) -> None:
   53:     """Test `typing.get_type_hints`."""
   54:     typ = tup.typ
   55: 
   56:     def func(a: typ) -> None: pass
   57: 
   58:     out = get_type_hints(func)
   59:     ref = {"a": typ, "return": type(None)}
   60:     assert out == ref
   61: 
   62: 
   63: @pytest.mark.parametrize("name,tup", TYPES.items(), ids=TYPES.keys())
   64: def test_get_type_hints_str(name: type, tup: TypeTup) -> None:
   65:     """Test `typing.get_type_hints` with string-representation of types."""
   66:     typ_str, typ = f"npt.{name}", tup.typ
   67: 
   68:     def func(a: typ_str) -> None: pass
   69: 
   70:     out = get_type_hints(func)
   71:     ref = {"a": typ, "return": type(None)}
   72:     assert out == ref
   73: 
   74: 
   75: def test_keys() -> None:
   76:     """Test that ``TYPES.keys()`` and ``numpy.typing.__all__`` are synced."""
   77:     keys = TYPES.keys()
   78:     ref = set(npt.__all__)
   79:     assert keys == ref
   80: 
   81: 
   82: PROTOCOLS: dict[str, tuple[type[Any], object]] = {
   83:     "_SupportsDType": (_npt._SupportsDType, np.int64(1)),
   84:     "_SupportsArray": (_npt._SupportsArray, np.arange(10)),
   85:     "_SupportsArrayFunc": (_npt._SupportsArrayFunc, np.arange(10)),
   86:     "_NestedSequence": (_npt._NestedSequence, [1]),
   87: }
   88: 
   89: 
   90: @pytest.mark.parametrize("cls,obj", PROTOCOLS.values(), ids=PROTOCOLS.keys())
   91: class TestRuntimeProtocol:
   92:     def test_isinstance(self, cls: type[Any], obj: object) -> None:
   93:         assert isinstance(obj, cls)
   94:         assert not isinstance(None, cls)
   95: 
   96:     def test_issubclass(self, cls: type[Any], obj: object) -> None:
   97:         if cls is _npt._SupportsDType:
   98:             pytest.xfail(
   99:                 "Protocols with non-method members don't support issubclass()"
  100:             )
  101:         assert issubclass(type(obj), cls)
  102:         assert not issubclass(type(None), cls)
