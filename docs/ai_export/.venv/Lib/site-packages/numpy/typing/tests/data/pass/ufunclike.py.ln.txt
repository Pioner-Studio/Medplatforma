    1: from __future__ import annotations
    2: from typing import Any
    3: import numpy as np
    4: 
    5: 
    6: class Object:
    7:     def __ceil__(self) -> Object:
    8:         return self
    9: 
   10:     def __floor__(self) -> Object:
   11:         return self
   12: 
   13:     def __ge__(self, value: object) -> bool:
   14:         return True
   15: 
   16:     def __array__(self, dtype: np.typing.DTypeLike | None = None,
   17:                   copy: bool | None = None) -> np.ndarray[Any, np.dtype[np.object_]]:
   18:         ret = np.empty((), dtype=object)
   19:         ret[()] = self
   20:         return ret
   21: 
   22: 
   23: AR_LIKE_b = [True, True, False]
   24: AR_LIKE_u = [np.uint32(1), np.uint32(2), np.uint32(3)]
   25: AR_LIKE_i = [1, 2, 3]
   26: AR_LIKE_f = [1.0, 2.0, 3.0]
   27: AR_LIKE_O = [Object(), Object(), Object()]
   28: AR_U: np.ndarray[Any, np.dtype[np.str_]] = np.zeros(3, dtype="U5")
   29: 
   30: np.fix(AR_LIKE_b)
   31: np.fix(AR_LIKE_u)
   32: np.fix(AR_LIKE_i)
   33: np.fix(AR_LIKE_f)
   34: np.fix(AR_LIKE_O)
   35: np.fix(AR_LIKE_f, out=AR_U)
   36: 
   37: np.isposinf(AR_LIKE_b)
   38: np.isposinf(AR_LIKE_u)
   39: np.isposinf(AR_LIKE_i)
   40: np.isposinf(AR_LIKE_f)
   41: np.isposinf(AR_LIKE_f, out=AR_U)
   42: 
   43: np.isneginf(AR_LIKE_b)
   44: np.isneginf(AR_LIKE_u)
   45: np.isneginf(AR_LIKE_i)
   46: np.isneginf(AR_LIKE_f)
   47: np.isneginf(AR_LIKE_f, out=AR_U)
