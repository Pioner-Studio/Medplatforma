    1: """These tests are based on the doctests from `numpy/lib/recfunctions.py`."""
    2: 
    3: from typing import Any, assert_type
    4: 
    5: import numpy as np
    6: import numpy.typing as npt
    7: from numpy.lib import recfunctions as rfn
    8: 
    9: 
   10: def test_recursive_fill_fields() -> None:
   11:     a: npt.NDArray[np.void] = np.array(
   12:         [(1, 10.0), (2, 20.0)],
   13:         dtype=[("A", np.int64), ("B", np.float64)],
   14:     )
   15:     b = np.zeros((int(3),), dtype=a.dtype)
   16:     out = rfn.recursive_fill_fields(a, b)
   17:     assert_type(out, np.ndarray[tuple[int], np.dtype[np.void]])
   18: 
   19: 
   20: def test_get_names() -> None:
   21:     names: tuple[str | Any, ...]
   22:     names = rfn.get_names(np.empty((1,), dtype=[("A", int)]).dtype)
   23:     names = rfn.get_names(np.empty((1,), dtype=[("A", int), ("B", float)]).dtype)
   24: 
   25:     adtype = np.dtype([("a", int), ("b", [("b_a", int), ("b_b", int)])])
   26:     names = rfn.get_names(adtype)
   27: 
   28: 
   29: def test_get_names_flat() -> None:
   30:     names: tuple[str, ...]
   31:     names = rfn.get_names_flat(np.empty((1,), dtype=[("A", int)]).dtype)
   32:     names = rfn.get_names_flat(np.empty((1,), dtype=[("A", int), ("B", float)]).dtype)
   33: 
   34:     adtype = np.dtype([("a", int), ("b", [("b_a", int), ("b_b", int)])])
   35:     names = rfn.get_names_flat(adtype)
   36: 
   37: 
   38: def test_flatten_descr() -> None:
   39:     ndtype = np.dtype([("a", "<i4"), ("b", [("b_a", "<f8"), ("b_b", "<i4")])])
   40:     assert_type(rfn.flatten_descr(ndtype), tuple[tuple[str, np.dtype]])
   41: 
   42: 
   43: def test_get_fieldstructure() -> None:
   44:     ndtype = np.dtype([
   45:         ("A", int),
   46:         ("B", [("B_A", int), ("B_B", [("B_B_A", int), ("B_B_B", int)])]),
   47:     ])
   48:     assert_type(rfn.get_fieldstructure(ndtype), dict[str, list[str]])
   49: 
   50: 
   51: def test_merge_arrays() -> None:
   52:     assert_type(
   53:         rfn.merge_arrays((
   54:             np.ones((int(2),), np.int_),
   55:             np.ones((int(3),), np.float64),
   56:         )),
   57:         np.recarray[tuple[int], np.dtype[np.void]],
   58:     )
   59: 
   60: 
   61: def test_drop_fields() -> None:
   62:     ndtype = [("a", np.int64), ("b", [("b_a", np.double), ("b_b", np.int64)])]
   63:     a = np.ones((int(3),), dtype=ndtype)
   64: 
   65:     assert_type(
   66:         rfn.drop_fields(a, "a"),
   67:         np.ndarray[tuple[int], np.dtype[np.void]],
   68:     )
   69:     assert_type(
   70:         rfn.drop_fields(a, "a", asrecarray=True),
   71:         np.rec.recarray[tuple[int], np.dtype[np.void]],
   72:     )
   73:     assert_type(
   74:         rfn.rec_drop_fields(a, "a"),
   75:         np.rec.recarray[tuple[int], np.dtype[np.void]],
   76:     )
   77: 
   78: 
   79: def test_rename_fields() -> None:
   80:     ndtype = [("a", np.int64), ("b", [("b_a", np.double), ("b_b", np.int64)])]
   81:     a = np.ones((int(3),), dtype=ndtype)
   82: 
   83:     assert_type(
   84:         rfn.rename_fields(a, {"a": "A", "b_b": "B_B"}),
   85:         np.ndarray[tuple[int], np.dtype[np.void]],
   86:     )
   87: 
   88: 
   89: def test_repack_fields() -> None:
   90:     dt: np.dtype[np.void] = np.dtype("u1, <i8, <f8", align=True)
   91: 
   92:     assert_type(rfn.repack_fields(dt), np.dtype[np.void])
   93:     assert_type(rfn.repack_fields(dt.type(0)), np.void)
   94:     assert_type(
   95:         rfn.repack_fields(np.ones((int(3),), dtype=dt)),
   96:         np.ndarray[tuple[int], np.dtype[np.void]],
   97:     )
   98: 
   99: 
  100: def test_structured_to_unstructured() -> None:
  101:     a = np.zeros(4, dtype=[("a", "i4"), ("b", "f4,u2"), ("c", "f4", 2)])
  102:     assert_type(rfn.structured_to_unstructured(a), npt.NDArray[Any])
  103: 
  104: 
  105: def unstructured_to_structured() -> None:
  106:     dt: np.dtype[np.void] = np.dtype([("a", "i4"), ("b", "f4,u2"), ("c", "f4", 2)])
  107:     a = np.arange(20, dtype=np.int32).reshape((4, 5))
  108:     assert_type(rfn.unstructured_to_structured(a, dt), npt.NDArray[np.void])
  109: 
  110: 
  111: def test_apply_along_fields() -> None:
  112:     b = np.ones(4, dtype=[("x", "i4"), ("y", "f4"), ("z", "f8")])
  113:     assert_type(
  114:         rfn.apply_along_fields(np.mean, b),
  115:         np.ndarray[tuple[int], np.dtype[np.void]],
  116:     )
  117: 
  118: 
  119: def test_assign_fields_by_name() -> None:
  120:     b = np.ones(4, dtype=[("x", "i4"), ("y", "f4"), ("z", "f8")])
  121:     assert_type(
  122:         rfn.apply_along_fields(np.mean, b),
  123:         np.ndarray[tuple[int], np.dtype[np.void]],
  124:     )
  125: 
  126: 
  127: def test_require_fields() -> None:
  128:     a = np.ones(4, dtype=[("a", "i4"), ("b", "f8"), ("c", "u1")])
  129:     assert_type(
  130:         rfn.require_fields(a, [("b", "f4"), ("c", "u1")]),
  131:         np.ndarray[tuple[int], np.dtype[np.void]],
  132:     )
  133: 
  134: 
  135: def test_stack_arrays() -> None:
  136:     x = np.zeros((int(2),), np.int32)
  137:     assert_type(
  138:         rfn.stack_arrays(x),
  139:         np.ndarray[tuple[int], np.dtype[np.int32]],
  140:     )
  141: 
  142:     z = np.ones((int(2),), [("A", "|S3"), ("B", float)])
  143:     zz = np.ones((int(2),), [("A", "|S3"), ("B", np.float64), ("C", np.float64)])
  144:     assert_type(
  145:         rfn.stack_arrays((z, zz)),
  146:         np.ma.MaskedArray[tuple[Any, ...], np.dtype[np.void]],
  147:     )
  148: 
  149: 
  150: def test_find_duplicates() -> None:
  151:     ndtype = np.dtype([("a", int)])
  152: 
  153:     a = np.ma.ones(7, mask=[0, 0, 1, 0, 0, 0, 1]).view(ndtype)
  154:     assert_type(rfn.find_duplicates(a), np.ma.MaskedArray[Any, np.dtype[np.void]])
  155:     assert_type(
  156:         rfn.find_duplicates(a, ignoremask=True, return_index=True),
  157:         tuple[
  158:             np.ma.MaskedArray[Any, np.dtype[np.void]],
  159:             np.ndarray[Any, np.dtype[np.int_]],
  160:         ],
  161:     )
