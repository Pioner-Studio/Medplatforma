    1: """
    2: NumPy
    3: =====
    4: 
    5: Provides
    6:   1. An array object of arbitrary homogeneous items
    7:   2. Fast mathematical operations over arrays
    8:   3. Linear Algebra, Fourier Transforms, Random Number Generation
    9: 
   10: How to use the documentation
   11: ----------------------------
   12: Documentation is available in two forms: docstrings provided
   13: with the code, and a loose standing reference guide, available from
   14: `the NumPy homepage <https://numpy.org>`_.
   15: 
   16: We recommend exploring the docstrings using
   17: `IPython <https://ipython.org>`_, an advanced Python shell with
   18: TAB-completion and introspection capabilities.  See below for further
   19: instructions.
   20: 
   21: The docstring examples assume that `numpy` has been imported as ``np``::
   22: 
   23:   >>> import numpy as np
   24: 
   25: Code snippets are indicated by three greater-than signs::
   26: 
   27:   >>> x = 42
   28:   >>> x = x + 1
   29: 
   30: Use the built-in ``help`` function to view a function's docstring::
   31: 
   32:   >>> help(np.sort)
   33:   ... # doctest: +SKIP
   34: 
   35: For some objects, ``np.info(obj)`` may provide additional help.  This is
   36: particularly true if you see the line "Help on ufunc object:" at the top
   37: of the help() page.  Ufuncs are implemented in C, not Python, for speed.
   38: The native Python help() does not know how to view their help, but our
   39: np.info() function does.
   40: 
   41: Available subpackages
   42: ---------------------
   43: lib
   44:     Basic functions used by several sub-packages.
   45: random
   46:     Core Random Tools
   47: linalg
   48:     Core Linear Algebra Tools
   49: fft
   50:     Core FFT routines
   51: polynomial
   52:     Polynomial tools
   53: testing
   54:     NumPy testing tools
   55: distutils
   56:     Enhancements to distutils with support for
   57:     Fortran compilers support and more (for Python <= 3.11)
   58: 
   59: Utilities
   60: ---------
   61: test
   62:     Run numpy unittests
   63: show_config
   64:     Show numpy build configuration
   65: __version__
   66:     NumPy version string
   67: 
   68: Viewing documentation using IPython
   69: -----------------------------------
   70: 
   71: Start IPython and import `numpy` usually under the alias ``np``: `import
   72: numpy as np`.  Then, directly past or use the ``%cpaste`` magic to paste
   73: examples into the shell.  To see which functions are available in `numpy`,
   74: type ``np.<TAB>`` (where ``<TAB>`` refers to the TAB key), or use
   75: ``np.*cos*?<ENTER>`` (where ``<ENTER>`` refers to the ENTER key) to narrow
   76: down the list.  To view the docstring for a function, use
   77: ``np.cos?<ENTER>`` (to view the docstring) and ``np.cos??<ENTER>`` (to view
   78: the source code).
   79: 
   80: Copies vs. in-place operation
   81: -----------------------------
   82: Most of the functions in `numpy` return a copy of the array argument
   83: (e.g., `np.sort`).  In-place versions of these functions are often
   84: available as array methods, i.e. ``x = np.array([1,2,3]); x.sort()``.
   85: Exceptions to this rule are documented.
   86: 
   87: """
   88: 
   89: 
   90: # start delvewheel patch
   91: def _delvewheel_patch_1_11_0():
   92:     import os
   93:     if os.path.isdir(libs_dir := os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, 'numpy.libs'))):
   94:         os.add_dll_directory(libs_dir)
   95: 
   96: 
   97: _delvewheel_patch_1_11_0()
   98: del _delvewheel_patch_1_11_0
   99: # end delvewheel patch
  100: 
  101: import os
  102: import sys
  103: import warnings
  104: 
  105: # If a version with git hash was stored, use that instead
  106: from . import version
  107: from ._expired_attrs_2_0 import __expired_attributes__
  108: from ._globals import _CopyMode, _NoValue
  109: from .version import __version__
  110: 
  111: # We first need to detect if we're being called as part of the numpy setup
  112: # procedure itself in a reliable manner.
  113: try:
  114:     __NUMPY_SETUP__  # noqa: B018
  115: except NameError:
  116:     __NUMPY_SETUP__ = False
  117: 
  118: if __NUMPY_SETUP__:
  119:     sys.stderr.write('Running from numpy source directory.\n')
  120: else:
  121:     # Allow distributors to run custom init code before importing numpy._core
  122:     from . import _distributor_init
  123: 
  124:     try:
  125:         from numpy.__config__ import show_config
  126:     except ImportError as e:
  127:         msg = """Error importing numpy: you should not try to import numpy from
  128:         its source directory; please exit the numpy source tree, and relaunch
  129:         your python interpreter from there."""
  130:         raise ImportError(msg) from e
  131: 
  132:     from . import _core
  133:     from ._core import (
  134:         False_,
  135:         ScalarType,
  136:         True_,
  137:         abs,
  138:         absolute,
  139:         acos,
  140:         acosh,
  141:         add,
  142:         all,
  143:         allclose,
  144:         amax,
  145:         amin,
  146:         any,
  147:         arange,
  148:         arccos,
  149:         arccosh,
  150:         arcsin,
  151:         arcsinh,
  152:         arctan,
  153:         arctan2,
  154:         arctanh,
  155:         argmax,
  156:         argmin,
  157:         argpartition,
  158:         argsort,
  159:         argwhere,
  160:         around,
  161:         array,
  162:         array2string,
  163:         array_equal,
  164:         array_equiv,
  165:         array_repr,
  166:         array_str,
  167:         asanyarray,
  168:         asarray,
  169:         ascontiguousarray,
  170:         asfortranarray,
  171:         asin,
  172:         asinh,
  173:         astype,
  174:         atan,
  175:         atan2,
  176:         atanh,
  177:         atleast_1d,
  178:         atleast_2d,
  179:         atleast_3d,
  180:         base_repr,
  181:         binary_repr,
  182:         bitwise_and,
  183:         bitwise_count,
  184:         bitwise_invert,
  185:         bitwise_left_shift,
  186:         bitwise_not,
  187:         bitwise_or,
  188:         bitwise_right_shift,
  189:         bitwise_xor,
  190:         block,
  191:         bool,
  192:         bool_,
  193:         broadcast,
  194:         busday_count,
  195:         busday_offset,
  196:         busdaycalendar,
  197:         byte,
  198:         bytes_,
  199:         can_cast,
  200:         cbrt,
  201:         cdouble,
  202:         ceil,
  203:         character,
  204:         choose,
  205:         clip,
  206:         clongdouble,
  207:         complex64,
  208:         complex128,
  209:         complexfloating,
  210:         compress,
  211:         concat,
  212:         concatenate,
  213:         conj,
  214:         conjugate,
  215:         convolve,
  216:         copysign,
  217:         copyto,
  218:         correlate,
  219:         cos,
  220:         cosh,
  221:         count_nonzero,
  222:         cross,
  223:         csingle,
  224:         cumprod,
  225:         cumsum,
  226:         cumulative_prod,
  227:         cumulative_sum,
  228:         datetime64,
  229:         datetime_as_string,
  230:         datetime_data,
  231:         deg2rad,
  232:         degrees,
  233:         diagonal,
  234:         divide,
  235:         divmod,
  236:         dot,
  237:         double,
  238:         dtype,
  239:         e,
  240:         einsum,
  241:         einsum_path,
  242:         empty,
  243:         empty_like,
  244:         equal,
  245:         errstate,
  246:         euler_gamma,
  247:         exp,
  248:         exp2,
  249:         expm1,
  250:         fabs,
  251:         finfo,
  252:         flatiter,
  253:         flatnonzero,
  254:         flexible,
  255:         float16,
  256:         float32,
  257:         float64,
  258:         float_power,
  259:         floating,
  260:         floor,
  261:         floor_divide,
  262:         fmax,
  263:         fmin,
  264:         fmod,
  265:         format_float_positional,
  266:         format_float_scientific,
  267:         frexp,
  268:         from_dlpack,
  269:         frombuffer,
  270:         fromfile,
  271:         fromfunction,
  272:         fromiter,
  273:         frompyfunc,
  274:         fromstring,
  275:         full,
  276:         full_like,
  277:         gcd,
  278:         generic,
  279:         geomspace,
  280:         get_printoptions,
  281:         getbufsize,
  282:         geterr,
  283:         geterrcall,
  284:         greater,
  285:         greater_equal,
  286:         half,
  287:         heaviside,
  288:         hstack,
  289:         hypot,
  290:         identity,
  291:         iinfo,
  292:         indices,
  293:         inexact,
  294:         inf,
  295:         inner,
  296:         int8,
  297:         int16,
  298:         int32,
  299:         int64,
  300:         int_,
  301:         intc,
  302:         integer,
  303:         intp,
  304:         invert,
  305:         is_busday,
  306:         isclose,
  307:         isdtype,
  308:         isfinite,
  309:         isfortran,
  310:         isinf,
  311:         isnan,
  312:         isnat,
  313:         isscalar,
  314:         issubdtype,
  315:         lcm,
  316:         ldexp,
  317:         left_shift,
  318:         less,
  319:         less_equal,
  320:         lexsort,
  321:         linspace,
  322:         little_endian,
  323:         log,
  324:         log1p,
  325:         log2,
  326:         log10,
  327:         logaddexp,
  328:         logaddexp2,
  329:         logical_and,
  330:         logical_not,
  331:         logical_or,
  332:         logical_xor,
  333:         logspace,
  334:         long,
  335:         longdouble,
  336:         longlong,
  337:         matmul,
  338:         matrix_transpose,
  339:         matvec,
  340:         max,
  341:         maximum,
  342:         may_share_memory,
  343:         mean,
  344:         memmap,
  345:         min,
  346:         min_scalar_type,
  347:         minimum,
  348:         mod,
  349:         modf,
  350:         moveaxis,
  351:         multiply,
  352:         nan,
  353:         ndarray,
  354:         ndim,
  355:         nditer,
  356:         negative,
  357:         nested_iters,
  358:         newaxis,
  359:         nextafter,
  360:         nonzero,
  361:         not_equal,
  362:         number,
  363:         object_,
  364:         ones,
  365:         ones_like,
  366:         outer,
  367:         partition,
  368:         permute_dims,
  369:         pi,
  370:         positive,
  371:         pow,
  372:         power,
  373:         printoptions,
  374:         prod,
  375:         promote_types,
  376:         ptp,
  377:         put,
  378:         putmask,
  379:         rad2deg,
  380:         radians,
  381:         ravel,
  382:         recarray,
  383:         reciprocal,
  384:         record,
  385:         remainder,
  386:         repeat,
  387:         require,
  388:         reshape,
  389:         resize,
  390:         result_type,
  391:         right_shift,
  392:         rint,
  393:         roll,
  394:         rollaxis,
  395:         round,
  396:         sctypeDict,
  397:         searchsorted,
  398:         set_printoptions,
  399:         setbufsize,
  400:         seterr,
  401:         seterrcall,
  402:         shape,
  403:         shares_memory,
  404:         short,
  405:         sign,
  406:         signbit,
  407:         signedinteger,
  408:         sin,
  409:         single,
  410:         sinh,
  411:         size,
  412:         sort,
  413:         spacing,
  414:         sqrt,
  415:         square,
  416:         squeeze,
  417:         stack,
  418:         std,
  419:         str_,
  420:         subtract,
  421:         sum,
  422:         swapaxes,
  423:         take,
  424:         tan,
  425:         tanh,
  426:         tensordot,
  427:         timedelta64,
  428:         trace,
  429:         transpose,
  430:         true_divide,
  431:         trunc,
  432:         typecodes,
  433:         ubyte,
  434:         ufunc,
  435:         uint,
  436:         uint8,
  437:         uint16,
  438:         uint32,
  439:         uint64,
  440:         uintc,
  441:         uintp,
  442:         ulong,
  443:         ulonglong,
  444:         unsignedinteger,
  445:         unstack,
  446:         ushort,
  447:         var,
  448:         vdot,
  449:         vecdot,
  450:         vecmat,
  451:         void,
  452:         vstack,
  453:         where,
  454:         zeros,
  455:         zeros_like,
  456:     )
  457: 
  458:     # NOTE: It's still under discussion whether these aliases
  459:     # should be removed.
  460:     for ta in ["float96", "float128", "complex192", "complex256"]:
  461:         try:
  462:             globals()[ta] = getattr(_core, ta)
  463:         except AttributeError:
  464:             pass
  465:     del ta
  466: 
  467:     from . import lib
  468:     from . import matrixlib as _mat
  469:     from .lib import scimath as emath
  470:     from .lib._arraypad_impl import pad
  471:     from .lib._arraysetops_impl import (
  472:         ediff1d,
  473:         in1d,
  474:         intersect1d,
  475:         isin,
  476:         setdiff1d,
  477:         setxor1d,
  478:         union1d,
  479:         unique,
  480:         unique_all,
  481:         unique_counts,
  482:         unique_inverse,
  483:         unique_values,
  484:     )
  485:     from .lib._function_base_impl import (
  486:         angle,
  487:         append,
  488:         asarray_chkfinite,
  489:         average,
  490:         bartlett,
  491:         bincount,
  492:         blackman,
  493:         copy,
  494:         corrcoef,
  495:         cov,
  496:         delete,
  497:         diff,
  498:         digitize,
  499:         extract,
  500:         flip,
  501:         gradient,
  502:         hamming,
  503:         hanning,
  504:         i0,
  505:         insert,
  506:         interp,
  507:         iterable,
  508:         kaiser,
  509:         median,
  510:         meshgrid,
  511:         percentile,
  512:         piecewise,
  513:         place,
  514:         quantile,
  515:         rot90,
  516:         select,
  517:         sinc,
  518:         sort_complex,
  519:         trapezoid,
  520:         trapz,
  521:         trim_zeros,
  522:         unwrap,
  523:         vectorize,
  524:     )
  525:     from .lib._histograms_impl import histogram, histogram_bin_edges, histogramdd
  526:     from .lib._index_tricks_impl import (
  527:         c_,
  528:         diag_indices,
  529:         diag_indices_from,
  530:         fill_diagonal,
  531:         index_exp,
  532:         ix_,
  533:         mgrid,
  534:         ndenumerate,
  535:         ndindex,
  536:         ogrid,
  537:         r_,
  538:         ravel_multi_index,
  539:         s_,
  540:         unravel_index,
  541:     )
  542:     from .lib._nanfunctions_impl import (
  543:         nanargmax,
  544:         nanargmin,
  545:         nancumprod,
  546:         nancumsum,
  547:         nanmax,
  548:         nanmean,
  549:         nanmedian,
  550:         nanmin,
  551:         nanpercentile,
  552:         nanprod,
  553:         nanquantile,
  554:         nanstd,
  555:         nansum,
  556:         nanvar,
  557:     )
  558:     from .lib._npyio_impl import (
  559:         fromregex,
  560:         genfromtxt,
  561:         load,
  562:         loadtxt,
  563:         packbits,
  564:         save,
  565:         savetxt,
  566:         savez,
  567:         savez_compressed,
  568:         unpackbits,
  569:     )
  570:     from .lib._polynomial_impl import (
  571:         poly,
  572:         poly1d,
  573:         polyadd,
  574:         polyder,
  575:         polydiv,
  576:         polyfit,
  577:         polyint,
  578:         polymul,
  579:         polysub,
  580:         polyval,
  581:         roots,
  582:     )
  583:     from .lib._shape_base_impl import (
  584:         apply_along_axis,
  585:         apply_over_axes,
  586:         array_split,
  587:         column_stack,
  588:         dsplit,
  589:         dstack,
  590:         expand_dims,
  591:         hsplit,
  592:         kron,
  593:         put_along_axis,
  594:         row_stack,
  595:         split,
  596:         take_along_axis,
  597:         tile,
  598:         vsplit,
  599:     )
  600:     from .lib._stride_tricks_impl import (
  601:         broadcast_arrays,
  602:         broadcast_shapes,
  603:         broadcast_to,
  604:     )
  605:     from .lib._twodim_base_impl import (
  606:         diag,
  607:         diagflat,
  608:         eye,
  609:         fliplr,
  610:         flipud,
  611:         histogram2d,
  612:         mask_indices,
  613:         tri,
  614:         tril,
  615:         tril_indices,
  616:         tril_indices_from,
  617:         triu,
  618:         triu_indices,
  619:         triu_indices_from,
  620:         vander,
  621:     )
  622:     from .lib._type_check_impl import (
  623:         common_type,
  624:         imag,
  625:         iscomplex,
  626:         iscomplexobj,
  627:         isreal,
  628:         isrealobj,
  629:         mintypecode,
  630:         nan_to_num,
  631:         real,
  632:         real_if_close,
  633:         typename,
  634:     )
  635:     from .lib._ufunclike_impl import fix, isneginf, isposinf
  636:     from .lib._utils_impl import get_include, info, show_runtime
  637:     from .matrixlib import asmatrix, bmat, matrix
  638: 
  639:     # public submodules are imported lazily, therefore are accessible from
  640:     # __getattr__. Note that `distutils` (deprecated) and `array_api`
  641:     # (experimental label) are not added here, because `from numpy import *`
  642:     # must not raise any warnings - that's too disruptive.
  643:     __numpy_submodules__ = {
  644:         "linalg", "fft", "dtypes", "random", "polynomial", "ma",
  645:         "exceptions", "lib", "ctypeslib", "testing", "typing",
  646:         "f2py", "test", "rec", "char", "core", "strings",
  647:     }
  648: 
  649:     # We build warning messages for former attributes
  650:     _msg = (
  651:         "module 'numpy' has no attribute '{n}'.\n"
  652:         "`np.{n}` was a deprecated alias for the builtin `{n}`. "
  653:         "To avoid this error in existing code, use `{n}` by itself. "
  654:         "Doing this will not modify any behavior and is safe. {extended_msg}\n"
  655:         "The aliases was originally deprecated in NumPy 1.20; for more "
  656:         "details and guidance see the original release note at:\n"
  657:         "    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations")
  658: 
  659:     _specific_msg = (
  660:         "If you specifically wanted the numpy scalar type, use `np.{}` here.")
  661: 
  662:     _int_extended_msg = (
  663:         "When replacing `np.{}`, you may wish to use e.g. `np.int64` "
  664:         "or `np.int32` to specify the precision. If you wish to review "
  665:         "your current use, check the release note link for "
  666:         "additional information.")
  667: 
  668:     _type_info = [
  669:         ("object", ""),  # The NumPy scalar only exists by name.
  670:         ("float", _specific_msg.format("float64")),
  671:         ("complex", _specific_msg.format("complex128")),
  672:         ("str", _specific_msg.format("str_")),
  673:         ("int", _int_extended_msg.format("int"))]
  674: 
  675:     __former_attrs__ = {
  676:          n: _msg.format(n=n, extended_msg=extended_msg)
  677:          for n, extended_msg in _type_info
  678:      }
  679: 
  680:     # Some of these could be defined right away, but most were aliases to
  681:     # the Python objects and only removed in NumPy 1.24.  Defining them should
  682:     # probably wait for NumPy 1.26 or 2.0.
  683:     # When defined, these should possibly not be added to `__all__` to avoid
  684:     # import with `from numpy import *`.
  685:     __future_scalars__ = {"str", "bytes", "object"}
  686: 
  687:     __array_api_version__ = "2024.12"
  688: 
  689:     from ._array_api_info import __array_namespace_info__
  690: 
  691:     # now that numpy core module is imported, can initialize limits
  692:     _core.getlimits._register_known_types()
  693: 
  694:     __all__ = list(
  695:         __numpy_submodules__ |
  696:         set(_core.__all__) |
  697:         set(_mat.__all__) |
  698:         set(lib._histograms_impl.__all__) |
  699:         set(lib._nanfunctions_impl.__all__) |
  700:         set(lib._function_base_impl.__all__) |
  701:         set(lib._twodim_base_impl.__all__) |
  702:         set(lib._shape_base_impl.__all__) |
  703:         set(lib._type_check_impl.__all__) |
  704:         set(lib._arraysetops_impl.__all__) |
  705:         set(lib._ufunclike_impl.__all__) |
  706:         set(lib._arraypad_impl.__all__) |
  707:         set(lib._utils_impl.__all__) |
  708:         set(lib._stride_tricks_impl.__all__) |
  709:         set(lib._polynomial_impl.__all__) |
  710:         set(lib._npyio_impl.__all__) |
  711:         set(lib._index_tricks_impl.__all__) |
  712:         {"emath", "show_config", "__version__", "__array_namespace_info__"}
  713:     )
  714: 
  715:     # Filter out Cython harmless warnings
  716:     warnings.filterwarnings("ignore", message="numpy.dtype size changed")
  717:     warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
  718:     warnings.filterwarnings("ignore", message="numpy.ndarray size changed")
  719: 
  720:     def __getattr__(attr):
  721:         # Warn for expired attributes
  722:         import warnings
  723: 
  724:         if attr == "linalg":
  725:             import numpy.linalg as linalg
  726:             return linalg
  727:         elif attr == "fft":
  728:             import numpy.fft as fft
  729:             return fft
  730:         elif attr == "dtypes":
  731:             import numpy.dtypes as dtypes
  732:             return dtypes
  733:         elif attr == "random":
  734:             import numpy.random as random
  735:             return random
  736:         elif attr == "polynomial":
  737:             import numpy.polynomial as polynomial
  738:             return polynomial
  739:         elif attr == "ma":
  740:             import numpy.ma as ma
  741:             return ma
  742:         elif attr == "ctypeslib":
  743:             import numpy.ctypeslib as ctypeslib
  744:             return ctypeslib
  745:         elif attr == "exceptions":
  746:             import numpy.exceptions as exceptions
  747:             return exceptions
  748:         elif attr == "testing":
  749:             import numpy.testing as testing
  750:             return testing
  751:         elif attr == "matlib":
  752:             import numpy.matlib as matlib
  753:             return matlib
  754:         elif attr == "f2py":
  755:             import numpy.f2py as f2py
  756:             return f2py
  757:         elif attr == "typing":
  758:             import numpy.typing as typing
  759:             return typing
  760:         elif attr == "rec":
  761:             import numpy.rec as rec
  762:             return rec
  763:         elif attr == "char":
  764:             import numpy.char as char
  765:             return char
  766:         elif attr == "array_api":
  767:             raise AttributeError("`numpy.array_api` is not available from "
  768:                                  "numpy 2.0 onwards", name=None)
  769:         elif attr == "core":
  770:             import numpy.core as core
  771:             return core
  772:         elif attr == "strings":
  773:             import numpy.strings as strings
  774:             return strings
  775:         elif attr == "distutils":
  776:             if 'distutils' in __numpy_submodules__:
  777:                 import numpy.distutils as distutils
  778:                 return distutils
  779:             else:
  780:                 raise AttributeError("`numpy.distutils` is not available from "
  781:                                      "Python 3.12 onwards", name=None)
  782: 
  783:         if attr in __future_scalars__:
  784:             # And future warnings for those that will change, but also give
  785:             # the AttributeError
  786:             warnings.warn(
  787:                 f"In the future `np.{attr}` will be defined as the "
  788:                 "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
  789: 
  790:         if attr in __former_attrs__:
  791:             raise AttributeError(__former_attrs__[attr], name=None)
  792: 
  793:         if attr in __expired_attributes__:
  794:             raise AttributeError(
  795:                 f"`np.{attr}` was removed in the NumPy 2.0 release. "
  796:                 f"{__expired_attributes__[attr]}",
  797:                 name=None
  798:             )
  799: 
  800:         if attr == "chararray":
  801:             warnings.warn(
  802:                 "`np.chararray` is deprecated and will be removed from "
  803:                 "the main namespace in the future. Use an array with a string "
  804:                 "or bytes dtype instead.", DeprecationWarning, stacklevel=2)
  805:             import numpy.char as char
  806:             return char.chararray
  807: 
  808:         raise AttributeError(f"module {__name__!r} has no attribute {attr!r}")
  809: 
  810:     def __dir__():
  811:         public_symbols = (
  812:             globals().keys() | __numpy_submodules__
  813:         )
  814:         public_symbols -= {
  815:             "matrixlib", "matlib", "tests", "conftest", "version",
  816:             "distutils", "array_api"
  817:         }
  818:         return list(public_symbols)
  819: 
  820:     # Pytest testing
  821:     from numpy._pytesttester import PytestTester
  822:     test = PytestTester(__name__)
  823:     del PytestTester
  824: 
  825:     def _sanity_check():
  826:         """
  827:         Quick sanity checks for common bugs caused by environment.
  828:         There are some cases e.g. with wrong BLAS ABI that cause wrong
  829:         results under specific runtime conditions that are not necessarily
  830:         achieved during test suite runs, and it is useful to catch those early.
  831: 
  832:         See https://github.com/numpy/numpy/issues/8577 and other
  833:         similar bug reports.
  834: 
  835:         """
  836:         try:
  837:             x = ones(2, dtype=float32)
  838:             if not abs(x.dot(x) - float32(2.0)) < 1e-5:
  839:                 raise AssertionError
  840:         except AssertionError:
  841:             msg = ("The current Numpy installation ({!r}) fails to "
  842:                    "pass simple sanity checks. This can be caused for example "
  843:                    "by incorrect BLAS library being linked in, or by mixing "
  844:                    "package managers (pip, conda, apt, ...). Search closed "
  845:                    "numpy issues for similar problems.")
  846:             raise RuntimeError(msg.format(__file__)) from None
  847: 
  848:     _sanity_check()
  849:     del _sanity_check
  850: 
  851:     def _mac_os_check():
  852:         """
  853:         Quick Sanity check for Mac OS look for accelerate build bugs.
  854:         Testing numpy polyfit calls init_dgelsd(LAPACK)
  855:         """
  856:         try:
  857:             c = array([3., 2., 1.])
  858:             x = linspace(0, 2, 5)
  859:             y = polyval(c, x)
  860:             _ = polyfit(x, y, 2, cov=True)
  861:         except ValueError:
  862:             pass
  863: 
  864:     if sys.platform == "darwin":
  865:         from . import exceptions
  866:         with warnings.catch_warnings(record=True) as w:
  867:             _mac_os_check()
  868:             # Throw runtime error, if the test failed
  869:             # Check for warning and report the error_message
  870:             if len(w) > 0:
  871:                 for _wn in w:
  872:                     if _wn.category is exceptions.RankWarning:
  873:                         # Ignore other warnings, they may not be relevant (see gh-25433)
  874:                         error_message = (
  875:                             f"{_wn.category.__name__}: {_wn.message}"
  876:                         )
  877:                         msg = (
  878:                             "Polyfit sanity test emitted a warning, most likely due "
  879:                             "to using a buggy Accelerate backend."
  880:                             "\nIf you compiled yourself, more information is available at:"  # noqa: E501
  881:                             "\nhttps://numpy.org/devdocs/building/index.html"
  882:                             "\nOtherwise report this to the vendor "
  883:                             f"that provided NumPy.\n\n{error_message}\n")
  884:                         raise RuntimeError(msg)
  885:                 del _wn
  886:             del w
  887:     del _mac_os_check
  888: 
  889:     def hugepage_setup():
  890:         """
  891:         We usually use madvise hugepages support, but on some old kernels it
  892:         is slow and thus better avoided. Specifically kernel version 4.6
  893:         had a bug fix which probably fixed this:
  894:         https://github.com/torvalds/linux/commit/7cf91a98e607c2f935dbcc177d70011e95b8faff
  895:         """
  896:         use_hugepage = os.environ.get("NUMPY_MADVISE_HUGEPAGE", None)
  897:         if sys.platform == "linux" and use_hugepage is None:
  898:             # If there is an issue with parsing the kernel version,
  899:             # set use_hugepage to 0. Usage of LooseVersion will handle
  900:             # the kernel version parsing better, but avoided since it
  901:             # will increase the import time.
  902:             # See: #16679 for related discussion.
  903:             try:
  904:                 use_hugepage = 1
  905:                 kernel_version = os.uname().release.split(".")[:2]
  906:                 kernel_version = tuple(int(v) for v in kernel_version)
  907:                 if kernel_version < (4, 6):
  908:                     use_hugepage = 0
  909:             except ValueError:
  910:                 use_hugepage = 0
  911:         elif use_hugepage is None:
  912:             # This is not Linux, so it should not matter, just enable anyway
  913:             use_hugepage = 1
  914:         else:
  915:             use_hugepage = int(use_hugepage)
  916:         return use_hugepage
  917: 
  918:     # Note that this will currently only make a difference on Linux
  919:     _core.multiarray._set_madvise_hugepage(hugepage_setup())
  920:     del hugepage_setup
  921: 
  922:     # Give a warning if NumPy is reloaded or imported on a sub-interpreter
  923:     # We do this from python, since the C-module may not be reloaded and
  924:     # it is tidier organized.
  925:     _core.multiarray._multiarray_umath._reload_guard()
  926: 
  927:     # TODO: Remove the environment variable entirely now that it is "weak"
  928:     if (os.environ.get("NPY_PROMOTION_STATE", "weak") != "weak"):
  929:         warnings.warn(
  930:             "NPY_PROMOTION_STATE was a temporary feature for NumPy 2.0 "
  931:             "transition and is ignored after NumPy 2.2.",
  932:             UserWarning, stacklevel=2)
  933: 
  934:     # Tell PyInstaller where to find hook-numpy.py
  935:     def _pyinstaller_hooks_dir():
  936:         from pathlib import Path
  937:         return [str(Path(__file__).with_name("_pyinstaller").resolve())]
  938: 
  939: 
  940: # Remove symbols imported for internal use
  941: del os, sys, warnings
