    1: """
    2: Pytest configuration and fixtures for the Numpy test suite.
    3: """
    4: import os
    5: import string
    6: import sys
    7: import tempfile
    8: import warnings
    9: from contextlib import contextmanager
   10: 
   11: import hypothesis
   12: import pytest
   13: 
   14: import numpy
   15: import numpy as np
   16: from numpy._core._multiarray_tests import get_fpu_mode
   17: from numpy._core.tests._natype import get_stringdtype_dtype, pd_NA
   18: from numpy.testing._private.utils import NOGIL_BUILD
   19: 
   20: try:
   21:     from scipy_doctest.conftest import dt_config
   22:     HAVE_SCPDT = True
   23: except ModuleNotFoundError:
   24:     HAVE_SCPDT = False
   25: 
   26: 
   27: _old_fpu_mode = None
   28: _collect_results = {}
   29: 
   30: # Use a known and persistent tmpdir for hypothesis' caches, which
   31: # can be automatically cleared by the OS or user.
   32: hypothesis.configuration.set_hypothesis_home_dir(
   33:     os.path.join(tempfile.gettempdir(), ".hypothesis")
   34: )
   35: 
   36: # We register two custom profiles for Numpy - for details see
   37: # https://hypothesis.readthedocs.io/en/latest/settings.html
   38: # The first is designed for our own CI runs; the latter also
   39: # forces determinism and is designed for use via np.test()
   40: hypothesis.settings.register_profile(
   41:     name="numpy-profile", deadline=None, print_blob=True,
   42: )
   43: hypothesis.settings.register_profile(
   44:     name="np.test() profile",
   45:     deadline=None, print_blob=True, database=None, derandomize=True,
   46:     suppress_health_check=list(hypothesis.HealthCheck),
   47: )
   48: # Note that the default profile is chosen based on the presence
   49: # of pytest.ini, but can be overridden by passing the
   50: # --hypothesis-profile=NAME argument to pytest.
   51: _pytest_ini = os.path.join(os.path.dirname(__file__), "..", "pytest.ini")
   52: hypothesis.settings.load_profile(
   53:     "numpy-profile" if os.path.isfile(_pytest_ini) else "np.test() profile"
   54: )
   55: 
   56: # The experimentalAPI is used in _umath_tests
   57: os.environ["NUMPY_EXPERIMENTAL_DTYPE_API"] = "1"
   58: 
   59: def pytest_configure(config):
   60:     config.addinivalue_line("markers",
   61:         "valgrind_error: Tests that are known to error under valgrind.")
   62:     config.addinivalue_line("markers",
   63:         "leaks_references: Tests that are known to leak references.")
   64:     config.addinivalue_line("markers",
   65:         "slow: Tests that are very slow.")
   66:     config.addinivalue_line("markers",
   67:         "slow_pypy: Tests that are very slow on pypy.")
   68: 
   69: 
   70: def pytest_addoption(parser):
   71:     parser.addoption("--available-memory", action="store", default=None,
   72:                      help=("Set amount of memory available for running the "
   73:                            "test suite. This can result to tests requiring "
   74:                            "especially large amounts of memory to be skipped. "
   75:                            "Equivalent to setting environment variable "
   76:                            "NPY_AVAILABLE_MEM. Default: determined"
   77:                            "automatically."))
   78: 
   79: 
   80: gil_enabled_at_start = True
   81: if NOGIL_BUILD:
   82:     gil_enabled_at_start = sys._is_gil_enabled()
   83: 
   84: 
   85: def pytest_sessionstart(session):
   86:     available_mem = session.config.getoption('available_memory')
   87:     if available_mem is not None:
   88:         os.environ['NPY_AVAILABLE_MEM'] = available_mem
   89: 
   90: 
   91: def pytest_terminal_summary(terminalreporter, exitstatus, config):
   92:     if NOGIL_BUILD and not gil_enabled_at_start and sys._is_gil_enabled():
   93:         tr = terminalreporter
   94:         tr.ensure_newline()
   95:         tr.section("GIL re-enabled", sep="=", red=True, bold=True)
   96:         tr.line("The GIL was re-enabled at runtime during the tests.")
   97:         tr.line("This can happen with no test failures if the RuntimeWarning")
   98:         tr.line("raised by Python when this happens is filtered by a test.")
   99:         tr.line("")
  100:         tr.line("Please ensure all new C modules declare support for running")
  101:         tr.line("without the GIL. Any new tests that intentionally imports ")
  102:         tr.line("code that re-enables the GIL should do so in a subprocess.")
  103:         pytest.exit("GIL re-enabled during tests", returncode=1)
  104: 
  105: # FIXME when yield tests are gone.
  106: @pytest.hookimpl()
  107: def pytest_itemcollected(item):
  108:     """
  109:     Check FPU precision mode was not changed during test collection.
  110: 
  111:     The clumsy way we do it here is mainly necessary because numpy
  112:     still uses yield tests, which can execute code at test collection
  113:     time.
  114:     """
  115:     global _old_fpu_mode
  116: 
  117:     mode = get_fpu_mode()
  118: 
  119:     if _old_fpu_mode is None:
  120:         _old_fpu_mode = mode
  121:     elif mode != _old_fpu_mode:
  122:         _collect_results[item] = (_old_fpu_mode, mode)
  123:         _old_fpu_mode = mode
  124: 
  125: 
  126: @pytest.fixture(scope="function", autouse=True)
  127: def check_fpu_mode(request):
  128:     """
  129:     Check FPU precision mode was not changed during the test.
  130:     """
  131:     old_mode = get_fpu_mode()
  132:     yield
  133:     new_mode = get_fpu_mode()
  134: 
  135:     if old_mode != new_mode:
  136:         raise AssertionError(f"FPU precision mode changed from {old_mode:#x} to "
  137:                              f"{new_mode:#x} during the test")
  138: 
  139:     collect_result = _collect_results.get(request.node)
  140:     if collect_result is not None:
  141:         old_mode, new_mode = collect_result
  142:         raise AssertionError(f"FPU precision mode changed from {old_mode:#x} to "
  143:                              f"{new_mode:#x} when collecting the test")
  144: 
  145: 
  146: @pytest.fixture(autouse=True)
  147: def add_np(doctest_namespace):
  148:     doctest_namespace['np'] = numpy
  149: 
  150: @pytest.fixture(autouse=True)
  151: def env_setup(monkeypatch):
  152:     monkeypatch.setenv('PYTHONHASHSEED', '0')
  153: 
  154: 
  155: if HAVE_SCPDT:
  156: 
  157:     @contextmanager
  158:     def warnings_errors_and_rng(test=None):
  159:         """Filter out the wall of DeprecationWarnings.
  160:         """
  161:         msgs = ["The numpy.linalg.linalg",
  162:                 "The numpy.fft.helper",
  163:                 "dep_util",
  164:                 "pkg_resources",
  165:                 "numpy.core.umath",
  166:                 "msvccompiler",
  167:                 "Deprecated call",
  168:                 "numpy.core",
  169:                 "Importing from numpy.matlib",
  170:                 "This function is deprecated.",    # random_integers
  171:                 "Data type alias 'a'",     # numpy.rec.fromfile
  172:                 "Arrays of 2-dimensional vectors",   # matlib.cross
  173:                 "`in1d` is deprecated", ]
  174:         msg = "|".join(msgs)
  175: 
  176:         msgs_r = [
  177:             "invalid value encountered",
  178:             "divide by zero encountered"
  179:         ]
  180:         msg_r = "|".join(msgs_r)
  181: 
  182:         with warnings.catch_warnings():
  183:             warnings.filterwarnings(
  184:                 'ignore', category=DeprecationWarning, message=msg
  185:             )
  186:             warnings.filterwarnings(
  187:                 'ignore', category=RuntimeWarning, message=msg_r
  188:             )
  189:             yield
  190: 
  191:     # find and check doctests under this context manager
  192:     dt_config.user_context_mgr = warnings_errors_and_rng
  193: 
  194:     # numpy specific tweaks from refguide-check
  195:     dt_config.rndm_markers.add('#uninitialized')
  196:     dt_config.rndm_markers.add('# uninitialized')
  197: 
  198:     # make the checker pick on mismatched dtypes
  199:     dt_config.strict_check = True
  200: 
  201:     import doctest
  202:     dt_config.optionflags = doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS
  203: 
  204:     # recognize the StringDType repr
  205:     dt_config.check_namespace['StringDType'] = numpy.dtypes.StringDType
  206: 
  207:     # temporary skips
  208:     dt_config.skiplist = {
  209:         'numpy.savez',    # unclosed file
  210:         'numpy.matlib.savez',
  211:         'numpy.__array_namespace_info__',
  212:         'numpy.matlib.__array_namespace_info__',
  213:     }
  214: 
  215:     # xfail problematic tutorials
  216:     dt_config.pytest_extra_xfail = {
  217:         'how-to-verify-bug.rst': '',
  218:         'c-info.ufunc-tutorial.rst': '',
  219:         'basics.interoperability.rst': 'needs pandas',
  220:         'basics.dispatch.rst': 'errors out in /testing/overrides.py',
  221:         'basics.subclassing.rst': '.. testcode:: admonitions not understood',
  222:         'misc.rst': 'manipulates warnings',
  223:     }
  224: 
  225:     # ignores are for things fail doctest collection (optionals etc)
  226:     dt_config.pytest_extra_ignore = [
  227:         'numpy/distutils',
  228:         'numpy/_core/cversions.py',
  229:         'numpy/_pyinstaller',
  230:         'numpy/random/_examples',
  231:         'numpy/f2py/_backends/_distutils.py',
  232:     ]
  233: 
  234: 
  235: @pytest.fixture
  236: def random_string_list():
  237:     chars = list(string.ascii_letters + string.digits)
  238:     chars = np.array(chars, dtype="U1")
  239:     ret = np.random.choice(chars, size=100 * 10, replace=True)
  240:     return ret.view("U100")
  241: 
  242: 
  243: @pytest.fixture(params=[True, False])
  244: def coerce(request):
  245:     return request.param
  246: 
  247: 
  248: @pytest.fixture(
  249:     params=["unset", None, pd_NA, np.nan, float("nan"), "__nan__"],
  250:     ids=["unset", "None", "pandas.NA", "np.nan", "float('nan')", "string nan"],
  251: )
  252: def na_object(request):
  253:     return request.param
  254: 
  255: 
  256: @pytest.fixture()
  257: def dtype(na_object, coerce):
  258:     return get_stringdtype_dtype(na_object, coerce)
