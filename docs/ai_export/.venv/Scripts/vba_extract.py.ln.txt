    1: #!D:\Projects\medplatforma\.venv\Scripts\python.exe
    2: 
    3: ##############################################################################
    4: #
    5: # vba_extract - A simple utility to extract a vbaProject.bin binary from an
    6: # Excel 2007+ xlsm file for insertion into an XlsxWriter file.
    7: #
    8: # SPDX-License-Identifier: BSD-2-Clause
    9: # Copyright 2013-2024, John McNamara, jmcnamara@cpan.org
   10: #
   11: import sys
   12: from zipfile import ZipFile
   13: from zipfile import BadZipFile
   14: 
   15: 
   16: def extract_file(xlsm_zip, filename):
   17:     # Extract a single file from an Excel xlsm macro file.
   18:     data = xlsm_zip.read("xl/" + filename)
   19: 
   20:     # Write the data to a local file.
   21:     file = open(filename, "wb")
   22:     file.write(data)
   23:     file.close()
   24: 
   25: 
   26: # The VBA project file and project signature file we want to extract.
   27: vba_filename = "vbaProject.bin"
   28: vba_signature_filename = "vbaProjectSignature.bin"
   29: 
   30: # Get the xlsm file name from the commandline.
   31: if len(sys.argv) > 1:
   32:     xlsm_file = sys.argv[1]
   33: else:
   34:     print(
   35:         "\nUtility to extract a vbaProject.bin binary from an Excel 2007+ "
   36:         "xlsm macro file for insertion into an XlsxWriter file.\n"
   37:         "If the macros are digitally signed, extracts also a vbaProjectSignature.bin "
   38:         "file.\n"
   39:         "\n"
   40:         "See: https://xlsxwriter.readthedocs.io/working_with_macros.html\n"
   41:         "\n"
   42:         "Usage: vba_extract file.xlsm\n"
   43:     )
   44:     exit()
   45: 
   46: try:
   47:     # Open the Excel xlsm file as a zip file.
   48:     xlsm_zip = ZipFile(xlsm_file, "r")
   49: 
   50:     # Read the xl/vbaProject.bin file.
   51:     extract_file(xlsm_zip, vba_filename)
   52:     print("Extracted: %s" % vba_filename)
   53: 
   54:     if "xl/" + vba_signature_filename in xlsm_zip.namelist():
   55:         extract_file(xlsm_zip, vba_signature_filename)
   56:         print("Extracted: %s" % vba_signature_filename)
   57: 
   58: 
   59: except IOError as e:
   60:     print("File error: %s" % str(e))
   61:     exit()
   62: 
   63: except KeyError as e:
   64:     # Usually when there isn't a xl/vbaProject.bin member in the file.
   65:     print("File error: %s" % str(e))
   66:     print("File may not be an Excel xlsm macro file: '%s'" % xlsm_file)
   67:     exit()
   68: 
   69: except BadZipFile as e:
   70:     # Usually if the file is an xls file and not an xlsm file.
   71:     print("File error: %s: '%s'" % (str(e), xlsm_file))
   72:     print("File may not be an Excel xlsm macro file.")
   73:     exit()
   74: 
   75: except Exception as e:
   76:     # Catch any other exceptions.
   77:     print("File error: %s" % str(e))
   78:     exit()
