    1: from pymongo import MongoClient
    2: from datetime import datetime, timedelta
    3: import random
    4: 
    5: client = MongoClient("mongodb+srv://medadmin:medpass123@medplatforma.cnv7fbo.mongodb.net/")
    6: db = client['medplatforma']
    7: 
    8: # РџРѕР»СѓС‡Рё СЃРїРёСЃРѕРє РІСЂР°С‡РµР№ (РёР»Рё РїРѕРґСЃС‚Р°РІСЊ id РІСЂСѓС‡РЅСѓСЋ, РµСЃР»Рё РЅРµС‚Сѓ)
    9: doctors = list(db.doctors.find())
   10: if not doctors:
   11:     # Р’СЂРµРјРµРЅРЅРѕ С„РµР№РєРё, РµСЃР»Рё РЅРµС‚ РІСЂР°С‡РµР№ (Р»СѓС‡С€Рµ РёСЃРїРѕР»СЊР·РѕРІР°С‚СЊ СЂРµР°Р»СЊРЅС‹Рµ _id)
   12:     doctors = [{"_id": "1", "full_name": "Р”-СЂ РРІР°РЅРѕРІ"}, {"_id": "2", "full_name": "Р”-СЂ РџРµС‚СЂРѕРІ"}]
   13: 
   14: def pick_doctor():
   15:     doc = random.choice(doctors)
   16:     return str(doc['_id'])
   17: 
   18: tasks = [
   19:     {
   20:         "title": "РЎРѕРіР»Р°СЃРѕРІР°С‚СЊ РїР»Р°РЅ Р»РµС‡РµРЅРёСЏ",
   21:         "description": "РћР±СЃСѓРґРёС‚СЊ РІР°СЂРёР°РЅС‚С‹ Р»РµС‡РµРЅРёСЏ СЃ РїР°С†РёРµРЅС‚РѕРј РљРѕР·Р»РѕРІР° Рћ.",
   22:         "assigned_to": pick_doctor(),
   23:         "due_date": (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%dT15:00"),
   24:         "status": "active",
   25:         "priority": "high",
   26:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   27:     },
   28:     {
   29:         "title": "Р—Р°РїРѕР»РЅРёС‚СЊ РєР°СЂС‚Сѓ РїР°С†РёРµРЅС‚Р°",
   30:         "description": "Р”РѕР±Р°РІРёС‚СЊ РІСЃРµ РЅРµРґРѕСЃС‚Р°СЋС‰РёРµ РґРѕРєСѓРјРµРЅС‚С‹ РїРѕ РЎРёРґРѕСЂРѕРІСѓ Рђ.",
   31:         "assigned_to": pick_doctor(),
   32:         "due_date": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%dT11:00"),
   33:         "status": "active",
   34:         "priority": "normal",
   35:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   36:     },
   37:     {
   38:         "title": "РџСЂРѕРІРµСЃС‚Рё СЂРµРЅС‚РіРµРЅРѕСЃРЅРёРјРѕРє",
   39:         "description": "Р РµРЅС‚РіРµРЅ РєР°Р±РёРЅРµС‚: РїР°РЅРѕСЂР°РјРЅС‹Р№ СЃРЅРёРјРѕРє РґР»СЏ РџРµС‚СЂРѕРІР° Р.",
   40:         "assigned_to": pick_doctor(),
   41:         "due_date": (datetime.now() - timedelta(hours=2)).strftime("%Y-%m-%dT10:00"),
   42:         "status": "overdue",
   43:         "priority": "normal",
   44:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   45:     },
   46:     {
   47:         "title": "РќР°Р·РЅР°С‡РёС‚СЊ РїРѕРІС‚РѕСЂРЅС‹Р№ РїСЂРёС‘Рј",
   48:         "description": "РЎРІСЏР·Р°С‚СЊСЃСЏ СЃ РїР°С†РёРµРЅС‚РѕРј Р¤С‘РґРѕСЂРѕРІРѕР№ Рў. РґР»СЏ Р·Р°РїРёСЃРё.",
   49:         "assigned_to": pick_doctor(),
   50:         "due_date": (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%dT13:00"),
   51:         "status": "active",
   52:         "priority": "high",
   53:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   54:     },
   55:     {
   56:         "title": "РџСЂРѕРІРµСЂРёС‚СЊ РѕРїР»Р°С‚Сѓ РїР°С†РёРµРЅС‚Р°",
   57:         "description": "РљР°СЃСЃРёСЂ: РїРѕРґС‚РІРµСЂРґРёС‚СЊ РїРѕСЃС‚СѓРїР»РµРЅРёРµ РѕРїР»Р°С‚С‹ РѕС‚ РЎРјРёСЂРЅРѕРІРѕР№ Р›.",
   58:         "assigned_to": pick_doctor(),
   59:         "due_date": (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%dT18:00"),
   60:         "status": "done",
   61:         "priority": "normal",
   62:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   63:     },
   64:     {
   65:         "title": "РЎРѕР±СЂР°С‚СЊ РґРѕРєСѓРјРµРЅС‚С‹ РґР»СЏ Р—РўР›",
   66:         "description": "РџРµСЂРµРґР°С‚СЊ РІСЃРµ РґРѕРєСѓРјРµРЅС‚С‹ РїРѕ РљРѕР·Р»РѕРІРѕР№ Рћ. РІ Р»Р°Р±РѕСЂР°С‚РѕСЂРёСЋ.",
   67:         "assigned_to": pick_doctor(),
   68:         "due_date": (datetime.now() + timedelta(days=4)).strftime("%Y-%m-%dT16:00"),
   69:         "status": "active",
   70:         "priority": "low",
   71:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   72:     },
   73:     {
   74:         "title": "РЎРѕР·РІРѕРЅ СЃ РїР°СЂС‚РЅС‘СЂСЃРєРѕР№ РєР»РёРЅРёРєРѕР№",
   75:         "description": "РћР±СЃСѓРґРёС‚СЊ СѓСЃР»РѕРІРёСЏ СЃРѕС‚СЂСѓРґРЅРёС‡РµСЃС‚РІР° СЃ Dr. Smile.",
   76:         "assigned_to": pick_doctor(),
   77:         "due_date": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%dT17:00"),
   78:         "status": "active",
   79:         "priority": "normal",
   80:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   81:     },
   82:     {
   83:         "title": "РџСЂРѕРІРµСЃС‚Рё РІРЅСѓС‚СЂРµРЅРЅРёР№ Р°СѓРґРёС‚",
   84:         "description": "РџСЂРѕРІРµСЂРёС‚СЊ Р·Р°РїРѕР»РЅРµРЅРёРµ РєР°СЂС‚ Р·Р° РёСЋРЅСЊ.",
   85:         "assigned_to": pick_doctor(),
   86:         "due_date": (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%dT14:00"),
   87:         "status": "done",
   88:         "priority": "high",
   89:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   90:     },
   91:     {
   92:         "title": "РћС‚РїСЂР°РІРёС‚СЊ РѕС‚С‡С‘С‚ РІ Р±СѓС…РіР°Р»С‚РµСЂРёСЋ",
   93:         "description": "Р­РєСЃРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ С„РёРЅ.РѕС‚С‡С‘С‚ Р·Р° РЅРµРґРµР»СЋ.",
   94:         "assigned_to": pick_doctor(),
   95:         "due_date": (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%dT10:30"),
   96:         "status": "active",
   97:         "priority": "normal",
   98:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
   99:     },
  100:     {
  101:         "title": "РџСЂРѕРІРµСЃС‚Рё РёРЅРІРµРЅС‚Р°СЂРёР·Р°С†РёСЋ СЃРєР»Р°РґР°",
  102:         "description": "РЎРѕСЃС‚Р°РІРёС‚СЊ СЃРїРёСЃРѕРє СЂР°СЃС…РѕРґРЅС‹С… РјР°С‚РµСЂРёР°Р»РѕРІ.",
  103:         "assigned_to": pick_doctor(),
  104:         "due_date": (datetime.now() + timedelta(days=5)).strftime("%Y-%m-%dT12:00"),
  105:         "status": "active",
  106:         "priority": "low",
  107:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M")
  108:     }
  109: ]
  110: 
  111: db.tasks.delete_many({})  # РћС‡РёСЃС‚РёС‚СЊ РєРѕР»Р»РµРєС†РёСЋ, РµСЃР»Рё РЅСѓР¶РЅРѕ
  112: db.tasks.insert_many(tasks)
  113: 
  114: print("вњ… Р”РµРјРѕ-Р·Р°РґР°С‡Рё РґР»СЏ РїР»Р°С‚С„РѕСЂРјС‹ СѓСЃРїРµС€РЅРѕ РґРѕР±Р°РІР»РµРЅС‹!")
