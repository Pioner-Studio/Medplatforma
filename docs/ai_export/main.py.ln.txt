    1: import os
    2: import calendar
    3: import csv
    4: import io
    5: from collections import OrderedDict
    6: from datetime import datetime, timedelta
    7: from pathlib import Path
    8: 
    9: # --- third-party
   10: from bson import ObjectId  # РћРЎРўРђР’Р›РЇР•Рњ С‚РѕР»СЊРєРѕ Р­РўРћРў РёРјРїРѕСЂС‚ ObjectId (Р±РµР· РґСѓР±Р»СЏ РёР· bson.objectid)
   11: from flask import (
   12:     Flask, Response, flash, jsonify, redirect,
   13:     render_template, request, send_file, session, url_for
   14: )
   15: from markupsafe import Markup
   16: from pymongo import MongoClient, ReturnDocument
   17: import urllib
   18: from dotenv import load_dotenv
   19: 
   20: # --- optional (markdown РјРѕР¶РµС‚ РѕС‚СЃСѓС‚СЃС‚РІРѕРІР°С‚СЊ)
   21: try:
   22:     import pandas as pd  # РґР»СЏ СЌРєСЃРїРѕСЂС‚РѕРІ/РѕС‚С‡С‘С‚РѕРІ
   23: except Exception:
   24:     pd = None
   25: 
   26: try:
   27:     import markdown  # pip install markdown
   28: except Exception:
   29:     markdown = None
   30: 
   31: # --- helpers (РєР°РЅРѕРЅРёС‡РЅС‹Рµ)
   32: def oid(s):
   33:     """Р‘РµР·РѕРїР°СЃРЅРѕ РїСЂРµРѕР±СЂР°Р·СѓРµС‚ СЃС‚СЂРѕРєСѓ РІ ObjectId РёР»Рё РІРѕР·РІСЂР°С‰Р°РµС‚ None."""
   34:     try:
   35:         return ObjectId(s) if s else None
   36:     except Exception:
   37:         return None
   38: 
   39: def iso_now(dt=None):
   40:     """YYYY-MM-DDTHH:MM (Р»РѕРєР°Р»СЊРЅРѕРµ РІСЂРµРјСЏ)."""
   41:     return (dt or datetime.now()).strftime("%Y-%m-%dT%H:%M")
   42: 
   43: def write_log(action, comment="", obj="", extra=None):
   44:     """Р›С‘РіРєРѕРµ Р¶СѓСЂРЅР°Р»РёСЂРѕРІР°РЅРёРµ РґРµР№СЃС‚РІРёР№ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ."""
   45:     log = {
   46:         "datetime": datetime.now().strftime("%Y-%m-%d %H:%M"),
   47:         "user": session.get("user_name", "Р“РѕСЃС‚СЊ"),
   48:         "role": session.get("user_role", ""),
   49:         "avatar_url": session.get("avatar_url", "/static/avatars/demo-user.png"),
   50:         "ip": request.remote_addr,
   51:         "action": action,
   52:         "object": obj,
   53:         "comment": comment,
   54:     }
   55:     if extra and isinstance(extra, dict):
   56:         log.update(extra)
   57:     db.logs.insert_one(log)
   58: 
   59: # --- Flask app + РєРѕРЅС„РёРі РёР· .env
   60: load_dotenv()  # Р·Р°РіСЂСѓР¶Р°РµРј config.env
   61: 
   62: app = Flask(__name__)
   63: app.secret_key = os.getenv("SECRET_KEY", "dev-secret-change-me")
   64: 
   65: MONGO_URI = os.getenv("MONGO_URI")
   66: MONGO_DB  = os.getenv("MONGO_DB",  "medplatforma")
   67: 
   68: password = urllib.parse.quote_plus("medpass123")  # РµСЃР»Рё РїР°СЂРѕР»СЊ СЃ РѕСЃРѕР±С‹РјРё СЃРёРјРІРѕР»Р°РјРё
   69: uri = "mongodb+srv://medadmin:Med12345!@medplatforma.cnv7fbo.mongodb.net/medplatforma?retryWrites=true&w=majority"
   70: client = MongoClient(uri)
   71: db = client["medplatforma"]
   72: 
   73: def parse_iso(dt_str):
   74:     # FullCalendar С€Р»РµС‚ ISO, РёРЅРѕРіРґР° Р±РµР· РјРёР»Р»РёСЃРµРєСѓРЅРґ
   75:     # РџСЂРёРјРµСЂ: '2025-08-10T00:00:00Z' РёР»Рё '2025-08-10'
   76:     if not dt_str:
   77:         return None
   78:     try:
   79:         # РІР°СЂРёР°РЅС‚С‹ СЃ 'Z'
   80:         if dt_str.endswith("Z"):
   81:             return datetime.fromisoformat(dt_str.replace("Z", "+00:00"))
   82:         return datetime.fromisoformat(dt_str)
   83:     except Exception:
   84:         # РїРѕСЃР»РµРґРЅРёР№ С€Р°РЅСЃ
   85:         return (
   86:             datetime.strptime(dt_str[:19], "%Y-%m-%dT%H:%M:%S")
   87:             if "T" in dt_str
   88:             else datetime.strptime(dt_str, "%Y-%m-%d")
   89:         )
   90: 
   91: 
   92: def to_dt(s):
   93:     """РџР°СЂСЃРёС‚ 'YYYY-MM-DDTHH:MM' РёР»Рё datetime -> datetime | None"""
   94:     if isinstance(s, datetime):
   95:         return s
   96:     if not s:
   97:         return None
   98:     try:
   99:         # РґРѕРїСѓСЃРєР°РµРј РѕР±Рµ С„РѕСЂРјС‹: '2025-08-14T17:05' Рё '2025-08-14 17:05'
  100:         s = s.replace(" ", "T")
  101:         return datetime.strptime(s[:16], "%Y-%m-%dT%H:%M")
  102:     except Exception:
  103:         return None
  104: 
  105: 
  106: def add_minutes(dt, mins):
  107:     return dt + timedelta(minutes=int(mins))
  108: 
  109: 
  110: def parse_local_dt(s: str) -> datetime | None:
  111:     """РџСЂРёРЅРёРјР°РµС‚ 'YYYY-MM-DDTHH:MM' РёР»Рё 'YYYY-MM-DD HH:MM', РІРѕР·РІСЂР°С‰Р°РµС‚ datetime (naive)."""
  112:     if not s:
  113:         return None
  114:     s = s.strip()
  115:     try:
  116:         if "T" in s:
  117:             return datetime.strptime(s[:16], "%Y-%m-%dT%H:%M")
  118:         return datetime.strptime(s[:16], "%Y-%m-%d %H:%M")
  119:     except Exception:
  120:         return None
  121: 
  122: 
  123: def add_minutes(dt: datetime, minutes: int) -> datetime:
  124:     return dt + timedelta(minutes=int(minutes or 0))
  125: 
  126: 
  127: def minutes_until(dt, now=None) -> int | None:
  128:     if not dt:
  129:         return None
  130:     now = now or datetime.now()
  131:     return int((dt - now).total_seconds() // 60)
  132: 
  133: 
  134: def calc_room_status_now(room_doc, now=None):
  135:     """'available' | 'occupied' | 'maintenance' РЅР° С‚РµРєСѓС‰РёР№ РјРѕРјРµРЅС‚."""
  136:     if room_doc.get("status") == "maintenance":
  137:         return "maintenance"
  138:     now = now or datetime.now()
  139:     busy_now = db.appointments.find_one(
  140:         {"room_id": room_doc["_id"], "start": {"$lte": now}, "end": {"$gt": now}}
  141:     )
  142:     return "occupied" if busy_now else "available"
  143: 
  144: 
  145: def get_next_event_for_room(room_id, now=None):
  146:     """Р‘Р»РёР¶Р°Р№С€РёР№ Р±СѓРґСѓС‰РёР№ РїСЂРёС‘Рј РїРѕ room_id (>= now) РёР»Рё None."""
  147:     now = now or datetime.now()
  148:     cur = (
  149:         db.appointments.find({"room_id": room_id, "start": {"$gte": now}}).sort("start", 1).limit(1)
  150:     )
  151:     for a in cur:
  152:         return a
  153:     return None
  154: 
  155: 
  156: def is_now_between(start_dt, end_dt, now=None) -> bool:
  157:     now = now or datetime.now()
  158:     return bool(start_dt and end_dt and start_dt <= now < end_dt)
  159: 
  160: 
  161: def fmt_hm(dt) -> str:
  162:     if not dt:
  163:         return ""
  164:     if isinstance(dt, str):
  165:         dt = to_dt(dt)
  166:     return dt.strftime("%H:%M") if dt else ""
  167: 
  168: def to_minutes(t: str) -> int:
  169:     h, m = map(int, t.split(":"))
  170:     return h * 60 + m
  171: 
  172: 
  173: def from_minutes(x: int) -> str:
  174:     h = x // 60
  175:     m = x % 60
  176:     return f"{h:02d}:{m:02d}"
  177: 
  178: 
  179: def clinic_hours(date_dt):
  180:     # СЂР°Р±РѕС‡РёРµ С‡Р°СЃС‹ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ (РјРѕР¶РЅРѕ РІС‹РЅРµСЃС‚Рё РІ РЅР°СЃС‚СЂРѕР№РєРё)
  181:     return "08:00", "20:00"
  182: 
  183: 
  184: def recalc_room_status(room_id):
  185:     """РџРµСЂРµcС‡РёС‚Р°РµС‚ СЃС‚Р°С‚СѓСЃ РєР°Р±РёРЅРµС‚Р° РЅР° С‚РµРєСѓС‰РёР№ РјРѕРјРµРЅС‚ РІСЂРµРјРµРЅРё Рё СЃРѕС…СЂР°РЅРёС‚ РІ rooms.status.
  186:     РџСЂР°РІРёР»Рѕ: РµСЃР»Рё РµСЃС‚СЊ РїСЂРёС‘Рј, РїРµСЂРµСЃРµРєР°СЋС‰РёР№ now в†’ occupied; РёРЅР°С‡Рµ available.
  187:     (maintenance РёРјРµРµС‚ РїСЂРёРѕСЂРёС‚РµС‚ Рё РЅРµ Р·Р°С‚РёСЂР°РµС‚СЃСЏ.)"""
  188:     if not room_id:
  189:         return
  190:     room = db.rooms.find_one({"_id": ObjectId(room_id)})
  191:     if not room:
  192:         return
  193:     if room.get("status") == "maintenance":
  194:         # РѕР±СЃР»СѓР¶РёРІР°РЅРёРµ РІСЂСѓС‡РЅСѓСЋ РІС‹СЃС‚Р°РІР»СЏСЋС‚ вЂ” РЅРµ С‚СЂРѕРіР°РµРј
  195:         return
  196:     now = datetime.now()
  197:     busy = db.appointments.find_one(
  198:         {"room_id": ObjectId(room_id), "start": {"$lte": now}, "end": {"$gt": now}}
  199:     )
  200:     new_status = "occupied" if busy else "available"
  201:     db.rooms.update_one(
  202:         {"_id": ObjectId(room_id)},
  203:         {"$set": {"status": new_status, "updated_at": datetime.utcnow()}},
  204:     )
  205: 
  206: def s(val):  # Р±РµР·РѕРїР°СЃРЅР°СЏ СЃС‚СЂРѕРєР°
  207:     return (val or "").strip()
  208: 
  209: 
  210: def parse_date_yyyy_mm_dd(val):
  211:     """РџСЂРёРЅРёРјР°РµРј 'YYYY-MM-DD' -> РІРѕР·РІСЂР°С‰Р°РµРј С‚Сѓ Р¶Рµ СЃС‚СЂРѕРєСѓ (С…СЂР°РЅРёРј СЃС‚СЂРѕРєРѕР№)"""
  212:     v = s(val)
  213:     if not v:
  214:         return ""
  215:     # Р»С‘РіРєР°СЏ РІР°Р»РёРґР°С†РёСЏ
  216:     try:
  217:         datetime.strptime(v, "%Y-%m-%d")
  218:         return v
  219:     except Exception:
  220:         return ""
  221: 
  222: 
  223: def next_seq(name: str) -> int:
  224:     """Р“Р»РѕР±Р°Р»СЊРЅС‹Р№ РёРЅРєСЂРµРјРµРЅС‚ РІ MongoDB (РєРѕР»Р»РµРєС†РёСЏ counters)."""
  225:     doc = db.counters.find_one_and_update(
  226:         {"_id": name}, {"$inc": {"seq": 1}}, upsert=True, return_document=ReturnDocument.AFTER
  227:     )
  228:     return int(doc.get("seq", 1))
  229: 
  230: 
  231: def make_card_no() -> str:
  232:     """Р¤РѕСЂРјРёСЂСѓРµРј РЅРѕРјРµСЂ РєР°СЂС‚РѕС‡РєРё РІРёРґР° CT-000123."""
  233:     n = next_seq("patient_card_no")
  234:     return f"CT-{n:06d}"
  235: 
  236: def main():
  237:     parser = argparse.ArgumentParser(description="ClubStom docs/zip generator")
  238:     parser.add_argument("--zip", action="store_true", help="СЃРґРµР»Р°С‚СЊ Р°СЂС…РёРІ РїСЂРѕРµРєС‚Р° РІ /exports")
  239:     parser.add_argument("--note", type=str, default="", help="Р·Р°РјРµС‚РєР°/РєРѕРјРјРµРЅС‚Р°СЂРёР№")
  240:     parser.add_argument("--lint", action="store_true", help="РїСЂРѕРІРµСЂРёС‚СЊ РґСѓР±Р»Рё Рё РІС‹РІРµСЃС‚Рё РѕС‚С‡С‘С‚")
  241:     args = parser.parse_args()
  242: 
  243:     app, err = _load_flask_app()
  244:     if err:
  245:         (DOCS / "ROUTES.md").write_text(
  246:             "# ROUTES\n\nРќРµ СѓРґР°Р»РѕСЃСЊ РёРјРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ РїСЂРёР»РѕР¶РµРЅРёРµ:\n\n```\n" + err + "\n```\n",
  247:             encoding="utf-8",
  248:         )
  249:         print("[WARN] РћС€РёР±РєР° РёРјРїРѕСЂС‚Р° app. РџРѕРґСЂРѕР±РЅРѕСЃС‚Рё РІ docs/ROUTES.md")
  250:     else:
  251:         routes_md = _dump_routes_md(app)
  252:         (DOCS / "ROUTES.md").write_text(routes_md, encoding="utf-8")
  253:         print("[OK] docs/ROUTES.md РѕР±РЅРѕРІР»С‘РЅ")
  254: 
  255:         if args.lint:
  256:             problems, count = _lint_project(app)
  257:             report = "# LINT REPORT\n\n"
  258:             if count == 0:
  259:                 report += "РџСЂРѕР±Р»РµРј РЅРµ РЅР°Р№РґРµРЅРѕ вњ…\n"
  260:             else:
  261:                 report += "\n".join(f"- {p}" for p in problems) + "\n"
  262:             (DOCS / "LINT.md").write_text(report, encoding="utf-8")
  263:             print(f"[OK] docs/LINT.md СЃРѕР·РґР°РЅ ({count} РїСЂРѕР±Р»РµРј)")
  264: 
  265: # --- Р±С‹СЃС‚СЂР°СЏ healthвЂ‘РїСЂРѕРІРµСЂРєР° (СЃРјРѕРє-С‚РµСЃС‚)
  266: @app.route("/healthz")
  267: def healthz():
  268:     try:
  269:         client.admin.command("ping")
  270:         return jsonify({"ok": True, "db": MONGO_DB})
  271:     except Exception as e:
  272:         return jsonify({"ok": False, "error": str(e)}), 500
  273: 
  274: @app.route("/roadmap")
  275: def roadmap_view():
  276:     md_path = Path(app.root_path) / "roadmap_clubstom.md"
  277:     if not md_path.exists():
  278:         return render_template("roadmap_missing.html"), 404
  279: 
  280:     text = md_path.read_text(encoding="utf-8")
  281:     if markdown:
  282:         html = markdown.markdown(text, extensions=["tables", "fenced_code", "toc"])
  283:     else:
  284:         # Р¤РѕР»Р±СЌРє: РїРѕРєР°Р·С‹РІР°РµРј РєР°Рє pre, РµСЃР»Рё markdown РЅРµ СѓСЃС‚Р°РЅРѕРІР»РµРЅ
  285:         html = f"<pre style='white-space:pre-wrap'>{text}</pre>"
  286: 
  287:     return render_template("roadmap.html", content=Markup(html))
  288: 
  289: 
  290: @app.route("/api/free_slots", methods=["POST"])
  291: def api_free_slots():
  292:     """
  293:     Р’С…РѕРґ: {doctor_id, room_name, date: 'YYYY-MM-DD', duration_min: 30}
  294:     Р’С‹С…РѕРґ: ["09:00","09:30",...]
  295:     Р›РѕРіРёРєР°: Р±РµСЂС‘Рј РІСЃРµ РїСЂРёС‘РјС‹ РІСЂР°С‡Р° Р/РР›Р РєР°Р±РёРЅРµС‚Р° РЅР° РґР°С‚Сѓ, РІС‹С‡РёС‚Р°РµРј РёР· СЂР°Р±РѕС‡РµРіРѕ РѕРєРЅР°.
  296:     """
  297:     data = request.get_json(force=True, silent=True) or {}
  298:     doctor_id = data.get("doctor_id") or ""
  299:     room_name = data.get("room_name") or ""
  300:     date_s = data.get("date") or ""
  301:     duration = int(data.get("duration_min") or 30)
  302:     if not doctor_id or not date_s:
  303:         return jsonify({"ok": False, "error": "bad_params"}), 400
  304: 
  305:     try:
  306:         day = datetime.strptime(date_s, "%Y-%m-%d").date()
  307:     except Exception:
  308:         return jsonify({"ok": False, "error": "bad_date"}), 400
  309: 
  310:     # РіСЂР°РЅРёС†С‹ РґРЅСЏ
  311:     start_day = datetime.combine(day, datetime.min.time())
  312:     end_day = start_day + timedelta(days=1)
  313: 
  314:     # РјР°РїРїРёРј РєР°Р±РёРЅРµС‚ РїРѕ РёРјРµРЅРё РІ _id (РµСЃР»Рё РїРµСЂРµРґР°РЅ)
  315:     room = db.rooms.find_one({"name": room_name}, {"_id": 1}) if room_name else None
  316:     room_id = room["_id"] if room else None
  317: 
  318:     # СЃРѕР±РёСЂР°РµРј Р·Р°РЅСЏС‚РѕСЃС‚СЊ (РІСЂР°С‡ + РїРѕ РІРѕР·РјРѕР¶РЅРѕСЃС‚Рё РєР°Р±РёРЅРµС‚)
  319:     match = {"start": {"$lt": end_day}, "end": {"$gt": start_day}}
  320:     try:
  321:         match["doctor_id"] = ObjectId(doctor_id)
  322:     except Exception:
  323:         match["doctor_id"] = doctor_id  # РІРґСЂСѓРі СѓР¶Рµ СЃС‚СЂРѕРєРѕР№
  324:     if room_id:
  325:         match["room_id"] = room_id
  326: 
  327:     busy = []
  328:     for a in db.appointments.find(match, {"start": 1, "end": 1}).sort("start", 1):
  329:         s = to_dt(a["start"])
  330:         e = to_dt(a["end"])
  331:         if not (s and e):
  332:             continue
  333:         if s.date() != day:
  334:             s = datetime.combine(day, datetime.min.time())
  335:         if e.date() != day:
  336:             e = datetime.combine(day, datetime.max.time())
  337:         busy.append((s, e))
  338: 
  339:     # СЂР°Р±РѕС‡РµРµ РѕРєРЅРѕ РєР»РёРЅРёРєРё (РјРѕР¶РЅРѕ Р·Р°РјРµРЅРёС‚СЊ РЅР° СЂР°СЃРїРёСЃР°РЅРёРµ РІСЂР°С‡Р°)
  340:     wh_start_s, wh_end_s = clinic_hours(day)
  341:     wh_start = datetime.combine(day, datetime.strptime(wh_start_s, "%H:%M").time())
  342:     wh_end = datetime.combine(day, datetime.strptime(wh_end_s, "%H:%M").time())
  343: 
  344:     # С€Р°Рі 5 РјРёРЅСѓС‚, РІС‹РґР°С‘Рј СЃС‚Р°СЂС‚С‹, РєРѕС‚РѕСЂС‹Рµ РЅРµ РїРµСЂРµСЃРµРєР°СЋС‚СЃСЏ СЃ busy
  345:     step = 5
  346:     free = []
  347:     t = wh_start
  348:     delta = timedelta(minutes=duration)
  349:     while t + delta <= wh_end:
  350:         slot_ok = True
  351:         for s, e in busy:
  352:             if (t < e) and (t + delta > s):
  353:                 slot_ok = False
  354:                 break
  355:         if slot_ok:
  356:             free.append(t.strftime("%H:%M"))
  357:         t += timedelta(minutes=step)
  358: 
  359:     return jsonify({"ok": True, "slots": free})
  360: 
  361: 
  362: # ======= РђР’РўРћР РР—РђР¦РРЇ =======
  363: @app.route("/login", methods=["GET", "POST"])
  364: def login():
  365:     if request.method == "POST":
  366:         password = request.form.get("password", "")
  367:         if password == "demo":
  368:             session["user_id"] = "demo"
  369:             session["user_role"] = "admin"
  370:             session["user_name"] = "Р”РµРјРѕ РџРѕР»СЊР·РѕРІР°С‚РµР»СЊ"
  371:             session["avatar_url"] = "/static/avatars/demo-user.png"
  372:             return redirect(url_for("calendar_view"))
  373:         else:
  374:             flash("РќРµРІРµСЂРЅС‹Р№ РїР°СЂРѕР»СЊ! Р’РІРµРґРёС‚Рµ 'demo'", "danger")
  375:     return render_template("login.html")
  376: 
  377: 
  378: @app.route("/logout")
  379: def logout():
  380:     write_log("logout", comment="Р’С‹С…РѕРґ РёР· СЃРёСЃС‚РµРјС‹", obj="Р’С‹С…РѕРґ")
  381:     session.clear()
  382:     return redirect(url_for("login"))
  383: 
  384: 
  385: # --- РњР°СЂС€СЂСѓС‚: Р“Р»Р°РІРЅС‹Р№ РєР°Р»РµРЅРґР°СЂСЊ ---
  386: @app.route("/")
  387: def home():
  388:     return redirect(url_for("calendar_view"))
  389: 
  390: 
  391: @app.route("/calendar")
  392: def calendar_view():
  393:     if "user_id" not in session:
  394:         return redirect(url_for("login"))
  395: 
  396:     doctors = list(db.doctors.find())
  397:     patients = list(db.patients.find())
  398: 
  399:     rooms = list(db.rooms.find({}, {"name": 1, "status": 1}).sort("name", 1))
  400:     cabinets = [r["name"] for r in rooms]
  401: 
  402:     now = datetime.now()
  403: 
  404:     # РЎС‡РёС‚Р°РµРј СЃС‚Р°С‚СѓСЃ "РЅР° СЃРµР№С‡Р°СЃ" + Р±Р»РёР¶Р°Р№С€РёР№ РїСЂРёС‘Рј (РµСЃР»Рё СЃРІРѕР±РѕРґРµРЅ)
  405:     room_info = {}
  406:     for r in rooms:
  407:         state = calc_room_status_now(r, now)  # 'available'|'occupied'|'maintenance'
  408:         text = (
  409:             "РћР±СЃР»СѓР¶РёРІР°РЅРёРµ"
  410:             if state == "maintenance"
  411:             else ("Р—Р°РЅСЏС‚" if state == "occupied" else "РЎРІРѕР±РѕРґРµРЅ")
  412:         )
  413:         color = (
  414:             "#d97706" if state == "maintenance" else ("#cc0000" if state == "occupied" else "green")
  415:         )
  416: 
  417:         next_info = None
  418:         if state == "available":
  419:             a = get_next_event_for_room(r["_id"], now)
  420:             if a:
  421:                 sdt = a.get("start")
  422:                 in_min = minutes_until(sdt, now)
  423:                 srv = (
  424:                     db.services.find_one({"_id": a.get("service_id")}, {"name": 1})
  425:                     if a.get("service_id")
  426:                     else None
  427:                 )
  428:                 pat = (
  429:                     db.patients.find_one({"_id": a.get("patient_id")}, {"full_name": 1})
  430:                     if a.get("patient_id")
  431:                     else None
  432:                 )
  433:                 next_info = {
  434:                     "start": sdt.strftime("%Y-%m-%dT%H:%M") if isinstance(sdt, datetime) else "",
  435:                     "service": (srv or {}).get("name", ""),
  436:                     "patient": (pat or {}).get("full_name", ""),
  437:                     "in_minutes": in_min,
  438:                 }
  439: 
  440:         room_info[r["name"]] = {"state": state, "text": text, "color": color, "next": next_info}
  441: 
  442:     total_rooms = len(cabinets)
  443:     free_rooms = sum(1 for nfo in room_info.values() if nfo["state"] == "available")
  444: 
  445:     return render_template(
  446:         "calendar.html",
  447:         metrics={"total_rooms": total_rooms, "free_rooms": free_rooms},
  448:         room_info=room_info,
  449:         cabinets=cabinets,
  450:         doctors=doctors,
  451:         patients=patients,
  452:     )
  453: 
  454: 
  455: @app.route("/api/rooms/status_now")
  456: def api_rooms_status_now():
  457:     now = datetime.now()
  458:     rooms = list(db.rooms.find({}, {"name": 1, "status": 1}))
  459:     result = {}
  460:     for r in rooms:
  461:         state = calc_room_status_now(r, now)
  462:         text = (
  463:             "РћР±СЃР»СѓР¶РёРІР°РЅРёРµ"
  464:             if state == "maintenance"
  465:             else ("Р—Р°РЅСЏС‚" if state == "occupied" else "РЎРІРѕР±РѕРґРµРЅ")
  466:         )
  467:         color = (
  468:             "#d97706" if state == "maintenance" else ("#cc0000" if state == "occupied" else "green")
  469:         )
  470: 
  471:         next_info = None
  472:         if state == "available":
  473:             a = get_next_event_for_room(r["_id"], now)
  474:             if a:
  475:                 sdt = a.get("start")
  476:                 in_min = minutes_until(sdt, now)
  477:                 srv = (
  478:                     db.services.find_one({"_id": a.get("service_id")}, {"name": 1})
  479:                     if a.get("service_id")
  480:                     else None
  481:                 )
  482:                 pat = (
  483:                     db.patients.find_one({"_id": a.get("patient_id")}, {"full_name": 1})
  484:                     if a.get("patient_id")
  485:                     else None
  486:                 )
  487:                 next_info = {
  488:                     "start": sdt.strftime("%Y-%m-%dT%H:%M") if isinstance(sdt, datetime) else "",
  489:                     "service": (srv or {}).get("name", ""),
  490:                     "patient": (pat or {}).get("full_name", ""),
  491:                     "in_minutes": in_min,
  492:                 }
  493:         result[r["name"]] = {"state": state, "text": text, "color": color, "next": next_info}
  494:     return jsonify(result)
  495: 
  496: 
  497: @app.route("/api/rooms/today_details")
  498: def api_rooms_today_details():
  499:     room_name = request.args.get("room", "").strip()
  500:     if not room_name:
  501:         return jsonify({"ok": False, "error": "no_room"}), 400
  502: 
  503:     room = db.rooms.find_one({"name": room_name}, {"_id": 1, "name": 1})
  504:     if not room:
  505:         return jsonify({"ok": False, "error": "room_not_found"}), 404
  506: 
  507:     now = datetime.now()
  508:     start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0)
  509:     end_of_day = start_of_day + timedelta(days=1)
  510: 
  511:     appts = list(
  512:         db.appointments.find(
  513:             {"room_id": room["_id"], "start": {"$lt": end_of_day}, "end": {"$gt": start_of_day}}
  514:         ).sort("start", 1)
  515:     )
  516: 
  517:     d_ids, p_ids, s_ids = set(), set(), set()
  518:     for a in appts:
  519:         if a.get("doctor_id"):
  520:             d_ids.add(a["doctor_id"])
  521:         if a.get("patient_id"):
  522:             p_ids.add(a["patient_id"])
  523:         if a.get("service_id"):
  524:             s_ids.add(a["service_id"])
  525: 
  526:     doctors = (
  527:         {d["_id"]: d for d in db.doctors.find({"_id": {"$in": list(d_ids)}}, {"full_name": 1})}
  528:         if d_ids
  529:         else {}
  530:     )
  531:     patients = (
  532:         {p["_id"]: p for p in db.patients.find({"_id": {"$in": list(p_ids)}}, {"full_name": 1})}
  533:         if p_ids
  534:         else {}
  535:     )
  536:     services = (
  537:         {s["_id"]: s for s in db.services.find({"_id": {"$in": list(s_ids)}}, {"name": 1})}
  538:         if s_ids
  539:         else {}
  540:     )
  541: 
  542:     items = []
  543:     for a in appts:
  544:         sdt = a.get("start")
  545:         edt = a.get("end")
  546:         items.append(
  547:             {
  548:                 "start": fmt_hm(sdt),
  549:                 "end": fmt_hm(edt),
  550:                 "doctor": doctors.get(a.get("doctor_id"), {}).get("full_name", "вЂ”"),
  551:                 "patient": patients.get(a.get("patient_id"), {}).get("full_name", "вЂ”"),
  552:                 "service": services.get(a.get("service_id"), {}).get("name", "вЂ”"),
  553:                 "status": a.get("status_key", "scheduled"),
  554:                 "is_now": is_now_between(sdt, edt, now),
  555:             }
  556:         )
  557: 
  558:     return jsonify({"ok": True, "room": room_name, "items": items})
  559: 
  560: 
  561: @app.route("/update_event_time", methods=["POST"])
  562: def update_event_time():
  563:     data = request.get_json()
  564:     event_id = data.get("id")
  565:     new_datetime = data.get("new_datetime")
  566:     if event_id and new_datetime:
  567:         db.events.update_one({"_id": ObjectId(event_id)}, {"$set": {"datetime": new_datetime}})
  568:         return jsonify({"ok": True})
  569:     return jsonify({"ok": False})
  570: 
  571: 
  572: @app.route("/export_calendar")
  573: def export_calendar():
  574:     write_log("export", comment="Р­РєСЃРїРѕСЂС‚ РєР°Р»РµРЅРґР°СЂСЏ", obj="РљР°Р»РµРЅРґР°СЂСЊ")
  575: 
  576:     appts = list(db.appointments.find())
  577:     doctors = {str(d["_id"]): d for d in db.doctors.find({}, {"full_name": 1})}
  578:     patients = {str(p["_id"]): p for p in db.patients.find({}, {"full_name": 1})}
  579:     services = {str(s["_id"]): s for s in db.services.find({}, {"name": 1})}
  580:     rooms = {str(r["_id"]): r for r in db.rooms.find({}, {"name": 1})}
  581: 
  582:     output = io.StringIO()
  583:     writer = csv.writer(output, delimiter=";")
  584:     writer.writerow(
  585:         ["start", "end", "doctor", "patient", "service", "room", "sum", "status", "comment"]
  586:     )
  587: 
  588:     for a in appts:
  589:         did = str(a.get("doctor_id", "") or "")
  590:         pid = str(a.get("patient_id", "") or "")
  591:         sid = str(a.get("service_id", "") or "")
  592:         rid = str(a.get("room_id", "") or "")
  593: 
  594:         start = to_dt(a.get("start"))
  595:         end = to_dt(a.get("end"))
  596: 
  597:         writer.writerow(
  598:             [
  599:                 start.strftime("%Y-%m-%d %H:%M") if start else "",
  600:                 end.strftime("%Y-%m-%d %H:%M") if end else "",
  601:                 doctors.get(did, {}).get("full_name", ""),
  602:                 patients.get(pid, {}).get("full_name", ""),
  603:                 services.get(sid, {}).get("name", ""),
  604:                 rooms.get(rid, {}).get("name", ""),
  605:                 a.get("sum", ""),
  606:                 a.get("status_key", ""),
  607:                 a.get("comment", ""),
  608:             ]
  609:         )
  610:     output.seek(0)
  611:     return Response(
  612:         output.getvalue(),
  613:         mimetype="text/csv",
  614:         headers={"Content-Disposition": "attachment;filename=calendar.csv"},
  615:     )
  616: 
  617: 
  618: def get_status_color(status):
  619:     return {
  620:         "РџРµСЂРІРёС‡РЅС‹Р№": "#82B4FF",
  621:         "РџРѕРІС‚РѕСЂРЅС‹Р№": "#FFD366",
  622:         "РћРїР»Р°С‡РµРЅ": "#B4F0C0",
  623:         "РћС‚РєР°Р·": "#FF7474",
  624:         "РќРѕРІС‹Р№": "#D4D4D4",
  625:     }.get(status, "#D4D4D4")
  626: 
  627: 
  628: # --- РњР°СЂС€СЂСѓС‚: Р”РѕР±Р°РІР»РµРЅРёРµ СЃРѕР±С‹С‚РёСЏ ---
  629: @app.route("/add_event", methods=["GET", "POST"])
  630: def add_event():
  631:     if "user_id" not in session:
  632:         return redirect(url_for("login"))
  633: 
  634:     # РЎРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ С„РѕСЂРјС‹
  635:     doctors = list(db.doctors.find({}, {"full_name": 1}).sort("full_name", 1))
  636:     patients = list(db.patients.find({}, {"full_name": 1}).sort("full_name", 1))
  637:     services = list(
  638:         db.services.find({"is_active": True}, {"name": 1, "duration_min": 1}).sort("name", 1)
  639:     )
  640:     rooms = list(db.rooms.find({}, {"name": 1, "status": 1}).sort("name", 1))
  641: 
  642:     if request.method == "POST":
  643:         # 1) Р§РёС‚Р°РµРј РїРѕР»СЏ
  644:         doctor_id_s = request.form.get("doctor_id") or ""
  645:         patient_id_s = request.form.get("patient_id") or ""
  646:         service_id_s = request.form.get("service_id") or ""
  647:         room_id_s = request.form.get("room_id") or ""
  648:         start_s = request.form.get("start") or ""  # datetime-local
  649:         end_s = request.form.get("end") or ""  # РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ
  650: 
  651:         comment = (request.form.get("comment") or "").strip()
  652:         status_key = (request.form.get("status_key") or "scheduled").strip()
  653: 
  654:         # 2) РџСЂРµРѕР±СЂР°Р·СѓРµРј ID
  655:         try:
  656:             doctor_id = ObjectId(doctor_id_s) if doctor_id_s else None
  657:         except:
  658:             doctor_id = None
  659:         try:
  660:             patient_id = ObjectId(patient_id_s) if patient_id_s else None
  661:         except:
  662:             patient_id = None
  663:         try:
  664:             service_id = ObjectId(service_id_s) if service_id_s else None
  665:         except:
  666:             service_id = None
  667:         try:
  668:             room_id = ObjectId(room_id_s) if room_id_s else None
  669:         except:
  670:             room_id = None
  671: 
  672:         # 3) Р’Р°Р»РёРґР°С†РёСЏ РѕР±СЏР·Р°С‚РµР»СЊРЅС‹С… РїРѕР»РµР№
  673:         errors = []
  674:         if not room_id:
  675:             errors.append("Р’С‹Р±РµСЂРёС‚Рµ РєР°Р±РёРЅРµС‚.")
  676:         if not service_id:
  677:             errors.append("Р’С‹Р±РµСЂРёС‚Рµ СѓСЃР»СѓРіСѓ.")
  678:         if not doctor_id:
  679:             errors.append("Р’С‹Р±РµСЂРёС‚Рµ РІСЂР°С‡Р°.")
  680:         if not patient_id:
  681:             errors.append("Р’С‹Р±РµСЂРёС‚Рµ РїР°С†РёРµРЅС‚Р°.")
  682:         start_dt = parse_local_dt(start_s)
  683:         if not start_dt:
  684:             errors.append("РЈРєР°Р¶РёС‚Рµ РґР°С‚Сѓ Рё РІСЂРµРјСЏ РЅР°С‡Р°Р»Р°.")
  685: 
  686:         # 4) Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ Рё РєРѕРЅРµС† РїСЂРёС‘РјР°
  687:         end_dt = parse_local_dt(end_s) if end_s else None
  688:         if not end_dt and start_dt and service_id:
  689:             srv = db.services.find_one({"_id": service_id}, {"duration_min": 1}) or {}
  690:             dur = int(srv.get("duration_min") or 30)
  691:             end_dt = add_minutes(start_dt, dur)
  692: 
  693:         if not end_dt or (start_dt and end_dt <= start_dt):
  694:             errors.append("РќРµРєРѕСЂСЂРµРєС‚РЅС‹Р№ РёРЅС‚РµСЂРІР°Р» РїСЂРёС‘РјР°.")
  695: 
  696:         if errors:
  697:             for e in errors:
  698:                 flash(e, "danger")
  699:             return render_template(
  700:                 "add_event.html", doctors=doctors, patients=patients, services=services, rooms=rooms
  701:             )
  702: 
  703:         # 5) РџСЂРѕРІРµСЂРєР° РєРѕРЅС„Р»РёРєС‚Р° РїРѕ РєР°Р±РёРЅРµС‚Сѓ
  704:         conflict = db.appointments.find_one(
  705:             {"room_id": room_id, "start": {"$lt": end_dt}, "end": {"$gt": start_dt}}
  706:         )
  707:         if conflict:
  708:             flash("Р’ СЌС‚РѕС‚ РёРЅС‚РµСЂРІР°Р» РєР°Р±РёРЅРµС‚ Р·Р°РЅСЏС‚.", "danger")
  709:             return render_template(
  710:                 "add_event.html", doctors=doctors, patients=patients, services=services, rooms=rooms
  711:             )
  712: 
  713:         # 6) РЎРѕР·РґР°С‘Рј РїСЂРёС‘Рј
  714:         appt = {
  715:             "doctor_id": doctor_id,
  716:             "patient_id": patient_id,
  717:             "service_id": service_id,
  718:             "room_id": room_id,
  719:             "start": start_dt,
  720:             "end": end_dt,
  721:             "status_key": status_key,
  722:             "comment": comment,
  723:             "created_at": datetime.utcnow(),
  724:             "updated_at": datetime.utcnow(),
  725:         }
  726:         db.appointments.insert_one(appt)
  727: 
  728:         # 7) РћР±РЅРѕРІРёРј СЃС‚Р°С‚СѓСЃ РєР°Р±РёРЅРµС‚Р° (РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓРµС€СЊ СЌС‚Сѓ С„СѓРЅРєС†РёСЋ)
  729:         try:
  730:             recalc_room_status(room_id)
  731:         except Exception:
  732:             pass
  733: 
  734:         flash("Р—Р°РїРёСЃСЊ СЃРѕР·РґР°РЅР°.", "success")
  735:         return redirect(url_for("calendar_view"))
  736: 
  737:     # GET вЂ” РѕС‚СЂРёСЃРѕРІРєР° С„РѕСЂРјС‹
  738:     return render_template(
  739:         "add_event.html", doctors=doctors, patients=patients, services=services, rooms=rooms
  740:     )
  741: 
  742: 
  743: @app.route("/edit_event/<event_id>", methods=["GET", "POST"])
  744: def edit_event(event_id):
  745:     if "user_id" not in session:
  746:         return redirect(url_for("login"))
  747: 
  748:     appt = db.appointments.find_one({"_id": ObjectId(event_id)})
  749:     if not appt:
  750:         flash("Р—Р°РїРёСЃСЊ РЅРµ РЅР°Р№РґРµРЅР°.", "danger")
  751:         return redirect(url_for("calendar_view"))
  752: 
  753:     doctors = list(db.doctors.find().sort("full_name", 1))
  754:     patients = list(db.patients.find().sort("full_name", 1))
  755:     rooms = list(db.rooms.find({}, {"name": 1}).sort("name", 1))
  756:     services = list(db.services.find({}, {"name": 1, "duration_min": 1}).sort("name", 1))
  757: 
  758:     if request.method == "POST":
  759:         doctor_id = request.form["doctor_id"]
  760:         patient_id = request.form["patient_id"]
  761:         room_name = request.form["cabinet"]
  762:         service_id = request.form.get("service_id") or None
  763: 
  764:         # РґР°С‚Р°/РІСЂРµРјСЏ
  765:         start_raw = request.form["datetime"][:16]
  766:         start_dt = to_dt(start_raw)
  767:         if not start_dt:
  768:             flash("РќРµРєРѕСЂСЂРµРєС‚РЅР°СЏ РґР°С‚Р°/РІСЂРµРјСЏ.", "danger")
  769:             return render_template(
  770:                 "edit_event.html",
  771:                 event=appt,
  772:                 doctors=doctors,
  773:                 patients=patients,
  774:                 cabinets=[r["name"] for r in rooms],
  775:                 services=services,
  776:             )
  777: 
  778:         room = db.rooms.find_one({"name": room_name})
  779:         if not room:
  780:             flash("РљР°Р±РёРЅРµС‚ РЅРµ РЅР°Р№РґРµРЅ.", "danger")
  781:             return render_template(
  782:                 "edit_event.html",
  783:                 event=appt,
  784:                 doctors=doctors,
  785:                 patients=patients,
  786:                 cabinets=[r["name"] for r in rooms],
  787:                 services=services,
  788:             )
  789: 
  790:         srv = db.services.find_one({"_id": ObjectId(service_id)}) if service_id else None
  791:         duration = int(srv.get("duration_min", 30)) if srv else 30
  792:         end_dt = add_minutes(start_dt, duration)
  793: 
  794:         # РџСЂРѕРІРµСЂРєР° Р·Р°РЅСЏС‚РѕСЃС‚Рё РєР°Р±РёРЅРµС‚Р° (РёСЃРєР»СЋС‡Р°СЏ С‚РµРєСѓС‰СѓСЋ Р·Р°РїРёСЃСЊ)
  795:         busy = db.appointments.find_one(
  796:             {
  797:                 "_id": {"$ne": appt["_id"]},
  798:                 "room_id": room["_id"],
  799:                 "start": {"$lt": end_dt},
  800:                 "end": {"$gt": start_dt},
  801:             }
  802:         )
  803:         if busy:
  804:             flash("РљР°Р±РёРЅРµС‚ Р·Р°РЅСЏС‚ РЅР° СЌС‚Рѕ РІСЂРµРјСЏ.", "danger")
  805:             return render_template(
  806:                 "edit_event.html",
  807:                 event=appt,
  808:                 doctors=doctors,
  809:                 patients=patients,
  810:                 cabinets=[r["name"] for r in rooms],
  811:                 services=services,
  812:             )
  813: 
  814:         db.appointments.update_one(
  815:             {"_id": appt["_id"]},
  816:             {
  817:                 "$set": {
  818:                     "doctor_id": ObjectId(doctor_id),
  819:                     "patient_id": ObjectId(patient_id),
  820:                     "room_id": room["_id"],
  821:                     "service_id": ObjectId(service_id) if service_id else None,
  822:                     "start": start_dt,
  823:                     "end": end_dt,
  824:                     "status_key": request.form.get(
  825:                         "status_key", appt.get("status_key", "scheduled")
  826:                     ),
  827:                     "comment": request.form.get("comment", appt.get("comment", "")),
  828:                     "sum": int(request.form.get("sum", appt.get("sum", 0)) or 0),
  829:                 }
  830:             },
  831:         )
  832: 
  833:         flash("Р—Р°РїРёСЃСЊ РѕР±РЅРѕРІР»РµРЅР°.", "success")
  834:         return redirect(url_for("calendar_view"))
  835: 
  836:     # GET вЂ” РїРѕРґРіРѕС‚РѕРІРёРј РґР°РЅРЅС‹Рµ РґР»СЏ С„РѕСЂРјС‹
  837:     # РџСЂРµРѕР±СЂР°Р·СѓРµРј РґР»СЏ С€Р°Р±Р»РѕРЅР° datetime-local
  838:     start_val = appt.get("start")
  839:     start_local = (
  840:         start_val.strftime("%Y-%m-%dT%H:%M")
  841:         if isinstance(start_val, datetime)
  842:         else (to_dt(start_val) or datetime.now()).strftime("%Y-%m-%dT%H:%M")
  843:     )
  844: 
  845:     # РўРµРєСѓС‰РёРµ Р·РЅР°С‡РµРЅРёСЏ
  846:     current_room_name = ""
  847:     if appt.get("room_id"):
  848:         r = db.rooms.find_one({"_id": appt["room_id"]})
  849:         current_room_name = r["name"] if r else ""
  850: 
  851:     return render_template(
  852:         "edit_event.html",
  853:         event=appt,
  854:         start_local=start_local,
  855:         doctors=doctors,
  856:         patients=patients,
  857:         cabinets=[r["name"] for r in rooms],
  858:         services=services,
  859:         current_room_name=current_room_name,
  860:     )
  861: 
  862: 
  863: @app.route("/api/busy_slots", methods=["POST"])
  864: def api_busy_slots():
  865:     data = request.get_json()
  866:     doctor_id = data.get("doctor_id")
  867:     date = data.get("date")
  868:     # РџРѕР»СѓС‡Р°РµРј РІСЃРµ СЃРѕР±С‹С‚РёСЏ СЌС‚РѕРіРѕ РІСЂР°С‡Р° РЅР° СЌС‚Сѓ РґР°С‚Сѓ
  869:     slots = []
  870:     for ev in db.events.find({"doctor_id": doctor_id}):
  871:         ev_date = ev["start"][:10] if "start" in ev else ""
  872:         if ev_date == date:
  873:             # РїСЂРёРјРµСЂ: РµСЃР»Рё 'start': "2025-07-10T15:00"
  874:             time_part = ev["start"].split("T")[1][:5]
  875:             slots.append(time_part)
  876:     return jsonify({"slots": slots})
  877: 
  878: 
  879: @app.route("/busy_slots/<doctor_id>")
  880: def busy_slots(doctor_id):
  881:     # РџРѕР»СѓС‡Р°РµРј РІСЃРµ Р·Р°РїРёСЃРё РІСЂР°С‡Р° Р·Р° СЃРµРіРѕРґРЅСЏ/РЅРµРґРµР»СЋ (РёР»Рё Р·Р° РІРµСЃСЊ РєР°Р»РµРЅРґР°СЂСЊ)
  882:     from datetime import datetime, timedelta
  883: 
  884:     start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
  885:     end = start + timedelta(days=14)  # РЅР°РїСЂРёРјРµСЂ, 2 РЅРµРґРµР»Рё РІРїРµСЂС‘Рґ
  886: 
  887:     events = list(
  888:         db.events.find(
  889:             {"doctor_id": doctor_id, "start": {"$gte": start.isoformat(), "$lt": end.isoformat()}}
  890:         )
  891:     )
  892:     # Р’РѕР·РІСЂР°С‰Р°РµРј СЃРїРёСЃРѕРє РёРЅС‚РµСЂРІР°Р»РѕРІ (РЅР°С‡Р°Р»Рѕ Рё РєРѕРЅРµС†)
  893:     busy = []
  894:     for e in events:
  895:         busy.append({"start": e["start"], "end": e.get("end", e["start"])})
  896:     return jsonify(busy)
  897: 
  898: 
  899: # ======= Р’Р РђР§Р =======
  900: @app.route("/doctors")
  901: def doctors():
  902:     if "user_id" not in session:
  903:         return redirect(url_for("login"))
  904:     doctors = list(db.doctors.find())
  905:     for d in doctors:
  906:         d["_id"] = str(d["_id"])
  907:     return render_template("doctors.html", doctors=doctors)
  908: 
  909: 
  910: @app.route("/add_doctor", methods=["GET", "POST"])
  911: def add_doctor():
  912:     if "user_id" not in session:
  913:         return redirect(url_for("login"))
  914:     if request.method == "POST":
  915:         doctor = {
  916:             "full_name": request.form.get("full_name", ""),
  917:             "specialization": request.form.get("specialization", ""),
  918:             "email": request.form.get("email", ""),
  919:             "phone": request.form.get("phone", ""),
  920:             "avatar_url": request.form.get("avatar_url", "/static/avatars/demo-doctor.png"),
  921:             "status": request.form.get("status", "Р°РєС‚РёРІРµРЅ"),
  922:         }
  923:         db.doctors.insert_one(doctor)
  924:         write_log("add_doctor", comment=f"Р”РѕР±Р°РІР»РµРЅ РІСЂР°С‡ {doctor['full_name']}", obj="Р’СЂР°С‡")
  925:         return redirect(url_for("doctors"))
  926:     return render_template("add_doctor.html")
  927: 
  928: 
  929: @app.route("/doctor_card/<doctor_id>")
  930: def doctor_card(doctor_id):
  931:     doctor = db.doctors.find_one({"_id": ObjectId(doctor_id)})
  932:     if not doctor:
  933:         return "Р’СЂР°С‡ РЅРµ РЅР°Р№РґРµРЅ", 404
  934:     appointments = list(db.events.find({"doctor_id": doctor_id}))
  935:     return render_template("doctor_card.html", doctor=doctor, appointments=appointments)
  936: 
  937: 
  938: @app.route("/doctor_busy_slots/<doctor_id>")
  939: def doctor_busy_slots(doctor_id):
  940:     # РќР°С…РѕРґРёРј РІСЃРµ СЃРѕР±С‹С‚РёСЏ РїРѕ doctor_id (Р·Р° Р±Р»РёР¶Р°Р№С€РёРµ 30 РґРЅРµР№, С‡С‚РѕР±С‹ РЅРµ С‚СЏРЅСѓС‚СЊ РІСЃС‘ РїРѕРґСЂСЏРґ)
  941:     from datetime import datetime, timedelta
  942: 
  943:     start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
  944:     end = start + timedelta(days=30)
  945:     events = list(
  946:         db.events.find(
  947:             {"doctor_id": doctor_id, "start": {"$gte": start.isoformat(), "$lt": end.isoformat()}}
  948:         )
  949:     )
  950:     # Р”Р»СЏ РєР°Р¶РґРѕРіРѕ СЃРѕР±С‹С‚РёСЏ РІРѕР·РІСЂР°С‰Р°РµРј start Рё end
  951:     busy = []
  952:     for e in events:
  953:         busy.append({"start": e["start"], "end": e.get("end", e["start"])})
  954:     return jsonify({"busy_slots": busy})
  955: 
  956: 
  957: from flask import jsonify, request
  958: 
  959: 
  960: @app.route("/api/doctor_schedule", methods=["POST"])
  961: def doctor_schedule():
  962:     data = request.get_json()
  963:     doctor_id = data["doctor_id"]
  964:     doctor = db.doctors.find_one({"_id": doctor_id})
  965:     if not doctor:
  966:         return jsonify({"error": "not found"}), 404
  967:     # РџСЂРёРјРµСЂ СЃС‚СЂСѓРєС‚СѓСЂС‹ СЂР°СЃРїРёСЃР°РЅРёСЏ: {"0": {"start": "08:00", "end": "18:00"}, ...}
  968:     schedule = doctor.get("schedule", {})
  969:     # РќР°С…РѕРґРёРј РІСЃРµ СЃРѕР±С‹С‚РёСЏ РїРѕ РІСЂР°С‡Сѓ Р·Р° РЅСѓР¶РЅСѓСЋ РґР°С‚Сѓ (РёР»Рё РґРёР°РїР°Р·РѕРЅ)
  970:     events = list(db.events.find({"doctor_id": doctor_id}))
  971:     busy_slots = [{"start": e["start"], "end": e.get("end", e["start"])} for e in events]
  972:     return jsonify(
  973:         {
  974:             "schedule": schedule,  # dict СЃ РґРЅСЏРјРё РЅРµРґРµР»Рё, РєРѕРіРґР° РІСЂР°С‡ СЂР°Р±РѕС‚Р°РµС‚
  975:             "busy_slots": busy_slots,  # СЃРїРёСЃРѕРє {"start": "...", "end": "..."}
  976:         }
  977:     )
  978: 
  979: 
  980: # ======= Р¤РРќРђРќРЎР« =======
  981: @app.route("/finance_report")
  982: def finance_report():
  983:     operations = list(db.finance.find())
  984:     # ---- Р¤РёР»СЊС‚СЂС‹ РёР· С„РѕСЂРјС‹ ----
  985:     search = request.args.get("search", "").strip()
  986:     type_filter = request.args.get("type", "")
  987:     status_filter = request.args.get("status", "")
  988: 
  989:     # --- Р¤РёР»СЊС‚СЂСѓРµРј ---
  990:     def match(op):
  991:         ok = True
  992:         if search:
  993:             ok &= (
  994:                 search.lower() in op.get("doctor", "").lower()
  995:                 or search.lower() in op.get("patient", "").lower()
  996:                 or search.lower() in op.get("service", "").lower()
  997:             )
  998:         if type_filter:
  999:             ok &= op.get("type", "") == type_filter
 1000:         if status_filter:
 1001:             ok &= op.get("status", "").lower() == status_filter.lower()
 1002:         return ok
 1003: 
 1004:     filtered_ops = [op for op in operations if match(op)]
 1005: 
 1006:     # --- РЎС‚Р°С‚РёСЃС‚РёРєР° РїРѕ РѕРїРµСЂР°С†РёСЏРј ---
 1007:     income_ops = [int(op["amount"]) for op in filtered_ops if op["type"] == "Р”РѕС…РѕРґ"]
 1008:     expense_ops = [int(op["amount"]) for op in filtered_ops if op["type"] == "Р Р°СЃС…РѕРґ"]
 1009: 
 1010:     income = sum(income_ops)
 1011:     expenses = sum(expense_ops)
 1012:     debtors_count = 4  # demo
 1013:     debtors_sum = 32000  # demo
 1014:     avg_check = int(sum(income_ops) / len(income_ops)) if income_ops else 0
 1015: 
 1016:     # --- Р”Р»СЏ РЅРѕРІС‹С… summary-РїРѕР»РµР№ (РјР°РєСЃРёРјР°Р»СЊРЅРѕ С‚РѕРї) ---
 1017:     operations_count = len(filtered_ops)
 1018:     paid_ops = [op for op in filtered_ops if op.get("status") == "РѕРїР»Р°С‡РµРЅ"]
 1019:     paid_count = len(paid_ops)
 1020:     paid_percent = int(100 * paid_count / operations_count) if operations_count else 0
 1021: 
 1022:     # РўРѕРї РІСЂР°С‡ Рё СѓСЃР»СѓРіР° (РїРѕ РєРѕР»РёС‡РµСЃС‚РІСѓ РѕРїРµСЂР°С†РёР№)
 1023:     from collections import Counter
 1024: 
 1025:     top_doctor = Counter([op["doctor"] for op in filtered_ops if op.get("doctor")]).most_common(1)
 1026:     top_service = Counter([op["service"] for op in filtered_ops if op.get("service")]).most_common(
 1027:         1
 1028:     )
 1029:     top_doctor = top_doctor[0][0] if top_doctor else "вЂ”"
 1030:     top_service = top_service[0][0] if top_service else "вЂ”"
 1031: 
 1032:     # --- Р“СЂР°С„РёРє РїРѕ РјРµСЃСЏС†Р°Рј ---
 1033:     months = OrderedDict()
 1034:     for op in filtered_ops:
 1035:         m = op["date"].split(".")[1]  # MM
 1036:         months.setdefault(m, {"income": 0, "expenses": 0})
 1037:         if op["type"] == "Р”РѕС…РѕРґ":
 1038:             months[m]["income"] += int(op["amount"])
 1039:         else:
 1040:             months[m]["expenses"] += int(op["amount"])
 1041:     chart_data = {
 1042:         "labels": [calendar.month_abbr[int(m)] for m in months.keys()],
 1043:         "datasets": [
 1044:             {
 1045:                 "label": "Р”РѕС…РѕРґС‹",
 1046:                 "borderColor": "#22c55e",
 1047:                 "backgroundColor": "#dcfce7",
 1048:                 "data": [v["income"] for v in months.values()],
 1049:                 "tension": 0.4,
 1050:             },
 1051:             {
 1052:                 "label": "Р Р°СЃС…РѕРґС‹",
 1053:                 "borderColor": "#ef4444",
 1054:                 "backgroundColor": "#fee2e2",
 1055:                 "data": [v["expenses"] for v in months.values()],
 1056:                 "tension": 0.4,
 1057:             },
 1058:         ],
 1059:     }
 1060: 
 1061:     summary = {
 1062:         "income": income,
 1063:         "expenses": expenses,
 1064:         "debtors_count": debtors_count,
 1065:         "debtors_sum": debtors_sum,
 1066:         "month_name": "РёСЋР»СЊ",  # РјРѕР¶РЅРѕ СЃРґРµР»Р°С‚СЊ РґРёРЅР°РјРёС‡РЅРѕ!
 1067:         "avg_check": avg_check,
 1068:         "operations_count": operations_count,
 1069:         "paid_count": paid_count,
 1070:         "paid_percent": paid_percent,
 1071:         "top_doctor": top_doctor,
 1072:         "top_service": top_service,
 1073:     }
 1074: 
 1075:     return render_template(
 1076:         "finance_report.html", summary=summary, operations=filtered_ops, chart_data=chart_data
 1077:     )
 1078: 
 1079: 
 1080: @app.route("/finance_report/export")
 1081: def finance_report_export():
 1082:     write_log("export", comment="Р­РєСЃРїРѕСЂС‚ С„РёРЅР°РЅСЃРѕРІРѕРіРѕ РѕС‚С‡С‘С‚Р°", obj="Р¤РёРЅР°РЅСЃРѕРІС‹Р№ РѕС‚С‡С‘С‚")
 1083:     operations = list(db.finance.find())
 1084:     income_sum = sum(int(op["amount"]) for op in operations if op["type"] == "Р”РѕС…РѕРґ")
 1085:     expense_sum = sum(int(op["amount"]) for op in operations if op["type"] == "Р Р°СЃС…РѕРґ")
 1086:     income_ops = [int(op["amount"]) for op in operations if op["type"] == "Р”РѕС…РѕРґ"]
 1087:     avg_check = int(sum(income_ops) / len(income_ops)) if income_ops else 0
 1088:     debtors_count = 4  # demo
 1089:     debtors_sum = 32000  # demo
 1090:     report_month = "РёСЋР»СЊ"
 1091: 
 1092:     data = {
 1093:         "Р”РѕС…РѕРґС‹": [income_sum],
 1094:         "Р Р°СЃС…РѕРґС‹": [expense_sum],
 1095:         "РЎСЂРµРґРЅРёР№ С‡РµРє": [avg_check],
 1096:         "Р”РѕР»Р¶РЅРёРєРё (С‡РµР»)": [debtors_count],
 1097:         "Р”РѕР»РіРё (в‚Ѕ)": [debtors_sum],
 1098:         "РњРµСЃСЏС†": [report_month],
 1099:     }
 1100:     format = request.args.get("format", "xlsx")
 1101:     if format == "csv":
 1102:         output = io.StringIO()
 1103:         df = pd.DataFrame(data)
 1104:         df.to_csv(output, index=False, sep=";")
 1105:         output.seek(0)
 1106:         return send_file(
 1107:             io.BytesIO(output.getvalue().encode("utf-8")),
 1108:             as_attachment=True,
 1109:             download_name="finance_report.csv",
 1110:             mimetype="text/csv",
 1111:         )
 1112:     else:
 1113:         output = io.BytesIO()
 1114:         df = pd.DataFrame(data)
 1115:         with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
 1116:             df.to_excel(writer, index=False, sheet_name="Р¤РёРЅР°РЅСЃС‹")
 1117:         output.seek(0)
 1118:         return send_file(
 1119:             output,
 1120:             as_attachment=True,
 1121:             download_name="finance_report.xlsx",
 1122:             mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
 1123:         )
 1124: 
 1125: 
 1126: # ======= РћРЎРќРћР’РќР«Р• РЎРўР РђРќРР¦Р«/РњРћР”РЈР›Р (Р—РђР“Р›РЈРЁРљР) =======
 1127: @app.route("/tasks")
 1128: def tasks():
 1129:     if "user_id" not in session:
 1130:         return redirect(url_for("login"))
 1131:     # Р¤РѕСЂРјРёСЂСѓРµРј Р·Р°РґР°С‡Рё РґР»СЏ С€Р°Р±Р»РѕРЅР°:
 1132:     tasks = list(db.tasks.find())
 1133:     for t in tasks:
 1134:         t["_id"] = str(t["_id"])
 1135:         assignee = (
 1136:             db.doctors.find_one({"_id": ObjectId(t.get("assigned_to", ""))})
 1137:             if t.get("assigned_to")
 1138:             else None
 1139:         )
 1140:         t["assigned_name"] = assignee["full_name"] if assignee else "Р‘РµР· РёСЃРїРѕР»РЅРёС‚РµР»СЏ"
 1141:         t["assigned_avatar_url"] = (
 1142:             assignee["avatar_url"]
 1143:             if assignee and "avatar_url" in assignee
 1144:             else "/static/avatars/demo-user.png"
 1145:         )
 1146:     doctors = list(db.doctors.find())
 1147:     return render_template(
 1148:         "tasks.html", tasks=tasks, doctors=doctors
 1149:     )  # <-- Р’РћРў Р­РўРћ Р”РћР›Р–РќРћ Р‘Р«РўР¬ Р’РќРЈРўР Р Р¤РЈРќРљР¦РР!
 1150: 
 1151: 
 1152: @app.route("/add_task", methods=["POST"])
 1153: def add_task():
 1154:     task = {
 1155:         "title": request.form.get("title", ""),
 1156:         "description": request.form.get("description", ""),
 1157:         "assigned_to": request.form.get("assigned_to", ""),
 1158:         "due_date": request.form.get("due_date", ""),
 1159:         "status": "active",
 1160:         "priority": request.form.get("priority", "normal"),
 1161:         "created_at": datetime.now().strftime("%Y-%m-%d %H:%M"),
 1162:     }
 1163:     db.tasks.insert_one(task)
 1164:     return redirect(url_for("tasks"))
 1165: 
 1166: 
 1167: @app.route("/mark_task_done/<task_id>")
 1168: def mark_task_done(task_id):
 1169:     db.tasks.update_one({"_id": ObjectId(task_id)}, {"$set": {"status": "done"}})
 1170:     write_log("task_done", comment=f"Р—Р°РґР°С‡Р° {task_id} РѕС‚РјРµС‡РµРЅР° РІС‹РїРѕР»РЅРµРЅРЅРѕР№", obj="Р—Р°РґР°С‡Р°")
 1171:     return redirect(url_for("tasks"))
 1172: 
 1173: 
 1174: @app.route("/task/<task_id>")
 1175: def task_card(task_id):
 1176:     if "user_id" not in session:
 1177:         return redirect(url_for("login"))
 1178:     task = db.tasks.find_one({"_id": ObjectId(task_id)})
 1179:     if not task:
 1180:         return "Р—Р°РґР°С‡Р° РЅРµ РЅР°Р№РґРµРЅР°", 404
 1181:     # РњРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ РїРѕРґРіСЂСѓР·РєСѓ РёСЃРїРѕР»РЅРёС‚РµР»СЏ, РµСЃР»Рё РЅСѓР¶РЅРѕ
 1182:     assignee = (
 1183:         db.doctors.find_one({"_id": ObjectId(task.get("assigned_to", ""))})
 1184:         if task.get("assigned_to")
 1185:         else None
 1186:     )
 1187:     task["assigned_name"] = assignee["full_name"] if assignee else ""
 1188:     task["assigned_avatar_url"] = (
 1189:         assignee["avatar_url"]
 1190:         if assignee and "avatar_url" in assignee
 1191:         else "/static/avatars/demo-user.png"
 1192:     )
 1193:     return render_template("task_card.html", task=task)
 1194: 
 1195: 
 1196: @app.route("/messages")
 1197: def messages():
 1198:     chats = list(db.messages.find())
 1199:     user_name = "РРІР°РЅРѕРІР° РђРЅРЅР° (Р°РґРјРёРЅ)"  # Р”Р»СЏ РґРµРјРѕ
 1200:     return render_template("messages.html", chats=chats, user_name=user_name)
 1201: 
 1202: 
 1203: @app.route("/xray_room")
 1204: def xray_room():
 1205:     xrays = list(db.xrays.find())
 1206:     patients = {str(p["_id"]): p for p in db.patients.find()}
 1207:     doctors = {str(d["_id"]): d for d in db.doctors.find()}
 1208:     # С„РёР»СЊС‚СЂС‹ (РґРѕР±Р°РІСЊ, РµСЃР»Рё РЅР°РґРѕ)
 1209:     return render_template("xray_room.html", xrays=xrays, patients=patients, doctors=doctors)
 1210: 
 1211: 
 1212: @app.route("/add_xray", methods=["GET", "POST"])
 1213: def add_xray():
 1214:     if request.method == "POST":
 1215:         # Р—Р°РіСЂСѓР¶Р°РµРј С„Р°Р№Р» (image), СЃРѕС…СЂР°РЅСЏРµРј РІ /static/xrays/
 1216:         # Р’РЅРѕСЃРёРј РІ РєРѕР»Р»РµРєС†РёСЋ xrays РІСЃРµ РґР°РЅРЅС‹Рµ
 1217:         # ...
 1218:         flash("РЎРЅРёРјРѕРє СѓСЃРїРµС€РЅРѕ РґРѕР±Р°РІР»РµРЅ!", "success")
 1219:         return redirect(url_for("xray_room"))
 1220:     patients = list(db.patients.find())
 1221:     doctors = list(db.doctors.find())
 1222:     return render_template("add_xray.html", patients=patients, doctors=doctors)
 1223: 
 1224: 
 1225: from bson import ObjectId
 1226: 
 1227: 
 1228: @app.route("/ztl")
 1229: def ztl():
 1230:     ztls = list(db.ztl.find({}))  # Р—Р°Р±РёСЂР°РµРј РІСЃРµ Р»Р°Р±РѕСЂР°С‚РѕСЂРЅС‹Рµ СЂР°Р±РѕС‚С‹
 1231:     patients = {str(p["_id"]): p for p in db.patients.find()}
 1232:     doctors = {str(d["_id"]): d for d in db.doctors.find()}
 1233: 
 1234:     # РџСЂРёРІРѕРґРёРј ObjectId Рє СЃС‚СЂРѕРєР°Рј
 1235:     for w in ztls:
 1236:         for key in ["_id", "patient_id", "doctor_id"]:
 1237:             if key in w and isinstance(w[key], ObjectId):
 1238:                 w[key] = str(w[key])
 1239: 
 1240:     return render_template("ztl.html", ztls=ztls, patients=patients, doctors=doctors)
 1241: 
 1242: 
 1243: @app.route("/add_ztl", methods=["GET", "POST"])
 1244: def add_ztl():
 1245:     if request.method == "POST":
 1246:         file = request.files.get("file")
 1247:         file_url = ""
 1248:         if file and file.filename:
 1249:             save_path = f"static/ztl/{file.filename}"
 1250:             file.save(save_path)
 1251:             file_url = "/" + save_path
 1252:         else:
 1253:             file_url = "/static/ztl/demo_ztl_1.png"
 1254:         ztl = {
 1255:             "patient_id": ObjectId(request.form["patient_id"]),
 1256:             "doctor_id": ObjectId(request.form["doctor_id"]),
 1257:             "type": request.form["type"],
 1258:             "order_date": request.form["order_date"],
 1259:             "due_date": request.form["due_date"],
 1260:             "status": request.form["status"],
 1261:             "comment": request.form.get("comment", ""),
 1262:             "file_url": file_url,
 1263:             "created_at": datetime.now().strftime("%Y-%m-%d"),
 1264:         }
 1265:         db.ztl.insert_one(ztl)
 1266:         return redirect(url_for("ztl"))
 1267:     patients = list(db.patients.find())
 1268:     doctors = list(db.doctors.find())
 1269:     return render_template("add_ztl.html", patients=patients, doctors=doctors)
 1270: 
 1271: 
 1272: @app.route("/partners")
 1273: def partners():
 1274:     # РџРѕР»СѓС‡Р°РµРј РІСЃРµС… РїР°С†РёРµРЅС‚РѕРІ
 1275:     patients = list(db.patients.find())
 1276: 
 1277:     # РЎР»РѕРІР°СЂСЊ РґР»СЏ Р±С‹СЃС‚СЂРѕРіРѕ РґРѕСЃС‚СѓРїР°: id (СЃС‚СЂРѕРєРѕР№) -> РїР°С†РёРµРЅС‚
 1278:     patients_map = {str(p["_id"]): p for p in patients}
 1279: 
 1280:     # РЎР»РѕРІР°СЂСЊ СЂРµС„РµСЂР°Р»РѕРІ: id РїСЂРёРіР»Р°СЃРёС‚РµР»СЏ -> СЃРїРёСЃРѕРє РїСЂРёРіР»Р°С€С‘РЅРЅС‹С… РїР°С†РёРµРЅС‚РѕРІ
 1281:     referrals = {}
 1282:     for p in patients:
 1283:         inviter_id = str(p.get("invited_by")) if p.get("invited_by") else None
 1284:         if inviter_id:
 1285:             referrals.setdefault(inviter_id, []).append(p)
 1286:     return render_template(
 1287:         "partners.html",
 1288:         patients=patients,  # РЎРїРёСЃРѕРє РІСЃРµС… РїР°С†РёРµРЅС‚РѕРІ
 1289:         patients_map=patients_map,  # Р‘С‹СЃС‚СЂС‹Р№ РґРѕСЃС‚СѓРї РїРѕ id (РґР»СЏ РїСЂРёРіР»Р°СЃРёС‚РµР»РµР№)
 1290:         referrals=referrals,  # РљС‚Рѕ РєРѕРіРѕ РїСЂРёРіР»Р°СЃРёР»
 1291:     )
 1292: 
 1293: 
 1294: @app.route("/logs")
 1295: def logs():
 1296:     write_log("logs_view", comment="РџСЂРѕСЃРјРѕС‚СЂ Р¶СѓСЂРЅР°Р»Р° РґРµР№СЃС‚РІРёР№", obj="Р›РѕРіРё")
 1297:     logs = list(db.logs.find().sort("time", -1))  # РЎРѕСЂС‚РёСЂСѓРµРј РїРѕ РґР°С‚Рµ
 1298:     return render_template("journal.html", logs=logs)
 1299: 
 1300: 
 1301: @app.route("/backup")
 1302: def backup():
 1303:     if "user_id" not in session:
 1304:         return redirect(url_for("login"))
 1305:     return render_template("backup.html")
 1306: 
 1307: 
 1308: @app.route("/profile")
 1309: def profile():
 1310:     return render_template("profile.html")
 1311: 
 1312: 
 1313: @app.route("/settings")
 1314: def settings():
 1315:     return render_template("settings.html")
 1316: 
 1317: 
 1318: @app.route("/data_tools", methods=["GET", "POST"])
 1319: def data_tools():
 1320:     # ... РїРѕРґРіСЂСѓР¶Р°РµРј РёСЃС‚РѕСЂРёСЋ СЌРєСЃРїРѕСЂС‚Р°/РёРјРїРѕСЂС‚Р°
 1321:     history = list(db.imports.find().sort("datetime", -1))
 1322:     return render_template("data_tools.html", history=history)
 1323: 
 1324: 
 1325: @app.route("/export_data")
 1326: def export_data():
 1327:     # collection: patients, doctors, events, finance
 1328:     collection = request.args.get("collection", "patients")
 1329:     format = request.args.get("format", "xlsx")
 1330:     data = list(db[collection].find())
 1331:     # ... РїСЂРµРІСЂР°С‚РёС‚СЊ ObjectId РІ СЃС‚СЂРѕРєРё РґР»СЏ СЌРєСЃРїРѕСЂС‚Р°
 1332:     for d in data:
 1333:         d["_id"] = str(d["_id"])
 1334:     df = pd.DataFrame(data)
 1335:     output = io.BytesIO()
 1336:     filename = f"{collection}_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.{format}"
 1337:     if format == "csv":
 1338:         output = io.StringIO()
 1339:         df.to_csv(output, index=False, sep=";")
 1340:         output.seek(0)
 1341:         return Response(
 1342:             output.getvalue(),
 1343:             mimetype="text/csv",
 1344:             headers={"Content-Disposition": f"attachment;filename={filename}"},
 1345:         )
 1346:     else:
 1347:         with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
 1348:             df.to_excel(writer, index=False)
 1349:         output.seek(0)
 1350:         return send_file(
 1351:             output,
 1352:             as_attachment=True,
 1353:             download_name=filename,
 1354:             mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
 1355:         )
 1356: 
 1357: 
 1358: @app.route("/import_data", methods=["POST"])
 1359: def import_data():
 1360:     file = request.files["file"]
 1361:     collection = request.form["collection"]
 1362:     filename = file.filename
 1363:     result = ""
 1364:     try:
 1365:         if filename.endswith(".csv"):
 1366:             df = pd.read_csv(file, sep=";")
 1367:         else:
 1368:             df = pd.read_excel(file)
 1369:         # Р’Р°Р»РёРґР°С†РёСЏ, РїРѕРґРіРѕС‚РѕРІРєР°
 1370:         db[collection].insert_many(df.to_dict("records"))
 1371:         result = f"РЈСЃРїРµС€РЅРѕ ({len(df)} Р·Р°РїРёСЃРµР№)"
 1372:     except Exception as e:
 1373:         result = f"РћС€РёР±РєР°: {e}"
 1374:     # Р›РѕРіРёСЂРѕРІР°РЅРёРµ
 1375:     db.imports.insert_one(
 1376:         {
 1377:             "datetime": datetime.now().strftime("%Y-%m-%d %H:%M"),
 1378:             "user": session.get("user_name", "РіРѕСЃС‚СЊ"),
 1379:             "operation": "РёРјРїРѕСЂС‚",
 1380:             "collection": collection,
 1381:             "filename": filename,
 1382:             "result": result,
 1383:         }
 1384:     )
 1385:     flash(result)
 1386:     return redirect(url_for("data_tools"))
 1387: 
 1388: 
 1389: # ======= 404 =======
 1390: @app.errorhandler(404)
 1391: def page_not_found(e):
 1392:     return render_template("404.html"), 404
 1393: 
 1394: 
 1395: @app.route("/cabinet/<cabinet_name>")
 1396: def cabinet_card(cabinet_name):
 1397:     events = list(db.events.find({"cabinet": cabinet_name}))
 1398:     doctors = list(db.doctors.find())
 1399:     patients = list(db.patients.find())
 1400:     return render_template(
 1401:         "cabinet_card.html", cabinet=cabinet_name, events=events, doctors=doctors, patients=patients
 1402:     )
 1403: 
 1404: 
 1405: @app.route("/api/events")
 1406: def api_events():
 1407:     # 1) Р”РёР°РїР°Р·РѕРЅ, РєРѕС‚РѕСЂС‹Р№ С€Р»С‘С‚ FullCalendar
 1408:     start_str = request.args.get("start")
 1409:     end_str = request.args.get("end")
 1410: 
 1411:     # 2) Р¤РёР»СЊС‚СЂС‹ (РїРѕРґРґРµСЂР¶РёРІР°РµРј Рё id, Рё РёРјРµРЅР°)
 1412:     doctor_id = request.args.get("doctor_id")
 1413:     room_id = request.args.get("room_id")
 1414:     room_name = request.args.get("room_name")
 1415:     service_id = request.args.get("service_id")
 1416:     service_name = request.args.get("service_name")
 1417: 
 1418:     start_dt = parse_iso(start_str)
 1419:     end_dt = parse_iso(end_str)
 1420: 
 1421:     # 3) Р‘Р°Р·РѕРІС‹Р№ Р·Р°РїСЂРѕСЃ: РїРµСЂРµСЃРµС‡РµРЅРёРµ РґРёР°РїР°Р·РѕРЅР°
 1422:     q = {}
 1423:     if start_dt and end_dt:
 1424:         q["start"] = {"$lt": end_dt}
 1425:         q["end"] = {"$gt": start_dt}
 1426: 
 1427:     # 4) Р¤РёР»СЊС‚СЂ РїРѕ РІСЂР°С‡Сѓ
 1428:     if doctor_id:
 1429:         try:
 1430:             q["doctor_id"] = ObjectId(doctor_id)
 1431:         except Exception:
 1432:             pass
 1433: 
 1434:     # 5) Р¤РёР»СЊС‚СЂ РїРѕ РєР°Р±РёРЅРµС‚Сѓ
 1435:     if room_id:
 1436:         try:
 1437:             q["room_id"] = ObjectId(room_id)
 1438:         except Exception:
 1439:             pass
 1440:     elif room_name:
 1441:         r = db.rooms.find_one({"name": room_name}, {"_id": 1})
 1442:         if r:
 1443:             q["room_id"] = r["_id"]
 1444: 
 1445:     # 6) Р¤РёР»СЊС‚СЂ РїРѕ СѓСЃР»СѓРіРµ
 1446:     if service_id:
 1447:         try:
 1448:             q["service_id"] = ObjectId(service_id)
 1449:         except Exception:
 1450:             pass
 1451:     elif service_name:
 1452:         s = db.services.find_one({"name": service_name}, {"_id": 1})
 1453:         if s:
 1454:             q["service_id"] = s["_id"]
 1455: 
 1456:     # 7) РЎРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ РЅР°Р·РІР°РЅРёР№/С†РІРµС‚РѕРІ
 1457:     doctors_map = {str(d["_id"]): d for d in db.doctors.find({}, {"full_name": 1, "avatar": 1})}
 1458:     patients_map = {str(p["_id"]): p for p in db.patients.find({}, {"full_name": 1, "avatar": 1})}
 1459:     services_map = {
 1460:         str(s["_id"]): s for s in db.services.find({}, {"name": 1, "color": 1, "duration_min": 1})
 1461:     }
 1462:     status_map = {
 1463:         s["key"]: s for s in db.visit_statuses.find({}, {"key": 1, "title": 1, "color": 1})
 1464:     }
 1465:     rooms_map = {str(r["_id"]): r for r in db.rooms.find({}, {"name": 1})}
 1466: 
 1467:     # 8) Р¤РѕСЂРјРёСЂСѓРµРј РѕС‚РІРµС‚ РІ С„РѕСЂРјР°С‚Рµ FullCalendar
 1468:     events = []
 1469:     cursor = db.appointments.find(q).sort("start", 1)
 1470: 
 1471:     for a in cursor:
 1472:         # --- РЅРѕСЂРјР°Р»РёР·СѓРµРј ID РєР°Рє СЃС‚СЂРѕРєРё (РјРѕРіСѓС‚ Р±С‹С‚СЊ None)
 1473:         did = str(a.get("doctor_id") or "")
 1474:         pid = str(a.get("patient_id") or "")
 1475:         sid = str(a.get("service_id") or "")
 1476:         rid = str(a.get("room_id") or "")
 1477: 
 1478:         # --- РіР°СЂР°РЅС‚РёСЂСѓРµРј С‚РёРї datetime
 1479:         a_start = to_dt(a.get("start"))
 1480:         if not a_start:
 1481:             # Р±РёС‚Р°СЏ Р·Р°РїРёСЃСЊ Р±РµР· РґР°С‚С‹ вЂ” РїСЂРѕРїСѓСЃРєР°РµРј
 1482:             continue
 1483: 
 1484:         a_end = to_dt(a.get("end"))
 1485:         if not a_end:
 1486:             # РµСЃР»Рё РЅРµС‚ end вЂ” СЃС‡РёС‚Р°РµРј РїРѕ РґР»РёС‚РµР»СЊРЅРѕСЃС‚Рё СѓСЃР»СѓРіРё (РµСЃР»Рё РµСЃС‚СЊ), РёРЅР°С‡Рµ 30 РјРёРЅ
 1487:             dur = services_map.get(sid, {}).get("duration_min", 30)
 1488:             try:
 1489:                 dur = int(dur)
 1490:             except Exception:
 1491:                 dur = 30
 1492:             a_end = add_minutes(a_start, dur)
 1493: 
 1494:         # --- СЃРїСЂР°РІРѕС‡РЅРёРєРё
 1495:         doc = doctors_map.get(did, {})
 1496:         pat = patients_map.get(pid, {})
 1497:         srv = services_map.get(sid, {})
 1498:         rm = rooms_map.get(rid, {})
 1499:         st = status_map.get(a.get("status_key", "scheduled"), {})
 1500: 
 1501:         # --- Р·Р°РіРѕР»РѕРІРѕРє СЃРѕР±С‹С‚РёСЏ
 1502:         title = f'{srv.get("name", "РЈСЃР»СѓРіР°")} вЂ” {pat.get("full_name", "РџР°С†РёРµРЅС‚")}'
 1503: 
 1504:         events.append(
 1505:             {
 1506:                 "id": str(a["_id"]),
 1507:                 "title": title,
 1508:                 "start": a_start.isoformat(),
 1509:                 "end": a_end.isoformat(),
 1510:                 "backgroundColor": st.get("color") or srv.get("color") or "#3498db",
 1511:                 "borderColor": st.get("color") or srv.get("color") or "#3498db",
 1512:                 "extendedProps": {
 1513:                     "patient": pat.get("full_name"),
 1514:                     "doctor": doc.get("full_name"),
 1515:                     "service": srv.get("name"),
 1516:                     "room": rm.get("name"),
 1517:                     "status": st.get("title"),
 1518:                     "doctor_id": did,
 1519:                     "patient_id": pid,
 1520:                     "service_id": sid,
 1521:                     "room_id": rid,
 1522:                 },
 1523:             }
 1524:         )
 1525: 
 1526:     return jsonify(events)
 1527: 
 1528: 
 1529: @app.route("/api/services/<id>")
 1530: def api_service_get(id):
 1531:     try:
 1532:         oid = ObjectId(id)
 1533:     except Exception:
 1534:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1535:     s = db.services.find_one({"_id": oid}, {"name": 1, "duration_min": 1, "price": 1, "color": 1})
 1536:     if not s:
 1537:         return jsonify({"ok": False, "error": "not_found"}), 404
 1538:     return jsonify(
 1539:         {
 1540:             "ok": True,
 1541:             "item": {
 1542:                 "id": str(s["_id"]),
 1543:                 "name": s.get("name"),
 1544:                 "duration_min": int(s.get("duration_min") or 30),
 1545:                 "price": s.get("price"),
 1546:                 "color": s.get("color"),
 1547:             },
 1548:         }
 1549:     )
 1550: 
 1551: 
 1552: # 1) РЎРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ РјРѕРґР°Р»РєРё
 1553: @app.route("/api/dicts")
 1554: def api_dicts():
 1555:     docs = list(db.doctors.find({}, {"full_name": 1}))
 1556:     srvs = list(db.services.find({}, {"name": 1, "duration_min": 1, "price": 1}))
 1557:     return jsonify(
 1558:         {
 1559:             "ok": True,
 1560:             "doctors": [{"id": str(x["_id"]), "name": x.get("full_name", "")} for x in docs],
 1561:             "services": [
 1562:                 {
 1563:                     "id": str(x["_id"]),
 1564:                     "name": x.get("name", ""),
 1565:                     "duration_min": x.get("duration_min", 30),
 1566:                     "price": x.get("price", 0),
 1567:                 }
 1568:                 for x in srvs
 1569:             ],
 1570:         }
 1571:     )
 1572: 
 1573: 
 1574: # --- 2.2: Р·Р°РЅСЏС‚РѕСЃС‚СЊ РєР°Р±РёРЅРµС‚Р° РЅР° РґРµРЅСЊ ---
 1575: @app.route("/api/rooms/busy")
 1576: def api_room_busy():
 1577:     """
 1578:     GET /api/rooms/busy?room_id=<oid|str>&date=YYYY-MM-DD
 1579:     Р’РѕР·РІСЂР°С‰Р°РµС‚ РёРЅС‚РµСЂРІР°Р»С‹ Р·Р°РЅСЏС‚РѕСЃС‚Рё РєР°Р±РёРЅРµС‚Р° РЅР° СѓРєР°Р·Р°РЅРЅС‹Р№ РґРµРЅСЊ:
 1580:     { ok: True, items: [{start:'HH:MM', end:'HH:MM'}, ...] }
 1581:     """
 1582:     room_id = request.args.get("room_id", "").strip()
 1583:     date_s = request.args.get("date", "").strip()
 1584: 
 1585:     if not room_id or not date_s:
 1586:         return jsonify({"ok": False, "error": "bad_params"}), 400
 1587: 
 1588:     try:
 1589:         room_oid = ObjectId(room_id)
 1590:     except Exception:
 1591:         # РґРѕРїСѓСЃРєР°РµРј, С‡С‚Рѕ Рє РЅР°Рј РїСЂРёС€Р»Рѕ РёРјСЏ РєР°Р±РёРЅРµС‚Р° вЂ” РїРѕРїСЂРѕР±СѓРµРј РЅР°Р№С‚Рё
 1592:         room = db.rooms.find_one({"name": room_id}, {"_id": 1})
 1593:         if not room:
 1594:             return jsonify({"ok": False, "error": "room_not_found"}), 404
 1595:         room_oid = room["_id"]
 1596: 
 1597:     try:
 1598:         day_start = datetime.strptime(date_s, "%Y-%m-%d")
 1599:     except Exception:
 1600:         return jsonify({"ok": False, "error": "bad_date"}), 400
 1601: 
 1602:     day_end = day_start + timedelta(days=1)
 1603: 
 1604:     # Р‘РµСЂС‘Рј РІСЃРµ РїСЂРёС‘РјС‹ РІ СЌС‚РѕРј РєР°Р±РёРЅРµС‚Рµ, РїРµСЂРµСЃРµРєР°СЋС‰РёРµ РґРµРЅСЊ
 1605:     cur = db.appointments.find(
 1606:         {"room_id": room_oid, "start": {"$lt": day_end}, "end": {"$gt": day_start}},
 1607:         {"start": 1, "end": 1},
 1608:     )
 1609: 
 1610:     items = []
 1611:     for a in cur:
 1612:         st = max(a.get("start"), day_start)
 1613:         en = min(a.get("end"), day_end)
 1614:         if not isinstance(st, datetime) or not isinstance(en, datetime) or en <= st:
 1615:             continue
 1616:         items.append(
 1617:             {
 1618:                 "start": st.strftime("%H:%M"),
 1619:                 "end": en.strftime("%H:%M"),
 1620:             }
 1621:         )
 1622: 
 1623:     # РћС‚СЃРѕСЂС‚РёСЂСѓРµРј РїРѕ РЅР°С‡Р°Р»Сѓ
 1624:     items.sort(key=lambda x: x["start"])
 1625:     return jsonify({"ok": True, "items": items})
 1626: 
 1627: 
 1628: # === РЈРґР°Р»РµРЅРёРµ РїСЂРёС‘РјР° ===
 1629: @app.route("/delete_appointment/<id>", methods=["POST"])
 1630: def delete_appointment(id):
 1631:     try:
 1632:         oid = ObjectId(id)
 1633:     except Exception:
 1634:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1635: 
 1636:     appt = db.appointments.find_one({"_id": oid}, {"room_id": 1})
 1637:     if not appt:
 1638:         return jsonify({"ok": False, "error": "not_found"}), 404
 1639: 
 1640:     room_id = appt.get("room_id")
 1641: 
 1642:     db.appointments.delete_one({"_id": oid})
 1643: 
 1644:     # РџРµСЂРµСЃС‡РёС‚Р°С‚СЊ СЃС‚Р°С‚СѓСЃ РєР°Р±РёРЅРµС‚Р°
 1645:     try:
 1646:         if room_id:
 1647:             recalc_room_status(room_id)
 1648:     except Exception:
 1649:         pass
 1650: 
 1651:     return jsonify({"ok": True})
 1652: 
 1653: 
 1654: # --- 2.3.1: РїРѕР»СѓС‡РёС‚СЊ Р·Р°РїРёСЃСЊ РґР»СЏ РјРѕРґР°Р»РєРё ---
 1655: @app.route("/api/appointments/<id>")
 1656: def api_appointment_get(id):
 1657:     try:
 1658:         oid = ObjectId(id)
 1659:     except Exception:
 1660:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1661: 
 1662:     a = db.appointments.find_one({"_id": oid})
 1663:     if not a:
 1664:         return jsonify({"ok": False, "error": "not_found"}), 404
 1665: 
 1666:     def strid(v):  # Р°РєРєСѓСЂР°С‚РЅРѕ РїСЂРёРІРѕРґРёРј Рє СЃС‚СЂРѕРєРµ
 1667:         return str(v) if isinstance(v, ObjectId) else (v or "")
 1668: 
 1669:     def fmt(dt):
 1670:         return dt.strftime("%Y-%m-%dT%H:%M") if isinstance(dt, datetime) else ""
 1671: 
 1672:     return jsonify(
 1673:         {
 1674:             "ok": True,
 1675:             "item": {
 1676:                 "id": str(a["_id"]),
 1677:                 "doctor_id": strid(a.get("doctor_id")),
 1678:                 "patient_id": strid(a.get("patient_id")),
 1679:                 "service_id": strid(a.get("service_id")),
 1680:                 "room_id": strid(a.get("room_id")),
 1681:                 "status_key": a.get("status_key", "scheduled"),
 1682:                 "comment": a.get("comment", ""),
 1683:                 "start": fmt(a.get("start")),
 1684:                 "end": fmt(a.get("end")),
 1685:             },
 1686:         }
 1687:     )
 1688: 
 1689: 
 1690: # --- 2.3.2: РїРѕР»РЅРѕРµ РѕР±РЅРѕРІР»РµРЅРёРµ Р·Р°РїРёСЃРё РёР· РјРѕРґР°Р»РєРё ---
 1691: @app.route("/api/appointments/<id>/update", methods=["POST"])
 1692: def api_appointment_update(id):
 1693:     data = request.get_json(force=True, silent=True) or {}
 1694:     try:
 1695:         oid = ObjectId(id)
 1696:     except Exception:
 1697:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1698: 
 1699:     a = db.appointments.find_one({"_id": oid})
 1700:     if not a:
 1701:         return jsonify({"ok": False, "error": "not_found"}), 404
 1702: 
 1703:     # СЃРѕР±СЂР°С‚СЊ РѕР±РЅРѕРІР»РµРЅРёСЏ
 1704:     updates = {}
 1705: 
 1706:     # РїСЂРёРІСЏР·РєРё
 1707:     def as_oid(key):
 1708:         v = data.get(key)
 1709:         if not v:
 1710:             return None
 1711:         try:
 1712:             return ObjectId(v)
 1713:         except Exception:
 1714:             return None
 1715: 
 1716:     doc_oid = as_oid("doctor_id")
 1717:     pat_oid = as_oid("patient_id")
 1718:     srv_oid = as_oid("service_id")
 1719:     room_oid = as_oid("room_id") or a.get("room_id")
 1720: 
 1721:     if doc_oid:
 1722:         updates["doctor_id"] = doc_oid
 1723:     if pat_oid:
 1724:         updates["patient_id"] = pat_oid
 1725:     if srv_oid:
 1726:         updates["service_id"] = srv_oid
 1727:     if room_oid:
 1728:         updates["room_id"] = room_oid
 1729: 
 1730:     # СЃС‚Р°С‚СѓСЃ/РєРѕРјРјРµРЅС‚
 1731:     if "status_key" in data:
 1732:         updates["status_key"] = (data.get("status_key") or "scheduled").strip()
 1733:     if "comment" in data:
 1734:         updates["comment"] = (data.get("comment") or "").strip()
 1735: 
 1736:     # РІСЂРµРјСЏ
 1737:     start_dt = to_dt(data.get("start")) or a.get("start")
 1738:     end_dt = to_dt(data.get("end")) or a.get("end")
 1739: 
 1740:     # РµСЃР»Рё РєРѕРЅРµС† РЅРµ Р·Р°РґР°РЅ вЂ” РІС‹С‡РёСЃР»РёРј РїРѕ СѓСЃР»СѓРіРµ (РёР»Рё 30 РјРёРЅ)
 1741:     if not end_dt:
 1742:         dur = 30
 1743:         if srv_oid:
 1744:             srv = db.services.find_one({"_id": srv_oid}, {"duration_min": 1})
 1745:             if srv:
 1746:                 try:
 1747:                     dur = int(srv.get("duration_min", 30))
 1748:                 except Exception:
 1749:                     dur = 30
 1750:         end_dt = add_minutes(start_dt, dur)
 1751: 
 1752:     if not isinstance(start_dt, datetime) or not isinstance(end_dt, datetime) or end_dt <= start_dt:
 1753:         return jsonify({"ok": False, "error": "bad_dates"}), 400
 1754: 
 1755:     updates["start"] = start_dt
 1756:     updates["end"] = end_dt
 1757: 
 1758:     # РєРѕРЅС„Р»РёРєС‚ РїРѕ РєР°Р±РёРЅРµС‚Сѓ
 1759:     if room_oid:
 1760:         conflict = db.appointments.find_one(
 1761:             {
 1762:                 "_id": {"$ne": oid},
 1763:                 "room_id": room_oid,
 1764:                 "start": {"$lt": end_dt},
 1765:                 "end": {"$gt": start_dt},
 1766:             }
 1767:         )
 1768:         if conflict:
 1769:             return jsonify({"ok": False, "error": "room_conflict"}), 409
 1770: 
 1771:     db.appointments.update_one({"_id": oid}, {"$set": updates})
 1772:     try:
 1773:         recalc_room_status(room_oid)
 1774:     except Exception:
 1775:         pass
 1776: 
 1777:     return jsonify({"ok": True})
 1778: 
 1779: 
 1780: # --- 2.3.3: РїРµСЂРµРЅРѕСЃ/СЂР°СЃС‚СЏРіРёРІР°РЅРёРµ СЃРѕР±С‹С‚РёСЏ РјС‹С€РєРѕР№ (DnD/resize) ---
 1781: @app.route("/api/appointments/update_time", methods=["POST"])
 1782: def api_appointments_update_time():
 1783:     data = request.get_json(force=True, silent=True) or {}
 1784:     appt_id = data.get("id")
 1785:     start_s = data.get("start")
 1786:     end_s = data.get("end")
 1787: 
 1788:     if not appt_id or not start_s or not end_s:
 1789:         return jsonify({"ok": False, "error": "bad_params"}), 400
 1790: 
 1791:     try:
 1792:         oid = ObjectId(appt_id)
 1793:     except Exception:
 1794:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1795: 
 1796:     start_dt = to_dt(start_s)
 1797:     end_dt = to_dt(end_s)
 1798:     if not isinstance(start_dt, datetime) or not isinstance(end_dt, datetime) or end_dt <= start_dt:
 1799:         return jsonify({"ok": False, "error": "bad_dates"}), 400
 1800: 
 1801:     appt = db.appointments.find_one({"_id": oid}, {"room_id": 1})
 1802:     if not appt:
 1803:         return jsonify({"ok": False, "error": "not_found"}), 404
 1804: 
 1805:     room_id = appt.get("room_id")
 1806: 
 1807:     # РєРѕРЅС„Р»РёРєС‚ РїРѕ РєР°Р±РёРЅРµС‚Сѓ
 1808:     if room_id:
 1809:         conflict = db.appointments.find_one(
 1810:             {
 1811:                 "_id": {"$ne": oid},
 1812:                 "room_id": room_id,
 1813:                 "start": {"$lt": end_dt},
 1814:                 "end": {"$gt": start_dt},
 1815:             }
 1816:         )
 1817:         if conflict:
 1818:             return jsonify({"ok": False, "error": "room_conflict"}), 409
 1819: 
 1820:     db.appointments.update_one({"_id": oid}, {"$set": {"start": start_dt, "end": end_dt}})
 1821:     try:
 1822:         recalc_room_status(room_id)
 1823:     except Exception:
 1824:         pass
 1825: 
 1826:     return jsonify({"ok": True})
 1827: 
 1828: 
 1829: # Р»С‘РіРєРёРµ СЃРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ С„СЂРѕРЅС‚Р°
 1830: @app.route("/api/services_min")
 1831: def api_services_min():
 1832:     items = []
 1833:     for s in db.services.find({}, {"name": 1, "duration_min": 1}).sort("name", 1):
 1834:         items.append(
 1835:             {"id": str(s["_id"]), "name": s["name"], "duration_min": s.get("duration_min", 30)}
 1836:         )
 1837:     return jsonify(items)
 1838: 
 1839: 
 1840: @app.route("/api/visit_statuses_min")
 1841: def api_visit_statuses_min():
 1842:     items = []
 1843:     for s in db.visit_statuses.find({}, {"key": 1, "title": 1}).sort("title", 1):
 1844:         items.append({"key": s["key"], "title": s["title"]})
 1845:     return jsonify(items)
 1846: 
 1847: 
 1848: @app.route("/api/finance/record", methods=["POST"])
 1849: def api_finance_record():
 1850:     data = request.get_json(force=True, silent=True) or {}
 1851:     pid = oid(data.get("patient_id"))
 1852:     kind = data.get("kind")  # payment | deposit | expense | payroll | procurement
 1853:     amount = int(data.get("amount", 0) or 0)
 1854:     source = data.get("source")  # alpha | sber | cash
 1855:     comment = (data.get("comment") or "").strip()
 1856:     doctor_id = oid(data.get("doctor_id")) if data.get("doctor_id") else None
 1857:     service_id = oid(data.get("service_id")) if data.get("service_id") else None
 1858:     expense_cat = data.get("expense_cat")  # rent/procurement/marketing/dividends/other
 1859: 
 1860:     if not kind or amount <= 0:
 1861:         return jsonify({"ok": False, "error": "bad_params"}), 400
 1862: 
 1863:     # СЃС‚СЂРѕРіРѕ РёР· РїСЂР°Р№СЃР°: РµСЃР»Рё СѓРєР°Р·Р°РЅ service_id РїСЂРё payment вЂ” РґРѕР±Р°РІРёРј СЃРµСЂРІРёСЃ-С‡Р°СЂРґР¶ (С‡С‚РѕР±С‹ РґРѕР»Рі СЃС‡РёС‚Р°Р»СЃСЏ)
 1864:     ts = datetime.now()
 1865:     doc = {
 1866:         "patient_id": pid,
 1867:         "kind": kind,
 1868:         "amount": amount,
 1869:         "source": source,
 1870:         "comment": comment,
 1871:         "doctor_id": doctor_id,
 1872:         "service_id": service_id,
 1873:         "expense_cat": expense_cat,
 1874:         "ts": ts,
 1875:         "ts_iso": ts.strftime("%Y-%m-%dT%H:%M"),
 1876:     }
 1877:     db.ledger.insert_one(doc)
 1878: 
 1879:     # РµСЃР»Рё РІС‹Р±СЂР°РЅР° СѓСЃР»СѓРіР° Рё СЌС‚Рѕ РѕРїР»Р°С‚Р° СѓСЃР»СѓРіРё вЂ” РґРѕР±Р°РІРёРј СЃС‚СЂРѕРєСѓ service_charge (РµСЃР»Рё РµС‘ РµС‰С‘ РЅРµС‚ РЅР° СЌС‚РѕС‚ РІРёР·РёС‚)
 1880:     if kind == "payment" and service_id:
 1881:         s = db.services.find_one({"_id": service_id}, {"price": 1})
 1882:         price = int((s or {}).get("price", 0) or 0)
 1883:         if price > 0:
 1884:             db.ledger.insert_one(
 1885:                 {
 1886:                     "patient_id": pid,
 1887:                     "kind": "service_charge",
 1888:                     "amount": price,
 1889:                     "source": None,
 1890:                     "comment": f"РќР°С‡РёСЃР»РµРЅРёРµ Р·Р° СѓСЃР»СѓРіСѓ",
 1891:                     "service_id": service_id,
 1892:                     "ts": ts,
 1893:                     "ts_iso": doc["ts_iso"],
 1894:                 }
 1895:             )
 1896: 
 1897:     return jsonify({"ok": True})
 1898: 
 1899: 
 1900: @app.route("/api/chat/<id>/send", methods=["POST"])
 1901: def api_chat_send(id):
 1902:     _id = oid(id)
 1903:     if not _id:
 1904:         return jsonify({"ok": False, "error": "bad_id"}), 400
 1905:     data = request.get_json(force=True, silent=True) or {}
 1906:     text = (data.get("text") or "").strip()
 1907:     if not text:
 1908:         return jsonify({"ok": False, "error": "empty"}), 400
 1909:     ts = datetime.now()
 1910:     db.messages.insert_one(
 1911:         {
 1912:             "patient_id": _id,
 1913:             "from": "admin",  # РґР°Р»СЊС€Рµ РјРѕР¶РµРј С…СЂР°РЅРёС‚СЊ user_id СЂРѕР»Рё (Р°РґРјРёРЅ/РєСѓСЂР°С‚РѕСЂ)
 1914:             "text": text,
 1915:             "ts": ts,
 1916:             "ts_iso": ts.strftime("%Y-%m-%dT%H:%M"),
 1917:         }
 1918:     )
 1919:     return jsonify({"ok": True})
 1920: 
 1921: 
 1922: # ===================== РЈРЎР›РЈР“Р (services) =====================
 1923: 
 1924: 
 1925: def _service_form_data():
 1926:     """РЎС‡РёС‚С‹РІР°РµРј Рё РІР°Р»РёРґРёСЂСѓРµРј РїРѕР»СЏ С„РѕСЂРјС‹ СѓСЃР»СѓРіРё."""
 1927:     name = (request.form.get("name") or "").strip()
 1928:     code = (request.form.get("code") or "").strip().upper()
 1929:     description = (request.form.get("description") or "").strip()
 1930:     price = request.form.get("price") or ""
 1931:     duration_min = request.form.get("duration_min") or ""
 1932:     color = request.form.get("color") or "#3498db"
 1933:     is_active = True if request.form.get("is_active") == "on" else False
 1934: 
 1935:     errors = []
 1936:     if not name:
 1937:         errors.append("РќР°Р·РІР°РЅРёРµ РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ.")
 1938:     if not code:
 1939:         errors.append("РљРѕРґ РѕР±СЏР·Р°С‚РµР»РµРЅ.")
 1940:     try:
 1941:         price = int(price)
 1942:         if price < 0:
 1943:             errors.append("Р¦РµРЅР° РЅРµ РјРѕР¶РµС‚ Р±С‹С‚СЊ РѕС‚СЂРёС†Р°С‚РµР»СЊРЅРѕР№.")
 1944:     except ValueError:
 1945:         errors.append("Р¦РµРЅР° РґРѕР»Р¶РЅР° Р±С‹С‚СЊ С‡РёСЃР»РѕРј.")
 1946:     try:
 1947:         duration_min = int(duration_min)
 1948:         if duration_min <= 0:
 1949:             errors.append("Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ > 0.")
 1950:     except ValueError:
 1951:         errors.append("Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ С‡РёСЃР»РѕРј.")
 1952: 
 1953:     data = {
 1954:         "name": name,
 1955:         "code": code,
 1956:         "description": description,
 1957:         "price": price if not isinstance(price, str) else 0,
 1958:         "duration_min": duration_min if not isinstance(duration_min, str) else 30,
 1959:         "color": color,
 1960:         "is_active": is_active,
 1961:     }
 1962:     return data, errors
 1963: 
 1964: 
 1965: @app.route("/services")
 1966: def services_list():
 1967:     q = {}
 1968:     status = request.args.get("status")
 1969:     if status == "active":
 1970:         q["is_active"] = True
 1971:     elif status == "archived":
 1972:         q["is_active"] = False
 1973: 
 1974:     items = list(db.services.find(q).sort([("is_active", -1), ("name", 1)]))
 1975:     return render_template("services.html", items=items)
 1976: 
 1977: 
 1978: @app.route("/add_service", methods=["GET", "POST"])
 1979: def add_service():
 1980:     if request.method == "POST":
 1981:         data, errors = _service_form_data()
 1982:         # РїСЂРѕРІРµСЂРєР° СѓРЅРёРєР°Р»СЊРЅРѕСЃС‚Рё РєРѕРґР°
 1983:         if db.services.find_one({"code": data["code"]}):
 1984:             errors.append("РљРѕРґ СѓСЃР»СѓРіРё СѓР¶Рµ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ.")
 1985:         if errors:
 1986:             for e in errors:
 1987:                 flash(e, "danger")
 1988:             return render_template("add_service.html", form=data)
 1989:         data["created_at"] = datetime.utcnow()
 1990:         data["updated_at"] = datetime.utcnow()
 1991:         db.services.insert_one(data)
 1992:         flash("РЈСЃР»СѓРіР° РґРѕР±Р°РІР»РµРЅР°.", "success")
 1993:         return redirect(url_for("services_list"))
 1994:     # GET
 1995:     return render_template(
 1996:         "add_service.html",
 1997:         form={"color": "#3498db", "duration_min": 30, "price": 0, "is_active": True},
 1998:     )
 1999: 
 2000: 
 2001: @app.route("/edit_service/<id>", methods=["GET", "POST"])
 2002: def edit_service(id):
 2003:     item = db.services.find_one({"_id": ObjectId(id)})
 2004:     if not item:
 2005:         flash("РЈСЃР»СѓРіР° РЅРµ РЅР°Р№РґРµРЅР°.", "danger")
 2006:         return redirect(url_for("services_list"))
 2007: 
 2008:     if request.method == "POST":
 2009:         data, errors = _service_form_data()
 2010:         # СѓРЅРёРєР°Р»СЊРЅРѕСЃС‚СЊ РєРѕРґР° (РЅРµ СЃС‡РёС‚Р°СЏ С‚РµРєСѓС‰СѓСЋ Р·Р°РїРёСЃСЊ)
 2011:         other = db.services.find_one({"code": data["code"], "_id": {"$ne": ObjectId(id)}})
 2012:         if other:
 2013:             errors.append("РљРѕРґ СѓСЃР»СѓРіРё СѓР¶Рµ РёСЃРїРѕР»СЊР·СѓРµС‚СЃСЏ.")
 2014:         if errors:
 2015:             for e in errors:
 2016:                 flash(e, "danger")
 2017:             # РІРµСЂРЅСѓС‚СЊ РІРІРµРґС‘РЅРЅС‹Рµ РґР°РЅРЅС‹Рµ
 2018:             item.update(data)
 2019:             return render_template("edit_service.html", item=item)
 2020:         db.services.update_one(
 2021:             {"_id": ObjectId(id)}, {"$set": {**data, "updated_at": datetime.utcnow()}}
 2022:         )
 2023:         flash("РР·РјРµРЅРµРЅРёСЏ СЃРѕС…СЂР°РЅРµРЅС‹.", "success")
 2024:         return redirect(url_for("services_list"))
 2025: 
 2026:     return render_template("edit_service.html", item=item)
 2027: 
 2028: 
 2029: @app.route("/delete_service/<id>", methods=["POST"])
 2030: def delete_service(id):
 2031:     db.services.delete_one({"_id": ObjectId(id)})
 2032:     flash("РЈСЃР»СѓРіР° СѓРґР°Р»РµРЅР°.", "success")
 2033:     return redirect(url_for("services_list"))
 2034: 
 2035: 
 2036: # =================== /РЈРЎР›РЈР“Р (services) ======================
 2037: 
 2038: # ===================== РљРђР‘РРќР•РўР« (rooms) =====================
 2039: 
 2040: # РЎРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ СѓРґРѕР±РЅРѕРіРѕ РІС‹Р±РѕСЂР° РІ С„РѕСЂРјР°С…
 2041: ROOM_TYPES = [
 2042:     ("РўРµСЂР°РїРёСЏ", "РўРµСЂР°РїРёСЏ"),
 2043:     ("РҐРёСЂСѓСЂРіРёСЏ", "РҐРёСЂСѓСЂРіРёСЏ"),
 2044:     ("Р РµРЅС‚РіРµРЅ", "Р РµРЅС‚РіРµРЅ"),
 2045:     ("Р“РёРіРёРµРЅР°", "Р“РёРіРёРµРЅР°"),
 2046:     ("РћСЂС‚РѕРїРµРґРёСЏ", "РћСЂС‚РѕРїРµРґРёСЏ"),
 2047:     ("РћСЂС‚РѕРґРѕРЅС‚РёСЏ", "РћСЂС‚РѕРґРѕРЅС‚РёСЏ"),
 2048: ]
 2049: ROOM_STATUSES = [
 2050:     ("available", "РЎРІРѕР±РѕРґРµРЅ"),
 2051:     ("occupied", "Р—Р°РЅСЏС‚"),
 2052:     ("maintenance", "РћР±СЃР»СѓР¶РёРІР°РЅРёРµ"),
 2053: ]
 2054: 
 2055: 
 2056: def _room_form_data():
 2057:     name = (request.form.get("name") or "").strip()
 2058:     rtype = (request.form.get("type") or "").strip()
 2059:     status = (request.form.get("status") or "available").strip()
 2060:     color = (request.form.get("color") or "#1abc9c").strip()
 2061:     errors = []
 2062:     if not name:
 2063:         errors.append("РќР°Р·РІР°РЅРёРµ РєР°Р±РёРЅРµС‚Р° РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ.")
 2064:     if rtype not in [t[0] for t in ROOM_TYPES]:
 2065:         errors.append("РќРµРєРѕСЂСЂРµРєС‚РЅС‹Р№ С‚РёРї РєР°Р±РёРЅРµС‚Р°.")
 2066:     if status not in [s[0] for s in ROOM_STATUSES]:
 2067:         errors.append("РќРµРєРѕСЂСЂРµРєС‚РЅС‹Р№ СЃС‚Р°С‚СѓСЃ РєР°Р±РёРЅРµС‚Р°.")
 2068:     return {"name": name, "type": rtype, "status": status, "color": color}, errors
 2069: 
 2070: 
 2071: @app.route("/rooms")
 2072: def rooms_list():
 2073:     items = list(db.rooms.find({}).sort([("name", 1)]))
 2074:     # Р”Р»СЏ С‚СѓР»С‚РёРїР° СЃС‚Р°С‚СѓСЃР° РЅР° СЂСѓСЃСЃРєРѕРј
 2075:     status_title = dict(ROOM_STATUSES)
 2076:     return render_template("rooms.html", items=items, status_title=status_title)
 2077: 
 2078: 
 2079: @app.route("/add_room", methods=["GET", "POST"])
 2080: def add_room():
 2081:     if request.method == "POST":
 2082:         data, errors = _room_form_data()
 2083:         # СѓРЅРёРєР°Р»СЊРЅРѕСЃС‚СЊ РёРјРµРЅРё РєР°Р±РёРЅРµС‚Р°
 2084:         if db.rooms.find_one({"name": data["name"]}):
 2085:             errors.append("РљР°Р±РёРЅРµС‚ СЃ С‚Р°РєРёРј РЅР°Р·РІР°РЅРёРµРј СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.")
 2086:         if errors:
 2087:             for e in errors:
 2088:                 flash(e, "danger")
 2089:             return render_template(
 2090:                 "add_room.html", form=data, ROOM_TYPES=ROOM_TYPES, ROOM_STATUSES=ROOM_STATUSES
 2091:             )
 2092:         data["created_at"] = datetime.utcnow()
 2093:         data["updated_at"] = datetime.utcnow()
 2094:         db.rooms.insert_one(data)
 2095:         flash("РљР°Р±РёРЅРµС‚ РґРѕР±Р°РІР»РµРЅ.", "success")
 2096:         return redirect(url_for("rooms_list"))
 2097: 
 2098:     # GET
 2099:     return render_template(
 2100:         "add_room.html",
 2101:         form={"type": "РўРµСЂР°РїРёСЏ", "status": "available", "color": "#1abc9c"},
 2102:         ROOM_TYPES=ROOM_TYPES,
 2103:         ROOM_STATUSES=ROOM_STATUSES,
 2104:     )
 2105: 
 2106: 
 2107: @app.route("/edit_room/<id>", methods=["GET", "POST"])
 2108: def edit_room(id):
 2109:     item = db.rooms.find_one({"_id": ObjectId(id)})
 2110:     if not item:
 2111:         flash("РљР°Р±РёРЅРµС‚ РЅРµ РЅР°Р№РґРµРЅ.", "danger")
 2112:         return redirect(url_for("rooms_list"))
 2113: 
 2114:     if request.method == "POST":
 2115:         data, errors = _room_form_data()
 2116:         # СѓРЅРёРєР°Р»СЊРЅРѕСЃС‚СЊ РёРјРµРЅРё (РєСЂРѕРјРµ С‚РµРєСѓС‰РµРіРѕ)
 2117:         other = db.rooms.find_one({"name": data["name"], "_id": {"$ne": ObjectId(id)}})
 2118:         if other:
 2119:             errors.append("РљР°Р±РёРЅРµС‚ СЃ С‚Р°РєРёРј РЅР°Р·РІР°РЅРёРµРј СѓР¶Рµ СЃСѓС‰РµСЃС‚РІСѓРµС‚.")
 2120:         if errors:
 2121:             for e in errors:
 2122:                 flash(e, "danger")
 2123:             item.update(data)
 2124:             return render_template(
 2125:                 "edit_room.html", item=item, ROOM_TYPES=ROOM_TYPES, ROOM_STATUSES=ROOM_STATUSES
 2126:             )
 2127:         db.rooms.update_one(
 2128:             {"_id": ObjectId(id)}, {"$set": {**data, "updated_at": datetime.utcnow()}}
 2129:         )
 2130:         flash("РР·РјРµРЅРµРЅРёСЏ СЃРѕС…СЂР°РЅРµРЅС‹.", "success")
 2131:         return redirect(url_for("rooms_list"))
 2132: 
 2133:     return render_template(
 2134:         "edit_room.html", item=item, ROOM_TYPES=ROOM_TYPES, ROOM_STATUSES=ROOM_STATUSES
 2135:     )
 2136: 
 2137: 
 2138: @app.route("/delete_room/<id>", methods=["POST"])
 2139: def delete_room(id):
 2140:     db.rooms.delete_one({"_id": ObjectId(id)})
 2141:     flash("РљР°Р±РёРЅРµС‚ СѓРґР°Р»С‘РЅ.", "success")
 2142:     return redirect(url_for("rooms_list"))
 2143: 
 2144: 
 2145: # =================== /РљРђР‘РРќР•РўР« (rooms) ======================
 2146: 
 2147: # ===================== РџРђР¦РР•РќРўР« (patients) =====================
 2148: 
 2149: 
 2150: def _patient_form_data():
 2151:     full_name = (request.form.get("full_name") or "").strip()
 2152:     birthday = (request.form.get("birthday") or "").strip()  # 'YYYY-MM-DD'
 2153:     gender = (request.form.get("gender") or "").strip()  # male/female/other
 2154:     phone = (request.form.get("phone") or "").strip()
 2155:     email = (request.form.get("email") or "").strip()
 2156:     whatsapp = (request.form.get("whatsapp") or "").strip()
 2157:     telegram = (request.form.get("telegram") or "").strip()
 2158:     city = (request.form.get("city") or "").strip()
 2159:     street = (request.form.get("street") or "").strip()
 2160:     zipc = (request.form.get("zip") or "").strip()
 2161:     notes = (request.form.get("notes") or "").strip()
 2162:     avatar = (
 2163:         request.form.get("avatar") or ""
 2164:     ).strip()  # РѕС‚РЅРѕСЃРёС‚РµР»СЊРЅС‹Р№ РїСѓС‚СЊ '/static/avatars/patients/p1.jpg'
 2165: 
 2166:     errors = []
 2167:     if not full_name:
 2168:         errors.append("Р¤РРћ РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ.")
 2169:     # РїСЂРѕСЃС‚Р°СЏ РІР°Р»РёРґР°С†РёСЏ РґР°С‚С‹
 2170:     bdate = None
 2171:     if birthday:
 2172:         try:
 2173:             bdate = datetime.strptime(birthday, "%Y-%m-%d")
 2174:         except ValueError:
 2175:             errors.append("Р”Р°С‚Р° СЂРѕР¶РґРµРЅРёСЏ РґРѕР»Р¶РЅР° Р±С‹С‚СЊ РІ С„РѕСЂРјР°С‚Рµ Р“Р“Р“Р“-РњРњ-Р”Р”.")
 2176: 
 2177:     data = {
 2178:         "full_name": full_name,
 2179:         "birthday": bdate,
 2180:         "gender": gender or "other",
 2181:         "contacts": {"phone": phone, "email": email, "whatsapp": whatsapp, "telegram": telegram},
 2182:         "address": {"city": city, "street": street, "zip": zipc},
 2183:         "notes": notes,
 2184:         "avatar": avatar or "/static/avatars/patients/default.jpg",
 2185:         "updated_at": datetime.utcnow(),
 2186:     }
 2187:     return data, errors
 2188: 
 2189: 
 2190: @app.route("/patients")
 2191: def patients_list():
 2192:     q = {}
 2193:     # РџРѕРёСЃРє РїРѕ Р¤РРћ РёР»Рё С‚РµР»РµС„РѕРЅСѓ/РїРѕС‡С‚Рµ
 2194:     search = (request.args.get("q") or "").strip()
 2195:     if search:
 2196:         q = {
 2197:             "$or": [
 2198:                 {"full_name": {"$regex": search, "$options": "i"}},
 2199:                 {"contacts.phone": {"$regex": search, "$options": "i"}},
 2200:                 {"contacts.email": {"$regex": search, "$options": "i"}},
 2201:             ]
 2202:         }
 2203: 
 2204:     items = list(db.patients.find(q).sort([("full_name", 1)]))
 2205: 
 2206:     # РќРћР РњРђР›РР—РђР¦РРЇ: РіР°СЂР°РЅС‚РёСЂСѓРµРј contacts/avatar/Р°РґСЂРµСЃР°, СЃС‚СЂРѕРєРѕРІС‹Р№ _id
 2207:     for p in items:
 2208:         p["_id"] = str(p.get("_id"))
 2209:         # contacts
 2210:         contacts = p.get("contacts") or {}
 2211:         if not isinstance(contacts, dict):
 2212:             contacts = {}
 2213:         contacts.setdefault("phone", "")
 2214:         contacts.setdefault("email", "")
 2215:         contacts.setdefault("whatsapp", "")
 2216:         contacts.setdefault("telegram", "")
 2217:         p["contacts"] = contacts
 2218:         # avatar
 2219:         if not p.get("avatar"):
 2220:             p["avatar"] = "/static/avatars/patients/default.jpg"
 2221:         # address
 2222:         addr = p.get("address") or {}
 2223:         if not isinstance(addr, dict):
 2224:             addr = {}
 2225:         addr.setdefault("city", "")
 2226:         addr.setdefault("street", "")
 2227:         addr.setdefault("zip", "")
 2228:         p["address"] = addr
 2229: 
 2230:     # Р‘С‹СЃС‚СЂС‹Р№ СЃС‡С‘С‚С‡РёРє РІРёР·РёС‚РѕРІ
 2231:     appts_count = {}
 2232:     if items:
 2233:         ids = [ObjectId(p["_id"]) for p in items if p.get("_id")]
 2234:         if ids:
 2235:             pipeline = [
 2236:                 {"$match": {"patient_id": {"$in": ids}}},
 2237:                 {"$group": {"_id": "$patient_id", "cnt": {"$sum": 1}}},
 2238:             ]
 2239:             for r in db.appointments.aggregate(pipeline):
 2240:                 appts_count[str(r["_id"])] = r["cnt"]
 2241: 
 2242:     return render_template("patients.html", items=items, appts_count=appts_count, search=search)
 2243: 
 2244: 
 2245: @app.route("/add_patient", methods=["GET", "POST"])
 2246: def add_patient():
 2247:     if request.method == "POST":
 2248:         data, errors = _patient_form_data()
 2249:         if errors:
 2250:             for e in errors:
 2251:                 flash(e, "danger")
 2252:             return render_template("add_patient.html", form=data)
 2253:         data["created_at"] = datetime.utcnow()
 2254:         db.patients.insert_one(data)
 2255:         flash("РџР°С†РёРµРЅС‚ РґРѕР±Р°РІР»РµРЅ.", "success")
 2256:         return redirect(url_for("patients_list"))
 2257:     # GET
 2258:     return render_template("add_patient.html", form={})
 2259: 
 2260: 
 2261: @app.route("/edit_patient/<id>", methods=["GET", "POST"])
 2262: def edit_patient(id):
 2263:     item = db.patients.find_one({"_id": ObjectId(id)})
 2264:     if not item:
 2265:         flash("РџР°С†РёРµРЅС‚ РЅРµ РЅР°Р№РґРµРЅ.", "danger")
 2266:         return redirect(url_for("patients_list"))
 2267: 
 2268:     if request.method == "POST":
 2269:         data, errors = _patient_form_data()
 2270:         if errors:
 2271:             for e in errors:
 2272:                 flash(e, "danger")
 2273:             # РїРѕРґСЃС‚Р°РІРёРј РѕР±СЂР°С‚РЅРѕ РІРІРµРґС‘РЅРЅС‹Рµ Р·РЅР°С‡РµРЅРёСЏ
 2274:             item.update(data)
 2275:             return render_template("edit_patient.html", item=item)
 2276:         db.patients.update_one({"_id": ObjectId(id)}, {"$set": data})
 2277:         flash("РР·РјРµРЅРµРЅРёСЏ СЃРѕС…СЂР°РЅРµРЅС‹.", "success")
 2278:         return redirect(url_for("patients_list"))
 2279: 
 2280:     # GET
 2281:     return render_template("edit_patient.html", item=item)
 2282: 
 2283: 
 2284: @app.route("/delete_patient/<id>", methods=["POST"])
 2285: def delete_patient(id):
 2286:     db.patients.delete_one({"_id": ObjectId(id)})
 2287:     # СЃРІСЏР·Р°РЅРЅС‹Рµ РІРёР·РёС‚С‹ СѓРјС‹С€Р»РµРЅРЅРѕ РЅРµ С‚СЂРѕРіР°РµРј (РёСЃС‚РѕСЂРёС‡РЅРѕСЃС‚СЊ)
 2288:     flash("РџР°С†РёРµРЅС‚ СѓРґР°Р»С‘РЅ.", "success")
 2289:     return redirect(url_for("patients_list"))
 2290: 
 2291: 
 2292: @app.route("/patient_card/<id>")
 2293: def patient_card(id):
 2294:     try:
 2295:         oid = ObjectId(id)
 2296:     except Exception:
 2297:         flash("РќРµРєРѕСЂСЂРµРєС‚РЅС‹Р№ ID РїР°С†РёРµРЅС‚Р°.", "danger")
 2298:         return redirect(url_for("patients_list"))
 2299: 
 2300:     p = db.patients.find_one({"_id": oid})
 2301:     if not p:
 2302:         flash("РџР°С†РёРµРЅС‚ РЅРµ РЅР°Р№РґРµРЅ.", "danger")
 2303:         return redirect(url_for("patients_list"))
 2304: 
 2305:     # РќРѕСЂРјР°Р»РёР·СѓРµРј РїРѕР»СЏ, С‡С‚РѕР± С€Р°Р±Р»РѕРЅ РЅРµ РїР°РґР°Р»
 2306:     p.setdefault("card_no", "")
 2307:     p.setdefault("sex", "")
 2308:     p.setdefault("birthdate", "")  # С…СЂР°РЅРёРј СЃС‚СЂРѕРєРѕР№ 'YYYY-MM-DD'
 2309:     p.setdefault("phone", "")
 2310:     p.setdefault("email", "")
 2311:     p.setdefault("full_name", "")
 2312:     p.setdefault("notes", "")
 2313: 
 2314:     # РђРЅРєРµС‚Р°
 2315:     q = p.get("questionary", {}) or {}
 2316:     questionary = {
 2317:         "allergy": s(q.get("allergy")),
 2318:         "chronic": s(q.get("chronic")),
 2319:         "surgeries": s(q.get("surgeries")),
 2320:         "medications": s(q.get("medications")),
 2321:         "infections": s(q.get("infections")),
 2322:         "pregnancy": s(q.get("pregnancy")),
 2323:         "other": s(q.get("other")),
 2324:     }
 2325: 
 2326:     return render_template("patient_card.html", p=p, questionary=questionary)
 2327: 
 2328: 
 2329: @app.route("/api/patients/<id>/update_info", methods=["POST"])
 2330: def api_patient_update_info(id):
 2331:     try:
 2332:         oid = ObjectId(id)
 2333:     except Exception:
 2334:         return jsonify({"ok": False, "error": "bad_id"}), 400
 2335: 
 2336:     p = db.patients.find_one({"_id": oid})
 2337:     if not p:
 2338:         return jsonify({"ok": False, "error": "not_found"}), 404
 2339: 
 2340:     data = request.get_json(force=True, silent=True) or {}
 2341: 
 2342:     upd = {
 2343:         "full_name": s(data.get("full_name")),
 2344:         "phone": s(data.get("phone")),
 2345:         "email": s(data.get("email")),
 2346:         "sex": s(data.get("sex")),  # 'm' | 'f' | ''
 2347:         "birthdate": parse_date_yyyy_mm_dd(data.get("birthdate")),
 2348:         "notes": s(data.get("notes")),
 2349:     }
 2350: 
 2351:     # card_no РјРѕР¶РЅРѕ РјРµРЅСЏС‚СЊ РІСЂСѓС‡РЅСѓСЋ (РёР»Рё СЃРіРµРЅРµСЂРёСЂРѕРІР°С‚СЊ РѕС‚РґРµР»СЊРЅРѕР№ РєРЅРѕРїРєРѕР№)
 2352:     if "card_no" in data:
 2353:         upd["card_no"] = s(data.get("card_no"))
 2354: 
 2355:     db.patients.update_one({"_id": oid}, {"$set": upd})
 2356:     return jsonify({"ok": True})
 2357: 
 2358: 
 2359: @app.route("/api/patients/<id>/update_questionary", methods=["POST"])
 2360: def api_patient_update_questionary(id):
 2361:     try:
 2362:         oid = ObjectId(id)
 2363:     except Exception:
 2364:         return jsonify({"ok": False, "error": "bad_id"}), 400
 2365: 
 2366:     if not db.patients.find_one({"_id": oid}):
 2367:         return jsonify({"ok": False, "error": "not_found"}), 404
 2368: 
 2369:     data = request.get_json(force=True, silent=True) or {}
 2370:     q = {
 2371:         "allergy": s(data.get("allergy")),
 2372:         "chronic": s(data.get("chronic")),
 2373:         "surgeries": s(data.get("surgeries")),
 2374:         "medications": s(data.get("medications")),
 2375:         "infections": s(data.get("infections")),
 2376:         "pregnancy": s(data.get("pregnancy")),
 2377:         "other": s(data.get("other")),
 2378:     }
 2379:     db.patients.update_one({"_id": oid}, {"$set": {"questionary": q}})
 2380:     return jsonify({"ok": True})
 2381: 
 2382: 
 2383: @app.route("/api/patients/<id>/generate_card_no", methods=["POST"])
 2384: def api_patient_generate_card_no(id):
 2385:     try:
 2386:         oid = ObjectId(id)
 2387:     except Exception:
 2388:         return jsonify({"ok": False, "error": "bad_id"}), 400
 2389: 
 2390:     p = db.patients.find_one({"_id": oid})
 2391:     if not p:
 2392:         return jsonify({"ok": False, "error": "not_found"}), 404
 2393: 
 2394:     if s(p.get("card_no")):
 2395:         return jsonify({"ok": False, "error": "already_exists"}), 409
 2396: 
 2397:     cn = make_card_no()
 2398:     db.patients.update_one({"_id": oid}, {"$set": {"card_no": cn}})
 2399:     return jsonify({"ok": True, "card_no": cn})
 2400: 
 2401: 
 2402: @app.route("/api/patients/<id>/full")
 2403: def api_patient_full(id):
 2404:     _id = oid(id)
 2405:     if not _id:
 2406:         return jsonify({"ok": False, "error": "bad_id"}), 400
 2407: 
 2408:     p = db.patients.find_one({"_id": _id})
 2409:     if not p:
 2410:         return jsonify({"ok": False, "error": "not_found"}), 404
 2411: 
 2412:     # ledger (С„РёРЅР°РЅСЃРѕРІС‹Рµ РѕРїРµСЂР°С†РёРё)
 2413:     ledger = []
 2414:     for x in db.ledger.find({"patient_id": _id}).sort("ts", -1).limit(200):
 2415:         # РїРѕРґС‚СЏРЅРµРј РёРјСЏ СѓСЃР»СѓРіРё
 2416:         sname = ""
 2417:         sid = x.get("service_id")
 2418:         if sid:
 2419:             svc = db.services.find_one({"_id": sid}, {"name": 1})
 2420:             sname = svc.get("name", "") if svc else ""
 2421:         ledger.append(
 2422:             {
 2423:                 "ts": x.get("ts_iso") or iso_now(x.get("ts")),
 2424:                 "kind": x.get("kind", ""),
 2425:                 "amount": int(x.get("amount", 0) or 0),
 2426:                 "source": x.get("source", ""),
 2427:                 "service_name": sname,
 2428:                 "comment": x.get("comment", ""),
 2429:             }
 2430:         )
 2431: 
 2432:     # РґРѕР»РіРё/РґРµРїРѕР·РёС‚: РїСЂРѕСЃС‚Р°СЏ РјРѕРґРµР»СЊ
 2433:     # debt = СЃСѓРјРјР° СѓСЃР»СѓРі (kind=service_charge) - РѕРїР»Р°С‚С‹ (kind=payment) - СЃРїРёСЃР°РЅРёСЏ СЃ РґРµРїРѕР·РёС‚Р° (kind=deposit_use)
 2434:     # deposit = РІРЅРµСЃРµРЅРѕ (kind=deposit) - РёСЃРїРѕР»СЊР·РѕРІР°РЅРѕ (kind=deposit_use)
 2435:     svc_total = sum(
 2436:         int(x.get("amount", 0) or 0)
 2437:         for x in db.ledger.find({"patient_id": _id, "kind": "service_charge"})
 2438:     )
 2439:     pay_total = sum(
 2440:         int(x.get("amount", 0) or 0) for x in db.ledger.find({"patient_id": _id, "kind": "payment"})
 2441:     )
 2442:     dep_in = sum(
 2443:         int(x.get("amount", 0) or 0) for x in db.ledger.find({"patient_id": _id, "kind": "deposit"})
 2444:     )
 2445:     dep_use = sum(
 2446:         int(x.get("amount", 0) or 0)
 2447:         for x in db.ledger.find({"patient_id": _id, "kind": "deposit_use"})
 2448:     )
 2449: 
 2450:     debt = max(0, svc_total - pay_total - dep_use)
 2451:     deposit = max(0, dep_in - dep_use)
 2452: 
 2453:     # РїСЂРѕСЃС‚С‹Рµ Р°РіСЂРµРіР°С‚С‹ РґР»СЏ РєР°СЂС‚РѕС‡РєРё
 2454:     plans = list(db.plans.find({"patient_id": _id}, {"title": 1, "comment": 1}).sort("created", -1))
 2455:     plans = [{"title": pl.get("title", ""), "comment": pl.get("comment", "")} for pl in plans]
 2456: 
 2457:     # РїРѕСЃР»РµРґРЅРёРµ РІРёР·РёС‚С‹
 2458:     appts = []
 2459:     for a in db.appointments.find({"patient_id": _id}).sort("start", -1).limit(20):
 2460:         appts.append({"start": iso_now(a.get("start")), "title": a.get("title") or "Р’РёР·РёС‚"})
 2461: 
 2462:     survey = db.surveys.find_one({"patient_id": _id}) or {}
 2463:     survey = {
 2464:         "allergy": survey.get("allergy", ""),
 2465:         "chronic": survey.get("chronic", ""),
 2466:         "surgeries": survey.get("surgeries", ""),
 2467:         "other": survey.get("other", ""),
 2468:     }
 2469: 
 2470:     tasks = []
 2471:     for t in db.tasks.find({"patient_id": _id}).sort("created", -1).limit(50):
 2472:         tasks.append(
 2473:             {
 2474:                 "title": t.get("title", ""),
 2475:                 "status": t.get("status", "РІ СЂР°Р±РѕС‚Рµ"),
 2476:                 "deadline": t.get("deadline_iso", ""),
 2477:             }
 2478:         )
 2479: 
 2480:     chat = []
 2481:     for m in db.messages.find({"patient_id": _id}).sort("ts", -1).limit(50):
 2482:         chat.append(
 2483:             {
 2484:                 "from": m.get("from", "admin"),
 2485:                 "ts": m.get("ts_iso") or iso_now(m.get("ts")),
 2486:                 "text": m.get("text", ""),
 2487:             }
 2488:         )
 2489:     chat.reverse()
 2490: 
 2491:     return jsonify(
 2492:         {
 2493:             "ok": True,
 2494:             "patient": {
 2495:                 "id": id,
 2496:                 "full_name": p.get("full_name", ""),
 2497:                 "card_number": p.get("card_number", ""),
 2498:             },
 2499:             "stats": {
 2500:                 "debt": debt,
 2501:                 "deposit": deposit,
 2502:                 "incash": pay_total,  # СѓСЃР»РѕРІРЅРѕ РїРѕРєР°Р·С‹РІР°РµРј СЃСѓРјРјС‹ РѕРїР»Р°С‚ РєР°Рє "РІ РєР°СЃСЃРµ (РїР°С†РёРµРЅС‚)"
 2503:             },
 2504:             "ledger": ledger,
 2505:             "plans": plans,
 2506:             "appts": appts,
 2507:             "survey": survey,
 2508:             "tasks": tasks,
 2509:             "chat": chat,
 2510:         }
 2511:     )
 2512: 
 2513:     # РЅРѕСЂРјР°Р»РёР·Р°С†РёСЏ РїРѕР»РµР№, С‡С‚РѕР±С‹ С€Р°Р±Р»РѕРЅ РЅРµ РїР°РґР°Р»
 2514:     p["_id"] = str(p["_id"])
 2515:     contacts = p.get("contacts") or {}
 2516:     if not isinstance(contacts, dict):
 2517:         contacts = {}
 2518:     contacts.setdefault("phone", "")
 2519:     contacts.setdefault("email", "")
 2520:     contacts.setdefault("whatsapp", "")
 2521:     contacts.setdefault("telegram", "")
 2522:     p["contacts"] = contacts
 2523: 
 2524:     addr = p.get("address") or {}
 2525:     if not isinstance(addr, dict):
 2526:         addr = {}
 2527:     addr.setdefault("city", "")
 2528:     addr.setdefault("street", "")
 2529:     addr.setdefault("zip", "")
 2530:     p["address"] = addr
 2531: 
 2532:     if not p.get("avatar"):
 2533:         p["avatar"] = "/static/avatars/patients/default.jpg"
 2534: 
 2535:     # РїРѕСЃР»РµРґРЅРёРµ 50 РІРёР·РёС‚РѕРІ РїР°С†РёРµРЅС‚Р°
 2536:     visits = list(
 2537:         db.appointments.find({"patient_id": ObjectId(p["_id"])}).sort("start", -1).limit(50)
 2538:     )
 2539: 
 2540:     # СЃРїСЂР°РІРѕС‡РЅРёРєРё РґР»СЏ РѕС‚РѕР±СЂР°Р¶РµРЅРёСЏ
 2541:     doctor_map = {str(d["_id"]): d for d in db.doctors.find({}, {"full_name": 1})}
 2542:     service_map = {
 2543:         str(s["_id"]): s
 2544:         for s in db.services.find({}, {"name": 1, "price": 1, "color": 1, "duration_min": 1})
 2545:     }
 2546:     room_map = {str(r["_id"]): r for r in db.rooms.find({}, {"name": 1})}
 2547:     status_map = {
 2548:         s["key"]: s for s in db.visit_statuses.find({}, {"key": 1, "title": 1, "color": 1})
 2549:     }
 2550: 
 2551:     # РїСЂРёРІРѕРґРёРј СЃРѕР±С‹С‚РёСЏ Рє СѓРґРѕР±РЅРѕРјСѓ РІРёРґСѓ
 2552:     visits_view = []
 2553:     for v in visits:
 2554:         sid = str(v.get("service_id") or "")
 2555:         did = str(v.get("doctor_id") or "")
 2556:         rid = str(v.get("room_id") or "")
 2557:         st_key = v.get("status_key", "")
 2558:         v_start = to_dt(v.get("start"))
 2559:         v_end = to_dt(v.get("end"))
 2560:         if not v_start:
 2561:             continue
 2562:         if not v_end:
 2563:             dur = service_map.get(sid, {}).get("duration_min", 30)
 2564:             try:
 2565:                 dur = int(dur)
 2566:             except:
 2567:                 dur = 30
 2568:             v_end = add_minutes(v_start, dur)
 2569: 
 2570:         visits_view.append(
 2571:             {
 2572:                 "_id": str(v["_id"]),
 2573:                 "start_iso": v_start.strftime("%Y-%m-%d %H:%M"),
 2574:                 "end_iso": v_end.strftime("%Y-%m-%d %H:%M"),
 2575:                 "doctor": doctor_map.get(did, {}).get("full_name", "вЂ”"),
 2576:                 "service": service_map.get(sid, {}).get("name", "вЂ”"),
 2577:                 "service_price": service_map.get(sid, {}).get("price", None),
 2578:                 "room": room_map.get(rid, {}).get("name", "вЂ”"),
 2579:                 "status": status_map.get(st_key, {}).get("title", "вЂ”"),
 2580:                 "status_color": status_map.get(st_key, {}).get("color", "#3498db"),
 2581:                 "sum": v.get("sum", 0),
 2582:                 "comment": v.get("comment", ""),
 2583:             }
 2584:         )
 2585: 
 2586:     return render_template("patient_card.html", p=p, visits=visits_view)
 2587: 
 2588: 
 2589: # =================== /РџРђР¦РР•РќРўР« (patients) ======================
 2590: 
 2591: # ======= Р—РђРџРЈРЎРљ =======
 2592: if __name__ == "__main__":
 2593:     app.run(debug=True)
