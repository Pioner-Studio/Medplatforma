    1: # tools/generate_docs.py
    2: # ClubStom docs + zip generator
    3: import argparse
    4: import datetime as dt
    5: import importlib.util
    6: import io
    7: import json
    8: import os
    9: from pathlib import Path
   10: import sys
   11: import traceback
   12: import zipfile
   13: import ast
   14: 
   15: ROOT = Path(__file__).resolve().parents[1]
   16: DOCS = ROOT / "docs"
   17: EXPORTS = ROOT / "exports"
   18: TEMPLATES_DIR = ROOT / "templates"
   19: STATIC_DIR = ROOT / "static"
   20: 
   21: DOCS.mkdir(exist_ok=True)
   22: EXPORTS.mkdir(exist_ok=True)
   23: 
   24: def _load_flask_app():
   25:     """
   26:     РРјРїРѕСЂС‚РёСЂСѓРµС‚ app РёР· main.py (РёР»Рё РёР· С„Р°Р№Р»Р°, РїРµСЂРµРґР°РЅРЅРѕРіРѕ С‡РµСЂРµР· --app).
   27:     Р’РѕР·РІСЂР°С‰Р°РµС‚ (app, error_text|None)
   28:     """
   29:     # РёС‰РµРј main.py РІ РєРѕСЂРЅРµ
   30:     main_py = ROOT / "main.py"
   31:     if not main_py.exists():
   32:         return None, f"main.py РЅРµ РЅР°Р№РґРµРЅ РїРѕ РїСѓС‚Рё: {main_py}"
   33: 
   34:     spec = importlib.util.spec_from_file_location("clubstom_main", main_py)
   35:     mod = importlib.util.module_from_spec(spec)
   36:     try:
   37:         spec.loader.exec_module(mod)  # type: ignore
   38:         app = getattr(mod, "app", None)
   39:         if app is None:
   40:             return None, "Р’ main.py РЅРµ РЅР°Р№РґРµРЅ РѕР±СЉРµРєС‚ Flask 'app'."
   41:         return app, None
   42:     except Exception:
   43:         tb = traceback.format_exc()
   44:         return None, tb
   45: 
   46: 
   47: def _dump_routes_md(app) -> str:
   48:     lines = ["# ROUTES", ""]
   49:     rows = []
   50:     dup_by_endpoint = {}
   51: 
   52:     for r in app.url_map.iter_rules():
   53:         if r.endpoint == "static":
   54:             continue
   55:         methods = ",".join(sorted(m for m in r.methods if m not in {"HEAD", "OPTIONS"}))
   56:         rows.append((str(r.rule), r.endpoint, methods))
   57:         dup_by_endpoint.setdefault(r.endpoint, set()).add(str(r.rule))
   58: 
   59:     rows.sort(key=lambda x: (x[0], x[1]))
   60:     lines.append("| Route | Endpoint | Methods |")
   61:     lines.append("|---|---|---|")
   62:     for route, endpoint, methods in rows:
   63:         lines.append(f"| `{route}` | **{endpoint}** | {methods} |")
   64: 
   65:     # РґСѓР±Р»РёРєР°С‚С‹ endpoint'РѕРІ (РѕРґРёРЅ endpoint РЅР° СЂР°Р·РЅС‹Рµ РїСЂР°РІРёР»Р° вЂ” СЌС‚Рѕ РѕРє,
   66:     # РЅРѕ РµСЃР»Рё РёС… РѕС‡РµРЅСЊ РјРЅРѕРіРѕ вЂ” Р±СѓРґРµРј РІРёРґРµС‚СЊ РІРЅРёР·Сѓ)
   67:     dups = {k: v for k, v in dup_by_endpoint.items() if len(v) > 1}
   68:     if dups:
   69:         lines += ["", "## Endpoint duplicates (review)", ""]
   70:         for ep, rules in sorted(dups.items()):
   71:             lines.append(f"- **{ep}** в†’ {', '.join(f'`{x}`' for x in sorted(rules))}")
   72: 
   73:     return "\n".join(lines) + "\n"
   74: 
   75: 
   76: def _dump_templates_md() -> str:
   77:     lines = ["# TEMPLATES", ""]
   78:     if not TEMPLATES_DIR.exists():
   79:         lines.append("_templates/ РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚_")
   80:         return "\n".join(lines) + "\n"
   81: 
   82:     def rel(p: Path) -> str:
   83:         return str(p.relative_to(ROOT)).replace("\\", "/")
   84: 
   85:     files = sorted(TEMPLATES_DIR.rglob("*.*"))
   86:     lines.append("| File | Size |")
   87:     lines.append("|---|---:|")
   88:     for f in files:
   89:         if f.is_file():
   90:             lines.append(f"| `{rel(f)}` | {f.stat().st_size} |")
   91:     return "\n".join(lines) + "\n"
   92: 
   93: 
   94: def _dump_inventory_md() -> str:
   95:     lines = ["# INVENTORY", ""]
   96:     def tree(base: Path, title: str):
   97:         lines.append(f"## {title}")
   98:         if not base.exists():
   99:             lines.append(f"_{base.name} РѕС‚СЃСѓС‚СЃС‚РІСѓРµС‚_")
  100:             lines.append("")
  101:             return
  102:         for p in sorted(base.rglob("*")):
  103:             if p.is_dir():
  104:                 continue
  105:             rel = str(p.relative_to(ROOT)).replace("\\", "/")
  106:             size = p.stat().st_size
  107:             lines.append(f"- `{rel}` ({size} bytes)")
  108:         lines.append("")
  109: 
  110:     tree(TEMPLATES_DIR, "templates/")
  111:     tree(STATIC_DIR, "static/")
  112:     return "\n".join(lines)
  113: 
  114: 
  115: def _append_status_md(note: str | None):
  116:     status = ROOT / "docs" / "STATUS.md"
  117:     ts = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
  118:     block = [
  119:         f"### {ts}",
  120:         "- Р­РєСЃРїРѕСЂС‚ РјР°СЂС€СЂСѓС‚РѕРІ/СЃС‚СЂСѓРєС‚СѓСЂС‹ РІС‹РїРѕР»РЅРµРЅ.",
  121:     ]
  122:     if note:
  123:         block.append(f"- Р—Р°РјРµС‚РєР°: {note}")
  124:     block.append("")
  125:     previous = status.read_text(encoding="utf-8") if status.exists() else "# STATUS\n\n"
  126:     status.write_text(previous + "\n".join(block), encoding="utf-8")
  127: 
  128: 
  129: def _make_zip(note: str | None) -> Path:
  130:     ts = dt.datetime.now().strftime("%Y-%m-%d_%H-%M")
  131:     zip_path = EXPORTS / f"clubstom_{ts}.zip"
  132: 
  133:     # С‡С‚Рѕ РєР»Р°РґС‘Рј
  134:     include = [
  135:         "main.py",
  136:         "requirements.txt",
  137:         "templates/",
  138:         "static/",
  139:         "uploads/",
  140:         "docs/",
  141:         "tools/",
  142:     ]
  143:     exclude_prefixes = {
  144:         ".git", "__pycache__", "venv", ".venv", "exports", ".mypy_cache",
  145:         ".pytest_cache", ".idea", ".vscode"
  146:     }
  147: 
  148:     def allowed(path: Path) -> bool:
  149:         parts = set(p.name for p in path.parents)
  150:         if any(seg in exclude_prefixes for seg in parts):
  151:             return False
  152:         name = path.name
  153:         if name in exclude_prefixes:
  154:             return False
  155:         return True
  156: 
  157:     with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zf:
  158:         for item in include:
  159:             src = ROOT / item
  160:             if not src.exists():
  161:                 continue
  162:             if src.is_file():
  163:                 if allowed(src):
  164:                     zf.write(src, arcname=str(src.relative_to(ROOT)))
  165:             else:
  166:                 for f in src.rglob("*"):
  167:                     if f.is_file() and allowed(f):
  168:                         zf.write(f, arcname=str(f.relative_to(ROOT)))
  169:         # manifest.json РІРЅСѓС‚СЂСЊ Р°СЂС…РёРІР°
  170:         manifest = {
  171:             "generated_at": dt.datetime.now().isoformat(timespec="seconds"),
  172:             "note": note or "",
  173:             "root": str(ROOT),
  174:         }
  175:         zf.writestr("manifest.json", json.dumps(manifest, ensure_ascii=False, indent=2))
  176:     return zip_path
  177: 
  178: # ---- LINT: РїСЂРѕСЃС‚С‹Рµ РїСЂРѕРІРµСЂРєРё РґСѓР±Р»РµР№ ----
  179: 
  180: def _lint_project(app) -> tuple[list[str], int]:
  181:     problems = []
  182: 
  183:     # 1) РґСѓР±Р»Рё endpoint-РѕРІ -> СЂР°Р·РЅС‹Рµ С„СѓРЅРєС†РёРё СЃ РѕРґРёРЅР°РєРѕРІС‹Рј РёРјРµРЅРµРј РІ url_map РЅРµ РїРѕР№РјР°РµРј,
  184:     #   РЅРѕ СѓРІРёРґРёРј РјРЅРѕРіРѕ РїСЂР°РІРёР» РЅР° РѕРґРёРЅ endpoint
  185:     endpoint_to_rules = {}
  186:     rule_to_methods = {}
  187:     for r in app.url_map.iter_rules():
  188:         if r.endpoint == "static":
  189:             continue
  190:         endpoint_to_rules.setdefault(r.endpoint, set()).add(str(r.rule))
  191:         rule_to_methods.setdefault(str(r.rule), set()).update(r.methods or set())
  192: 
  193:     for ep, rules in endpoint_to_rules.items():
  194:         if len(rules) > 1:
  195:             problems.append(f"[routes] endpoint '{ep}' РѕР±СЃР»СѓР¶РёРІР°РµС‚ РЅРµСЃРєРѕР»СЊРєРѕ РїСЂР°РІРёР»: {sorted(rules)}")
  196: 
  197:     # 2) РґСѓР±Р»Рё РїСѓС‚РµР№ (РѕРґРЅРѕ Рё С‚Рѕ Р¶Рµ РїСЂР°РІРёР»Рѕ РґРѕР±Р°РІР»РµРЅРѕ РјРЅРѕРіРѕ СЂР°Р·)
  198:     for rule, methods in rule_to_methods.items():
  199:         # СЌС‚Рѕ РЅРµ СЃС‚СЂРѕРіРёР№ РґСѓР±Р»СЊ, РЅРѕ РµСЃР»Рё Сѓ РЅР°СЃ РѕРґРЅРѕ Рё С‚Рѕ Р¶Рµ РїСЂР°РІРёР»Рѕ РѕР±СЉСЏРІР»РµРЅРѕ РЅРµСЃРєРѕР»СЊРєРѕ СЂР°Р·,
  200:         # РѕР±С‹С‡РЅРѕ СЌС‚Рѕ РїСЂРёР·РЅР°Рє РєРѕРїРёРїР°СЃС‚С‹. РћС‚РјРµС‚РёРј, РµСЃР»Рё >3 РјРµС‚РѕРґРѕРІ (GET/POST/PUT/DELETE) СЃС‚СЂР°РЅРЅРѕ.
  201:         pass
  202: 
  203:     # 3) РґСѓР±Р»Рё С„СѓРЅРєС†РёР№ РІ main.py
  204:     main_py = ROOT / "main.py"
  205:     if main_py.exists():
  206:         tree = ast.parse(main_py.read_text(encoding="utf-8"))
  207:         fnames = {}
  208:         for node in ast.walk(tree):
  209:             if isinstance(node, ast.FunctionDef):
  210:                 fnames.setdefault(node.name, 0)
  211:                 fnames[node.name] += 1
  212:         dups = [name for name, cnt in fnames.items() if cnt > 1]
  213:         for name in sorted(dups):
  214:             problems.append(f"[code] С„СѓРЅРєС†РёСЏ '{name}' РѕРїСЂРµРґРµР»РµРЅР° РЅРµСЃРєРѕР»СЊРєРѕ СЂР°Р·")
  215: 
  216:     return problems, len(problems)
  217: 
  218: def main():
  219:     parser = argparse.ArgumentParser(description="ClubStom docs/zip generator")
  220:     parser.add_argument("--zip", action="store_true", help="СЃРґРµР»Р°С‚СЊ Р°СЂС…РёРІ РїСЂРѕРµРєС‚Р° РІ /exports")
  221:     parser.add_argument("--note", type=str, default="", help="Р·Р°РјРµС‚РєР°/РєРѕРјРјРµРЅС‚Р°СЂРёР№ РІ STATUS.md Рё manifest.json")
  222:     args = parser.parse_args()
  223: 
  224:     app, err = _load_flask_app()
  225:     if err:
  226:         # РїРёС€РµРј РѕС€РёР±РєСѓ РІ ROUTES.md Рё РІС‹С…РѕРґРёРј В«РјСЏРіРєРѕВ»
  227:         (DOCS / "ROUTES.md").write_text(
  228:             "# ROUTES\n\n"
  229:             "РќРµ СѓРґР°Р»РѕСЃСЊ РёРјРїРѕСЂС‚РёСЂРѕРІР°С‚СЊ РїСЂРёР»РѕР¶РµРЅРёРµ:\n\n```\n"
  230:             + err +
  231:             "\n```\n",
  232:             encoding="utf-8",
  233:         )
  234:         print("[WARN] РћС€РёР±РєР° РёРјРїРѕСЂС‚Р° app. РџРѕРґСЂРѕР±РЅРѕСЃС‚Рё РІ docs/ROUTES.md")
  235:     else:
  236:         routes_md = _dump_routes_md(app)
  237:         (DOCS / "ROUTES.md").write_text(routes_md, encoding="utf-8")
  238:         print("[OK] docs/ROUTES.md РѕР±РЅРѕРІР»С‘РЅ")
  239: 
  240:     (DOCS / "TEMPLATES.md").write_text(_dump_templates_md(), encoding="utf-8")
  241:     (DOCS / "INVENTORY.md").write_text(_dump_inventory_md(), encoding="utf-8")
  242:     _append_status_md(args.note)
  243: 
  244:     if args.zip:
  245:         path = _make_zip(args.note)
  246:         print(f"[OK] РђСЂС…РёРІ СЃРѕР·РґР°РЅ: {path}")
  247: 
  248: if __name__ == "__main__":
  249:     main()
