    1: # tools/export_project.py
    2: # Экспортирует:
    3: #  - список файлов (git tracked)
    4: #  - дамп маршрутов Flask (через main.app)
    5: #  - шаблоны/руты с нумерацией строк (ai_export/)
    6: #  - чек-лист (docs/CHECKLIST.md) и reference (docs/reference.md)
    7: #  - упаковывает в ZIP docs/export_YYYY-MM-DD_HH-MM-SS.zip
    8: 
    9: import os
   10: import sys
   11: import io
   12: import zipfile
   13: from datetime import datetime
   14: from pathlib import Path
   15: import subprocess
   16: 
   17: ROOT = Path(__file__).resolve().parents[1]
   18: DOCS = ROOT / "docs"
   19: AI_EXPORT = DOCS / "ai_export"
   20: TOOLS = ROOT / "tools"
   21: EXPORTS = DOCS   # складываем ZIP сюда
   22: 
   23: def run(cmd, cwd=ROOT):
   24:     r = subprocess.run(cmd, cwd=cwd, capture_output=True, text=True, shell=True)
   25:     if r.returncode != 0:
   26:         raise RuntimeError(f"Command failed: {cmd}\nSTDOUT:\n{r.stdout}\nSTDERR:\n{r.stderr}")
   27:     return r.stdout.strip()
   28: 
   29: def ensure_dirs():
   30:     (DOCS).mkdir(parents=True, exist_ok=True)
   31:     (AI_EXPORT).mkdir(parents=True, exist_ok=True)
   32: 
   33: def export_filelist():
   34:     out = run("git ls-files")
   35:     p = DOCS / "filelist.txt"
   36:     p.write_text(out, encoding="utf-8")
   37:     return p
   38: 
   39: def export_line_numbered_sources():
   40:     patterns = ["*.py","*.html","*.css","*.js"]
   41:     created = []
   42:     for pat in patterns:
   43:         for f in ROOT.rglob(pat):
   44:             # пропускаем виртуальное окружение и .git
   45:             if ".venv" in f.parts or ".git" in f.parts: 
   46:                 continue
   47:             rel = f.relative_to(ROOT)
   48:             out = AI_EXPORT / (str(rel) + ".ln.txt")
   49:             out.parent.mkdir(parents=True, exist_ok=True)
   50:             try:
   51:                 lines = f.read_text(encoding="utf-8", errors="ignore").splitlines()
   52:             except Exception:
   53:                 continue
   54:             with out.open("w", encoding="utf-8") as w:
   55:                 for i, line in enumerate(lines, 1):
   56:                     w.write(f"{i:5}: {line}\n")
   57:             created.append(out)
   58:     return created
   59: 
   60: def export_routes():
   61:     # Чтобы не дублировать код, просто вызовем tools/dump_routes.py и сохраним вывод
   62:     try:
   63:         out = run(f"{sys.executable} {TOOLS / 'dump_routes.py'}")
   64:     except RuntimeError as e:
   65:         out = str(e)
   66:     p = DOCS / "ROUTES.md"
   67:     p.write_text(out, encoding="utf-8")
   68:     return p
   69: 
   70: def export_checklist_reference():
   71:     # Заготовки, чтобы ассистент всегда видел актуальные документы
   72:     ck = DOCS / "CHECKLIST.md"
   73:     if not ck.exists():
   74:         ck.write_text("# CHECKLIST (живой)\n\n- [ ] Заполнить чек-лист\n", encoding="utf-8")
   75:     rf = DOCS / "reference.md"
   76:     if not rf.exists():
   77:         rf.write_text("# reference.md\n\nГлоссарий и договорённости.\n", encoding="utf-8")
   78:     return [ck, rf]
   79: 
   80: def make_zip(note: str = ""):
   81:     ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
   82:     zname = EXPORTS / f"export_{ts}.zip"
   83:     with zipfile.ZipFile(zname, "w", compression=zipfile.ZIP_DEFLATED) as z:
   84:         # вложим docs, ai_export и важные файлы
   85:         for p in (DOCS, AI_EXPORT):
   86:             for f in p.rglob("*"):
   87:                 if f.is_file():
   88:                     z.write(f, f.relative_to(ROOT))
   89:         # положим маленькую заметку
   90:         if note:
   91:             z.writestr("docs/NOTE.txt", note)
   92:     return zname
   93: 
   94: def main():
   95:     import argparse
   96:     parser = argparse.ArgumentParser()
   97:     parser.add_argument("--note", default="", help="Короткая заметка к экспорту")
   98:     args = parser.parse_args()
   99: 
  100:     ensure_dirs()
  101:     export_filelist()
  102:     export_line_numbered_sources()
  103:     export_checklist_reference()
  104:     export_routes()
  105:     z = make_zip(args.note)
  106:     print(f"OK: экспорт готов -> {z}")
  107: 
  108: if __name__ == "__main__":
  109:     main()
