    1: import argparse, inspect, pathlib, re, sys
    2: from textwrap import indent
    3: 
    4: ROOT = pathlib.Path(__file__).resolve().parents[1]
    5: 
    6: def read(path: pathlib.Path) -> str:
    7:     return path.read_text(encoding="utf-8", errors="ignore")
    8: 
    9: def find_app():
   10:     sys.path.insert(0, str(ROOT))
   11:     # подстрой под свой вход: main.py с app
   12:     from main import app  # noqa: E402
   13:     return app
   14: 
   15: def dump_routes():
   16:     app = find_app()
   17:     rows = []
   18:     for r in sorted(app.url_map.iter_rules(), key=lambda x: x.rule):
   19:         methods = ",".join(sorted(m for m in r.methods if m not in {"HEAD","OPTIONS"}))
   20:         rows.append(f"- `{r.rule}`  → **{r.endpoint}**  [{methods}]")
   21:     print("# ROUTES\n")
   22:     print("\n".join(rows))
   23: 
   24: def dump_endpoint(name: str):
   25:     app = find_app()
   26:     view = app.view_functions.get(name)
   27:     if not view:
   28:         sys.exit(f"Endpoint '{name}' not found")
   29:     src = inspect.getsource(view)
   30:     file = inspect.getsourcefile(view)
   31:     print(f"=== BEGIN ENDPOINT: {name} ({file}) ===")
   32:     print(src.rstrip())
   33:     print("=== END ENDPOINT ===")
   34:     # попробуем показать декораторы маршрутов из исходника файла
   35:     if file:
   36:         text = read(pathlib.Path(file))
   37:         # грубо: ищем все @app.route(...) прямо над функцией
   38:         pat = re.compile(rf"(@app\.route\([^)]+\)\s*\n)+def\s+{view.__name__}\b", re.M)
   39:         m = pat.search(text)
   40:         if m:
   41:             print("\n# Decorators\n")
   42:             print(indent(m.group(0).split("def")[0].rstrip(), "    "))
   43: 
   44: def dump_template(path: str):
   45:     p = ROOT / path
   46:     if not p.exists():
   47:         sys.exit(f"Template not found: {p}")
   48:     print(f"=== BEGIN FILE: {path} ===")
   49:     print(read(p).rstrip())
   50:     print("=== END FILE ===")
   51: 
   52: def dump_bundle(patterns):
   53:     print("# REVIEW BUNDLE\n")
   54:     for pat in patterns:
   55:         for p in sorted(ROOT.glob(pat)):
   56:             if p.is_file():
   57:                 print(f"\n=== BEGIN FILE: {p.relative_to(ROOT)} ===")
   58:                 print(read(p).rstrip())
   59:                 print("=== END FILE ===")
   60: 
   61: if __name__ == "__main__":
   62:     ap = argparse.ArgumentParser()
   63:     ap.add_argument("--routes", action="store_true")
   64:     ap.add_argument("--endpoint")
   65:     ap.add_argument("--template")
   66:     ap.add_argument("--bundle", nargs="+")
   67:     args = ap.parse_args()
   68: 
   69:     try:
   70:         if args.routes:
   71:             dump_routes()
   72:         elif args.endpoint:
   73:             dump_endpoint(args.endpoint)
   74:         elif args.template:
   75:             dump_template(args.template)
   76:         elif args.bundle:
   77:             dump_bundle(args.bundle)
   78:         else:
   79:             print("Use --routes | --endpoint <name> | --template <path> | --bundle <globs...>")
   80:     except Exception as e:
   81:         print(f"ERROR: {e}", file=sys.stderr)
   82:         raise
