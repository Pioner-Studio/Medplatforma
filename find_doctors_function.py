#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors
"""

import os
import re


def find_doctors_functions():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors"""
    print("üîç –ü–û–ò–°–ö –§–£–ù–ö–¶–ò–ô DOCTORS")
    print("=" * 30)

    main_py_path = "main.py"

    if not os.path.exists(main_py_path):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # –ò—â–µ–º –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ doctors
    doctors_functions = []

    for i, line in enumerate(lines):
        if "def doctors(" in line:
            # –ù–∞–π–¥–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ (–º–∞—Ä—à—Ä—É—Ç)
            route_line = None
            for j in range(max(0, i - 5), i):
                if "@app.route(" in lines[j] and "/doctors" in lines[j]:
                    route_line = j
                    break

            doctors_functions.append(
                {
                    "route_line": route_line,
                    "def_line": i,
                    "route_text": lines[route_line].strip() if route_line else "–ù–µ –Ω–∞–π–¥–µ–Ω",
                    "def_text": line.strip(),
                }
            )

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(doctors_functions)} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ doctors:")
    for idx, func in enumerate(doctors_functions):
        print(f"\n   {idx + 1}. –°—Ç—Ä–æ–∫–∞ {func['def_line'] + 1}:")
        print(f"      –ú–∞—Ä—à—Ä—É—Ç: {func['route_text']}")
        print(f"      –§—É–Ω–∫—Ü–∏—è: {func['def_text']}")

    return doctors_functions


def remove_duplicate_doctors():
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π doctors"""
    print(f"\nüîß –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò DOCTORS")
    print("=" * 45)

    main_py_path = "main.py"

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = main_py_path + ".backup_doctors"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")

    # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π doctors
    pattern = r"@app\.route\(\'/doctors\'\)[^\n]*\ndef doctors\(\):.*?(?=@app\.route|if __name__|$)"
    matches = list(re.finditer(pattern, content, re.DOTALL))

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(matches)} –±–ª–æ–∫–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π doctors")

    if len(matches) > 1:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ
        for match in reversed(matches[1:]):
            print(f"‚ùå –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {match.start()}-{match.end()}")
            content = content[: match.start()] + content[match.end() :]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(main_py_path, "w", encoding="utf-8") as f:
            f.write(content)

        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(matches) - 1} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –±–ª–æ–∫–æ–≤")
    elif len(matches) == 1:
        print("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±–ª–æ–∫ - –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ—Ç")
    else:
        print("‚ö†Ô∏è –ë–ª–æ–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π doctors –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return True


def remove_all_our_added_routes():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—à–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏"""
    print(f"\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –î–û–ë–ê–í–õ–ï–ù–ù–´–• –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 45)

    main_py_path = "main.py"

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–æ–±—ã—á–Ω–æ —ç—Ç–æ —á—Ç–æ-—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å API)

    # –ò—â–µ–º –º–µ—Å—Ç–æ, –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –Ω–∞—à–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    # –û–±—ã—á–Ω–æ –æ–Ω–∏ –∏–¥—É—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ @app.route —Å API
    lines = content.split("\n")

    # –ù–∞–π–¥–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (API –º–∞—Ä—à—Ä—É—Ç—ã –æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞)
    last_original_route = -1
    added_routes_start = -1

    for i, line in enumerate(lines):
        if "@app.route(" in line:
            if "/api/" in line or "api_" in lines[i + 1] if i + 1 < len(lines) else False:
                last_original_route = i
            elif any(
                route in line
                for route in ["/patients", "/services", "/doctors", "/rooms", "/reports"]
            ):
                if added_routes_start == -1:
                    added_routes_start = i

    if added_routes_start > last_original_route and added_routes_start != -1:
        print(f"üìç –ù–∞–π–¥–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ {added_routes_start + 1}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç added_routes_start –¥–æ if __name__
        main_block_start = -1
        for i, line in enumerate(lines):
            if "if __name__ ==" in line:
                main_block_start = i
                break

        if main_block_start != -1:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ + –≥–ª–∞–≤–Ω—ã–π –±–ª–æ–∫
            new_lines = lines[:added_routes_start] + lines[main_block_start:]
            content = "\n".join(new_lines)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(main_py_path, "w", encoding="utf-8") as f:
                f.write(content)

            print(
                f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Å—Ç—Ä–æ–∫–∏ {added_routes_start + 1}-{main_block_start})"
            )
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ if __name__")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤")

    return True


def check_remaining_routes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print(f"\nüìã –ü–†–û–í–ï–†–ö–ê –û–°–¢–ê–í–®–ò–•–°–Ø –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 35)

    main_py_path = "main.py"

    with open(main_py_path, "r", encoding="utf-8") as f:
        content = f.read()

    # –ò—â–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
    route_pattern = r'@app\.route\([\'"]([^\'"]+)[\'"].*?\)\s*\ndef\s+(\w+)'
    routes = re.findall(route_pattern, content, re.MULTILINE)

    print("üìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ä—à—Ä—É—Ç—ã:")
    for route_path, function_name in routes:
        if route_path in ["/patients", "/services", "/doctors", "/rooms", "/reports"]:
            print(f"   {route_path} ‚Üí {function_name}()")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    function_names = [func for route, func in routes]
    duplicates = {name for name in function_names if function_names.count(name) > 1}

    if duplicates:
        print(f"\n‚ùå –í—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã: {duplicates}")
        return False
    else:
        print(f"\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –§–£–ù–ö–¶–ò–ï–ô DOCTORS")
    print("=" * 50)

    # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ doctors
    doctors_funcs = find_doctors_functions()

    if not doctors_funcs:
        print("‚ùå –§—É–Ω–∫—Ü–∏–∏ doctors –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    if len(doctors_funcs) == 1:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è doctors - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º")
        return

    # 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç—ã
    remove_all_our_added_routes()

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if check_remaining_routes():
        print("\nüéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!")
        print("\n–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:")
        print("python main.py")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ main.py:")
        with open("main.py", "r", encoding="utf-8") as f:
            lines = f.readlines()

        for i, line in enumerate(lines[-20:], len(lines) - 19):
            print(f"{i:4d}: {line.rstrip()}")


if __name__ == "__main__":
    main()
